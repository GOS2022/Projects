
GOS2022_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019084  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d70  08019258  08019258  0001a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afc8  0801afc8  0001d3c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801afc8  0801afc8  0001bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afd0  0801afd0  0001d3c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afd0  0801afd0  0001bfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afd4  0801afd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013c0  20000000  0801afd8  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008194  200013c0  0801c398  0001d3c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20009554  0801c398  0001d554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d3c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b967  00000000  00000000  0001d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008a84  00000000  00000000  00048d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  000517e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aad  00000000  00000000  00053bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004edcb  00000000  00000000  00055685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041b2e  00000000  00000000  000a4450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0db0  00000000  00000000  000e5f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d6d2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c10  00000000  00000000  001d6d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001e0984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200013c0 	.word	0x200013c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801923c 	.word	0x0801923c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200013c4 	.word	0x200013c4
 800020c:	0801923c 	.word	0x0801923c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8000ede:	2355      	movs	r3, #85	@ 0x55
 8000ee0:	71fb      	strb	r3, [r7, #7]
     * Function code.
     */
    // Low-level initialization.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
    		"HAL library initialization",
			HAL_Init() == HAL_OK ? GOS_SUCCESS : GOS_ERROR
 8000ee2:	f000 fe1f 	bl	8001b24 <HAL_Init>
 8000ee6:	4603      	mov	r3, r0
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <gos_platformDriverInit+0x18>
 8000eec:	2355      	movs	r3, #85	@ 0x55
 8000eee:	e000      	b.n	8000ef2 <gos_platformDriverInit+0x1a>
 8000ef0:	23ae      	movs	r3, #174	@ 0xae
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <gos_platformDriverInit+0xb4>)
 8000ef6:	f000 fdb1 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4013      	ands	r3, r2
 8000f02:	71fb      	strb	r3, [r7, #7]
    );

    // Driver initialization.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("Driver initialization", driver_init());
 8000f04:	f000 fb2a 	bl	800155c <driver_init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4820      	ldr	r0, [pc, #128]	@ (8000f90 <gos_platformDriverInit+0xb8>)
 8000f0e:	f000 fda5 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	71fb      	strb	r3, [r7, #7]

    // Register kernel drivers.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("Kernel driver registration", gos_driverInit(&driverFunctions));
 8000f1c:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <gos_platformDriverInit+0xbc>)
 8000f1e:	f00f f8c5 	bl	80100ac <gos_driverInit>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4619      	mov	r1, r3
 8000f26:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <gos_platformDriverInit+0xc0>)
 8000f28:	f000 fd98 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4013      	ands	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]

    SysTick->VAL = 0;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <gos_platformDriverInit+0xc4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <gos_platformDriverInit+0xc4>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f42:	b662      	cpsie	i
}
 8000f44:	bf00      	nop

    __enable_irq();

    // Initialize bootloader.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("PDH board-specific initialization", app_pdhBdSpecInit());
 8000f46:	f000 f95b 	bl	8001200 <app_pdhBdSpecInit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <gos_platformDriverInit+0xc8>)
 8000f50:	f000 fd84 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	71fb      	strb	r3, [r7, #7]
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("APP bootloader initialization", app_bld_init());
 8000f5e:	f000 f83f 	bl	8000fe0 <app_bld_init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	480f      	ldr	r0, [pc, #60]	@ (8000fa4 <gos_platformDriverInit+0xcc>)
 8000f68:	f000 fd78 	bl	8001a5c <trace_driverEnqueueTraceMessage>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4013      	ands	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b55      	cmp	r3, #85	@ 0x55
 8000f7a:	d001      	beq.n	8000f80 <gos_platformDriverInit+0xa8>
	{
    	platformDriverInitResult = GOS_ERROR;
 8000f7c:	23ae      	movs	r3, #174	@ 0xae
 8000f7e:	71fb      	strb	r3, [r7, #7]
	}

	return platformDriverInitResult;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	08019258 	.word	0x08019258
 8000f90:	08019274 	.word	0x08019274
 8000f94:	20000000 	.word	0x20000000
 8000f98:	0801928c 	.word	0x0801928c
 8000f9c:	e000e010 	.word	0xe000e010
 8000fa0:	080192a8 	.word	0x080192a8
 8000fa4:	080192cc 	.word	0x080192cc

08000fa8 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t appInitResult = GOS_SUCCESS;
 8000fae:	2355      	movs	r3, #85	@ 0x55
 8000fb0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Flush trace entries.
    trace_driverFlushTraceEntries();
 8000fb2:	f000 fd87 	bl	8001ac4 <trace_driverFlushTraceEntries>

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8000fb6:	f00c fc6f 	bl	800d898 <svl_dsmInit>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	71fb      	strb	r3, [r7, #7]

	// Enable WiFi module.
	(void_t) drv_gpioWritePin(IO_WEMOS_RST, GPIO_STATE_HIGH);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f009 fe64 	bl	800ac94 <drv_gpioWritePin>

	if (appInitResult != GOS_SUCCESS)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b55      	cmp	r3, #85	@ 0x55
 8000fd0:	d001      	beq.n	8000fd6 <gos_userApplicationInit+0x2e>
	{
		appInitResult = GOS_ERROR;
 8000fd2:	23ae      	movs	r3, #174	@ 0xae
 8000fd4:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <app_bld_init>:

/*
 * Function: app_bld_init
 */
gos_result_t app_bld_init (void_t)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8000fe6:	2355      	movs	r3, #85	@ 0x55
 8000fe8:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Update build date.
	gos_libGetBuildDate(&bldVerInfo.date.years, &bldVerInfo.date.months, &bldVerInfo.date.days);
 8000fea:	4a28      	ldr	r2, [pc, #160]	@ (800108c <app_bld_init+0xac>)
 8000fec:	4928      	ldr	r1, [pc, #160]	@ (8001090 <app_bld_init+0xb0>)
 8000fee:	4829      	ldr	r0, [pc, #164]	@ (8001094 <app_bld_init+0xb4>)
 8000ff0:	f008 f832 	bl	8009058 <gos_libGetBuildDate>

	if (bld_initData(&bldVerInfo) == GOS_SUCCESS)
 8000ff4:	4828      	ldr	r0, [pc, #160]	@ (8001098 <app_bld_init+0xb8>)
 8000ff6:	f008 fb91 	bl	800971c <bld_initData>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b55      	cmp	r3, #85	@ 0x55
 8000ffe:	d13d      	bne.n	800107c <app_bld_init+0x9c>
	{
		(void_t) bld_initConfig();
 8001000:	f008 fc40 	bl	8009884 <bld_initConfig>
		(void_t) svl_pdhGetBldCfg(&bldCfg);
 8001004:	4825      	ldr	r0, [pc, #148]	@ (800109c <app_bld_init+0xbc>)
 8001006:	f00d fdc9 	bl	800eb9c <svl_pdhGetBldCfg>
		(void_t) svl_pdhGetSwInfo(&swInfo);
 800100a:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <app_bld_init+0xc0>)
 800100c:	f00d fd56 	bl	800eabc <svl_pdhGetSwInfo>
		(void_t) bld_printConfig();
 8001010:	f008 fc8a 	bl	8009928 <bld_printConfig>

		if ((bldCfg.updateMode == GOS_TRUE) || (bldCfg.installRequested == GOS_TRUE))
 8001014:	4b21      	ldr	r3, [pc, #132]	@ (800109c <app_bld_init+0xbc>)
 8001016:	791b      	ldrb	r3, [r3, #4]
 8001018:	2b36      	cmp	r3, #54	@ 0x36
 800101a:	d003      	beq.n	8001024 <app_bld_init+0x44>
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <app_bld_init+0xbc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b36      	cmp	r3, #54	@ 0x36
 8001022:	d10f      	bne.n	8001044 <app_bld_init+0x64>
		{
			// Increase startup counter (so next startup will skip boot mode enter).
			bldCfg.startupCounter++;
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <app_bld_init+0xbc>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <app_bld_init+0xbc>)
 800102e:	715a      	strb	r2, [r3, #5]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001030:	481a      	ldr	r0, [pc, #104]	@ (800109c <app_bld_init+0xbc>)
 8001032:	f00d fe93 	bl	800ed5c <svl_pdhSetBldCfg>

			// IPL shall only be initialized if update is requested.
			if (bldCfg.updateMode == GOS_TRUE)
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <app_bld_init+0xbc>)
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	2b36      	cmp	r3, #54	@ 0x36
 800103c:	d120      	bne.n	8001080 <app_bld_init+0xa0>
			{
				(void_t) svl_iplInit();
 800103e:	f00d f805 	bl	800e04c <svl_iplInit>
			if (bldCfg.updateMode == GOS_TRUE)
 8001042:	e01d      	b.n	8001080 <app_bld_init+0xa0>
		}
		else
		{
			// Reset startup counter so next startup will enter boot mode if startup connection wait
			// flag is set.
			bldCfg.startupCounter = 0u;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <app_bld_init+0xbc>)
 8001046:	2200      	movs	r2, #0
 8001048:	715a      	strb	r2, [r3, #5]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <app_bld_init+0xbc>)
 800104c:	f00d fe86 	bl	800ed5c <svl_pdhSetBldCfg>

			// Check and jump to application.
			if (bld_checkApplication(&swInfo.appBinaryInfo, GOS_FALSE) == GOS_SUCCESS)
 8001050:	2149      	movs	r1, #73	@ 0x49
 8001052:	4814      	ldr	r0, [pc, #80]	@ (80010a4 <app_bld_init+0xc4>)
 8001054:	f008 fa6e 	bl	8009534 <bld_checkApplication>
 8001058:	4603      	mov	r3, r0
 800105a:	2b55      	cmp	r3, #85	@ 0x55
 800105c:	d104      	bne.n	8001068 <app_bld_init+0x88>
			{
				initResult = bld_jumpToApplication();
 800105e:	f008 faab 	bl	80095b8 <bld_jumpToApplication>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e00b      	b.n	8001080 <app_bld_init+0xa0>
			}
			else
			{
				// Application is corrupted or missing.
				// Switch to boot update mode.
				(void_t) gos_traceTraceFormattedUnsafe("Switching to update mode...\r\n\r\n");
 8001068:	480f      	ldr	r0, [pc, #60]	@ (80010a8 <app_bld_init+0xc8>)
 800106a:	f014 ff25 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
				bldCfg.updateMode = GOS_TRUE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <app_bld_init+0xbc>)
 8001070:	2236      	movs	r2, #54	@ 0x36
 8001072:	711a      	strb	r2, [r3, #4]
				(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001074:	4809      	ldr	r0, [pc, #36]	@ (800109c <app_bld_init+0xbc>)
 8001076:	f00d fe71 	bl	800ed5c <svl_pdhSetBldCfg>
 800107a:	e001      	b.n	8001080 <app_bld_init+0xa0>
		}
	}
	else
	{
		// Flash read error.
		initResult = GOS_ERROR;
 800107c:	23ae      	movs	r3, #174	@ 0xae
 800107e:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 8001080:	79fb      	ldrb	r3, [r7, #7]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000027 	.word	0x20000027
 8001090:	20000029 	.word	0x20000029
 8001094:	2000002a 	.word	0x2000002a
 8001098:	2000001c 	.word	0x2000001c
 800109c:	200013dc 	.word	0x200013dc
 80010a0:	200013ec 	.word	0x200013ec
 80010a4:	20001680 	.word	0x20001680
 80010a8:	080192ec 	.word	0x080192ec

080010ac <app_bldTaskInit>:

/*
 * Function: app_bldTaskInit
 */
gos_result_t app_bldTaskInit (void_t)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t bldTaskInitResult = GOS_SUCCESS;
 80010b2:	2355      	movs	r3, #85	@ 0x55
 80010b4:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	bldTaskInitResult &= gos_taskRegister(&bldTaskDesc, NULL);
 80010b6:	2100      	movs	r1, #0
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <app_bldTaskInit+0x30>)
 80010ba:	f010 f9e5 	bl	8011488 <gos_taskRegister>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4013      	ands	r3, r2
 80010c6:	71fb      	strb	r3, [r7, #7]

	if (bldTaskInitResult != GOS_SUCCESS)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b55      	cmp	r3, #85	@ 0x55
 80010cc:	d001      	beq.n	80010d2 <app_bldTaskInit+0x26>
	{
		bldTaskInitResult = GOS_ERROR;
 80010ce:	23ae      	movs	r3, #174	@ 0xae
 80010d0:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Initialization OK.
	}

	return bldTaskInitResult;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000bc 	.word	0x200000bc

080010e0 <app_bldTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t app_bldTask (void_t)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	bld_state_t bldState;
	bool_t      iplInited = GOS_FALSE;
 80010e6:	2349      	movs	r3, #73	@ 0x49
 80010e8:	73fb      	strb	r3, [r7, #15]
	u32_t       sysTicks = gos_kernelGetSysTicks();
 80010ea:	f00f f9a9 	bl	8010440 <gos_kernelGetSysTicks>
 80010ee:	60b8      	str	r0, [r7, #8]

	// Initial setting.
	drv_rtcTimeGet(&time, NULL);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4820      	ldr	r0, [pc, #128]	@ (8001174 <app_bldTask+0x94>)
 80010f4:	f000 fa88 	bl	8001608 <drv_rtcTimeGet>
	gos_timeSet(&time);
 80010f8:	481e      	ldr	r0, [pc, #120]	@ (8001174 <app_bldTask+0x94>)
 80010fa:	f014 f921 	bl	8015340 <gos_timeSet>
    /*
     * Function code.
     */
    for (;;)
    {
    	(void_t) bld_stateMachineGetState(&bldState);
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	4618      	mov	r0, r3
 8001102:	f007 fffb 	bl	80090fc <bld_stateMachineGetState>

    	switch (bldState)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d010      	beq.n	800112e <app_bldTask+0x4e>
 800110c:	2b01      	cmp	r3, #1
 800110e:	d115      	bne.n	800113c <app_bldTask+0x5c>
    	{
    		case BLD_STATE_WAIT:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 8001110:	2000      	movs	r0, #0
 8001112:	f009 fdf7 	bl	800ad04 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(500);
 8001116:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800111a:	f010 fb47 	bl	80117ac <gos_taskSleep>

    	        if (iplInited == GOS_FALSE)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b49      	cmp	r3, #73	@ 0x49
 8001122:	d112      	bne.n	800114a <app_bldTask+0x6a>
    	        {
    	        	(void_t) svl_iplInit();
 8001124:	f00c ff92 	bl	800e04c <svl_iplInit>
    	        	iplInited = GOS_TRUE;
 8001128:	2336      	movs	r3, #54	@ 0x36
 800112a:	73fb      	strb	r3, [r7, #15]
    	        }
    	        else
    	        {
    	        	// IPL already initialized.
    	        }
    			break;
 800112c:	e00d      	b.n	800114a <app_bldTask+0x6a>
    		}
    		case BLD_STATE_INSTALL:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 800112e:	2000      	movs	r0, #0
 8001130:	f009 fde8 	bl	800ad04 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(250);
 8001134:	20fa      	movs	r0, #250	@ 0xfa
 8001136:	f010 fb39 	bl	80117ac <gos_taskSleep>
    	        break;
 800113a:	e007      	b.n	800114c <app_bldTask+0x6c>
    		}
    		default:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 800113c:	2000      	movs	r0, #0
 800113e:	f009 fde1 	bl	800ad04 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(100);
 8001142:	2064      	movs	r0, #100	@ 0x64
 8001144:	f010 fb32 	bl	80117ac <gos_taskSleep>
    	        break;
 8001148:	e000      	b.n	800114c <app_bldTask+0x6c>
    			break;
 800114a:	bf00      	nop
    		}
    	}

    	if ((gos_kernelGetSysTicks() - sysTicks) > 1000)
 800114c:	f00f f978 	bl	8010440 <gos_kernelGetSysTicks>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800115a:	d9d0      	bls.n	80010fe <app_bldTask+0x1e>
    	{
    		sysTicks = gos_kernelGetSysTicks();
 800115c:	f00f f970 	bl	8010440 <gos_kernelGetSysTicks>
 8001160:	60b8      	str	r0, [r7, #8]
    		drv_rtcTimeGet(&time, NULL);
 8001162:	2100      	movs	r1, #0
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <app_bldTask+0x94>)
 8001166:	f000 fa4f 	bl	8001608 <drv_rtcTimeGet>
    		gos_timeSet(&time);
 800116a:	4802      	ldr	r0, [pc, #8]	@ (8001174 <app_bldTask+0x94>)
 800116c:	f014 f8e8 	bl	8015340 <gos_timeSet>
    	(void_t) bld_stateMachineGetState(&bldState);
 8001170:	e7c5      	b.n	80010fe <app_bldTask+0x1e>
 8001172:	bf00      	nop
 8001174:	2000168c 	.word	0x2000168c

08001178 <app_iplBdSpecInit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout);
GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout);

gos_result_t app_iplBdSpecInit (void_t)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	return svl_iplConfigure(app_iplBdSpecTransmit, app_iplBdSpecReceive);
 800117c:	4903      	ldr	r1, [pc, #12]	@ (800118c <app_iplBdSpecInit+0x14>)
 800117e:	4804      	ldr	r0, [pc, #16]	@ (8001190 <app_iplBdSpecInit+0x18>)
 8001180:	f00c ffa4 	bl	800e0cc <svl_iplConfigure>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	080011bd 	.word	0x080011bd
 8001190:	08001195 	.word	0x08001195

08001194 <app_iplBdSpecTransmit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	return drv_uartTransmitIT(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68f9      	ldr	r1, [r7, #12]
 80011ac:	2003      	movs	r0, #3
 80011ae:	f00b fd75 	bl	800cc9c <drv_uartTransmitIT>
 80011b2:	4603      	mov	r3, r0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <app_iplBdSpecReceive>:

GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	if (timeout < 0xFFFFFFFFu)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ce:	d008      	beq.n	80011e2 <app_iplBdSpecReceive+0x26>
	{
		return drv_uartReceiveBlocking(DRV_UART_INSTANCE_4, pData, dataSize, timeout);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	2003      	movs	r0, #3
 80011da:	f00b fc33 	bl	800ca44 <drv_uartReceiveBlocking>
 80011de:	4603      	mov	r3, r0
 80011e0:	e009      	b.n	80011f6 <app_iplBdSpecReceive+0x3a>
	}
	else
	{
		return drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	2003      	movs	r0, #3
 80011f0:	f00b fce4 	bl	800cbbc <drv_uartReceiveDMA>
 80011f4:	4603      	mov	r3, r0
	}
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <app_pdhBdSpecInit>:
	.readFunction  = app_pdhBdSpecRead,
	.writeFunction = app_pdhBdSpecWrite
};

gos_result_t app_pdhBdSpecInit (void_t)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	gos_result_t pdhBdSpecInitRes = GOS_SUCCESS;
 8001206:	2355      	movs	r3, #85	@ 0x55
 8001208:	71fb      	strb	r3, [r7, #7]

	pdhBdSpecInitRes &= drv_25lc640Init((void_t*)&mem01a1_eeprom2);
 800120a:	480d      	ldr	r0, [pc, #52]	@ (8001240 <app_pdhBdSpecInit+0x40>)
 800120c:	f008 fbae 	bl	800996c <drv_25lc640Init>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4013      	ands	r3, r2
 8001218:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= svl_pdhConfigure(&pdhCfg);
 800121a:	480a      	ldr	r0, [pc, #40]	@ (8001244 <app_pdhBdSpecInit+0x44>)
 800121c:	f00d fba6 	bl	800e96c <svl_pdhConfigure>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4013      	ands	r3, r2
 8001228:	71fb      	strb	r3, [r7, #7]

	if (pdhBdSpecInitRes != GOS_SUCCESS)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b55      	cmp	r3, #85	@ 0x55
 800122e:	d001      	beq.n	8001234 <app_pdhBdSpecInit+0x34>
		pdhBdSpecInitRes = GOS_ERROR;
 8001230:	23ae      	movs	r3, #174	@ 0xae
 8001232:	71fb      	strb	r3, [r7, #7]

	return pdhBdSpecInitRes;
 8001234:	79fb      	ldrb	r3, [r7, #7]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000128 	.word	0x20000128
 8001244:	20000144 	.word	0x20000144

08001248 <app_pdhBdSpecRead>:

GOS_STATIC gos_result_t app_pdhBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	4613      	mov	r3, r2
 8001254:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Read((void_t*)&mem01a1_eeprom2, address, pData, size);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	b299      	uxth	r1, r3
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <app_pdhBdSpecRead+0x28>)
 8001260:	f008 fbb2 	bl	80099c8 <drv_25lc640Read>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000128 	.word	0x20000128

08001274 <app_pdhBdSpecWrite>:

GOS_STATIC gos_result_t app_pdhBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	4613      	mov	r3, r2
 8001280:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Write((void_t*)&mem01a1_eeprom2, address, pData, size);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	b299      	uxth	r1, r3
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <app_pdhBdSpecWrite+0x28>)
 800128c:	f008 fcb6 	bl	8009bfc <drv_25lc640Write>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000128 	.word	0x20000128

080012a0 <app_sdhBdSpecInit>:
	.readFunction  = app_sdhBdSpecRead,
	.writeFunction = app_sdhBdSpecWrite
};

gos_result_t app_sdhBdSpecInit (void_t)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	gos_result_t sdhBdSpecInitRes = GOS_SUCCESS;
 80012a6:	2355      	movs	r3, #85	@ 0x55
 80012a8:	71fb      	strb	r3, [r7, #7]

	sdhBdSpecInitRes &= drv_w25q64Init((void_t*)&mem01a1flash);
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <app_sdhBdSpecInit+0x40>)
 80012ac:	f00b fff8 	bl	800d2a0 <drv_w25q64Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4013      	ands	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
	sdhBdSpecInitRes &= svl_sdhConfigure(&sdhCfg);
 80012ba:	480a      	ldr	r0, [pc, #40]	@ (80012e4 <app_sdhBdSpecInit+0x44>)
 80012bc:	f00e f8d4 	bl	800f468 <svl_sdhConfigure>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4013      	ands	r3, r2
 80012c8:	71fb      	strb	r3, [r7, #7]

	if (sdhBdSpecInitRes != GOS_SUCCESS)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b55      	cmp	r3, #85	@ 0x55
 80012ce:	d001      	beq.n	80012d4 <app_sdhBdSpecInit+0x34>
		sdhBdSpecInitRes = GOS_ERROR;
 80012d0:	23ae      	movs	r3, #174	@ 0xae
 80012d2:	71fb      	strb	r3, [r7, #7]

	return sdhBdSpecInitRes;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000014c 	.word	0x2000014c
 80012e4:	20000168 	.word	0x20000168

080012e8 <app_sdhBdSpecRead>:

GOS_STATIC gos_result_t app_sdhBdSpecRead (u32_t address, u8_t* pData, u32_t size)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	drv_w25q64ReadData((void_t*)&mem01a1flash, address, pData, size);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	4808      	ldr	r0, [pc, #32]	@ (800131c <app_sdhBdSpecRead+0x34>)
 80012fc:	f00b fffe 	bl	800d2fc <drv_w25q64ReadData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_READ) == 0u)
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <app_sdhBdSpecRead+0x34>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <app_sdhBdSpecRead+0x28>
	{
		return GOS_SUCCESS;
 800130c:	2355      	movs	r3, #85	@ 0x55
 800130e:	e000      	b.n	8001312 <app_sdhBdSpecRead+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001310:	23ae      	movs	r3, #174	@ 0xae
	}
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000014c 	.word	0x2000014c

08001320 <app_sdhBdSpecWrite>:

GOS_STATIC gos_result_t app_sdhBdSpecWrite (u32_t address, u8_t* pData, u32_t size)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	drv_w25q64WriteData((void_t*)&mem01a1flash, address, pData, size);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	68f9      	ldr	r1, [r7, #12]
 8001332:	4808      	ldr	r0, [pc, #32]	@ (8001354 <app_sdhBdSpecWrite+0x34>)
 8001334:	f00c f838 	bl	800d3a8 <drv_w25q64WriteData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_WRITE) == 0u)
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <app_sdhBdSpecWrite+0x34>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <app_sdhBdSpecWrite+0x28>
	{
		return GOS_SUCCESS;
 8001344:	2355      	movs	r3, #85	@ 0x55
 8001346:	e000      	b.n	800134a <app_sdhBdSpecWrite+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001348:	23ae      	movs	r3, #174	@ 0xae
	}
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000014c 	.word	0x2000014c

08001358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	return 1;
 800135c:	2301      	movs	r3, #1
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <_kill>:

int _kill(int pid, int sig)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001372:	f015 fee5 	bl	8017140 <__errno>
 8001376:	4603      	mov	r3, r0
 8001378:	2216      	movs	r2, #22
 800137a:	601a      	str	r2, [r3, #0]
	return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_exit>:

void _exit (int status)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ffe7 	bl	8001368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800139a:	bf00      	nop
 800139c:	e7fd      	b.n	800139a <_exit+0x12>

0800139e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e00a      	b.n	80013c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b0:	f3af 8000 	nop.w
 80013b4:	4601      	mov	r1, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf0      	blt.n	80013b0 <_read+0x12>
	}

return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e009      	b.n	80013fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbf1      	blt.n	80013ea <_write+0x12>
	}
	return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_close>:

int _close(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001438:	605a      	str	r2, [r3, #4]
	return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_isatty>:

int _isatty(int file)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f015 fe4a 	bl	8017140 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20001698 	.word	0x20001698
 80014e0:	20009558 	.word	0x20009558

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800150c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	@ (8001548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr  r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd7 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f015 fe09 	bl	801714c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f011 fd15 	bl	8012f68 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001544:	0801afd8 	.word	0x0801afd8
  ldr  r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800154c:	200013c0 	.word	0x200013c0
  ldr  r2, =_sbss
 8001550:	200013c0 	.word	0x200013c0
  ldr  r3, = _ebss
 8001554:	20009554 	.word	0x20009554

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8001562:	2355      	movs	r3, #85	@ 0x55
 8001564:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 8001566:	f000 f8cb 	bl	8001700 <rcc_driver_init>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4013      	ands	r3, r2
 8001572:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 8001574:	f00a fd52 	bl	800c01c <drv_tmrInit>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4013      	ands	r3, r2
 8001580:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 8001582:	f00a fd0d 	bl	800bfa0 <drv_systimerStart>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4013      	ands	r3, r2
 800158e:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 8001590:	f009 fabc 	bl	800ab0c <drv_gpioInit>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4013      	ands	r3, r2
 800159c:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_i2cInit();
 800159e:	f009 fcc9 	bl	800af34 <drv_i2cInit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	4013      	ands	r3, r2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_spiInit();
 80015b0:	f00a f872 	bl	800b698 <drv_spiInit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4013      	ands	r3, r2
 80015bc:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_dmaInit();
 80015be:	f008 fcc5 	bl	8009f4c <drv_dmaInit>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4013      	ands	r3, r2
 80015ca:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 80015cc:	f00b f89e 	bl	800c70c <drv_uartInit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4013      	ands	r3, r2
 80015d8:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 80015da:	f009 ffc3 	bl	800b564 <drv_itInit>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4013      	ands	r3, r2
 80015e6:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <driver_init+0x9c>)
 80015ea:	f00e fed5 	bl	8010398 <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	080015fd 	.word	0x080015fd

080015fc <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001600:	f000 fb1c 	bl	8001c3c <HAL_IncTick>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <drv_rtcTimeGet>:

/*
 * Function: drv_rtcTimeGet
 */
gos_result_t drv_rtcTimeGet (gos_time_t* pTime, u8_t* dow)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t getTimeResult = GOS_ERROR;
 8001612:	23ae      	movs	r3, #174	@ 0xae
 8001614:	73fb      	strb	r3, [r7, #15]
	u8_t         time [7];

	/*
	 * Function code.
	 */
	if (pTime != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d053      	beq.n	80016c4 <drv_rtcTimeGet+0xbc>
	{
		getTimeResult = drv_i2cMemRead(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 100);
 800161c:	2364      	movs	r3, #100	@ 0x64
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2307      	movs	r3, #7
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	2200      	movs	r2, #0
 8001634:	21d0      	movs	r1, #208	@ 0xd0
 8001636:	2000      	movs	r0, #0
 8001638:	f009 fdb4 	bl	800b1a4 <drv_i2cMemRead>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]

		if (getTimeResult == GOS_SUCCESS)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b55      	cmp	r3, #85	@ 0x55
 8001644:	d13e      	bne.n	80016c4 <drv_rtcTimeGet+0xbc>
		{
			pTime->seconds = drv_rtcBcd2dec(time[0]);
 8001646:	7a3b      	ldrb	r3, [r7, #8]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f840 	bl	80016ce <drv_rtcBcd2dec>
 800164e:	4603      	mov	r3, r0
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	709a      	strb	r2, [r3, #2]
			pTime->minutes = drv_rtcBcd2dec(time[1]);
 8001656:	7a7b      	ldrb	r3, [r7, #9]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f838 	bl	80016ce <drv_rtcBcd2dec>
 800165e:	4603      	mov	r3, r0
 8001660:	b2da      	uxtb	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	70da      	strb	r2, [r3, #3]
			pTime->hours   = drv_rtcBcd2dec(time[2]);
 8001666:	7abb      	ldrb	r3, [r7, #10]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 f830 	bl	80016ce <drv_rtcBcd2dec>
 800166e:	4603      	mov	r3, r0
 8001670:	b2da      	uxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	711a      	strb	r2, [r3, #4]
			if (dow != NULL)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <drv_rtcTimeGet+0x84>
			{
				*dow = drv_rtcBcd2dec(time[3]);
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f825 	bl	80016ce <drv_rtcBcd2dec>
 8001684:	4603      	mov	r3, r0
 8001686:	b2da      	uxtb	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	701a      	strb	r2, [r3, #0]
			}
			pTime->days    = drv_rtcBcd2dec(time[4]);
 800168c:	7b3b      	ldrb	r3, [r7, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f81d 	bl	80016ce <drv_rtcBcd2dec>
 8001694:	4603      	mov	r3, r0
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8a3 2005 	strh.w	r2, [r3, #5]
			pTime->months  = drv_rtcBcd2dec(time[5]);
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f814 	bl	80016ce <drv_rtcBcd2dec>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	71da      	strb	r2, [r3, #7]
			pTime->years   = 2000 + drv_rtcBcd2dec(time[6]);
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f80c 	bl	80016ce <drv_rtcBcd2dec>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	811a      	strh	r2, [r3, #8]
	else
	{
		// NULL pointer.
	}

	return getTimeResult;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <drv_rtcBcd2dec>:
	return (u8_t)((dec / 10 * 16) + (dec % 10));
}

// TODO
GOS_STATIC u32_t drv_rtcBcd2dec (u8_t bcd)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	return (u32_t)((bcd / 16 * 10) + (bcd % 16));
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	461a      	mov	r2, r3
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4413      	add	r3, r2
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0ac      	sub	sp, #176	@ 0xb0
 8001704:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8001706:	23ae      	movs	r3, #174	@ 0xae
 8001708:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001710:	2234      	movs	r2, #52	@ 0x34
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f015 fcb1 	bl	801707c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	663b      	str	r3, [r7, #96]	@ 0x60
 800172e:	4ba3      	ldr	r3, [pc, #652]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4aa2      	ldr	r2, [pc, #648]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4ba0      	ldr	r3, [pc, #640]	@ (80019bc <rcc_driver_init+0x2bc>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	663b      	str	r3, [r7, #96]	@ 0x60
 8001744:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001746:	2300      	movs	r3, #0
 8001748:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800174a:	4b9d      	ldr	r3, [pc, #628]	@ (80019c0 <rcc_driver_init+0x2c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001752:	4a9b      	ldr	r2, [pc, #620]	@ (80019c0 <rcc_driver_init+0x2c0>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b99      	ldr	r3, [pc, #612]	@ (80019c0 <rcc_driver_init+0x2c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001762:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001766:	2301      	movs	r3, #1
 8001768:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800176e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_OscInitStruct.PLL.PLLM = 4;
 800177e:	2304      	movs	r3, #4
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001784:	2332      	movs	r3, #50	@ 0x32
 8001786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 800179c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 fe85 	bl	80054b0 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d116      	bne.n	80017da <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	667b      	str	r3, [r7, #100]	@ 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b0:	2302      	movs	r3, #2
 80017b2:	66bb      	str	r3, [r7, #104]	@ 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017bc:	673b      	str	r3, [r7, #112]	@ 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	677b      	str	r3, [r7, #116]	@ 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 80017c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017c6:	2101      	movs	r1, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fa2f 	bl	8004c2c <HAL_RCC_ClockConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 80017d4:	2355      	movs	r3, #85	@ 0x55
 80017d6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017de:	4b77      	ldr	r3, [pc, #476]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a76      	ldr	r2, [pc, #472]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80017fa:	4b70      	ldr	r3, [pc, #448]	@ (80019bc <rcc_driver_init+0x2bc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a6f      	ldr	r2, [pc, #444]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b6d      	ldr	r3, [pc, #436]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	653b      	str	r3, [r7, #80]	@ 0x50
 8001816:	4b69      	ldr	r3, [pc, #420]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a68      	ldr	r2, [pc, #416]	@ (80019bc <rcc_driver_init+0x2bc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	653b      	str	r3, [r7, #80]	@ 0x50
 800182c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001832:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a61      	ldr	r2, [pc, #388]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b5f      	ldr	r3, [pc, #380]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800184e:	4b5b      	ldr	r3, [pc, #364]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a5a      	ldr	r2, [pc, #360]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b58      	ldr	r3, [pc, #352]	@ (80019bc <rcc_driver_init+0x2bc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
 800186a:	4b54      	ldr	r3, [pc, #336]	@ (80019bc <rcc_driver_init+0x2bc>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a53      	ldr	r2, [pc, #332]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b51      	ldr	r3, [pc, #324]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	643b      	str	r3, [r7, #64]	@ 0x40
 8001886:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a4c      	ldr	r2, [pc, #304]	@ (80019bc <rcc_driver_init+0x2bc>)
 800188c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
 800189c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018a2:	4b46      	ldr	r3, [pc, #280]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a45      	ldr	r2, [pc, #276]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018be:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a3e      	ldr	r2, [pc, #248]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b3c      	ldr	r3, [pc, #240]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	4a37      	ldr	r2, [pc, #220]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e6:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80018f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <rcc_driver_init+0x2bc>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
 800190c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6413      	str	r3, [r2, #64]	@ 0x40
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <rcc_driver_init+0x2bc>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <rcc_driver_init+0x2bc>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <rcc_driver_init+0x2bc>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001988:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <rcc_driver_init+0x2bc>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <rcc_driver_init+0x2bc>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	4a06      	ldr	r2, [pc, #24]	@ (80019bc <rcc_driver_init+0x2bc>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019aa:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <rcc_driver_init+0x2bc>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e003      	b.n	80019c4 <rcc_driver_init+0x2c4>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <rcc_driver_init+0x358>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <rcc_driver_init+0x358>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <rcc_driver_init+0x358>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <rcc_driver_init+0x358>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <rcc_driver_init+0x358>)
 80019e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <rcc_driver_init+0x358>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <rcc_driver_init+0x358>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <rcc_driver_init+0x358>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

	return initResult;
 8001a4c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	37b0      	adds	r7, #176	@ 0xb0
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800

08001a5c <trace_driverEnqueueTraceMessage>:

GOS_STATIC trace_entry_t traceEntries [TRACE_ENTRY_MAX_NUM];
GOS_STATIC u8_t          nextEntryIndex = 0u;

gos_result_t trace_driverEnqueueTraceMessage (const char_t* message, gos_result_t result)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	if (nextEntryIndex < TRACE_ENTRY_MAX_NUM)
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0b      	cmp	r3, #11
 8001a6e:	d820      	bhi.n	8001ab2 <trace_driverEnqueueTraceMessage+0x56>
	{
		(void_t) strcpy(traceEntries[nextEntryIndex].message, message);
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	00da      	lsls	r2, r3, #3
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <trace_driverEnqueueTraceMessage+0x64>)
 8001a82:	4413      	add	r3, r2
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f015 fb87 	bl	801719a <strcpy>
		traceEntries[nextEntryIndex].result = result;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	490b      	ldr	r1, [pc, #44]	@ (8001ac0 <trace_driverEnqueueTraceMessage+0x64>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	00da      	lsls	r2, r3, #3
 8001a9c:	1ad2      	subs	r2, r2, r3
 8001a9e:	188b      	adds	r3, r1, r2
 8001aa0:	3330      	adds	r3, #48	@ 0x30
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	701a      	strb	r2, [r3, #0]
		nextEntryIndex++;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <trace_driverEnqueueTraceMessage+0x60>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	else
	{
		// Trace queue full.
	}

	return result;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200018f0 	.word	0x200018f0
 8001ac0:	200016a4 	.word	0x200016a4

08001ac4 <trace_driverFlushTraceEntries>:

void_t trace_driverFlushTraceEntries (void_t)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	u8_t traceIndex = 0u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	71fb      	strb	r3, [r7, #7]

	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	e017      	b.n	8001b04 <trace_driverFlushTraceEntries+0x40>
	{
		(void_t) gos_errorTraceInit(traceEntries[traceIndex].message, traceEntries[traceIndex].result);
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	00da      	lsls	r2, r3, #3
 8001ade:	1ad2      	subs	r2, r2, r3
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <trace_driverFlushTraceEntries+0x58>)
 8001ae2:	18d0      	adds	r0, r2, r3
 8001ae4:	79fa      	ldrb	r2, [r7, #7]
 8001ae6:	490d      	ldr	r1, [pc, #52]	@ (8001b1c <trace_driverFlushTraceEntries+0x58>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	00da      	lsls	r2, r3, #3
 8001af0:	1ad2      	subs	r2, r2, r3
 8001af2:	188b      	adds	r3, r1, r2
 8001af4:	3330      	adds	r3, #48	@ 0x30
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f011 fbe1 	bl	80132c0 <gos_errorTraceInit>
	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	3301      	adds	r3, #1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <trace_driverFlushTraceEntries+0x5c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	79fa      	ldrb	r2, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3e2      	bcc.n	8001ad4 <trace_driverFlushTraceEntries+0x10>
	}

	nextEntryIndex = 0u;
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <trace_driverFlushTraceEntries+0x5c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200016a4 	.word	0x200016a4
 8001b20:	200018f0 	.word	0x200018f0

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <HAL_Init+0x40>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_Init+0x40>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <HAL_Init+0x40>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f965 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f842 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f000 f832 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b72:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001b96:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_DeInit+0x54>)
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <HAL_DeInit+0x54>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_DeInit+0x54>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_DeInit+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001bb2:	f000 f80c 	bl	8001bce <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f943 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f90b 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000170 	.word	0x20000170
 8001c34:	20000404 	.word	0x20000404
 8001c38:	20000400 	.word	0x20000400

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000404 	.word	0x20000404
 8001c60:	200018f4 	.word	0x200018f4

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200018f4 	.word	0x200018f4

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	@ (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	@ (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff feda 	bl	8001c64 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e099      	b.n	8001ff0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001edc:	e00f      	b.n	8001efe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ede:	f7ff fec1 	bl	8001c64 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d908      	bls.n	8001efe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e078      	b.n	8001ff0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e8      	bne.n	8001ede <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_DMA_Init+0x158>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d107      	bne.n	8001f68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	4313      	orrs	r3, r2
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 0307 	bic.w	r3, r3, #7
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d117      	bne.n	8001fc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fb1b 	bl	80025e0 <DMA_CheckFifoParam>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e016      	b.n	8001ff0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fad2 	bl	8002574 <DMA_CalcBaseAndBitshift>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	223f      	movs	r2, #63	@ 0x3f
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	f010803f 	.word	0xf010803f

08001ffc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002012:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_DMA_Start_IT+0x26>
 800201e:	2302      	movs	r3, #2
 8002020:	e040      	b.n	80020a4 <HAL_DMA_Start_IT+0xa8>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d12f      	bne.n	8002096 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2202      	movs	r2, #2
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fa64 	bl	8002518 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002054:	223f      	movs	r2, #63	@ 0x3f
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0216 	orr.w	r2, r2, #22
 800206a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e005      	b.n	80020a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020ba:	f7ff fdd3 	bl	8001c64 <HAL_GetTick>
 80020be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e052      	b.n	8002184 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0216 	bic.w	r2, r2, #22
 80020ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <HAL_DMA_Abort+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0208 	bic.w	r2, r2, #8
 800211c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212e:	e013      	b.n	8002158 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002130:	f7ff fd98 	bl	8001c64 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b05      	cmp	r3, #5
 800213c:	d90c      	bls.n	8002158 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e015      	b.n	8002184 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e4      	bne.n	8002130 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	223f      	movs	r2, #63	@ 0x3f
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d004      	beq.n	80021aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2280      	movs	r2, #128	@ 0x80
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00c      	b.n	80021c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2205      	movs	r2, #5
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002418 <HAL_DMA_IRQHandler+0x248>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a8e      	ldr	r2, [pc, #568]	@ (800241c <HAL_DMA_IRQHandler+0x24c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2208      	movs	r2, #8
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0204 	bic.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	2208      	movs	r2, #8
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2204      	movs	r2, #4
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	2204      	movs	r2, #4
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	f043 0204 	orr.w	r2, r3, #4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	2210      	movs	r2, #16
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ca:	2210      	movs	r2, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e01f      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	e016      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0208 	bic.w	r2, r2, #8
 800232e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	2220      	movs	r2, #32
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808f 	beq.w	8002470 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8087 	beq.w	8002470 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2220      	movs	r2, #32
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d136      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_DMA_IRQHandler+0x1da>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0208 	bic.w	r2, r2, #8
 80023b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	223f      	movs	r2, #63	@ 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d07e      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
        }
        return;
 80023e6:	e079      	b.n	80024dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	2b00      	cmp	r3, #0
 800240a:	d031      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e02c      	b.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
 8002416:	bf00      	nop
 8002418:	20000170 	.word	0x20000170
 800241c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d023      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
 8002430:	e01e      	b.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0210 	bic.w	r2, r2, #16
 800244e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	2b00      	cmp	r3, #0
 8002476:	d032      	beq.n	80024de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d022      	beq.n	80024ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2205      	movs	r2, #5
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3301      	adds	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d307      	bcc.n	80024b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f2      	bne.n	800249c <HAL_DMA_IRQHandler+0x2cc>
 80024b6:	e000      	b.n	80024ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024b8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
 80024da:	e000      	b.n	80024de <HAL_DMA_IRQHandler+0x30e>
        return;
 80024dc:	bf00      	nop
    }
  }
}
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f2:	b2db      	uxtb	r3, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002534:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d108      	bne.n	8002558 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002556:	e007      	b.n	8002568 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	60da      	str	r2, [r3, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3b10      	subs	r3, #16
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800258e:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <DMA_CalcBaseAndBitshift+0x68>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d909      	bls.n	80025b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	1d1a      	adds	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80025b4:	e007      	b.n	80025c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025be:	f023 0303 	bic.w	r3, r3, #3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	aaaaaaab 	.word	0xaaaaaaab
 80025dc:	0801aa8c 	.word	0x0801aa8c

080025e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11f      	bne.n	800263a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d856      	bhi.n	80026ae <DMA_CheckFifoParam+0xce>
 8002600:	a201      	add	r2, pc, #4	@ (adr r2, 8002608 <DMA_CheckFifoParam+0x28>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	0800262b 	.word	0x0800262b
 8002610:	08002619 	.word	0x08002619
 8002614:	080026af 	.word	0x080026af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d046      	beq.n	80026b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e043      	b.n	80026b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002632:	d140      	bne.n	80026b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002638:	e03d      	b.n	80026b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002642:	d121      	bne.n	8002688 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d837      	bhi.n	80026ba <DMA_CheckFifoParam+0xda>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <DMA_CheckFifoParam+0x70>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002667 	.word	0x08002667
 8002658:	08002661 	.word	0x08002661
 800265c:	08002679 	.word	0x08002679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e030      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d025      	beq.n	80026be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002676:	e022      	b.n	80026be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002680:	d11f      	bne.n	80026c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002686:	e01c      	b.n	80026c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d903      	bls.n	8002696 <DMA_CheckFifoParam+0xb6>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d003      	beq.n	800269c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002694:	e018      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      break;
 800269a:	e015      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00e      	beq.n	80026c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e00b      	b.n	80026c6 <DMA_CheckFifoParam+0xe6>
      break;
 80026ae:	bf00      	nop
 80026b0:	e00a      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
 80026b4:	e008      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e006      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e004      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <DMA_CheckFifoParam+0xe8>
      break;
 80026c6:	bf00      	nop
    }
  } 
  
  return status; 
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop

080026d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026ea:	4b23      	ldr	r3, [pc, #140]	@ (8002778 <HAL_FLASH_Program+0xa0>)
 80026ec:	7e1b      	ldrb	r3, [r3, #24]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_FLASH_Program+0x1e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e03b      	b.n	800276e <HAL_FLASH_Program+0x96>
 80026f6:	4b20      	ldr	r3, [pc, #128]	@ (8002778 <HAL_FLASH_Program+0xa0>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002700:	f000 f870 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002704:	4603      	mov	r3, r0
 8002706:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d12b      	bne.n	8002766 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002714:	783b      	ldrb	r3, [r7, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	68b8      	ldr	r0, [r7, #8]
 800271a:	f000 f91b 	bl	8002954 <FLASH_Program_Byte>
 800271e:	e016      	b.n	800274e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002726:	883b      	ldrh	r3, [r7, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f000 f8ee 	bl	800290c <FLASH_Program_HalfWord>
 8002730:	e00d      	b.n	800274e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d105      	bne.n	8002744 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4619      	mov	r1, r3
 800273c:	68b8      	ldr	r0, [r7, #8]
 800273e:	f000 f8c3 	bl	80028c8 <FLASH_Program_Word>
 8002742:	e004      	b.n	800274e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f000 f88b 	bl	8002864 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800274e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002752:	f000 f847 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800275a:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_FLASH_Program+0xa4>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4a07      	ldr	r2, [pc, #28]	@ (800277c <HAL_FLASH_Program+0xa4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002766:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <HAL_FLASH_Program+0xa0>)
 8002768:	2200      	movs	r2, #0
 800276a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800276c:	7dfb      	ldrb	r3, [r7, #23]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200018f8 	.word	0x200018f8
 800277c:	40023c00 	.word	0x40023c00

08002780 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800278a:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da0b      	bge.n	80027aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 8002794:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_FLASH_Unlock+0x3c>)
 8002796:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 800279a:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <HAL_FLASH_Unlock+0x40>)
 800279c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_FLASH_Unlock+0x38>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da01      	bge.n	80027aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40023c00 	.word	0x40023c00
 80027bc:	45670123 	.word	0x45670123
 80027c0:	cdef89ab 	.word	0xcdef89ab

080027c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80027c8:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_FLASH_Lock+0x1c>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_FLASH_Lock+0x1c>)
 80027ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <FLASH_WaitForLastOperation+0x78>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027f6:	f7ff fa35 	bl	8001c64 <HAL_GetTick>
 80027fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80027fc:	e010      	b.n	8002820 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d00c      	beq.n	8002820 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <FLASH_WaitForLastOperation+0x38>
 800280c:	f7ff fa2a 	bl	8001c64 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d201      	bcs.n	8002820 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e019      	b.n	8002854 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e8      	bne.n	80027fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 800283a:	2201      	movs	r2, #1
 800283c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800283e:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <FLASH_WaitForLastOperation+0x7c>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800284a:	f000 f8a5 	bl	8002998 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
  
}  
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	200018f8 	.word	0x200018f8
 8002860:	40023c00 	.word	0x40023c00

08002864 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 8002876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 8002882:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002888:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <FLASH_Program_DoubleWord+0x60>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800289a:	f3bf 8f6f 	isb	sy
}
 800289e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80028a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	000a      	movs	r2, r1
 80028ae:	2300      	movs	r3, #0
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	3104      	adds	r1, #4
 80028b4:	4613      	mov	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <FLASH_Program_Word+0x40>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40023c00 	.word	0x40023c00

0800290c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 800291e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002922:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002930:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <FLASH_Program_HalfWord+0x44>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	801a      	strh	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00

08002954 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <FLASH_Program_Byte+0x40>)
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <FLASH_Program_Byte+0x40>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <FLASH_Program_Byte+0x40>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	701a      	strb	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00

08002998 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800299c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80029b4:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029b6:	2210      	movs	r2, #16
 80029b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80029ba:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80029c6:	4b26      	ldr	r3, [pc, #152]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	4a24      	ldr	r2, [pc, #144]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029d4:	2220      	movs	r2, #32
 80029d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80029d8:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 80029ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029f0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029f2:	2240      	movs	r2, #64	@ 0x40
 80029f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029f6:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a02:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a0c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a0e:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a10:	2280      	movs	r2, #128	@ 0x80
 8002a12:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	4a0d      	ldr	r2, [pc, #52]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a32:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <FLASH_SetErrorCode+0xc8>)
 8002a4a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <FLASH_SetErrorCode+0xc4>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	60da      	str	r2, [r3, #12]
  }
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40023c00 	.word	0x40023c00
 8002a60:	200018f8 	.word	0x200018f8

08002a64 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a76:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_FLASHEx_Erase+0xd8>)
 8002a78:	7e1b      	ldrb	r3, [r3, #24]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_FLASHEx_Erase+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e058      	b.n	8002b34 <HAL_FLASHEx_Erase+0xd0>
 8002a82:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_FLASHEx_Erase+0xd8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a8c:	f7ff feaa 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d148      	bne.n	8002b2c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d115      	bne.n	8002ad6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 f844 	bl	8002b44 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002abc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002ac0:	f7ff fe90 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	6113      	str	r3, [r2, #16]
 8002ad4:	e028      	b.n	8002b28 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	e01c      	b.n	8002b18 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	68b8      	ldr	r0, [r7, #8]
 8002ae8:	f000 f850 	bl	8002b8c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002af0:	f7ff fe78 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	4a10      	ldr	r2, [pc, #64]	@ (8002b40 <HAL_FLASHEx_Erase+0xdc>)
 8002afe:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002b02:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	601a      	str	r2, [r3, #0]
          break;
 8002b10:	e00a      	b.n	8002b28 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d3da      	bcc.n	8002ade <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002b28:	f000 f878 	bl	8002c1c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_FLASHEx_Erase+0xd8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	761a      	strb	r2, [r3, #24]

  return status;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200018f8 	.word	0x200018f8
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b50:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4a09      	ldr	r2, [pc, #36]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002b68:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <FLASH_MassErase+0x44>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b78:	6113      	str	r3, [r2, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00

08002b8c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e010      	b.n	8002bca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d103      	bne.n	8002bb6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e009      	b.n	8002bca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d103      	bne.n	8002bc4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002bbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e002      	b.n	8002bca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002bc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bca:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	490f      	ldr	r1, [pc, #60]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002be8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002bec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	4a07      	ldr	r2, [pc, #28]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <FLASH_Erase_Sector+0x8c>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0a:	6113      	str	r3, [r2, #16]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002c20:	4b20      	ldr	r3, [pc, #128]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d017      	beq.n	8002c5c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c32:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c36:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c4e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c72:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a07      	ldr	r2, [pc, #28]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c8a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <FLASH_FlushCaches+0x88>)
 8002c92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c96:	6013      	str	r3, [r2, #0]
  }
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e165      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8154 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d00b      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf6:	2b11      	cmp	r3, #17
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b12      	cmp	r3, #18
 8002d00:	d130      	bne.n	8002d64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d38:	2201      	movs	r2, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 0201 	and.w	r2, r3, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0xfc>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ae 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a58      	ldr	r2, [pc, #352]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_GPIO_Init+0x308>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x21a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb8 <HAL_GPIO_Init+0x310>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x212>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <HAL_GPIO_Init+0x314>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc0 <HAL_GPIO_Init+0x318>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x20a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_GPIO_Init+0x31c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x206>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	@ (8002fc8 <HAL_GPIO_Init+0x320>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x202>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f06:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f36:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae96 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fec:	e003      	b.n	8002ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	041a      	lsls	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	401a      	ands	r2, r3
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	429a      	cmp	r2, r3
 800301a:	d104      	bne.n	8003026 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	041a      	lsls	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003024:	e002      	b.n	800302c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d006      	beq.n	800305c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	4618      	mov	r0, r3
 8003058:	f007 ff10 	bl	800ae7c <HAL_GPIO_EXTI_Callback>
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e12b      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f008 f9e8 	bl	800b464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	@ 0x24
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030cc:	f001 fea0 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a81      	ldr	r2, [pc, #516]	@ (80032dc <HAL_I2C_Init+0x274>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d807      	bhi.n	80030ec <HAL_I2C_Init+0x84>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a80      	ldr	r2, [pc, #512]	@ (80032e0 <HAL_I2C_Init+0x278>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e006      	b.n	80030fa <HAL_I2C_Init+0x92>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a7d      	ldr	r2, [pc, #500]	@ (80032e4 <HAL_I2C_Init+0x27c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e7      	b.n	80032d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a78      	ldr	r2, [pc, #480]	@ (80032e8 <HAL_I2C_Init+0x280>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9b      	lsrs	r3, r3, #18
 800310c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a6a      	ldr	r2, [pc, #424]	@ (80032dc <HAL_I2C_Init+0x274>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d802      	bhi.n	800313c <HAL_I2C_Init+0xd4>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	e009      	b.n	8003150 <HAL_I2C_Init+0xe8>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	4a69      	ldr	r2, [pc, #420]	@ (80032ec <HAL_I2C_Init+0x284>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	3301      	adds	r3, #1
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003162:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	495c      	ldr	r1, [pc, #368]	@ (80032dc <HAL_I2C_Init+0x274>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d819      	bhi.n	80031a4 <HAL_I2C_Init+0x13c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fbb1 f3f3 	udiv	r3, r1, r3
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003184:	400b      	ands	r3, r1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_I2C_Init+0x138>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e59      	subs	r1, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fbb1 f3f3 	udiv	r3, r1, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	e051      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e04f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <HAL_I2C_Init+0x168>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e012      	b.n	80031f6 <HAL_I2C_Init+0x18e>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	0099      	lsls	r1, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Init+0x196>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e022      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10e      	bne.n	8003224 <HAL_I2C_Init+0x1bc>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1e58      	subs	r0, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003222:	e00f      	b.n	8003244 <HAL_I2C_Init+0x1dc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	0099      	lsls	r1, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	fbb0 f3f3 	udiv	r3, r0, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	6809      	ldr	r1, [r1, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003272:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6911      	ldr	r1, [r2, #16]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	4311      	orrs	r1, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	430b      	orrs	r3, r1
 8003286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	003d08ff 	.word	0x003d08ff
 80032e8:	431bde83 	.word	0x431bde83
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e021      	b.n	8003346 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2224      	movs	r2, #36	@ 0x24
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f817 	bl	800334e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	f040 809a 	bne.w	80034c4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003390:	4b50      	ldr	r3, [pc, #320]	@ (80034d4 <HAL_I2C_Mem_Read_IT+0x170>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	08db      	lsrs	r3, r3, #3
 8003396:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_I2C_Mem_Read_IT+0x174>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	0a1a      	lsrs	r2, r3, #8
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	009a      	lsls	r2, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d116      	bne.n	80033e4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e070      	b.n	80034c6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d0db      	beq.n	80033aa <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_I2C_Mem_Read_IT+0x9c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e062      	b.n	80034c6 <HAL_I2C_Mem_Read_IT+0x162>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d007      	beq.n	8003426 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003434:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	@ 0x22
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2240      	movs	r2, #64	@ 0x40
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <HAL_I2C_Mem_Read_IT+0x178>)
 8003466:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003468:	897a      	ldrh	r2, [r7, #10]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800346e:	893a      	ldrh	r2, [r7, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800348e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80034be:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000170 	.word	0x20000170
 80034d8:	14f8b589 	.word	0x14f8b589
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d138      	bne.n	8003574 <HAL_I2C_Master_Abort_IT+0x94>
 8003502:	7bfb      	ldrb	r3, [r7, #15]
 8003504:	2b10      	cmp	r3, #16
 8003506:	d135      	bne.n	8003574 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Master_Abort_IT+0x36>
 8003512:	2302      	movs	r3, #2
 8003514:	e02f      	b.n	8003576 <HAL_I2C_Master_Abort_IT+0x96>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2260      	movs	r2, #96	@ 0x60
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003560:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f001 f936 	bl	80047dc <I2C_ITError>

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b088      	sub	sp, #32
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800359e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d003      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x38>
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	f040 80ad 	bne.w	8003710 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_I2C_EV_IRQHandler+0x6e>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035d6:	d003      	beq.n	80035e0 <HAL_I2C_EV_IRQHandler+0x62>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_EV_IRQHandler+0x66>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_I2C_EV_IRQHandler+0x68>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	f000 8110 	beq.w	800380c <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x90>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f001 faf7 	bl	8004bf4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fc76 	bl	8003ef8 <I2C_Master_SB>
 800360c:	e07f      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0xac>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fcee 	bl	8004004 <I2C_Master_ADD10>
 8003628:	e071      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0xc8>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fd0a 	bl	8004058 <I2C_Master_ADDR>
 8003644:	e063      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d032      	beq.n	80036b6 <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800365e:	f000 80d7 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_EV_IRQHandler+0x10a>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_I2C_EV_IRQHandler+0x10a>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f90b 	bl	800389c <I2C_MasterTransmit_TXE>
 8003686:	e042      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80be 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80b8 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d103      	bne.n	80036ae <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f994 	bl	80039d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ac:	e0b0      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f9f8 	bl	8003aa4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b4:	e0ac      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036c4:	f000 80a4 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x170>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x170>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa6b 	bl	8003bc2 <I2C_MasterReceive_RXNE>
 80036ec:	e00f      	b.n	800370e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 808b 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8085 	beq.w	8003810 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb0c 	bl	8003d24 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370c:	e080      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
 800370e:	e07f      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	e007      	b.n	8003732 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d011      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x1e2>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fecc 	bl	80044f6 <I2C_Slave_ADDR>
 800375e:	e05a      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_I2C_EV_IRQHandler+0x1fe>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 ff01 	bl	800457c <I2C_Slave_STOPF>
 800377a:	e04c      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	2b21      	cmp	r3, #33	@ 0x21
 8003780:	d002      	beq.n	8003788 <HAL_I2C_EV_IRQHandler+0x20a>
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b29      	cmp	r3, #41	@ 0x29
 8003786:	d120      	bne.n	80037ca <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x230>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x230>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fde7 	bl	800437a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ac:	e032      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02d      	beq.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fe16 	bl	80043f4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c8:	e024      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x272>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x272>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fe24 	bl	8004436 <I2C_SlaveReceive_RXNE>
 80037ee:	e012      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fe54 	bl	80044b2 <I2C_SlaveReceive_BTF>
 800380a:	e004      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      return;
 800380c:	bf00      	nop
 800380e:	e002      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003814:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
 8003850:	4613      	mov	r3, r2
 8003852:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d150      	bne.n	8003964 <I2C_MasterTransmit_TXE+0xc8>
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b21      	cmp	r3, #33	@ 0x21
 80038c6:	d14d      	bne.n	8003964 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d01d      	beq.n	800390a <I2C_MasterTransmit_TXE+0x6e>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d01a      	beq.n	800390a <I2C_MasterTransmit_TXE+0x6e>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038da:	d016      	beq.n	800390a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2211      	movs	r2, #17
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f007 fcba 	bl	800b27c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003908:	e060      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003918:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003928:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d107      	bne.n	8003954 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f007 fcb7 	bl	800b2c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003952:	e03b      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f007 fc8d 	bl	800b27c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003962:	e033      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b21      	cmp	r3, #33	@ 0x21
 8003968:	d005      	beq.n	8003976 <I2C_MasterTransmit_TXE+0xda>
 800396a:	7bbb      	ldrb	r3, [r7, #14]
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d12d      	bne.n	80039cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b22      	cmp	r3, #34	@ 0x22
 8003974:	d12a      	bne.n	80039cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800398e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003990:	e01c      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d103      	bne.n	80039a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f880 	bl	8003aa4 <I2C_MemoryTransmit_TXE_BTF>
}
 80039a4:	e012      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	781a      	ldrb	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039ca:	e7ff      	b.n	80039cc <I2C_MasterTransmit_TXE+0x130>
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b21      	cmp	r3, #33	@ 0x21
 80039ec:	d156      	bne.n	8003a9c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a1c:	e03e      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d01d      	beq.n	8003a60 <I2C_MasterTransmit_BTF+0x8c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d01a      	beq.n	8003a60 <I2C_MasterTransmit_BTF+0x8c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a30:	d016      	beq.n	8003a60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2211      	movs	r2, #17
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f007 fc0f 	bl	800b27c <HAL_I2C_MasterTxCpltCallback>
}
 8003a5e:	e01d      	b.n	8003a9c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f007 fbf0 	bl	800b27c <HAL_I2C_MasterTxCpltCallback>
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11d      	bne.n	8003af8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10b      	bne.n	8003adc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ada:	e06e      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	121b      	asrs	r3, r3, #8
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003af6:	e060      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10b      	bne.n	8003b18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b16:	e050      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d14c      	bne.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b22      	cmp	r3, #34	@ 0x22
 8003b24:	d108      	bne.n	8003b38 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	e040      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b21      	cmp	r3, #33	@ 0x21
 8003b46:	d112      	bne.n	8003b6e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b6c:	e025      	b.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d120      	bne.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b21      	cmp	r3, #33	@ 0x21
 8003b7c:	d11d      	bne.n	8003bba <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b8c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f007 fb83 	bl	800b2c0 <HAL_I2C_MemTxCpltCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b22      	cmp	r3, #34	@ 0x22
 8003bd4:	f040 80a2 	bne.w	8003d1c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d921      	bls.n	8003c2a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	f040 8082 	bne.w	8003d1c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003c28:	e078      	b.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d074      	beq.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <I2C_MasterReceive_RXNE+0x7c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d16e      	bne.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 ffa6 	bl	8004b90 <I2C_WaitOnSTOPRequestThroughIT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d142      	bne.n	8003cd0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c58:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b40      	cmp	r3, #64	@ 0x40
 8003ca2:	d10a      	bne.n	8003cba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f007 fb48 	bl	800b348 <HAL_I2C_MemRxCpltCallback>
}
 8003cb8:	e030      	b.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2212      	movs	r2, #18
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f007 fb1b 	bl	800b304 <HAL_I2C_MasterRxCpltCallback>
}
 8003cce:	e025      	b.n	8003d1c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fdac 	bl	8003874 <HAL_I2C_ErrorCallback>
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d72:	e0bd      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d129      	bne.n	8003dd2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00a      	beq.n	8003daa <I2C_MasterReceive_BTF+0x86>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d007      	beq.n	8003daa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dd0:	e08e      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d176      	bne.n	8003eca <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d002      	beq.n	8003de8 <I2C_MasterReceive_BTF+0xc4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d108      	bne.n	8003dfa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e019      	b.n	8003e2e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d002      	beq.n	8003e06 <I2C_MasterReceive_BTF+0xe2>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d108      	bne.n	8003e18 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e00a      	b.n	8003e2e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d007      	beq.n	8003e2e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e88:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b40      	cmp	r3, #64	@ 0x40
 8003e9c:	d10a      	bne.n	8003eb4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f007 fa4b 	bl	800b348 <HAL_I2C_MemRxCpltCallback>
}
 8003eb2:	e01d      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2212      	movs	r2, #18
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f007 fa1e 	bl	800b304 <HAL_I2C_MasterRxCpltCallback>
}
 8003ec8:	e012      	b.n	8003ef0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b40      	cmp	r3, #64	@ 0x40
 8003f0a:	d117      	bne.n	8003f3c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f24:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f26:	e067      	b.n	8003ff8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]
}
 8003f3a:	e05d      	b.n	8003ff8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f44:	d133      	bne.n	8003fae <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b21      	cmp	r3, #33	@ 0x21
 8003f50:	d109      	bne.n	8003f66 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f62:	611a      	str	r2, [r3, #16]
 8003f64:	e008      	b.n	8003f78 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <I2C_Master_SB+0x92>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d032      	beq.n	8003ff8 <I2C_Master_SB+0x100>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02d      	beq.n	8003ff8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003faa:	605a      	str	r2, [r3, #4]
}
 8003fac:	e024      	b.n	8003ff8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10e      	bne.n	8003fd4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	11db      	asrs	r3, r3, #7
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 0306 	and.w	r3, r3, #6
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f063 030f 	orn	r3, r3, #15
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	611a      	str	r2, [r3, #16]
}
 8003fd2:	e011      	b.n	8003ff8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10d      	bne.n	8003ff8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	11db      	asrs	r3, r3, #7
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0306 	and.w	r3, r3, #6
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f063 030e 	orn	r3, r3, #14
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	b2da      	uxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <I2C_Master_ADD10+0x24>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	d011      	beq.n	800404c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <I2C_Master_ADD10+0x38>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004058:	b480      	push	{r7}
 800405a:	b091      	sub	sp, #68	@ 0x44
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004066:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b22      	cmp	r3, #34	@ 0x22
 8004080:	f040 8169 	bne.w	8004356 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <I2C_Master_ADDR+0x54>
 800408c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d10b      	bne.n	80040ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	e160      	b.n	800436e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11d      	bne.n	80040f0 <I2C_Master_ADDR+0x98>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040bc:	d118      	bne.n	80040f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80040ee:	e13e      	b.n	800436e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e115      	b.n	800434e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	f040 808a 	bne.w	8004242 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800412e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004130:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004134:	d137      	bne.n	80041a6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004144:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004154:	d113      	bne.n	800417e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	e0e7      	b.n	800434e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e0d3      	b.n	800434e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d02e      	beq.n	800420a <I2C_Master_ADDR+0x1b2>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d02b      	beq.n	800420a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b4:	2b12      	cmp	r3, #18
 80041b6:	d102      	bne.n	80041be <I2C_Master_ADDR+0x166>
 80041b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d125      	bne.n	800420a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d00e      	beq.n	80041e2 <I2C_Master_ADDR+0x18a>
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d00b      	beq.n	80041e2 <I2C_Master_ADDR+0x18a>
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d008      	beq.n	80041e2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e007      	b.n	80041f2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	e0a1      	b.n	800434e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e085      	b.n	800434e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d14d      	bne.n	80042e8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	2b04      	cmp	r3, #4
 8004250:	d016      	beq.n	8004280 <I2C_Master_ADDR+0x228>
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2b02      	cmp	r3, #2
 8004256:	d013      	beq.n	8004280 <I2C_Master_ADDR+0x228>
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	2b10      	cmp	r3, #16
 800425c:	d010      	beq.n	8004280 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e007      	b.n	8004290 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800428e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429e:	d117      	bne.n	80042d0 <I2C_Master_ADDR+0x278>
 80042a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042a6:	d00b      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d008      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d005      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d002      	beq.n	80042c0 <I2C_Master_ADDR+0x268>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d107      	bne.n	80042d0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	e032      	b.n	800434e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042f6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004306:	d117      	bne.n	8004338 <I2C_Master_ADDR+0x2e0>
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800430e:	d00b      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 8004310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004312:	2b01      	cmp	r3, #1
 8004314:	d008      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004318:	2b08      	cmp	r3, #8
 800431a:	d005      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	2b10      	cmp	r3, #16
 8004320:	d002      	beq.n	8004328 <I2C_Master_ADDR+0x2d0>
 8004322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004324:	2b20      	cmp	r3, #32
 8004326:	d107      	bne.n	8004338 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004336:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004354:	e00b      	b.n	800436e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	e7ff      	b.n	800436e <I2C_Master_ADDR+0x316>
 800436e:	bf00      	nop
 8004370:	3744      	adds	r7, #68	@ 0x44
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004388:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02b      	beq.n	80043ec <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d114      	bne.n	80043ec <I2C_SlaveTransmit_TXE+0x72>
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b29      	cmp	r3, #41	@ 0x29
 80043c6:	d111      	bne.n	80043ec <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2221      	movs	r2, #33	@ 0x21
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2228      	movs	r2, #40	@ 0x28
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fa18 	bl	800381c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d011      	beq.n	800442a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004444:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02c      	beq.n	80044aa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d114      	bne.n	80044aa <I2C_SlaveReceive_RXNE+0x74>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b2a      	cmp	r3, #42	@ 0x2a
 8004484:	d111      	bne.n	80044aa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2222      	movs	r2, #34	@ 0x22
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2228      	movs	r2, #40	@ 0x28
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff f9c3 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d012      	beq.n	80044ea <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004510:	2b28      	cmp	r3, #40	@ 0x28
 8004512:	d125      	bne.n	8004560 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004522:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d103      	bne.n	8004544 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	81bb      	strh	r3, [r7, #12]
 8004542:	e002      	b.n	800454a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004552:	89ba      	ldrh	r2, [r7, #12]
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	4619      	mov	r1, r3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f973 	bl	8003844 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800455e:	e008      	b.n	8004572 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0202 	mvn.w	r2, #2
 8004568:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800459a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d8:	d172      	bne.n	80046c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b22      	cmp	r3, #34	@ 0x22
 80045de:	d002      	beq.n	80045e6 <I2C_Slave_STOPF+0x6a>
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e4:	d135      	bne.n	8004652 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f043 0204 	orr.w	r2, r3, #4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004618:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd ff60 	bl	80024e4 <HAL_DMA_GetState>
 8004624:	4603      	mov	r3, r0
 8004626:	2b01      	cmp	r3, #1
 8004628:	d049      	beq.n	80046be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	4a69      	ldr	r2, [pc, #420]	@ (80047d4 <I2C_Slave_STOPF+0x258>)
 8004630:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fda8 	bl	800218c <HAL_DMA_Abort_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03d      	beq.n	80046be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800464c:	4610      	mov	r0, r2
 800464e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004650:	e035      	b.n	80046be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f043 0204 	orr.w	r2, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004684:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd ff2a 	bl	80024e4 <HAL_DMA_GetState>
 8004690:	4603      	mov	r3, r0
 8004692:	2b01      	cmp	r3, #1
 8004694:	d014      	beq.n	80046c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469a:	4a4e      	ldr	r2, [pc, #312]	@ (80047d4 <I2C_Slave_STOPF+0x258>)
 800469c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fd72 	bl	800218c <HAL_DMA_Abort_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046b8:	4610      	mov	r0, r2
 80046ba:	4798      	blx	r3
 80046bc:	e000      	b.n	80046c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03e      	beq.n	8004748 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d112      	bne.n	80046fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b40      	cmp	r3, #64	@ 0x40
 800470a:	d112      	bne.n	8004732 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	f043 0204 	orr.w	r2, r3, #4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f843 	bl	80047dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004756:	e039      	b.n	80047cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b2a      	cmp	r3, #42	@ 0x2a
 800475c:	d109      	bne.n	8004772 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2228      	movs	r2, #40	@ 0x28
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff f85f 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b28      	cmp	r3, #40	@ 0x28
 800477c:	d111      	bne.n	80047a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a15      	ldr	r2, [pc, #84]	@ (80047d8 <I2C_Slave_STOPF+0x25c>)
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff f860 	bl	8003860 <HAL_I2C_ListenCpltCallback>
}
 80047a0:	e014      	b.n	80047cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	2b22      	cmp	r3, #34	@ 0x22
 80047a8:	d002      	beq.n	80047b0 <I2C_Slave_STOPF+0x234>
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b22      	cmp	r3, #34	@ 0x22
 80047ae:	d10d      	bne.n	80047cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff f832 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08004a41 	.word	0x08004a41
 80047d8:	ffff0000 	.word	0xffff0000

080047dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d002      	beq.n	8004800 <I2C_ITError+0x24>
 80047fa:	7bbb      	ldrb	r3, [r7, #14]
 80047fc:	2b40      	cmp	r3, #64	@ 0x40
 80047fe:	d10a      	bne.n	8004816 <I2C_ITError+0x3a>
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b22      	cmp	r3, #34	@ 0x22
 8004804:	d107      	bne.n	8004816 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004814:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800481c:	2b28      	cmp	r3, #40	@ 0x28
 800481e:	d107      	bne.n	8004830 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2228      	movs	r2, #40	@ 0x28
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800482e:	e015      	b.n	800485c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800483a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483e:	d00a      	beq.n	8004856 <I2C_ITError+0x7a>
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b60      	cmp	r3, #96	@ 0x60
 8004844:	d007      	beq.n	8004856 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800486a:	d162      	bne.n	8004932 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d020      	beq.n	80048cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a38 <I2C_ITError+0x25c>)
 8004890:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fc78 	bl	800218c <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8089 	beq.w	80049b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048c6:	4610      	mov	r0, r2
 80048c8:	4798      	blx	r3
 80048ca:	e074      	b.n	80049b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	4a59      	ldr	r2, [pc, #356]	@ (8004a38 <I2C_ITError+0x25c>)
 80048d2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fd fc57 	bl	800218c <HAL_DMA_Abort_IT>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d068      	beq.n	80049b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d10b      	bne.n	800490a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800492c:	4610      	mov	r0, r2
 800492e:	4798      	blx	r3
 8004930:	e041      	b.n	80049b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b60      	cmp	r3, #96	@ 0x60
 800493c:	d125      	bne.n	800498a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d10b      	bne.n	8004972 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fe ff80 	bl	8003888 <HAL_I2C_AbortCpltCallback>
 8004988:	e015      	b.n	80049b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d10b      	bne.n	80049b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7fe ff5f 	bl	8003874 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d113      	bne.n	8004a30 <I2C_ITError+0x254>
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b28      	cmp	r3, #40	@ 0x28
 8004a0c:	d110      	bne.n	8004a30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <I2C_ITError+0x260>)
 8004a12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe ff18 	bl	8003860 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08004a41 	.word	0x08004a41
 8004a3c:	ffff0000 	.word	0xffff0000

08004a40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b88 <I2C_DMAAbort+0x148>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	4a4a      	ldr	r2, [pc, #296]	@ (8004b8c <I2C_DMAAbort+0x14c>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0a1a      	lsrs	r2, r3, #8
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00da      	lsls	r2, r3, #3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004a86:	e00a      	b.n	8004a9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a9c:	d0ea      	beq.n	8004a74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aaa:	2200      	movs	r2, #0
 8004aac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	2200      	movs	r2, #0
 8004abc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004acc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	2200      	movs	r2, #0
 8004af2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b60      	cmp	r3, #96	@ 0x60
 8004b0e:	d10e      	bne.n	8004b2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f7fe feae 	bl	8003888 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b2c:	e027      	b.n	8004b7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b2e:	7cfb      	ldrb	r3, [r7, #19]
 8004b30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b34:	2b28      	cmp	r3, #40	@ 0x28
 8004b36:	d117      	bne.n	8004b68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2228      	movs	r2, #40	@ 0x28
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b66:	e007      	b.n	8004b78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b78:	6978      	ldr	r0, [r7, #20]
 8004b7a:	f7fe fe7b 	bl	8003874 <HAL_I2C_ErrorCallback>
}
 8004b7e:	bf00      	nop
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000170 	.word	0x20000170
 8004b8c:	14f8b589 	.word	0x14f8b589

08004b90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b9c:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	08db      	lsrs	r3, r3, #3
 8004ba2:	4a13      	ldr	r2, [pc, #76]	@ (8004bf0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	0a1a      	lsrs	r2, r3, #8
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e008      	b.n	8004be0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bdc:	d0e9      	beq.n	8004bb2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000170 	.word	0x20000170
 8004bf0:	14f8b589 	.word	0x14f8b589

08004bf4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c04:	d103      	bne.n	8004c0e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c0c:	e007      	b.n	8004c1e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c16:	d102      	bne.n	8004c1e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0cc      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b68      	ldr	r3, [pc, #416]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d90c      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b65      	ldr	r3, [pc, #404]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a58      	ldr	r2, [pc, #352]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d044      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d119      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b3f      	ldr	r3, [pc, #252]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e06f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e067      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4934      	ldr	r1, [pc, #208]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7fc ffa2 	bl	8001c64 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fc ff9e 	bl	8001c64 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e04f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d20c      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	@ (8004de4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f855 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	@ (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fc ff02 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023c00 	.word	0x40023c00
 8004de8:	40023800 	.word	0x40023800
 8004dec:	0801a640 	.word	0x0801a640
 8004df0:	20000170 	.word	0x20000170
 8004df4:	20000400 	.word	0x20000400

08004df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000170 	.word	0x20000170

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0801a650 	.word	0x0801a650

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e3c:	f7ff ffdc 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0b5b      	lsrs	r3, r3, #13
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4903      	ldr	r1, [pc, #12]	@ (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	0801a650 	.word	0x0801a650

08004e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e64:	b0ae      	sub	sp, #184	@ 0xb8
 8004e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e86:	4bcb      	ldr	r3, [pc, #812]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	f200 8206 	bhi.w	80052a0 <HAL_RCC_GetSysClockFreq+0x440>
 8004e94:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	080052a1 	.word	0x080052a1
 8004ea4:	080052a1 	.word	0x080052a1
 8004ea8:	080052a1 	.word	0x080052a1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	080052a1 	.word	0x080052a1
 8004eb4:	080052a1 	.word	0x080052a1
 8004eb8:	080052a1 	.word	0x080052a1
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	080052a1 	.word	0x080052a1
 8004ec4:	080052a1 	.word	0x080052a1
 8004ec8:	080052a1 	.word	0x080052a1
 8004ecc:	080050d1 	.word	0x080050d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed0:	4bb9      	ldr	r3, [pc, #740]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004ed6:	e1e7      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ed8:	4bb8      	ldr	r3, [pc, #736]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ede:	e1e3      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee0:	4bb4      	ldr	r3, [pc, #720]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eec:	4bb1      	ldr	r3, [pc, #708]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d071      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef8:	4bae      	ldr	r3, [pc, #696]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	099b      	lsrs	r3, r3, #6
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	0159      	lsls	r1, r3, #5
 8004f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f30:	0150      	lsls	r0, r2, #5
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4621      	mov	r1, r4
 8004f38:	1a51      	subs	r1, r2, r1
 8004f3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f50:	4649      	mov	r1, r9
 8004f52:	018b      	lsls	r3, r1, #6
 8004f54:	4641      	mov	r1, r8
 8004f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	018a      	lsls	r2, r1, #6
 8004f5e:	4641      	mov	r1, r8
 8004f60:	1a51      	subs	r1, r2, r1
 8004f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f64:	4649      	mov	r1, r9
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f78:	4649      	mov	r1, r9
 8004f7a:	00cb      	lsls	r3, r1, #3
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f82:	4641      	mov	r1, r8
 8004f84:	00ca      	lsls	r2, r1, #3
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4622      	mov	r2, r4
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f92:	462b      	mov	r3, r5
 8004f94:	460a      	mov	r2, r1
 8004f96:	eb42 0303 	adc.w	r3, r2, r3
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fa8:	4629      	mov	r1, r5
 8004faa:	024b      	lsls	r3, r1, #9
 8004fac:	4621      	mov	r1, r4
 8004fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	024a      	lsls	r2, r1, #9
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004fcc:	f7fb fe0c 	bl	8000be8 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fda:	e067      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fdc:	4b75      	ldr	r3, [pc, #468]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	099b      	lsrs	r3, r3, #6
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fe8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ffa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004ffe:	4622      	mov	r2, r4
 8005000:	462b      	mov	r3, r5
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	0159      	lsls	r1, r3, #5
 800500c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005010:	0150      	lsls	r0, r2, #5
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4621      	mov	r1, r4
 8005018:	1a51      	subs	r1, r2, r1
 800501a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800501c:	4629      	mov	r1, r5
 800501e:	eb63 0301 	sbc.w	r3, r3, r1
 8005022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005030:	4649      	mov	r1, r9
 8005032:	018b      	lsls	r3, r1, #6
 8005034:	4641      	mov	r1, r8
 8005036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800503a:	4641      	mov	r1, r8
 800503c:	018a      	lsls	r2, r1, #6
 800503e:	4641      	mov	r1, r8
 8005040:	ebb2 0a01 	subs.w	sl, r2, r1
 8005044:	4649      	mov	r1, r9
 8005046:	eb63 0b01 	sbc.w	fp, r3, r1
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800505a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800505e:	4692      	mov	sl, r2
 8005060:	469b      	mov	fp, r3
 8005062:	4623      	mov	r3, r4
 8005064:	eb1a 0303 	adds.w	r3, sl, r3
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	462b      	mov	r3, r5
 800506c:	eb4b 0303 	adc.w	r3, fp, r3
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800507e:	4629      	mov	r1, r5
 8005080:	028b      	lsls	r3, r1, #10
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005088:	4621      	mov	r1, r4
 800508a:	028a      	lsls	r2, r1, #10
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005094:	2200      	movs	r2, #0
 8005096:	673b      	str	r3, [r7, #112]	@ 0x70
 8005098:	677a      	str	r2, [r7, #116]	@ 0x74
 800509a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800509e:	f7fb fda3 	bl	8000be8 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4613      	mov	r3, r2
 80050a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050ac:	4b41      	ldr	r3, [pc, #260]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	3301      	adds	r3, #1
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80050be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050ce:	e0eb      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d0:	4b38      	ldr	r3, [pc, #224]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050dc:	4b35      	ldr	r3, [pc, #212]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d06b      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e8:	4b32      	ldr	r3, [pc, #200]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	099b      	lsrs	r3, r3, #6
 80050ee:	2200      	movs	r2, #0
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80050fc:	2300      	movs	r3, #0
 80050fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005100:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005104:	4622      	mov	r2, r4
 8005106:	462b      	mov	r3, r5
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005116:	0150      	lsls	r0, r2, #5
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4621      	mov	r1, r4
 800511e:	1a51      	subs	r1, r2, r1
 8005120:	61b9      	str	r1, [r7, #24]
 8005122:	4629      	mov	r1, r5
 8005124:	eb63 0301 	sbc.w	r3, r3, r1
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005136:	4659      	mov	r1, fp
 8005138:	018b      	lsls	r3, r1, #6
 800513a:	4651      	mov	r1, sl
 800513c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005140:	4651      	mov	r1, sl
 8005142:	018a      	lsls	r2, r1, #6
 8005144:	4651      	mov	r1, sl
 8005146:	ebb2 0801 	subs.w	r8, r2, r1
 800514a:	4659      	mov	r1, fp
 800514c:	eb63 0901 	sbc.w	r9, r3, r1
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800515c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005160:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005164:	4690      	mov	r8, r2
 8005166:	4699      	mov	r9, r3
 8005168:	4623      	mov	r3, r4
 800516a:	eb18 0303 	adds.w	r3, r8, r3
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	462b      	mov	r3, r5
 8005172:	eb49 0303 	adc.w	r3, r9, r3
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005184:	4629      	mov	r1, r5
 8005186:	024b      	lsls	r3, r1, #9
 8005188:	4621      	mov	r1, r4
 800518a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800518e:	4621      	mov	r1, r4
 8005190:	024a      	lsls	r2, r1, #9
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800519a:	2200      	movs	r2, #0
 800519c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800519e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80051a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051a4:	f7fb fd20 	bl	8000be8 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4613      	mov	r3, r2
 80051ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051b2:	e065      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x420>
 80051b4:	40023800 	.word	0x40023800
 80051b8:	00f42400 	.word	0x00f42400
 80051bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c0:	4b3d      	ldr	r3, [pc, #244]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	099b      	lsrs	r3, r3, #6
 80051c6:	2200      	movs	r2, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	4611      	mov	r1, r2
 80051cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80051d2:	2300      	movs	r3, #0
 80051d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80051d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	f04f 0000 	mov.w	r0, #0
 80051e2:	f04f 0100 	mov.w	r1, #0
 80051e6:	0159      	lsls	r1, r3, #5
 80051e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ec:	0150      	lsls	r0, r2, #5
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4641      	mov	r1, r8
 80051f4:	1a51      	subs	r1, r2, r1
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	4649      	mov	r1, r9
 80051fa:	eb63 0301 	sbc.w	r3, r3, r1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800520c:	4659      	mov	r1, fp
 800520e:	018b      	lsls	r3, r1, #6
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005216:	4651      	mov	r1, sl
 8005218:	018a      	lsls	r2, r1, #6
 800521a:	4651      	mov	r1, sl
 800521c:	1a54      	subs	r4, r2, r1
 800521e:	4659      	mov	r1, fp
 8005220:	eb63 0501 	sbc.w	r5, r3, r1
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	00eb      	lsls	r3, r5, #3
 800522e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005232:	00e2      	lsls	r2, r4, #3
 8005234:	4614      	mov	r4, r2
 8005236:	461d      	mov	r5, r3
 8005238:	4643      	mov	r3, r8
 800523a:	18e3      	adds	r3, r4, r3
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	464b      	mov	r3, r9
 8005240:	eb45 0303 	adc.w	r3, r5, r3
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005252:	4629      	mov	r1, r5
 8005254:	028b      	lsls	r3, r1, #10
 8005256:	4621      	mov	r1, r4
 8005258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800525c:	4621      	mov	r1, r4
 800525e:	028a      	lsls	r2, r1, #10
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005268:	2200      	movs	r2, #0
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800526e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005272:	f7fb fcb9 	bl	8000be8 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4613      	mov	r3, r2
 800527c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005280:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	0f1b      	lsrs	r3, r3, #28
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800528e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800529e:	e003      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80052a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	37b8      	adds	r7, #184	@ 0xb8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80052c6:	f7fc fccd 	bl	8001c64 <HAL_GetTick>
 80052ca:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80052cc:	4b72      	ldr	r3, [pc, #456]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a71      	ldr	r2, [pc, #452]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052da:	f7fc fcc3 	bl	8001c64 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0d0      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80052ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80052f8:	4b67      	ldr	r3, [pc, #412]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a66      	ldr	r2, [pc, #408]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80052fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005302:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005304:	f7fc fcae 	bl	8001c64 <HAL_GetTick>
 8005308:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800530a:	4b63      	ldr	r3, [pc, #396]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800530c:	2200      	movs	r2, #0
 800530e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005312:	f7fc fca7 	bl	8001c64 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0b2      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005328:	4b5b      	ldr	r3, [pc, #364]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005334:	f7fc fc96 	bl	8001c64 <HAL_GetTick>
 8005338:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800533a:	4b57      	ldr	r3, [pc, #348]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a56      	ldr	r2, [pc, #344]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005340:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8005344:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fc fc8c 	bl	8001c64 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	@ 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e099      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800535a:	4b4f      	ldr	r3, [pc, #316]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005366:	f7fc fc7d 	bl	8001c64 <HAL_GetTick>
 800536a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800536c:	4b4a      	ldr	r3, [pc, #296]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a49      	ldr	r2, [pc, #292]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005376:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fc fc73 	bl	8001c64 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e080      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800538c:	4b42      	ldr	r3, [pc, #264]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005398:	f7fc fc64 	bl	8001c64 <HAL_GetTick>
 800539c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800539e:	4b3e      	ldr	r3, [pc, #248]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ac:	f7fc fc5a 	bl	8001c64 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e067      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80053ca:	f7fc fc4b 	bl	8001c64 <HAL_GetTick>
 80053ce:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80053d0:	4b31      	ldr	r3, [pc, #196]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a30      	ldr	r2, [pc, #192]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053da:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053de:	f7fc fc41 	bl	8001c64 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e04e      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80053f0:	4b29      	ldr	r3, [pc, #164]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80053fc:	4b26      	ldr	r3, [pc, #152]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 80053fe:	4a27      	ldr	r2, [pc, #156]	@ (800549c <HAL_RCC_DeInit+0x1dc>)
 8005400:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005402:	4b25      	ldr	r3, [pc, #148]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005404:	4a25      	ldr	r2, [pc, #148]	@ (800549c <HAL_RCC_DeInit+0x1dc>)
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800540a:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800540c:	4a24      	ldr	r2, [pc, #144]	@ (80054a0 <HAL_RCC_DeInit+0x1e0>)
 800540e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005412:	4b21      	ldr	r3, [pc, #132]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4a20      	ldr	r2, [pc, #128]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005418:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800541c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800541e:	4b1e      	ldr	r3, [pc, #120]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005428:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800542a:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005430:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005434:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005436:	4b18      	ldr	r3, [pc, #96]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800543c:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8005440:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8005442:	4b15      	ldr	r3, [pc, #84]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4a14      	ldr	r2, [pc, #80]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005448:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800544c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4a11      	ldr	r2, [pc, #68]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005454:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005458:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800545a:	4b0f      	ldr	r3, [pc, #60]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800545c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800545e:	4a0e      	ldr	r2, [pc, #56]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 8005468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546a:	4a0b      	ldr	r2, [pc, #44]	@ (8005498 <HAL_RCC_DeInit+0x1d8>)
 800546c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005470:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <HAL_RCC_DeInit+0x1e4>)
 8005474:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <HAL_RCC_DeInit+0x1e8>)
 8005476:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005478:	4b0c      	ldr	r3, [pc, #48]	@ (80054ac <HAL_RCC_DeInit+0x1ec>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7fc fbad 	bl	8001bdc <HAL_InitTick>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800548c:	2300      	movs	r3, #0
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
 800549c:	24003010 	.word	0x24003010
 80054a0:	04003010 	.word	0x04003010
 80054a4:	20000170 	.word	0x20000170
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	20000400 	.word	0x20000400

080054b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8083 	beq.w	80055d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054ca:	4b95      	ldr	r3, [pc, #596]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d019      	beq.n	800550a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054d6:	4b92      	ldr	r3, [pc, #584]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d106      	bne.n	80054f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ee:	d00c      	beq.n	800550a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f0:	4b8b      	ldr	r3, [pc, #556]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d112      	bne.n	8005522 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fc:	4b88      	ldr	r3, [pc, #544]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005508:	d10b      	bne.n	8005522 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550a:	4b85      	ldr	r3, [pc, #532]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05b      	beq.n	80055ce <HAL_RCC_OscConfig+0x11e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d157      	bne.n	80055ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e216      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552a:	d106      	bne.n	800553a <HAL_RCC_OscConfig+0x8a>
 800552c:	4b7c      	ldr	r3, [pc, #496]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a7b      	ldr	r2, [pc, #492]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	e01d      	b.n	8005576 <HAL_RCC_OscConfig+0xc6>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005542:	d10c      	bne.n	800555e <HAL_RCC_OscConfig+0xae>
 8005544:	4b76      	ldr	r3, [pc, #472]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a75      	ldr	r2, [pc, #468]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800554a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b73      	ldr	r3, [pc, #460]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a72      	ldr	r2, [pc, #456]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e00b      	b.n	8005576 <HAL_RCC_OscConfig+0xc6>
 800555e:	4b70      	ldr	r3, [pc, #448]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a6f      	ldr	r2, [pc, #444]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b6d      	ldr	r3, [pc, #436]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6c      	ldr	r2, [pc, #432]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d013      	beq.n	80055a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557e:	f7fc fb71 	bl	8001c64 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005586:	f7fc fb6d 	bl	8001c64 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b64      	cmp	r3, #100	@ 0x64
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e1db      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005598:	4b61      	ldr	r3, [pc, #388]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0xd6>
 80055a4:	e014      	b.n	80055d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc fb5d 	bl	8001c64 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ae:	f7fc fb59 	bl	8001c64 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b64      	cmp	r3, #100	@ 0x64
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e1c7      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c0:	4b57      	ldr	r3, [pc, #348]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <HAL_RCC_OscConfig+0xfe>
 80055cc:	e000      	b.n	80055d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d06f      	beq.n	80056bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055dc:	4b50      	ldr	r3, [pc, #320]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 030c 	and.w	r3, r3, #12
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d105      	bne.n	8005600 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005600:	4b47      	ldr	r3, [pc, #284]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d11c      	bne.n	8005646 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560c:	4b44      	ldr	r3, [pc, #272]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d116      	bne.n	8005646 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005618:	4b41      	ldr	r3, [pc, #260]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_OscConfig+0x180>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e18f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005630:	4b3b      	ldr	r3, [pc, #236]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4938      	ldr	r1, [pc, #224]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005640:	4313      	orrs	r3, r2
 8005642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005644:	e03a      	b.n	80056bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d020      	beq.n	8005690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800564e:	4b35      	ldr	r3, [pc, #212]	@ (8005724 <HAL_RCC_OscConfig+0x274>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc fb06 	bl	8001c64 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800565c:	f7fc fb02 	bl	8001c64 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e170      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b29      	ldr	r3, [pc, #164]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4925      	ldr	r1, [pc, #148]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	e015      	b.n	80056bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005690:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <HAL_RCC_OscConfig+0x274>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fc fae5 	bl	8001c64 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800569e:	f7fc fae1 	bl	8001c64 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e14f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d037      	beq.n	8005738 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056d0:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <HAL_RCC_OscConfig+0x278>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fc fac5 	bl	8001c64 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056de:	f7fc fac1 	bl	8001c64 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e12f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_RCC_OscConfig+0x270>)
 80056f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x22e>
 80056fc:	e01c      	b.n	8005738 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_RCC_OscConfig+0x278>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc faae 	bl	8001c64 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570a:	e00f      	b.n	800572c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570c:	f7fc faaa 	bl	8001c64 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d908      	bls.n	800572c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e118      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800
 8005724:	42470000 	.word	0x42470000
 8005728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800572c:	4b8a      	ldr	r3, [pc, #552]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800572e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e9      	bne.n	800570c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8097 	beq.w	8005874 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574a:	4b83      	ldr	r3, [pc, #524]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b7f      	ldr	r3, [pc, #508]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	4a7e      	ldr	r2, [pc, #504]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005764:	6413      	str	r3, [r2, #64]	@ 0x40
 8005766:	4b7c      	ldr	r3, [pc, #496]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005772:	2301      	movs	r3, #1
 8005774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005776:	4b79      	ldr	r3, [pc, #484]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d118      	bne.n	80057b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005782:	4b76      	ldr	r3, [pc, #472]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a75      	ldr	r2, [pc, #468]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 8005788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800578c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578e:	f7fc fa69 	bl	8001c64 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005796:	f7fc fa65 	bl	8001c64 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0d3      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	4b6c      	ldr	r3, [pc, #432]	@ (800595c <HAL_RCC_OscConfig+0x4ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x31a>
 80057bc:	4b66      	ldr	r3, [pc, #408]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c0:	4a65      	ldr	r2, [pc, #404]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c8:	e01c      	b.n	8005804 <HAL_RCC_OscConfig+0x354>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x33c>
 80057d2:	4b61      	ldr	r3, [pc, #388]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d6:	4a60      	ldr	r2, [pc, #384]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057d8:	f043 0304 	orr.w	r3, r3, #4
 80057dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057de:	4b5e      	ldr	r3, [pc, #376]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ea:	e00b      	b.n	8005804 <HAL_RCC_OscConfig+0x354>
 80057ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f0:	4a59      	ldr	r2, [pc, #356]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f8:	4b57      	ldr	r3, [pc, #348]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fc:	4a56      	ldr	r2, [pc, #344]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80057fe:	f023 0304 	bic.w	r3, r3, #4
 8005802:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fc fa2a 	bl	8001c64 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005812:	e00a      	b.n	800582a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005814:	f7fc fa26 	bl	8001c64 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e092      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	4b4b      	ldr	r3, [pc, #300]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ee      	beq.n	8005814 <HAL_RCC_OscConfig+0x364>
 8005836:	e014      	b.n	8005862 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc fa14 	bl	8001c64 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583e:	e00a      	b.n	8005856 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005840:	f7fc fa10 	bl	8001c64 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e07c      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005856:	4b40      	ldr	r3, [pc, #256]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ee      	bne.n	8005840 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d105      	bne.n	8005874 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005868:	4b3b      	ldr	r3, [pc, #236]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	4a3a      	ldr	r2, [pc, #232]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800586e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005872:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d068      	beq.n	800594e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800587c:	4b36      	ldr	r3, [pc, #216]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d060      	beq.n	800594a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d145      	bne.n	800591c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b33      	ldr	r3, [pc, #204]	@ (8005960 <HAL_RCC_OscConfig+0x4b0>)
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005896:	f7fc f9e5 	bl	8001c64 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589e:	f7fc f9e1 	bl	8001c64 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e04f      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b0:	4b29      	ldr	r3, [pc, #164]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f0      	bne.n	800589e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	019b      	lsls	r3, r3, #6
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	3b01      	subs	r3, #1
 80058d6:	041b      	lsls	r3, r3, #16
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	061b      	lsls	r3, r3, #24
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e6:	071b      	lsls	r3, r3, #28
 80058e8:	491b      	ldr	r1, [pc, #108]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <HAL_RCC_OscConfig+0x4b0>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc f9b6 	bl	8001c64 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fc f9b2 	bl	8001c64 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e020      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590e:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x44c>
 800591a:	e018      	b.n	800594e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591c:	4b10      	ldr	r3, [pc, #64]	@ (8005960 <HAL_RCC_OscConfig+0x4b0>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fc f99f 	bl	8001c64 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592a:	f7fc f99b 	bl	8001c64 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e009      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <HAL_RCC_OscConfig+0x4a8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f0      	bne.n	800592a <HAL_RCC_OscConfig+0x47a>
 8005948:	e001      	b.n	800594e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000
 8005960:	42470060 	.word	0x42470060

08005964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e056      	b.n	8005a24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f006 fa37 	bl	800be04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	ea42 0103 	orr.w	r1, r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	f003 0104 	and.w	r1, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_Transmit_IT+0x20>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e067      	b.n	8005b1c <HAL_SPI_Transmit_IT+0xf0>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Transmit_IT+0x34>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a64:	e055      	b.n	8005b12 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a76:	e04c      	b.n	8005b12 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	88fa      	ldrh	r2, [r7, #6]
 8005a90:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a1b      	ldr	r2, [pc, #108]	@ (8005b28 <HAL_SPI_Transmit_IT+0xfc>)
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
 8005abe:	e002      	b.n	8005ac6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b2c <HAL_SPI_Transmit_IT+0x100>)
 8005ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ace:	d107      	bne.n	8005ae0 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ade:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8005aee:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b40      	cmp	r3, #64	@ 0x40
 8005afc:	d008      	beq.n	8005b10 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e000      	b.n	8005b12 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8005b10:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	0800659d 	.word	0x0800659d
 8005b2c:	08006557 	.word	0x08006557

08005b30 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d110      	bne.n	8005b6c <HAL_SPI_Receive_IT+0x3c>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b52:	d10b      	bne.n	8005b6c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2204      	movs	r2, #4
 8005b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f87a 	bl	8005c5c <HAL_SPI_TransmitReceive_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	e06e      	b.n	8005c4a <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_SPI_Receive_IT+0x4a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e067      	b.n	8005c4a <HAL_SPI_Receive_IT+0x11a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d002      	beq.n	8005b94 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b92:	e055      	b.n	8005c40 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Receive_IT+0x70>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ba4:	e04c      	b.n	8005c40 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c54 <HAL_SPI_Receive_IT+0x124>)
 8005bea:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bec:	e002      	b.n	8005bf4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <HAL_SPI_Receive_IT+0x128>)
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d107      	bne.n	8005c0e <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005c1c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d008      	beq.n	8005c3e <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8005c3e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08006511 	.word	0x08006511
 8005c58:	080064c7 	.word	0x080064c7

08005c5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_SPI_TransmitReceive_IT+0x20>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e075      	b.n	8005d68 <HAL_SPI_TransmitReceive_IT+0x10c>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c8a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c92:	7dbb      	ldrb	r3, [r7, #22]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d00d      	beq.n	8005cb4 <HAL_SPI_TransmitReceive_IT+0x58>
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9e:	d106      	bne.n	8005cae <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <HAL_SPI_TransmitReceive_IT+0x52>
 8005ca8:	7dbb      	ldrb	r3, [r7, #22]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cb2:	e054      	b.n	8005d5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005cc0:	887b      	ldrh	r3, [r7, #2]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cca:	e048      	b.n	8005d5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d003      	beq.n	8005ce0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2205      	movs	r2, #5
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	887a      	ldrh	r2, [r7, #2]
 8005cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <HAL_SPI_TransmitReceive_IT+0x118>)
 8005d16:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d1e:	e005      	b.n	8005d2c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <HAL_SPI_TransmitReceive_IT+0x120>)
 8005d24:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a15      	ldr	r2, [pc, #84]	@ (8005d80 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d008      	beq.n	8005d5c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e000      	b.n	8005d5e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005d5c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	08006409 	.word	0x08006409
 8005d78:	08006469 	.word	0x08006469
 8005d7c:	08006345 	.word	0x08006345
 8005d80:	080063a9 	.word	0x080063a9

08005d84 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8005d90:	2301      	movs	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005d94:	4b72      	ldr	r3, [pc, #456]	@ (8005f60 <HAL_SPI_Abort_IT+0x1dc>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a72      	ldr	r2, [pc, #456]	@ (8005f64 <HAL_SPI_Abort_IT+0x1e0>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	0a5b      	lsrs	r3, r3, #9
 8005da0:	2264      	movs	r2, #100	@ 0x64
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0220 	bic.w	r2, r2, #32
 8005dba:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc6:	2b80      	cmp	r3, #128	@ 0x80
 8005dc8:	d117      	bne.n	8005dfa <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a66      	ldr	r2, [pc, #408]	@ (8005f68 <HAL_SPI_Abort_IT+0x1e4>)
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005de2:	e008      	b.n	8005df6 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b07      	cmp	r3, #7
 8005df4:	d1ec      	bne.n	8005dd0 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d117      	bne.n	8005e38 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a58      	ldr	r2, [pc, #352]	@ (8005f6c <HAL_SPI_Abort_IT+0x1e8>)
 8005e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005e20:	e008      	b.n	8005e34 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d1ec      	bne.n	8005e0e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00f      	beq.n	8005e60 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d104      	bne.n	8005e58 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e52:	4a47      	ldr	r2, [pc, #284]	@ (8005f70 <HAL_SPI_Abort_IT+0x1ec>)
 8005e54:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e56:	e003      	b.n	8005e60 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00f      	beq.n	8005e88 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d104      	bne.n	8005e80 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f74 <HAL_SPI_Abort_IT+0x1f0>)
 8005e7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005e7e:	e003      	b.n	8005e88 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e84:	2200      	movs	r2, #0
 8005e86:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d115      	bne.n	8005ec2 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d011      	beq.n	8005ec2 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fc f972 	bl	800218c <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2240      	movs	r2, #64	@ 0x40
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ebc:	e001      	b.n	8005ec2 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d115      	bne.n	8005efc <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fc f955 	bl	800218c <HAL_DMA_Abort_IT>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eec:	2200      	movs	r2, #0
 8005eee:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2240      	movs	r2, #64	@ 0x40
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ef6:	e001      	b.n	8005efc <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d128      	bne.n	8005f54 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->TxXferCount = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f12:	2b40      	cmp	r3, #64	@ 0x40
 8005f14:	d102      	bne.n	8005f1c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e002      	b.n	8005f22 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f910 	bl	8006174 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8005f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000170 	.word	0x20000170
 8005f64:	057619f1 	.word	0x057619f1
 8005f68:	08006ab9 	.word	0x08006ab9
 8005f6c:	08006a31 	.word	0x08006a31
 8005f70:	080061b1 	.word	0x080061b1
 8005f74:	08006285 	.word	0x08006285

08005f78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10e      	bne.n	8005fb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
    return;
 8005fb6:	e0ce      	b.n	8006156 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_SPI_IRQHandler+0x5e>
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
    return;
 8005fd4:	e0bf      	b.n	8006156 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <HAL_SPI_IRQHandler+0x7e>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d105      	bne.n	8005ff6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80b0 	beq.w	8006156 <HAL_SPI_IRQHandler+0x1de>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80aa 	beq.w	8006156 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d023      	beq.n	8006054 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b03      	cmp	r3, #3
 8006016:	d011      	beq.n	800603c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601c:	f043 0204 	orr.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	e00b      	b.n	8006054 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	693b      	ldr	r3, [r7, #16]
        return;
 8006052:	e080      	b.n	8006156 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d014      	beq.n	8006088 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00c      	beq.n	80060ac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	f043 0208 	orr.w	r2, r3, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d04f      	beq.n	8006154 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060c2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d104      	bne.n	80060e0 <HAL_SPI_IRQHandler+0x168>
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d034      	beq.n	800614a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0203 	bic.w	r2, r2, #3
 80060ee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d011      	beq.n	800611c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fc:	4a17      	ldr	r2, [pc, #92]	@ (800615c <HAL_SPI_IRQHandler+0x1e4>)
 80060fe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006104:	4618      	mov	r0, r3
 8006106:	f7fc f841 	bl	800218c <HAL_DMA_Abort_IT>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006120:	2b00      	cmp	r3, #0
 8006122:	d016      	beq.n	8006152 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006128:	4a0c      	ldr	r2, [pc, #48]	@ (800615c <HAL_SPI_IRQHandler+0x1e4>)
 800612a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006130:	4618      	mov	r0, r3
 8006132:	f7fc f82b 	bl	800218c <HAL_DMA_Abort_IT>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006140:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006148:	e003      	b.n	8006152 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f808 	bl	8006160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006150:	e000      	b.n	8006154 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006152:	bf00      	nop
    return;
 8006154:	bf00      	nop
  }
}
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08006189 	.word	0x08006189

08006160 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ffdc 	bl	8006160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c2:	2200      	movs	r2, #0
 80061c4:	651a      	str	r2, [r3, #80]	@ 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80061c6:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <SPI_DMATxAbortCallback+0xcc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006280 <SPI_DMATxAbortCallback+0xd0>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	0a5b      	lsrs	r3, r3, #9
 80061d2:	2264      	movs	r2, #100	@ 0x64
 80061d4:	fb02 f303 	mul.w	r3, r2, r3
 80061d8:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0202 	bic.w	r2, r2, #2
 80061e8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061fc:	e009      	b.n	8006212 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	3b01      	subs	r3, #1
 8006202:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0eb      	beq.n	80061ea <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d004      	beq.n	8006224 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d126      	bne.n	8006272 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d002      	beq.n	800623e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7ff ff82 	bl	8006174 <HAL_SPI_AbortCpltCallback>
 8006270:	e000      	b.n	8006274 <SPI_DMATxAbortCallback+0xc4>
      return;
 8006272:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000170 	.word	0x20000170
 8006280:	057619f1 	.word	0x057619f1

08006284 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a6:	2200      	movs	r2, #0
 80062a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80062ba:	f7fb fcd3 	bl	8001c64 <HAL_GetTick>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	2164      	movs	r1, #100	@ 0x64
 80062c4:	6978      	ldr	r0, [r7, #20]
 80062c6:	f000 fa5b 	bl	8006780 <SPI_EndRxTxTransaction>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d126      	bne.n	800633c <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2200      	movs	r2, #0
 80062f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2200      	movs	r2, #0
 80062f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fe:	2b40      	cmp	r3, #64	@ 0x40
 8006300:	d002      	beq.n	8006308 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800631e:	2300      	movs	r3, #0
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8006334:	6978      	ldr	r0, [r7, #20]
 8006336:	f7ff ff1d 	bl	8006174 <HAL_SPI_AbortCpltCallback>
 800633a:	e000      	b.n	800633e <SPI_DMARxAbortCallback+0xba>
      return;
 800633c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f103 020c 	add.w	r2, r3, #12
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10f      	bne.n	80063a0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800638e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa32 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10f      	bne.n	8006400 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa02 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	b292      	uxth	r2, r2
 800641c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10f      	bne.n	8006460 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800644e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9d2 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006474:	881a      	ldrh	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	1c9a      	adds	r2, r3, #2
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9a3 	bl	8006804 <SPI_CloseRxTx_ISR>
    }
  }
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f103 020c 	add.w	r2, r3, #12
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	7812      	ldrb	r2, [r2, #0]
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9f2 	bl	80068ec <SPI_CloseRx_ISR>
  }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	b292      	uxth	r2, r2
 8006524:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f9cf 	bl	80068ec <SPI_CloseRx_ISR>
  }
}
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	330c      	adds	r3, #12
 8006568:	7812      	ldrb	r2, [r2, #0]
 800656a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9ec 	bl	800696c <SPI_CloseTx_ISR>
  }
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a8:	881a      	ldrh	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	1c9a      	adds	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9ca 	bl	800696c <SPI_CloseTx_ISR>
  }
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065f0:	e04c      	b.n	800668c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d048      	beq.n	800668c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065fa:	f7fb fb33 	bl	8001c64 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d902      	bls.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x30>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d13d      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800661e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006628:	d111      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006632:	d004      	beq.n	800663e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663c:	d107      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800664c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006656:	d10f      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006676:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e00f      	b.n	80066ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4013      	ands	r3, r2
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d1a3      	bne.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c8:	d111      	bne.n	80066ee <SPI_EndRxTransaction+0x3a>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d2:	d004      	beq.n	80066de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066dc:	d107      	bne.n	80066ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f6:	d12a      	bne.n	800674e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006700:	d012      	beq.n	8006728 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff ff67 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d02d      	beq.n	8006774 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671c:	f043 0220 	orr.w	r2, r3, #32
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e026      	b.n	8006776 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	2101      	movs	r1, #1
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff54 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01a      	beq.n	8006774 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e013      	b.n	8006776 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2200      	movs	r2, #0
 8006756:	2101      	movs	r1, #1
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7ff ff41 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e000      	b.n	8006776 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800678c:	4b1b      	ldr	r3, [pc, #108]	@ (80067fc <SPI_EndRxTxTransaction+0x7c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <SPI_EndRxTxTransaction+0x80>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	0d5b      	lsrs	r3, r3, #21
 8006798:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800679c:	fb02 f303 	mul.w	r3, r2, r3
 80067a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067aa:	d112      	bne.n	80067d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7ff ff12 	bl	80065e0 <SPI_WaitFlagStateUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d016      	beq.n	80067f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	f043 0220 	orr.w	r2, r3, #32
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e00f      	b.n	80067f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3b01      	subs	r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e8:	2b80      	cmp	r3, #128	@ 0x80
 80067ea:	d0f2      	beq.n	80067d2 <SPI_EndRxTxTransaction+0x52>
 80067ec:	e000      	b.n	80067f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80067ee:	bf00      	nop
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000170 	.word	0x20000170
 8006800:	165e9f81 	.word	0x165e9f81

08006804 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800680c:	4b35      	ldr	r3, [pc, #212]	@ (80068e4 <SPI_CloseRxTx_ISR+0xe0>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a35      	ldr	r2, [pc, #212]	@ (80068e8 <SPI_CloseRxTx_ISR+0xe4>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	0a5b      	lsrs	r3, r3, #9
 8006818:	2264      	movs	r2, #100	@ 0x64
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006820:	f7fb fa20 	bl	8001c64 <HAL_GetTick>
 8006824:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0220 	bic.w	r2, r2, #32
 8006834:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006848:	e009      	b.n	800685e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3b01      	subs	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0eb      	beq.n	8006836 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	2164      	movs	r1, #100	@ 0x64
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff8c 	bl	8006780 <SPI_EndRxTxTransaction>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689c:	2b00      	cmp	r3, #0
 800689e:	d115      	bne.n	80068cc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d107      	bne.n	80068bc <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f005 f971 	bl	800bb9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80068ba:	e00e      	b.n	80068da <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f005 f997 	bl	800bbf8 <HAL_SPI_TxRxCpltCallback>
}
 80068ca:	e006      	b.n	80068da <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fc43 	bl	8006160 <HAL_SPI_ErrorCallback>
}
 80068da:	bf00      	nop
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000170 	.word	0x20000170
 80068e8:	057619f1 	.word	0x057619f1

080068ec <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006902:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006904:	f7fb f9ae 	bl	8001c64 <HAL_GetTick>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	2164      	movs	r1, #100	@ 0x64
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fed0 	bl	80066b4 <SPI_EndRxTransaction>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f043 0220 	orr.w	r2, r3, #32
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	2b00      	cmp	r3, #0
 8006952:	d103      	bne.n	800695c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f005 f921 	bl	800bb9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800695a:	e002      	b.n	8006962 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fbff 	bl	8006160 <HAL_SPI_ErrorCallback>
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006974:	4b2c      	ldr	r3, [pc, #176]	@ (8006a28 <SPI_CloseTx_ISR+0xbc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2c      	ldr	r2, [pc, #176]	@ (8006a2c <SPI_CloseTx_ISR+0xc0>)
 800697a:	fba2 2303 	umull	r2, r3, r2, r3
 800697e:	0a5b      	lsrs	r3, r3, #9
 8006980:	2264      	movs	r2, #100	@ 0x64
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006988:	f7fb f96c 	bl	8001c64 <HAL_GetTick>
 800698c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80069a0:	e009      	b.n	80069b6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0eb      	beq.n	800698e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	2164      	movs	r1, #100	@ 0x64
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fed8 	bl	8006780 <SPI_EndRxTxTransaction>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fba5 	bl	8006160 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006a16:	e002      	b.n	8006a1e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f005 f891 	bl	800bb40 <HAL_SPI_TxCpltCallback>
}
 8006a1e:	bf00      	nop
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000170 	.word	0x20000170
 8006a2c:	057619f1 	.word	0x057619f1

08006a30 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006a38:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <SPI_AbortRx_ISR+0x80>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <SPI_AbortRx_ISR+0x84>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	0a5b      	lsrs	r3, r3, #9
 8006a44:	2264      	movs	r2, #100	@ 0x64
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a5e:	e009      	b.n	8006a74 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0eb      	beq.n	8006a4c <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a82:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a92:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2207      	movs	r2, #7
 8006a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000170 	.word	0x20000170
 8006ab4:	057619f1 	.word	0x057619f1

08006ab8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ace:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ade:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2207      	movs	r2, #7
 8006ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e01d      	b.n	8006b42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f815 	bl	8006b4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	f000 fa2c 	bl	8006f90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d007      	beq.n	8006b90 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d122      	bne.n	8006c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d11b      	bne.n	8006c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f06f 0202 	mvn.w	r2, #2
 8006bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f9b2 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006bee:	e005      	b.n	8006bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f9a4 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f9b5 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d122      	bne.n	8006c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d11b      	bne.n	8006c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f06f 0204 	mvn.w	r2, #4
 8006c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f988 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006c42:	e005      	b.n	8006c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f97a 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f98b 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d122      	bne.n	8006caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d11b      	bne.n	8006caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f06f 0208 	mvn.w	r2, #8
 8006c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2204      	movs	r2, #4
 8006c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f95e 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006c96:	e005      	b.n	8006ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f950 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f961 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d122      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d11b      	bne.n	8006cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f06f 0210 	mvn.w	r2, #16
 8006cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f934 	bl	8006f52 <HAL_TIM_IC_CaptureCallback>
 8006cea:	e005      	b.n	8006cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f926 	bl	8006f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f937 	bl	8006f66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10e      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d107      	bne.n	8006d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f06f 0201 	mvn.w	r2, #1
 8006d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f005 fb41 	bl	800c3ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d34:	2b80      	cmp	r3, #128	@ 0x80
 8006d36:	d10e      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d42:	2b80      	cmp	r3, #128	@ 0x80
 8006d44:	d107      	bne.n	8006d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fadd 	bl	8007310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	d10e      	bne.n	8006d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6e:	2b40      	cmp	r3, #64	@ 0x40
 8006d70:	d107      	bne.n	8006d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f8fc 	bl	8006f7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d10e      	bne.n	8006dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d107      	bne.n	8006dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f06f 0220 	mvn.w	r2, #32
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 faa7 	bl	80072fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_ConfigClockSource+0x18>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0b3      	b.n	8006f36 <HAL_TIM_ConfigClockSource+0x180>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006df4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e06:	d03e      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0xd0>
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e0c:	f200 8087 	bhi.w	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e14:	f000 8085 	beq.w	8006f22 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1c:	d87f      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e1e:	2b70      	cmp	r3, #112	@ 0x70
 8006e20:	d01a      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0xa2>
 8006e22:	2b70      	cmp	r3, #112	@ 0x70
 8006e24:	d87b      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e26:	2b60      	cmp	r3, #96	@ 0x60
 8006e28:	d050      	beq.n	8006ecc <HAL_TIM_ConfigClockSource+0x116>
 8006e2a:	2b60      	cmp	r3, #96	@ 0x60
 8006e2c:	d877      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e2e:	2b50      	cmp	r3, #80	@ 0x50
 8006e30:	d03c      	beq.n	8006eac <HAL_TIM_ConfigClockSource+0xf6>
 8006e32:	2b50      	cmp	r3, #80	@ 0x50
 8006e34:	d873      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e36:	2b40      	cmp	r3, #64	@ 0x40
 8006e38:	d058      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0x136>
 8006e3a:	2b40      	cmp	r3, #64	@ 0x40
 8006e3c:	d86f      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e3e:	2b30      	cmp	r3, #48	@ 0x30
 8006e40:	d064      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
 8006e42:	2b30      	cmp	r3, #48	@ 0x30
 8006e44:	d86b      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d060      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d867      	bhi.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d05c      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d05a      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e56:	e062      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f000 f9ac 	bl	80071c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
      break;
 8006e84:	e04e      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6899      	ldr	r1, [r3, #8]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f000 f995 	bl	80071c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ea8:	609a      	str	r2, [r3, #8]
      break;
 8006eaa:	e03b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f000 f909 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2150      	movs	r1, #80	@ 0x50
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 f962 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006eca:	e02b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	f000 f928 	bl	800712e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2160      	movs	r1, #96	@ 0x60
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f952 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006eea:	e01b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6859      	ldr	r1, [r3, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f000 f8e9 	bl	80070d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2140      	movs	r1, #64	@ 0x40
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 f942 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006f0a:	e00b      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f000 f939 	bl	800718e <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e002      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f1e:	bf00      	nop
 8006f20:	e000      	b.n	8006f24 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a40      	ldr	r2, [pc, #256]	@ (80070a4 <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fae:	d00f      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80070a8 <TIM_Base_SetConfig+0x118>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <TIM_Base_SetConfig+0x11c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80070b0 <TIM_Base_SetConfig+0x120>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3a      	ldr	r2, [pc, #232]	@ (80070b4 <TIM_Base_SetConfig+0x124>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d108      	bne.n	8006fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80070a4 <TIM_Base_SetConfig+0x114>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d02b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff0:	d027      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80070a8 <TIM_Base_SetConfig+0x118>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d023      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80070ac <TIM_Base_SetConfig+0x11c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01f      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2a      	ldr	r2, [pc, #168]	@ (80070b0 <TIM_Base_SetConfig+0x120>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <TIM_Base_SetConfig+0x124>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d017      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a28      	ldr	r2, [pc, #160]	@ (80070b8 <TIM_Base_SetConfig+0x128>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a27      	ldr	r2, [pc, #156]	@ (80070bc <TIM_Base_SetConfig+0x12c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00f      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a26      	ldr	r2, [pc, #152]	@ (80070c0 <TIM_Base_SetConfig+0x130>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a25      	ldr	r2, [pc, #148]	@ (80070c4 <TIM_Base_SetConfig+0x134>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a24      	ldr	r2, [pc, #144]	@ (80070c8 <TIM_Base_SetConfig+0x138>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a23      	ldr	r2, [pc, #140]	@ (80070cc <TIM_Base_SetConfig+0x13c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d108      	bne.n	8007054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a0a      	ldr	r2, [pc, #40]	@ (80070a4 <TIM_Base_SetConfig+0x114>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <TIM_Base_SetConfig+0x124>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d103      	bne.n	8007090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	615a      	str	r2, [r3, #20]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40010400 	.word	0x40010400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800
 80070c4:	40001800 	.word	0x40001800
 80070c8:	40001c00 	.word	0x40001c00
 80070cc:	40002000 	.word	0x40002000

080070d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0201 	bic.w	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 030a 	bic.w	r3, r3, #10
 800710c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712e:	b480      	push	{r7}
 8007130:	b087      	sub	sp, #28
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0210 	bic.w	r2, r3, #16
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800716a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f043 0307 	orr.w	r3, r3, #7
 80071b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	021a      	lsls	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	371c      	adds	r7, #28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007218:	2302      	movs	r3, #2
 800721a:	e05a      	b.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a21      	ldr	r2, [pc, #132]	@ (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d022      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007268:	d01d      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d018      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1b      	ldr	r2, [pc, #108]	@ (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1a      	ldr	r2, [pc, #104]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a18      	ldr	r2, [pc, #96]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a17      	ldr	r2, [pc, #92]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a15      	ldr	r2, [pc, #84]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d10c      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40001800 	.word	0x40001800

080072fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e03f      	b.n	80073b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f005 ff22 	bl	800d194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2224      	movs	r2, #36	@ 0x24
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 fc01 	bl	8008b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800737c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800738c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800739c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2220      	movs	r2, #32
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b08a      	sub	sp, #40	@ 0x28
 80073c2:	af02      	add	r7, sp, #8
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d17c      	bne.n	80074d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Transmit+0x2c>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e075      	b.n	80074da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UART_Transmit+0x3e>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e06e      	b.n	80074da <HAL_UART_Transmit+0x11c>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2221      	movs	r2, #33	@ 0x21
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007412:	f7fa fc27 	bl	8001c64 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	88fa      	ldrh	r2, [r7, #6]
 8007422:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800742c:	d108      	bne.n	8007440 <HAL_UART_Transmit+0x82>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e003      	b.n	8007448 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007450:	e02a      	b.n	80074a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2200      	movs	r2, #0
 800745a:	2180      	movs	r1, #128	@ 0x80
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f001 f81a 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e036      	b.n	80074da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007480:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	3302      	adds	r3, #2
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	e007      	b.n	800749a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1cf      	bne.n	8007452 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2200      	movs	r2, #0
 80074ba:	2140      	movs	r1, #64	@ 0x40
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 ffea 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e006      	b.n	80074da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08a      	sub	sp, #40	@ 0x28
 80074e6:	af02      	add	r7, sp, #8
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b20      	cmp	r3, #32
 8007500:	f040 808c 	bne.w	800761c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Receive+0x2e>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e084      	b.n	800761e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_UART_Receive+0x40>
 800751e:	2302      	movs	r3, #2
 8007520:	e07d      	b.n	800761e <HAL_UART_Receive+0x13c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2222      	movs	r2, #34	@ 0x22
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753e:	f7fa fb91 	bl	8001c64 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Receive+0x8a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800757c:	e043      	b.n	8007606 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	2120      	movs	r1, #32
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 ff84 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e042      	b.n	800761e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10c      	bne.n	80075b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	3302      	adds	r3, #2
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	e01f      	b.n	80075f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d007      	beq.n	80075d2 <HAL_UART_Receive+0xf0>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <HAL_UART_Receive+0xfe>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e008      	b.n	80075f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1b6      	bne.n	800757e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	4613      	mov	r3, r2
 8007632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b20      	cmp	r3, #32
 800763e:	d130      	bne.n	80076a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Transmit_IT+0x26>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e029      	b.n	80076a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_UART_Transmit_IT+0x38>
 800765a:	2302      	movs	r3, #2
 800765c:	e022      	b.n	80076a4 <HAL_UART_Transmit_IT+0x7e>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2221      	movs	r2, #33	@ 0x21
 8007682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800769c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d11d      	bne.n	8007706 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_UART_Receive_IT+0x26>
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e016      	b.n	8007708 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Receive_IT+0x38>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e00f      	b.n	8007708 <HAL_UART_Receive_IT+0x58>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 ff38 	bl	8008572 <UART_Start_Receive_IT>
 8007702:	4603      	mov	r3, r0
 8007704:	e000      	b.n	8007708 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	@ 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b20      	cmp	r3, #32
 8007728:	d165      	bne.n	80077f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_UART_Transmit_DMA+0x26>
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e05e      	b.n	80077f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007740:	2b01      	cmp	r3, #1
 8007742:	d101      	bne.n	8007748 <HAL_UART_Transmit_DMA+0x38>
 8007744:	2302      	movs	r3, #2
 8007746:	e057      	b.n	80077f8 <HAL_UART_Transmit_DMA+0xe8>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2221      	movs	r2, #33	@ 0x21
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007774:	4a22      	ldr	r2, [pc, #136]	@ (8007800 <HAL_UART_Transmit_DMA+0xf0>)
 8007776:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777c:	4a21      	ldr	r2, [pc, #132]	@ (8007804 <HAL_UART_Transmit_DMA+0xf4>)
 800777e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007784:	4a20      	ldr	r2, [pc, #128]	@ (8007808 <HAL_UART_Transmit_DMA+0xf8>)
 8007786:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800778c:	2200      	movs	r2, #0
 800778e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007790:	f107 0308 	add.w	r3, r7, #8
 8007794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	6819      	ldr	r1, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3304      	adds	r3, #4
 80077a4:	461a      	mov	r2, r3
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	f7fa fc28 	bl	8001ffc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3314      	adds	r3, #20
 80077c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	617b      	str	r3, [r7, #20]
   return(result);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077de:	627a      	str	r2, [r7, #36]	@ 0x24
 80077e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6a39      	ldr	r1, [r7, #32]
 80077e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e000      	b.n	80077f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
  }
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3730      	adds	r7, #48	@ 0x30
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	080081f1 	.word	0x080081f1
 8007804:	0800828b 	.word	0x0800828b
 8007808:	08008403 	.word	0x08008403

0800780c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b20      	cmp	r3, #32
 8007824:	d11d      	bne.n	8007862 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_UART_Receive_DMA+0x26>
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e016      	b.n	8007864 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_UART_Receive_DMA+0x38>
 8007840:	2302      	movs	r3, #2
 8007842:	e00f      	b.n	8007864 <HAL_UART_Receive_DMA+0x58>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007852:	88fb      	ldrh	r3, [r7, #6]
 8007854:	461a      	mov	r2, r3
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fec9 	bl	80085f0 <UART_Start_Receive_DMA>
 800785e:	4603      	mov	r3, r0
 8007860:	e000      	b.n	8007864 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007862:	2302      	movs	r3, #2
  }
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b0a0      	sub	sp, #128	@ 0x80
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007886:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800788a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007894:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007896:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800789a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80078a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3314      	adds	r3, #20
 80078c6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80078c8:	657a      	str	r2, [r7, #84]	@ 0x54
 80078ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e5      	bne.n	80078a8 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d119      	bne.n	8007918 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007904:	643a      	str	r2, [r7, #64]	@ 0x40
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800790a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007922:	2b80      	cmp	r3, #128	@ 0x80
 8007924:	d136      	bne.n	8007994 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3314      	adds	r3, #20
 800792c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	61fb      	str	r3, [r7, #28]
   return(result);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800793c:	673b      	str	r3, [r7, #112]	@ 0x70
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3314      	adds	r3, #20
 8007944:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007948:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800794c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007966:	2200      	movs	r2, #0
 8007968:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800796e:	4618      	mov	r0, r3
 8007970:	f7fa fb9c 	bl	80020ac <HAL_DMA_Abort>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797e:	4618      	mov	r0, r3
 8007980:	f7fa fdbe 	bl	8002500 <HAL_DMA_GetError>
 8007984:	4603      	mov	r3, r0
 8007986:	2b20      	cmp	r3, #32
 8007988:	d104      	bne.n	8007994 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2210      	movs	r2, #16
 800798e:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e052      	b.n	8007a3a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	d136      	bne.n	8007a10 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3314      	adds	r3, #20
 80079a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3314      	adds	r3, #20
 80079c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079c2:	61ba      	str	r2, [r7, #24]
 80079c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6979      	ldr	r1, [r7, #20]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	613b      	str	r3, [r7, #16]
   return(result);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d018      	beq.n	8007a10 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e2:	2200      	movs	r2, #0
 80079e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fa fb5e 	bl	80020ac <HAL_DMA_Abort>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fa fd80 	bl	8002500 <HAL_DMA_GetError>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d104      	bne.n	8007a10 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2210      	movs	r2, #16
 8007a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e014      	b.n	8007a3a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3780      	adds	r7, #128	@ 0x80
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b0a2      	sub	sp, #136	@ 0x88
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	330c      	adds	r3, #12
 8007a58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a64:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e3      	bne.n	8007a52 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3314      	adds	r3, #20
 8007a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3314      	adds	r3, #20
 8007aa8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007aaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007aac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ab0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d119      	bne.n	8007afa <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad8:	f023 0310 	bic.w	r3, r3, #16
 8007adc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007ae6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ae8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00f      	beq.n	8007b22 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0c:	2b80      	cmp	r3, #128	@ 0x80
 8007b0e:	d104      	bne.n	8007b1a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b14:	4a53      	ldr	r2, [pc, #332]	@ (8007c64 <HAL_UART_Abort_IT+0x220>)
 8007b16:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b18:	e003      	b.n	8007b22 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1e:	2200      	movs	r2, #0
 8007b20:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	d104      	bne.n	8007b42 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8007c68 <HAL_UART_Abort_IT+0x224>)
 8007b3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b40:	e003      	b.n	8007b4a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	2200      	movs	r2, #0
 8007b48:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b54:	2b80      	cmp	r3, #128	@ 0x80
 8007b56:	d12d      	bne.n	8007bb4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	623b      	str	r3, [r7, #32]
   return(result);
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3314      	adds	r3, #20
 8007b76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e5      	bne.n	8007b58 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00f      	beq.n	8007bb4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fa faf7 	bl	800218c <HAL_DMA_Abort_IT>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba8:	2200      	movs	r2, #0
 8007baa:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bac:	e002      	b.n	8007bb4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d130      	bne.n	8007c24 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3314      	adds	r3, #20
 8007be0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007be2:	61fa      	str	r2, [r7, #28]
 8007be4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	69b9      	ldr	r1, [r7, #24]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	617b      	str	r3, [r7, #20]
   return(result);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e5      	bne.n	8007bc2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d012      	beq.n	8007c24 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fa fac2 	bl	800218c <HAL_DMA_Abort_IT>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c12:	2200      	movs	r2, #0
 8007c14:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c1c:	e002      	b.n	8007c24 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8007c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d116      	bne.n	8007c5a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fab5 	bl	80081c4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3788      	adds	r7, #136	@ 0x88
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	0800886b 	.word	0x0800886b
 8007c68:	080088cb 	.word	0x080088cb

08007c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b0ba      	sub	sp, #232	@ 0xe8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10f      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d009      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x66>
 8007cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fe95 	bl	80089fa <UART_Receive_IT>
      return;
 8007cd0:	e256      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80de 	beq.w	8007e98 <HAL_UART_IRQHandler+0x22c>
 8007cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80d1 	beq.w	8007e98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <HAL_UART_IRQHandler+0xae>
 8007d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	f043 0201 	orr.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_UART_IRQHandler+0xd2>
 8007d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d36:	f043 0202 	orr.w	r2, r3, #2
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <HAL_UART_IRQHandler+0xf6>
 8007d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5a:	f043 0204 	orr.w	r2, r3, #4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <HAL_UART_IRQHandler+0x126>
 8007d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	f043 0208 	orr.w	r2, r3, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 81ed 	beq.w	8008176 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <HAL_UART_IRQHandler+0x14e>
 8007da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fe20 	bl	80089fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d103      	bne.n	8007de6 <HAL_UART_IRQHandler+0x17a>
 8007dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d04f      	beq.n	8007e86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fcc8 	bl	800877c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df6:	2b40      	cmp	r3, #64	@ 0x40
 8007df8:	d141      	bne.n	8007e7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3314      	adds	r3, #20
 8007e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1d9      	bne.n	8007dfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d013      	beq.n	8007e76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	4a7d      	ldr	r2, [pc, #500]	@ (8008048 <HAL_UART_IRQHandler+0x3dc>)
 8007e54:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fa f996 	bl	800218c <HAL_DMA_Abort_IT>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d016      	beq.n	8007e94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e74:	e00e      	b.n	8007e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f99a 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	e00a      	b.n	8007e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f996 	bl	80081b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	e006      	b.n	8007e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f992 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007e92:	e170      	b.n	8008176 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	bf00      	nop
    return;
 8007e96:	e16e      	b.n	8008176 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	f040 814a 	bne.w	8008136 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8143 	beq.w	8008136 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 813c 	beq.w	8008136 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ede:	2b40      	cmp	r3, #64	@ 0x40
 8007ee0:	f040 80b4 	bne.w	800804c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8140 	beq.w	800817a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f080 8139 	bcs.w	800817a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f1a:	f000 8088 	beq.w	800802e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1d9      	bne.n	8007f1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3314      	adds	r3, #20
 8007f70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3314      	adds	r3, #20
 8007f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e1      	bne.n	8007f6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3314      	adds	r3, #20
 8007fac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e3      	bne.n	8007fa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ffe:	f023 0310 	bic.w	r3, r3, #16
 8008002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	330c      	adds	r3, #12
 800800c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008010:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008012:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008016:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800801e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e3      	bne.n	8007fec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008028:	4618      	mov	r0, r3
 800802a:	f7fa f83f 	bl	80020ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008036:	b29b      	uxth	r3, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	b29b      	uxth	r3, r3
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8ca 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008044:	e099      	b.n	800817a <HAL_UART_IRQHandler+0x50e>
 8008046:	bf00      	nop
 8008048:	08008843 	.word	0x08008843
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008054:	b29b      	uxth	r3, r3
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 808b 	beq.w	800817e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8086 	beq.w	800817e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	330c      	adds	r3, #12
 8008092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008096:	647a      	str	r2, [r7, #68]	@ 0x44
 8008098:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800809c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e3      	bne.n	8008072 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3314      	adds	r3, #20
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f023 0301 	bic.w	r3, r3, #1
 80080c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e3      	bne.n	80080aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0310 	bic.w	r3, r3, #16
 8008106:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008114:	61fa      	str	r2, [r7, #28]
 8008116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	69b9      	ldr	r1, [r7, #24]
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	617b      	str	r3, [r7, #20]
   return(result);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e3      	bne.n	80080f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f852 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008134:	e023      	b.n	800817e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_UART_IRQHandler+0x4ea>
 8008142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fbeb 	bl	800892a <UART_Transmit_IT>
    return;
 8008154:	e014      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <HAL_UART_IRQHandler+0x514>
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fc2b 	bl	80089ca <UART_EndTransmit_IT>
    return;
 8008174:	e004      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
    return;
 8008176:	bf00      	nop
 8008178:	e002      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
      return;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <HAL_UART_IRQHandler+0x514>
      return;
 800817e:	bf00      	nop
  }
}
 8008180:	37e8      	adds	r7, #232	@ 0xe8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop

08008188 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b090      	sub	sp, #64	@ 0x40
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d137      	bne.n	800827c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800820c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820e:	2200      	movs	r2, #0
 8008210:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	623b      	str	r3, [r7, #32]
   return(result);
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008228:	63bb      	str	r3, [r7, #56]	@ 0x38
 800822a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	3314      	adds	r3, #20
 8008230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008232:	633a      	str	r2, [r7, #48]	@ 0x30
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	330c      	adds	r3, #12
 800824c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	60fb      	str	r3, [r7, #12]
   return(result);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825c:	637b      	str	r3, [r7, #52]	@ 0x34
 800825e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	330c      	adds	r3, #12
 8008264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008266:	61fa      	str	r2, [r7, #28]
 8008268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69b9      	ldr	r1, [r7, #24]
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	617b      	str	r3, [r7, #20]
   return(result);
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800827a:	e002      	b.n	8008282 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800827c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800827e:	f004 ff31 	bl	800d0e4 <HAL_UART_TxCpltCallback>
}
 8008282:	bf00      	nop
 8008284:	3740      	adds	r7, #64	@ 0x40
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff ff75 	bl	8008188 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b09c      	sub	sp, #112	@ 0x70
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d172      	bne.n	80083a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80082c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082c4:	2200      	movs	r2, #0
 80082c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	330c      	adds	r3, #12
 80082ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80082e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80082ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3314      	adds	r3, #20
 8008302:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800830c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	667b      	str	r3, [r7, #100]	@ 0x64
 8008314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800831c:	647a      	str	r2, [r7, #68]	@ 0x44
 800831e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800832a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3314      	adds	r3, #20
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	623b      	str	r3, [r7, #32]
   return(result);
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008346:	663b      	str	r3, [r7, #96]	@ 0x60
 8008348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3314      	adds	r3, #20
 800834e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008350:	633a      	str	r2, [r7, #48]	@ 0x30
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800836c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	2b01      	cmp	r3, #1
 8008372:	d119      	bne.n	80083a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	330c      	adds	r3, #12
 800837a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	60fb      	str	r3, [r7, #12]
   return(result);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0310 	bic.w	r3, r3, #16
 800838a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800838c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008394:	61fa      	str	r2, [r7, #28]
 8008396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	69b9      	ldr	r1, [r7, #24]
 800839a:	69fa      	ldr	r2, [r7, #28]
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	617b      	str	r3, [r7, #20]
   return(result);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e5      	bne.n	8008374 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d106      	bne.n	80083be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083b4:	4619      	mov	r1, r3
 80083b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083b8:	f7ff ff0e 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083bc:	e002      	b.n	80083c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80083be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083c0:	f004 febc 	bl	800d13c <HAL_UART_RxCpltCallback>
}
 80083c4:	bf00      	nop
 80083c6:	3770      	adds	r7, #112	@ 0x70
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d108      	bne.n	80083f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083e6:	085b      	lsrs	r3, r3, #1
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fef3 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083f2:	e002      	b.n	80083fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fed1 	bl	800819c <HAL_UART_RxHalfCpltCallback>
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008412:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800841e:	2b80      	cmp	r3, #128	@ 0x80
 8008420:	bf0c      	ite	eq
 8008422:	2301      	moveq	r3, #1
 8008424:	2300      	movne	r3, #0
 8008426:	b2db      	uxtb	r3, r3
 8008428:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b21      	cmp	r3, #33	@ 0x21
 8008434:	d108      	bne.n	8008448 <UART_DMAError+0x46>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008442:	68b8      	ldr	r0, [r7, #8]
 8008444:	f000 f972 	bl	800872c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008452:	2b40      	cmp	r3, #64	@ 0x40
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b22      	cmp	r3, #34	@ 0x22
 8008468:	d108      	bne.n	800847c <UART_DMAError+0x7a>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008476:	68b8      	ldr	r0, [r7, #8]
 8008478:	f000 f980 	bl	800877c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	f043 0210 	orr.w	r2, r3, #16
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008488:	68b8      	ldr	r0, [r7, #8]
 800848a:	f7ff fe91 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b090      	sub	sp, #64	@ 0x40
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a6:	e050      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d04c      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80084b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d007      	beq.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80084b6:	f7f9 fbd5 	bl	8001c64 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d241      	bcs.n	800854a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80084dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80084e8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3314      	adds	r3, #20
 8008500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	613b      	str	r3, [r7, #16]
   return(result);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3314      	adds	r3, #20
 8008518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800851a:	623a      	str	r2, [r7, #32]
 800851c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	6a3a      	ldr	r2, [r7, #32]
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	61bb      	str	r3, [r7, #24]
   return(result);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e00f      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4013      	ands	r3, r2
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	bf0c      	ite	eq
 800855a:	2301      	moveq	r3, #1
 800855c:	2300      	movne	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	429a      	cmp	r2, r3
 8008566:	d09f      	beq.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3740      	adds	r7, #64	@ 0x40
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	4613      	mov	r3, r2
 800857e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2222      	movs	r2, #34	@ 0x22
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695a      	ldr	r2, [r3, #20]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0220 	orr.w	r2, r2, #32
 80085de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b098      	sub	sp, #96	@ 0x60
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	88fa      	ldrh	r2, [r7, #6]
 8008608:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2222      	movs	r2, #34	@ 0x22
 8008614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	4a40      	ldr	r2, [pc, #256]	@ (8008720 <UART_Start_Receive_DMA+0x130>)
 800861e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008624:	4a3f      	ldr	r2, [pc, #252]	@ (8008724 <UART_Start_Receive_DMA+0x134>)
 8008626:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862c:	4a3e      	ldr	r2, [pc, #248]	@ (8008728 <UART_Start_Receive_DMA+0x138>)
 800862e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	2200      	movs	r2, #0
 8008636:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	88fb      	ldrh	r3, [r7, #6]
 8008650:	f7f9 fcd4 	bl	8001ffc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d019      	beq.n	80086ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800868a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008690:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330c      	adds	r3, #12
 8008698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800869a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800869c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80086a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e5      	bne.n	800867a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3314      	adds	r3, #20
 80086b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3314      	adds	r3, #20
 80086cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e5      	bne.n	80086ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3314      	adds	r3, #20
 80086e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	617b      	str	r3, [r7, #20]
   return(result);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3314      	adds	r3, #20
 8008700:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008702:	627a      	str	r2, [r7, #36]	@ 0x24
 8008704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6a39      	ldr	r1, [r7, #32]
 8008708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3760      	adds	r7, #96	@ 0x60
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	080082a7 	.word	0x080082a7
 8008724:	080083cd 	.word	0x080083cd
 8008728:	08008403 	.word	0x08008403

0800872c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b089      	sub	sp, #36	@ 0x24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	60bb      	str	r3, [r7, #8]
   return(result);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	69fa      	ldr	r2, [r7, #28]
 8008754:	61ba      	str	r2, [r7, #24]
 8008756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6979      	ldr	r1, [r7, #20]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	613b      	str	r3, [r7, #16]
   return(result);
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8008770:	bf00      	nop
 8008772:	3724      	adds	r7, #36	@ 0x24
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b095      	sub	sp, #84	@ 0x54
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800879a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e5      	bne.n	8008784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3314      	adds	r3, #20
 80087be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f023 0301 	bic.w	r3, r3, #1
 80087ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3314      	adds	r3, #20
 80087d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e5      	bne.n	80087b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d119      	bne.n	8008828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	60bb      	str	r3, [r7, #8]
   return(result);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f023 0310 	bic.w	r3, r3, #16
 800880a:	647b      	str	r3, [r7, #68]	@ 0x44
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008814:	61ba      	str	r2, [r7, #24]
 8008816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	613b      	str	r3, [r7, #16]
   return(result);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e5      	bne.n	80087f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008836:	bf00      	nop
 8008838:	3754      	adds	r7, #84	@ 0x54
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fca7 	bl	80081b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008876:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800887c:	2200      	movs	r2, #0
 800887e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888e:	2b00      	cmp	r3, #0
 8008890:	d117      	bne.n	80088c2 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fc82 	bl	80081c4 <HAL_UART_AbortCpltCallback>
 80088c0:	e000      	b.n	80088c4 <UART_DMATxAbortCallback+0x5a>
      return;
 80088c2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d6:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	2200      	movs	r2, #0
 80088de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d117      	bne.n	8008922 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff fc52 	bl	80081c4 <HAL_UART_AbortCpltCallback>
 8008920:	e000      	b.n	8008924 <UART_DMARxAbortCallback+0x5a>
      return;
 8008922:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b21      	cmp	r3, #33	@ 0x21
 800893c:	d13e      	bne.n	80089bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008946:	d114      	bne.n	8008972 <UART_Transmit_IT+0x48>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d110      	bne.n	8008972 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008964:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	1c9a      	adds	r2, r3, #2
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	621a      	str	r2, [r3, #32]
 8008970:	e008      	b.n	8008984 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	1c59      	adds	r1, r3, #1
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6211      	str	r1, [r2, #32]
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008988:	b29b      	uxth	r3, r3
 800898a:	3b01      	subs	r3, #1
 800898c:	b29b      	uxth	r3, r3
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4619      	mov	r1, r3
 8008992:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10f      	bne.n	80089b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e000      	b.n	80089be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089bc:	2302      	movs	r3, #2
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f004 fb7a 	bl	800d0e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b08c      	sub	sp, #48	@ 0x30
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b22      	cmp	r3, #34	@ 0x22
 8008a0c:	f040 80ab 	bne.w	8008b66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a18:	d117      	bne.n	8008a4a <UART_Receive_IT+0x50>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d113      	bne.n	8008a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a42:	1c9a      	adds	r2, r3, #2
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a48:	e026      	b.n	8008a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5c:	d007      	beq.n	8008a6e <UART_Receive_IT+0x74>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10a      	bne.n	8008a7c <UART_Receive_IT+0x82>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e008      	b.n	8008a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d15a      	bne.n	8008b62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0220 	bic.w	r2, r2, #32
 8008aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695a      	ldr	r2, [r3, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d135      	bne.n	8008b58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	613b      	str	r3, [r7, #16]
   return(result);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f023 0310 	bic.w	r3, r3, #16
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b12:	623a      	str	r2, [r7, #32]
 8008b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	69f9      	ldr	r1, [r7, #28]
 8008b18:	6a3a      	ldr	r2, [r7, #32]
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e5      	bne.n	8008af2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d10a      	bne.n	8008b4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff fb41 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
 8008b56:	e002      	b.n	8008b5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f004 faef 	bl	800d13c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e002      	b.n	8008b68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	e000      	b.n	8008b68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b66:	2302      	movs	r3, #2
  }
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3730      	adds	r7, #48	@ 0x30
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b74:	b0c0      	sub	sp, #256	@ 0x100
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	ea40 0301 	orr.w	r3, r0, r1
 8008b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008bc8:	f021 010c 	bic.w	r1, r1, #12
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bea:	6999      	ldr	r1, [r3, #24]
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	ea40 0301 	orr.w	r3, r0, r1
 8008bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8008e3c <UART_SetConfig+0x2cc>)
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d005      	beq.n	8008c10 <UART_SetConfig+0xa0>
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008e40 <UART_SetConfig+0x2d0>)
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d104      	bne.n	8008c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c10:	f7fc f912 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8008c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c18:	e003      	b.n	8008c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c1a:	f7fc f8f9 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8008c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c2c:	f040 810c 	bne.w	8008e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	1891      	adds	r1, r2, r2
 8008c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c4a:	415b      	adcs	r3, r3
 8008c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c52:	4621      	mov	r1, r4
 8008c54:	eb12 0801 	adds.w	r8, r2, r1
 8008c58:	4629      	mov	r1, r5
 8008c5a:	eb43 0901 	adc.w	r9, r3, r1
 8008c5e:	f04f 0200 	mov.w	r2, #0
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c72:	4690      	mov	r8, r2
 8008c74:	4699      	mov	r9, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	eb18 0303 	adds.w	r3, r8, r3
 8008c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c80:	462b      	mov	r3, r5
 8008c82:	eb49 0303 	adc.w	r3, r9, r3
 8008c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	18db      	adds	r3, r3, r3
 8008ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	eb42 0303 	adc.w	r3, r2, r3
 8008caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008cb4:	f7f7 ff98 	bl	8000be8 <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4b61      	ldr	r3, [pc, #388]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	011c      	lsls	r4, r3, #4
 8008cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	1891      	adds	r1, r2, r2
 8008cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ce0:	415b      	adcs	r3, r3
 8008ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ce8:	4641      	mov	r1, r8
 8008cea:	eb12 0a01 	adds.w	sl, r2, r1
 8008cee:	4649      	mov	r1, r9
 8008cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d08:	4692      	mov	sl, r2
 8008d0a:	469b      	mov	fp, r3
 8008d0c:	4643      	mov	r3, r8
 8008d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d16:	464b      	mov	r3, r9
 8008d18:	eb4b 0303 	adc.w	r3, fp, r3
 8008d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d34:	460b      	mov	r3, r1
 8008d36:	18db      	adds	r3, r3, r3
 8008d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	eb42 0303 	adc.w	r3, r2, r3
 8008d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d4a:	f7f7 ff4d 	bl	8000be8 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4611      	mov	r1, r2
 8008d54:	4b3b      	ldr	r3, [pc, #236]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008d56:	fba3 2301 	umull	r2, r3, r3, r1
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	2264      	movs	r2, #100	@ 0x64
 8008d5e:	fb02 f303 	mul.w	r3, r2, r3
 8008d62:	1acb      	subs	r3, r1, r3
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008d6a:	4b36      	ldr	r3, [pc, #216]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008d78:	441c      	add	r4, r3
 8008d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	464b      	mov	r3, r9
 8008d90:	1891      	adds	r1, r2, r2
 8008d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d94:	415b      	adcs	r3, r3
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	1851      	adds	r1, r2, r1
 8008da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008da2:	4649      	mov	r1, r9
 8008da4:	414b      	adcs	r3, r1
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008db4:	4659      	mov	r1, fp
 8008db6:	00cb      	lsls	r3, r1, #3
 8008db8:	4651      	mov	r1, sl
 8008dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	00ca      	lsls	r2, r1, #3
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4642      	mov	r2, r8
 8008dca:	189b      	adds	r3, r3, r2
 8008dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	460a      	mov	r2, r1
 8008dd4:	eb42 0303 	adc.w	r3, r2, r3
 8008dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008df0:	460b      	mov	r3, r1
 8008df2:	18db      	adds	r3, r3, r3
 8008df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008df6:	4613      	mov	r3, r2
 8008df8:	eb42 0303 	adc.w	r3, r2, r3
 8008dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e06:	f7f7 feef 	bl	8000be8 <__aeabi_uldivmod>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008e10:	fba3 1302 	umull	r1, r3, r3, r2
 8008e14:	095b      	lsrs	r3, r3, #5
 8008e16:	2164      	movs	r1, #100	@ 0x64
 8008e18:	fb01 f303 	mul.w	r3, r1, r3
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	3332      	adds	r3, #50	@ 0x32
 8008e22:	4a08      	ldr	r2, [pc, #32]	@ (8008e44 <UART_SetConfig+0x2d4>)
 8008e24:	fba2 2303 	umull	r2, r3, r2, r3
 8008e28:	095b      	lsrs	r3, r3, #5
 8008e2a:	f003 0207 	and.w	r2, r3, #7
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4422      	add	r2, r4
 8008e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e38:	e106      	b.n	8009048 <UART_SetConfig+0x4d8>
 8008e3a:	bf00      	nop
 8008e3c:	40011000 	.word	0x40011000
 8008e40:	40011400 	.word	0x40011400
 8008e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e5a:	4642      	mov	r2, r8
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	1891      	adds	r1, r2, r2
 8008e60:	6239      	str	r1, [r7, #32]
 8008e62:	415b      	adcs	r3, r3
 8008e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	1854      	adds	r4, r2, r1
 8008e6e:	4649      	mov	r1, r9
 8008e70:	eb43 0501 	adc.w	r5, r3, r1
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	00eb      	lsls	r3, r5, #3
 8008e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e82:	00e2      	lsls	r2, r4, #3
 8008e84:	4614      	mov	r4, r2
 8008e86:	461d      	mov	r5, r3
 8008e88:	4643      	mov	r3, r8
 8008e8a:	18e3      	adds	r3, r4, r3
 8008e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e90:	464b      	mov	r3, r9
 8008e92:	eb45 0303 	adc.w	r3, r5, r3
 8008e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008eaa:	f04f 0200 	mov.w	r2, #0
 8008eae:	f04f 0300 	mov.w	r3, #0
 8008eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	008b      	lsls	r3, r1, #2
 8008eba:	4621      	mov	r1, r4
 8008ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	008a      	lsls	r2, r1, #2
 8008ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ec8:	f7f7 fe8e 	bl	8000be8 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4b60      	ldr	r3, [pc, #384]	@ (8009054 <UART_SetConfig+0x4e4>)
 8008ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	011c      	lsls	r4, r3, #4
 8008eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	1891      	adds	r1, r2, r2
 8008ef2:	61b9      	str	r1, [r7, #24]
 8008ef4:	415b      	adcs	r3, r3
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008efc:	4641      	mov	r1, r8
 8008efe:	1851      	adds	r1, r2, r1
 8008f00:	6139      	str	r1, [r7, #16]
 8008f02:	4649      	mov	r1, r9
 8008f04:	414b      	adcs	r3, r1
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f14:	4659      	mov	r1, fp
 8008f16:	00cb      	lsls	r3, r1, #3
 8008f18:	4651      	mov	r1, sl
 8008f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f1e:	4651      	mov	r1, sl
 8008f20:	00ca      	lsls	r2, r1, #3
 8008f22:	4610      	mov	r0, r2
 8008f24:	4619      	mov	r1, r3
 8008f26:	4603      	mov	r3, r0
 8008f28:	4642      	mov	r2, r8
 8008f2a:	189b      	adds	r3, r3, r2
 8008f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f30:	464b      	mov	r3, r9
 8008f32:	460a      	mov	r2, r1
 8008f34:	eb42 0303 	adc.w	r3, r2, r3
 8008f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f54:	4649      	mov	r1, r9
 8008f56:	008b      	lsls	r3, r1, #2
 8008f58:	4641      	mov	r1, r8
 8008f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f5e:	4641      	mov	r1, r8
 8008f60:	008a      	lsls	r2, r1, #2
 8008f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008f66:	f7f7 fe3f 	bl	8000be8 <__aeabi_uldivmod>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4b38      	ldr	r3, [pc, #224]	@ (8009054 <UART_SetConfig+0x4e4>)
 8008f72:	fba3 2301 	umull	r2, r3, r3, r1
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	2264      	movs	r2, #100	@ 0x64
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	1acb      	subs	r3, r1, r3
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	3332      	adds	r3, #50	@ 0x32
 8008f84:	4a33      	ldr	r2, [pc, #204]	@ (8009054 <UART_SetConfig+0x4e4>)
 8008f86:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f90:	441c      	add	r4, r3
 8008f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f96:	2200      	movs	r2, #0
 8008f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	1891      	adds	r1, r2, r2
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	415b      	adcs	r3, r3
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	1851      	adds	r1, r2, r1
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	414b      	adcs	r3, r1
 8008fba:	607b      	str	r3, [r7, #4]
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fc8:	4659      	mov	r1, fp
 8008fca:	00cb      	lsls	r3, r1, #3
 8008fcc:	4651      	mov	r1, sl
 8008fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fd2:	4651      	mov	r1, sl
 8008fd4:	00ca      	lsls	r2, r1, #3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4603      	mov	r3, r0
 8008fdc:	4642      	mov	r2, r8
 8008fde:	189b      	adds	r3, r3, r2
 8008fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fe2:	464b      	mov	r3, r9
 8008fe4:	460a      	mov	r2, r1
 8008fe6:	eb42 0303 	adc.w	r3, r2, r3
 8008fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009004:	4649      	mov	r1, r9
 8009006:	008b      	lsls	r3, r1, #2
 8009008:	4641      	mov	r1, r8
 800900a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800900e:	4641      	mov	r1, r8
 8009010:	008a      	lsls	r2, r1, #2
 8009012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009016:	f7f7 fde7 	bl	8000be8 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <UART_SetConfig+0x4e4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	@ 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	3332      	adds	r3, #50	@ 0x32
 8009032:	4a08      	ldr	r2, [pc, #32]	@ (8009054 <UART_SetConfig+0x4e4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4422      	add	r2, r4
 8009046:	609a      	str	r2, [r3, #8]
}
 8009048:	bf00      	nop
 800904a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800904e:	46bd      	mov	sp, r7
 8009050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009054:	51eb851f 	.word	0x51eb851f

08009058 <gos_libGetBuildDate>:
/**
 * TODO
 * @return
 */
void_t gos_libGetBuildDate (gos_year_t* pYear, gos_month_t* pMonth, gos_day_t* pDay)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
	/*
	 * Function code.
	 */
	*pYear = (gos_year_t)atoi(year_str);
 8009064:	480c      	ldr	r0, [pc, #48]	@ (8009098 <gos_libGetBuildDate+0x40>)
 8009066:	f00d f9e3 	bl	8016430 <atoi>
 800906a:	4603      	mov	r3, r0
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	801a      	strh	r2, [r3, #0]
	*pMonth = (gos_month_t)atoi(month_str);
 8009072:	480a      	ldr	r0, [pc, #40]	@ (800909c <gos_libGetBuildDate+0x44>)
 8009074:	f00d f9dc 	bl	8016430 <atoi>
 8009078:	4603      	mov	r3, r0
 800907a:	b2da      	uxtb	r2, r3
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	701a      	strb	r2, [r3, #0]
	*pDay = (gos_day_t)atoi(day_str);
 8009080:	4807      	ldr	r0, [pc, #28]	@ (80090a0 <gos_libGetBuildDate+0x48>)
 8009082:	f00d f9d5 	bl	8016430 <atoi>
 8009086:	4603      	mov	r3, r0
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	801a      	strh	r2, [r3, #0]
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000408 	.word	0x20000408
 800909c:	20000410 	.word	0x20000410
 80090a0:	20000414 	.word	0x20000414

080090a4 <bld_init>:

/*
 * Function: bld_init
 */
gos_result_t bld_init (void_t)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 80090aa:	23ae      	movs	r3, #174	@ 0xae
 80090ac:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 80090ae:	4810      	ldr	r0, [pc, #64]	@ (80090f0 <bld_init+0x4c>)
 80090b0:	f005 fd74 	bl	800eb9c <svl_pdhGetBldCfg>

    if (bldConfig.installRequested == GOS_TRUE)
 80090b4:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <bld_init+0x4c>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b36      	cmp	r3, #54	@ 0x36
 80090ba:	d103      	bne.n	80090c4 <bld_init+0x20>
    {
        bldState = BLD_STATE_INSTALL;
 80090bc:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <bld_init+0x50>)
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
 80090c2:	e00a      	b.n	80090da <bld_init+0x36>
    }
    else if (bldConfig.updateMode == GOS_TRUE)
 80090c4:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <bld_init+0x4c>)
 80090c6:	791b      	ldrb	r3, [r3, #4]
 80090c8:	2b36      	cmp	r3, #54	@ 0x36
 80090ca:	d103      	bne.n	80090d4 <bld_init+0x30>
    {
        bldState = BLD_STATE_WAIT;
 80090cc:	4b09      	ldr	r3, [pc, #36]	@ (80090f4 <bld_init+0x50>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	e002      	b.n	80090da <bld_init+0x36>
    }
    else
    {
    	bldState = BLD_STATE_APP_CHECK;
 80090d4:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <bld_init+0x50>)
 80090d6:	2202      	movs	r2, #2
 80090d8:	701a      	strb	r2, [r3, #0]
    }

    initResult = gos_taskRegister(&bldTaskDesc, NULL);
 80090da:	2100      	movs	r1, #0
 80090dc:	4806      	ldr	r0, [pc, #24]	@ (80090f8 <bld_init+0x54>)
 80090de:	f008 f9d3 	bl	8011488 <gos_taskRegister>
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80090e6:	79fb      	ldrb	r3, [r7, #7]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20001918 	.word	0x20001918
 80090f4:	20001bc8 	.word	0x20001bc8
 80090f8:	20000418 	.word	0x20000418

080090fc <bld_stateMachineGetState>:

/*
 * Function: bld_stateMachineGetState
 */
gos_result_t bld_stateMachineGetState (bld_state_t* pState)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t getStateResult = GOS_ERROR;
 8009104:	23ae      	movs	r3, #174	@ 0xae
 8009106:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pState != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <bld_stateMachineGetState+0x1e>
    {
        *pState = bldState;
 800910e:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <bld_stateMachineGetState+0x2c>)
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	701a      	strb	r2, [r3, #0]
        getStateResult = GOS_SUCCESS;
 8009116:	2355      	movs	r3, #85	@ 0x55
 8009118:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return getStateResult;
 800911a:	7bfb      	ldrb	r3, [r7, #15]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20001bc8 	.word	0x20001bc8

0800912c <bld_task>:

GOS_STATIC void_t bld_task (void_t)
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b08b      	sub	sp, #44	@ 0x2c
 8009130:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t               installChunkNum  = 0u;
 8009132:	2300      	movs	r3, #0
 8009134:	613b      	str	r3, [r7, #16]
    u32_t               installChunkCntr = 0u;
 8009136:	2300      	movs	r3, #0
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
    u32_t               perc             = 0u;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
    u32_t               startTick        = 0u;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
    bool_t              connectTmo       = GOS_FALSE;
 8009142:	2349      	movs	r3, #73	@ 0x49
 8009144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    gos_messageId_t     msgIds []        = { BLD_STATE_CONT_MSG_ID, 0 };
 8009148:	f24b 43ed 	movw	r3, #46317	@ 0xb4ed
 800914c:	80bb      	strh	r3, [r7, #4]
 800914e:	2300      	movs	r3, #0
 8009150:	80fb      	strh	r3, [r7, #6]
    u32_t               byteCounter      = 0u;
 8009152:	2300      	movs	r3, #0
 8009154:	61fb      	str	r3, [r7, #28]

    /*
     * Function code.
     */
    // Startup delay (for printing).
    (void_t) gos_taskSleep(500);
 8009156:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800915a:	f008 fb27 	bl	80117ac <gos_taskSleep>

    (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 800915e:	48ab      	ldr	r0, [pc, #684]	@ (800940c <bld_task+0x2e0>)
 8009160:	f005 fcac 	bl	800eabc <svl_pdhGetSwInfo>
    (void_t) memcpy((void_t*)&binaryDescriptor.binaryInfo, (void_t*)&currentSwInfo.appBinaryInfo, sizeof(svl_pdhBinaryInfo_t));
 8009164:	4aaa      	ldr	r2, [pc, #680]	@ (8009410 <bld_task+0x2e4>)
 8009166:	4ba9      	ldr	r3, [pc, #676]	@ (800940c <bld_task+0x2e0>)
 8009168:	f102 042e 	add.w	r4, r2, #46	@ 0x2e
 800916c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8009170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009172:	6020      	str	r0, [r4, #0]
 8009174:	6061      	str	r1, [r4, #4]
 8009176:	60a2      	str	r2, [r4, #8]

    for (;;)
    {
        switch (bldState)
 8009178:	4ba6      	ldr	r3, [pc, #664]	@ (8009414 <bld_task+0x2e8>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b02      	cmp	r3, #2
 800917e:	f000 8181 	beq.w	8009484 <bld_task+0x358>
 8009182:	2b02      	cmp	r3, #2
 8009184:	f300 81c0 	bgt.w	8009508 <bld_task+0x3dc>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <bld_task+0x68>
 800918c:	2b01      	cmp	r3, #1
 800918e:	f000 8115 	beq.w	80093bc <bld_task+0x290>
 8009192:	e1b9      	b.n	8009508 <bld_task+0x3dc>
        {
            case BLD_STATE_INSTALL:
            {
                // Install file is marked in configuration.
                // Try to copy it to application FLASH area.
                byteCounter = 0u;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]

                // Get data from external flash.
                (void_t) svl_sdhGetBinaryData(bldConfig.binaryIndex, &binaryDescriptor);
 8009198:	4b9f      	ldr	r3, [pc, #636]	@ (8009418 <bld_task+0x2ec>)
 800919a:	885b      	ldrh	r3, [r3, #2]
 800919c:	499c      	ldr	r1, [pc, #624]	@ (8009410 <bld_task+0x2e4>)
 800919e:	4618      	mov	r0, r3
 80091a0:	f006 f988 	bl	800f4b4 <svl_sdhGetBinaryData>

                // Check start address.
                if (binaryDescriptor.binaryInfo.startAddress < BLD_APP_ROM_START_ADDRESS)
 80091a4:	4b9a      	ldr	r3, [pc, #616]	@ (8009410 <bld_task+0x2e4>)
 80091a6:	f8d3 302e 	ldr.w	r3, [r3, #46]	@ 0x2e
 80091aa:	4a9c      	ldr	r2, [pc, #624]	@ (800941c <bld_task+0x2f0>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d803      	bhi.n	80091b8 <bld_task+0x8c>
                {
                    bldState = BLD_STATE_WAIT;
 80091b0:	4b98      	ldr	r3, [pc, #608]	@ (8009414 <bld_task+0x2e8>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	701a      	strb	r2, [r3, #0]
                    break;
 80091b6:	e1a7      	b.n	8009508 <bld_task+0x3dc>
                else
                {
                    // Start address OK.
                }

                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 80091b8:	4b95      	ldr	r3, [pc, #596]	@ (8009410 <bld_task+0x2e4>)
 80091ba:	f8d3 3032 	ldr.w	r3, [r3, #50]	@ 0x32
 80091be:	0a5b      	lsrs	r3, r3, #9
                                  (binaryDescriptor.binaryInfo.size % BLD_INSTALL_CHUNK_SIZE == 0 ? 0 : 1);
 80091c0:	4a93      	ldr	r2, [pc, #588]	@ (8009410 <bld_task+0x2e4>)
 80091c2:	f8d2 2032 	ldr.w	r2, [r2, #50]	@ 0x32
 80091c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091ca:	2a00      	cmp	r2, #0
 80091cc:	bf14      	ite	ne
 80091ce:	2201      	movne	r2, #1
 80091d0:	2200      	moveq	r2, #0
 80091d2:	b2d2      	uxtb	r2, r2
                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 80091d4:	4413      	add	r3, r2
 80091d6:	613b      	str	r3, [r7, #16]

                // Erase application area.
                (void_t) drv_flashErase(binaryDescriptor.binaryInfo.startAddress, binaryDescriptor.binaryInfo.size);
 80091d8:	4b8d      	ldr	r3, [pc, #564]	@ (8009410 <bld_task+0x2e4>)
 80091da:	f8d3 302e 	ldr.w	r3, [r3, #46]	@ 0x2e
 80091de:	4a8c      	ldr	r2, [pc, #560]	@ (8009410 <bld_task+0x2e4>)
 80091e0:	f8d2 2032 	ldr.w	r2, [r2, #50]	@ 0x32
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fb80 	bl	800a8ec <drv_flashErase>

                // Write to internal flash by chunks.
                (void_t) drv_flashUnlock();
 80091ec:	f001 fbf7 	bl	800a9de <drv_flashUnlock>

                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 80091f0:	2300      	movs	r3, #0
 80091f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80091f4:	e0d3      	b.n	800939e <bld_task+0x272>
                {
                    // Read chunk from external flash.
                    (void_t) svl_sdhReadBytesFromMemory(
                            binaryDescriptor.binaryLocation + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE),
 80091f6:	4b86      	ldr	r3, [pc, #536]	@ (8009410 <bld_task+0x2e4>)
 80091f8:	f8d3 202a 	ldr.w	r2, [r3, #42]	@ 0x2a
 80091fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fe:	025b      	lsls	r3, r3, #9
                    (void_t) svl_sdhReadBytesFromMemory(
 8009200:	4413      	add	r3, r2
 8009202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009206:	4986      	ldr	r1, [pc, #536]	@ (8009420 <bld_task+0x2f4>)
 8009208:	4618      	mov	r0, r3
 800920a:	f006 f9c1 	bl	800f590 <svl_sdhReadBytesFromMemory>
                            bldInstallBuffer,
                            BLD_INSTALL_CHUNK_SIZE);

                    // Program chunk in internal flash.
                    if (((installChunkCntr + 1) * BLD_INSTALL_CHUNK_SIZE) < binaryDescriptor.binaryInfo.size)
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	3301      	adds	r3, #1
 8009212:	025a      	lsls	r2, r3, #9
 8009214:	4b7e      	ldr	r3, [pc, #504]	@ (8009410 <bld_task+0x2e4>)
 8009216:	f8d3 3032 	ldr.w	r3, [r3, #50]	@ 0x32
 800921a:	429a      	cmp	r2, r3
 800921c:	d210      	bcs.n	8009240 <bld_task+0x114>
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800921e:	4b7c      	ldr	r3, [pc, #496]	@ (8009410 <bld_task+0x2e4>)
 8009220:	f8d3 202e 	ldr.w	r2, [r3, #46]	@ 0x2e
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 8009228:	4413      	add	r3, r2
 800922a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800922e:	497c      	ldr	r1, [pc, #496]	@ (8009420 <bld_task+0x2f4>)
 8009230:	4618      	mov	r0, r3
 8009232:	f001 fb9d 	bl	800a970 <drv_flashWriteWithoutLock>
                                 (void_t*)bldInstallBuffer,
                                 BLD_INSTALL_CHUNK_SIZE);

                        byteCounter += BLD_INSTALL_CHUNK_SIZE;
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	e018      	b.n	8009272 <bld_task+0x146>
                    }
                    else
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 8009240:	4b73      	ldr	r3, [pc, #460]	@ (8009410 <bld_task+0x2e4>)
 8009242:	f8d3 202e 	ldr.w	r2, [r3, #46]	@ 0x2e
 8009246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009248:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800924a:	18d0      	adds	r0, r2, r3
                                 (void_t*)bldInstallBuffer,
                                 binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE));
 800924c:	4b70      	ldr	r3, [pc, #448]	@ (8009410 <bld_task+0x2e4>)
 800924e:	f8d3 2032 	ldr.w	r2, [r3, #50]	@ 0x32
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	461a      	mov	r2, r3
 800925a:	4971      	ldr	r1, [pc, #452]	@ (8009420 <bld_task+0x2f4>)
 800925c:	f001 fb88 	bl	800a970 <drv_flashWriteWithoutLock>

                        byteCounter += binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE);
 8009260:	4b6b      	ldr	r3, [pc, #428]	@ (8009410 <bld_task+0x2e4>)
 8009262:	f8d3 2032 	ldr.w	r2, [r3, #50]	@ 0x32
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	025b      	lsls	r3, r3, #9
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	4413      	add	r3, r2
 8009270:	61fb      	str	r3, [r7, #28]
                    }

                    // Display progress.
                    perc = 100 * 100 * byteCounter / binaryDescriptor.binaryInfo.size;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009278:	fb03 f202 	mul.w	r2, r3, r2
 800927c:	4b64      	ldr	r3, [pc, #400]	@ (8009410 <bld_task+0x2e4>)
 800927e:	f8d3 3032 	ldr.w	r3, [r3, #50]	@ 0x32
 8009282:	fbb2 f3f3 	udiv	r3, r2, r3
 8009286:	60fb      	str	r3, [r7, #12]

                    (void_t) sprintf(progressBuffer, "\rProgress: [ "TRACE_FG_YELLOW_START);
 8009288:	4966      	ldr	r1, [pc, #408]	@ (8009424 <bld_task+0x2f8>)
 800928a:	4867      	ldr	r0, [pc, #412]	@ (8009428 <bld_task+0x2fc>)
 800928c:	f00d fe72 	bl	8016f74 <siprintf>

                    for (int i = 1; i <= 25; i++)
 8009290:	2301      	movs	r3, #1
 8009292:	61bb      	str	r3, [r7, #24]
 8009294:	e025      	b.n	80092e2 <bld_task+0x1b6>
                    {
                        if (i * 2 <= (perc / 100))
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	4619      	mov	r1, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4a63      	ldr	r2, [pc, #396]	@ (800942c <bld_task+0x300>)
 80092a0:	fba2 2303 	umull	r2, r3, r2, r3
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	4299      	cmp	r1, r3
 80092a8:	d80c      	bhi.n	80092c4 <bld_task+0x198>
                        {
                            (void_t) strcat(progressBuffer, "=");
 80092aa:	485f      	ldr	r0, [pc, #380]	@ (8009428 <bld_task+0x2fc>)
 80092ac:	f7f7 f800 	bl	80002b0 <strlen>
 80092b0:	4603      	mov	r3, r0
 80092b2:	461a      	mov	r2, r3
 80092b4:	4b5c      	ldr	r3, [pc, #368]	@ (8009428 <bld_task+0x2fc>)
 80092b6:	4413      	add	r3, r2
 80092b8:	495d      	ldr	r1, [pc, #372]	@ (8009430 <bld_task+0x304>)
 80092ba:	461a      	mov	r2, r3
 80092bc:	460b      	mov	r3, r1
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	8013      	strh	r3, [r2, #0]
 80092c2:	e00b      	b.n	80092dc <bld_task+0x1b0>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 80092c4:	4858      	ldr	r0, [pc, #352]	@ (8009428 <bld_task+0x2fc>)
 80092c6:	f7f6 fff3 	bl	80002b0 <strlen>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b56      	ldr	r3, [pc, #344]	@ (8009428 <bld_task+0x2fc>)
 80092d0:	4413      	add	r3, r2
 80092d2:	4958      	ldr	r1, [pc, #352]	@ (8009434 <bld_task+0x308>)
 80092d4:	461a      	mov	r2, r3
 80092d6:	460b      	mov	r3, r1
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	8013      	strh	r3, [r2, #0]
                    for (int i = 1; i <= 25; i++)
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	3301      	adds	r3, #1
 80092e0:	61bb      	str	r3, [r7, #24]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b19      	cmp	r3, #25
 80092e6:	ddd6      	ble.n	8009296 <bld_task+0x16a>
                        }
                    }

                    (void_t) sprintf(percentageBuffer, "%3u.%02u%% ", (u8_t)(perc / 100), (u8_t)(perc % 100));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a50      	ldr	r2, [pc, #320]	@ (800942c <bld_task+0x300>)
 80092ec:	fba2 2303 	umull	r2, r3, r2, r3
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	4618      	mov	r0, r3
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4b4c      	ldr	r3, [pc, #304]	@ (800942c <bld_task+0x300>)
 80092fa:	fba3 1302 	umull	r1, r3, r3, r2
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	2164      	movs	r1, #100	@ 0x64
 8009302:	fb01 f303 	mul.w	r3, r1, r3
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	b2db      	uxtb	r3, r3
 800930a:	4602      	mov	r2, r0
 800930c:	494a      	ldr	r1, [pc, #296]	@ (8009438 <bld_task+0x30c>)
 800930e:	484b      	ldr	r0, [pc, #300]	@ (800943c <bld_task+0x310>)
 8009310:	f00d fe30 	bl	8016f74 <siprintf>
                    (void_t) strcat(progressBuffer, percentageBuffer);
 8009314:	4949      	ldr	r1, [pc, #292]	@ (800943c <bld_task+0x310>)
 8009316:	4844      	ldr	r0, [pc, #272]	@ (8009428 <bld_task+0x2fc>)
 8009318:	f00d feb8 	bl	801708c <strcat>

                    for (int i = 26; i <= 50; i++)
 800931c:	231a      	movs	r3, #26
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	e025      	b.n	800936e <bld_task+0x242>
                    {
                        if (i * 2 <= (perc / 100))
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4619      	mov	r1, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4a40      	ldr	r2, [pc, #256]	@ (800942c <bld_task+0x300>)
 800932c:	fba2 2303 	umull	r2, r3, r2, r3
 8009330:	095b      	lsrs	r3, r3, #5
 8009332:	4299      	cmp	r1, r3
 8009334:	d80c      	bhi.n	8009350 <bld_task+0x224>
                        {
                            (void_t) strcat(progressBuffer, "=");
 8009336:	483c      	ldr	r0, [pc, #240]	@ (8009428 <bld_task+0x2fc>)
 8009338:	f7f6 ffba 	bl	80002b0 <strlen>
 800933c:	4603      	mov	r3, r0
 800933e:	461a      	mov	r2, r3
 8009340:	4b39      	ldr	r3, [pc, #228]	@ (8009428 <bld_task+0x2fc>)
 8009342:	4413      	add	r3, r2
 8009344:	493a      	ldr	r1, [pc, #232]	@ (8009430 <bld_task+0x304>)
 8009346:	461a      	mov	r2, r3
 8009348:	460b      	mov	r3, r1
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	8013      	strh	r3, [r2, #0]
 800934e:	e00b      	b.n	8009368 <bld_task+0x23c>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 8009350:	4835      	ldr	r0, [pc, #212]	@ (8009428 <bld_task+0x2fc>)
 8009352:	f7f6 ffad 	bl	80002b0 <strlen>
 8009356:	4603      	mov	r3, r0
 8009358:	461a      	mov	r2, r3
 800935a:	4b33      	ldr	r3, [pc, #204]	@ (8009428 <bld_task+0x2fc>)
 800935c:	4413      	add	r3, r2
 800935e:	4935      	ldr	r1, [pc, #212]	@ (8009434 <bld_task+0x308>)
 8009360:	461a      	mov	r2, r3
 8009362:	460b      	mov	r3, r1
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	8013      	strh	r3, [r2, #0]
                    for (int i = 26; i <= 50; i++)
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	3301      	adds	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b32      	cmp	r3, #50	@ 0x32
 8009372:	ddd6      	ble.n	8009322 <bld_task+0x1f6>
                        }
                    }

                    (void_t) strcat(progressBuffer, TRACE_FORMAT_RESET" ]");
 8009374:	482c      	ldr	r0, [pc, #176]	@ (8009428 <bld_task+0x2fc>)
 8009376:	f7f6 ff9b 	bl	80002b0 <strlen>
 800937a:	4603      	mov	r3, r0
 800937c:	461a      	mov	r2, r3
 800937e:	4b2a      	ldr	r3, [pc, #168]	@ (8009428 <bld_task+0x2fc>)
 8009380:	4413      	add	r3, r2
 8009382:	4a2f      	ldr	r2, [pc, #188]	@ (8009440 <bld_task+0x314>)
 8009384:	6810      	ldr	r0, [r2, #0]
 8009386:	6018      	str	r0, [r3, #0]
 8009388:	8891      	ldrh	r1, [r2, #4]
 800938a:	7992      	ldrb	r2, [r2, #6]
 800938c:	8099      	strh	r1, [r3, #4]
 800938e:	719a      	strb	r2, [r3, #6]
                    (void_t) gos_traceTrace(GOS_FALSE, progressBuffer);
 8009390:	4925      	ldr	r1, [pc, #148]	@ (8009428 <bld_task+0x2fc>)
 8009392:	2049      	movs	r0, #73	@ 0x49
 8009394:	f00c fb3a 	bl	8015a0c <gos_traceTrace>
                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	3301      	adds	r3, #1
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
 800939e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	f4ff af27 	bcc.w	80091f6 <bld_task+0xca>
                }

                (void_t) drv_flashLock();
 80093a8:	f001 fb2a 	bl	800aa00 <drv_flashLock>

                (void_t) gos_traceTrace(GOS_FALSE, "\r\nInstall finished.\r\n");
 80093ac:	4925      	ldr	r1, [pc, #148]	@ (8009444 <bld_task+0x318>)
 80093ae:	2049      	movs	r0, #73	@ 0x49
 80093b0:	f00c fb2c 	bl	8015a0c <gos_traceTrace>

                // Check newly installed application integrity.
                bldState = BLD_STATE_APP_CHECK;
 80093b4:	4b17      	ldr	r3, [pc, #92]	@ (8009414 <bld_task+0x2e8>)
 80093b6:	2202      	movs	r2, #2
 80093b8:	701a      	strb	r2, [r3, #0]

                break;
 80093ba:	e0a5      	b.n	8009508 <bld_task+0x3dc>
            }
            case BLD_STATE_WAIT:
            {
                // In this state, bootloader is waiting for a software install
                // request or other requests.
                (void_t) gos_traceTrace(GOS_TRUE, "Boot mode entered\r\n");
 80093bc:	4922      	ldr	r1, [pc, #136]	@ (8009448 <bld_task+0x31c>)
 80093be:	2036      	movs	r0, #54	@ 0x36
 80093c0:	f00c fb24 	bl	8015a0c <gos_traceTrace>

                connectTmo = GOS_TRUE;
 80093c4:	2336      	movs	r3, #54	@ 0x36
 80093c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                startTick = gos_kernelGetSysTicks();
 80093ca:	f007 f839 	bl	8010440 <gos_kernelGetSysTicks>
 80093ce:	60b8      	str	r0, [r7, #8]

                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 80093d0:	e03e      	b.n	8009450 <bld_task+0x324>
                {
                    if (gos_messageRx(msgIds, &gosMsg, 1000u) == GOS_SUCCESS)
 80093d2:	1d3b      	adds	r3, r7, #4
 80093d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093d8:	491c      	ldr	r1, [pc, #112]	@ (800944c <bld_task+0x320>)
 80093da:	4618      	mov	r0, r3
 80093dc:	f00a fb34 	bl	8013a48 <gos_messageRx>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b55      	cmp	r3, #85	@ 0x55
 80093e4:	d103      	bne.n	80093ee <bld_task+0x2c2>
                    {
                        // Update start tick to restart timeout.
                        startTick = gos_kernelGetSysTicks();
 80093e6:	f007 f82b 	bl	8010440 <gos_kernelGetSysTicks>
 80093ea:	60b8      	str	r0, [r7, #8]
                        break;
 80093ec:	e03a      	b.n	8009464 <bld_task+0x338>
                    }
                    else
                    {
                        // RX timeout.
                        // Check install request.
                        (void_t) svl_pdhGetBldCfg(&bldConfig);
 80093ee:	480a      	ldr	r0, [pc, #40]	@ (8009418 <bld_task+0x2ec>)
 80093f0:	f005 fbd4 	bl	800eb9c <svl_pdhGetBldCfg>

                        if (bldConfig.installRequested == GOS_TRUE)
 80093f4:	4b08      	ldr	r3, [pc, #32]	@ (8009418 <bld_task+0x2ec>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b36      	cmp	r3, #54	@ 0x36
 80093fa:	d129      	bne.n	8009450 <bld_task+0x324>
                        {
                            connectTmo = GOS_FALSE;
 80093fc:	2349      	movs	r3, #73	@ 0x49
 80093fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                            bldState   = BLD_STATE_INSTALL;
 8009402:	4b04      	ldr	r3, [pc, #16]	@ (8009414 <bld_task+0x2e8>)
 8009404:	2200      	movs	r2, #0
 8009406:	701a      	strb	r2, [r3, #0]
                            break;
 8009408:	e02c      	b.n	8009464 <bld_task+0x338>
 800940a:	bf00      	nop
 800940c:	20001928 	.word	0x20001928
 8009410:	20001e2c 	.word	0x20001e2c
 8009414:	20001bc8 	.word	0x20001bc8
 8009418:	20001918 	.word	0x20001918
 800941c:	0801ffff 	.word	0x0801ffff
 8009420:	20001bcc 	.word	0x20001bcc
 8009424:	080193fc 	.word	0x080193fc
 8009428:	20001dcc 	.word	0x20001dcc
 800942c:	51eb851f 	.word	0x51eb851f
 8009430:	08019410 	.word	0x08019410
 8009434:	08019414 	.word	0x08019414
 8009438:	08019418 	.word	0x08019418
 800943c:	20001e1c 	.word	0x20001e1c
 8009440:	08019424 	.word	0x08019424
 8009444:	0801942c 	.word	0x0801942c
 8009448:	08019444 	.word	0x08019444
 800944c:	20001e68 	.word	0x20001e68
                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 8009450:	f006 fff6 	bl	8010440 <gos_kernelGetSysTicks>
 8009454:	4602      	mov	r2, r0
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	1ad2      	subs	r2, r2, r3
 800945a:	4b2d      	ldr	r3, [pc, #180]	@ (8009510 <bld_task+0x3e4>)
 800945c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009460:	429a      	cmp	r2, r3
 8009462:	d9b6      	bls.n	80093d2 <bld_task+0x2a6>
                        	// Nothing to do.
                        }
                    }
                }

                (void_t) gos_traceTrace(GOS_FALSE, "\r\n");
 8009464:	492b      	ldr	r1, [pc, #172]	@ (8009514 <bld_task+0x3e8>)
 8009466:	2049      	movs	r0, #73	@ 0x49
 8009468:	f00c fad0 	bl	8015a0c <gos_traceTrace>

                if (connectTmo == GOS_TRUE)
 800946c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009470:	2b36      	cmp	r3, #54	@ 0x36
 8009472:	d148      	bne.n	8009506 <bld_task+0x3da>
                {
                    (void_t) gos_traceTrace(GOS_TRUE, "Request timed out.\r\n");
 8009474:	4928      	ldr	r1, [pc, #160]	@ (8009518 <bld_task+0x3ec>)
 8009476:	2036      	movs	r0, #54	@ 0x36
 8009478:	f00c fac8 	bl	8015a0c <gos_traceTrace>
                    bldState = BLD_STATE_APP_CHECK;
 800947c:	4b27      	ldr	r3, [pc, #156]	@ (800951c <bld_task+0x3f0>)
 800947e:	2202      	movs	r2, #2
 8009480:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Request served.
                }

                break;
 8009482:	e040      	b.n	8009506 <bld_task+0x3da>
            }
            case BLD_STATE_APP_CHECK:
            {
                if (bld_checkApplication(&binaryDescriptor.binaryInfo, GOS_TRUE) == GOS_SUCCESS)
 8009484:	2136      	movs	r1, #54	@ 0x36
 8009486:	4826      	ldr	r0, [pc, #152]	@ (8009520 <bld_task+0x3f4>)
 8009488:	f000 f854 	bl	8009534 <bld_checkApplication>
 800948c:	4603      	mov	r3, r0
 800948e:	2b55      	cmp	r3, #85	@ 0x55
 8009490:	d125      	bne.n	80094de <bld_task+0x3b2>
                {
                    // Application OK.
                    bldConfig.installRequested = GOS_FALSE;
 8009492:	4b1f      	ldr	r3, [pc, #124]	@ (8009510 <bld_task+0x3e4>)
 8009494:	2249      	movs	r2, #73	@ 0x49
 8009496:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 8009498:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <bld_task+0x3e4>)
 800949a:	2200      	movs	r2, #0
 800949c:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_FALSE;
 800949e:	4b1c      	ldr	r3, [pc, #112]	@ (8009510 <bld_task+0x3e4>)
 80094a0:	2249      	movs	r2, #73	@ 0x49
 80094a2:	711a      	strb	r2, [r3, #4]
                    bldConfig.startupCounter   = 1u;
 80094a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009510 <bld_task+0x3e4>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	715a      	strb	r2, [r3, #5]

                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 80094aa:	4819      	ldr	r0, [pc, #100]	@ (8009510 <bld_task+0x3e4>)
 80094ac:	f005 fc56 	bl	800ed5c <svl_pdhSetBldCfg>

                    (void_t) memcpy((void_t*)&currentSwInfo.appBinaryInfo, (void_t*)&binaryDescriptor.binaryInfo, sizeof(currentSwInfo.appBinaryInfo));
 80094b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009524 <bld_task+0x3f8>)
 80094b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009528 <bld_task+0x3fc>)
 80094b4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80094b8:	322e      	adds	r2, #46	@ 0x2e
 80094ba:	6810      	ldr	r0, [r2, #0]
 80094bc:	6851      	ldr	r1, [r2, #4]
 80094be:	6892      	ldr	r2, [r2, #8]
 80094c0:	c307      	stmia	r3!, {r0, r1, r2}

                    (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 80094c2:	4818      	ldr	r0, [pc, #96]	@ (8009524 <bld_task+0x3f8>)
 80094c4:	f005 fbda 	bl	800ec7c <svl_pdhSetSwInfo>

                    (void_t) gos_traceTrace(GOS_TRUE, "Exiting update mode...\r\n");
 80094c8:	4918      	ldr	r1, [pc, #96]	@ (800952c <bld_task+0x400>)
 80094ca:	2036      	movs	r0, #54	@ 0x36
 80094cc:	f00c fa9e 	bl	8015a0c <gos_traceTrace>
                    (void_t) gos_taskSleep(300);
 80094d0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80094d4:	f008 f96a 	bl	80117ac <gos_taskSleep>
                    gos_kernelReset();
 80094d8:	f006 ffd0 	bl	801047c <gos_kernelReset>

                    bldState = BLD_STATE_WAIT;

                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
                }
                break;
 80094dc:	e014      	b.n	8009508 <bld_task+0x3dc>
                    bldConfig.installRequested = GOS_FALSE;
 80094de:	4b0c      	ldr	r3, [pc, #48]	@ (8009510 <bld_task+0x3e4>)
 80094e0:	2249      	movs	r2, #73	@ 0x49
 80094e2:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 80094e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009510 <bld_task+0x3e4>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_TRUE;
 80094ea:	4b09      	ldr	r3, [pc, #36]	@ (8009510 <bld_task+0x3e4>)
 80094ec:	2236      	movs	r2, #54	@ 0x36
 80094ee:	711a      	strb	r2, [r3, #4]
                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 80094f0:	4807      	ldr	r0, [pc, #28]	@ (8009510 <bld_task+0x3e4>)
 80094f2:	f005 fc33 	bl	800ed5c <svl_pdhSetBldCfg>
                    bldState = BLD_STATE_WAIT;
 80094f6:	4b09      	ldr	r3, [pc, #36]	@ (800951c <bld_task+0x3f0>)
 80094f8:	2201      	movs	r2, #1
 80094fa:	701a      	strb	r2, [r3, #0]
                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
 80094fc:	490c      	ldr	r1, [pc, #48]	@ (8009530 <bld_task+0x404>)
 80094fe:	2036      	movs	r0, #54	@ 0x36
 8009500:	f00c fa84 	bl	8015a0c <gos_traceTrace>
                break;
 8009504:	e000      	b.n	8009508 <bld_task+0x3dc>
                break;
 8009506:	bf00      	nop
            }
        }
        (void_t) gos_taskSleep(20);
 8009508:	2014      	movs	r0, #20
 800950a:	f008 f94f 	bl	80117ac <gos_taskSleep>
        switch (bldState)
 800950e:	e633      	b.n	8009178 <bld_task+0x4c>
 8009510:	20001918 	.word	0x20001918
 8009514:	08019458 	.word	0x08019458
 8009518:	0801945c 	.word	0x0801945c
 800951c:	20001bc8 	.word	0x20001bc8
 8009520:	20001e5a 	.word	0x20001e5a
 8009524:	20001928 	.word	0x20001928
 8009528:	20001e2c 	.word	0x20001e2c
 800952c:	08019474 	.word	0x08019474
 8009530:	08019490 	.word	0x08019490

08009534 <bld_checkApplication>:

/*
 * Function: bld_checkApplication
 */
gos_result_t bld_checkApplication (svl_pdhBinaryInfo_t* pAppData, bool_t bootMode)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
    /*
     * Local variables.
     */
    gos_result_t appCheckResult = GOS_ERROR;
 8009540:	23ae      	movs	r3, #174	@ 0xae
 8009542:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check application size.
    if (pAppData->size > 0u && pAppData->size <= BLD_APP_ROM_SIZE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d020      	beq.n	800958e <bld_checkApplication+0x5a>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009554:	d81b      	bhi.n	800958e <bld_checkApplication+0x5a>
    {
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6859      	ldr	r1, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	2300      	movs	r3, #0
 8009566:	f000 fcc7 	bl	8009ef8 <drv_crcCheckCrc32>
 800956a:	4603      	mov	r3, r0
 800956c:	2bca      	cmp	r3, #202	@ 0xca
 800956e:	d102      	bne.n	8009576 <bld_checkApplication+0x42>
        {
            appCheckResult = GOS_SUCCESS;
 8009570:	2355      	movs	r3, #85	@ 0x55
 8009572:	73fb      	strb	r3, [r7, #15]
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 8009574:	e016      	b.n	80095a4 <bld_checkApplication+0x70>
        }
        else
        {
            // Application check fail.
            if (bootMode == GOS_TRUE)
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	2b36      	cmp	r3, #54	@ 0x36
 800957a:	d104      	bne.n	8009586 <bld_checkApplication+0x52>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "Application CRC error.\r\n");
 800957c:	490c      	ldr	r1, [pc, #48]	@ (80095b0 <bld_checkApplication+0x7c>)
 800957e:	2036      	movs	r0, #54	@ 0x36
 8009580:	f00c fa44 	bl	8015a0c <gos_traceTrace>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 8009584:	e00e      	b.n	80095a4 <bld_checkApplication+0x70>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Application CRC error.\r\n");
 8009586:	480a      	ldr	r0, [pc, #40]	@ (80095b0 <bld_checkApplication+0x7c>)
 8009588:	f00c fc96 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800958c:	e00a      	b.n	80095a4 <bld_checkApplication+0x70>
            }
        }
    }
    else
    {
        if (bootMode == GOS_TRUE)
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	2b36      	cmp	r3, #54	@ 0x36
 8009592:	d104      	bne.n	800959e <bld_checkApplication+0x6a>
        {
            (void_t) gos_traceTrace(GOS_TRUE, "Application size error.\r\n");
 8009594:	4907      	ldr	r1, [pc, #28]	@ (80095b4 <bld_checkApplication+0x80>)
 8009596:	2036      	movs	r0, #54	@ 0x36
 8009598:	f00c fa38 	bl	8015a0c <gos_traceTrace>
 800959c:	e002      	b.n	80095a4 <bld_checkApplication+0x70>
        }
        else
        {
            (void_t) gos_traceTraceFormattedUnsafe("Application size error.\r\n");
 800959e:	4805      	ldr	r0, [pc, #20]	@ (80095b4 <bld_checkApplication+0x80>)
 80095a0:	f00c fc8a 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
        }
    }

    return appCheckResult;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	080194ac 	.word	0x080194ac
 80095b4:	080194c8 	.word	0x080194c8

080095b8 <bld_jumpToApplication>:

/*
 * Function: bld_jumpToApplication
 */
gos_result_t bld_jumpToApplication (void_t)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t jumpResult = GOS_ERROR;
 80095be:	23ae      	movs	r3, #174	@ 0xae
 80095c0:	717b      	strb	r3, [r7, #5]
    u16_t        irqIdx     = 0u;
 80095c2:	2300      	movs	r3, #0
 80095c4:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    if (currentSwInfo.appBinaryInfo.startAddress % 0x200 == 0u)
 80095c6:	4b21      	ldr	r3, [pc, #132]	@ (800964c <bld_jumpToApplication+0x94>)
 80095c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80095cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d135      	bne.n	8009640 <bld_jumpToApplication+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80095d4:	b672      	cpsid	i
}
 80095d6:	bf00      	nop
    {
        /* Disable all interrupts */
        __disable_irq();

        /* Disable Systick timer */
        SysTick->CTRL = 0;
 80095d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009650 <bld_jumpToApplication+0x98>)
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]

        /* Set the clock to the default state */
        HAL_RCC_DeInit();
 80095de:	f7fb fe6f 	bl	80052c0 <HAL_RCC_DeInit>
        HAL_DeInit();
 80095e2:	f7f8 fac1 	bl	8001b68 <HAL_DeInit>

        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 80095e6:	2300      	movs	r3, #0
 80095e8:	80fb      	strh	r3, [r7, #6]
 80095ea:	e010      	b.n	800960e <bld_jumpToApplication+0x56>
        {
            NVIC->ICER[irqIdx] = 0xFFFFFFFF;
 80095ec:	4a19      	ldr	r2, [pc, #100]	@ (8009654 <bld_jumpToApplication+0x9c>)
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	3320      	adds	r3, #32
 80095f2:	f04f 31ff 	mov.w	r1, #4294967295
 80095f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[irqIdx] = 0xFFFFFFFF;
 80095fa:	4a16      	ldr	r2, [pc, #88]	@ (8009654 <bld_jumpToApplication+0x9c>)
 80095fc:	88fb      	ldrh	r3, [r7, #6]
 80095fe:	3360      	adds	r3, #96	@ 0x60
 8009600:	f04f 31ff 	mov.w	r1, #4294967295
 8009604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	3301      	adds	r3, #1
 800960c:	80fb      	strh	r3, [r7, #6]
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	2b07      	cmp	r3, #7
 8009612:	d9eb      	bls.n	80095ec <bld_jumpToApplication+0x34>
        }

        SYSCFG->MEMRMP = 0x01;
 8009614:	4b10      	ldr	r3, [pc, #64]	@ (8009658 <bld_jumpToApplication+0xa0>)
 8009616:	2201      	movs	r2, #1
 8009618:	601a      	str	r2, [r3, #0]

        SCB->VTOR = currentSwInfo.appBinaryInfo.startAddress;
 800961a:	4a10      	ldr	r2, [pc, #64]	@ (800965c <bld_jumpToApplication+0xa4>)
 800961c:	4b0b      	ldr	r3, [pc, #44]	@ (800964c <bld_jumpToApplication+0x94>)
 800961e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009622:	6093      	str	r3, [r2, #8]

        // Set the MSP
        __set_MSP(((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->initSp);
 8009624:	4b09      	ldr	r3, [pc, #36]	@ (800964c <bld_jumpToApplication+0x94>)
 8009626:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	f383 8808 	msr	MSP, r3
}
 8009634:	bf00      	nop

        // Jump to app firmware
        ((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->resetHandler();
 8009636:	4b05      	ldr	r3, [pc, #20]	@ (800964c <bld_jumpToApplication+0x94>)
 8009638:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4798      	blx	r3
    else
    {
        // Address is incorrect.
    }

    return jumpResult;
 8009640:	797b      	ldrb	r3, [r7, #5]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	20001928 	.word	0x20001928
 8009650:	e000e010 	.word	0xe000e010
 8009654:	e000e100 	.word	0xe000e100
 8009658:	40013800 	.word	0x40013800
 800965c:	e000ed00 	.word	0xe000ed00

08009660 <bld_getBootloaderSize>:

/*
 * Function: bld_getBootloaderSize
 */
gos_result_t bld_getBootloaderSize (u32_t* pSize)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t sizeGetResult = GOS_SUCCESS;
 8009668:	2355      	movs	r3, #85	@ 0x55
 800966a:	73fb      	strb	r3, [r7, #15]
    u32_t        address       = BLD_ROM_END_ADDRESS;
 800966c:	4b13      	ldr	r3, [pc, #76]	@ (80096bc <bld_getBootloaderSize+0x5c>)
 800966e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pSize != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d017      	beq.n	80096a6 <bld_getBootloaderSize+0x46>
    {
        *pSize = (BLD_ROM_END_ADDRESS - BLD_ROM_START_ADDRESS);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a11      	ldr	r2, [pc, #68]	@ (80096c0 <bld_getBootloaderSize+0x60>)
 800967a:	601a      	str	r2, [r3, #0]

        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 800967c:	4b0f      	ldr	r3, [pc, #60]	@ (80096bc <bld_getBootloaderSize+0x5c>)
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	e00c      	b.n	800969c <bld_getBootloaderSize+0x3c>
        {
            if ((u8_t)(*((u32_t*)address)) != 0xFFu)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2bff      	cmp	r3, #255	@ 0xff
 800968a:	d10f      	bne.n	80096ac <bld_getBootloaderSize+0x4c>
            {
                break;
            }
            else
            {
                (*pSize)--;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	1e5a      	subs	r2, r3, #1
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]
        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	3b01      	subs	r3, #1
 800969a:	60bb      	str	r3, [r7, #8]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4a09      	ldr	r2, [pc, #36]	@ (80096c4 <bld_getBootloaderSize+0x64>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d2ee      	bcs.n	8009682 <bld_getBootloaderSize+0x22>
 80096a4:	e003      	b.n	80096ae <bld_getBootloaderSize+0x4e>
        }
    }
    else
    {
        // NULL pointer error.
        sizeGetResult = GOS_ERROR;
 80096a6:	23ae      	movs	r3, #174	@ 0xae
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e000      	b.n	80096ae <bld_getBootloaderSize+0x4e>
                break;
 80096ac:	bf00      	nop
    }

    return sizeGetResult;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	0801ffff 	.word	0x0801ffff
 80096c0:	0001bfff 	.word	0x0001bfff
 80096c4:	08004000 	.word	0x08004000

080096c8 <bld_getBootloaderCrc>:

/*
 * Function: bld_getBootloaderCrc
 */
gos_result_t bld_getBootloaderCrc (u32_t* pCrc)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 80096d0:	23ae      	movs	r3, #174	@ 0xae
 80096d2:	73fb      	strb	r3, [r7, #15]
    u32_t        bldSize      = 0u;
 80096d4:	2300      	movs	r3, #0
 80096d6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pCrc != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d011      	beq.n	8009702 <bld_getBootloaderCrc+0x3a>
    {
        crcGetResult = bld_getBootloaderSize(&bldSize);
 80096de:	f107 0308 	add.w	r3, r7, #8
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff ffbc 	bl	8009660 <bld_getBootloaderSize>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
        crcGetResult &= drv_crcGetCrc32((u8_t*)BLD_ROM_START_ADDRESS, bldSize, pCrc);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4619      	mov	r1, r3
 80096f2:	4809      	ldr	r0, [pc, #36]	@ (8009718 <bld_getBootloaderCrc+0x50>)
 80096f4:	f000 fbb4 	bl	8009e60 <drv_crcGetCrc32>
 80096f8:	4603      	mov	r3, r0
 80096fa:	461a      	mov	r2, r3
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4013      	ands	r3, r2
 8009700:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer error.
    }

    if (crcGetResult != GOS_SUCCESS)
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	2b55      	cmp	r3, #85	@ 0x55
 8009706:	d001      	beq.n	800970c <bld_getBootloaderCrc+0x44>
    {
        crcGetResult = GOS_ERROR;
 8009708:	23ae      	movs	r3, #174	@ 0xae
 800970a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // OK.
    }

    return crcGetResult;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	08004000 	.word	0x08004000

0800971c <bld_initData>:

/*
 * Function: bld_initData
 */
gos_result_t bld_initData (svl_pdhSwVerInfo_t* pBldSwVer)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b088      	sub	sp, #32
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       initDataResult     = GOS_SUCCESS;
 8009724:	2355      	movs	r3, #85	@ 0x55
 8009726:	77fb      	strb	r3, [r7, #31]
    u32_t              currentBldSwVerCrc = 0u;
 8009728:	2300      	movs	r3, #0
 800972a:	61bb      	str	r3, [r7, #24]
    u32_t              desiredBldSwVerCrc = 0u;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]
	u32_t              libVerCrc          = 0u;
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
	u32_t              testLibVerCrc      = 0u;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pBldSwVer != NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 808a 	beq.w	8009854 <bld_initData+0x138>
    {
        // Get current software info.
        (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 8009740:	4848      	ldr	r0, [pc, #288]	@ (8009864 <bld_initData+0x148>)
 8009742:	f005 f9bb 	bl	800eabc <svl_pdhGetSwInfo>
    	(void_t) svl_pdhGetLibVersion(&libVerInfo);
 8009746:	4848      	ldr	r0, [pc, #288]	@ (8009868 <bld_initData+0x14c>)
 8009748:	f005 f936 	bl	800e9b8 <svl_pdhGetLibVersion>

        // Calculate CRC of current and desired bootloader software info.
        initDataResult &= drv_crcGetCrc32((u8_t*)&currentSwInfo.bldSwVerInfo, sizeof(currentSwInfo.bldSwVerInfo), &currentBldSwVerCrc);
 800974c:	f107 0318 	add.w	r3, r7, #24
 8009750:	461a      	mov	r2, r3
 8009752:	21a0      	movs	r1, #160	@ 0xa0
 8009754:	4845      	ldr	r0, [pc, #276]	@ (800986c <bld_initData+0x150>)
 8009756:	f000 fb83 	bl	8009e60 <drv_crcGetCrc32>
 800975a:	4603      	mov	r3, r0
 800975c:	461a      	mov	r2, r3
 800975e:	7ffb      	ldrb	r3, [r7, #31]
 8009760:	4013      	ands	r3, r2
 8009762:	77fb      	strb	r3, [r7, #31]
        initDataResult &= drv_crcGetCrc32((u8_t*)pBldSwVer, sizeof(*pBldSwVer), &desiredBldSwVerCrc);
 8009764:	f107 0314 	add.w	r3, r7, #20
 8009768:	461a      	mov	r2, r3
 800976a:	21a0      	movs	r1, #160	@ 0xa0
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fb77 	bl	8009e60 <drv_crcGetCrc32>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	7ffb      	ldrb	r3, [r7, #31]
 8009778:	4013      	ands	r3, r2
 800977a:	77fb      	strb	r3, [r7, #31]

        initDataResult &= drv_crcGetCrc32((u8_t*)&libVerInfo, sizeof(libVerInfo), &libVerCrc);
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	461a      	mov	r2, r3
 8009782:	21a0      	movs	r1, #160	@ 0xa0
 8009784:	4838      	ldr	r0, [pc, #224]	@ (8009868 <bld_initData+0x14c>)
 8009786:	f000 fb6b 	bl	8009e60 <drv_crcGetCrc32>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	7ffb      	ldrb	r3, [r7, #31]
 8009790:	4013      	ands	r3, r2
 8009792:	77fb      	strb	r3, [r7, #31]
        initDataResult &= drv_crcGetCrc32((u8_t*)&(currentSwInfo.bldLibVerInfo), sizeof(currentSwInfo.bldLibVerInfo), &testLibVerCrc);
 8009794:	f107 030c 	add.w	r3, r7, #12
 8009798:	461a      	mov	r2, r3
 800979a:	21a0      	movs	r1, #160	@ 0xa0
 800979c:	4831      	ldr	r0, [pc, #196]	@ (8009864 <bld_initData+0x148>)
 800979e:	f000 fb5f 	bl	8009e60 <drv_crcGetCrc32>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	7ffb      	ldrb	r3, [r7, #31]
 80097a8:	4013      	ands	r3, r2
 80097aa:	77fb      	strb	r3, [r7, #31]

        // Check if reset is needed.
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d10d      	bne.n	80097d0 <bld_initData+0xb4>
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d109      	bne.n	80097d0 <bld_initData+0xb4>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 80097bc:	4b29      	ldr	r3, [pc, #164]	@ (8009864 <bld_initData+0x148>)
 80097be:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d104      	bne.n	80097d0 <bld_initData+0xb4>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 80097c6:	4b27      	ldr	r3, [pc, #156]	@ (8009864 <bld_initData+0x148>)
 80097c8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d043      	beq.n	8009858 <bld_initData+0x13c>
        {
            // Copy desired data.
            (void_t) memcpy((void_t*)&currentSwInfo.bldSwVerInfo, (void_t*)pBldSwVer, sizeof(svl_pdhSwVerInfo_t));
 80097d0:	4b24      	ldr	r3, [pc, #144]	@ (8009864 <bld_initData+0x148>)
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	33a0      	adds	r3, #160	@ 0xa0
 80097d6:	4611      	mov	r1, r2
 80097d8:	22a0      	movs	r2, #160	@ 0xa0
 80097da:	4618      	mov	r0, r3
 80097dc:	f00d fce5 	bl	80171aa <memcpy>

            // Fill out OS info.
            currentSwInfo.bldOsInfo.major = GOS_VERSION_MAJOR;
 80097e0:	4b20      	ldr	r3, [pc, #128]	@ (8009864 <bld_initData+0x148>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
            currentSwInfo.bldOsInfo.minor = GOS_VERSION_MINOR;
 80097e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009864 <bld_initData+0x148>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

            // Fill out binary data.
            currentSwInfo.bldBinaryInfo.startAddress = BLD_ROM_START_ADDRESS;
 80097f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009864 <bld_initData+0x148>)
 80097f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009870 <bld_initData+0x154>)
 80097f4:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
            initDataResult &= bld_getBootloaderSize(&currentSwInfo.bldBinaryInfo.size);
 80097f8:	481e      	ldr	r0, [pc, #120]	@ (8009874 <bld_initData+0x158>)
 80097fa:	f7ff ff31 	bl	8009660 <bld_getBootloaderSize>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	7ffb      	ldrb	r3, [r7, #31]
 8009804:	4013      	ands	r3, r2
 8009806:	77fb      	strb	r3, [r7, #31]
            initDataResult &= bld_getBootloaderCrc(&currentSwInfo.bldBinaryInfo.crc);
 8009808:	481b      	ldr	r0, [pc, #108]	@ (8009878 <bld_initData+0x15c>)
 800980a:	f7ff ff5d 	bl	80096c8 <bld_getBootloaderCrc>
 800980e:	4603      	mov	r3, r0
 8009810:	461a      	mov	r2, r3
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	4013      	ands	r3, r2
 8009816:	77fb      	strb	r3, [r7, #31]

            // Fill out library info.
            initDataResult &= svl_pdhGetLibVersion(&currentSwInfo.bldLibVerInfo);
 8009818:	4812      	ldr	r0, [pc, #72]	@ (8009864 <bld_initData+0x148>)
 800981a:	f005 f8cd 	bl	800e9b8 <svl_pdhGetLibVersion>
 800981e:	4603      	mov	r3, r0
 8009820:	461a      	mov	r2, r3
 8009822:	7ffb      	ldrb	r3, [r7, #31]
 8009824:	4013      	ands	r3, r2
 8009826:	77fb      	strb	r3, [r7, #31]

            (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 8009828:	480e      	ldr	r0, [pc, #56]	@ (8009864 <bld_initData+0x148>)
 800982a:	f005 fa27 	bl	800ec7c <svl_pdhSetSwInfo>

            if (initDataResult == GOS_SUCCESS)
 800982e:	7ffb      	ldrb	r3, [r7, #31]
 8009830:	2b55      	cmp	r3, #85	@ 0x55
 8009832:	d109      	bne.n	8009848 <bld_initData+0x12c>
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data updated. Restarting device...\r\n");
 8009834:	4811      	ldr	r0, [pc, #68]	@ (800987c <bld_initData+0x160>)
 8009836:	f00c fb3f 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
                (void_t) gos_taskSleep(1000);
 800983a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800983e:	f007 ffb5 	bl	80117ac <gos_taskSleep>
                gos_kernelReset();
 8009842:	f006 fe1b 	bl	801047c <gos_kernelReset>
 8009846:	e007      	b.n	8009858 <bld_initData+0x13c>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data initialization failed.\r\n");
 8009848:	480d      	ldr	r0, [pc, #52]	@ (8009880 <bld_initData+0x164>)
 800984a:	f00c fb35 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
                initDataResult = GOS_ERROR;
 800984e:	23ae      	movs	r3, #174	@ 0xae
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e001      	b.n	8009858 <bld_initData+0x13c>
            // Version info is up-to-date.
        }
    }
    else
    {
        initDataResult = GOS_ERROR;
 8009854:	23ae      	movs	r3, #174	@ 0xae
 8009856:	77fb      	strb	r3, [r7, #31]
    }

    return initDataResult;
 8009858:	7ffb      	ldrb	r3, [r7, #31]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20001928 	.word	0x20001928
 8009868:	20001ebc 	.word	0x20001ebc
 800986c:	200019c8 	.word	0x200019c8
 8009870:	08004000 	.word	0x08004000
 8009874:	20001a70 	.word	0x20001a70
 8009878:	20001a74 	.word	0x20001a74
 800987c:	080194e4 	.word	0x080194e4
 8009880:	08019514 	.word	0x08019514

08009884 <bld_initConfig>:

/*
 * Function: bld_initConfig
 */
gos_result_t bld_initConfig (void_t)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initCfgResult = GOS_SUCCESS;
 800988a:	2355      	movs	r3, #85	@ 0x55
 800988c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800988e:	4825      	ldr	r0, [pc, #148]	@ (8009924 <bld_initConfig+0xa0>)
 8009890:	f005 f984 	bl	800eb9c <svl_pdhGetBldCfg>

    // If boolean values are incorrect, it indicates an uninitialized
    // bootloader configuration.
    if ((bldConfig.updateMode      != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 8009894:	4b23      	ldr	r3, [pc, #140]	@ (8009924 <bld_initConfig+0xa0>)
 8009896:	791b      	ldrb	r3, [r3, #4]
 8009898:	2b36      	cmp	r3, #54	@ 0x36
 800989a:	d00b      	beq.n	80098b4 <bld_initConfig+0x30>
 800989c:	4b21      	ldr	r3, [pc, #132]	@ (8009924 <bld_initConfig+0xa0>)
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	2b49      	cmp	r3, #73	@ 0x49
 80098a2:	d007      	beq.n	80098b4 <bld_initConfig+0x30>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 80098a4:	4b1f      	ldr	r3, [pc, #124]	@ (8009924 <bld_initConfig+0xa0>)
 80098a6:	781b      	ldrb	r3, [r3, #0]
    if ((bldConfig.updateMode      != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 80098a8:	2b36      	cmp	r3, #54	@ 0x36
 80098aa:	d003      	beq.n	80098b4 <bld_initConfig+0x30>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 80098ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009924 <bld_initConfig+0xa0>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b49      	cmp	r3, #73	@ 0x49
 80098b2:	d109      	bne.n	80098c8 <bld_initConfig+0x44>
    	bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 80098b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009924 <bld_initConfig+0xa0>)
 80098b6:	f8d3 3006 	ldr.w	r3, [r3, #6]
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <bld_initConfig+0x44>
    	bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 80098be:	4b19      	ldr	r3, [pc, #100]	@ (8009924 <bld_initConfig+0xa0>)
 80098c0:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d127      	bne.n	8009918 <bld_initConfig+0x94>
    {
        bldConfig.requestTimeout             = BLD_DEFAULT_REQ_TMO_MS;
 80098c8:	4a16      	ldr	r2, [pc, #88]	@ (8009924 <bld_initConfig+0xa0>)
 80098ca:	2300      	movs	r3, #0
 80098cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098d4:	f443 436a 	orr.w	r3, r3, #59904	@ 0xea00
 80098d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80098dc:	80d3      	strh	r3, [r2, #6]
 80098de:	2300      	movs	r3, #0
 80098e0:	8113      	strh	r3, [r2, #8]
        bldConfig.installTimeout             = BLD_DEFAULT_INSTALL_TMO_MS;
 80098e2:	4a10      	ldr	r2, [pc, #64]	@ (8009924 <bld_initConfig+0xa0>)
 80098e4:	2300      	movs	r3, #0
 80098e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098ee:	f443 4354 	orr.w	r3, r3, #54272	@ 0xd400
 80098f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098f6:	8153      	strh	r3, [r2, #10]
 80098f8:	2300      	movs	r3, #0
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	8193      	strh	r3, [r2, #12]
        bldConfig.startupCounter             = 0u;
 8009900:	4b08      	ldr	r3, [pc, #32]	@ (8009924 <bld_initConfig+0xa0>)
 8009902:	2200      	movs	r2, #0
 8009904:	715a      	strb	r2, [r3, #5]
        bldConfig.updateMode                 = GOS_FALSE;
 8009906:	4b07      	ldr	r3, [pc, #28]	@ (8009924 <bld_initConfig+0xa0>)
 8009908:	2249      	movs	r2, #73	@ 0x49
 800990a:	711a      	strb	r2, [r3, #4]
        bldConfig.installRequested           = GOS_FALSE;
 800990c:	4b05      	ldr	r3, [pc, #20]	@ (8009924 <bld_initConfig+0xa0>)
 800990e:	2249      	movs	r2, #73	@ 0x49
 8009910:	701a      	strb	r2, [r3, #0]

        (void_t) svl_pdhSetBldCfg(&bldConfig);
 8009912:	4804      	ldr	r0, [pc, #16]	@ (8009924 <bld_initConfig+0xa0>)
 8009914:	f005 fa22 	bl	800ed5c <svl_pdhSetBldCfg>
    else
    {
        // Configuration is initialized.
    }

    return initCfgResult;
 8009918:	79fb      	ldrb	r3, [r7, #7]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20001918 	.word	0x20001918

08009928 <bld_printConfig>:

/*
 * Function: bld_printConfig
 */
gos_result_t bld_printConfig (void_t)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800992c:	480b      	ldr	r0, [pc, #44]	@ (800995c <bld_printConfig+0x34>)
 800992e:	f005 f935 	bl	800eb9c <svl_pdhGetBldCfg>

    (void_t) gos_traceTraceFormattedUnsafe(TRACE_BG_BLUE_START"BOOTLOADER CONFIGURATION"TRACE_FORMAT_RESET"\r\n");
 8009932:	480b      	ldr	r0, [pc, #44]	@ (8009960 <bld_printConfig+0x38>)
 8009934:	f00c fac0 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Request timeout:      \t%u ms\r\n", bldConfig.requestTimeout);
 8009938:	4b08      	ldr	r3, [pc, #32]	@ (800995c <bld_printConfig+0x34>)
 800993a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800993e:	4619      	mov	r1, r3
 8009940:	4808      	ldr	r0, [pc, #32]	@ (8009964 <bld_printConfig+0x3c>)
 8009942:	f00c fab9 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Install timeout:      \t%u ms\r\n\r\n", bldConfig.installTimeout);
 8009946:	4b05      	ldr	r3, [pc, #20]	@ (800995c <bld_printConfig+0x34>)
 8009948:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800994c:	4619      	mov	r1, r3
 800994e:	4806      	ldr	r0, [pc, #24]	@ (8009968 <bld_printConfig+0x40>)
 8009950:	f00c fab2 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>

    return GOS_SUCCESS;
 8009954:	2355      	movs	r3, #85	@ 0x55
}
 8009956:	4618      	mov	r0, r3
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20001918 	.word	0x20001918
 8009960:	08019540 	.word	0x08019540
 8009964:	08019564 	.word	0x08019564
 8009968:	08019584 	.word	0x08019584

0800996c <drv_25lc640Init>:

/*
 * Function: drv_25lc640Init
 */
gos_result_t drv_25lc640Init (void_t* pDevice)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 8009974:	2355      	movs	r3, #85	@ 0x55
 8009976:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 8009978:	2300      	movs	r3, #0
 800997a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d103      	bne.n	800998a <drv_25lc640Init+0x1e>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f043 0301 	orr.w	r3, r3, #1
 8009988:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc640Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC640_MUTEX_INIT);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10d      	bne.n	80099ae <drv_25lc640Init+0x42>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3302      	adds	r3, #2
 8009996:	4618      	mov	r0, r3
 8009998:	f00a fa48 	bl	8013e2c <gos_mutexInit>
 800999c:	4603      	mov	r3, r0
 800999e:	2b55      	cmp	r3, #85	@ 0x55
 80099a0:	d005      	beq.n	80099ae <drv_25lc640Init+0x42>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f043 0208 	orr.w	r2, r3, #8
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <drv_25lc640Init+0x4e>
 80099b4:	2355      	movs	r3, #85	@ 0x55
 80099b6:	73fb      	strb	r3, [r7, #15]
 80099b8:	e001      	b.n	80099be <drv_25lc640Init+0x52>
 80099ba:	23ae      	movs	r3, #174	@ 0xae
 80099bc:	73fb      	strb	r3, [r7, #15]

    return initResult;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <drv_25lc640Read>:

/*
 * Function: drv_25lc640Read
 */
GOS_INLINE gos_result_t drv_25lc640Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b08f      	sub	sp, #60	@ 0x3c
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	461a      	mov	r2, r3
 80099d4:	460b      	mov	r3, r1
 80099d6:	817b      	strh	r3, [r7, #10]
 80099d8:	4613      	mov	r3, r2
 80099da:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 80099dc:	2355      	movs	r3, #85	@ 0x55
 80099de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage     = 0u;
 80099e2:	2300      	movs	r3, #0
 80099e4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage       = 0u;
 80099e6:	2300      	movs	r3, #0
 80099e8:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 80099ea:	2300      	movs	r3, #0
 80099ec:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 80099ee:	2300      	movs	r3, #0
 80099f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos           = 0u;
 80099f2:	2300      	movs	r3, #0
 80099f4:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset        = 0u;
 80099f6:	2300      	movs	r3, #0
 80099f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress    = 0u;
 80099fa:	2300      	movs	r3, #0
 80099fc:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 80099fe:	2300      	movs	r3, #0
 8009a00:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 8009a06:	2300      	movs	r3, #0
 8009a08:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <drv_25lc640Read+0x50>
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC640_TARGET_NULL);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d103      	bne.n	8009a26 <drv_25lc640Read+0x5e>
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f040 80ce 	bne.w	8009bca <drv_25lc640Read+0x202>
 8009a2e:	897a      	ldrh	r2, [r7, #10]
 8009a30:	893b      	ldrh	r3, [r7, #8]
 8009a32:	4413      	add	r3, r2
 8009a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a38:	f080 80c7 	bcs.w	8009bca <drv_25lc640Read+0x202>
    {
        DRV_ERROR_CHK_SET(
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10e      	bne.n	8009a60 <drv_25lc640Read+0x98>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1c9a      	adds	r2, r3, #2
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	f00a fa07 	bl	8013e60 <gos_mutexLock>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b55      	cmp	r3, #85	@ 0x55
 8009a56:	d003      	beq.n	8009a60 <drv_25lc640Read+0x98>
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	f043 0310 	orr.w	r3, r3, #16
 8009a5e:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d103      	bne.n	8009a6e <drv_25lc640Read+0xa6>
 8009a66:	2355      	movs	r3, #85	@ 0x55
 8009a68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009a6c:	e002      	b.n	8009a74 <drv_25lc640Read+0xac>
 8009a6e:	23ae      	movs	r3, #174	@ 0xae
 8009a70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8009a74:	2305      	movs	r3, #5
 8009a76:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8009a78:	897b      	ldrh	r3, [r7, #10]
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8009a7e:	893a      	ldrh	r2, [r7, #8]
 8009a80:	897b      	ldrh	r3, [r7, #10]
 8009a82:	4413      	add	r3, r2
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8009a88:	8bfa      	ldrh	r2, [r7, #30]
 8009a8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	3301      	adds	r3, #1
 8009a92:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8009a94:	2300      	movs	r3, #0
 8009a96:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 8009a98:	897b      	ldrh	r3, [r7, #10]
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009aa4:	e083      	b.n	8009bae <drv_25lc640Read+0x1e6>
        {
            memAddress = startPage << paddrposition | offset;
 8009aa6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8009aae:	b21a      	sxth	r2, r3
 8009ab0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	b21b      	sxth	r3, r3
 8009ab8:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8009aba:	893a      	ldrh	r2, [r7, #8]
 8009abc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009abe:	4413      	add	r3, r2
 8009ac0:	2b1f      	cmp	r3, #31
 8009ac2:	d904      	bls.n	8009ace <drv_25lc640Read+0x106>
 8009ac4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ac6:	f1c3 0320 	rsb	r3, r3, #32
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	e000      	b.n	8009ad0 <drv_25lc640Read+0x108>
 8009ace:	893b      	ldrh	r3, [r7, #8]
 8009ad0:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 8009ad2:	4b49      	ldr	r3, [pc, #292]	@ (8009bf8 <drv_25lc640Read+0x230>)
 8009ad4:	2203      	movs	r2, #3
 8009ad6:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 8009ad8:	8b7b      	ldrh	r3, [r7, #26]
 8009ada:	0a1b      	lsrs	r3, r3, #8
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	4b45      	ldr	r3, [pc, #276]	@ (8009bf8 <drv_25lc640Read+0x230>)
 8009ae2:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 8009ae4:	8b7b      	ldrh	r3, [r7, #26]
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	4b43      	ldr	r3, [pc, #268]	@ (8009bf8 <drv_25lc640Read+0x230>)
 8009aea:	709a      	strb	r2, [r3, #2]

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	785b      	ldrb	r3, [r3, #1]
 8009af0:	2100      	movs	r1, #0
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 f8ce 	bl	800ac94 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d112      	bne.n	8009b24 <drv_25lc640Read+0x15c>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	7818      	ldrb	r0, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	2203      	movs	r2, #3
 8009b10:	4939      	ldr	r1, [pc, #228]	@ (8009bf8 <drv_25lc640Read+0x230>)
 8009b12:	f001 ff4d 	bl	800b9b0 <drv_spiTransmitIT>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b55      	cmp	r3, #85	@ 0x55
 8009b1a:	d003      	beq.n	8009b24 <drv_25lc640Read+0x15c>
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	f043 0320 	orr.w	r3, r3, #32
 8009b22:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d103      	bne.n	8009b32 <drv_25lc640Read+0x16a>
 8009b2a:	2355      	movs	r3, #85	@ 0x55
 8009b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b30:	e002      	b.n	8009b38 <drv_25lc640Read+0x170>
 8009b32:	23ae      	movs	r3, #174	@ 0xae
 8009b34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            DRV_ERROR_CHK_SET(
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d114      	bne.n	8009b68 <drv_25lc640Read+0x1a0>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	7818      	ldrb	r0, [r3, #0]
 8009b42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	18d1      	adds	r1, r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	689c      	ldr	r4, [r3, #8]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	8b3a      	ldrh	r2, [r7, #24]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	4623      	mov	r3, r4
 8009b56:	f001 ff8f 	bl	800ba78 <drv_spiReceiveIT>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b55      	cmp	r3, #85	@ 0x55
 8009b5e:	d003      	beq.n	8009b68 <drv_25lc640Read+0x1a0>
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	f043 0320 	orr.w	r3, r3, #32
 8009b66:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <drv_25lc640Read+0x1ae>
 8009b6e:	2355      	movs	r3, #85	@ 0x55
 8009b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b74:	e002      	b.n	8009b7c <drv_25lc640Read+0x1b4>
 8009b76:	23ae      	movs	r3, #174	@ 0xae
 8009b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2101      	movs	r1, #1
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 f886 	bl	800ac94 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 8009b88:	200a      	movs	r0, #10
 8009b8a:	f007 fe0f 	bl	80117ac <gos_taskSleep>

            startPage += 1;
 8009b8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009b90:	3301      	adds	r3, #1
 8009b92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 8009b94:	2300      	movs	r3, #0
 8009b96:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 8009b98:	893a      	ldrh	r2, [r7, #8]
 8009b9a:	8b3b      	ldrh	r3, [r7, #24]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8009ba0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009ba2:	8b3b      	ldrh	r3, [r7, #24]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8009ba8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009baa:	3301      	adds	r3, #1
 8009bac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009bae:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009bb0:	8bbb      	ldrh	r3, [r7, #28]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d204      	bcs.n	8009bc0 <drv_25lc640Read+0x1f8>
 8009bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bba:	2b55      	cmp	r3, #85	@ 0x55
 8009bbc:	f43f af73 	beq.w	8009aa6 <drv_25lc640Read+0xde>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f00a fa51 	bl	801406c <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <drv_25lc640Read+0x21c>
 8009bdc:	2355      	movs	r3, #85	@ 0x55
 8009bde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009be2:	e002      	b.n	8009bea <drv_25lc640Read+0x222>
 8009be4:	23ae      	movs	r3, #174	@ 0xae
 8009be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return readResult;
 8009bea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3734      	adds	r7, #52	@ 0x34
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd90      	pop	{r4, r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20001f5c 	.word	0x20001f5c

08009bfc <drv_25lc640Write>:

/*
 * Function: drv_25lc640Write
 */
GOS_INLINE gos_result_t drv_25lc640Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	@ 0x38
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	461a      	mov	r2, r3
 8009c08:	460b      	mov	r3, r1
 8009c0a:	817b      	strh	r3, [r7, #10]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 8009c10:	2355      	movs	r3, #85	@ 0x55
 8009c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage       = 0u;
 8009c16:	2300      	movs	r3, #0
 8009c18:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage         = 0u;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages      = 0u;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	83bb      	strh	r3, [r7, #28]
    u16_t        idx             = 0u;
 8009c22:	2300      	movs	r3, #0
 8009c24:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos             = 0u;
 8009c26:	2300      	movs	r3, #0
 8009c28:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset          = 0u;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress      = 0u;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem        = 0u;
 8009c32:	2300      	movs	r3, #0
 8009c34:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition   = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags      = 0u;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	623b      	str	r3, [r7, #32]
    u8_t         wrenInstruction = 0x06;
 8009c3e:	2306      	movs	r3, #6
 8009c40:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <drv_25lc640Write+0x54>
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC640_DATA_NULL);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d103      	bne.n	8009c5e <drv_25lc640Write+0x62>
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	f043 0304 	orr.w	r3, r3, #4
 8009c5c:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f040 80e3 	bne.w	8009e2c <drv_25lc640Write+0x230>
 8009c66:	897a      	ldrh	r2, [r7, #10]
 8009c68:	893b      	ldrh	r3, [r7, #8]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c70:	f080 80dc 	bcs.w	8009e2c <drv_25lc640Write+0x230>
    {
        DRV_ERROR_CHK_SET(
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10e      	bne.n	8009c98 <drv_25lc640Write+0x9c>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	1c9a      	adds	r2, r3, #2
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f00a f8eb 	bl	8013e60 <gos_mutexLock>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b55      	cmp	r3, #85	@ 0x55
 8009c8e:	d003      	beq.n	8009c98 <drv_25lc640Write+0x9c>
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	f043 0310 	orr.w	r3, r3, #16
 8009c96:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009c98:	6a3b      	ldr	r3, [r7, #32]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d103      	bne.n	8009ca6 <drv_25lc640Write+0xaa>
 8009c9e:	2355      	movs	r3, #85	@ 0x55
 8009ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ca4:	e002      	b.n	8009cac <drv_25lc640Write+0xb0>
 8009ca6:	23ae      	movs	r3, #174	@ 0xae
 8009ca8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8009cac:	2305      	movs	r3, #5
 8009cae:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8009cb0:	897b      	ldrh	r3, [r7, #10]
 8009cb2:	095b      	lsrs	r3, r3, #5
 8009cb4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8009cb6:	893a      	ldrh	r2, [r7, #8]
 8009cb8:	897b      	ldrh	r3, [r7, #10]
 8009cba:	4413      	add	r3, r2
 8009cbc:	095b      	lsrs	r3, r3, #5
 8009cbe:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8009cc0:	8bfa      	ldrh	r2, [r7, #30]
 8009cc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3301      	adds	r3, #1
 8009cca:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 8009cd0:	897b      	ldrh	r3, [r7, #10]
 8009cd2:	f003 031f 	and.w	r3, r3, #31
 8009cd6:	84fb      	strh	r3, [r7, #38]	@ 0x26

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8009cd8:	2300      	movs	r3, #0
 8009cda:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009cdc:	e098      	b.n	8009e10 <drv_25lc640Write+0x214>
        {
            memAddress = startPage << paddrposition | offset;
 8009cde:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce6:	b21a      	sxth	r2, r3
 8009ce8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009cec:	4313      	orrs	r3, r2
 8009cee:	b21b      	sxth	r3, r3
 8009cf0:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8009cf2:	893a      	ldrh	r2, [r7, #8]
 8009cf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009cf6:	4413      	add	r3, r2
 8009cf8:	2b1f      	cmp	r3, #31
 8009cfa:	d904      	bls.n	8009d06 <drv_25lc640Write+0x10a>
 8009cfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009cfe:	f1c3 0320 	rsb	r3, r3, #32
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	e000      	b.n	8009d08 <drv_25lc640Write+0x10c>
 8009d06:	893b      	ldrh	r3, [r7, #8]
 8009d08:	833b      	strh	r3, [r7, #24]

            txBuffer[0] = 0x02;
 8009d0a:	4b53      	ldr	r3, [pc, #332]	@ (8009e58 <drv_25lc640Write+0x25c>)
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (memAddress >> 8);
 8009d10:	8b7b      	ldrh	r3, [r7, #26]
 8009d12:	0a1b      	lsrs	r3, r3, #8
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	4b4f      	ldr	r3, [pc, #316]	@ (8009e58 <drv_25lc640Write+0x25c>)
 8009d1a:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = memAddress & 0xFF;
 8009d1c:	8b7b      	ldrh	r3, [r7, #26]
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	4b4d      	ldr	r3, [pc, #308]	@ (8009e58 <drv_25lc640Write+0x25c>)
 8009d22:	709a      	strb	r2, [r3, #2]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 8009d24:	484d      	ldr	r0, [pc, #308]	@ (8009e5c <drv_25lc640Write+0x260>)
 8009d26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	8b3a      	ldrh	r2, [r7, #24]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f00d fa3b 	bl	80171aa <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 ffaa 	bl	800ac94 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d113      	bne.n	8009d6e <drv_25lc640Write+0x172>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	7818      	ldrb	r0, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f107 0113 	add.w	r1, r7, #19
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f001 fe28 	bl	800b9b0 <drv_spiTransmitIT>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b55      	cmp	r3, #85	@ 0x55
 8009d64:	d003      	beq.n	8009d6e <drv_25lc640Write+0x172>
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d6c:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d103      	bne.n	8009d7c <drv_25lc640Write+0x180>
 8009d74:	2355      	movs	r3, #85	@ 0x55
 8009d76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009d7a:	e002      	b.n	8009d82 <drv_25lc640Write+0x186>
 8009d7c:	23ae      	movs	r3, #174	@ 0xae
 8009d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	2101      	movs	r1, #1
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 ff83 	bl	800ac94 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	785b      	ldrb	r3, [r3, #1]
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 ff7d 	bl	800ac94 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d114      	bne.n	8009dca <drv_25lc640Write+0x1ce>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	7818      	ldrb	r0, [r3, #0]
 8009da4:	8b3b      	ldrh	r3, [r7, #24]
 8009da6:	3303      	adds	r3, #3
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6899      	ldr	r1, [r3, #8]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	460b      	mov	r3, r1
 8009db6:	4928      	ldr	r1, [pc, #160]	@ (8009e58 <drv_25lc640Write+0x25c>)
 8009db8:	f001 fdfa 	bl	800b9b0 <drv_spiTransmitIT>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b55      	cmp	r3, #85	@ 0x55
 8009dc0:	d003      	beq.n	8009dca <drv_25lc640Write+0x1ce>
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dc8:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <drv_25lc640Write+0x1dc>
 8009dd0:	2355      	movs	r3, #85	@ 0x55
 8009dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009dd6:	e002      	b.n	8009dde <drv_25lc640Write+0x1e2>
 8009dd8:	23ae      	movs	r3, #174	@ 0xae
 8009dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	2101      	movs	r1, #1
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 ff55 	bl	800ac94 <drv_gpioWritePin>

            startPage += 1;
 8009dea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009dec:	3301      	adds	r3, #1
 8009dee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 8009df0:	2300      	movs	r3, #0
 8009df2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 8009df4:	893a      	ldrh	r2, [r7, #8]
 8009df6:	8b3b      	ldrh	r3, [r7, #24]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8009dfc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009dfe:	8b3b      	ldrh	r3, [r7, #24]
 8009e00:	4413      	add	r3, r2
 8009e02:	853b      	strh	r3, [r7, #40]	@ 0x28

            (void_t) gos_taskSleep(5);
 8009e04:	2005      	movs	r0, #5
 8009e06:	f007 fcd1 	bl	80117ac <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8009e0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009e10:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009e12:	8bbb      	ldrh	r3, [r7, #28]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d204      	bcs.n	8009e22 <drv_25lc640Write+0x226>
 8009e18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e1c:	2b55      	cmp	r3, #85	@ 0x55
 8009e1e:	f43f af5e 	beq.w	8009cde <drv_25lc640Write+0xe2>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3302      	adds	r3, #2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f00a f920 	bl	801406c <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	699a      	ldr	r2, [r3, #24]
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	431a      	orrs	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <drv_25lc640Write+0x24a>
 8009e3e:	2355      	movs	r3, #85	@ 0x55
 8009e40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009e44:	e002      	b.n	8009e4c <drv_25lc640Write+0x250>
 8009e46:	23ae      	movs	r3, #174	@ 0xae
 8009e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return writeResult;
 8009e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3730      	adds	r7, #48	@ 0x30
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20001f5c 	.word	0x20001f5c
 8009e5c:	20001f5f 	.word	0x20001f5f

08009e60 <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b089      	sub	sp, #36	@ 0x24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 8009e6c:	23ae      	movs	r3, #174	@ 0xae
 8009e6e:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 8009e74:	2300      	movs	r3, #0
 8009e76:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 8009e78:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7c:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d030      	beq.n	8009ee6 <drv_crcGetCrc32+0x86>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d02d      	beq.n	8009ee6 <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	e021      	b.n	8009ed4 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	4413      	add	r3, r2
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	4053      	eors	r3, r2
 8009e9e:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75fb      	strb	r3, [r7, #23]
 8009ea4:	e010      	b.n	8009ec8 <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da07      	bge.n	8009ebc <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef4 <drv_crcGetCrc32+0x94>)
 8009eb6:	4053      	eors	r3, r2
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	e002      	b.n	8009ec2 <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	2b1f      	cmp	r3, #31
 8009ecc:	d9eb      	bls.n	8009ea6 <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	61bb      	str	r3, [r7, #24]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d3d9      	bcc.n	8009e90 <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 8009ee2:	2355      	movs	r3, #85	@ 0x55
 8009ee4:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 8009ee6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3724      	adds	r7, #36	@ 0x24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	04c11db7 	.word	0x04c11db7

08009ef8 <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 8009f06:	239c      	movs	r3, #156	@ 0x9c
 8009f08:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d015      	beq.n	8009f40 <drv_crcCheckCrc32+0x48>
 8009f14:	f107 0310 	add.w	r3, r7, #16
 8009f18:	461a      	mov	r2, r3
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff ff9f 	bl	8009e60 <drv_crcGetCrc32>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b55      	cmp	r3, #85	@ 0x55
 8009f26:	d10b      	bne.n	8009f40 <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d101      	bne.n	8009f34 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 8009f30:	23ca      	movs	r3, #202	@ 0xca
 8009f32:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 8009f52:	2355      	movs	r3, #85	@ 0x55
 8009f54:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 8009f56:	2300      	movs	r3, #0
 8009f58:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	71bb      	strb	r3, [r7, #6]
 8009f5e:	e0c9      	b.n	800a0f4 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 8009f60:	79ba      	ldrb	r2, [r7, #6]
 8009f62:	496c      	ldr	r1, [pc, #432]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009f64:	4613      	mov	r3, r2
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	4413      	add	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	440b      	add	r3, r1
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	4619      	mov	r1, r3
 8009f72:	79ba      	ldrb	r2, [r7, #6]
 8009f74:	4b68      	ldr	r3, [pc, #416]	@ (800a118 <drv_dmaInit+0x1cc>)
 8009f76:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009f7a:	4866      	ldr	r0, [pc, #408]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	011b      	lsls	r3, r3, #4
 8009f80:	4413      	add	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	4403      	add	r3, r0
 8009f86:	3304      	adds	r3, #4
 8009f88:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 8009f8a:	79b9      	ldrb	r1, [r7, #6]
 8009f8c:	79ba      	ldrb	r2, [r7, #6]
 8009f8e:	4861      	ldr	r0, [pc, #388]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009f90:	460b      	mov	r3, r1
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	440b      	add	r3, r1
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	4403      	add	r3, r0
 8009f9a:	3364      	adds	r3, #100	@ 0x64
 8009f9c:	6819      	ldr	r1, [r3, #0]
 8009f9e:	485d      	ldr	r0, [pc, #372]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	4413      	add	r3, r2
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	4403      	add	r3, r0
 8009faa:	3308      	adds	r3, #8
 8009fac:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 8009fae:	79b9      	ldrb	r1, [r7, #6]
 8009fb0:	79ba      	ldrb	r2, [r7, #6]
 8009fb2:	4858      	ldr	r0, [pc, #352]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	440b      	add	r3, r1
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	4403      	add	r3, r0
 8009fbe:	3368      	adds	r3, #104	@ 0x68
 8009fc0:	6819      	ldr	r1, [r3, #0]
 8009fc2:	4854      	ldr	r0, [pc, #336]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	4413      	add	r3, r2
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4403      	add	r3, r0
 8009fce:	330c      	adds	r3, #12
 8009fd0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 8009fd2:	79b9      	ldrb	r1, [r7, #6]
 8009fd4:	79ba      	ldrb	r2, [r7, #6]
 8009fd6:	484f      	ldr	r0, [pc, #316]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009fd8:	460b      	mov	r3, r1
 8009fda:	011b      	lsls	r3, r3, #4
 8009fdc:	440b      	add	r3, r1
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	4403      	add	r3, r0
 8009fe2:	336c      	adds	r3, #108	@ 0x6c
 8009fe4:	6819      	ldr	r1, [r3, #0]
 8009fe6:	484b      	ldr	r0, [pc, #300]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009fe8:	4613      	mov	r3, r2
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	4413      	add	r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4403      	add	r3, r0
 8009ff2:	3310      	adds	r3, #16
 8009ff4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 8009ff6:	79b9      	ldrb	r1, [r7, #6]
 8009ff8:	79ba      	ldrb	r2, [r7, #6]
 8009ffa:	4846      	ldr	r0, [pc, #280]	@ (800a114 <drv_dmaInit+0x1c8>)
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	440b      	add	r3, r1
 800a002:	00db      	lsls	r3, r3, #3
 800a004:	4403      	add	r3, r0
 800a006:	3370      	adds	r3, #112	@ 0x70
 800a008:	6819      	ldr	r1, [r3, #0]
 800a00a:	4842      	ldr	r0, [pc, #264]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a00c:	4613      	mov	r3, r2
 800a00e:	011b      	lsls	r3, r3, #4
 800a010:	4413      	add	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	4403      	add	r3, r0
 800a016:	3314      	adds	r3, #20
 800a018:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 800a01a:	79b9      	ldrb	r1, [r7, #6]
 800a01c:	79ba      	ldrb	r2, [r7, #6]
 800a01e:	483d      	ldr	r0, [pc, #244]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a020:	460b      	mov	r3, r1
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	440b      	add	r3, r1
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4403      	add	r3, r0
 800a02a:	3374      	adds	r3, #116	@ 0x74
 800a02c:	6819      	ldr	r1, [r3, #0]
 800a02e:	4839      	ldr	r0, [pc, #228]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a030:	4613      	mov	r3, r2
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	4413      	add	r3, r2
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	4403      	add	r3, r0
 800a03a:	3318      	adds	r3, #24
 800a03c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 800a03e:	79b9      	ldrb	r1, [r7, #6]
 800a040:	79ba      	ldrb	r2, [r7, #6]
 800a042:	4834      	ldr	r0, [pc, #208]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a044:	460b      	mov	r3, r1
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	440b      	add	r3, r1
 800a04a:	00db      	lsls	r3, r3, #3
 800a04c:	4403      	add	r3, r0
 800a04e:	3378      	adds	r3, #120	@ 0x78
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	4830      	ldr	r0, [pc, #192]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a054:	4613      	mov	r3, r2
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	4413      	add	r3, r2
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	4403      	add	r3, r0
 800a05e:	331c      	adds	r3, #28
 800a060:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 800a062:	79b9      	ldrb	r1, [r7, #6]
 800a064:	79ba      	ldrb	r2, [r7, #6]
 800a066:	482b      	ldr	r0, [pc, #172]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a068:	460b      	mov	r3, r1
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	440b      	add	r3, r1
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	4403      	add	r3, r0
 800a072:	337c      	adds	r3, #124	@ 0x7c
 800a074:	6819      	ldr	r1, [r3, #0]
 800a076:	4827      	ldr	r0, [pc, #156]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a078:	4613      	mov	r3, r2
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	4413      	add	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	4403      	add	r3, r0
 800a082:	3320      	adds	r3, #32
 800a084:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 800a086:	79b9      	ldrb	r1, [r7, #6]
 800a088:	79ba      	ldrb	r2, [r7, #6]
 800a08a:	4822      	ldr	r0, [pc, #136]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a08c:	460b      	mov	r3, r1
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	440b      	add	r3, r1
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	4403      	add	r3, r0
 800a096:	3380      	adds	r3, #128	@ 0x80
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	481e      	ldr	r0, [pc, #120]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a09c:	4613      	mov	r3, r2
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	4413      	add	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4403      	add	r3, r0
 800a0a6:	3324      	adds	r3, #36	@ 0x24
 800a0a8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 800a0aa:	79b9      	ldrb	r1, [r7, #6]
 800a0ac:	79ba      	ldrb	r2, [r7, #6]
 800a0ae:	4819      	ldr	r0, [pc, #100]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	440b      	add	r3, r1
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4403      	add	r3, r0
 800a0ba:	3384      	adds	r3, #132	@ 0x84
 800a0bc:	6819      	ldr	r1, [r3, #0]
 800a0be:	4815      	ldr	r0, [pc, #84]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	4413      	add	r3, r2
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	4403      	add	r3, r0
 800a0ca:	3328      	adds	r3, #40	@ 0x28
 800a0cc:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 800a0ce:	79ba      	ldrb	r2, [r7, #6]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	4413      	add	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a114 <drv_dmaInit+0x1c8>)
 800a0da:	4413      	add	r3, r2
 800a0dc:	3304      	adds	r3, #4
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f7 fede 	bl	8001ea0 <HAL_DMA_Init>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 800a0ea:	23ae      	movs	r3, #174	@ 0xae
 800a0ec:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800a0ee:	79bb      	ldrb	r3, [r7, #6]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	71bb      	strb	r3, [r7, #6]
 800a0f4:	79ba      	ldrb	r2, [r7, #6]
 800a0f6:	4b09      	ldr	r3, [pc, #36]	@ (800a11c <drv_dmaInit+0x1d0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4909      	ldr	r1, [pc, #36]	@ (800a120 <drv_dmaInit+0x1d4>)
 800a0fc:	fba1 1303 	umull	r1, r3, r1, r3
 800a100:	09db      	lsrs	r3, r3, #7
 800a102:	429a      	cmp	r2, r3
 800a104:	f4ff af2c 	bcc.w	8009f60 <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 800a108:	79fb      	ldrb	r3, [r7, #7]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000174 	.word	0x20000174
 800a118:	20000484 	.word	0x20000484
 800a11c:	2000030c 	.word	0x2000030c
 800a120:	f0f0f0f1 	.word	0xf0f0f0f1

0800a124 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a128:	4b19      	ldr	r3, [pc, #100]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d105      	bne.n	800a13c <DMA1_Stream0_IRQHandler+0x18>
 800a130:	4b18      	ldr	r3, [pc, #96]	@ (800a194 <DMA1_Stream0_IRQHandler+0x70>)
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	b2da      	uxtb	r2, r3
 800a138:	4b16      	ldr	r3, [pc, #88]	@ (800a194 <DMA1_Stream0_IRQHandler+0x70>)
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	4b14      	ldr	r3, [pc, #80]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	3301      	adds	r3, #1
 800a142:	b2da      	uxtb	r2, r3
 800a144:	4b12      	ldr	r3, [pc, #72]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a146:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 800a148:	4b13      	ldr	r3, [pc, #76]	@ (800a198 <DMA1_Stream0_IRQHandler+0x74>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 800a150:	4b11      	ldr	r3, [pc, #68]	@ (800a198 <DMA1_Stream0_IRQHandler+0x74>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3304      	adds	r3, #4
 800a156:	4618      	mov	r0, r3
 800a158:	f7f8 f83a 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a15c:	4b0c      	ldr	r3, [pc, #48]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <DMA1_Stream0_IRQHandler+0x4c>
 800a164:	4b0a      	ldr	r3, [pc, #40]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	3b01      	subs	r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	4b08      	ldr	r3, [pc, #32]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <DMA1_Stream0_IRQHandler+0x6c>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d109      	bne.n	800a18c <DMA1_Stream0_IRQHandler+0x68>
 800a178:	4b06      	ldr	r3, [pc, #24]	@ (800a194 <DMA1_Stream0_IRQHandler+0x70>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d005      	beq.n	800a18c <DMA1_Stream0_IRQHandler+0x68>
 800a180:	4b04      	ldr	r3, [pc, #16]	@ (800a194 <DMA1_Stream0_IRQHandler+0x70>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	3b01      	subs	r3, #1
 800a186:	b2da      	uxtb	r2, r3
 800a188:	4b02      	ldr	r3, [pc, #8]	@ (800a194 <DMA1_Stream0_IRQHandler+0x70>)
 800a18a:	701a      	strb	r2, [r3, #0]
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20005e52 	.word	0x20005e52
 800a194:	20005e51 	.word	0x20005e51
 800a198:	20000310 	.word	0x20000310

0800a19c <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a1a0:	4b19      	ldr	r3, [pc, #100]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d105      	bne.n	800a1b4 <DMA1_Stream1_IRQHandler+0x18>
 800a1a8:	4b18      	ldr	r3, [pc, #96]	@ (800a20c <DMA1_Stream1_IRQHandler+0x70>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	4b16      	ldr	r3, [pc, #88]	@ (800a20c <DMA1_Stream1_IRQHandler+0x70>)
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	4b14      	ldr	r3, [pc, #80]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	4b12      	ldr	r3, [pc, #72]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1be:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 800a1c0:	4b13      	ldr	r3, [pc, #76]	@ (800a210 <DMA1_Stream1_IRQHandler+0x74>)
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 800a1c8:	4b11      	ldr	r3, [pc, #68]	@ (800a210 <DMA1_Stream1_IRQHandler+0x74>)
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7f7 fffe 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <DMA1_Stream1_IRQHandler+0x4c>
 800a1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	4b08      	ldr	r3, [pc, #32]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	4b07      	ldr	r3, [pc, #28]	@ (800a208 <DMA1_Stream1_IRQHandler+0x6c>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d109      	bne.n	800a204 <DMA1_Stream1_IRQHandler+0x68>
 800a1f0:	4b06      	ldr	r3, [pc, #24]	@ (800a20c <DMA1_Stream1_IRQHandler+0x70>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d005      	beq.n	800a204 <DMA1_Stream1_IRQHandler+0x68>
 800a1f8:	4b04      	ldr	r3, [pc, #16]	@ (800a20c <DMA1_Stream1_IRQHandler+0x70>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	4b02      	ldr	r3, [pc, #8]	@ (800a20c <DMA1_Stream1_IRQHandler+0x70>)
 800a202:	701a      	strb	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20005e52 	.word	0x20005e52
 800a20c:	20005e51 	.word	0x20005e51
 800a210:	20000310 	.word	0x20000310

0800a214 <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a218:	4b19      	ldr	r3, [pc, #100]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d105      	bne.n	800a22c <DMA1_Stream2_IRQHandler+0x18>
 800a220:	4b18      	ldr	r3, [pc, #96]	@ (800a284 <DMA1_Stream2_IRQHandler+0x70>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	b2da      	uxtb	r2, r3
 800a228:	4b16      	ldr	r3, [pc, #88]	@ (800a284 <DMA1_Stream2_IRQHandler+0x70>)
 800a22a:	701a      	strb	r2, [r3, #0]
 800a22c:	4b14      	ldr	r3, [pc, #80]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	3301      	adds	r3, #1
 800a232:	b2da      	uxtb	r2, r3
 800a234:	4b12      	ldr	r3, [pc, #72]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a236:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 800a238:	4b13      	ldr	r3, [pc, #76]	@ (800a288 <DMA1_Stream2_IRQHandler+0x74>)
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 800a240:	4b11      	ldr	r3, [pc, #68]	@ (800a288 <DMA1_Stream2_IRQHandler+0x74>)
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	3304      	adds	r3, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7f7 ffc2 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a24c:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d005      	beq.n	800a260 <DMA1_Stream2_IRQHandler+0x4c>
 800a254:	4b0a      	ldr	r3, [pc, #40]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	3b01      	subs	r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	4b08      	ldr	r3, [pc, #32]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <DMA1_Stream2_IRQHandler+0x6c>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d109      	bne.n	800a27c <DMA1_Stream2_IRQHandler+0x68>
 800a268:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <DMA1_Stream2_IRQHandler+0x70>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <DMA1_Stream2_IRQHandler+0x68>
 800a270:	4b04      	ldr	r3, [pc, #16]	@ (800a284 <DMA1_Stream2_IRQHandler+0x70>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	3b01      	subs	r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	4b02      	ldr	r3, [pc, #8]	@ (800a284 <DMA1_Stream2_IRQHandler+0x70>)
 800a27a:	701a      	strb	r2, [r3, #0]
}
 800a27c:	bf00      	nop
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20005e52 	.word	0x20005e52
 800a284:	20005e51 	.word	0x20005e51
 800a288:	20000310 	.word	0x20000310

0800a28c <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a290:	4b19      	ldr	r3, [pc, #100]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <DMA1_Stream3_IRQHandler+0x18>
 800a298:	4b18      	ldr	r3, [pc, #96]	@ (800a2fc <DMA1_Stream3_IRQHandler+0x70>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	3301      	adds	r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	4b16      	ldr	r3, [pc, #88]	@ (800a2fc <DMA1_Stream3_IRQHandler+0x70>)
 800a2a2:	701a      	strb	r2, [r3, #0]
 800a2a4:	4b14      	ldr	r3, [pc, #80]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	4b12      	ldr	r3, [pc, #72]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a2ae:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 800a2b0:	4b13      	ldr	r3, [pc, #76]	@ (800a300 <DMA1_Stream3_IRQHandler+0x74>)
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 800a2b8:	4b11      	ldr	r3, [pc, #68]	@ (800a300 <DMA1_Stream3_IRQHandler+0x74>)
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7f7 ff86 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <DMA1_Stream3_IRQHandler+0x4c>
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	4b08      	ldr	r3, [pc, #32]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	4b07      	ldr	r3, [pc, #28]	@ (800a2f8 <DMA1_Stream3_IRQHandler+0x6c>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d109      	bne.n	800a2f4 <DMA1_Stream3_IRQHandler+0x68>
 800a2e0:	4b06      	ldr	r3, [pc, #24]	@ (800a2fc <DMA1_Stream3_IRQHandler+0x70>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <DMA1_Stream3_IRQHandler+0x68>
 800a2e8:	4b04      	ldr	r3, [pc, #16]	@ (800a2fc <DMA1_Stream3_IRQHandler+0x70>)
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	4b02      	ldr	r3, [pc, #8]	@ (800a2fc <DMA1_Stream3_IRQHandler+0x70>)
 800a2f2:	701a      	strb	r2, [r3, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20005e52 	.word	0x20005e52
 800a2fc:	20005e51 	.word	0x20005e51
 800a300:	20000310 	.word	0x20000310

0800a304 <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a308:	4b19      	ldr	r3, [pc, #100]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d105      	bne.n	800a31c <DMA1_Stream4_IRQHandler+0x18>
 800a310:	4b18      	ldr	r3, [pc, #96]	@ (800a374 <DMA1_Stream4_IRQHandler+0x70>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	b2da      	uxtb	r2, r3
 800a318:	4b16      	ldr	r3, [pc, #88]	@ (800a374 <DMA1_Stream4_IRQHandler+0x70>)
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	4b14      	ldr	r3, [pc, #80]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	3301      	adds	r3, #1
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4b12      	ldr	r3, [pc, #72]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a326:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 800a328:	4b13      	ldr	r3, [pc, #76]	@ (800a378 <DMA1_Stream4_IRQHandler+0x74>)
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 800a330:	4b11      	ldr	r3, [pc, #68]	@ (800a378 <DMA1_Stream4_IRQHandler+0x74>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	3304      	adds	r3, #4
 800a336:	4618      	mov	r0, r3
 800a338:	f7f7 ff4a 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a33c:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <DMA1_Stream4_IRQHandler+0x4c>
 800a344:	4b0a      	ldr	r3, [pc, #40]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	3b01      	subs	r3, #1
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	4b08      	ldr	r3, [pc, #32]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a34e:	701a      	strb	r2, [r3, #0]
 800a350:	4b07      	ldr	r3, [pc, #28]	@ (800a370 <DMA1_Stream4_IRQHandler+0x6c>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d109      	bne.n	800a36c <DMA1_Stream4_IRQHandler+0x68>
 800a358:	4b06      	ldr	r3, [pc, #24]	@ (800a374 <DMA1_Stream4_IRQHandler+0x70>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <DMA1_Stream4_IRQHandler+0x68>
 800a360:	4b04      	ldr	r3, [pc, #16]	@ (800a374 <DMA1_Stream4_IRQHandler+0x70>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	3b01      	subs	r3, #1
 800a366:	b2da      	uxtb	r2, r3
 800a368:	4b02      	ldr	r3, [pc, #8]	@ (800a374 <DMA1_Stream4_IRQHandler+0x70>)
 800a36a:	701a      	strb	r2, [r3, #0]
}
 800a36c:	bf00      	nop
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20005e52 	.word	0x20005e52
 800a374:	20005e51 	.word	0x20005e51
 800a378:	20000310 	.word	0x20000310

0800a37c <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 800a382:	2300      	movs	r3, #0
 800a384:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a386:	4b28      	ldr	r3, [pc, #160]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <DMA1_Stream5_IRQHandler+0x1e>
 800a38e:	4b27      	ldr	r3, [pc, #156]	@ (800a42c <DMA1_Stream5_IRQHandler+0xb0>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	3301      	adds	r3, #1
 800a394:	b2da      	uxtb	r2, r3
 800a396:	4b25      	ldr	r3, [pc, #148]	@ (800a42c <DMA1_Stream5_IRQHandler+0xb0>)
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	4b23      	ldr	r3, [pc, #140]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	4b21      	ldr	r3, [pc, #132]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a3a4:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	71fb      	strb	r3, [r7, #7]
 800a3aa:	e017      	b.n	800a3dc <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 800a3ac:	79fa      	ldrb	r2, [r7, #7]
 800a3ae:	4920      	ldr	r1, [pc, #128]	@ (800a430 <DMA1_Stream5_IRQHandler+0xb4>)
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	4413      	add	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	440b      	add	r3, r1
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b05      	cmp	r3, #5
 800a3be:	d10a      	bne.n	800a3d6 <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 800a3c0:	79fa      	ldrb	r2, [r7, #7]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	011b      	lsls	r3, r3, #4
 800a3c6:	4413      	add	r3, r2
 800a3c8:	00db      	lsls	r3, r3, #3
 800a3ca:	4a19      	ldr	r2, [pc, #100]	@ (800a430 <DMA1_Stream5_IRQHandler+0xb4>)
 800a3cc:	4413      	add	r3, r2
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7f7 fefd 	bl	80021d0 <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800a3d6:	79fb      	ldrb	r3, [r7, #7]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	71fb      	strb	r3, [r7, #7]
 800a3dc:	79fa      	ldrb	r2, [r7, #7]
 800a3de:	4b15      	ldr	r3, [pc, #84]	@ (800a434 <DMA1_Stream5_IRQHandler+0xb8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4915      	ldr	r1, [pc, #84]	@ (800a438 <DMA1_Stream5_IRQHandler+0xbc>)
 800a3e4:	fba1 1303 	umull	r1, r3, r1, r3
 800a3e8:	09db      	lsrs	r3, r3, #7
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d3de      	bcc.n	800a3ac <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 800a3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <DMA1_Stream5_IRQHandler+0x86>
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	4b09      	ldr	r3, [pc, #36]	@ (800a428 <DMA1_Stream5_IRQHandler+0xac>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d109      	bne.n	800a41e <DMA1_Stream5_IRQHandler+0xa2>
 800a40a:	4b08      	ldr	r3, [pc, #32]	@ (800a42c <DMA1_Stream5_IRQHandler+0xb0>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d005      	beq.n	800a41e <DMA1_Stream5_IRQHandler+0xa2>
 800a412:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <DMA1_Stream5_IRQHandler+0xb0>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	3b01      	subs	r3, #1
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	4b04      	ldr	r3, [pc, #16]	@ (800a42c <DMA1_Stream5_IRQHandler+0xb0>)
 800a41c:	701a      	strb	r2, [r3, #0]
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20005e52 	.word	0x20005e52
 800a42c:	20005e51 	.word	0x20005e51
 800a430:	20000174 	.word	0x20000174
 800a434:	2000030c 	.word	0x2000030c
 800a438:	f0f0f0f1 	.word	0xf0f0f0f1

0800a43c <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a440:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d105      	bne.n	800a454 <DMA1_Stream6_IRQHandler+0x18>
 800a448:	4b18      	ldr	r3, [pc, #96]	@ (800a4ac <DMA1_Stream6_IRQHandler+0x70>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	3301      	adds	r3, #1
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	4b16      	ldr	r3, [pc, #88]	@ (800a4ac <DMA1_Stream6_IRQHandler+0x70>)
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	4b14      	ldr	r3, [pc, #80]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a45e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 800a460:	4b13      	ldr	r3, [pc, #76]	@ (800a4b0 <DMA1_Stream6_IRQHandler+0x74>)
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 800a468:	4b11      	ldr	r3, [pc, #68]	@ (800a4b0 <DMA1_Stream6_IRQHandler+0x74>)
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4618      	mov	r0, r3
 800a470:	f7f7 feae 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a474:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <DMA1_Stream6_IRQHandler+0x4c>
 800a47c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	3b01      	subs	r3, #1
 800a482:	b2da      	uxtb	r2, r3
 800a484:	4b08      	ldr	r3, [pc, #32]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	4b07      	ldr	r3, [pc, #28]	@ (800a4a8 <DMA1_Stream6_IRQHandler+0x6c>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <DMA1_Stream6_IRQHandler+0x68>
 800a490:	4b06      	ldr	r3, [pc, #24]	@ (800a4ac <DMA1_Stream6_IRQHandler+0x70>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d005      	beq.n	800a4a4 <DMA1_Stream6_IRQHandler+0x68>
 800a498:	4b04      	ldr	r3, [pc, #16]	@ (800a4ac <DMA1_Stream6_IRQHandler+0x70>)
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	4b02      	ldr	r3, [pc, #8]	@ (800a4ac <DMA1_Stream6_IRQHandler+0x70>)
 800a4a2:	701a      	strb	r2, [r3, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20005e52 	.word	0x20005e52
 800a4ac:	20005e51 	.word	0x20005e51
 800a4b0:	20000310 	.word	0x20000310

0800a4b4 <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a4b8:	4b19      	ldr	r3, [pc, #100]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d105      	bne.n	800a4cc <DMA1_Stream7_IRQHandler+0x18>
 800a4c0:	4b18      	ldr	r3, [pc, #96]	@ (800a524 <DMA1_Stream7_IRQHandler+0x70>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	4b16      	ldr	r3, [pc, #88]	@ (800a524 <DMA1_Stream7_IRQHandler+0x70>)
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	4b14      	ldr	r3, [pc, #80]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	4b12      	ldr	r3, [pc, #72]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4d6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 800a4d8:	4b13      	ldr	r3, [pc, #76]	@ (800a528 <DMA1_Stream7_IRQHandler+0x74>)
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 800a4e0:	4b11      	ldr	r3, [pc, #68]	@ (800a528 <DMA1_Stream7_IRQHandler+0x74>)
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7f7 fe72 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <DMA1_Stream7_IRQHandler+0x4c>
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	4b08      	ldr	r3, [pc, #32]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	4b07      	ldr	r3, [pc, #28]	@ (800a520 <DMA1_Stream7_IRQHandler+0x6c>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <DMA1_Stream7_IRQHandler+0x68>
 800a508:	4b06      	ldr	r3, [pc, #24]	@ (800a524 <DMA1_Stream7_IRQHandler+0x70>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d005      	beq.n	800a51c <DMA1_Stream7_IRQHandler+0x68>
 800a510:	4b04      	ldr	r3, [pc, #16]	@ (800a524 <DMA1_Stream7_IRQHandler+0x70>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	3b01      	subs	r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	4b02      	ldr	r3, [pc, #8]	@ (800a524 <DMA1_Stream7_IRQHandler+0x70>)
 800a51a:	701a      	strb	r2, [r3, #0]
}
 800a51c:	bf00      	nop
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20005e52 	.word	0x20005e52
 800a524:	20005e51 	.word	0x20005e51
 800a528:	20000310 	.word	0x20000310

0800a52c <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a530:	4b19      	ldr	r3, [pc, #100]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d105      	bne.n	800a544 <DMA2_Stream0_IRQHandler+0x18>
 800a538:	4b18      	ldr	r3, [pc, #96]	@ (800a59c <DMA2_Stream0_IRQHandler+0x70>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	3301      	adds	r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	4b16      	ldr	r3, [pc, #88]	@ (800a59c <DMA2_Stream0_IRQHandler+0x70>)
 800a542:	701a      	strb	r2, [r3, #0]
 800a544:	4b14      	ldr	r3, [pc, #80]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	4b12      	ldr	r3, [pc, #72]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a54e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 800a550:	4b13      	ldr	r3, [pc, #76]	@ (800a5a0 <DMA2_Stream0_IRQHandler+0x74>)
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d005      	beq.n	800a564 <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 800a558:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <DMA2_Stream0_IRQHandler+0x74>)
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4618      	mov	r0, r3
 800a560:	f7f7 fe36 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <DMA2_Stream0_IRQHandler+0x4c>
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	3b01      	subs	r3, #1
 800a572:	b2da      	uxtb	r2, r3
 800a574:	4b08      	ldr	r3, [pc, #32]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a576:	701a      	strb	r2, [r3, #0]
 800a578:	4b07      	ldr	r3, [pc, #28]	@ (800a598 <DMA2_Stream0_IRQHandler+0x6c>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d109      	bne.n	800a594 <DMA2_Stream0_IRQHandler+0x68>
 800a580:	4b06      	ldr	r3, [pc, #24]	@ (800a59c <DMA2_Stream0_IRQHandler+0x70>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d005      	beq.n	800a594 <DMA2_Stream0_IRQHandler+0x68>
 800a588:	4b04      	ldr	r3, [pc, #16]	@ (800a59c <DMA2_Stream0_IRQHandler+0x70>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	4b02      	ldr	r3, [pc, #8]	@ (800a59c <DMA2_Stream0_IRQHandler+0x70>)
 800a592:	701a      	strb	r2, [r3, #0]
}
 800a594:	bf00      	nop
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20005e52 	.word	0x20005e52
 800a59c:	20005e51 	.word	0x20005e51
 800a5a0:	20000310 	.word	0x20000310

0800a5a4 <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a5a8:	4b19      	ldr	r3, [pc, #100]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d105      	bne.n	800a5bc <DMA2_Stream1_IRQHandler+0x18>
 800a5b0:	4b18      	ldr	r3, [pc, #96]	@ (800a614 <DMA2_Stream1_IRQHandler+0x70>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	4b16      	ldr	r3, [pc, #88]	@ (800a614 <DMA2_Stream1_IRQHandler+0x70>)
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	4b14      	ldr	r3, [pc, #80]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	4b12      	ldr	r3, [pc, #72]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5c6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 800a5c8:	4b13      	ldr	r3, [pc, #76]	@ (800a618 <DMA2_Stream1_IRQHandler+0x74>)
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 800a5d0:	4b11      	ldr	r3, [pc, #68]	@ (800a618 <DMA2_Stream1_IRQHandler+0x74>)
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7f7 fdfa 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d005      	beq.n	800a5f0 <DMA2_Stream1_IRQHandler+0x4c>
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4b08      	ldr	r3, [pc, #32]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5ee:	701a      	strb	r2, [r3, #0]
 800a5f0:	4b07      	ldr	r3, [pc, #28]	@ (800a610 <DMA2_Stream1_IRQHandler+0x6c>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d109      	bne.n	800a60c <DMA2_Stream1_IRQHandler+0x68>
 800a5f8:	4b06      	ldr	r3, [pc, #24]	@ (800a614 <DMA2_Stream1_IRQHandler+0x70>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <DMA2_Stream1_IRQHandler+0x68>
 800a600:	4b04      	ldr	r3, [pc, #16]	@ (800a614 <DMA2_Stream1_IRQHandler+0x70>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	3b01      	subs	r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	4b02      	ldr	r3, [pc, #8]	@ (800a614 <DMA2_Stream1_IRQHandler+0x70>)
 800a60a:	701a      	strb	r2, [r3, #0]
}
 800a60c:	bf00      	nop
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20005e52 	.word	0x20005e52
 800a614:	20005e51 	.word	0x20005e51
 800a618:	20000310 	.word	0x20000310

0800a61c <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a620:	4b19      	ldr	r3, [pc, #100]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d105      	bne.n	800a634 <DMA2_Stream2_IRQHandler+0x18>
 800a628:	4b18      	ldr	r3, [pc, #96]	@ (800a68c <DMA2_Stream2_IRQHandler+0x70>)
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	3301      	adds	r3, #1
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	4b16      	ldr	r3, [pc, #88]	@ (800a68c <DMA2_Stream2_IRQHandler+0x70>)
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	4b14      	ldr	r3, [pc, #80]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	4b12      	ldr	r3, [pc, #72]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a63e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 800a640:	4b13      	ldr	r3, [pc, #76]	@ (800a690 <DMA2_Stream2_IRQHandler+0x74>)
 800a642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a644:	2b00      	cmp	r3, #0
 800a646:	d005      	beq.n	800a654 <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 800a648:	4b11      	ldr	r3, [pc, #68]	@ (800a690 <DMA2_Stream2_IRQHandler+0x74>)
 800a64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64c:	3304      	adds	r3, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f7 fdbe 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a654:	4b0c      	ldr	r3, [pc, #48]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d005      	beq.n	800a668 <DMA2_Stream2_IRQHandler+0x4c>
 800a65c:	4b0a      	ldr	r3, [pc, #40]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	3b01      	subs	r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	4b08      	ldr	r3, [pc, #32]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a666:	701a      	strb	r2, [r3, #0]
 800a668:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <DMA2_Stream2_IRQHandler+0x6c>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d109      	bne.n	800a684 <DMA2_Stream2_IRQHandler+0x68>
 800a670:	4b06      	ldr	r3, [pc, #24]	@ (800a68c <DMA2_Stream2_IRQHandler+0x70>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d005      	beq.n	800a684 <DMA2_Stream2_IRQHandler+0x68>
 800a678:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <DMA2_Stream2_IRQHandler+0x70>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	4b02      	ldr	r3, [pc, #8]	@ (800a68c <DMA2_Stream2_IRQHandler+0x70>)
 800a682:	701a      	strb	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20005e52 	.word	0x20005e52
 800a68c:	20005e51 	.word	0x20005e51
 800a690:	20000310 	.word	0x20000310

0800a694 <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a698:	4b19      	ldr	r3, [pc, #100]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d105      	bne.n	800a6ac <DMA2_Stream3_IRQHandler+0x18>
 800a6a0:	4b18      	ldr	r3, [pc, #96]	@ (800a704 <DMA2_Stream3_IRQHandler+0x70>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	4b16      	ldr	r3, [pc, #88]	@ (800a704 <DMA2_Stream3_IRQHandler+0x70>)
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	4b14      	ldr	r3, [pc, #80]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	4b12      	ldr	r3, [pc, #72]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6b6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 800a6b8:	4b13      	ldr	r3, [pc, #76]	@ (800a708 <DMA2_Stream3_IRQHandler+0x74>)
 800a6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 800a6c0:	4b11      	ldr	r3, [pc, #68]	@ (800a708 <DMA2_Stream3_IRQHandler+0x74>)
 800a6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7f7 fd82 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <DMA2_Stream3_IRQHandler+0x4c>
 800a6d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	4b08      	ldr	r3, [pc, #32]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6de:	701a      	strb	r2, [r3, #0]
 800a6e0:	4b07      	ldr	r3, [pc, #28]	@ (800a700 <DMA2_Stream3_IRQHandler+0x6c>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d109      	bne.n	800a6fc <DMA2_Stream3_IRQHandler+0x68>
 800a6e8:	4b06      	ldr	r3, [pc, #24]	@ (800a704 <DMA2_Stream3_IRQHandler+0x70>)
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <DMA2_Stream3_IRQHandler+0x68>
 800a6f0:	4b04      	ldr	r3, [pc, #16]	@ (800a704 <DMA2_Stream3_IRQHandler+0x70>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	4b02      	ldr	r3, [pc, #8]	@ (800a704 <DMA2_Stream3_IRQHandler+0x70>)
 800a6fa:	701a      	strb	r2, [r3, #0]
}
 800a6fc:	bf00      	nop
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20005e52 	.word	0x20005e52
 800a704:	20005e51 	.word	0x20005e51
 800a708:	20000310 	.word	0x20000310

0800a70c <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a710:	4b19      	ldr	r3, [pc, #100]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d105      	bne.n	800a724 <DMA2_Stream4_IRQHandler+0x18>
 800a718:	4b18      	ldr	r3, [pc, #96]	@ (800a77c <DMA2_Stream4_IRQHandler+0x70>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	4b16      	ldr	r3, [pc, #88]	@ (800a77c <DMA2_Stream4_IRQHandler+0x70>)
 800a722:	701a      	strb	r2, [r3, #0]
 800a724:	4b14      	ldr	r3, [pc, #80]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	3301      	adds	r3, #1
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a72e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 800a730:	4b13      	ldr	r3, [pc, #76]	@ (800a780 <DMA2_Stream4_IRQHandler+0x74>)
 800a732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 800a738:	4b11      	ldr	r3, [pc, #68]	@ (800a780 <DMA2_Stream4_IRQHandler+0x74>)
 800a73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a73c:	3304      	adds	r3, #4
 800a73e:	4618      	mov	r0, r3
 800a740:	f7f7 fd46 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a744:	4b0c      	ldr	r3, [pc, #48]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <DMA2_Stream4_IRQHandler+0x4c>
 800a74c:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	3b01      	subs	r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	4b08      	ldr	r3, [pc, #32]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	4b07      	ldr	r3, [pc, #28]	@ (800a778 <DMA2_Stream4_IRQHandler+0x6c>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d109      	bne.n	800a774 <DMA2_Stream4_IRQHandler+0x68>
 800a760:	4b06      	ldr	r3, [pc, #24]	@ (800a77c <DMA2_Stream4_IRQHandler+0x70>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <DMA2_Stream4_IRQHandler+0x68>
 800a768:	4b04      	ldr	r3, [pc, #16]	@ (800a77c <DMA2_Stream4_IRQHandler+0x70>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	4b02      	ldr	r3, [pc, #8]	@ (800a77c <DMA2_Stream4_IRQHandler+0x70>)
 800a772:	701a      	strb	r2, [r3, #0]
}
 800a774:	bf00      	nop
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20005e52 	.word	0x20005e52
 800a77c:	20005e51 	.word	0x20005e51
 800a780:	20000310 	.word	0x20000310

0800a784 <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a788:	4b19      	ldr	r3, [pc, #100]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <DMA2_Stream5_IRQHandler+0x18>
 800a790:	4b18      	ldr	r3, [pc, #96]	@ (800a7f4 <DMA2_Stream5_IRQHandler+0x70>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	3301      	adds	r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	4b16      	ldr	r3, [pc, #88]	@ (800a7f4 <DMA2_Stream5_IRQHandler+0x70>)
 800a79a:	701a      	strb	r2, [r3, #0]
 800a79c:	4b14      	ldr	r3, [pc, #80]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	4b12      	ldr	r3, [pc, #72]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7a6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 800a7a8:	4b13      	ldr	r3, [pc, #76]	@ (800a7f8 <DMA2_Stream5_IRQHandler+0x74>)
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 800a7b0:	4b11      	ldr	r3, [pc, #68]	@ (800a7f8 <DMA2_Stream5_IRQHandler+0x74>)
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7f7 fd0a 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <DMA2_Stream5_IRQHandler+0x4c>
 800a7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	4b08      	ldr	r3, [pc, #32]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7ce:	701a      	strb	r2, [r3, #0]
 800a7d0:	4b07      	ldr	r3, [pc, #28]	@ (800a7f0 <DMA2_Stream5_IRQHandler+0x6c>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d109      	bne.n	800a7ec <DMA2_Stream5_IRQHandler+0x68>
 800a7d8:	4b06      	ldr	r3, [pc, #24]	@ (800a7f4 <DMA2_Stream5_IRQHandler+0x70>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <DMA2_Stream5_IRQHandler+0x68>
 800a7e0:	4b04      	ldr	r3, [pc, #16]	@ (800a7f4 <DMA2_Stream5_IRQHandler+0x70>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	4b02      	ldr	r3, [pc, #8]	@ (800a7f4 <DMA2_Stream5_IRQHandler+0x70>)
 800a7ea:	701a      	strb	r2, [r3, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20005e52 	.word	0x20005e52
 800a7f4:	20005e51 	.word	0x20005e51
 800a7f8:	20000310 	.word	0x20000310

0800a7fc <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a800:	4b19      	ldr	r3, [pc, #100]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d105      	bne.n	800a814 <DMA2_Stream6_IRQHandler+0x18>
 800a808:	4b18      	ldr	r3, [pc, #96]	@ (800a86c <DMA2_Stream6_IRQHandler+0x70>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	3301      	adds	r3, #1
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	4b16      	ldr	r3, [pc, #88]	@ (800a86c <DMA2_Stream6_IRQHandler+0x70>)
 800a812:	701a      	strb	r2, [r3, #0]
 800a814:	4b14      	ldr	r3, [pc, #80]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	4b12      	ldr	r3, [pc, #72]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a81e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 800a820:	4b13      	ldr	r3, [pc, #76]	@ (800a870 <DMA2_Stream6_IRQHandler+0x74>)
 800a822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 800a828:	4b11      	ldr	r3, [pc, #68]	@ (800a870 <DMA2_Stream6_IRQHandler+0x74>)
 800a82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82c:	3304      	adds	r3, #4
 800a82e:	4618      	mov	r0, r3
 800a830:	f7f7 fcce 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a834:	4b0c      	ldr	r3, [pc, #48]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <DMA2_Stream6_IRQHandler+0x4c>
 800a83c:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	3b01      	subs	r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	4b08      	ldr	r3, [pc, #32]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	4b07      	ldr	r3, [pc, #28]	@ (800a868 <DMA2_Stream6_IRQHandler+0x6c>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <DMA2_Stream6_IRQHandler+0x68>
 800a850:	4b06      	ldr	r3, [pc, #24]	@ (800a86c <DMA2_Stream6_IRQHandler+0x70>)
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <DMA2_Stream6_IRQHandler+0x68>
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <DMA2_Stream6_IRQHandler+0x70>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	4b02      	ldr	r3, [pc, #8]	@ (800a86c <DMA2_Stream6_IRQHandler+0x70>)
 800a862:	701a      	strb	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20005e52 	.word	0x20005e52
 800a86c:	20005e51 	.word	0x20005e51
 800a870:	20000310 	.word	0x20000310

0800a874 <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a878:	4b19      	ldr	r3, [pc, #100]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d105      	bne.n	800a88c <DMA2_Stream7_IRQHandler+0x18>
 800a880:	4b18      	ldr	r3, [pc, #96]	@ (800a8e4 <DMA2_Stream7_IRQHandler+0x70>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	4b16      	ldr	r3, [pc, #88]	@ (800a8e4 <DMA2_Stream7_IRQHandler+0x70>)
 800a88a:	701a      	strb	r2, [r3, #0]
 800a88c:	4b14      	ldr	r3, [pc, #80]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	4b12      	ldr	r3, [pc, #72]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a896:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 800a898:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <DMA2_Stream7_IRQHandler+0x74>)
 800a89a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d005      	beq.n	800a8ac <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 800a8a0:	4b11      	ldr	r3, [pc, #68]	@ (800a8e8 <DMA2_Stream7_IRQHandler+0x74>)
 800a8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f7 fc92 	bl	80021d0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <DMA2_Stream7_IRQHandler+0x4c>
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	4b08      	ldr	r3, [pc, #32]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a8be:	701a      	strb	r2, [r3, #0]
 800a8c0:	4b07      	ldr	r3, [pc, #28]	@ (800a8e0 <DMA2_Stream7_IRQHandler+0x6c>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d109      	bne.n	800a8dc <DMA2_Stream7_IRQHandler+0x68>
 800a8c8:	4b06      	ldr	r3, [pc, #24]	@ (800a8e4 <DMA2_Stream7_IRQHandler+0x70>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <DMA2_Stream7_IRQHandler+0x68>
 800a8d0:	4b04      	ldr	r3, [pc, #16]	@ (800a8e4 <DMA2_Stream7_IRQHandler+0x70>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	4b02      	ldr	r3, [pc, #8]	@ (800a8e4 <DMA2_Stream7_IRQHandler+0x70>)
 800a8da:	701a      	strb	r2, [r3, #0]
}
 800a8dc:	bf00      	nop
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20005e52 	.word	0x20005e52
 800a8e4:	20005e51 	.word	0x20005e51
 800a8e8:	20000310 	.word	0x20000310

0800a8ec <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 800a8f6:	23ae      	movs	r3, #174	@ 0xae
 800a8f8:	77fb      	strb	r3, [r7, #31]
    u32_t                  startSector      = 0u;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61bb      	str	r3, [r7, #24]
    u32_t                  endSector        = 0u;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]
    u32_t                  endSectorAddress = 0u;
 800a902:	2300      	movs	r3, #0
 800a904:	613b      	str	r3, [r7, #16]
    u32_t                  sectorError      = 0u;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 800a90a:	f7f7 ff39 	bl	8002780 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f888 	bl	800aa24 <drv_flashGetSector>
 800a914:	61b8      	str	r0, [r7, #24]
    endSectorAddress = address + requiredSize - 1;
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	4413      	add	r3, r2
 800a91c:	3b01      	subs	r3, #1
 800a91e:	613b      	str	r3, [r7, #16]
    endSector = drv_flashGetSector(endSectorAddress);
 800a920:	6938      	ldr	r0, [r7, #16]
 800a922:	f000 f87f 	bl	800aa24 <drv_flashGetSector>
 800a926:	6178      	str	r0, [r7, #20]

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800a928:	4b10      	ldr	r3, [pc, #64]	@ (800a96c <drv_flashErase+0x80>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800a92e:	4b0f      	ldr	r3, [pc, #60]	@ (800a96c <drv_flashErase+0x80>)
 800a930:	2202      	movs	r2, #2
 800a932:	611a      	str	r2, [r3, #16]
    eraseInitStruct.Sector        = startSector;
 800a934:	4a0d      	ldr	r2, [pc, #52]	@ (800a96c <drv_flashErase+0x80>)
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	6093      	str	r3, [r2, #8]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	3301      	adds	r3, #1
 800a942:	4a0a      	ldr	r2, [pc, #40]	@ (800a96c <drv_flashErase+0x80>)
 800a944:	60d3      	str	r3, [r2, #12]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 800a946:	f107 030c 	add.w	r3, r7, #12
 800a94a:	4619      	mov	r1, r3
 800a94c:	4807      	ldr	r0, [pc, #28]	@ (800a96c <drv_flashErase+0x80>)
 800a94e:	f7f8 f889 	bl	8002a64 <HAL_FLASHEx_Erase>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <drv_flashErase+0x70>
    {
        flashEraseResult = GOS_SUCCESS;
 800a958:	2355      	movs	r3, #85	@ 0x55
 800a95a:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 800a95c:	f7f7 ff32 	bl	80027c4 <HAL_FLASH_Lock>

    return flashEraseResult;
 800a960:	7ffb      	ldrb	r3, [r7, #31]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3720      	adds	r7, #32
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20001f80 	.word	0x20001f80

0800a970 <drv_flashWriteWithoutLock>:

/*
 * Function: drv_flashWriteWithoutLock
 */
gos_result_t drv_flashWriteWithoutLock (u32_t address, void_t* pData, u32_t size)
{
 800a970:	b5b0      	push	{r4, r5, r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 800a97c:	23ae      	movs	r3, #174	@ 0xae
 800a97e:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 800a980:	2300      	movs	r3, #0
 800a982:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 800a988:	2355      	movs	r3, #85	@ 0x55
 800a98a:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800a98c:	2300      	movs	r3, #0
 800a98e:	61bb      	str	r3, [r7, #24]
 800a990:	e01c      	b.n	800a9cc <drv_flashWriteWithoutLock+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	617a      	str	r2, [r7, #20]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	461c      	mov	r4, r3
 800a9aa:	4615      	mov	r5, r2
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	2002      	movs	r0, #2
 800a9b2:	f7f7 fe91 	bl	80026d8 <HAL_FLASH_Program>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <drv_flashWriteWithoutLock+0x50>
        {
            // Programming OK, continue.
            GOS_NOP;
 800a9bc:	bf00      	nop
 800a9be:	e002      	b.n	800a9c6 <drv_flashWriteWithoutLock+0x56>
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 800a9c0:	23ae      	movs	r3, #174	@ 0xae
 800a9c2:	77fb      	strb	r3, [r7, #31]
            break;
 800a9c4:	e006      	b.n	800a9d4 <drv_flashWriteWithoutLock+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	61bb      	str	r3, [r7, #24]
 800a9cc:	69ba      	ldr	r2, [r7, #24]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d3de      	bcc.n	800a992 <drv_flashWriteWithoutLock+0x22>
        }
    }

    return flashWriteResult;
 800a9d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bdb0      	pop	{r4, r5, r7, pc}

0800a9de <drv_flashUnlock>:

/*
 * Function: drv_flashUnlock
 */
gos_result_t drv_flashUnlock (void_t)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 800a9e4:	23ae      	movs	r3, #174	@ 0xae
 800a9e6:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800a9e8:	f7f7 feca 	bl	8002780 <HAL_FLASH_Unlock>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <drv_flashUnlock+0x18>
    {
        unlockResult = GOS_SUCCESS;
 800a9f2:	2355      	movs	r3, #85	@ 0x55
 800a9f4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return unlockResult;
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <drv_flashLock>:

/*
 * Function: drv_flashLock
 */
gos_result_t drv_flashLock (void_t)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t lockResult = GOS_ERROR;
 800aa06:	23ae      	movs	r3, #174	@ 0xae
 800aa08:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Lock() == HAL_OK)
 800aa0a:	f7f7 fedb 	bl	80027c4 <HAL_FLASH_Lock>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <drv_flashLock+0x18>
    {
        lockResult = GOS_SUCCESS;
 800aa14:	2355      	movs	r3, #85	@ 0x55
 800aa16:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return lockResult;
 800aa18:	79fb      	ldrb	r3, [r7, #7]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
	...

0800aa24 <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a2e      	ldr	r2, [pc, #184]	@ (800aaec <drv_flashGetSector+0xc8>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d206      	bcs.n	800aa46 <drv_flashGetSector+0x22>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa3e:	d302      	bcc.n	800aa46 <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	e04b      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a29      	ldr	r2, [pc, #164]	@ (800aaf0 <drv_flashGetSector+0xcc>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d206      	bcs.n	800aa5c <drv_flashGetSector+0x38>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a26      	ldr	r2, [pc, #152]	@ (800aaec <drv_flashGetSector+0xc8>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d302      	bcc.n	800aa5c <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800aa56:	2301      	movs	r3, #1
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	e040      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a25      	ldr	r2, [pc, #148]	@ (800aaf4 <drv_flashGetSector+0xd0>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d206      	bcs.n	800aa72 <drv_flashGetSector+0x4e>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a22      	ldr	r2, [pc, #136]	@ (800aaf0 <drv_flashGetSector+0xcc>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d302      	bcc.n	800aa72 <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	e035      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a20      	ldr	r2, [pc, #128]	@ (800aaf8 <drv_flashGetSector+0xd4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d806      	bhi.n	800aa88 <drv_flashGetSector+0x64>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a1d      	ldr	r2, [pc, #116]	@ (800aaf4 <drv_flashGetSector+0xd0>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d302      	bcc.n	800aa88 <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 800aa82:	2303      	movs	r3, #3
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	e02a      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a1c      	ldr	r2, [pc, #112]	@ (800aafc <drv_flashGetSector+0xd8>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d806      	bhi.n	800aa9e <drv_flashGetSector+0x7a>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a19      	ldr	r2, [pc, #100]	@ (800aaf8 <drv_flashGetSector+0xd4>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d902      	bls.n	800aa9e <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 800aa98:	2304      	movs	r3, #4
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e01f      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a17      	ldr	r2, [pc, #92]	@ (800ab00 <drv_flashGetSector+0xdc>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d806      	bhi.n	800aab4 <drv_flashGetSector+0x90>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a14      	ldr	r2, [pc, #80]	@ (800aafc <drv_flashGetSector+0xd8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d902      	bls.n	800aab4 <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 800aaae:	2305      	movs	r3, #5
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e014      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a13      	ldr	r2, [pc, #76]	@ (800ab04 <drv_flashGetSector+0xe0>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d806      	bhi.n	800aaca <drv_flashGetSector+0xa6>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a10      	ldr	r2, [pc, #64]	@ (800ab00 <drv_flashGetSector+0xdc>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d902      	bls.n	800aaca <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 800aac4:	2306      	movs	r3, #6
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	e009      	b.n	800aade <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a0e      	ldr	r2, [pc, #56]	@ (800ab08 <drv_flashGetSector+0xe4>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d805      	bhi.n	800aade <drv_flashGetSector+0xba>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a0b      	ldr	r2, [pc, #44]	@ (800ab04 <drv_flashGetSector+0xe0>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d901      	bls.n	800aade <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 800aada:	2307      	movs	r3, #7
 800aadc:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 800aade:	68fb      	ldr	r3, [r7, #12]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3714      	adds	r7, #20
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	08004000 	.word	0x08004000
 800aaf0:	08008000 	.word	0x08008000
 800aaf4:	0800c000 	.word	0x0800c000
 800aaf8:	0800ffff 	.word	0x0800ffff
 800aafc:	0801ffff 	.word	0x0801ffff
 800ab00:	0803ffff 	.word	0x0803ffff
 800ab04:	0805ffff 	.word	0x0805ffff
 800ab08:	0807ffff 	.word	0x0807ffff

0800ab0c <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 800ab12:	2355      	movs	r3, #85	@ 0x55
 800ab14:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 800ab16:	2300      	movs	r3, #0
 800ab18:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	71bb      	strb	r3, [r7, #6]
 800ab1e:	e00e      	b.n	800ab3e <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	2b55      	cmp	r3, #85	@ 0x55
 800ab24:	d106      	bne.n	800ab34 <drv_gpioInit+0x28>
 800ab26:	79bb      	ldrb	r3, [r7, #6]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 f81b 	bl	800ab64 <drv_gpioInitPin>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	71fb      	strb	r3, [r7, #7]
 800ab32:	e001      	b.n	800ab38 <drv_gpioInit+0x2c>
 800ab34:	23ae      	movs	r3, #174	@ 0xae
 800ab36:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800ab38:	79bb      	ldrb	r3, [r7, #6]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	71bb      	strb	r3, [r7, #6]
 800ab3e:	79bb      	ldrb	r3, [r7, #6]
 800ab40:	4a06      	ldr	r2, [pc, #24]	@ (800ab5c <drv_gpioInit+0x50>)
 800ab42:	6812      	ldr	r2, [r2, #0]
 800ab44:	0892      	lsrs	r2, r2, #2
 800ab46:	4906      	ldr	r1, [pc, #24]	@ (800ab60 <drv_gpioInit+0x54>)
 800ab48:	fba1 1202 	umull	r1, r2, r1, r2
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d3e7      	bcc.n	800ab20 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 800ab50:	79fb      	ldrb	r3, [r7, #7]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20000354 	.word	0x20000354
 800ab60:	24924925 	.word	0x24924925

0800ab64 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 800ab64:	b590      	push	{r4, r7, lr}
 800ab66:	b089      	sub	sp, #36	@ 0x24
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 800ab6e:	23ae      	movs	r3, #174	@ 0xae
 800ab70:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	605a      	str	r2, [r3, #4]
 800ab7c:	609a      	str	r2, [r3, #8]
 800ab7e:	60da      	str	r2, [r3, #12]
 800ab80:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	4a40      	ldr	r2, [pc, #256]	@ (800ac88 <drv_gpioInitPin+0x124>)
 800ab86:	6812      	ldr	r2, [r2, #0]
 800ab88:	0892      	lsrs	r2, r2, #2
 800ab8a:	4940      	ldr	r1, [pc, #256]	@ (800ac8c <drv_gpioInitPin+0x128>)
 800ab8c:	fba1 1202 	umull	r1, r2, r1, r2
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d274      	bcs.n	800ac7e <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 800ab94:	79fa      	ldrb	r2, [r7, #7]
 800ab96:	493e      	ldr	r1, [pc, #248]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800ab98:	4613      	mov	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	440b      	add	r3, r1
 800aba2:	3304      	adds	r3, #4
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 800aba8:	79fa      	ldrb	r2, [r7, #7]
 800abaa:	4939      	ldr	r1, [pc, #228]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800abac:	4613      	mov	r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	1a9b      	subs	r3, r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	440b      	add	r3, r1
 800abb6:	3308      	adds	r3, #8
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 800abbc:	79fa      	ldrb	r2, [r7, #7]
 800abbe:	4934      	ldr	r1, [pc, #208]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800abc0:	4613      	mov	r3, r2
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	440b      	add	r3, r1
 800abca:	3310      	adds	r3, #16
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 800abd0:	79fa      	ldrb	r2, [r7, #7]
 800abd2:	492f      	ldr	r1, [pc, #188]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800abd4:	4613      	mov	r3, r2
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	1a9b      	subs	r3, r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	440b      	add	r3, r1
 800abde:	330c      	adds	r3, #12
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 800abe4:	79fa      	ldrb	r2, [r7, #7]
 800abe6:	492a      	ldr	r1, [pc, #168]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800abe8:	4613      	mov	r3, r2
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	1a9b      	subs	r3, r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	3314      	adds	r3, #20
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 800abf8:	79fa      	ldrb	r2, [r7, #7]
 800abfa:	4925      	ldr	r1, [pc, #148]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800abfc:	4613      	mov	r3, r2
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	1a9b      	subs	r3, r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	440b      	add	r3, r1
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f107 0208 	add.w	r2, r7, #8
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7f8 f84a 	bl	8002ca8 <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 800ac14:	79fa      	ldrb	r2, [r7, #7]
 800ac16:	491e      	ldr	r1, [pc, #120]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800ac18:	4613      	mov	r3, r2
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	3318      	adds	r3, #24
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d00a      	beq.n	800ac40 <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 800ac2a:	79fa      	ldrb	r2, [r7, #7]
 800ac2c:	4918      	ldr	r1, [pc, #96]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800ac2e:	4613      	mov	r3, r2
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	1a9b      	subs	r3, r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	3318      	adds	r3, #24
 800ac3a:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11c      	bne.n	800ac7a <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 800ac40:	79fa      	ldrb	r2, [r7, #7]
 800ac42:	4913      	ldr	r1, [pc, #76]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800ac44:	4613      	mov	r3, r2
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	1a9b      	subs	r3, r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	440b      	add	r3, r1
 800ac4e:	6818      	ldr	r0, [r3, #0]
 800ac50:	79fa      	ldrb	r2, [r7, #7]
 800ac52:	490f      	ldr	r1, [pc, #60]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800ac54:	4613      	mov	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	1a9b      	subs	r3, r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	3304      	adds	r3, #4
 800ac60:	8819      	ldrh	r1, [r3, #0]
 800ac62:	79fa      	ldrb	r2, [r7, #7]
 800ac64:	4c0a      	ldr	r4, [pc, #40]	@ (800ac90 <drv_gpioInitPin+0x12c>)
 800ac66:	4613      	mov	r3, r2
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4423      	add	r3, r4
 800ac70:	3318      	adds	r3, #24
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	f7f8 f9ab 	bl	8002fd0 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 800ac7a:	2355      	movs	r3, #85	@ 0x55
 800ac7c:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 800ac7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3724      	adds	r7, #36	@ 0x24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd90      	pop	{r4, r7, pc}
 800ac88:	20000354 	.word	0x20000354
 800ac8c:	24924925 	.word	0x24924925
 800ac90:	0801a760 	.word	0x0801a760

0800ac94 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	460a      	mov	r2, r1
 800ac9e:	71fb      	strb	r3, [r7, #7]
 800aca0:	4613      	mov	r3, r2
 800aca2:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 800aca4:	23ae      	movs	r3, #174	@ 0xae
 800aca6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 800aca8:	79fb      	ldrb	r3, [r7, #7]
 800acaa:	4a13      	ldr	r2, [pc, #76]	@ (800acf8 <drv_gpioWritePin+0x64>)
 800acac:	6812      	ldr	r2, [r2, #0]
 800acae:	0892      	lsrs	r2, r2, #2
 800acb0:	4912      	ldr	r1, [pc, #72]	@ (800acfc <drv_gpioWritePin+0x68>)
 800acb2:	fba1 1202 	umull	r1, r2, r1, r2
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d219      	bcs.n	800acee <drv_gpioWritePin+0x5a>
 800acba:	79bb      	ldrb	r3, [r7, #6]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d816      	bhi.n	800acee <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 800acc0:	79fa      	ldrb	r2, [r7, #7]
 800acc2:	490f      	ldr	r1, [pc, #60]	@ (800ad00 <drv_gpioWritePin+0x6c>)
 800acc4:	4613      	mov	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	6818      	ldr	r0, [r3, #0]
 800acd0:	79fa      	ldrb	r2, [r7, #7]
 800acd2:	490b      	ldr	r1, [pc, #44]	@ (800ad00 <drv_gpioWritePin+0x6c>)
 800acd4:	4613      	mov	r3, r2
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	3304      	adds	r3, #4
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	79ba      	ldrb	r2, [r7, #6]
 800ace4:	4619      	mov	r1, r3
 800ace6:	f7f8 f973 	bl	8002fd0 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 800acea:	2355      	movs	r3, #85	@ 0x55
 800acec:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 800acee:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20000354 	.word	0x20000354
 800acfc:	24924925 	.word	0x24924925
 800ad00:	0801a760 	.word	0x0801a760

0800ad04 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 800ad0e:	23ae      	movs	r3, #174	@ 0xae
 800ad10:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	4a11      	ldr	r2, [pc, #68]	@ (800ad5c <drv_gpioTgglePin+0x58>)
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	0892      	lsrs	r2, r2, #2
 800ad1a:	4911      	ldr	r1, [pc, #68]	@ (800ad60 <drv_gpioTgglePin+0x5c>)
 800ad1c:	fba1 1202 	umull	r1, r2, r1, r2
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d215      	bcs.n	800ad50 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 800ad24:	79fa      	ldrb	r2, [r7, #7]
 800ad26:	490f      	ldr	r1, [pc, #60]	@ (800ad64 <drv_gpioTgglePin+0x60>)
 800ad28:	4613      	mov	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	6818      	ldr	r0, [r3, #0]
 800ad34:	79fa      	ldrb	r2, [r7, #7]
 800ad36:	490b      	ldr	r1, [pc, #44]	@ (800ad64 <drv_gpioTgglePin+0x60>)
 800ad38:	4613      	mov	r3, r2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	440b      	add	r3, r1
 800ad42:	3304      	adds	r3, #4
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	4619      	mov	r1, r3
 800ad48:	f7f8 f95b 	bl	8003002 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 800ad4c:	2355      	movs	r3, #85	@ 0x55
 800ad4e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000354 	.word	0x20000354
 800ad60:	24924925 	.word	0x24924925
 800ad64:	0801a760 	.word	0x0801a760

0800ad68 <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800ad6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d105      	bne.n	800ad80 <EXTI9_5_IRQHandler+0x18>
 800ad74:	4b1c      	ldr	r3, [pc, #112]	@ (800ade8 <EXTI9_5_IRQHandler+0x80>)
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	b2da      	uxtb	r2, r3
 800ad7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ade8 <EXTI9_5_IRQHandler+0x80>)
 800ad7e:	701a      	strb	r2, [r3, #0]
 800ad80:	4b18      	ldr	r3, [pc, #96]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	4b16      	ldr	r3, [pc, #88]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800ad8a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800ad8c:	2020      	movs	r0, #32
 800ad8e:	f7f8 f953 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800ad92:	2040      	movs	r0, #64	@ 0x40
 800ad94:	f7f8 f950 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800ad98:	2080      	movs	r0, #128	@ 0x80
 800ad9a:	f7f8 f94d 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800ad9e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800ada2:	f7f8 f949 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800ada6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800adaa:	f7f8 f945 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 800adae:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d005      	beq.n	800adc2 <EXTI9_5_IRQHandler+0x5a>
 800adb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	3b01      	subs	r3, #1
 800adbc:	b2da      	uxtb	r2, r3
 800adbe:	4b09      	ldr	r3, [pc, #36]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	4b08      	ldr	r3, [pc, #32]	@ (800ade4 <EXTI9_5_IRQHandler+0x7c>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <EXTI9_5_IRQHandler+0x76>
 800adca:	4b07      	ldr	r3, [pc, #28]	@ (800ade8 <EXTI9_5_IRQHandler+0x80>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d005      	beq.n	800adde <EXTI9_5_IRQHandler+0x76>
 800add2:	4b05      	ldr	r3, [pc, #20]	@ (800ade8 <EXTI9_5_IRQHandler+0x80>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	3b01      	subs	r3, #1
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b03      	ldr	r3, [pc, #12]	@ (800ade8 <EXTI9_5_IRQHandler+0x80>)
 800addc:	701a      	strb	r2, [r3, #0]
}
 800adde:	bf00      	nop
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20005e52 	.word	0x20005e52
 800ade8:	20005e51 	.word	0x20005e51

0800adec <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800adf0:	4b20      	ldr	r3, [pc, #128]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d105      	bne.n	800ae04 <EXTI15_10_IRQHandler+0x18>
 800adf8:	4b1f      	ldr	r3, [pc, #124]	@ (800ae78 <EXTI15_10_IRQHandler+0x8c>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	3301      	adds	r3, #1
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	4b1d      	ldr	r3, [pc, #116]	@ (800ae78 <EXTI15_10_IRQHandler+0x8c>)
 800ae02:	701a      	strb	r2, [r3, #0]
 800ae04:	4b1b      	ldr	r3, [pc, #108]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	4b19      	ldr	r3, [pc, #100]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800ae0e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800ae10:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ae14:	f7f8 f910 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800ae18:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ae1c:	f7f8 f90c 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800ae20:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ae24:	f7f8 f908 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800ae28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800ae2c:	f7f8 f904 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800ae30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ae34:	f7f8 f900 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800ae38:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800ae3c:	f7f8 f8fc 	bl	8003038 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 800ae40:	4b0c      	ldr	r3, [pc, #48]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <EXTI15_10_IRQHandler+0x68>
 800ae48:	4b0a      	ldr	r3, [pc, #40]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	4b08      	ldr	r3, [pc, #32]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	4b07      	ldr	r3, [pc, #28]	@ (800ae74 <EXTI15_10_IRQHandler+0x88>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d109      	bne.n	800ae70 <EXTI15_10_IRQHandler+0x84>
 800ae5c:	4b06      	ldr	r3, [pc, #24]	@ (800ae78 <EXTI15_10_IRQHandler+0x8c>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d005      	beq.n	800ae70 <EXTI15_10_IRQHandler+0x84>
 800ae64:	4b04      	ldr	r3, [pc, #16]	@ (800ae78 <EXTI15_10_IRQHandler+0x8c>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	4b02      	ldr	r3, [pc, #8]	@ (800ae78 <EXTI15_10_IRQHandler+0x8c>)
 800ae6e:	701a      	strb	r2, [r3, #0]
}
 800ae70:	bf00      	nop
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20005e52 	.word	0x20005e52
 800ae78:	20005e51 	.word	0x20005e51

0800ae7c <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	4603      	mov	r3, r0
 800ae84:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 800ae86:	4b27      	ldr	r3, [pc, #156]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d105      	bne.n	800ae9a <HAL_GPIO_EXTI_Callback+0x1e>
 800ae8e:	4b26      	ldr	r3, [pc, #152]	@ (800af28 <HAL_GPIO_EXTI_Callback+0xac>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	3301      	adds	r3, #1
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	4b24      	ldr	r3, [pc, #144]	@ (800af28 <HAL_GPIO_EXTI_Callback+0xac>)
 800ae98:	701a      	strb	r2, [r3, #0]
 800ae9a:	4b22      	ldr	r3, [pc, #136]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	4b20      	ldr	r3, [pc, #128]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aea4:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 800aea6:	2300      	movs	r3, #0
 800aea8:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]
 800aeae:	e016      	b.n	800aede <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4a1e      	ldr	r2, [pc, #120]	@ (800af2c <HAL_GPIO_EXTI_Callback+0xb0>)
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	4413      	add	r3, r2
 800aeb8:	889b      	ldrh	r3, [r3, #4]
 800aeba:	88fa      	ldrh	r2, [r7, #6]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d10b      	bne.n	800aed8 <HAL_GPIO_EXTI_Callback+0x5c>
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	4a1a      	ldr	r2, [pc, #104]	@ (800af2c <HAL_GPIO_EXTI_Callback+0xb0>)
 800aec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d005      	beq.n	800aed8 <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	4a17      	ldr	r2, [pc, #92]	@ (800af2c <HAL_GPIO_EXTI_Callback+0xb0>)
 800aed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aed4:	4798      	blx	r3
                break;
 800aed6:	e008      	b.n	800aeea <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
 800aeda:	3301      	adds	r3, #1
 800aedc:	73fb      	strb	r3, [r7, #15]
 800aede:	7bfa      	ldrb	r2, [r7, #15]
 800aee0:	4b13      	ldr	r3, [pc, #76]	@ (800af30 <HAL_GPIO_EXTI_Callback+0xb4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	08db      	lsrs	r3, r3, #3
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d3e2      	bcc.n	800aeb0 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 800aeea:	4b0e      	ldr	r3, [pc, #56]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d005      	beq.n	800aefe <HAL_GPIO_EXTI_Callback+0x82>
 800aef2:	4b0c      	ldr	r3, [pc, #48]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	4b0a      	ldr	r3, [pc, #40]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800aefc:	701a      	strb	r2, [r3, #0]
 800aefe:	4b09      	ldr	r3, [pc, #36]	@ (800af24 <HAL_GPIO_EXTI_Callback+0xa8>)
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d109      	bne.n	800af1a <HAL_GPIO_EXTI_Callback+0x9e>
 800af06:	4b08      	ldr	r3, [pc, #32]	@ (800af28 <HAL_GPIO_EXTI_Callback+0xac>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <HAL_GPIO_EXTI_Callback+0x9e>
 800af0e:	4b06      	ldr	r3, [pc, #24]	@ (800af28 <HAL_GPIO_EXTI_Callback+0xac>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	3b01      	subs	r3, #1
 800af14:	b2da      	uxtb	r2, r3
 800af16:	4b04      	ldr	r3, [pc, #16]	@ (800af28 <HAL_GPIO_EXTI_Callback+0xac>)
 800af18:	701a      	strb	r2, [r3, #0]
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20005e52 	.word	0x20005e52
 800af28:	20005e51 	.word	0x20005e51
 800af2c:	0801a93c 	.word	0x0801a93c
 800af30:	200016a0 	.word	0x200016a0

0800af34 <drv_i2cInit>:

/*
 * Function: drv_i2cInit
 */
gos_result_t drv_i2cInit (void_t)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t i2cDriverInitResult = GOS_SUCCESS;
 800af3a:	2355      	movs	r3, #85	@ 0x55
 800af3c:	71fb      	strb	r3, [r7, #7]
    u8_t         i2cIdx              = 0u;
 800af3e:	2300      	movs	r3, #0
 800af40:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (i2cConfig != NULL)
    {
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 800af42:	2300      	movs	r3, #0
 800af44:	71bb      	strb	r3, [r7, #6]
 800af46:	e013      	b.n	800af70 <drv_i2cInit+0x3c>
        {
            GOS_CONCAT_RESULT(i2cDriverInitResult, drv_i2cInitInstance(&i2cConfig[i2cIdx]));
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	2b55      	cmp	r3, #85	@ 0x55
 800af4c:	d10b      	bne.n	800af66 <drv_i2cInit+0x32>
 800af4e:	79bb      	ldrb	r3, [r7, #6]
 800af50:	222c      	movs	r2, #44	@ 0x2c
 800af52:	fb02 f303 	mul.w	r3, r2, r3
 800af56:	4a0d      	ldr	r2, [pc, #52]	@ (800af8c <drv_i2cInit+0x58>)
 800af58:	4413      	add	r3, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 f81c 	bl	800af98 <drv_i2cInitInstance>
 800af60:	4603      	mov	r3, r0
 800af62:	71fb      	strb	r3, [r7, #7]
 800af64:	e001      	b.n	800af6a <drv_i2cInit+0x36>
 800af66:	23ae      	movs	r3, #174	@ 0xae
 800af68:	71fb      	strb	r3, [r7, #7]
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 800af6a:	79bb      	ldrb	r3, [r7, #6]
 800af6c:	3301      	adds	r3, #1
 800af6e:	71bb      	strb	r3, [r7, #6]
 800af70:	79ba      	ldrb	r2, [r7, #6]
 800af72:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <drv_i2cInit+0x5c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4907      	ldr	r1, [pc, #28]	@ (800af94 <drv_i2cInit+0x60>)
 800af78:	fba1 1303 	umull	r1, r3, r1, r3
 800af7c:	095b      	lsrs	r3, r3, #5
 800af7e:	429a      	cmp	r2, r3
 800af80:	d3e2      	bcc.n	800af48 <drv_i2cInit+0x14>
    {
        // Configuration array is NULL pointer.
        i2cDriverInitResult = GOS_ERROR;
    }

    return i2cDriverInitResult;
 800af82:	79fb      	ldrb	r3, [r7, #7]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	0801a93c 	.word	0x0801a93c
 800af90:	20000358 	.word	0x20000358
 800af94:	ba2e8ba3 	.word	0xba2e8ba3

0800af98 <drv_i2cInitInstance>:

/*
 * Function: drv_i2cInitInstance
 */
gos_result_t drv_i2cInitInstance (GOS_CONST drv_i2cDescriptor_t* pInstance)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            i2cInitResult = GOS_ERROR;
 800afa0:	23ae      	movs	r3, #174	@ 0xae
 800afa2:	73fb      	strb	r3, [r7, #15]
    drv_i2cPeriphInstance_t instance      = 0u;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pInstance != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 80e7 	beq.w	800b17e <drv_i2cInitInstance+0x1e6>
    {
        instance = pInstance->periphInstance;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	73bb      	strb	r3, [r7, #14]

        hi2cs[instance].Instance             = i2cInstanceLut[instance];
 800afb6:	7bba      	ldrb	r2, [r7, #14]
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	4973      	ldr	r1, [pc, #460]	@ (800b188 <drv_i2cInitInstance+0x1f0>)
 800afbc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800afc0:	4972      	ldr	r1, [pc, #456]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800afc2:	2054      	movs	r0, #84	@ 0x54
 800afc4:	fb00 f303 	mul.w	r3, r0, r3
 800afc8:	440b      	add	r3, r1
 800afca:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.ClockSpeed      = pInstance->clockSpeed;
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6852      	ldr	r2, [r2, #4]
 800afd2:	496e      	ldr	r1, [pc, #440]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800afd4:	2054      	movs	r0, #84	@ 0x54
 800afd6:	fb00 f303 	mul.w	r3, r0, r3
 800afda:	440b      	add	r3, r1
 800afdc:	3304      	adds	r3, #4
 800afde:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DutyCycle       = pInstance->dutyCycle;
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6892      	ldr	r2, [r2, #8]
 800afe6:	4969      	ldr	r1, [pc, #420]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800afe8:	2054      	movs	r0, #84	@ 0x54
 800afea:	fb00 f303 	mul.w	r3, r0, r3
 800afee:	440b      	add	r3, r1
 800aff0:	3308      	adds	r3, #8
 800aff2:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.AddressingMode  = pInstance->addressingMode;
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6912      	ldr	r2, [r2, #16]
 800affa:	4964      	ldr	r1, [pc, #400]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800affc:	2054      	movs	r0, #84	@ 0x54
 800affe:	fb00 f303 	mul.w	r3, r0, r3
 800b002:	440b      	add	r3, r1
 800b004:	3310      	adds	r3, #16
 800b006:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress1     = pInstance->ownAddress1;
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	68d2      	ldr	r2, [r2, #12]
 800b00e:	495f      	ldr	r1, [pc, #380]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b010:	2054      	movs	r0, #84	@ 0x54
 800b012:	fb00 f303 	mul.w	r3, r0, r3
 800b016:	440b      	add	r3, r1
 800b018:	330c      	adds	r3, #12
 800b01a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress2     = pInstance->ownAddress2;
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	6992      	ldr	r2, [r2, #24]
 800b022:	495a      	ldr	r1, [pc, #360]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b024:	2054      	movs	r0, #84	@ 0x54
 800b026:	fb00 f303 	mul.w	r3, r0, r3
 800b02a:	440b      	add	r3, r1
 800b02c:	3318      	adds	r3, #24
 800b02e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DualAddressMode = pInstance->dualAddressMode;
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6952      	ldr	r2, [r2, #20]
 800b036:	4955      	ldr	r1, [pc, #340]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b038:	2054      	movs	r0, #84	@ 0x54
 800b03a:	fb00 f303 	mul.w	r3, r0, r3
 800b03e:	440b      	add	r3, r1
 800b040:	3314      	adds	r3, #20
 800b042:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.GeneralCallMode = pInstance->generalCallMode;
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	69d2      	ldr	r2, [r2, #28]
 800b04a:	4950      	ldr	r1, [pc, #320]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b04c:	2054      	movs	r0, #84	@ 0x54
 800b04e:	fb00 f303 	mul.w	r3, r0, r3
 800b052:	440b      	add	r3, r1
 800b054:	331c      	adds	r3, #28
 800b056:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.NoStretchMode   = pInstance->noStretchMode;
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	6a12      	ldr	r2, [r2, #32]
 800b05e:	494b      	ldr	r1, [pc, #300]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b060:	2054      	movs	r0, #84	@ 0x54
 800b062:	fb00 f303 	mul.w	r3, r0, r3
 800b066:	440b      	add	r3, r1
 800b068:	3320      	adds	r3, #32
 800b06a:	601a      	str	r2, [r3, #0]

        HAL_I2C_DeInit(&hi2cs[instance]);
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	2254      	movs	r2, #84	@ 0x54
 800b070:	fb02 f303 	mul.w	r3, r2, r3
 800b074:	4a45      	ldr	r2, [pc, #276]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b076:	4413      	add	r3, r2
 800b078:	4618      	mov	r0, r3
 800b07a:	f7f8 f939 	bl	80032f0 <HAL_I2C_DeInit>

        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	2254      	movs	r2, #84	@ 0x54
 800b082:	fb02 f303 	mul.w	r3, r2, r3
 800b086:	4a41      	ldr	r2, [pc, #260]	@ (800b18c <drv_i2cInitInstance+0x1f4>)
 800b088:	4413      	add	r3, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f7 ffec 	bl	8003068 <HAL_I2C_Init>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d173      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4a3d      	ldr	r2, [pc, #244]	@ (800b190 <drv_i2cInitInstance+0x1f8>)
 800b09c:	4413      	add	r3, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f008 fec4 	bl	8013e2c <gos_mutexInit>
 800b0a4:	4603      	mov	r3, r0
        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 800b0a6:	2b55      	cmp	r3, #85	@ 0x55
 800b0a8:	d169      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0aa:	7bba      	ldrb	r2, [r7, #14]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4a37      	ldr	r2, [pc, #220]	@ (800b194 <drv_i2cInitInstance+0x1fc>)
 800b0b6:	4413      	add	r3, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f00a ff59 	bl	8015f70 <gos_triggerInit>
 800b0be:	4603      	mov	r3, r0
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 800b0c0:	2b55      	cmp	r3, #85	@ 0x55
 800b0c2:	d15c      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0c4:	7bba      	ldrb	r2, [r7, #14]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	4413      	add	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4a32      	ldr	r2, [pc, #200]	@ (800b198 <drv_i2cInitInstance+0x200>)
 800b0d0:	4413      	add	r3, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f00a ff4c 	bl	8015f70 <gos_triggerInit>
 800b0d8:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0da:	2b55      	cmp	r3, #85	@ 0x55
 800b0dc:	d14f      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b0de:	7bba      	ldrb	r2, [r7, #14]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4a2c      	ldr	r2, [pc, #176]	@ (800b19c <drv_i2cInitInstance+0x204>)
 800b0ea:	4413      	add	r3, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f00a ff3f 	bl	8015f70 <gos_triggerInit>
 800b0f2:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b0f4:	2b55      	cmp	r3, #85	@ 0x55
 800b0f6:	d142      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b0f8:	7bba      	ldrb	r2, [r7, #14]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	4413      	add	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4a27      	ldr	r2, [pc, #156]	@ (800b1a0 <drv_i2cInitInstance+0x208>)
 800b104:	4413      	add	r3, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f00a ff32 	bl	8015f70 <gos_triggerInit>
 800b10c:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b10e:	2b55      	cmp	r3, #85	@ 0x55
 800b110:	d135      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b112:	7bba      	ldrb	r2, [r7, #14]
 800b114:	4613      	mov	r3, r2
 800b116:	005b      	lsls	r3, r3, #1
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4a1d      	ldr	r2, [pc, #116]	@ (800b194 <drv_i2cInitInstance+0x1fc>)
 800b11e:	4413      	add	r3, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f00a ff41 	bl	8015fa8 <gos_triggerReset>
 800b126:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b128:	2b55      	cmp	r3, #85	@ 0x55
 800b12a:	d128      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b12c:	7bba      	ldrb	r2, [r7, #14]
 800b12e:	4613      	mov	r3, r2
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4a18      	ldr	r2, [pc, #96]	@ (800b198 <drv_i2cInitInstance+0x200>)
 800b138:	4413      	add	r3, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f00a ff34 	bl	8015fa8 <gos_triggerReset>
 800b140:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b142:	2b55      	cmp	r3, #85	@ 0x55
 800b144:	d11b      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b146:	7bba      	ldrb	r2, [r7, #14]
 800b148:	4613      	mov	r3, r2
 800b14a:	005b      	lsls	r3, r3, #1
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4a12      	ldr	r2, [pc, #72]	@ (800b19c <drv_i2cInitInstance+0x204>)
 800b152:	4413      	add	r3, r2
 800b154:	4618      	mov	r0, r3
 800b156:	f00a ff27 	bl	8015fa8 <gos_triggerReset>
 800b15a:	4603      	mov	r3, r0
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b15c:	2b55      	cmp	r3, #85	@ 0x55
 800b15e:	d10e      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS
 800b160:	7bba      	ldrb	r2, [r7, #14]
 800b162:	4613      	mov	r3, r2
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4a0d      	ldr	r2, [pc, #52]	@ (800b1a0 <drv_i2cInitInstance+0x208>)
 800b16c:	4413      	add	r3, r2
 800b16e:	4618      	mov	r0, r3
 800b170:	f00a ff1a 	bl	8015fa8 <gos_triggerReset>
 800b174:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 800b176:	2b55      	cmp	r3, #85	@ 0x55
 800b178:	d101      	bne.n	800b17e <drv_i2cInitInstance+0x1e6>
            )
        {
            i2cInitResult = GOS_SUCCESS;
 800b17a:	2355      	movs	r3, #85	@ 0x55
 800b17c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return i2cInitResult;
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	200004c4 	.word	0x200004c4
 800b18c:	20001f94 	.word	0x20001f94
 800b190:	20002090 	.word	0x20002090
 800b194:	2000209c 	.word	0x2000209c
 800b198:	200020c0 	.word	0x200020c0
 800b19c:	200020e4 	.word	0x200020e4
 800b1a0:	20002108 	.word	0x20002108

0800b1a4 <drv_i2cMemRead>:
 */
GOS_INLINE gos_result_t drv_i2cMemRead (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4623      	mov	r3, r4
 800b1b4:	71fb      	strb	r3, [r7, #7]
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	80bb      	strh	r3, [r7, #4]
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	807b      	strh	r3, [r7, #2]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemReadResult = GOS_ERROR;
 800b1c2:	23ae      	movs	r3, #174	@ 0xae
 800b1c4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b1c6:	79fb      	ldrb	r3, [r7, #7]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4a29      	ldr	r2, [pc, #164]	@ (800b270 <drv_i2cMemRead+0xcc>)
 800b1cc:	4413      	add	r3, r2
 800b1ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f008 fe45 	bl	8013e60 <gos_mutexLock>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b55      	cmp	r3, #85	@ 0x55
 800b1da:	d13c      	bne.n	800b256 <drv_i2cMemRead+0xb2>
    {
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2254      	movs	r2, #84	@ 0x54
 800b1e0:	fb02 f303 	mul.w	r3, r2, r3
 800b1e4:	4a23      	ldr	r2, [pc, #140]	@ (800b274 <drv_i2cMemRead+0xd0>)
 800b1e6:	1898      	adds	r0, r3, r2
 800b1e8:	883c      	ldrh	r4, [r7, #0]
 800b1ea:	887a      	ldrh	r2, [r7, #2]
 800b1ec:	88b9      	ldrh	r1, [r7, #4]
 800b1ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1f0:	9301      	str	r3, [sp, #4]
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	4623      	mov	r3, r4
 800b1f8:	f7f8 f8b4 	bl	8003364 <HAL_I2C_Mem_Read_IT>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d11e      	bne.n	800b240 <drv_i2cMemRead+0x9c>
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 800b202:	79fa      	ldrb	r2, [r7, #7]
 800b204:	4613      	mov	r3, r2
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4a1a      	ldr	r2, [pc, #104]	@ (800b278 <drv_i2cMemRead+0xd4>)
 800b20e:	4413      	add	r3, r2
 800b210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b212:	2101      	movs	r1, #1
 800b214:	4618      	mov	r0, r3
 800b216:	f00a ff1f 	bl	8016058 <gos_triggerWait>
 800b21a:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 800b21c:	2b55      	cmp	r3, #85	@ 0x55
 800b21e:	d10f      	bne.n	800b240 <drv_i2cMemRead+0x9c>
            gos_triggerReset   (&i2cRxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	4613      	mov	r3, r2
 800b224:	005b      	lsls	r3, r3, #1
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4a13      	ldr	r2, [pc, #76]	@ (800b278 <drv_i2cMemRead+0xd4>)
 800b22c:	4413      	add	r3, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	f00a feba 	bl	8015fa8 <gos_triggerReset>
 800b234:	4603      	mov	r3, r0
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 800b236:	2b55      	cmp	r3, #85	@ 0x55
 800b238:	d102      	bne.n	800b240 <drv_i2cMemRead+0x9c>
        {
            i2cMemReadResult = GOS_SUCCESS;
 800b23a:	2355      	movs	r3, #85	@ 0x55
 800b23c:	73fb      	strb	r3, [r7, #15]
 800b23e:	e00a      	b.n	800b256 <drv_i2cMemRead+0xb2>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2254      	movs	r2, #84	@ 0x54
 800b244:	fb02 f303 	mul.w	r3, r2, r3
 800b248:	4a0a      	ldr	r2, [pc, #40]	@ (800b274 <drv_i2cMemRead+0xd0>)
 800b24a:	4413      	add	r3, r2
 800b24c:	88ba      	ldrh	r2, [r7, #4]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7f8 f945 	bl	80034e0 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 800b256:	79fb      	ldrb	r3, [r7, #7]
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4a05      	ldr	r2, [pc, #20]	@ (800b270 <drv_i2cMemRead+0xcc>)
 800b25c:	4413      	add	r3, r2
 800b25e:	4618      	mov	r0, r3
 800b260:	f008 ff04 	bl	801406c <gos_mutexUnlock>

    return i2cMemReadResult;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd90      	pop	{r4, r7, pc}
 800b26e:	bf00      	nop
 800b270:	20002090 	.word	0x20002090
 800b274:	20001f94 	.word	0x20001f94
 800b278:	200020e4 	.word	0x200020e4

0800b27c <HAL_I2C_MasterTxCpltCallback>:

/*
 * Function: HAL_I2C_MasterTxCpltCallback
 */
void_t HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	4b0a      	ldr	r3, [pc, #40]	@ (800b2b4 <HAL_I2C_MasterTxCpltCallback+0x38>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d103      	bne.n	800b298 <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b290:	4809      	ldr	r0, [pc, #36]	@ (800b2b8 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 800b292:	f00a ff91 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b296:	e008      	b.n	800b2aa <HAL_I2C_MasterTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	4b05      	ldr	r3, [pc, #20]	@ (800b2b4 <HAL_I2C_MasterTxCpltCallback+0x38>)
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d102      	bne.n	800b2aa <HAL_I2C_MasterTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b2a4:	4805      	ldr	r0, [pc, #20]	@ (800b2bc <HAL_I2C_MasterTxCpltCallback+0x40>)
 800b2a6:	f00a ff87 	bl	80161b8 <gos_triggerIncrement>
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	200004c4 	.word	0x200004c4
 800b2b8:	200020c0 	.word	0x200020c0
 800b2bc:	200020cc 	.word	0x200020cc

0800b2c0 <HAL_I2C_MemTxCpltCallback>:

/*
 * Function: HAL_I2C_MemTxCpltCallback
 */
void_t HAL_I2C_MemTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <HAL_I2C_MemTxCpltCallback+0x38>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d103      	bne.n	800b2dc <HAL_I2C_MemTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b2d4:	4809      	ldr	r0, [pc, #36]	@ (800b2fc <HAL_I2C_MemTxCpltCallback+0x3c>)
 800b2d6:	f00a ff6f 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b2da:	e008      	b.n	800b2ee <HAL_I2C_MemTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	4b05      	ldr	r3, [pc, #20]	@ (800b2f8 <HAL_I2C_MemTxCpltCallback+0x38>)
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d102      	bne.n	800b2ee <HAL_I2C_MemTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b2e8:	4805      	ldr	r0, [pc, #20]	@ (800b300 <HAL_I2C_MemTxCpltCallback+0x40>)
 800b2ea:	f00a ff65 	bl	80161b8 <gos_triggerIncrement>
}
 800b2ee:	bf00      	nop
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200004c4 	.word	0x200004c4
 800b2fc:	20002108 	.word	0x20002108
 800b300:	20002114 	.word	0x20002114

0800b304 <HAL_I2C_MasterRxCpltCallback>:

/*
 * Function: HAL_I2C_MasterRxCpltCallback
 */
void_t HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	4b0a      	ldr	r3, [pc, #40]	@ (800b33c <HAL_I2C_MasterRxCpltCallback+0x38>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	429a      	cmp	r2, r3
 800b316:	d103      	bne.n	800b320 <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b318:	4809      	ldr	r0, [pc, #36]	@ (800b340 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800b31a:	f00a ff4d 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b31e:	e008      	b.n	800b332 <HAL_I2C_MasterRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	4b05      	ldr	r3, [pc, #20]	@ (800b33c <HAL_I2C_MasterRxCpltCallback+0x38>)
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d102      	bne.n	800b332 <HAL_I2C_MasterRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b32c:	4805      	ldr	r0, [pc, #20]	@ (800b344 <HAL_I2C_MasterRxCpltCallback+0x40>)
 800b32e:	f00a ff43 	bl	80161b8 <gos_triggerIncrement>
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	200004c4 	.word	0x200004c4
 800b340:	2000209c 	.word	0x2000209c
 800b344:	200020a8 	.word	0x200020a8

0800b348 <HAL_I2C_MemRxCpltCallback>:

/*
 * Function: HAL_I2C_MemRxCpltCallback
 */
void_t HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	4b0a      	ldr	r3, [pc, #40]	@ (800b380 <HAL_I2C_MemRxCpltCallback+0x38>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d103      	bne.n	800b364 <HAL_I2C_MemRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 800b35c:	4809      	ldr	r0, [pc, #36]	@ (800b384 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800b35e:	f00a ff2b 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800b362:	e008      	b.n	800b376 <HAL_I2C_MemRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	4b05      	ldr	r3, [pc, #20]	@ (800b380 <HAL_I2C_MemRxCpltCallback+0x38>)
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d102      	bne.n	800b376 <HAL_I2C_MemRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 800b370:	4805      	ldr	r0, [pc, #20]	@ (800b388 <HAL_I2C_MemRxCpltCallback+0x40>)
 800b372:	f00a ff21 	bl	80161b8 <gos_triggerIncrement>
}
 800b376:	bf00      	nop
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	200004c4 	.word	0x200004c4
 800b384:	200020e4 	.word	0x200020e4
 800b388:	200020f0 	.word	0x200020f0

0800b38c <I2C1_EV_IRQHandler>:

/*
 * Function: I2C1_EV_IRQHandler
 */
void_t I2C1_EV_IRQHandler (void_t)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b390:	4b16      	ldr	r3, [pc, #88]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <I2C1_EV_IRQHandler+0x18>
 800b398:	4b15      	ldr	r3, [pc, #84]	@ (800b3f0 <I2C1_EV_IRQHandler+0x64>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	3301      	adds	r3, #1
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	4b13      	ldr	r3, [pc, #76]	@ (800b3f0 <I2C1_EV_IRQHandler+0x64>)
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	4b11      	ldr	r3, [pc, #68]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b3ae:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_1]);
 800b3b0:	4810      	ldr	r0, [pc, #64]	@ (800b3f4 <I2C1_EV_IRQHandler+0x68>)
 800b3b2:	f7f8 f8e4 	bl	800357e <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <I2C1_EV_IRQHandler+0x3e>
 800b3be:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	4b09      	ldr	r3, [pc, #36]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	4b08      	ldr	r3, [pc, #32]	@ (800b3ec <I2C1_EV_IRQHandler+0x60>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d109      	bne.n	800b3e6 <I2C1_EV_IRQHandler+0x5a>
 800b3d2:	4b07      	ldr	r3, [pc, #28]	@ (800b3f0 <I2C1_EV_IRQHandler+0x64>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <I2C1_EV_IRQHandler+0x5a>
 800b3da:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <I2C1_EV_IRQHandler+0x64>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	4b03      	ldr	r3, [pc, #12]	@ (800b3f0 <I2C1_EV_IRQHandler+0x64>)
 800b3e4:	701a      	strb	r2, [r3, #0]
}
 800b3e6:	bf00      	nop
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20005e52 	.word	0x20005e52
 800b3f0:	20005e51 	.word	0x20005e51
 800b3f4:	20001f94 	.word	0x20001f94

0800b3f8 <I2C2_EV_IRQHandler>:

/*
 * Function: I2C2_EV_IRQHandler
 */
void_t I2C2_EV_IRQHandler (void_t)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b3fc:	4b16      	ldr	r3, [pc, #88]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d105      	bne.n	800b410 <I2C2_EV_IRQHandler+0x18>
 800b404:	4b15      	ldr	r3, [pc, #84]	@ (800b45c <I2C2_EV_IRQHandler+0x64>)
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	3301      	adds	r3, #1
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	4b13      	ldr	r3, [pc, #76]	@ (800b45c <I2C2_EV_IRQHandler+0x64>)
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	4b11      	ldr	r3, [pc, #68]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	b2da      	uxtb	r2, r3
 800b418:	4b0f      	ldr	r3, [pc, #60]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b41a:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_2]);
 800b41c:	4810      	ldr	r0, [pc, #64]	@ (800b460 <I2C2_EV_IRQHandler+0x68>)
 800b41e:	f7f8 f8ae 	bl	800357e <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 800b422:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <I2C2_EV_IRQHandler+0x3e>
 800b42a:	4b0b      	ldr	r3, [pc, #44]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	3b01      	subs	r3, #1
 800b430:	b2da      	uxtb	r2, r3
 800b432:	4b09      	ldr	r3, [pc, #36]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	4b08      	ldr	r3, [pc, #32]	@ (800b458 <I2C2_EV_IRQHandler+0x60>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <I2C2_EV_IRQHandler+0x5a>
 800b43e:	4b07      	ldr	r3, [pc, #28]	@ (800b45c <I2C2_EV_IRQHandler+0x64>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d005      	beq.n	800b452 <I2C2_EV_IRQHandler+0x5a>
 800b446:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <I2C2_EV_IRQHandler+0x64>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	4b03      	ldr	r3, [pc, #12]	@ (800b45c <I2C2_EV_IRQHandler+0x64>)
 800b450:	701a      	strb	r2, [r3, #0]
}
 800b452:	bf00      	nop
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	20005e52 	.word	0x20005e52
 800b45c:	20005e51 	.word	0x20005e51
 800b460:	20001fe8 	.word	0x20001fe8

0800b464 <HAL_I2C_MspInit>:

/*
 * Function: HAL_I2C_MspInit
 */
void_t HAL_I2C_MspInit (I2C_HandleTypeDef* hi2c)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_i2cPeriphInstance_t instance = 0u;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800b470:	2300      	movs	r3, #0
 800b472:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
 800b478:	e061      	b.n	800b53e <HAL_I2C_MspInit+0xda>
    {
        if (i2cInstanceLut[instance] == hi2c->Instance)
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	4a35      	ldr	r2, [pc, #212]	@ (800b554 <HAL_I2C_MspInit+0xf0>)
 800b47e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d156      	bne.n	800b538 <HAL_I2C_MspInit+0xd4>
        {
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 800b48a:	2300      	movs	r3, #0
 800b48c:	73bb      	strb	r3, [r7, #14]
 800b48e:	e04a      	b.n	800b526 <HAL_I2C_MspInit+0xc2>
            {
                if (i2cConfig[idx].periphInstance == instance)
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	4a31      	ldr	r2, [pc, #196]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b494:	212c      	movs	r1, #44	@ 0x2c
 800b496:	fb01 f303 	mul.w	r3, r1, r3
 800b49a:	4413      	add	r3, r2
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	7bfa      	ldrb	r2, [r7, #15]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d13d      	bne.n	800b520 <HAL_I2C_MspInit+0xbc>
                {
                    if (i2cConfig[idx].dmaConfigRx != NULL)
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	4a2c      	ldr	r2, [pc, #176]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b4a8:	212c      	movs	r1, #44	@ 0x2c
 800b4aa:	fb01 f303 	mul.w	r3, r1, r3
 800b4ae:	4413      	add	r3, r2
 800b4b0:	3324      	adds	r3, #36	@ 0x24
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d014      	beq.n	800b4e2 <HAL_I2C_MspInit+0x7e>
                    {
                        __HAL_LINKDMA(hi2c, hdmarx, i2cConfig[idx].dmaConfigRx->hdma);
 800b4b8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ba:	4a27      	ldr	r2, [pc, #156]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b4bc:	212c      	movs	r1, #44	@ 0x2c
 800b4be:	fb01 f303 	mul.w	r3, r1, r3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	3324      	adds	r3, #36	@ 0x24
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	639a      	str	r2, [r3, #56]	@ 0x38
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	4a21      	ldr	r2, [pc, #132]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b4d2:	212c      	movs	r1, #44	@ 0x2c
 800b4d4:	fb01 f303 	mul.w	r3, r1, r3
 800b4d8:	4413      	add	r3, r2
 800b4da:	3324      	adds	r3, #36	@ 0x24
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (i2cConfig[idx].dmaConfigTx != NULL)
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
 800b4e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b4e6:	212c      	movs	r1, #44	@ 0x2c
 800b4e8:	fb01 f303 	mul.w	r3, r1, r3
 800b4ec:	4413      	add	r3, r2
 800b4ee:	3328      	adds	r3, #40	@ 0x28
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d014      	beq.n	800b520 <HAL_I2C_MspInit+0xbc>
                    {
                        __HAL_LINKDMA(hi2c, hdmatx, i2cConfig[idx].dmaConfigTx->hdma);
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	4a17      	ldr	r2, [pc, #92]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b4fa:	212c      	movs	r1, #44	@ 0x2c
 800b4fc:	fb01 f303 	mul.w	r3, r1, r3
 800b500:	4413      	add	r3, r2
 800b502:	3328      	adds	r3, #40	@ 0x28
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	635a      	str	r2, [r3, #52]	@ 0x34
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	4a12      	ldr	r2, [pc, #72]	@ (800b558 <HAL_I2C_MspInit+0xf4>)
 800b510:	212c      	movs	r1, #44	@ 0x2c
 800b512:	fb01 f303 	mul.w	r3, r1, r3
 800b516:	4413      	add	r3, r2
 800b518:	3328      	adds	r3, #40	@ 0x28
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	3301      	adds	r3, #1
 800b524:	73bb      	strb	r3, [r7, #14]
 800b526:	7bba      	ldrb	r2, [r7, #14]
 800b528:	4b0c      	ldr	r3, [pc, #48]	@ (800b55c <HAL_I2C_MspInit+0xf8>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	490c      	ldr	r1, [pc, #48]	@ (800b560 <HAL_I2C_MspInit+0xfc>)
 800b52e:	fba1 1303 	umull	r1, r3, r1, r3
 800b532:	095b      	lsrs	r3, r3, #5
 800b534:	429a      	cmp	r2, r3
 800b536:	d3ab      	bcc.n	800b490 <HAL_I2C_MspInit+0x2c>
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	3301      	adds	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d99a      	bls.n	800b47a <HAL_I2C_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	3714      	adds	r7, #20
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop
 800b554:	200004c4 	.word	0x200004c4
 800b558:	0801a93c 	.word	0x0801a93c
 800b55c:	20000358 	.word	0x20000358
 800b560:	ba2e8ba3 	.word	0xba2e8ba3

0800b564 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 800b564:	b590      	push	{r4, r7, lr}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 800b56a:	23ae      	movs	r3, #174	@ 0xae
 800b56c:	71fb      	strb	r3, [r7, #7]
    u8_t         itIdx              = 0u;
 800b56e:	2300      	movs	r3, #0
 800b570:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800b572:	2300      	movs	r3, #0
 800b574:	71bb      	strb	r3, [r7, #6]
 800b576:	e02c      	b.n	800b5d2 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 800b578:	79ba      	ldrb	r2, [r7, #6]
 800b57a:	491e      	ldr	r1, [pc, #120]	@ (800b5f4 <drv_itInit+0x90>)
 800b57c:	4613      	mov	r3, r2
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	440b      	add	r3, r1
 800b586:	f993 0000 	ldrsb.w	r0, [r3]
 800b58a:	79ba      	ldrb	r2, [r7, #6]
 800b58c:	4919      	ldr	r1, [pc, #100]	@ (800b5f4 <drv_itInit+0x90>)
 800b58e:	4613      	mov	r3, r2
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	440b      	add	r3, r1
 800b598:	3304      	adds	r3, #4
 800b59a:	6819      	ldr	r1, [r3, #0]
 800b59c:	79ba      	ldrb	r2, [r7, #6]
 800b59e:	4c15      	ldr	r4, [pc, #84]	@ (800b5f4 <drv_itInit+0x90>)
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	4413      	add	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4423      	add	r3, r4
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f7f6 fc3f 	bl	8001e32 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 800b5b4:	79ba      	ldrb	r2, [r7, #6]
 800b5b6:	490f      	ldr	r1, [pc, #60]	@ (800b5f4 <drv_itInit+0x90>)
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4413      	add	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	440b      	add	r3, r1
 800b5c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f6 fc4f 	bl	8001e6a <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800b5cc:	79bb      	ldrb	r3, [r7, #6]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	71bb      	strb	r3, [r7, #6]
 800b5d2:	79ba      	ldrb	r2, [r7, #6]
 800b5d4:	4b08      	ldr	r3, [pc, #32]	@ (800b5f8 <drv_itInit+0x94>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4908      	ldr	r1, [pc, #32]	@ (800b5fc <drv_itInit+0x98>)
 800b5da:	fba1 1303 	umull	r1, r3, r1, r3
 800b5de:	08db      	lsrs	r3, r3, #3
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d3c9      	bcc.n	800b578 <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 800b5e4:	2355      	movs	r3, #85	@ 0x55
 800b5e6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd90      	pop	{r4, r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	0801a968 	.word	0x0801a968
 800b5f8:	2000035c 	.word	0x2000035c
 800b5fc:	aaaaaaab 	.word	0xaaaaaaab

0800b600 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af02      	add	r7, sp, #8
 800b606:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800b608:	23ae      	movs	r3, #174	@ 0xae
 800b60a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800b60c:	2300      	movs	r3, #0
 800b60e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800b610:	4b0d      	ldr	r3, [pc, #52]	@ (800b648 <drv_shellTransmitString+0x48>)
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	2b05      	cmp	r3, #5
 800b61a:	d810      	bhi.n	800b63e <drv_shellTransmitString+0x3e>
        {
            uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7f4 fe47 	bl	80002b0 <strlen>
 800b622:	4603      	mov	r3, r0
 800b624:	b29a      	uxth	r2, r3
 800b626:	4b09      	ldr	r3, [pc, #36]	@ (800b64c <drv_shellTransmitString+0x4c>)
 800b628:	6959      	ldr	r1, [r3, #20]
 800b62a:	4b08      	ldr	r3, [pc, #32]	@ (800b64c <drv_shellTransmitString+0x4c>)
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	7bb8      	ldrb	r0, [r7, #14]
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	460b      	mov	r3, r1
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	f001 fb31 	bl	800cc9c <drv_uartTransmitIT>
 800b63a:	4603      	mov	r3, r0
 800b63c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	0801aa88 	.word	0x0801aa88
 800b64c:	200003d0 	.word	0x200003d0

0800b650 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af02      	add	r7, sp, #8
 800b656:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800b658:	23ae      	movs	r3, #174	@ 0xae
 800b65a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800b660:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <drv_shellReceiveChar+0x40>)
 800b662:	785b      	ldrb	r3, [r3, #1]
 800b664:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b05      	cmp	r3, #5
 800b66a:	d80c      	bhi.n	800b686 <drv_shellReceiveChar+0x36>
        {
            uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 800b66c:	4b09      	ldr	r3, [pc, #36]	@ (800b694 <drv_shellReceiveChar+0x44>)
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	4b08      	ldr	r3, [pc, #32]	@ (800b694 <drv_shellReceiveChar+0x44>)
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	7bb8      	ldrb	r0, [r7, #14]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	4613      	mov	r3, r2
 800b67a:	2201      	movs	r2, #1
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	f001 fb7d 	bl	800cd7c <drv_uartReceiveIT>
 800b682:	4603      	mov	r3, r0
 800b684:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	0801aa88 	.word	0x0801aa88
 800b694:	200003d0 	.word	0x200003d0

0800b698 <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 800b69e:	2355      	movs	r3, #85	@ 0x55
 800b6a0:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	71bb      	strb	r3, [r7, #6]
 800b6aa:	e00e      	b.n	800b6ca <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b55      	cmp	r3, #85	@ 0x55
 800b6b0:	d106      	bne.n	800b6c0 <drv_spiInit+0x28>
 800b6b2:	79bb      	ldrb	r3, [r7, #6]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 f81b 	bl	800b6f0 <drv_spiInitInstance>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	71fb      	strb	r3, [r7, #7]
 800b6be:	e001      	b.n	800b6c4 <drv_spiInit+0x2c>
 800b6c0:	23ae      	movs	r3, #174	@ 0xae
 800b6c2:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800b6c4:	79bb      	ldrb	r3, [r7, #6]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	71bb      	strb	r3, [r7, #6]
 800b6ca:	79bb      	ldrb	r3, [r7, #6]
 800b6cc:	4a06      	ldr	r2, [pc, #24]	@ (800b6e8 <drv_spiInit+0x50>)
 800b6ce:	6812      	ldr	r2, [r2, #0]
 800b6d0:	08d2      	lsrs	r2, r2, #3
 800b6d2:	4906      	ldr	r1, [pc, #24]	@ (800b6ec <drv_spiInit+0x54>)
 800b6d4:	fba1 1202 	umull	r1, r2, r1, r2
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d3e7      	bcc.n	800b6ac <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000360 	.word	0x20000360
 800b6ec:	24924925 	.word	0x24924925

0800b6f0 <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 800b6fa:	23ae      	movs	r3, #174	@ 0xae
 800b6fc:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	4aa1      	ldr	r2, [pc, #644]	@ (800b98c <drv_spiInitInstance+0x29c>)
 800b706:	6812      	ldr	r2, [r2, #0]
 800b708:	08d2      	lsrs	r2, r2, #3
 800b70a:	49a1      	ldr	r1, [pc, #644]	@ (800b990 <drv_spiInitInstance+0x2a0>)
 800b70c:	fba1 1202 	umull	r1, r2, r1, r2
 800b710:	4293      	cmp	r3, r2
 800b712:	f080 8135 	bcs.w	800b980 <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 800b716:	79fa      	ldrb	r2, [r7, #7]
 800b718:	499e      	ldr	r1, [pc, #632]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b71a:	4613      	mov	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	440b      	add	r3, r1
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 800b728:	7bba      	ldrb	r2, [r7, #14]
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	499a      	ldr	r1, [pc, #616]	@ (800b998 <drv_spiInitInstance+0x2a8>)
 800b72e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b732:	499a      	ldr	r1, [pc, #616]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b734:	2058      	movs	r0, #88	@ 0x58
 800b736:	fb00 f303 	mul.w	r3, r0, r3
 800b73a:	440b      	add	r3, r1
 800b73c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 800b73e:	79fa      	ldrb	r2, [r7, #7]
 800b740:	7bb9      	ldrb	r1, [r7, #14]
 800b742:	4894      	ldr	r0, [pc, #592]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b744:	4613      	mov	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	1a9b      	subs	r3, r3, r2
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	4403      	add	r3, r0
 800b74e:	3304      	adds	r3, #4
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	4892      	ldr	r0, [pc, #584]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b754:	2358      	movs	r3, #88	@ 0x58
 800b756:	fb01 f303 	mul.w	r3, r1, r3
 800b75a:	4403      	add	r3, r0
 800b75c:	3304      	adds	r3, #4
 800b75e:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 800b760:	79fa      	ldrb	r2, [r7, #7]
 800b762:	7bb9      	ldrb	r1, [r7, #14]
 800b764:	488b      	ldr	r0, [pc, #556]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b766:	4613      	mov	r3, r2
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	1a9b      	subs	r3, r3, r2
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	4403      	add	r3, r0
 800b770:	3308      	adds	r3, #8
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	4889      	ldr	r0, [pc, #548]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b776:	2358      	movs	r3, #88	@ 0x58
 800b778:	fb01 f303 	mul.w	r3, r1, r3
 800b77c:	4403      	add	r3, r0
 800b77e:	3308      	adds	r3, #8
 800b780:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 800b782:	79fa      	ldrb	r2, [r7, #7]
 800b784:	7bb9      	ldrb	r1, [r7, #14]
 800b786:	4883      	ldr	r0, [pc, #524]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b788:	4613      	mov	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	1a9b      	subs	r3, r3, r2
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	4403      	add	r3, r0
 800b792:	330c      	adds	r3, #12
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	4881      	ldr	r0, [pc, #516]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b798:	2358      	movs	r3, #88	@ 0x58
 800b79a:	fb01 f303 	mul.w	r3, r1, r3
 800b79e:	4403      	add	r3, r0
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 800b7a4:	79fa      	ldrb	r2, [r7, #7]
 800b7a6:	7bb9      	ldrb	r1, [r7, #14]
 800b7a8:	487a      	ldr	r0, [pc, #488]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	1a9b      	subs	r3, r3, r2
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	4403      	add	r3, r0
 800b7b4:	3310      	adds	r3, #16
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	4878      	ldr	r0, [pc, #480]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b7ba:	2358      	movs	r3, #88	@ 0x58
 800b7bc:	fb01 f303 	mul.w	r3, r1, r3
 800b7c0:	4403      	add	r3, r0
 800b7c2:	3310      	adds	r3, #16
 800b7c4:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 800b7c6:	79fa      	ldrb	r2, [r7, #7]
 800b7c8:	7bb9      	ldrb	r1, [r7, #14]
 800b7ca:	4872      	ldr	r0, [pc, #456]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	4403      	add	r3, r0
 800b7d6:	3314      	adds	r3, #20
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	4870      	ldr	r0, [pc, #448]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b7dc:	2358      	movs	r3, #88	@ 0x58
 800b7de:	fb01 f303 	mul.w	r3, r1, r3
 800b7e2:	4403      	add	r3, r0
 800b7e4:	3314      	adds	r3, #20
 800b7e6:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 800b7e8:	79fa      	ldrb	r2, [r7, #7]
 800b7ea:	7bb9      	ldrb	r1, [r7, #14]
 800b7ec:	4869      	ldr	r0, [pc, #420]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	1a9b      	subs	r3, r3, r2
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	4403      	add	r3, r0
 800b7f8:	3318      	adds	r3, #24
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	4867      	ldr	r0, [pc, #412]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b7fe:	2358      	movs	r3, #88	@ 0x58
 800b800:	fb01 f303 	mul.w	r3, r1, r3
 800b804:	4403      	add	r3, r0
 800b806:	3318      	adds	r3, #24
 800b808:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 800b80a:	79fa      	ldrb	r2, [r7, #7]
 800b80c:	7bb9      	ldrb	r1, [r7, #14]
 800b80e:	4861      	ldr	r0, [pc, #388]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b810:	4613      	mov	r3, r2
 800b812:	00db      	lsls	r3, r3, #3
 800b814:	1a9b      	subs	r3, r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4403      	add	r3, r0
 800b81a:	331c      	adds	r3, #28
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	485f      	ldr	r0, [pc, #380]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b820:	2358      	movs	r3, #88	@ 0x58
 800b822:	fb01 f303 	mul.w	r3, r1, r3
 800b826:	4403      	add	r3, r0
 800b828:	331c      	adds	r3, #28
 800b82a:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 800b82c:	79fa      	ldrb	r2, [r7, #7]
 800b82e:	7bb9      	ldrb	r1, [r7, #14]
 800b830:	4858      	ldr	r0, [pc, #352]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b832:	4613      	mov	r3, r2
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	1a9b      	subs	r3, r3, r2
 800b838:	00db      	lsls	r3, r3, #3
 800b83a:	4403      	add	r3, r0
 800b83c:	3320      	adds	r3, #32
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	4856      	ldr	r0, [pc, #344]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b842:	2358      	movs	r3, #88	@ 0x58
 800b844:	fb01 f303 	mul.w	r3, r1, r3
 800b848:	4403      	add	r3, r0
 800b84a:	3320      	adds	r3, #32
 800b84c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 800b84e:	79fa      	ldrb	r2, [r7, #7]
 800b850:	7bb9      	ldrb	r1, [r7, #14]
 800b852:	4850      	ldr	r0, [pc, #320]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b854:	4613      	mov	r3, r2
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	1a9b      	subs	r3, r3, r2
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	4403      	add	r3, r0
 800b85e:	3324      	adds	r3, #36	@ 0x24
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	484e      	ldr	r0, [pc, #312]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b864:	2358      	movs	r3, #88	@ 0x58
 800b866:	fb01 f303 	mul.w	r3, r1, r3
 800b86a:	4403      	add	r3, r0
 800b86c:	3324      	adds	r3, #36	@ 0x24
 800b86e:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 800b870:	79fa      	ldrb	r2, [r7, #7]
 800b872:	7bb9      	ldrb	r1, [r7, #14]
 800b874:	4847      	ldr	r0, [pc, #284]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b876:	4613      	mov	r3, r2
 800b878:	00db      	lsls	r3, r3, #3
 800b87a:	1a9b      	subs	r3, r3, r2
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	4403      	add	r3, r0
 800b880:	3328      	adds	r3, #40	@ 0x28
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	4845      	ldr	r0, [pc, #276]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b886:	2358      	movs	r3, #88	@ 0x58
 800b888:	fb01 f303 	mul.w	r3, r1, r3
 800b88c:	4403      	add	r3, r0
 800b88e:	3328      	adds	r3, #40	@ 0x28
 800b890:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 800b892:	79fa      	ldrb	r2, [r7, #7]
 800b894:	7bb9      	ldrb	r1, [r7, #14]
 800b896:	483f      	ldr	r0, [pc, #252]	@ (800b994 <drv_spiInitInstance+0x2a4>)
 800b898:	4613      	mov	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	1a9b      	subs	r3, r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	4403      	add	r3, r0
 800b8a2:	332c      	adds	r3, #44	@ 0x2c
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	483d      	ldr	r0, [pc, #244]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b8a8:	2358      	movs	r3, #88	@ 0x58
 800b8aa:	fb01 f303 	mul.w	r3, r1, r3
 800b8ae:	4403      	add	r3, r0
 800b8b0:	332c      	adds	r3, #44	@ 0x2c
 800b8b2:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2258      	movs	r2, #88	@ 0x58
 800b8b8:	fb02 f303 	mul.w	r3, r2, r3
 800b8bc:	4a37      	ldr	r2, [pc, #220]	@ (800b99c <drv_spiInitInstance+0x2ac>)
 800b8be:	4413      	add	r3, r2
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fa f84f 	bl	8005964 <HAL_SPI_Init>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d159      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4a33      	ldr	r2, [pc, #204]	@ (800b9a0 <drv_spiInitInstance+0x2b0>)
 800b8d2:	4413      	add	r3, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f008 faa9 	bl	8013e2c <gos_mutexInit>
 800b8da:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800b8dc:	2b55      	cmp	r3, #85	@ 0x55
 800b8de:	d14f      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b8e0:	7bba      	ldrb	r2, [r7, #14]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4a2e      	ldr	r2, [pc, #184]	@ (800b9a4 <drv_spiInitInstance+0x2b4>)
 800b8ec:	4413      	add	r3, r2
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f00a fb3e 	bl	8015f70 <gos_triggerInit>
 800b8f4:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800b8f6:	2b55      	cmp	r3, #85	@ 0x55
 800b8f8:	d142      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b8fa:	7bba      	ldrb	r2, [r7, #14]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	005b      	lsls	r3, r3, #1
 800b900:	4413      	add	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4a28      	ldr	r2, [pc, #160]	@ (800b9a8 <drv_spiInitInstance+0x2b8>)
 800b906:	4413      	add	r3, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f00a fb31 	bl	8015f70 <gos_triggerInit>
 800b90e:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b910:	2b55      	cmp	r3, #85	@ 0x55
 800b912:	d135      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800b914:	7bba      	ldrb	r2, [r7, #14]
 800b916:	4613      	mov	r3, r2
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	4413      	add	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4a23      	ldr	r2, [pc, #140]	@ (800b9ac <drv_spiInitInstance+0x2bc>)
 800b920:	4413      	add	r3, r2
 800b922:	4618      	mov	r0, r3
 800b924:	f00a fb24 	bl	8015f70 <gos_triggerInit>
 800b928:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b92a:	2b55      	cmp	r3, #85	@ 0x55
 800b92c:	d128      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b92e:	7bba      	ldrb	r2, [r7, #14]
 800b930:	4613      	mov	r3, r2
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4a1a      	ldr	r2, [pc, #104]	@ (800b9a4 <drv_spiInitInstance+0x2b4>)
 800b93a:	4413      	add	r3, r2
 800b93c:	4618      	mov	r0, r3
 800b93e:	f00a fb33 	bl	8015fa8 <gos_triggerReset>
 800b942:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800b944:	2b55      	cmp	r3, #85	@ 0x55
 800b946:	d11b      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b948:	7bba      	ldrb	r2, [r7, #14]
 800b94a:	4613      	mov	r3, r2
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4a15      	ldr	r2, [pc, #84]	@ (800b9a8 <drv_spiInitInstance+0x2b8>)
 800b954:	4413      	add	r3, r2
 800b956:	4618      	mov	r0, r3
 800b958:	f00a fb26 	bl	8015fa8 <gos_triggerReset>
 800b95c:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b95e:	2b55      	cmp	r3, #85	@ 0x55
 800b960:	d10e      	bne.n	800b980 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 800b962:	7bba      	ldrb	r2, [r7, #14]
 800b964:	4613      	mov	r3, r2
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a0f      	ldr	r2, [pc, #60]	@ (800b9ac <drv_spiInitInstance+0x2bc>)
 800b96e:	4413      	add	r3, r2
 800b970:	4618      	mov	r0, r3
 800b972:	f00a fb19 	bl	8015fa8 <gos_triggerReset>
 800b976:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800b978:	2b55      	cmp	r3, #85	@ 0x55
 800b97a:	d101      	bne.n	800b980 <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 800b97c:	2355      	movs	r3, #85	@ 0x55
 800b97e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 800b980:	7bfb      	ldrb	r3, [r7, #15]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000360 	.word	0x20000360
 800b990:	24924925 	.word	0x24924925
 800b994:	0801a9d4 	.word	0x0801a9d4
 800b998:	200004d0 	.word	0x200004d0
 800b99c:	2000212c 	.word	0x2000212c
 800b9a0:	2000228c 	.word	0x2000228c
 800b9a4:	2000229c 	.word	0x2000229c
 800b9a8:	200022cc 	.word	0x200022cc
 800b9ac:	200022fc 	.word	0x200022fc

0800b9b0 <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607b      	str	r3, [r7, #4]
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73fb      	strb	r3, [r7, #15]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 800b9c2:	23ae      	movs	r3, #174	@ 0xae
 800b9c4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4a28      	ldr	r2, [pc, #160]	@ (800ba6c <drv_spiTransmitIT+0xbc>)
 800b9cc:	4413      	add	r3, r2
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f008 fa45 	bl	8013e60 <gos_mutexLock>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b55      	cmp	r3, #85	@ 0x55
 800b9da:	d13a      	bne.n	800ba52 <drv_spiTransmitIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	2258      	movs	r2, #88	@ 0x58
 800b9e0:	fb02 f303 	mul.w	r3, r2, r3
 800b9e4:	4a22      	ldr	r2, [pc, #136]	@ (800ba70 <drv_spiTransmitIT+0xc0>)
 800b9e6:	4413      	add	r3, r2
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fa f9cb 	bl	8005d84 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	2258      	movs	r2, #88	@ 0x58
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba70 <drv_spiTransmitIT+0xc0>)
 800b9f8:	4413      	add	r3, r2
 800b9fa:	89ba      	ldrh	r2, [r7, #12]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fa f814 	bl	8005a2c <HAL_SPI_Transmit_IT>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d123      	bne.n	800ba52 <drv_spiTransmitIT+0xa2>
        {
            if (triggerTmo > 0u)
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01e      	beq.n	800ba4e <drv_spiTransmitIT+0x9e>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ba10:	7bfa      	ldrb	r2, [r7, #15]
 800ba12:	4613      	mov	r3, r2
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	4413      	add	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4a16      	ldr	r2, [pc, #88]	@ (800ba74 <drv_spiTransmitIT+0xc4>)
 800ba1c:	4413      	add	r3, r2
 800ba1e:	6a3a      	ldr	r2, [r7, #32]
 800ba20:	2101      	movs	r1, #1
 800ba22:	4618      	mov	r0, r3
 800ba24:	f00a fb18 	bl	8016058 <gos_triggerWait>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b55      	cmp	r3, #85	@ 0x55
 800ba2c:	d111      	bne.n	800ba52 <drv_spiTransmitIT+0xa2>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 800ba2e:	7bfa      	ldrb	r2, [r7, #15]
 800ba30:	4613      	mov	r3, r2
 800ba32:	005b      	lsls	r3, r3, #1
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4a0e      	ldr	r2, [pc, #56]	@ (800ba74 <drv_spiTransmitIT+0xc4>)
 800ba3a:	4413      	add	r3, r2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f00a fab3 	bl	8015fa8 <gos_triggerReset>
 800ba42:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ba44:	2b55      	cmp	r3, #85	@ 0x55
 800ba46:	d104      	bne.n	800ba52 <drv_spiTransmitIT+0xa2>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 800ba48:	2355      	movs	r3, #85	@ 0x55
 800ba4a:	75fb      	strb	r3, [r7, #23]
 800ba4c:	e001      	b.n	800ba52 <drv_spiTransmitIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 800ba4e:	2355      	movs	r3, #85	@ 0x55
 800ba50:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4a05      	ldr	r2, [pc, #20]	@ (800ba6c <drv_spiTransmitIT+0xbc>)
 800ba58:	4413      	add	r3, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f008 fb06 	bl	801406c <gos_mutexUnlock>

    return spiDriverTransmitResult;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	2000228c 	.word	0x2000228c
 800ba70:	2000212c 	.word	0x2000212c
 800ba74:	200022cc 	.word	0x200022cc

0800ba78 <drv_spiReceiveIT>:
 */
gos_result_t drv_spiReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	607b      	str	r3, [r7, #4]
 800ba82:	4603      	mov	r3, r0
 800ba84:	73fb      	strb	r3, [r7, #15]
 800ba86:	4613      	mov	r3, r2
 800ba88:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverReceiveResult = GOS_ERROR;
 800ba8a:	23ae      	movs	r3, #174	@ 0xae
 800ba8c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4a28      	ldr	r2, [pc, #160]	@ (800bb34 <drv_spiReceiveIT+0xbc>)
 800ba94:	4413      	add	r3, r2
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f008 f9e1 	bl	8013e60 <gos_mutexLock>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b55      	cmp	r3, #85	@ 0x55
 800baa2:	d13a      	bne.n	800bb1a <drv_spiReceiveIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	2258      	movs	r2, #88	@ 0x58
 800baa8:	fb02 f303 	mul.w	r3, r2, r3
 800baac:	4a22      	ldr	r2, [pc, #136]	@ (800bb38 <drv_spiReceiveIT+0xc0>)
 800baae:	4413      	add	r3, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fa f967 	bl	8005d84 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Receive_IT(&hspis[instance], pBuffer, size) == HAL_OK)
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	2258      	movs	r2, #88	@ 0x58
 800baba:	fb02 f303 	mul.w	r3, r2, r3
 800babe:	4a1e      	ldr	r2, [pc, #120]	@ (800bb38 <drv_spiReceiveIT+0xc0>)
 800bac0:	4413      	add	r3, r2
 800bac2:	89ba      	ldrh	r2, [r7, #12]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fa f832 	bl	8005b30 <HAL_SPI_Receive_IT>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d123      	bne.n	800bb1a <drv_spiReceiveIT+0xa2>
        {
            if (triggerTmo > 0u)
 800bad2:	6a3b      	ldr	r3, [r7, #32]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d01e      	beq.n	800bb16 <drv_spiReceiveIT+0x9e>
            {
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800bad8:	7bfa      	ldrb	r2, [r7, #15]
 800bada:	4613      	mov	r3, r2
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4a16      	ldr	r2, [pc, #88]	@ (800bb3c <drv_spiReceiveIT+0xc4>)
 800bae4:	4413      	add	r3, r2
 800bae6:	6a3a      	ldr	r2, [r7, #32]
 800bae8:	2101      	movs	r1, #1
 800baea:	4618      	mov	r0, r3
 800baec:	f00a fab4 	bl	8016058 <gos_triggerWait>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b55      	cmp	r3, #85	@ 0x55
 800baf4:	d111      	bne.n	800bb1a <drv_spiReceiveIT+0xa2>
                    gos_triggerReset(&spiRxReadyTriggers[instance])                == GOS_SUCCESS)
 800baf6:	7bfa      	ldrb	r2, [r7, #15]
 800baf8:	4613      	mov	r3, r2
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4a0e      	ldr	r2, [pc, #56]	@ (800bb3c <drv_spiReceiveIT+0xc4>)
 800bb02:	4413      	add	r3, r2
 800bb04:	4618      	mov	r0, r3
 800bb06:	f00a fa4f 	bl	8015fa8 <gos_triggerReset>
 800bb0a:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800bb0c:	2b55      	cmp	r3, #85	@ 0x55
 800bb0e:	d104      	bne.n	800bb1a <drv_spiReceiveIT+0xa2>
                {
                    spiDriverReceiveResult = GOS_SUCCESS;
 800bb10:	2355      	movs	r3, #85	@ 0x55
 800bb12:	75fb      	strb	r3, [r7, #23]
 800bb14:	e001      	b.n	800bb1a <drv_spiReceiveIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverReceiveResult = GOS_SUCCESS;
 800bb16:	2355      	movs	r3, #85	@ 0x55
 800bb18:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4a05      	ldr	r2, [pc, #20]	@ (800bb34 <drv_spiReceiveIT+0xbc>)
 800bb20:	4413      	add	r3, r2
 800bb22:	4618      	mov	r0, r3
 800bb24:	f008 faa2 	bl	801406c <gos_mutexUnlock>

    return spiDriverReceiveResult;
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	2000228c 	.word	0x2000228c
 800bb38:	2000212c 	.word	0x2000212c
 800bb3c:	2000229c 	.word	0x2000229c

0800bb40 <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb8c <HAL_SPI_TxCpltCallback+0x4c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d103      	bne.n	800bb5c <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800bb54:	480e      	ldr	r0, [pc, #56]	@ (800bb90 <HAL_SPI_TxCpltCallback+0x50>)
 800bb56:	f00a fb2f 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800bb5a:	e012      	b.n	800bb82 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	4b0a      	ldr	r3, [pc, #40]	@ (800bb8c <HAL_SPI_TxCpltCallback+0x4c>)
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d103      	bne.n	800bb70 <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800bb68:	480a      	ldr	r0, [pc, #40]	@ (800bb94 <HAL_SPI_TxCpltCallback+0x54>)
 800bb6a:	f00a fb25 	bl	80161b8 <gos_triggerIncrement>
}
 800bb6e:	e008      	b.n	800bb82 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	4b05      	ldr	r3, [pc, #20]	@ (800bb8c <HAL_SPI_TxCpltCallback+0x4c>)
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d102      	bne.n	800bb82 <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800bb7c:	4806      	ldr	r0, [pc, #24]	@ (800bb98 <HAL_SPI_TxCpltCallback+0x58>)
 800bb7e:	f00a fb1b 	bl	80161b8 <gos_triggerIncrement>
}
 800bb82:	bf00      	nop
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	200004d0 	.word	0x200004d0
 800bb90:	200022cc 	.word	0x200022cc
 800bb94:	200022d8 	.word	0x200022d8
 800bb98:	200022e4 	.word	0x200022e4

0800bb9c <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	4b0f      	ldr	r3, [pc, #60]	@ (800bbe8 <HAL_SPI_RxCpltCallback+0x4c>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d103      	bne.n	800bbb8 <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800bbb0:	480e      	ldr	r0, [pc, #56]	@ (800bbec <HAL_SPI_RxCpltCallback+0x50>)
 800bbb2:	f00a fb01 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800bbb6:	e012      	b.n	800bbde <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <HAL_SPI_RxCpltCallback+0x4c>)
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d103      	bne.n	800bbcc <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800bbc4:	480a      	ldr	r0, [pc, #40]	@ (800bbf0 <HAL_SPI_RxCpltCallback+0x54>)
 800bbc6:	f00a faf7 	bl	80161b8 <gos_triggerIncrement>
}
 800bbca:	e008      	b.n	800bbde <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	4b05      	ldr	r3, [pc, #20]	@ (800bbe8 <HAL_SPI_RxCpltCallback+0x4c>)
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d102      	bne.n	800bbde <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800bbd8:	4806      	ldr	r0, [pc, #24]	@ (800bbf4 <HAL_SPI_RxCpltCallback+0x58>)
 800bbda:	f00a faed 	bl	80161b8 <gos_triggerIncrement>
}
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200004d0 	.word	0x200004d0
 800bbec:	2000229c 	.word	0x2000229c
 800bbf0:	200022a8 	.word	0x200022a8
 800bbf4:	200022b4 	.word	0x200022b4

0800bbf8 <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	4b0f      	ldr	r3, [pc, #60]	@ (800bc44 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d103      	bne.n	800bc14 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800bc0c:	480e      	ldr	r0, [pc, #56]	@ (800bc48 <HAL_SPI_TxRxCpltCallback+0x50>)
 800bc0e:	f00a fad3 	bl	80161b8 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800bc12:	e012      	b.n	800bc3a <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	4b0a      	ldr	r3, [pc, #40]	@ (800bc44 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d103      	bne.n	800bc28 <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800bc20:	480a      	ldr	r0, [pc, #40]	@ (800bc4c <HAL_SPI_TxRxCpltCallback+0x54>)
 800bc22:	f00a fac9 	bl	80161b8 <gos_triggerIncrement>
}
 800bc26:	e008      	b.n	800bc3a <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d102      	bne.n	800bc3a <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800bc34:	4806      	ldr	r0, [pc, #24]	@ (800bc50 <HAL_SPI_TxRxCpltCallback+0x58>)
 800bc36:	f00a fabf 	bl	80161b8 <gos_triggerIncrement>
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	200004d0 	.word	0x200004d0
 800bc48:	200022fc 	.word	0x200022fc
 800bc4c:	20002308 	.word	0x20002308
 800bc50:	20002314 	.word	0x20002314

0800bc54 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bc58:	4b16      	ldr	r3, [pc, #88]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d105      	bne.n	800bc6c <SPI1_IRQHandler+0x18>
 800bc60:	4b15      	ldr	r3, [pc, #84]	@ (800bcb8 <SPI1_IRQHandler+0x64>)
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	3301      	adds	r3, #1
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	4b13      	ldr	r3, [pc, #76]	@ (800bcb8 <SPI1_IRQHandler+0x64>)
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	4b11      	ldr	r3, [pc, #68]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	3301      	adds	r3, #1
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc76:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 800bc78:	4810      	ldr	r0, [pc, #64]	@ (800bcbc <SPI1_IRQHandler+0x68>)
 800bc7a:	f7fa f97d 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bc7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d005      	beq.n	800bc92 <SPI1_IRQHandler+0x3e>
 800bc86:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	4b09      	ldr	r3, [pc, #36]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc90:	701a      	strb	r2, [r3, #0]
 800bc92:	4b08      	ldr	r3, [pc, #32]	@ (800bcb4 <SPI1_IRQHandler+0x60>)
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d109      	bne.n	800bcae <SPI1_IRQHandler+0x5a>
 800bc9a:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <SPI1_IRQHandler+0x64>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d005      	beq.n	800bcae <SPI1_IRQHandler+0x5a>
 800bca2:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <SPI1_IRQHandler+0x64>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b03      	ldr	r3, [pc, #12]	@ (800bcb8 <SPI1_IRQHandler+0x64>)
 800bcac:	701a      	strb	r2, [r3, #0]
}
 800bcae:	bf00      	nop
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20005e52 	.word	0x20005e52
 800bcb8:	20005e51 	.word	0x20005e51
 800bcbc:	2000212c 	.word	0x2000212c

0800bcc0 <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bcc4:	4b16      	ldr	r3, [pc, #88]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d105      	bne.n	800bcd8 <SPI2_IRQHandler+0x18>
 800bccc:	4b15      	ldr	r3, [pc, #84]	@ (800bd24 <SPI2_IRQHandler+0x64>)
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	4b13      	ldr	r3, [pc, #76]	@ (800bd24 <SPI2_IRQHandler+0x64>)
 800bcd6:	701a      	strb	r2, [r3, #0]
 800bcd8:	4b11      	ldr	r3, [pc, #68]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	4b0f      	ldr	r3, [pc, #60]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bce2:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 800bce4:	4810      	ldr	r0, [pc, #64]	@ (800bd28 <SPI2_IRQHandler+0x68>)
 800bce6:	f7fa f947 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bcea:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d005      	beq.n	800bcfe <SPI2_IRQHandler+0x3e>
 800bcf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b09      	ldr	r3, [pc, #36]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	4b08      	ldr	r3, [pc, #32]	@ (800bd20 <SPI2_IRQHandler+0x60>)
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d109      	bne.n	800bd1a <SPI2_IRQHandler+0x5a>
 800bd06:	4b07      	ldr	r3, [pc, #28]	@ (800bd24 <SPI2_IRQHandler+0x64>)
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d005      	beq.n	800bd1a <SPI2_IRQHandler+0x5a>
 800bd0e:	4b05      	ldr	r3, [pc, #20]	@ (800bd24 <SPI2_IRQHandler+0x64>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	4b03      	ldr	r3, [pc, #12]	@ (800bd24 <SPI2_IRQHandler+0x64>)
 800bd18:	701a      	strb	r2, [r3, #0]
}
 800bd1a:	bf00      	nop
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20005e52 	.word	0x20005e52
 800bd24:	20005e51 	.word	0x20005e51
 800bd28:	20002184 	.word	0x20002184

0800bd2c <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bd30:	4b16      	ldr	r3, [pc, #88]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d105      	bne.n	800bd44 <SPI3_IRQHandler+0x18>
 800bd38:	4b15      	ldr	r3, [pc, #84]	@ (800bd90 <SPI3_IRQHandler+0x64>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	4b13      	ldr	r3, [pc, #76]	@ (800bd90 <SPI3_IRQHandler+0x64>)
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	4b11      	ldr	r3, [pc, #68]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd4e:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 800bd50:	4810      	ldr	r0, [pc, #64]	@ (800bd94 <SPI3_IRQHandler+0x68>)
 800bd52:	f7fa f911 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bd56:	4b0d      	ldr	r3, [pc, #52]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d005      	beq.n	800bd6a <SPI3_IRQHandler+0x3e>
 800bd5e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	4b09      	ldr	r3, [pc, #36]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd68:	701a      	strb	r2, [r3, #0]
 800bd6a:	4b08      	ldr	r3, [pc, #32]	@ (800bd8c <SPI3_IRQHandler+0x60>)
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d109      	bne.n	800bd86 <SPI3_IRQHandler+0x5a>
 800bd72:	4b07      	ldr	r3, [pc, #28]	@ (800bd90 <SPI3_IRQHandler+0x64>)
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d005      	beq.n	800bd86 <SPI3_IRQHandler+0x5a>
 800bd7a:	4b05      	ldr	r3, [pc, #20]	@ (800bd90 <SPI3_IRQHandler+0x64>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	4b03      	ldr	r3, [pc, #12]	@ (800bd90 <SPI3_IRQHandler+0x64>)
 800bd84:	701a      	strb	r2, [r3, #0]
}
 800bd86:	bf00      	nop
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20005e52 	.word	0x20005e52
 800bd90:	20005e51 	.word	0x20005e51
 800bd94:	200021dc 	.word	0x200021dc

0800bd98 <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800bd9c:	4b16      	ldr	r3, [pc, #88]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d105      	bne.n	800bdb0 <SPI4_IRQHandler+0x18>
 800bda4:	4b15      	ldr	r3, [pc, #84]	@ (800bdfc <SPI4_IRQHandler+0x64>)
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	4b13      	ldr	r3, [pc, #76]	@ (800bdfc <SPI4_IRQHandler+0x64>)
 800bdae:	701a      	strb	r2, [r3, #0]
 800bdb0:	4b11      	ldr	r3, [pc, #68]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bdba:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 800bdbc:	4810      	ldr	r0, [pc, #64]	@ (800be00 <SPI4_IRQHandler+0x68>)
 800bdbe:	f7fa f8db 	bl	8005f78 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <SPI4_IRQHandler+0x3e>
 800bdca:	4b0b      	ldr	r3, [pc, #44]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	4b09      	ldr	r3, [pc, #36]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	4b08      	ldr	r3, [pc, #32]	@ (800bdf8 <SPI4_IRQHandler+0x60>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <SPI4_IRQHandler+0x5a>
 800bdde:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <SPI4_IRQHandler+0x64>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d005      	beq.n	800bdf2 <SPI4_IRQHandler+0x5a>
 800bde6:	4b05      	ldr	r3, [pc, #20]	@ (800bdfc <SPI4_IRQHandler+0x64>)
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	4b03      	ldr	r3, [pc, #12]	@ (800bdfc <SPI4_IRQHandler+0x64>)
 800bdf0:	701a      	strb	r2, [r3, #0]
}
 800bdf2:	bf00      	nop
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20005e52 	.word	0x20005e52
 800bdfc:	20005e51 	.word	0x20005e51
 800be00:	20002234 	.word	0x20002234

0800be04 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 800be0c:	2300      	movs	r3, #0
 800be0e:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800be10:	2300      	movs	r3, #0
 800be12:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800be14:	2300      	movs	r3, #0
 800be16:	73fb      	strb	r3, [r7, #15]
 800be18:	e068      	b.n	800beec <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	4a38      	ldr	r2, [pc, #224]	@ (800bf00 <HAL_SPI_MspInit+0xfc>)
 800be1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d15d      	bne.n	800bee6 <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800be2a:	2300      	movs	r3, #0
 800be2c:	73bb      	strb	r3, [r7, #14]
 800be2e:	e051      	b.n	800bed4 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 800be30:	7bba      	ldrb	r2, [r7, #14]
 800be32:	4934      	ldr	r1, [pc, #208]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800be34:	4613      	mov	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	1a9b      	subs	r3, r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	440b      	add	r3, r1
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	7bfa      	ldrb	r2, [r7, #15]
 800be42:	429a      	cmp	r2, r3
 800be44:	d143      	bne.n	800bece <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 800be46:	7bba      	ldrb	r2, [r7, #14]
 800be48:	492e      	ldr	r1, [pc, #184]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800be4a:	4613      	mov	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	1a9b      	subs	r3, r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	440b      	add	r3, r1
 800be54:	3330      	adds	r3, #48	@ 0x30
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d016      	beq.n	800be8a <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 800be5c:	7bba      	ldrb	r2, [r7, #14]
 800be5e:	4929      	ldr	r1, [pc, #164]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800be60:	4613      	mov	r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	1a9b      	subs	r3, r3, r2
 800be66:	00db      	lsls	r3, r3, #3
 800be68:	440b      	add	r3, r1
 800be6a:	3330      	adds	r3, #48	@ 0x30
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	1d1a      	adds	r2, r3, #4
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	64da      	str	r2, [r3, #76]	@ 0x4c
 800be74:	7bba      	ldrb	r2, [r7, #14]
 800be76:	4923      	ldr	r1, [pc, #140]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800be78:	4613      	mov	r3, r2
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	1a9b      	subs	r3, r3, r2
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	440b      	add	r3, r1
 800be82:	3330      	adds	r3, #48	@ 0x30
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 800be8a:	7bba      	ldrb	r2, [r7, #14]
 800be8c:	491d      	ldr	r1, [pc, #116]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800be8e:	4613      	mov	r3, r2
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	440b      	add	r3, r1
 800be98:	3334      	adds	r3, #52	@ 0x34
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d016      	beq.n	800bece <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 800bea0:	7bba      	ldrb	r2, [r7, #14]
 800bea2:	4918      	ldr	r1, [pc, #96]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800bea4:	4613      	mov	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	440b      	add	r3, r1
 800beae:	3334      	adds	r3, #52	@ 0x34
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	1d1a      	adds	r2, r3, #4
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	649a      	str	r2, [r3, #72]	@ 0x48
 800beb8:	7bba      	ldrb	r2, [r7, #14]
 800beba:	4912      	ldr	r1, [pc, #72]	@ (800bf04 <HAL_SPI_MspInit+0x100>)
 800bebc:	4613      	mov	r3, r2
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	1a9b      	subs	r3, r3, r2
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	440b      	add	r3, r1
 800bec6:	3334      	adds	r3, #52	@ 0x34
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800bece:	7bbb      	ldrb	r3, [r7, #14]
 800bed0:	3301      	adds	r3, #1
 800bed2:	73bb      	strb	r3, [r7, #14]
 800bed4:	7bbb      	ldrb	r3, [r7, #14]
 800bed6:	4a0c      	ldr	r2, [pc, #48]	@ (800bf08 <HAL_SPI_MspInit+0x104>)
 800bed8:	6812      	ldr	r2, [r2, #0]
 800beda:	08d2      	lsrs	r2, r2, #3
 800bedc:	490b      	ldr	r1, [pc, #44]	@ (800bf0c <HAL_SPI_MspInit+0x108>)
 800bede:	fba1 1202 	umull	r1, r2, r1, r2
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d3a4      	bcc.n	800be30 <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
 800bee8:	3301      	adds	r3, #1
 800beea:	73fb      	strb	r3, [r7, #15]
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d993      	bls.n	800be1a <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800bef2:	bf00      	nop
 800bef4:	bf00      	nop
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	200004d0 	.word	0x200004d0
 800bf04:	0801a9d4 	.word	0x0801a9d4
 800bf08:	20000360 	.word	0x20000360
 800bf0c:	24924925 	.word	0x24924925

0800bf10 <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800bf1c:	23ae      	movs	r3, #174	@ 0xae
 800bf1e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800bf24:	4b0a      	ldr	r3, [pc, #40]	@ (800bf50 <drv_sysmonTransmit+0x40>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 800bf2a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf54 <drv_sysmonTransmit+0x44>)
 800bf2c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bf2e:	4b09      	ldr	r3, [pc, #36]	@ (800bf54 <drv_sysmonTransmit+0x44>)
 800bf30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf32:	887a      	ldrh	r2, [r7, #2]
 800bf34:	7bb8      	ldrb	r0, [r7, #14]
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	f000 feae 	bl	800cc9c <drv_uartTransmitIT>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	0801aa88 	.word	0x0801aa88
 800bf54:	200003d0 	.word	0x200003d0

0800bf58 <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800bf64:	23ae      	movs	r3, #174	@ 0xae
 800bf66:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <drv_sysmonReceive+0x40>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 800bf72:	4b0a      	ldr	r3, [pc, #40]	@ (800bf9c <drv_sysmonReceive+0x44>)
 800bf74:	69d9      	ldr	r1, [r3, #28]
 800bf76:	4b09      	ldr	r3, [pc, #36]	@ (800bf9c <drv_sysmonReceive+0x44>)
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	887a      	ldrh	r2, [r7, #2]
 800bf7c:	7bb8      	ldrb	r0, [r7, #14]
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	460b      	mov	r3, r1
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	f000 fe1a 	bl	800cbbc <drv_uartReceiveDMA>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	0801aa88 	.word	0x0801aa88
 800bf9c:	200003d0 	.word	0x200003d0

0800bfa0 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 800bfa6:	23ae      	movs	r3, #174	@ 0xae
 800bfa8:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800bfae:	4b08      	ldr	r3, [pc, #32]	@ (800bfd0 <drv_systimerStart+0x30>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 800bfb4:	79bb      	ldrb	r3, [r7, #6]
 800bfb6:	f04f 31ff 	mov.w	r1, #4294967295
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f000 f9a2 	bl	800c304 <drv_tmrStart>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	0801aa0c 	.word	0x0801aa0c

0800bfd4 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 800bfdc:	23ae      	movs	r3, #174	@ 0xae
 800bfde:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00f      	beq.n	800c00e <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800bfee:	4b0a      	ldr	r3, [pc, #40]	@ (800c018 <drv_systimerGetValue+0x44>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 800bff4:	f107 0208 	add.w	r2, r7, #8
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	4611      	mov	r1, r2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 f9b3 	bl	800c368 <drv_tmrGetValue>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	b29a      	uxth	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	0801aa0c 	.word	0x0801aa0c

0800c01c <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 800c022:	2355      	movs	r3, #85	@ 0x55
 800c024:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 800c026:	2300      	movs	r3, #0
 800c028:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800c02a:	2300      	movs	r3, #0
 800c02c:	71bb      	strb	r3, [r7, #6]
 800c02e:	e00e      	b.n	800c04e <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	2b55      	cmp	r3, #85	@ 0x55
 800c034:	d106      	bne.n	800c044 <drv_tmrInit+0x28>
 800c036:	79bb      	ldrb	r3, [r7, #6]
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 f81b 	bl	800c074 <drv_tmrInitInstance>
 800c03e:	4603      	mov	r3, r0
 800c040:	71fb      	strb	r3, [r7, #7]
 800c042:	e001      	b.n	800c048 <drv_tmrInit+0x2c>
 800c044:	23ae      	movs	r3, #174	@ 0xae
 800c046:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800c048:	79bb      	ldrb	r3, [r7, #6]
 800c04a:	3301      	adds	r3, #1
 800c04c:	71bb      	strb	r3, [r7, #6]
 800c04e:	79ba      	ldrb	r2, [r7, #6]
 800c050:	4b06      	ldr	r3, [pc, #24]	@ (800c06c <drv_tmrInit+0x50>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4906      	ldr	r1, [pc, #24]	@ (800c070 <drv_tmrInit+0x54>)
 800c056:	fba1 1303 	umull	r1, r3, r1, r3
 800c05a:	091b      	lsrs	r3, r3, #4
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d3e7      	bcc.n	800c030 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 800c060:	79fb      	ldrb	r3, [r7, #7]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3708      	adds	r7, #8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	200003cc 	.word	0x200003cc
 800c070:	4ec4ec4f 	.word	0x4ec4ec4f

0800c074 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b08a      	sub	sp, #40	@ 0x28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 800c07e:	23ae      	movs	r3, #174	@ 0xae
 800c080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 800c084:	2300      	movs	r3, #0
 800c086:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 800c08a:	f107 031c 	add.w	r3, r7, #28
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 800c094:	f107 030c 	add.w	r3, r7, #12
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	605a      	str	r2, [r3, #4]
 800c09e:	609a      	str	r2, [r3, #8]
 800c0a0:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 800c0a2:	79fa      	ldrb	r2, [r7, #7]
 800c0a4:	4b90      	ldr	r3, [pc, #576]	@ (800c2e8 <drv_tmrInitInstance+0x274>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4990      	ldr	r1, [pc, #576]	@ (800c2ec <drv_tmrInitInstance+0x278>)
 800c0aa:	fba1 1303 	umull	r1, r3, r1, r3
 800c0ae:	091b      	lsrs	r3, r3, #4
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	f080 8112 	bcs.w	800c2da <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 800c0b6:	79fb      	ldrb	r3, [r7, #7]
 800c0b8:	4a8d      	ldr	r2, [pc, #564]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c0ba:	2134      	movs	r1, #52	@ 0x34
 800c0bc:	fb01 f303 	mul.w	r3, r1, r3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 800c0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0d0:	4988      	ldr	r1, [pc, #544]	@ (800c2f4 <drv_tmrInitInstance+0x280>)
 800c0d2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c0d6:	4888      	ldr	r0, [pc, #544]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c0d8:	4613      	mov	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	4413      	add	r3, r2
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	4403      	add	r3, r0
 800c0e2:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0ea:	4981      	ldr	r1, [pc, #516]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c0ec:	2034      	movs	r0, #52	@ 0x34
 800c0ee:	fb00 f303 	mul.w	r3, r0, r3
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3318      	adds	r3, #24
 800c0f6:	6819      	ldr	r1, [r3, #0]
 800c0f8:	487f      	ldr	r0, [pc, #508]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	4413      	add	r3, r2
 800c100:	00db      	lsls	r3, r3, #3
 800c102:	4403      	add	r3, r0
 800c104:	3318      	adds	r3, #24
 800c106:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 800c108:	79fb      	ldrb	r3, [r7, #7]
 800c10a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c10e:	4978      	ldr	r1, [pc, #480]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c110:	2034      	movs	r0, #52	@ 0x34
 800c112:	fb00 f303 	mul.w	r3, r0, r3
 800c116:	440b      	add	r3, r1
 800c118:	3314      	adds	r3, #20
 800c11a:	6819      	ldr	r1, [r3, #0]
 800c11c:	4876      	ldr	r0, [pc, #472]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c11e:	4613      	mov	r3, r2
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4403      	add	r3, r0
 800c128:	3310      	adds	r3, #16
 800c12a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c132:	496f      	ldr	r1, [pc, #444]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c134:	2034      	movs	r0, #52	@ 0x34
 800c136:	fb00 f303 	mul.w	r3, r0, r3
 800c13a:	440b      	add	r3, r1
 800c13c:	330c      	adds	r3, #12
 800c13e:	6819      	ldr	r1, [r3, #0]
 800c140:	486d      	ldr	r0, [pc, #436]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c142:	4613      	mov	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	4403      	add	r3, r0
 800c14c:	3308      	adds	r3, #8
 800c14e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c156:	4966      	ldr	r1, [pc, #408]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c158:	2034      	movs	r0, #52	@ 0x34
 800c15a:	fb00 f303 	mul.w	r3, r0, r3
 800c15e:	440b      	add	r3, r1
 800c160:	3310      	adds	r3, #16
 800c162:	6819      	ldr	r1, [r3, #0]
 800c164:	4864      	ldr	r0, [pc, #400]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c166:	4613      	mov	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	4413      	add	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	4403      	add	r3, r0
 800c170:	330c      	adds	r3, #12
 800c172:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c17a:	495d      	ldr	r1, [pc, #372]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c17c:	2034      	movs	r0, #52	@ 0x34
 800c17e:	fb00 f303 	mul.w	r3, r0, r3
 800c182:	440b      	add	r3, r1
 800c184:	3304      	adds	r3, #4
 800c186:	6819      	ldr	r1, [r3, #0]
 800c188:	485b      	ldr	r0, [pc, #364]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c18a:	4613      	mov	r3, r2
 800c18c:	00db      	lsls	r3, r3, #3
 800c18e:	4413      	add	r3, r2
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	4403      	add	r3, r0
 800c194:	3304      	adds	r3, #4
 800c196:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c19e:	4954      	ldr	r1, [pc, #336]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c1a0:	2034      	movs	r0, #52	@ 0x34
 800c1a2:	fb00 f303 	mul.w	r3, r0, r3
 800c1a6:	440b      	add	r3, r1
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	6819      	ldr	r1, [r3, #0]
 800c1ac:	4852      	ldr	r0, [pc, #328]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	00db      	lsls	r3, r3, #3
 800c1b2:	4413      	add	r3, r2
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	4403      	add	r3, r0
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 800c1bc:	79fb      	ldrb	r3, [r7, #7]
 800c1be:	4a4c      	ldr	r2, [pc, #304]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c1c0:	2134      	movs	r1, #52	@ 0x34
 800c1c2:	fb01 f303 	mul.w	r3, r1, r3
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3328      	adds	r3, #40	@ 0x28
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 800c1ce:	79fb      	ldrb	r3, [r7, #7]
 800c1d0:	4a47      	ldr	r2, [pc, #284]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c1d2:	2134      	movs	r1, #52	@ 0x34
 800c1d4:	fb01 f303 	mul.w	r3, r1, r3
 800c1d8:	4413      	add	r3, r2
 800c1da:	332c      	adds	r3, #44	@ 0x2c
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 800c1e0:	79fb      	ldrb	r3, [r7, #7]
 800c1e2:	4a43      	ldr	r2, [pc, #268]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c1e4:	2134      	movs	r1, #52	@ 0x34
 800c1e6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ea:	4413      	add	r3, r2
 800c1ec:	3320      	adds	r3, #32
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800c1f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	4413      	add	r3, r2
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	4a3e      	ldr	r2, [pc, #248]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c200:	4413      	add	r3, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7fa fc76 	bl	8006af4 <HAL_TIM_Base_Init>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d165      	bne.n	800c2da <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800c20e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4a39      	ldr	r2, [pc, #228]	@ (800c2fc <drv_tmrInitInstance+0x288>)
 800c216:	4413      	add	r3, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f007 fe07 	bl	8013e2c <gos_mutexInit>
 800c21e:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800c220:	2b55      	cmp	r3, #85	@ 0x55
 800c222:	d15a      	bne.n	800c2da <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800c224:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4a33      	ldr	r2, [pc, #204]	@ (800c300 <drv_tmrInitInstance+0x28c>)
 800c232:	4413      	add	r3, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f009 fe9b 	bl	8015f70 <gos_triggerInit>
 800c23a:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800c23c:	2b55      	cmp	r3, #85	@ 0x55
 800c23e:	d14c      	bne.n	800c2da <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 800c240:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c244:	4613      	mov	r3, r2
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4a2c      	ldr	r2, [pc, #176]	@ (800c300 <drv_tmrInitInstance+0x28c>)
 800c24e:	4413      	add	r3, r2
 800c250:	4618      	mov	r0, r3
 800c252:	f009 fea9 	bl	8015fa8 <gos_triggerReset>
 800c256:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800c258:	2b55      	cmp	r3, #85	@ 0x55
 800c25a:	d13e      	bne.n	800c2da <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 800c25c:	2355      	movs	r3, #85	@ 0x55
 800c25e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	4a22      	ldr	r2, [pc, #136]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c266:	2134      	movs	r1, #52	@ 0x34
 800c268:	fb01 f303 	mul.w	r3, r1, r3
 800c26c:	4413      	add	r3, r2
 800c26e:	331c      	adds	r3, #28
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b36      	cmp	r3, #54	@ 0x36
 800c274:	d113      	bne.n	800c29e <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 800c276:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c27a:	4613      	mov	r3, r2
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c284:	4413      	add	r3, r2
 800c286:	f107 020c 	add.w	r2, r7, #12
 800c28a:	4611      	mov	r1, r2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fa fd92 	bl	8006db6 <HAL_TIM_ConfigClockSource>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 800c298:	23ae      	movs	r3, #174	@ 0xae
 800c29a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	4a13      	ldr	r2, [pc, #76]	@ (800c2f0 <drv_tmrInitInstance+0x27c>)
 800c2a2:	2134      	movs	r1, #52	@ 0x34
 800c2a4:	fb01 f303 	mul.w	r3, r1, r3
 800c2a8:	4413      	add	r3, r2
 800c2aa:	3324      	adds	r3, #36	@ 0x24
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b36      	cmp	r3, #54	@ 0x36
 800c2b0:	d113      	bne.n	800c2da <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 800c2b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	4413      	add	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	4a0e      	ldr	r2, [pc, #56]	@ (800c2f8 <drv_tmrInitInstance+0x284>)
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f107 021c 	add.w	r2, r7, #28
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fa ff9b 	bl	8007204 <HAL_TIMEx_MasterConfigSynchronization>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 800c2d4:	23ae      	movs	r3, #174	@ 0xae
 800c2d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 800c2da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3728      	adds	r7, #40	@ 0x28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	200003cc 	.word	0x200003cc
 800c2ec:	4ec4ec4f 	.word	0x4ec4ec4f
 800c2f0:	20000364 	.word	0x20000364
 800c2f4:	200004e0 	.word	0x200004e0
 800c2f8:	2000232c 	.word	0x2000232c
 800c2fc:	2000271c 	.word	0x2000271c
 800c300:	20002754 	.word	0x20002754

0800c304 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	6039      	str	r1, [r7, #0]
 800c30e:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 800c310:	23ae      	movs	r3, #174	@ 0xae
 800c312:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4a11      	ldr	r2, [pc, #68]	@ (800c360 <drv_tmrStart+0x5c>)
 800c31a:	4413      	add	r3, r2
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	4618      	mov	r0, r3
 800c320:	f007 fd9e 	bl	8013e60 <gos_mutexLock>
 800c324:	4603      	mov	r3, r0
 800c326:	2b55      	cmp	r3, #85	@ 0x55
 800c328:	d10e      	bne.n	800c348 <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 800c32a:	79fa      	ldrb	r2, [r7, #7]
 800c32c:	4613      	mov	r3, r2
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	4413      	add	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	4a0b      	ldr	r2, [pc, #44]	@ (800c364 <drv_tmrStart+0x60>)
 800c336:	4413      	add	r3, r2
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fa fc10 	bl	8006b5e <HAL_TIM_Base_Start>
 800c33e:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 800c344:	2355      	movs	r3, #85	@ 0x55
 800c346:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4a04      	ldr	r2, [pc, #16]	@ (800c360 <drv_tmrStart+0x5c>)
 800c34e:	4413      	add	r3, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f007 fe8b 	bl	801406c <gos_mutexUnlock>

    return tmrStartResult;
 800c356:	7bfb      	ldrb	r3, [r7, #15]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	2000271c 	.word	0x2000271c
 800c364:	2000232c 	.word	0x2000232c

0800c368 <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	6039      	str	r1, [r7, #0]
 800c372:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 800c374:	23ae      	movs	r3, #174	@ 0xae
 800c376:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00c      	beq.n	800c398 <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 800c37e:	79fa      	ldrb	r2, [r7, #7]
 800c380:	4909      	ldr	r1, [pc, #36]	@ (800c3a8 <drv_tmrGetValue+0x40>)
 800c382:	4613      	mov	r3, r2
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	4413      	add	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	440b      	add	r3, r1
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 800c394:	2355      	movs	r3, #85	@ 0x55
 800c396:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	2000232c 	.word	0x2000232c

0800c3ac <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d041      	beq.n	800c446 <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
 800c3c6:	e03a      	b.n	800c43e <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	4a21      	ldr	r2, [pc, #132]	@ (800c450 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800c3cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d12f      	bne.n	800c438 <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73bb      	strb	r3, [r7, #14]
 800c3dc:	e020      	b.n	800c420 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
 800c3e0:	4a1c      	ldr	r2, [pc, #112]	@ (800c454 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c3e2:	2134      	movs	r1, #52	@ 0x34
 800c3e4:	fb01 f303 	mul.w	r3, r1, r3
 800c3e8:	4413      	add	r3, r2
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	7bfa      	ldrb	r2, [r7, #15]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d113      	bne.n	800c41a <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	4a17      	ldr	r2, [pc, #92]	@ (800c454 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c3f6:	2134      	movs	r1, #52	@ 0x34
 800c3f8:	fb01 f303 	mul.w	r3, r1, r3
 800c3fc:	4413      	add	r3, r2
 800c3fe:	3330      	adds	r3, #48	@ 0x30
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d016      	beq.n	800c434 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	4a12      	ldr	r2, [pc, #72]	@ (800c454 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800c40a:	2134      	movs	r1, #52	@ 0x34
 800c40c:	fb01 f303 	mul.w	r3, r1, r3
 800c410:	4413      	add	r3, r2
 800c412:	3330      	adds	r3, #48	@ 0x30
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 800c418:	e00c      	b.n	800c434 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	3301      	adds	r3, #1
 800c41e:	73bb      	strb	r3, [r7, #14]
 800c420:	7bba      	ldrb	r2, [r7, #14]
 800c422:	4b0d      	ldr	r3, [pc, #52]	@ (800c458 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	490d      	ldr	r1, [pc, #52]	@ (800c45c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800c428:	fba1 1303 	umull	r1, r3, r1, r3
 800c42c:	091b      	lsrs	r3, r3, #4
 800c42e:	429a      	cmp	r2, r3
 800c430:	d3d5      	bcc.n	800c3de <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 800c432:	e008      	b.n	800c446 <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 800c434:	bf00      	nop
                break;
 800c436:	e006      	b.n	800c446 <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800c438:	7bfb      	ldrb	r3, [r7, #15]
 800c43a:	3301      	adds	r3, #1
 800c43c:	73fb      	strb	r3, [r7, #15]
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
 800c440:	2b0d      	cmp	r3, #13
 800c442:	d9c1      	bls.n	800c3c8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 800c444:	e7ff      	b.n	800c446 <HAL_TIM_PeriodElapsedCallback+0x9a>
 800c446:	bf00      	nop
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	200004e0 	.word	0x200004e0
 800c454:	20000364 	.word	0x20000364
 800c458:	200003cc 	.word	0x200003cc
 800c45c:	4ec4ec4f 	.word	0x4ec4ec4f

0800c460 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c464:	4b16      	ldr	r3, [pc, #88]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d105      	bne.n	800c478 <TIM2_IRQHandler+0x18>
 800c46c:	4b15      	ldr	r3, [pc, #84]	@ (800c4c4 <TIM2_IRQHandler+0x64>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	b2da      	uxtb	r2, r3
 800c474:	4b13      	ldr	r3, [pc, #76]	@ (800c4c4 <TIM2_IRQHandler+0x64>)
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	4b11      	ldr	r3, [pc, #68]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	3301      	adds	r3, #1
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c482:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 800c484:	4810      	ldr	r0, [pc, #64]	@ (800c4c8 <TIM2_IRQHandler+0x68>)
 800c486:	f7fa fb8e 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c48a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <TIM2_IRQHandler+0x3e>
 800c492:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	3b01      	subs	r3, #1
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b09      	ldr	r3, [pc, #36]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	4b08      	ldr	r3, [pc, #32]	@ (800c4c0 <TIM2_IRQHandler+0x60>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <TIM2_IRQHandler+0x5a>
 800c4a6:	4b07      	ldr	r3, [pc, #28]	@ (800c4c4 <TIM2_IRQHandler+0x64>)
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <TIM2_IRQHandler+0x5a>
 800c4ae:	4b05      	ldr	r3, [pc, #20]	@ (800c4c4 <TIM2_IRQHandler+0x64>)
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	4b03      	ldr	r3, [pc, #12]	@ (800c4c4 <TIM2_IRQHandler+0x64>)
 800c4b8:	701a      	strb	r2, [r3, #0]
}
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	20005e52 	.word	0x20005e52
 800c4c4:	20005e51 	.word	0x20005e51
 800c4c8:	20002374 	.word	0x20002374

0800c4cc <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c4d0:	4b16      	ldr	r3, [pc, #88]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d105      	bne.n	800c4e4 <TIM3_IRQHandler+0x18>
 800c4d8:	4b15      	ldr	r3, [pc, #84]	@ (800c530 <TIM3_IRQHandler+0x64>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	4b13      	ldr	r3, [pc, #76]	@ (800c530 <TIM3_IRQHandler+0x64>)
 800c4e2:	701a      	strb	r2, [r3, #0]
 800c4e4:	4b11      	ldr	r3, [pc, #68]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c4ee:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 800c4f0:	4810      	ldr	r0, [pc, #64]	@ (800c534 <TIM3_IRQHandler+0x68>)
 800c4f2:	f7fa fb58 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <TIM3_IRQHandler+0x3e>
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	3b01      	subs	r3, #1
 800c504:	b2da      	uxtb	r2, r3
 800c506:	4b09      	ldr	r3, [pc, #36]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c508:	701a      	strb	r2, [r3, #0]
 800c50a:	4b08      	ldr	r3, [pc, #32]	@ (800c52c <TIM3_IRQHandler+0x60>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <TIM3_IRQHandler+0x5a>
 800c512:	4b07      	ldr	r3, [pc, #28]	@ (800c530 <TIM3_IRQHandler+0x64>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d005      	beq.n	800c526 <TIM3_IRQHandler+0x5a>
 800c51a:	4b05      	ldr	r3, [pc, #20]	@ (800c530 <TIM3_IRQHandler+0x64>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	3b01      	subs	r3, #1
 800c520:	b2da      	uxtb	r2, r3
 800c522:	4b03      	ldr	r3, [pc, #12]	@ (800c530 <TIM3_IRQHandler+0x64>)
 800c524:	701a      	strb	r2, [r3, #0]
}
 800c526:	bf00      	nop
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20005e52 	.word	0x20005e52
 800c530:	20005e51 	.word	0x20005e51
 800c534:	200023bc 	.word	0x200023bc

0800c538 <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c53c:	4b16      	ldr	r3, [pc, #88]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d105      	bne.n	800c550 <TIM4_IRQHandler+0x18>
 800c544:	4b15      	ldr	r3, [pc, #84]	@ (800c59c <TIM4_IRQHandler+0x64>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	3301      	adds	r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	4b13      	ldr	r3, [pc, #76]	@ (800c59c <TIM4_IRQHandler+0x64>)
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	4b11      	ldr	r3, [pc, #68]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	b2da      	uxtb	r2, r3
 800c558:	4b0f      	ldr	r3, [pc, #60]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c55a:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 800c55c:	4810      	ldr	r0, [pc, #64]	@ (800c5a0 <TIM4_IRQHandler+0x68>)
 800c55e:	f7fa fb22 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c562:	4b0d      	ldr	r3, [pc, #52]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d005      	beq.n	800c576 <TIM4_IRQHandler+0x3e>
 800c56a:	4b0b      	ldr	r3, [pc, #44]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	3b01      	subs	r3, #1
 800c570:	b2da      	uxtb	r2, r3
 800c572:	4b09      	ldr	r3, [pc, #36]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c574:	701a      	strb	r2, [r3, #0]
 800c576:	4b08      	ldr	r3, [pc, #32]	@ (800c598 <TIM4_IRQHandler+0x60>)
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d109      	bne.n	800c592 <TIM4_IRQHandler+0x5a>
 800c57e:	4b07      	ldr	r3, [pc, #28]	@ (800c59c <TIM4_IRQHandler+0x64>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d005      	beq.n	800c592 <TIM4_IRQHandler+0x5a>
 800c586:	4b05      	ldr	r3, [pc, #20]	@ (800c59c <TIM4_IRQHandler+0x64>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	3b01      	subs	r3, #1
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b03      	ldr	r3, [pc, #12]	@ (800c59c <TIM4_IRQHandler+0x64>)
 800c590:	701a      	strb	r2, [r3, #0]
}
 800c592:	bf00      	nop
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20005e52 	.word	0x20005e52
 800c59c:	20005e51 	.word	0x20005e51
 800c5a0:	20002404 	.word	0x20002404

0800c5a4 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c5a8:	4b16      	ldr	r3, [pc, #88]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d105      	bne.n	800c5bc <TIM5_IRQHandler+0x18>
 800c5b0:	4b15      	ldr	r3, [pc, #84]	@ (800c608 <TIM5_IRQHandler+0x64>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	4b13      	ldr	r3, [pc, #76]	@ (800c608 <TIM5_IRQHandler+0x64>)
 800c5ba:	701a      	strb	r2, [r3, #0]
 800c5bc:	4b11      	ldr	r3, [pc, #68]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5c6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 800c5c8:	4810      	ldr	r0, [pc, #64]	@ (800c60c <TIM5_IRQHandler+0x68>)
 800c5ca:	f7fa faec 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d005      	beq.n	800c5e2 <TIM5_IRQHandler+0x3e>
 800c5d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	4b09      	ldr	r3, [pc, #36]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5e0:	701a      	strb	r2, [r3, #0]
 800c5e2:	4b08      	ldr	r3, [pc, #32]	@ (800c604 <TIM5_IRQHandler+0x60>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d109      	bne.n	800c5fe <TIM5_IRQHandler+0x5a>
 800c5ea:	4b07      	ldr	r3, [pc, #28]	@ (800c608 <TIM5_IRQHandler+0x64>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d005      	beq.n	800c5fe <TIM5_IRQHandler+0x5a>
 800c5f2:	4b05      	ldr	r3, [pc, #20]	@ (800c608 <TIM5_IRQHandler+0x64>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	b2da      	uxtb	r2, r3
 800c5fa:	4b03      	ldr	r3, [pc, #12]	@ (800c608 <TIM5_IRQHandler+0x64>)
 800c5fc:	701a      	strb	r2, [r3, #0]
}
 800c5fe:	bf00      	nop
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20005e52 	.word	0x20005e52
 800c608:	20005e51 	.word	0x20005e51
 800c60c:	2000244c 	.word	0x2000244c

0800c610 <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800c614:	4b16      	ldr	r3, [pc, #88]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d105      	bne.n	800c628 <TIM7_IRQHandler+0x18>
 800c61c:	4b15      	ldr	r3, [pc, #84]	@ (800c674 <TIM7_IRQHandler+0x64>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	b2da      	uxtb	r2, r3
 800c624:	4b13      	ldr	r3, [pc, #76]	@ (800c674 <TIM7_IRQHandler+0x64>)
 800c626:	701a      	strb	r2, [r3, #0]
 800c628:	4b11      	ldr	r3, [pc, #68]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	4b0f      	ldr	r3, [pc, #60]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c632:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 800c634:	4810      	ldr	r0, [pc, #64]	@ (800c678 <TIM7_IRQHandler+0x68>)
 800c636:	f7fa fab6 	bl	8006ba6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800c63a:	4b0d      	ldr	r3, [pc, #52]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <TIM7_IRQHandler+0x3e>
 800c642:	4b0b      	ldr	r3, [pc, #44]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	3b01      	subs	r3, #1
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	4b09      	ldr	r3, [pc, #36]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c64c:	701a      	strb	r2, [r3, #0]
 800c64e:	4b08      	ldr	r3, [pc, #32]	@ (800c670 <TIM7_IRQHandler+0x60>)
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d109      	bne.n	800c66a <TIM7_IRQHandler+0x5a>
 800c656:	4b07      	ldr	r3, [pc, #28]	@ (800c674 <TIM7_IRQHandler+0x64>)
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d005      	beq.n	800c66a <TIM7_IRQHandler+0x5a>
 800c65e:	4b05      	ldr	r3, [pc, #20]	@ (800c674 <TIM7_IRQHandler+0x64>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	3b01      	subs	r3, #1
 800c664:	b2da      	uxtb	r2, r3
 800c666:	4b03      	ldr	r3, [pc, #12]	@ (800c674 <TIM7_IRQHandler+0x64>)
 800c668:	701a      	strb	r2, [r3, #0]
}
 800c66a:	bf00      	nop
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20005e52 	.word	0x20005e52
 800c674:	20005e51 	.word	0x20005e51
 800c678:	200024dc 	.word	0x200024dc

0800c67c <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800c684:	23ae      	movs	r3, #174	@ 0xae
 800c686:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800c688:	2300      	movs	r3, #0
 800c68a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800c68c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <drv_traceTransmitUnsafe+0x3c>)
 800c68e:	789b      	ldrb	r3, [r3, #2]
 800c690:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7f3 fe0c 	bl	80002b0 <strlen>
 800c698:	4603      	mov	r3, r0
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	4b07      	ldr	r3, [pc, #28]	@ (800c6bc <drv_traceTransmitUnsafe+0x40>)
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	7bb8      	ldrb	r0, [r7, #14]
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	f000 f982 	bl	800c9ac <drv_uartTransmitBlocking>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	0801aa88 	.word	0x0801aa88
 800c6bc:	200003d0 	.word	0x200003d0

0800c6c0 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af02      	add	r7, sp, #8
 800c6c6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800c6c8:	23ae      	movs	r3, #174	@ 0xae
 800c6ca:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800c6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c704 <drv_traceTransmit+0x44>)
 800c6d2:	789b      	ldrb	r3, [r3, #2]
 800c6d4:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7f3 fdea 	bl	80002b0 <strlen>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	4b09      	ldr	r3, [pc, #36]	@ (800c708 <drv_traceTransmit+0x48>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	4b08      	ldr	r3, [pc, #32]	@ (800c708 <drv_traceTransmit+0x48>)
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	7bb8      	ldrb	r0, [r7, #14]
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	f000 f9f4 	bl	800cadc <drv_uartTransmitDMA>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	0801aa88 	.word	0x0801aa88
 800c708:	200003d0 	.word	0x200003d0

0800c70c <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 800c712:	2355      	movs	r3, #85	@ 0x55
 800c714:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 800c716:	2300      	movs	r3, #0
 800c718:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800c71a:	2300      	movs	r3, #0
 800c71c:	71bb      	strb	r3, [r7, #6]
 800c71e:	e00e      	b.n	800c73e <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 800c720:	79fb      	ldrb	r3, [r7, #7]
 800c722:	2b55      	cmp	r3, #85	@ 0x55
 800c724:	d106      	bne.n	800c734 <drv_uartInit+0x28>
 800c726:	79bb      	ldrb	r3, [r7, #6]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 f81b 	bl	800c764 <drv_uartInitInstance>
 800c72e:	4603      	mov	r3, r0
 800c730:	71fb      	strb	r3, [r7, #7]
 800c732:	e001      	b.n	800c738 <drv_uartInit+0x2c>
 800c734:	23ae      	movs	r3, #174	@ 0xae
 800c736:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800c738:	79bb      	ldrb	r3, [r7, #6]
 800c73a:	3301      	adds	r3, #1
 800c73c:	71bb      	strb	r3, [r7, #6]
 800c73e:	79ba      	ldrb	r2, [r7, #6]
 800c740:	4b06      	ldr	r3, [pc, #24]	@ (800c75c <drv_uartInit+0x50>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4906      	ldr	r1, [pc, #24]	@ (800c760 <drv_uartInit+0x54>)
 800c746:	fba1 1303 	umull	r1, r3, r1, r3
 800c74a:	095b      	lsrs	r3, r3, #5
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d3e7      	bcc.n	800c720 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 800c750:	79fb      	ldrb	r3, [r7, #7]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	200003fc 	.word	0x200003fc
 800c760:	cccccccd 	.word	0xcccccccd

0800c764 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 800c76e:	23ae      	movs	r3, #174	@ 0xae
 800c770:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 800c772:	2300      	movs	r3, #0
 800c774:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 800c776:	79fa      	ldrb	r2, [r7, #7]
 800c778:	4b82      	ldr	r3, [pc, #520]	@ (800c984 <drv_uartInitInstance+0x220>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4982      	ldr	r1, [pc, #520]	@ (800c988 <drv_uartInitInstance+0x224>)
 800c77e:	fba1 1303 	umull	r1, r3, r1, r3
 800c782:	095b      	lsrs	r3, r3, #5
 800c784:	429a      	cmp	r2, r3
 800c786:	f080 80f2 	bcs.w	800c96e <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 800c78a:	79fa      	ldrb	r2, [r7, #7]
 800c78c:	497f      	ldr	r1, [pc, #508]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	00db      	lsls	r3, r3, #3
 800c796:	440b      	add	r3, r1
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	7bba      	ldrb	r2, [r7, #14]
 800c7a0:	497b      	ldr	r1, [pc, #492]	@ (800c990 <drv_uartInitInstance+0x22c>)
 800c7a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c7a6:	487b      	ldr	r0, [pc, #492]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4403      	add	r3, r0
 800c7b2:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 800c7b4:	79f9      	ldrb	r1, [r7, #7]
 800c7b6:	7bba      	ldrb	r2, [r7, #14]
 800c7b8:	4874      	ldr	r0, [pc, #464]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	440b      	add	r3, r1
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	4403      	add	r3, r0
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	6819      	ldr	r1, [r3, #0]
 800c7c8:	4872      	ldr	r0, [pc, #456]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	011b      	lsls	r3, r3, #4
 800c7ce:	4413      	add	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4403      	add	r3, r0
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 800c7d8:	79f9      	ldrb	r1, [r7, #7]
 800c7da:	7bba      	ldrb	r2, [r7, #14]
 800c7dc:	486b      	ldr	r0, [pc, #428]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c7de:	460b      	mov	r3, r1
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	4403      	add	r3, r0
 800c7e8:	3308      	adds	r3, #8
 800c7ea:	6819      	ldr	r1, [r3, #0]
 800c7ec:	4869      	ldr	r0, [pc, #420]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	011b      	lsls	r3, r3, #4
 800c7f2:	4413      	add	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	4403      	add	r3, r0
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 800c7fc:	79f9      	ldrb	r1, [r7, #7]
 800c7fe:	7bba      	ldrb	r2, [r7, #14]
 800c800:	4862      	ldr	r0, [pc, #392]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c802:	460b      	mov	r3, r1
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	440b      	add	r3, r1
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	4403      	add	r3, r0
 800c80c:	330c      	adds	r3, #12
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	4860      	ldr	r0, [pc, #384]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c812:	4613      	mov	r3, r2
 800c814:	011b      	lsls	r3, r3, #4
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4403      	add	r3, r0
 800c81c:	330c      	adds	r3, #12
 800c81e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 800c820:	79f9      	ldrb	r1, [r7, #7]
 800c822:	7bba      	ldrb	r2, [r7, #14]
 800c824:	4859      	ldr	r0, [pc, #356]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c826:	460b      	mov	r3, r1
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	440b      	add	r3, r1
 800c82c:	00db      	lsls	r3, r3, #3
 800c82e:	4403      	add	r3, r0
 800c830:	3310      	adds	r3, #16
 800c832:	6819      	ldr	r1, [r3, #0]
 800c834:	4857      	ldr	r0, [pc, #348]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c836:	4613      	mov	r3, r2
 800c838:	011b      	lsls	r3, r3, #4
 800c83a:	4413      	add	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4403      	add	r3, r0
 800c840:	3310      	adds	r3, #16
 800c842:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 800c844:	79f9      	ldrb	r1, [r7, #7]
 800c846:	7bba      	ldrb	r2, [r7, #14]
 800c848:	4850      	ldr	r0, [pc, #320]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c84a:	460b      	mov	r3, r1
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	440b      	add	r3, r1
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	4403      	add	r3, r0
 800c854:	3314      	adds	r3, #20
 800c856:	6819      	ldr	r1, [r3, #0]
 800c858:	484e      	ldr	r0, [pc, #312]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c85a:	4613      	mov	r3, r2
 800c85c:	011b      	lsls	r3, r3, #4
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4403      	add	r3, r0
 800c864:	3314      	adds	r3, #20
 800c866:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 800c868:	79f9      	ldrb	r1, [r7, #7]
 800c86a:	7bba      	ldrb	r2, [r7, #14]
 800c86c:	4847      	ldr	r0, [pc, #284]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c86e:	460b      	mov	r3, r1
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	440b      	add	r3, r1
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	4403      	add	r3, r0
 800c878:	3318      	adds	r3, #24
 800c87a:	6819      	ldr	r1, [r3, #0]
 800c87c:	4845      	ldr	r0, [pc, #276]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c87e:	4613      	mov	r3, r2
 800c880:	011b      	lsls	r3, r3, #4
 800c882:	4413      	add	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	4403      	add	r3, r0
 800c888:	3318      	adds	r3, #24
 800c88a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 800c88c:	79f9      	ldrb	r1, [r7, #7]
 800c88e:	7bba      	ldrb	r2, [r7, #14]
 800c890:	483e      	ldr	r0, [pc, #248]	@ (800c98c <drv_uartInitInstance+0x228>)
 800c892:	460b      	mov	r3, r1
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	440b      	add	r3, r1
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	4403      	add	r3, r0
 800c89c:	331c      	adds	r3, #28
 800c89e:	6819      	ldr	r1, [r3, #0]
 800c8a0:	483c      	ldr	r0, [pc, #240]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	011b      	lsls	r3, r3, #4
 800c8a6:	4413      	add	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4403      	add	r3, r0
 800c8ac:	331c      	adds	r3, #28
 800c8ae:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800c8b0:	7bba      	ldrb	r2, [r7, #14]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	011b      	lsls	r3, r3, #4
 800c8b6:	4413      	add	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4a36      	ldr	r2, [pc, #216]	@ (800c994 <drv_uartInitInstance+0x230>)
 800c8bc:	4413      	add	r3, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fa fd30 	bl	8007324 <HAL_UART_Init>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d14a      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4a32      	ldr	r2, [pc, #200]	@ (800c998 <drv_uartInitInstance+0x234>)
 800c8d0:	4413      	add	r3, r2
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f007 faaa 	bl	8013e2c <gos_mutexInit>
 800c8d8:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800c8da:	2b55      	cmp	r3, #85	@ 0x55
 800c8dc:	d140      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4a2e      	ldr	r2, [pc, #184]	@ (800c99c <drv_uartInitInstance+0x238>)
 800c8e4:	4413      	add	r3, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f007 faa0 	bl	8013e2c <gos_mutexInit>
 800c8ec:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800c8ee:	2b55      	cmp	r3, #85	@ 0x55
 800c8f0:	d136      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c8f2:	7bba      	ldrb	r2, [r7, #14]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4a28      	ldr	r2, [pc, #160]	@ (800c9a0 <drv_uartInitInstance+0x23c>)
 800c8fe:	4413      	add	r3, r2
 800c900:	4618      	mov	r0, r3
 800c902:	f009 fb35 	bl	8015f70 <gos_triggerInit>
 800c906:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800c908:	2b55      	cmp	r3, #85	@ 0x55
 800c90a:	d129      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c90c:	7bba      	ldrb	r2, [r7, #14]
 800c90e:	4613      	mov	r3, r2
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4a23      	ldr	r2, [pc, #140]	@ (800c9a4 <drv_uartInitInstance+0x240>)
 800c918:	4413      	add	r3, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f009 fb28 	bl	8015f70 <gos_triggerInit>
 800c920:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c922:	2b55      	cmp	r3, #85	@ 0x55
 800c924:	d11c      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c926:	7bba      	ldrb	r2, [r7, #14]
 800c928:	4613      	mov	r3, r2
 800c92a:	005b      	lsls	r3, r3, #1
 800c92c:	4413      	add	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4a1b      	ldr	r2, [pc, #108]	@ (800c9a0 <drv_uartInitInstance+0x23c>)
 800c932:	4413      	add	r3, r2
 800c934:	4618      	mov	r0, r3
 800c936:	f009 fb37 	bl	8015fa8 <gos_triggerReset>
 800c93a:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c93c:	2b55      	cmp	r3, #85	@ 0x55
 800c93e:	d10f      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 800c940:	7bba      	ldrb	r2, [r7, #14]
 800c942:	4613      	mov	r3, r2
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	4413      	add	r3, r2
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	4a16      	ldr	r2, [pc, #88]	@ (800c9a4 <drv_uartInitInstance+0x240>)
 800c94c:	4413      	add	r3, r2
 800c94e:	4618      	mov	r0, r3
 800c950:	f009 fb2a 	bl	8015fa8 <gos_triggerReset>
 800c954:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800c956:	2b55      	cmp	r3, #85	@ 0x55
 800c958:	d102      	bne.n	800c960 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 800c95a:	2355      	movs	r3, #85	@ 0x55
 800c95c:	73fb      	strb	r3, [r7, #15]
 800c95e:	e00c      	b.n	800c97a <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 800c960:	4b11      	ldr	r3, [pc, #68]	@ (800c9a8 <drv_uartInitInstance+0x244>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f043 0304 	orr.w	r3, r3, #4
 800c968:	4a0f      	ldr	r2, [pc, #60]	@ (800c9a8 <drv_uartInitInstance+0x244>)
 800c96a:	6013      	str	r3, [r2, #0]
 800c96c:	e005      	b.n	800c97a <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 800c96e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a8 <drv_uartInitInstance+0x244>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f043 0302 	orr.w	r3, r3, #2
 800c976:	4a0c      	ldr	r2, [pc, #48]	@ (800c9a8 <drv_uartInitInstance+0x244>)
 800c978:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200003fc 	.word	0x200003fc
 800c988:	cccccccd 	.word	0xcccccccd
 800c98c:	0801aa10 	.word	0x0801aa10
 800c990:	20000518 	.word	0x20000518
 800c994:	20002800 	.word	0x20002800
 800c998:	20002998 	.word	0x20002998
 800c99c:	200029b0 	.word	0x200029b0
 800c9a0:	200029c8 	.word	0x200029c8
 800c9a4:	20002a10 	.word	0x20002a10
 800c9a8:	200027fc 	.word	0x200027fc

0800c9ac <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60b9      	str	r1, [r7, #8]
 800c9b4:	607b      	str	r3, [r7, #4]
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	73fb      	strb	r3, [r7, #15]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800c9be:	23ae      	movs	r3, #174	@ 0xae
 800c9c0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800c9c2:	4b1d      	ldr	r3, [pc, #116]	@ (800ca38 <drv_uartTransmitBlocking+0x8c>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800ca38 <drv_uartTransmitBlocking+0x8c>)
 800c9cc:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800c9ce:	7bfa      	ldrb	r2, [r7, #15]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	4413      	add	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4a18      	ldr	r2, [pc, #96]	@ (800ca3c <drv_uartTransmitBlocking+0x90>)
 800c9da:	4413      	add	r3, r2
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fa ff45 	bl	800786c <HAL_UART_Abort>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d111      	bne.n	800ca0c <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 800c9e8:	7bfa      	ldrb	r2, [r7, #15]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	4413      	add	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4a12      	ldr	r2, [pc, #72]	@ (800ca3c <drv_uartTransmitBlocking+0x90>)
 800c9f4:	1898      	adds	r0, r3, r2
 800c9f6:	89ba      	ldrh	r2, [r7, #12]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	f7fa fcdf 	bl	80073be <HAL_UART_Transmit>
 800ca00:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 800ca06:	2355      	movs	r3, #85	@ 0x55
 800ca08:	75fb      	strb	r3, [r7, #23]
 800ca0a:	e005      	b.n	800ca18 <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 800ca0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca40 <drv_uartTransmitBlocking+0x94>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f043 0310 	orr.w	r3, r3, #16
 800ca14:	4a0a      	ldr	r2, [pc, #40]	@ (800ca40 <drv_uartTransmitBlocking+0x94>)
 800ca16:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800ca18:	4b07      	ldr	r3, [pc, #28]	@ (800ca38 <drv_uartTransmitBlocking+0x8c>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d005      	beq.n	800ca2c <drv_uartTransmitBlocking+0x80>
 800ca20:	4b05      	ldr	r3, [pc, #20]	@ (800ca38 <drv_uartTransmitBlocking+0x8c>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	4b03      	ldr	r3, [pc, #12]	@ (800ca38 <drv_uartTransmitBlocking+0x8c>)
 800ca2a:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20005e51 	.word	0x20005e51
 800ca3c:	20002800 	.word	0x20002800
 800ca40:	200027fc 	.word	0x200027fc

0800ca44 <drv_uartReceiveBlocking>:
 */
GOS_INLINE gos_result_t drv_uartReceiveBlocking (
        drv_uartPeriphInstance_t instance, u8_t* pData,
        u16_t                    size,     u32_t timeout
        )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	607b      	str	r3, [r7, #4]
 800ca4e:	4603      	mov	r3, r0
 800ca50:	73fb      	strb	r3, [r7, #15]
 800ca52:	4613      	mov	r3, r2
 800ca54:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800ca56:	23ae      	movs	r3, #174	@ 0xae
 800ca58:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800ca5a:	4b1d      	ldr	r3, [pc, #116]	@ (800cad0 <drv_uartReceiveBlocking+0x8c>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	4b1b      	ldr	r3, [pc, #108]	@ (800cad0 <drv_uartReceiveBlocking+0x8c>)
 800ca64:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800ca66:	7bfa      	ldrb	r2, [r7, #15]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	4413      	add	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4a18      	ldr	r2, [pc, #96]	@ (800cad4 <drv_uartReceiveBlocking+0x90>)
 800ca72:	4413      	add	r3, r2
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7fa fef9 	bl	800786c <HAL_UART_Abort>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d111      	bne.n	800caa4 <drv_uartReceiveBlocking+0x60>
    	HAL_UART_Receive(&huarts[instance], pData, size, timeout) == HAL_OK)
 800ca80:	7bfa      	ldrb	r2, [r7, #15]
 800ca82:	4613      	mov	r3, r2
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	4413      	add	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4a12      	ldr	r2, [pc, #72]	@ (800cad4 <drv_uartReceiveBlocking+0x90>)
 800ca8c:	1898      	adds	r0, r3, r2
 800ca8e:	89ba      	ldrh	r2, [r7, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	68b9      	ldr	r1, [r7, #8]
 800ca94:	f7fa fd25 	bl	80074e2 <HAL_UART_Receive>
 800ca98:	4603      	mov	r3, r0
    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d102      	bne.n	800caa4 <drv_uartReceiveBlocking+0x60>
    {
    	uartReceiveResult = GOS_SUCCESS;
 800ca9e:	2355      	movs	r3, #85	@ 0x55
 800caa0:	75fb      	strb	r3, [r7, #23]
 800caa2:	e005      	b.n	800cab0 <drv_uartReceiveBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_BLOCKING);
 800caa4:	4b0c      	ldr	r3, [pc, #48]	@ (800cad8 <drv_uartReceiveBlocking+0x94>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caac:	4a0a      	ldr	r2, [pc, #40]	@ (800cad8 <drv_uartReceiveBlocking+0x94>)
 800caae:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800cab0:	4b07      	ldr	r3, [pc, #28]	@ (800cad0 <drv_uartReceiveBlocking+0x8c>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d005      	beq.n	800cac4 <drv_uartReceiveBlocking+0x80>
 800cab8:	4b05      	ldr	r3, [pc, #20]	@ (800cad0 <drv_uartReceiveBlocking+0x8c>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	4b03      	ldr	r3, [pc, #12]	@ (800cad0 <drv_uartReceiveBlocking+0x8c>)
 800cac2:	701a      	strb	r2, [r3, #0]

    return uartReceiveResult;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	20005e51 	.word	0x20005e51
 800cad4:	20002800 	.word	0x20002800
 800cad8:	200027fc 	.word	0x200027fc

0800cadc <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60b9      	str	r1, [r7, #8]
 800cae4:	607b      	str	r3, [r7, #4]
 800cae6:	4603      	mov	r3, r0
 800cae8:	73fb      	strb	r3, [r7, #15]
 800caea:	4613      	mov	r3, r2
 800caec:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800caee:	23ae      	movs	r3, #174	@ 0xae
 800caf0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4a2d      	ldr	r2, [pc, #180]	@ (800cbac <drv_uartTransmitDMA+0xd0>)
 800caf8:	4413      	add	r3, r2
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f007 f9af 	bl	8013e60 <gos_mutexLock>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b55      	cmp	r3, #85	@ 0x55
 800cb06:	d13e      	bne.n	800cb86 <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800cb08:	7bfa      	ldrb	r2, [r7, #15]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	011b      	lsls	r3, r3, #4
 800cb0e:	4413      	add	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4a27      	ldr	r2, [pc, #156]	@ (800cbb0 <drv_uartTransmitDMA+0xd4>)
 800cb14:	4413      	add	r3, r2
 800cb16:	89ba      	ldrh	r2, [r7, #12]
 800cb18:	68b9      	ldr	r1, [r7, #8]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fa fdf8 	bl	8007710 <HAL_UART_Transmit_DMA>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d11e      	bne.n	800cb64 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cb26:	7bfa      	ldrb	r2, [r7, #15]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4a20      	ldr	r2, [pc, #128]	@ (800cbb4 <drv_uartTransmitDMA+0xd8>)
 800cb32:	4413      	add	r3, r2
 800cb34:	6a3a      	ldr	r2, [r7, #32]
 800cb36:	2101      	movs	r1, #1
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f009 fa8d 	bl	8016058 <gos_triggerWait>
 800cb3e:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800cb40:	2b55      	cmp	r3, #85	@ 0x55
 800cb42:	d10f      	bne.n	800cb64 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800cb44:	7bfa      	ldrb	r2, [r7, #15]
 800cb46:	4613      	mov	r3, r2
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4a19      	ldr	r2, [pc, #100]	@ (800cbb4 <drv_uartTransmitDMA+0xd8>)
 800cb50:	4413      	add	r3, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f009 fa28 	bl	8015fa8 <gos_triggerReset>
 800cb58:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cb5a:	2b55      	cmp	r3, #85	@ 0x55
 800cb5c:	d102      	bne.n	800cb64 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800cb5e:	2355      	movs	r3, #85	@ 0x55
 800cb60:	75fb      	strb	r3, [r7, #23]
 800cb62:	e016      	b.n	800cb92 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cb64:	7bfa      	ldrb	r2, [r7, #15]
 800cb66:	4613      	mov	r3, r2
 800cb68:	011b      	lsls	r3, r3, #4
 800cb6a:	4413      	add	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4a10      	ldr	r2, [pc, #64]	@ (800cbb0 <drv_uartTransmitDMA+0xd4>)
 800cb70:	4413      	add	r3, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fa ff66 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 800cb78:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb8 <drv_uartTransmitDMA+0xdc>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb80:	4a0d      	ldr	r2, [pc, #52]	@ (800cbb8 <drv_uartTransmitDMA+0xdc>)
 800cb82:	6013      	str	r3, [r2, #0]
 800cb84:	e005      	b.n	800cb92 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 800cb86:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb8 <drv_uartTransmitDMA+0xdc>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f043 0320 	orr.w	r3, r3, #32
 800cb8e:	4a0a      	ldr	r2, [pc, #40]	@ (800cbb8 <drv_uartTransmitDMA+0xdc>)
 800cb90:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4a05      	ldr	r2, [pc, #20]	@ (800cbac <drv_uartTransmitDMA+0xd0>)
 800cb98:	4413      	add	r3, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f007 fa66 	bl	801406c <gos_mutexUnlock>

    return uartTransmitResult;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	200029b0 	.word	0x200029b0
 800cbb0:	20002800 	.word	0x20002800
 800cbb4:	20002a10 	.word	0x20002a10
 800cbb8:	200027fc 	.word	0x200027fc

0800cbbc <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60b9      	str	r1, [r7, #8]
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	73fb      	strb	r3, [r7, #15]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800cbce:	23ae      	movs	r3, #174	@ 0xae
 800cbd0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4a2d      	ldr	r2, [pc, #180]	@ (800cc8c <drv_uartReceiveDMA+0xd0>)
 800cbd8:	4413      	add	r3, r2
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f007 f93f 	bl	8013e60 <gos_mutexLock>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b55      	cmp	r3, #85	@ 0x55
 800cbe6:	d13e      	bne.n	800cc66 <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800cbe8:	7bfa      	ldrb	r2, [r7, #15]
 800cbea:	4613      	mov	r3, r2
 800cbec:	011b      	lsls	r3, r3, #4
 800cbee:	4413      	add	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4a27      	ldr	r2, [pc, #156]	@ (800cc90 <drv_uartReceiveDMA+0xd4>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	89ba      	ldrh	r2, [r7, #12]
 800cbf8:	68b9      	ldr	r1, [r7, #8]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fa fe06 	bl	800780c <HAL_UART_Receive_DMA>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d11e      	bne.n	800cc44 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cc06:	7bfa      	ldrb	r2, [r7, #15]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	4413      	add	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4a20      	ldr	r2, [pc, #128]	@ (800cc94 <drv_uartReceiveDMA+0xd8>)
 800cc12:	4413      	add	r3, r2
 800cc14:	6a3a      	ldr	r2, [r7, #32]
 800cc16:	2101      	movs	r1, #1
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f009 fa1d 	bl	8016058 <gos_triggerWait>
 800cc1e:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800cc20:	2b55      	cmp	r3, #85	@ 0x55
 800cc22:	d10f      	bne.n	800cc44 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800cc24:	7bfa      	ldrb	r2, [r7, #15]
 800cc26:	4613      	mov	r3, r2
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4a19      	ldr	r2, [pc, #100]	@ (800cc94 <drv_uartReceiveDMA+0xd8>)
 800cc30:	4413      	add	r3, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f009 f9b8 	bl	8015fa8 <gos_triggerReset>
 800cc38:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cc3a:	2b55      	cmp	r3, #85	@ 0x55
 800cc3c:	d102      	bne.n	800cc44 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 800cc3e:	2355      	movs	r3, #85	@ 0x55
 800cc40:	75fb      	strb	r3, [r7, #23]
 800cc42:	e016      	b.n	800cc72 <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cc44:	7bfa      	ldrb	r2, [r7, #15]
 800cc46:	4613      	mov	r3, r2
 800cc48:	011b      	lsls	r3, r3, #4
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4a10      	ldr	r2, [pc, #64]	@ (800cc90 <drv_uartReceiveDMA+0xd4>)
 800cc50:	4413      	add	r3, r2
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fa fef6 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 800cc58:	4b0f      	ldr	r3, [pc, #60]	@ (800cc98 <drv_uartReceiveDMA+0xdc>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cc60:	4a0d      	ldr	r2, [pc, #52]	@ (800cc98 <drv_uartReceiveDMA+0xdc>)
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	e005      	b.n	800cc72 <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 800cc66:	4b0c      	ldr	r3, [pc, #48]	@ (800cc98 <drv_uartReceiveDMA+0xdc>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc6e:	4a0a      	ldr	r2, [pc, #40]	@ (800cc98 <drv_uartReceiveDMA+0xdc>)
 800cc70:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4a05      	ldr	r2, [pc, #20]	@ (800cc8c <drv_uartReceiveDMA+0xd0>)
 800cc78:	4413      	add	r3, r2
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f007 f9f6 	bl	801406c <gos_mutexUnlock>

    return uartReceiveResult;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20002998 	.word	0x20002998
 800cc90:	20002800 	.word	0x20002800
 800cc94:	200029c8 	.word	0x200029c8
 800cc98:	200027fc 	.word	0x200027fc

0800cc9c <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607b      	str	r3, [r7, #4]
 800cca6:	4603      	mov	r3, r0
 800cca8:	73fb      	strb	r3, [r7, #15]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800ccae:	23ae      	movs	r3, #174	@ 0xae
 800ccb0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4a2d      	ldr	r2, [pc, #180]	@ (800cd6c <drv_uartTransmitIT+0xd0>)
 800ccb8:	4413      	add	r3, r2
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f007 f8cf 	bl	8013e60 <gos_mutexLock>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b55      	cmp	r3, #85	@ 0x55
 800ccc6:	d13e      	bne.n	800cd46 <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800ccc8:	7bfa      	ldrb	r2, [r7, #15]
 800ccca:	4613      	mov	r3, r2
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	4413      	add	r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4a27      	ldr	r2, [pc, #156]	@ (800cd70 <drv_uartTransmitIT+0xd4>)
 800ccd4:	4413      	add	r3, r2
 800ccd6:	89ba      	ldrh	r2, [r7, #12]
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fa fca3 	bl	8007626 <HAL_UART_Transmit_IT>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d11e      	bne.n	800cd24 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cce6:	7bfa      	ldrb	r2, [r7, #15]
 800cce8:	4613      	mov	r3, r2
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4a20      	ldr	r2, [pc, #128]	@ (800cd74 <drv_uartTransmitIT+0xd8>)
 800ccf2:	4413      	add	r3, r2
 800ccf4:	6a3a      	ldr	r2, [r7, #32]
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f009 f9ad 	bl	8016058 <gos_triggerWait>
 800ccfe:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800cd00:	2b55      	cmp	r3, #85	@ 0x55
 800cd02:	d10f      	bne.n	800cd24 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800cd04:	7bfa      	ldrb	r2, [r7, #15]
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4a19      	ldr	r2, [pc, #100]	@ (800cd74 <drv_uartTransmitIT+0xd8>)
 800cd10:	4413      	add	r3, r2
 800cd12:	4618      	mov	r0, r3
 800cd14:	f009 f948 	bl	8015fa8 <gos_triggerReset>
 800cd18:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cd1a:	2b55      	cmp	r3, #85	@ 0x55
 800cd1c:	d102      	bne.n	800cd24 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800cd1e:	2355      	movs	r3, #85	@ 0x55
 800cd20:	75fb      	strb	r3, [r7, #23]
 800cd22:	e016      	b.n	800cd52 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800cd24:	7bfa      	ldrb	r2, [r7, #15]
 800cd26:	4613      	mov	r3, r2
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	4413      	add	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4a10      	ldr	r2, [pc, #64]	@ (800cd70 <drv_uartTransmitIT+0xd4>)
 800cd30:	4413      	add	r3, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fa fe86 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 800cd38:	4b0f      	ldr	r3, [pc, #60]	@ (800cd78 <drv_uartTransmitIT+0xdc>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cd40:	4a0d      	ldr	r2, [pc, #52]	@ (800cd78 <drv_uartTransmitIT+0xdc>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	e005      	b.n	800cd52 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 800cd46:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <drv_uartTransmitIT+0xdc>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cd4e:	4a0a      	ldr	r2, [pc, #40]	@ (800cd78 <drv_uartTransmitIT+0xdc>)
 800cd50:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4a05      	ldr	r2, [pc, #20]	@ (800cd6c <drv_uartTransmitIT+0xd0>)
 800cd58:	4413      	add	r3, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f007 f986 	bl	801406c <gos_mutexUnlock>

    return uartTransmitResult;
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3718      	adds	r7, #24
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200029b0 	.word	0x200029b0
 800cd70:	20002800 	.word	0x20002800
 800cd74:	20002a10 	.word	0x20002a10
 800cd78:	200027fc 	.word	0x200027fc

0800cd7c <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	607b      	str	r3, [r7, #4]
 800cd86:	4603      	mov	r3, r0
 800cd88:	73fb      	strb	r3, [r7, #15]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 800cd8e:	23ae      	movs	r3, #174	@ 0xae
 800cd90:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4a2d      	ldr	r2, [pc, #180]	@ (800ce4c <drv_uartReceiveIT+0xd0>)
 800cd98:	4413      	add	r3, r2
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f007 f85f 	bl	8013e60 <gos_mutexLock>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b55      	cmp	r3, #85	@ 0x55
 800cda6:	d13e      	bne.n	800ce26 <drv_uartReceiveIT+0xaa>
    {
    	//__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800cda8:	7bfa      	ldrb	r2, [r7, #15]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	011b      	lsls	r3, r3, #4
 800cdae:	4413      	add	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4a27      	ldr	r2, [pc, #156]	@ (800ce50 <drv_uartReceiveIT+0xd4>)
 800cdb4:	4413      	add	r3, r2
 800cdb6:	89ba      	ldrh	r2, [r7, #12]
 800cdb8:	68b9      	ldr	r1, [r7, #8]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fa fc78 	bl	80076b0 <HAL_UART_Receive_IT>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d11e      	bne.n	800ce04 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cdc6:	7bfa      	ldrb	r2, [r7, #15]
 800cdc8:	4613      	mov	r3, r2
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4a20      	ldr	r2, [pc, #128]	@ (800ce54 <drv_uartReceiveIT+0xd8>)
 800cdd2:	4413      	add	r3, r2
 800cdd4:	6a3a      	ldr	r2, [r7, #32]
 800cdd6:	2101      	movs	r1, #1
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f009 f93d 	bl	8016058 <gos_triggerWait>
 800cdde:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800cde0:	2b55      	cmp	r3, #85	@ 0x55
 800cde2:	d10f      	bne.n	800ce04 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800cde4:	7bfa      	ldrb	r2, [r7, #15]
 800cde6:	4613      	mov	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4413      	add	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4a19      	ldr	r2, [pc, #100]	@ (800ce54 <drv_uartReceiveIT+0xd8>)
 800cdf0:	4413      	add	r3, r2
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f009 f8d8 	bl	8015fa8 <gos_triggerReset>
 800cdf8:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800cdfa:	2b55      	cmp	r3, #85	@ 0x55
 800cdfc:	d102      	bne.n	800ce04 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 800cdfe:	2355      	movs	r3, #85	@ 0x55
 800ce00:	75fb      	strb	r3, [r7, #23]
 800ce02:	e016      	b.n	800ce32 <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800ce04:	7bfa      	ldrb	r2, [r7, #15]
 800ce06:	4613      	mov	r3, r2
 800ce08:	011b      	lsls	r3, r3, #4
 800ce0a:	4413      	add	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4a10      	ldr	r2, [pc, #64]	@ (800ce50 <drv_uartReceiveIT+0xd4>)
 800ce10:	4413      	add	r3, r2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7fa fe16 	bl	8007a44 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 800ce18:	4b0f      	ldr	r3, [pc, #60]	@ (800ce58 <drv_uartReceiveIT+0xdc>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ce20:	4a0d      	ldr	r2, [pc, #52]	@ (800ce58 <drv_uartReceiveIT+0xdc>)
 800ce22:	6013      	str	r3, [r2, #0]
 800ce24:	e005      	b.n	800ce32 <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 800ce26:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <drv_uartReceiveIT+0xdc>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ce2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ce58 <drv_uartReceiveIT+0xdc>)
 800ce30:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4a05      	ldr	r2, [pc, #20]	@ (800ce4c <drv_uartReceiveIT+0xd0>)
 800ce38:	4413      	add	r3, r2
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f007 f916 	bl	801406c <gos_mutexUnlock>

    return uartReceiveResult;
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20002998 	.word	0x20002998
 800ce50:	20002800 	.word	0x20002800
 800ce54:	200029c8 	.word	0x200029c8
 800ce58:	200027fc 	.word	0x200027fc

0800ce5c <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800ce60:	4b16      	ldr	r3, [pc, #88]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d105      	bne.n	800ce74 <USART1_IRQHandler+0x18>
 800ce68:	4b15      	ldr	r3, [pc, #84]	@ (800cec0 <USART1_IRQHandler+0x64>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	4b13      	ldr	r3, [pc, #76]	@ (800cec0 <USART1_IRQHandler+0x64>)
 800ce72:	701a      	strb	r2, [r3, #0]
 800ce74:	4b11      	ldr	r3, [pc, #68]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	4b0f      	ldr	r3, [pc, #60]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce7e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 800ce80:	4810      	ldr	r0, [pc, #64]	@ (800cec4 <USART1_IRQHandler+0x68>)
 800ce82:	f7fa fef3 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800ce86:	4b0d      	ldr	r3, [pc, #52]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <USART1_IRQHandler+0x3e>
 800ce8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	4b09      	ldr	r3, [pc, #36]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	4b08      	ldr	r3, [pc, #32]	@ (800cebc <USART1_IRQHandler+0x60>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d109      	bne.n	800ceb6 <USART1_IRQHandler+0x5a>
 800cea2:	4b07      	ldr	r3, [pc, #28]	@ (800cec0 <USART1_IRQHandler+0x64>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <USART1_IRQHandler+0x5a>
 800ceaa:	4b05      	ldr	r3, [pc, #20]	@ (800cec0 <USART1_IRQHandler+0x64>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	4b03      	ldr	r3, [pc, #12]	@ (800cec0 <USART1_IRQHandler+0x64>)
 800ceb4:	701a      	strb	r2, [r3, #0]
}
 800ceb6:	bf00      	nop
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	20005e52 	.word	0x20005e52
 800cec0:	20005e51 	.word	0x20005e51
 800cec4:	20002800 	.word	0x20002800

0800cec8 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800cecc:	4b16      	ldr	r3, [pc, #88]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d105      	bne.n	800cee0 <USART2_IRQHandler+0x18>
 800ced4:	4b15      	ldr	r3, [pc, #84]	@ (800cf2c <USART2_IRQHandler+0x64>)
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	3301      	adds	r3, #1
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	4b13      	ldr	r3, [pc, #76]	@ (800cf2c <USART2_IRQHandler+0x64>)
 800cede:	701a      	strb	r2, [r3, #0]
 800cee0:	4b11      	ldr	r3, [pc, #68]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	3301      	adds	r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	4b0f      	ldr	r3, [pc, #60]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800ceea:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 800ceec:	4810      	ldr	r0, [pc, #64]	@ (800cf30 <USART2_IRQHandler+0x68>)
 800ceee:	f7fa febd 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800cef2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d005      	beq.n	800cf06 <USART2_IRQHandler+0x3e>
 800cefa:	4b0b      	ldr	r3, [pc, #44]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	3b01      	subs	r3, #1
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	4b09      	ldr	r3, [pc, #36]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800cf04:	701a      	strb	r2, [r3, #0]
 800cf06:	4b08      	ldr	r3, [pc, #32]	@ (800cf28 <USART2_IRQHandler+0x60>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d109      	bne.n	800cf22 <USART2_IRQHandler+0x5a>
 800cf0e:	4b07      	ldr	r3, [pc, #28]	@ (800cf2c <USART2_IRQHandler+0x64>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <USART2_IRQHandler+0x5a>
 800cf16:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <USART2_IRQHandler+0x64>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	4b03      	ldr	r3, [pc, #12]	@ (800cf2c <USART2_IRQHandler+0x64>)
 800cf20:	701a      	strb	r2, [r3, #0]
}
 800cf22:	bf00      	nop
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	20005e52 	.word	0x20005e52
 800cf2c:	20005e51 	.word	0x20005e51
 800cf30:	20002844 	.word	0x20002844

0800cf34 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800cf38:	4b16      	ldr	r3, [pc, #88]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d105      	bne.n	800cf4c <USART3_IRQHandler+0x18>
 800cf40:	4b15      	ldr	r3, [pc, #84]	@ (800cf98 <USART3_IRQHandler+0x64>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	3301      	adds	r3, #1
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	4b13      	ldr	r3, [pc, #76]	@ (800cf98 <USART3_IRQHandler+0x64>)
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	4b11      	ldr	r3, [pc, #68]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	3301      	adds	r3, #1
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	4b0f      	ldr	r3, [pc, #60]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf56:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 800cf58:	4810      	ldr	r0, [pc, #64]	@ (800cf9c <USART3_IRQHandler+0x68>)
 800cf5a:	f7fa fe87 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800cf5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d005      	beq.n	800cf72 <USART3_IRQHandler+0x3e>
 800cf66:	4b0b      	ldr	r3, [pc, #44]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	4b09      	ldr	r3, [pc, #36]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	4b08      	ldr	r3, [pc, #32]	@ (800cf94 <USART3_IRQHandler+0x60>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d109      	bne.n	800cf8e <USART3_IRQHandler+0x5a>
 800cf7a:	4b07      	ldr	r3, [pc, #28]	@ (800cf98 <USART3_IRQHandler+0x64>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d005      	beq.n	800cf8e <USART3_IRQHandler+0x5a>
 800cf82:	4b05      	ldr	r3, [pc, #20]	@ (800cf98 <USART3_IRQHandler+0x64>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	3b01      	subs	r3, #1
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	4b03      	ldr	r3, [pc, #12]	@ (800cf98 <USART3_IRQHandler+0x64>)
 800cf8c:	701a      	strb	r2, [r3, #0]
}
 800cf8e:	bf00      	nop
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	20005e52 	.word	0x20005e52
 800cf98:	20005e51 	.word	0x20005e51
 800cf9c:	20002888 	.word	0x20002888

0800cfa0 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800cfa4:	4b16      	ldr	r3, [pc, #88]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d105      	bne.n	800cfb8 <UART4_IRQHandler+0x18>
 800cfac:	4b15      	ldr	r3, [pc, #84]	@ (800d004 <UART4_IRQHandler+0x64>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	4b13      	ldr	r3, [pc, #76]	@ (800d004 <UART4_IRQHandler+0x64>)
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	4b11      	ldr	r3, [pc, #68]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfc2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 800cfc4:	4810      	ldr	r0, [pc, #64]	@ (800d008 <UART4_IRQHandler+0x68>)
 800cfc6:	f7fa fe51 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800cfca:	4b0d      	ldr	r3, [pc, #52]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d005      	beq.n	800cfde <UART4_IRQHandler+0x3e>
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	4b09      	ldr	r3, [pc, #36]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	4b08      	ldr	r3, [pc, #32]	@ (800d000 <UART4_IRQHandler+0x60>)
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d109      	bne.n	800cffa <UART4_IRQHandler+0x5a>
 800cfe6:	4b07      	ldr	r3, [pc, #28]	@ (800d004 <UART4_IRQHandler+0x64>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d005      	beq.n	800cffa <UART4_IRQHandler+0x5a>
 800cfee:	4b05      	ldr	r3, [pc, #20]	@ (800d004 <UART4_IRQHandler+0x64>)
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	4b03      	ldr	r3, [pc, #12]	@ (800d004 <UART4_IRQHandler+0x64>)
 800cff8:	701a      	strb	r2, [r3, #0]
}
 800cffa:	bf00      	nop
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20005e52 	.word	0x20005e52
 800d004:	20005e51 	.word	0x20005e51
 800d008:	200028cc 	.word	0x200028cc

0800d00c <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800d010:	4b16      	ldr	r3, [pc, #88]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d105      	bne.n	800d024 <UART5_IRQHandler+0x18>
 800d018:	4b15      	ldr	r3, [pc, #84]	@ (800d070 <UART5_IRQHandler+0x64>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	3301      	adds	r3, #1
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	4b13      	ldr	r3, [pc, #76]	@ (800d070 <UART5_IRQHandler+0x64>)
 800d022:	701a      	strb	r2, [r3, #0]
 800d024:	4b11      	ldr	r3, [pc, #68]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	3301      	adds	r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	4b0f      	ldr	r3, [pc, #60]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d02e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 800d030:	4810      	ldr	r0, [pc, #64]	@ (800d074 <UART5_IRQHandler+0x68>)
 800d032:	f7fa fe1b 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800d036:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <UART5_IRQHandler+0x3e>
 800d03e:	4b0b      	ldr	r3, [pc, #44]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	3b01      	subs	r3, #1
 800d044:	b2da      	uxtb	r2, r3
 800d046:	4b09      	ldr	r3, [pc, #36]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d048:	701a      	strb	r2, [r3, #0]
 800d04a:	4b08      	ldr	r3, [pc, #32]	@ (800d06c <UART5_IRQHandler+0x60>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d109      	bne.n	800d066 <UART5_IRQHandler+0x5a>
 800d052:	4b07      	ldr	r3, [pc, #28]	@ (800d070 <UART5_IRQHandler+0x64>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d005      	beq.n	800d066 <UART5_IRQHandler+0x5a>
 800d05a:	4b05      	ldr	r3, [pc, #20]	@ (800d070 <UART5_IRQHandler+0x64>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	3b01      	subs	r3, #1
 800d060:	b2da      	uxtb	r2, r3
 800d062:	4b03      	ldr	r3, [pc, #12]	@ (800d070 <UART5_IRQHandler+0x64>)
 800d064:	701a      	strb	r2, [r3, #0]
}
 800d066:	bf00      	nop
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	20005e52 	.word	0x20005e52
 800d070:	20005e51 	.word	0x20005e51
 800d074:	20002910 	.word	0x20002910

0800d078 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800d07c:	4b16      	ldr	r3, [pc, #88]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d105      	bne.n	800d090 <USART6_IRQHandler+0x18>
 800d084:	4b15      	ldr	r3, [pc, #84]	@ (800d0dc <USART6_IRQHandler+0x64>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	3301      	adds	r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	4b13      	ldr	r3, [pc, #76]	@ (800d0dc <USART6_IRQHandler+0x64>)
 800d08e:	701a      	strb	r2, [r3, #0]
 800d090:	4b11      	ldr	r3, [pc, #68]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	3301      	adds	r3, #1
 800d096:	b2da      	uxtb	r2, r3
 800d098:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d09a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 800d09c:	4810      	ldr	r0, [pc, #64]	@ (800d0e0 <USART6_IRQHandler+0x68>)
 800d09e:	f7fa fde5 	bl	8007c6c <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800d0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d005      	beq.n	800d0b6 <USART6_IRQHandler+0x3e>
 800d0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	4b09      	ldr	r3, [pc, #36]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	4b08      	ldr	r3, [pc, #32]	@ (800d0d8 <USART6_IRQHandler+0x60>)
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d109      	bne.n	800d0d2 <USART6_IRQHandler+0x5a>
 800d0be:	4b07      	ldr	r3, [pc, #28]	@ (800d0dc <USART6_IRQHandler+0x64>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <USART6_IRQHandler+0x5a>
 800d0c6:	4b05      	ldr	r3, [pc, #20]	@ (800d0dc <USART6_IRQHandler+0x64>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	4b03      	ldr	r3, [pc, #12]	@ (800d0dc <USART6_IRQHandler+0x64>)
 800d0d0:	701a      	strb	r2, [r3, #0]
}
 800d0d2:	bf00      	nop
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20005e52 	.word	0x20005e52
 800d0dc:	20005e51 	.word	0x20005e51
 800d0e0:	20002954 	.word	0x20002954

0800d0e4 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73fb      	strb	r3, [r7, #15]
 800d0f4:	e015      	b.n	800d122 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d134 <HAL_UART_TxCpltCallback+0x50>)
 800d0fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d10a      	bne.n	800d11c <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 800d106:	7bfa      	ldrb	r2, [r7, #15]
 800d108:	4613      	mov	r3, r2
 800d10a:	005b      	lsls	r3, r3, #1
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4a09      	ldr	r2, [pc, #36]	@ (800d138 <HAL_UART_TxCpltCallback+0x54>)
 800d112:	4413      	add	r3, r2
 800d114:	4618      	mov	r0, r3
 800d116:	f009 f84f 	bl	80161b8 <gos_triggerIncrement>
            break;
 800d11a:	e006      	b.n	800d12a <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	3301      	adds	r3, #1
 800d120:	73fb      	strb	r3, [r7, #15]
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	2b05      	cmp	r3, #5
 800d126:	d9e6      	bls.n	800d0f6 <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800d128:	bf00      	nop
 800d12a:	bf00      	nop
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	20000518 	.word	0x20000518
 800d138:	20002a10 	.word	0x20002a10

0800d13c <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800d144:	2300      	movs	r3, #0
 800d146:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d148:	2300      	movs	r3, #0
 800d14a:	73fb      	strb	r3, [r7, #15]
 800d14c:	e015      	b.n	800d17a <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800d14e:	7bfb      	ldrb	r3, [r7, #15]
 800d150:	4a0e      	ldr	r2, [pc, #56]	@ (800d18c <HAL_UART_RxCpltCallback+0x50>)
 800d152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d10a      	bne.n	800d174 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 800d15e:	7bfa      	ldrb	r2, [r7, #15]
 800d160:	4613      	mov	r3, r2
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4a09      	ldr	r2, [pc, #36]	@ (800d190 <HAL_UART_RxCpltCallback+0x54>)
 800d16a:	4413      	add	r3, r2
 800d16c:	4618      	mov	r0, r3
 800d16e:	f009 f823 	bl	80161b8 <gos_triggerIncrement>
            break;
 800d172:	e006      	b.n	800d182 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d174:	7bfb      	ldrb	r3, [r7, #15]
 800d176:	3301      	adds	r3, #1
 800d178:	73fb      	strb	r3, [r7, #15]
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
 800d17c:	2b05      	cmp	r3, #5
 800d17e:	d9e6      	bls.n	800d14e <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800d180:	bf00      	nop
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20000518 	.word	0x20000518
 800d190:	200029c8 	.word	0x200029c8

0800d194 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
 800d1a8:	e068      	b.n	800d27c <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
 800d1ac:	4a38      	ldr	r2, [pc, #224]	@ (800d290 <HAL_UART_MspInit+0xfc>)
 800d1ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d15d      	bne.n	800d276 <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73bb      	strb	r3, [r7, #14]
 800d1be:	e051      	b.n	800d264 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 800d1c0:	7bba      	ldrb	r2, [r7, #14]
 800d1c2:	4934      	ldr	r1, [pc, #208]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	440b      	add	r3, r1
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	7bfa      	ldrb	r2, [r7, #15]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d143      	bne.n	800d25e <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 800d1d6:	7bba      	ldrb	r2, [r7, #14]
 800d1d8:	492e      	ldr	r1, [pc, #184]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3320      	adds	r3, #32
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d016      	beq.n	800d21a <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 800d1ec:	7bba      	ldrb	r2, [r7, #14]
 800d1ee:	4929      	ldr	r1, [pc, #164]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3320      	adds	r3, #32
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	1d1a      	adds	r2, r3, #4
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	639a      	str	r2, [r3, #56]	@ 0x38
 800d204:	7bba      	ldrb	r2, [r7, #14]
 800d206:	4923      	ldr	r1, [pc, #140]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d208:	4613      	mov	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	00db      	lsls	r3, r3, #3
 800d210:	440b      	add	r3, r1
 800d212:	3320      	adds	r3, #32
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 800d21a:	7bba      	ldrb	r2, [r7, #14]
 800d21c:	491d      	ldr	r1, [pc, #116]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d21e:	4613      	mov	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4413      	add	r3, r2
 800d224:	00db      	lsls	r3, r3, #3
 800d226:	440b      	add	r3, r1
 800d228:	3324      	adds	r3, #36	@ 0x24
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d016      	beq.n	800d25e <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 800d230:	7bba      	ldrb	r2, [r7, #14]
 800d232:	4918      	ldr	r1, [pc, #96]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	440b      	add	r3, r1
 800d23e:	3324      	adds	r3, #36	@ 0x24
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	1d1a      	adds	r2, r3, #4
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	635a      	str	r2, [r3, #52]	@ 0x34
 800d248:	7bba      	ldrb	r2, [r7, #14]
 800d24a:	4912      	ldr	r1, [pc, #72]	@ (800d294 <HAL_UART_MspInit+0x100>)
 800d24c:	4613      	mov	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	440b      	add	r3, r1
 800d256:	3324      	adds	r3, #36	@ 0x24
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
 800d260:	3301      	adds	r3, #1
 800d262:	73bb      	strb	r3, [r7, #14]
 800d264:	7bba      	ldrb	r2, [r7, #14]
 800d266:	4b0c      	ldr	r3, [pc, #48]	@ (800d298 <HAL_UART_MspInit+0x104>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	490c      	ldr	r1, [pc, #48]	@ (800d29c <HAL_UART_MspInit+0x108>)
 800d26c:	fba1 1303 	umull	r1, r3, r1, r3
 800d270:	095b      	lsrs	r3, r3, #5
 800d272:	429a      	cmp	r2, r3
 800d274:	d3a4      	bcc.n	800d1c0 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	3301      	adds	r3, #1
 800d27a:	73fb      	strb	r3, [r7, #15]
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
 800d27e:	2b05      	cmp	r3, #5
 800d280:	d993      	bls.n	800d1aa <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800d282:	bf00      	nop
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20000518 	.word	0x20000518
 800d294:	0801aa10 	.word	0x0801aa10
 800d298:	200003fc 	.word	0x200003fc
 800d29c:	cccccccd 	.word	0xcccccccd

0800d2a0 <drv_w25q64Init>:

/*
 * Function: drv_w25q64Init
 */
gos_result_t drv_w25q64Init (void_t* pDevice)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800d2a8:	2355      	movs	r3, #85	@ 0x55
 800d2aa:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_W25Q64_DEVICE_NULL);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d103      	bne.n	800d2be <drv_w25q64Init+0x1e>
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	f043 0301 	orr.w	r3, r3, #1
 800d2bc:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex), ((drv_w25q64Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_W25Q64_MUTEX_INIT);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	699b      	ldr	r3, [r3, #24]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10d      	bne.n	800d2e2 <drv_w25q64Init+0x42>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	3302      	adds	r3, #2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f006 fdae 	bl	8013e2c <gos_mutexInit>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b55      	cmp	r3, #85	@ 0x55
 800d2d4:	d005      	beq.n	800d2e2 <drv_w25q64Init+0x42>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	699b      	ldr	r3, [r3, #24]
 800d2da:	f043 0202 	orr.w	r2, r3, #2
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <drv_w25q64Init+0x4e>
 800d2e8:	2355      	movs	r3, #85	@ 0x55
 800d2ea:	73fb      	strb	r3, [r7, #15]
 800d2ec:	e001      	b.n	800d2f2 <drv_w25q64Init+0x52>
 800d2ee:	23ae      	movs	r3, #174	@ 0xae
 800d2f0:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <drv_w25q64ReadData>:

/*
 * Function: drv_w25q64ReadData
 */
GOS_INLINE void_t drv_w25q64ReadData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage  = address / W25Q64_PAGE_SIZE;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	0a1b      	lsrs	r3, r3, #8
 800d30e:	61fb      	str	r3, [r7, #28]
    u8_t  offset     = address % W25Q64_PAGE_SIZE;
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	76fb      	strb	r3, [r7, #27]
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	021a      	lsls	r2, r3, #8
 800d318:	7efb      	ldrb	r3, [r7, #27]
 800d31a:	4413      	add	r3, r2
 800d31c:	617b      	str	r3, [r7, #20]
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800d31e:	2303      	movs	r3, #3
 800d320:	743b      	strb	r3, [r7, #16]
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	0c1b      	lsrs	r3, r3, #16
 800d326:	b2db      	uxtb	r3, r3
 800d328:	747b      	strb	r3, [r7, #17]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	0a1b      	lsrs	r3, r3, #8
 800d32e:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800d330:	74bb      	strb	r3, [r7, #18]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800d336:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d030      	beq.n	800d3a0 <drv_w25q64ReadData+0xa4>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d02d      	beq.n	800d3a0 <drv_w25q64ReadData+0xa4>
	{
        DRV_ERROR_CHK_SET(
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d110      	bne.n	800d36e <drv_w25q64ReadData+0x72>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	1c9a      	adds	r2, r3, #2
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	f006 fd82 	bl	8013e60 <gos_mutexLock>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b55      	cmp	r3, #85	@ 0x55
 800d360:	d005      	beq.n	800d36e <drv_w25q64ReadData+0x72>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	f043 0204 	orr.w	r2, r3, #4
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		drv_w25q64ChipSelectLow(pDevice);
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 f9c9 	bl	800d706 <drv_w25q64ChipSelectLow>
		drv_w25q64Write(pDevice, command, 4);
 800d374:	f107 0310 	add.w	r3, r7, #16
 800d378:	2204      	movs	r2, #4
 800d37a:	4619      	mov	r1, r3
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 fa12 	bl	800d7a6 <drv_w25q64Write>
		drv_w25q64Read(pDevice, pData, size);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	b29b      	uxth	r3, r3
 800d386:	461a      	mov	r2, r3
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 fa2f 	bl	800d7ee <drv_w25q64Read>
		drv_w25q64ChipSelectHigh(pDevice);
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f000 f9c6 	bl	800d722 <drv_w25q64ChipSelectHigh>

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3302      	adds	r3, #2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f006 fe66 	bl	801406c <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800d3a0:	bf00      	nop
 800d3a2:	3720      	adds	r7, #32
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <drv_w25q64WriteData>:

/*
 * Function: drv_w25q64WriteData
 */
GOS_INLINE void_t drv_w25q64WriteData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b090      	sub	sp, #64	@ 0x40
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage    = address / W25Q64_PAGE_SIZE;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	0a1b      	lsrs	r3, r3, #8
 800d3ba:	627b      	str	r3, [r7, #36]	@ 0x24
    u8_t  offset       = address % W25Q64_PAGE_SIZE;
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	u16_t startSector  = startPage / 16;
 800d3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c4:	091b      	lsrs	r3, r3, #4
 800d3c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	u16_t endSector    = (startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE)) / 16;
 800d3c8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	0a1a      	lsrs	r2, r3, #8
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d6:	4413      	add	r3, r2
 800d3d8:	091b      	lsrs	r3, r3, #4
 800d3da:	843b      	strh	r3, [r7, #32]
	u16_t numOfSectors = endSector - startSector + 1;
 800d3dc:	8c3a      	ldrh	r2, [r7, #32]
 800d3de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	83fb      	strh	r3, [r7, #30]
	u32_t sectorOffset = ((startPage % 16) * W25Q64_PAGE_SIZE) + offset;
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ea:	f003 030f 	and.w	r3, r3, #15
 800d3ee:	021a      	lsls	r2, r3, #8
 800d3f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d3f4:	4413      	add	r3, r2
 800d3f6:	633b      	str	r3, [r7, #48]	@ 0x30
	u32_t dataIndx     = 0u;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d065      	beq.n	800d4ce <drv_w25q64WriteData+0x126>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d062      	beq.n	800d4ce <drv_w25q64WriteData+0x126>
	{
        DRV_ERROR_CHK_SET(
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d110      	bne.n	800d432 <drv_w25q64WriteData+0x8a>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	1c9a      	adds	r2, r3, #2
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	4619      	mov	r1, r3
 800d41a:	4610      	mov	r0, r2
 800d41c:	f006 fd20 	bl	8013e60 <gos_mutexLock>
 800d420:	4603      	mov	r3, r0
 800d422:	2b55      	cmp	r3, #85	@ 0x55
 800d424:	d005      	beq.n	800d432 <drv_w25q64WriteData+0x8a>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	f043 0204 	orr.w	r2, r3, #4
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		for (u16_t i = 0u; i < numOfSectors; i++)
 800d432:	2300      	movs	r3, #0
 800d434:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d436:	e041      	b.n	800d4bc <drv_w25q64WriteData+0x114>
		{
			u32_t _startPage = startSector * 16;
 800d438:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d43a:	011b      	lsls	r3, r3, #4
 800d43c:	61bb      	str	r3, [r7, #24]

			//(void_t) memset(sectorBuffer, 0, SECTOR_SIZE);

			drv_w25q64ReadDataFast(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800d43e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	4b24      	ldr	r3, [pc, #144]	@ (800d4d8 <drv_w25q64WriteData+0x130>)
 800d446:	2200      	movs	r2, #0
 800d448:	69b9      	ldr	r1, [r7, #24]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 f846 	bl	800d4dc <drv_w25q64ReadDataFast>

			u16_t bytesRem = drv_w25q64BytesToModify(size, sectorOffset);
 800d450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d452:	b29b      	uxth	r3, r3
 800d454:	4619      	mov	r1, r3
 800d456:	6838      	ldr	r0, [r7, #0]
 800d458:	f000 f939 	bl	800d6ce <drv_w25q64BytesToModify>
 800d45c:	4603      	mov	r3, r0
 800d45e:	82fb      	strh	r3, [r7, #22]

			for (u16_t j = 0u; j < bytesRem; j++)
 800d460:	2300      	movs	r3, #0
 800d462:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d464:	e00d      	b.n	800d482 <drv_w25q64WriteData+0xda>
			{
				sectorBuffer[j + sectorOffset] = pData[j + dataIndx];
 800d466:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46a:	4413      	add	r3, r2
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	441a      	add	r2, r3
 800d470:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800d472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d474:	440b      	add	r3, r1
 800d476:	7811      	ldrb	r1, [r2, #0]
 800d478:	4a17      	ldr	r2, [pc, #92]	@ (800d4d8 <drv_w25q64WriteData+0x130>)
 800d47a:	54d1      	strb	r1, [r2, r3]
			for (u16_t j = 0u; j < bytesRem; j++)
 800d47c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d47e:	3301      	adds	r3, #1
 800d480:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d482:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d484:	8afb      	ldrh	r3, [r7, #22]
 800d486:	429a      	cmp	r2, r3
 800d488:	d3ed      	bcc.n	800d466 <drv_w25q64WriteData+0xbe>
			}

			drv_w25q64WriteDataClean(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800d48a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	4b11      	ldr	r3, [pc, #68]	@ (800d4d8 <drv_w25q64WriteData+0x130>)
 800d492:	2200      	movs	r2, #0
 800d494:	69b9      	ldr	r1, [r7, #24]
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 f854 	bl	800d544 <drv_w25q64WriteDataClean>

			startSector++;
 800d49c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d49e:	3301      	adds	r3, #1
 800d4a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
			sectorOffset = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	633b      	str	r3, [r7, #48]	@ 0x30
			dataIndx = dataIndx + bytesRem;
 800d4a6:	8afb      	ldrh	r3, [r7, #22]
 800d4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4aa:	4413      	add	r3, r2
 800d4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			size = size - bytesRem;
 800d4ae:	8afb      	ldrh	r3, [r7, #22]
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	603b      	str	r3, [r7, #0]
		for (u16_t i = 0u; i < numOfSectors; i++)
 800d4b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d4bc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800d4be:	8bfb      	ldrh	r3, [r7, #30]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d3b9      	bcc.n	800d438 <drv_w25q64WriteData+0x90>
		}

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3302      	adds	r3, #2
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f006 fdcf 	bl	801406c <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800d4ce:	bf00      	nop
 800d4d0:	3738      	adds	r7, #56	@ 0x38
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20002a58 	.word	0x20002a58

0800d4dc <drv_w25q64ReadDataFast>:
 * @param   size      : Size of data to be read.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ReadDataFast (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b088      	sub	sp, #32
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	021a      	lsls	r2, r3, #8
 800d4f0:	79fb      	ldrb	r3, [r7, #7]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	61fb      	str	r3, [r7, #28]
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800d4f6:	230b      	movs	r3, #11
 800d4f8:	753b      	strb	r3, [r7, #20]
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	0c1b      	lsrs	r3, r3, #16
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	757b      	strb	r3, [r7, #21]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	0a1b      	lsrs	r3, r3, #8
 800d506:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800d508:	75bb      	strb	r3, [r7, #22]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800d50e:	75fb      	strb	r3, [r7, #23]
 800d510:	2300      	movs	r3, #0
 800d512:	763b      	strb	r3, [r7, #24]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f8f6 	bl	800d706 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 5);
 800d51a:	f107 0314 	add.w	r3, r7, #20
 800d51e:	2205      	movs	r2, #5
 800d520:	4619      	mov	r1, r3
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f000 f93f 	bl	800d7a6 <drv_w25q64Write>
	drv_w25q64Read(pDevice, pData, size);
 800d528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	461a      	mov	r2, r3
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f000 f95c 	bl	800d7ee <drv_w25q64Read>
	drv_w25q64ChipSelectHigh(pDevice);
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f000 f8f3 	bl	800d722 <drv_w25q64ChipSelectHigh>
}
 800d53c:	bf00      	nop
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <drv_w25q64WriteDataClean>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64WriteDataClean (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b090      	sub	sp, #64	@ 0x40
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	4613      	mov	r3, r2
 800d552:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t endPage      = startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE);
 800d554:	79fa      	ldrb	r2, [r7, #7]
 800d556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d558:	4413      	add	r3, r2
 800d55a:	3b01      	subs	r3, #1
 800d55c:	0a1b      	lsrs	r3, r3, #8
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	4413      	add	r3, r2
 800d562:	62fb      	str	r3, [r7, #44]	@ 0x2c
	u32_t numOfPages   = endPage - startPage + 1;
 800d564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	3301      	adds	r3, #1
 800d56c:	62bb      	str	r3, [r7, #40]	@ 0x28
	u16_t startSector  = startPage / 16;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	091b      	lsrs	r3, r3, #4
 800d572:	84fb      	strh	r3, [r7, #38]	@ 0x26
	u16_t endSector    = endPage / 16;
 800d574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d576:	091b      	lsrs	r3, r3, #4
 800d578:	84bb      	strh	r3, [r7, #36]	@ 0x24
	u16_t numOfSectors = endSector - startSector + 1;
 800d57a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d57c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	b29b      	uxth	r3, r3
 800d582:	3301      	adds	r3, #1
 800d584:	847b      	strh	r3, [r7, #34]	@ 0x22
	u32_t dataPosition = 0u;
 800d586:	2300      	movs	r3, #0
 800d588:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u32_t idx;

    /*
     * Function code.
     */
	for (idx = 0u; idx < numOfSectors; idx++)
 800d58a:	2300      	movs	r3, #0
 800d58c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d58e:	e00b      	b.n	800d5a8 <drv_w25q64WriteDataClean+0x64>
	{
		drv_w25q64EraseSector(pDevice, (startSector + idx));
 800d590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d592:	b29a      	uxth	r2, r3
 800d594:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d596:	4413      	add	r3, r2
 800d598:	b29b      	uxth	r3, r3
 800d59a:	4619      	mov	r1, r3
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f000 f94a 	bl	800d836 <drv_w25q64EraseSector>
	for (idx = 0u; idx < numOfSectors; idx++)
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d5aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d3ef      	bcc.n	800d590 <drv_w25q64WriteDataClean+0x4c>
	}

	(void_t) memset(pageWriteBuffer, 0, 266);
 800d5b0:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	4837      	ldr	r0, [pc, #220]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d5b8:	f009 fd60 	bl	801707c <memset>

	for (idx = 0; idx < numOfPages; idx++)
 800d5bc:	2300      	movs	r3, #0
 800d5be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5c0:	e05e      	b.n	800d680 <drv_w25q64WriteDataClean+0x13c>
	{
		u32_t memAddress = (startPage * W25Q64_PAGE_SIZE) + offset;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	021a      	lsls	r2, r3, #8
 800d5c6:	79fb      	ldrb	r3, [r7, #7]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	61fb      	str	r3, [r7, #28]
		u32_t bytesRem = drv_w25q64BytesToWrite(size, offset);
 800d5cc:	79fb      	ldrb	r3, [r7, #7]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800d5d4:	f000 f860 	bl	800d698 <drv_w25q64BytesToWrite>
 800d5d8:	61b8      	str	r0, [r7, #24]
		u32_t indx = 4;
 800d5da:	2304      	movs	r3, #4
 800d5dc:	637b      	str	r3, [r7, #52]	@ 0x34

		drv_w25q64WriteEnable(pDevice);
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 f8ad 	bl	800d73e <drv_w25q64WriteEnable>

		pageWriteBuffer[0] = 0x02;
 800d5e4:	4b2b      	ldr	r3, [pc, #172]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	701a      	strb	r2, [r3, #0]
		pageWriteBuffer[1] = (u8_t)((memAddress >> 16) & 0xFF);
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	0c1b      	lsrs	r3, r3, #16
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	4b28      	ldr	r3, [pc, #160]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d5f2:	705a      	strb	r2, [r3, #1]
		pageWriteBuffer[2] = (u8_t)((memAddress >> 8) & 0xFF);
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	0a1b      	lsrs	r3, r3, #8
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	4b26      	ldr	r3, [pc, #152]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d5fc:	709a      	strb	r2, [r3, #2]
		pageWriteBuffer[3] = (u8_t)(memAddress & 0xFF);
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	b2da      	uxtb	r2, r3
 800d602:	4b24      	ldr	r3, [pc, #144]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d604:	70da      	strb	r2, [r3, #3]

		u16_t bytesToSend = bytesRem + indx;
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	b29a      	uxth	r2, r3
 800d60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	4413      	add	r3, r2
 800d610:	82fb      	strh	r3, [r7, #22]

		for (u16_t i = 0; i < bytesRem; i++)
 800d612:	2300      	movs	r3, #0
 800d614:	867b      	strh	r3, [r7, #50]	@ 0x32
 800d616:	e00d      	b.n	800d634 <drv_w25q64WriteDataClean+0xf0>
		{
			pageWriteBuffer[indx++] = pData[ i + dataPosition];
 800d618:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800d61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d61c:	4413      	add	r3, r2
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	441a      	add	r2, r3
 800d622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d624:	1c59      	adds	r1, r3, #1
 800d626:	6379      	str	r1, [r7, #52]	@ 0x34
 800d628:	7811      	ldrb	r1, [r2, #0]
 800d62a:	4a1a      	ldr	r2, [pc, #104]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d62c:	54d1      	strb	r1, [r2, r3]
		for (u16_t i = 0; i < bytesRem; i++)
 800d62e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d630:	3301      	adds	r3, #1
 800d632:	867b      	strh	r3, [r7, #50]	@ 0x32
 800d634:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d8ed      	bhi.n	800d618 <drv_w25q64WriteDataClean+0xd4>
		}

		drv_w25q64ChipSelectLow(pDevice);
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f000 f862 	bl	800d706 <drv_w25q64ChipSelectLow>

		drv_w25q64Write(pDevice, pageWriteBuffer, bytesToSend);
 800d642:	8afb      	ldrh	r3, [r7, #22]
 800d644:	461a      	mov	r2, r3
 800d646:	4913      	ldr	r1, [pc, #76]	@ (800d694 <drv_w25q64WriteDataClean+0x150>)
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 f8ac 	bl	800d7a6 <drv_w25q64Write>

		drv_w25q64ChipSelectHigh(pDevice);
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 f867 	bl	800d722 <drv_w25q64ChipSelectHigh>

		startPage++;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	3301      	adds	r3, #1
 800d658:	60bb      	str	r3, [r7, #8]
		offset = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	71fb      	strb	r3, [r7, #7]
		size = size - bytesRem;
 800d65e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	64bb      	str	r3, [r7, #72]	@ 0x48
		dataPosition = dataPosition + bytesRem;
 800d666:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	4413      	add	r3, r2
 800d66c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		(void_t) gos_taskSleep(5);
 800d66e:	2005      	movs	r0, #5
 800d670:	f004 f89c 	bl	80117ac <gos_taskSleep>

		drv_w25q64WriteDisable(pDevice);
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f000 f87c 	bl	800d772 <drv_w25q64WriteDisable>
	for (idx = 0; idx < numOfPages; idx++)
 800d67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67c:	3301      	adds	r3, #1
 800d67e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d680:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	429a      	cmp	r2, r3
 800d686:	d39c      	bcc.n	800d5c2 <drv_w25q64WriteDataClean+0x7e>
	}
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	3740      	adds	r7, #64	@ 0x40
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20003a58 	.word	0x20003a58

0800d698 <drv_w25q64BytesToWrite>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to write.
 */
GOS_STATIC u32_t drv_w25q64BytesToWrite (u32_t size, u16_t offset)
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < W25Q64_PAGE_SIZE)
 800d6a8:	887a      	ldrh	r2, [r7, #2]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	2bff      	cmp	r3, #255	@ 0xff
 800d6b0:	d802      	bhi.n	800d6b8 <drv_w25q64BytesToWrite+0x20>
	{
		bytesToWrite = size;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	60fb      	str	r3, [r7, #12]
 800d6b6:	e003      	b.n	800d6c0 <drv_w25q64BytesToWrite+0x28>
	}
	else
	{
		bytesToWrite = W25Q64_PAGE_SIZE - offset;
 800d6b8:	887b      	ldrh	r3, [r7, #2]
 800d6ba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800d6be:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <drv_w25q64BytesToModify>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to modify.
 */
GOS_STATIC u32_t drv_w25q64BytesToModify (u32_t size, u16_t offset)
{
 800d6ce:	b480      	push	{r7}
 800d6d0:	b085      	sub	sp, #20
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < SECTOR_SIZE)
 800d6de:	887a      	ldrh	r2, [r7, #2]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6e8:	d202      	bcs.n	800d6f0 <drv_w25q64BytesToModify+0x22>
	{
		bytesToWrite = size;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
 800d6ee:	e003      	b.n	800d6f8 <drv_w25q64BytesToModify+0x2a>
	}
	else
	{
		bytesToWrite = SECTOR_SIZE - offset;
 800d6f0:	887b      	ldrh	r3, [r7, #2]
 800d6f2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800d6f6:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <drv_w25q64ChipSelectLow>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectLow (void_t* pDevice)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	785b      	ldrb	r3, [r3, #1]
 800d712:	2100      	movs	r1, #0
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd fabd 	bl	800ac94 <drv_gpioWritePin>
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <drv_w25q64ChipSelectHigh>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectHigh (void_t* pDevice)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	785b      	ldrb	r3, [r3, #1]
 800d72e:	2101      	movs	r1, #1
 800d730:	4618      	mov	r0, r3
 800d732:	f7fd faaf 	bl	800ac94 <drv_gpioWritePin>
}
 800d736:	bf00      	nop
 800d738:	3708      	adds	r7, #8
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <drv_w25q64WriteEnable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteEnable (void_t* pDevice)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x06;
 800d746:	2306      	movs	r3, #6
 800d748:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff ffdb 	bl	800d706 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800d750:	f107 030f 	add.w	r3, r7, #15
 800d754:	2201      	movs	r2, #1
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f824 	bl	800d7a6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ffdf 	bl	800d722 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800d764:	2005      	movs	r0, #5
 800d766:	f004 f821 	bl	80117ac <gos_taskSleep>
}
 800d76a:	bf00      	nop
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <drv_w25q64WriteDisable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteDisable (void_t* pDevice)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b084      	sub	sp, #16
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x04;
 800d77a:	2304      	movs	r3, #4
 800d77c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff ffc1 	bl	800d706 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800d784:	f107 030f 	add.w	r3, r7, #15
 800d788:	2201      	movs	r2, #1
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f80a 	bl	800d7a6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7ff ffc5 	bl	800d722 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800d798:	2005      	movs	r0, #5
 800d79a:	f004 f807 	bl	80117ac <gos_taskSleep>
}
 800d79e:	bf00      	nop
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <drv_w25q64Write>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Write (void_t* pDevice, u8_t* pData, u16_t size)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b086      	sub	sp, #24
 800d7aa:	af02      	add	r7, sp, #8
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d114      	bne.n	800d7e6 <drv_w25q64Write+0x40>
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	7818      	ldrb	r0, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6919      	ldr	r1, [r3, #16]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	68b9      	ldr	r1, [r7, #8]
 800d7d0:	f7fe f8ee 	bl	800b9b0 <drv_spiTransmitIT>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b55      	cmp	r3, #85	@ 0x55
 800d7d8:	d005      	beq.n	800d7e6 <drv_w25q64Write+0x40>
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	699b      	ldr	r3, [r3, #24]
 800d7de:	f043 0210 	orr.w	r2, r3, #16
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->writeTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_WRITE
            );
}
 800d7e6:	bf00      	nop
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <drv_w25q64Read>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Read (void_t* pDevice, u8_t* pData, u16_t size)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b086      	sub	sp, #24
 800d7f2:	af02      	add	r7, sp, #8
 800d7f4:	60f8      	str	r0, [r7, #12]
 800d7f6:	60b9      	str	r1, [r7, #8]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d114      	bne.n	800d82e <drv_w25q64Read+0x40>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	7818      	ldrb	r0, [r3, #0]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6899      	ldr	r1, [r3, #8]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	88fa      	ldrh	r2, [r7, #6]
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	460b      	mov	r3, r1
 800d816:	68b9      	ldr	r1, [r7, #8]
 800d818:	f7fe f92e 	bl	800ba78 <drv_spiReceiveIT>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b55      	cmp	r3, #85	@ 0x55
 800d820:	d005      	beq.n	800d82e <drv_w25q64Read+0x40>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	f043 0208 	orr.w	r2, r3, #8
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->readTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_READ
            );
}
 800d82e:	bf00      	nop
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <drv_w25q64EraseSector>:
 * @param pDevice
 * @param sector
 * @return
 */
GOS_STATIC void_t drv_w25q64EraseSector (void_t* pDevice, u16_t sector)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	460b      	mov	r3, r1
 800d840:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t memAddress = sector * 16 * W25Q64_PAGE_SIZE;
 800d842:	887b      	ldrh	r3, [r7, #2]
 800d844:	031b      	lsls	r3, r3, #12
 800d846:	60fb      	str	r3, [r7, #12]
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800d848:	2320      	movs	r3, #32
 800d84a:	723b      	strb	r3, [r7, #8]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	0c1b      	lsrs	r3, r3, #16
 800d850:	b2db      	uxtb	r3, r3
 800d852:	727b      	strb	r3, [r7, #9]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	0a1b      	lsrs	r3, r3, #8
 800d858:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800d85a:	72bb      	strb	r3, [r7, #10]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800d860:	72fb      	strb	r3, [r7, #11]

    /*
     * Function code.
     */
	drv_w25q64WriteEnable(pDevice);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff ff6b 	bl	800d73e <drv_w25q64WriteEnable>
	drv_w25q64ChipSelectLow(pDevice);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff ff4c 	bl	800d706 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 4);
 800d86e:	f107 0308 	add.w	r3, r7, #8
 800d872:	2204      	movs	r2, #4
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff ff95 	bl	800d7a6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7ff ff50 	bl	800d722 <drv_w25q64ChipSelectHigh>

	(void_t) gos_taskSleep(450);
 800d882:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800d886:	f003 ff91 	bl	80117ac <gos_taskSleep>

	drv_w25q64WriteDisable(pDevice);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff ff71 	bl	800d772 <drv_w25q64WriteDisable>
}
 800d890:	bf00      	nop
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 800d89e:	2355      	movs	r3, #85	@ 0x55
 800d8a0:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 800d8aa:	4b3a      	ldr	r3, [pc, #232]	@ (800d994 <svl_dsmInit+0xfc>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d06a      	beq.n	800d988 <svl_dsmInit+0xf0>
	{
		// Register DSM task.
		GOS_CONCAT_RESULT(dsmInitResult, gos_taskRegister(&svlDsmDaemonDesc, NULL));
 800d8b2:	79fb      	ldrb	r3, [r7, #7]
 800d8b4:	2b55      	cmp	r3, #85	@ 0x55
 800d8b6:	d106      	bne.n	800d8c6 <svl_dsmInit+0x2e>
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	4837      	ldr	r0, [pc, #220]	@ (800d998 <svl_dsmInit+0x100>)
 800d8bc:	f003 fde4 	bl	8011488 <gos_taskRegister>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	71fb      	strb	r3, [r7, #7]
 800d8c4:	e001      	b.n	800d8ca <svl_dsmInit+0x32>
 800d8c6:	23ae      	movs	r3, #174	@ 0xae
 800d8c8:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	71bb      	strb	r3, [r7, #6]
 800d8ce:	e052      	b.n	800d976 <svl_dsmInit+0xde>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800d8d0:	4832      	ldr	r0, [pc, #200]	@ (800d99c <svl_dsmInit+0x104>)
 800d8d2:	f002 fc1b 	bl	801010c <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 800d8d6:	79ba      	ldrb	r2, [r7, #6]
 800d8d8:	4931      	ldr	r1, [pc, #196]	@ (800d9a0 <svl_dsmInit+0x108>)
 800d8da:	4613      	mov	r3, r2
 800d8dc:	015b      	lsls	r3, r3, #5
 800d8de:	4413      	add	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	440b      	add	r3, r1
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f002 fc10 	bl	801010c <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800d8ec:	482b      	ldr	r0, [pc, #172]	@ (800d99c <svl_dsmInit+0x104>)
 800d8ee:	f002 fc0d 	bl	801010c <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	717b      	strb	r3, [r7, #5]
 800d8f6:	e036      	b.n	800d966 <svl_dsmInit+0xce>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 800d8f8:	79ba      	ldrb	r2, [r7, #6]
 800d8fa:	797b      	ldrb	r3, [r7, #5]
 800d8fc:	4828      	ldr	r0, [pc, #160]	@ (800d9a0 <svl_dsmInit+0x108>)
 800d8fe:	00d9      	lsls	r1, r3, #3
 800d900:	4613      	mov	r3, r2
 800d902:	015b      	lsls	r3, r3, #5
 800d904:	4413      	add	r3, r2
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	440b      	add	r3, r1
 800d90a:	4403      	add	r3, r0
 800d90c:	3308      	adds	r3, #8
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d02c      	beq.n	800d96e <svl_dsmInit+0xd6>
				{
					GOS_CONCAT_RESULT(dsmInitResult, gos_errorTraceInit(
 800d914:	79fb      	ldrb	r3, [r7, #7]
 800d916:	2b55      	cmp	r3, #85	@ 0x55
 800d918:	d120      	bne.n	800d95c <svl_dsmInit+0xc4>
 800d91a:	79ba      	ldrb	r2, [r7, #6]
 800d91c:	797b      	ldrb	r3, [r7, #5]
 800d91e:	4820      	ldr	r0, [pc, #128]	@ (800d9a0 <svl_dsmInit+0x108>)
 800d920:	00d9      	lsls	r1, r3, #3
 800d922:	4613      	mov	r3, r2
 800d924:	015b      	lsls	r3, r3, #5
 800d926:	4413      	add	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	440b      	add	r3, r1
 800d92c:	4403      	add	r3, r0
 800d92e:	3304      	adds	r3, #4
 800d930:	681c      	ldr	r4, [r3, #0]
 800d932:	79ba      	ldrb	r2, [r7, #6]
 800d934:	797b      	ldrb	r3, [r7, #5]
 800d936:	481a      	ldr	r0, [pc, #104]	@ (800d9a0 <svl_dsmInit+0x108>)
 800d938:	00d9      	lsls	r1, r3, #3
 800d93a:	4613      	mov	r3, r2
 800d93c:	015b      	lsls	r3, r3, #5
 800d93e:	4413      	add	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	440b      	add	r3, r1
 800d944:	4403      	add	r3, r0
 800d946:	3308      	adds	r3, #8
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4798      	blx	r3
 800d94c:	4603      	mov	r3, r0
 800d94e:	4619      	mov	r1, r3
 800d950:	4620      	mov	r0, r4
 800d952:	f005 fcb5 	bl	80132c0 <gos_errorTraceInit>
 800d956:	4603      	mov	r3, r0
 800d958:	71fb      	strb	r3, [r7, #7]
 800d95a:	e001      	b.n	800d960 <svl_dsmInit+0xc8>
 800d95c:	23ae      	movs	r3, #174	@ 0xae
 800d95e:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800d960:	797b      	ldrb	r3, [r7, #5]
 800d962:	3301      	adds	r3, #1
 800d964:	717b      	strb	r3, [r7, #5]
 800d966:	797b      	ldrb	r3, [r7, #5]
 800d968:	2b0f      	cmp	r3, #15
 800d96a:	d9c5      	bls.n	800d8f8 <svl_dsmInit+0x60>
 800d96c:	e000      	b.n	800d970 <svl_dsmInit+0xd8>
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer()));
				}
				else
				{
					// End of initializers.
					break;
 800d96e:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800d970:	79bb      	ldrb	r3, [r7, #6]
 800d972:	3301      	adds	r3, #1
 800d974:	71bb      	strb	r3, [r7, #6]
 800d976:	79ba      	ldrb	r2, [r7, #6]
 800d978:	4b06      	ldr	r3, [pc, #24]	@ (800d994 <svl_dsmInit+0xfc>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4909      	ldr	r1, [pc, #36]	@ (800d9a4 <svl_dsmInit+0x10c>)
 800d97e:	fba1 1303 	umull	r1, r3, r1, r3
 800d982:	095b      	lsrs	r3, r3, #5
 800d984:	429a      	cmp	r2, r3
 800d986:	d3a3      	bcc.n	800d8d0 <svl_dsmInit+0x38>
	else
	{
		// Configuration is empty.
	}

	return dsmInitResult;
 800d988:	79fb      	ldrb	r3, [r7, #7]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd90      	pop	{r4, r7, pc}
 800d992:	bf00      	nop
 800d994:	20000350 	.word	0x20000350
 800d998:	20000530 	.word	0x20000530
 800d99c:	080195a8 	.word	0x080195a8
 800d9a0:	0801a658 	.word	0x0801a658
 800d9a4:	3e0f83e1 	.word	0x3e0f83e1

0800d9a8 <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 800d9ae:	2355      	movs	r3, #85	@ 0x55
 800d9b0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n"));
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	2b55      	cmp	r3, #85	@ 0x55
 800d9b6:	d106      	bne.n	800d9c6 <svl_dsmPrintOSInfo+0x1e>
 800d9b8:	490d      	ldr	r1, [pc, #52]	@ (800d9f0 <svl_dsmPrintOSInfo+0x48>)
 800d9ba:	2049      	movs	r0, #73	@ 0x49
 800d9bc:	f008 f94a 	bl	8015c54 <gos_traceTraceFormatted>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	71fb      	strb	r3, [r7, #7]
 800d9c4:	e001      	b.n	800d9ca <svl_dsmPrintOSInfo+0x22>
 800d9c6:	23ae      	movs	r3, #174	@ 0xae
 800d9c8:	71fb      	strb	r3, [r7, #7]
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR));
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
 800d9cc:	2b55      	cmp	r3, #85	@ 0x55
 800d9ce:	d108      	bne.n	800d9e2 <svl_dsmPrintOSInfo+0x3a>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	4907      	ldr	r1, [pc, #28]	@ (800d9f4 <svl_dsmPrintOSInfo+0x4c>)
 800d9d6:	2049      	movs	r0, #73	@ 0x49
 800d9d8:	f008 f93c 	bl	8015c54 <gos_traceTraceFormatted>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	71fb      	strb	r3, [r7, #7]
 800d9e0:	e001      	b.n	800d9e6 <svl_dsmPrintOSInfo+0x3e>
 800d9e2:	23ae      	movs	r3, #174	@ 0xae
 800d9e4:	71fb      	strb	r3, [r7, #7]

	return printResult;
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	080195ac 	.word	0x080195ac
 800d9f4:	080195c4 	.word	0x080195c4

0800d9f8 <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b0ac      	sub	sp, #176	@ 0xb0
 800d9fc:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 800d9fe:	2355      	movs	r3, #85	@ 0x55
 800da00:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 800da04:	1d3b      	adds	r3, r7, #4
 800da06:	22a0      	movs	r2, #160	@ 0xa0
 800da08:	2100      	movs	r1, #0
 800da0a:	4618      	mov	r0, r3
 800da0c:	f009 fb36 	bl	801707c <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetLibVersion(&libVer));
 800da10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da14:	2b55      	cmp	r3, #85	@ 0x55
 800da16:	d107      	bne.n	800da28 <svl_dsmPrintLibInfo+0x30>
 800da18:	1d3b      	adds	r3, r7, #4
 800da1a:	4618      	mov	r0, r3
 800da1c:	f000 ffcc 	bl	800e9b8 <svl_pdhGetLibVersion>
 800da20:	4603      	mov	r3, r0
 800da22:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da26:	e002      	b.n	800da2e <svl_dsmPrintLibInfo+0x36>
 800da28:	23ae      	movs	r3, #174	@ 0xae
 800da2a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n"));
 800da2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da32:	2b55      	cmp	r3, #85	@ 0x55
 800da34:	d107      	bne.n	800da46 <svl_dsmPrintLibInfo+0x4e>
 800da36:	493a      	ldr	r1, [pc, #232]	@ (800db20 <svl_dsmPrintLibInfo+0x128>)
 800da38:	2049      	movs	r0, #73	@ 0x49
 800da3a:	f008 f90b 	bl	8015c54 <gos_traceTraceFormatted>
 800da3e:	4603      	mov	r3, r0
 800da40:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da44:	e002      	b.n	800da4c <svl_dsmPrintLibInfo+0x54>
 800da46:	23ae      	movs	r3, #174	@ 0xae
 800da48:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name));
 800da4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da50:	2b55      	cmp	r3, #85	@ 0x55
 800da52:	d10a      	bne.n	800da6a <svl_dsmPrintLibInfo+0x72>
 800da54:	1d3b      	adds	r3, r7, #4
 800da56:	3310      	adds	r3, #16
 800da58:	461a      	mov	r2, r3
 800da5a:	4932      	ldr	r1, [pc, #200]	@ (800db24 <svl_dsmPrintLibInfo+0x12c>)
 800da5c:	2049      	movs	r0, #73	@ 0x49
 800da5e:	f008 f8f9 	bl	8015c54 <gos_traceTraceFormatted>
 800da62:	4603      	mov	r3, r0
 800da64:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da68:	e002      	b.n	800da70 <svl_dsmPrintLibInfo+0x78>
 800da6a:	23ae      	movs	r3, #174	@ 0xae
 800da6c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description));
 800da70:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da74:	2b55      	cmp	r3, #85	@ 0x55
 800da76:	d10a      	bne.n	800da8e <svl_dsmPrintLibInfo+0x96>
 800da78:	1d3b      	adds	r3, r7, #4
 800da7a:	3340      	adds	r3, #64	@ 0x40
 800da7c:	461a      	mov	r2, r3
 800da7e:	492a      	ldr	r1, [pc, #168]	@ (800db28 <svl_dsmPrintLibInfo+0x130>)
 800da80:	2049      	movs	r0, #73	@ 0x49
 800da82:	f008 f8e7 	bl	8015c54 <gos_traceTraceFormatted>
 800da86:	4603      	mov	r3, r0
 800da88:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da8c:	e002      	b.n	800da94 <svl_dsmPrintLibInfo+0x9c>
 800da8e:	23ae      	movs	r3, #174	@ 0xae
 800da90:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build));
 800da94:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da98:	2b55      	cmp	r3, #85	@ 0x55
 800da9a:	d10e      	bne.n	800daba <svl_dsmPrintLibInfo+0xc2>
 800da9c:	88bb      	ldrh	r3, [r7, #4]
 800da9e:	461a      	mov	r2, r3
 800daa0:	88fb      	ldrh	r3, [r7, #6]
 800daa2:	4619      	mov	r1, r3
 800daa4:	893b      	ldrh	r3, [r7, #8]
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	460b      	mov	r3, r1
 800daaa:	4920      	ldr	r1, [pc, #128]	@ (800db2c <svl_dsmPrintLibInfo+0x134>)
 800daac:	2049      	movs	r0, #73	@ 0x49
 800daae:	f008 f8d1 	bl	8015c54 <gos_traceTraceFormatted>
 800dab2:	4603      	mov	r3, r0
 800dab4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800dab8:	e002      	b.n	800dac0 <svl_dsmPrintLibInfo+0xc8>
 800daba:	23ae      	movs	r3, #174	@ 0xae
 800dabc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days));
 800dac0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800dac4:	2b55      	cmp	r3, #85	@ 0x55
 800dac6:	d110      	bne.n	800daea <svl_dsmPrintLibInfo+0xf2>
 800dac8:	8a7b      	ldrh	r3, [r7, #18]
 800daca:	461a      	mov	r2, r3
 800dacc:	7c7b      	ldrb	r3, [r7, #17]
 800dace:	4619      	mov	r1, r3
 800dad0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	460b      	mov	r3, r1
 800dada:	4915      	ldr	r1, [pc, #84]	@ (800db30 <svl_dsmPrintLibInfo+0x138>)
 800dadc:	2049      	movs	r0, #73	@ 0x49
 800dade:	f008 f8b9 	bl	8015c54 <gos_traceTraceFormatted>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800dae8:	e002      	b.n	800daf0 <svl_dsmPrintLibInfo+0xf8>
 800daea:	23ae      	movs	r3, #174	@ 0xae
 800daec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author));
 800daf0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800daf4:	2b55      	cmp	r3, #85	@ 0x55
 800daf6:	d10a      	bne.n	800db0e <svl_dsmPrintLibInfo+0x116>
 800daf8:	1d3b      	adds	r3, r7, #4
 800dafa:	3370      	adds	r3, #112	@ 0x70
 800dafc:	461a      	mov	r2, r3
 800dafe:	490d      	ldr	r1, [pc, #52]	@ (800db34 <svl_dsmPrintLibInfo+0x13c>)
 800db00:	2049      	movs	r0, #73	@ 0x49
 800db02:	f008 f8a7 	bl	8015c54 <gos_traceTraceFormatted>
 800db06:	4603      	mov	r3, r0
 800db08:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800db0c:	e002      	b.n	800db14 <svl_dsmPrintLibInfo+0x11c>
 800db0e:	23ae      	movs	r3, #174	@ 0xae
 800db10:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	return printResult;
 800db14:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800db18:	4618      	mov	r0, r3
 800db1a:	37a8      	adds	r7, #168	@ 0xa8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	080195dc 	.word	0x080195dc
 800db24:	080195f8 	.word	0x080195f8
 800db28:	0801960c 	.word	0x0801960c
 800db2c:	08019620 	.word	0x08019620
 800db30:	08019640 	.word	0x08019640
 800db34:	08019660 	.word	0x08019660

0800db38 <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b0c2      	sub	sp, #264	@ 0x108
 800db3c:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800db3e:	2355      	movs	r3, #85	@ 0x55
 800db40:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 800db44:	1d3b      	adds	r3, r7, #4
 800db46:	22fa      	movs	r2, #250	@ 0xfa
 800db48:	2100      	movs	r1, #0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f009 fa96 	bl	801707c <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetHwInfo(&hwInfo));
 800db50:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db54:	2b55      	cmp	r3, #85	@ 0x55
 800db56:	d107      	bne.n	800db68 <svl_dsmPrintHwInfo+0x30>
 800db58:	1d3b      	adds	r3, r7, #4
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 ffe6 	bl	800eb2c <svl_pdhGetHwInfo>
 800db60:	4603      	mov	r3, r0
 800db62:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800db66:	e002      	b.n	800db6e <svl_dsmPrintHwInfo+0x36>
 800db68:	23ae      	movs	r3, #174	@ 0xae
 800db6a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n"));
 800db6e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db72:	2b55      	cmp	r3, #85	@ 0x55
 800db74:	d107      	bne.n	800db86 <svl_dsmPrintHwInfo+0x4e>
 800db76:	4942      	ldr	r1, [pc, #264]	@ (800dc80 <svl_dsmPrintHwInfo+0x148>)
 800db78:	2049      	movs	r0, #73	@ 0x49
 800db7a:	f008 f86b 	bl	8015c54 <gos_traceTraceFormatted>
 800db7e:	4603      	mov	r3, r0
 800db80:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800db84:	e002      	b.n	800db8c <svl_dsmPrintHwInfo+0x54>
 800db86:	23ae      	movs	r3, #174	@ 0xae
 800db88:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Board name:    \t%s\r\n", hwInfo.boardName));
 800db8c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800db90:	2b55      	cmp	r3, #85	@ 0x55
 800db92:	d109      	bne.n	800dba8 <svl_dsmPrintHwInfo+0x70>
 800db94:	1d3b      	adds	r3, r7, #4
 800db96:	461a      	mov	r2, r3
 800db98:	493a      	ldr	r1, [pc, #232]	@ (800dc84 <svl_dsmPrintHwInfo+0x14c>)
 800db9a:	2049      	movs	r0, #73	@ 0x49
 800db9c:	f008 f85a 	bl	8015c54 <gos_traceTraceFormatted>
 800dba0:	4603      	mov	r3, r0
 800dba2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dba6:	e002      	b.n	800dbae <svl_dsmPrintHwInfo+0x76>
 800dba8:	23ae      	movs	r3, #174	@ 0xae
 800dbaa:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:        \t%s\r\n", hwInfo.author));
 800dbae:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dbb2:	2b55      	cmp	r3, #85	@ 0x55
 800dbb4:	d10a      	bne.n	800dbcc <svl_dsmPrintHwInfo+0x94>
 800dbb6:	1d3b      	adds	r3, r7, #4
 800dbb8:	3360      	adds	r3, #96	@ 0x60
 800dbba:	461a      	mov	r2, r3
 800dbbc:	4932      	ldr	r1, [pc, #200]	@ (800dc88 <svl_dsmPrintHwInfo+0x150>)
 800dbbe:	2049      	movs	r0, #73	@ 0x49
 800dbc0:	f008 f848 	bl	8015c54 <gos_traceTraceFormatted>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dbca:	e002      	b.n	800dbd2 <svl_dsmPrintHwInfo+0x9a>
 800dbcc:	23ae      	movs	r3, #174	@ 0xae
 800dbce:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description:   \t%s\r\n", hwInfo.description));
 800dbd2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dbd6:	2b55      	cmp	r3, #85	@ 0x55
 800dbd8:	d10a      	bne.n	800dbf0 <svl_dsmPrintHwInfo+0xb8>
 800dbda:	1d3b      	adds	r3, r7, #4
 800dbdc:	3390      	adds	r3, #144	@ 0x90
 800dbde:	461a      	mov	r2, r3
 800dbe0:	492a      	ldr	r1, [pc, #168]	@ (800dc8c <svl_dsmPrintHwInfo+0x154>)
 800dbe2:	2049      	movs	r0, #73	@ 0x49
 800dbe4:	f008 f836 	bl	8015c54 <gos_traceTraceFormatted>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dbee:	e002      	b.n	800dbf6 <svl_dsmPrintHwInfo+0xbe>
 800dbf0:	23ae      	movs	r3, #174	@ 0xae
 800dbf2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Revision:      \t%s\r\n", hwInfo.revision));
 800dbf6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dbfa:	2b55      	cmp	r3, #85	@ 0x55
 800dbfc:	d10a      	bne.n	800dc14 <svl_dsmPrintHwInfo+0xdc>
 800dbfe:	1d3b      	adds	r3, r7, #4
 800dc00:	3330      	adds	r3, #48	@ 0x30
 800dc02:	461a      	mov	r2, r3
 800dc04:	4922      	ldr	r1, [pc, #136]	@ (800dc90 <svl_dsmPrintHwInfo+0x158>)
 800dc06:	2049      	movs	r0, #73	@ 0x49
 800dc08:	f008 f824 	bl	8015c54 <gos_traceTraceFormatted>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dc12:	e002      	b.n	800dc1a <svl_dsmPrintHwInfo+0xe2>
 800dc14:	23ae      	movs	r3, #174	@ 0xae
 800dc16:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Serial number: \t%s\r\n", hwInfo.serialNumber));
 800dc1a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dc1e:	2b55      	cmp	r3, #85	@ 0x55
 800dc20:	d10a      	bne.n	800dc38 <svl_dsmPrintHwInfo+0x100>
 800dc22:	1d3b      	adds	r3, r7, #4
 800dc24:	33ca      	adds	r3, #202	@ 0xca
 800dc26:	461a      	mov	r2, r3
 800dc28:	491a      	ldr	r1, [pc, #104]	@ (800dc94 <svl_dsmPrintHwInfo+0x15c>)
 800dc2a:	2049      	movs	r0, #73	@ 0x49
 800dc2c:	f008 f812 	bl	8015c54 <gos_traceTraceFormatted>
 800dc30:	4603      	mov	r3, r0
 800dc32:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dc36:	e002      	b.n	800dc3e <svl_dsmPrintHwInfo+0x106>
 800dc38:	23ae      	movs	r3, #174	@ 0xae
 800dc3a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 800dc3e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dc42:	2b55      	cmp	r3, #85	@ 0x55
 800dc44:	d112      	bne.n	800dc6c <svl_dsmPrintHwInfo+0x134>
 800dc46:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800dc50:	4619      	mov	r1, r3
 800dc52:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	@ 0xc9
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	490e      	ldr	r1, [pc, #56]	@ (800dc98 <svl_dsmPrintHwInfo+0x160>)
 800dc5e:	2049      	movs	r0, #73	@ 0x49
 800dc60:	f007 fff8 	bl	8015c54 <gos_traceTraceFormatted>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 800dc6a:	e002      	b.n	800dc72 <svl_dsmPrintHwInfo+0x13a>
 800dc6c:	23ae      	movs	r3, #174	@ 0xae
 800dc6e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			hwInfo.date.years,
			hwInfo.date.months,
			hwInfo.date.days
			));

	return printResult;
 800dc72:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	08019674 	.word	0x08019674
 800dc84:	08019690 	.word	0x08019690
 800dc88:	080196a8 	.word	0x080196a8
 800dc8c:	080196c0 	.word	0x080196c0
 800dc90:	080196d8 	.word	0x080196d8
 800dc94:	080196f0 	.word	0x080196f0
 800dc98:	08019708 	.word	0x08019708

0800dc9c <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 800dca2:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800dca4:	2355      	movs	r3, #85	@ 0x55
 800dca6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 800dcaa:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dcae:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2100      	movs	r1, #0
 800dcbc:	f009 f9de 	bl	801707c <memset>

	/*
	 * Function code.
	 */
	//GOS_CONCAT_RESULT(printResult, svl_pdhGetSwInfo(&swInfo)); TODO
	(void_t) svl_pdhGetSwInfo(&swInfo);
 800dcc0:	1d3b      	adds	r3, r7, #4
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 fefa 	bl	800eabc <svl_pdhGetSwInfo>

	if (strcmp(swInfo.bldSwVerInfo.name, "") != 0)
 800dcc8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dccc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dcd0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 8091 	beq.w	800ddfc <svl_dsmPrintAppInfo+0x160>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Bootloader Info"TRACE_FORMAT_RESET"\r\n"));
 800dcda:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dcde:	2b55      	cmp	r3, #85	@ 0x55
 800dce0:	d107      	bne.n	800dcf2 <svl_dsmPrintAppInfo+0x56>
 800dce2:	4998      	ldr	r1, [pc, #608]	@ (800df44 <svl_dsmPrintAppInfo+0x2a8>)
 800dce4:	2049      	movs	r0, #73	@ 0x49
 800dce6:	f007 ffb5 	bl	8015c54 <gos_traceTraceFormatted>
 800dcea:	4603      	mov	r3, r0
 800dcec:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dcf0:	e002      	b.n	800dcf8 <svl_dsmPrintAppInfo+0x5c>
 800dcf2:	23ae      	movs	r3, #174	@ 0xae
 800dcf4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.bldSwVerInfo.name));
 800dcf8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dcfc:	2b55      	cmp	r3, #85	@ 0x55
 800dcfe:	d10a      	bne.n	800dd16 <svl_dsmPrintAppInfo+0x7a>
 800dd00:	1d3b      	adds	r3, r7, #4
 800dd02:	33b0      	adds	r3, #176	@ 0xb0
 800dd04:	461a      	mov	r2, r3
 800dd06:	4990      	ldr	r1, [pc, #576]	@ (800df48 <svl_dsmPrintAppInfo+0x2ac>)
 800dd08:	2049      	movs	r0, #73	@ 0x49
 800dd0a:	f007 ffa3 	bl	8015c54 <gos_traceTraceFormatted>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dd14:	e002      	b.n	800dd1c <svl_dsmPrintAppInfo+0x80>
 800dd16:	23ae      	movs	r3, #174	@ 0xae
 800dd18:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.bldSwVerInfo.description));
 800dd1c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dd20:	2b55      	cmp	r3, #85	@ 0x55
 800dd22:	d10a      	bne.n	800dd3a <svl_dsmPrintAppInfo+0x9e>
 800dd24:	1d3b      	adds	r3, r7, #4
 800dd26:	33e0      	adds	r3, #224	@ 0xe0
 800dd28:	461a      	mov	r2, r3
 800dd2a:	4988      	ldr	r1, [pc, #544]	@ (800df4c <svl_dsmPrintAppInfo+0x2b0>)
 800dd2c:	2049      	movs	r0, #73	@ 0x49
 800dd2e:	f007 ff91 	bl	8015c54 <gos_traceTraceFormatted>
 800dd32:	4603      	mov	r3, r0
 800dd34:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dd38:	e002      	b.n	800dd40 <svl_dsmPrintAppInfo+0xa4>
 800dd3a:	23ae      	movs	r3, #174	@ 0xae
 800dd3c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.bldSwVerInfo.major, swInfo.bldSwVerInfo.minor, swInfo.bldSwVerInfo.build));
 800dd40:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dd44:	2b55      	cmp	r3, #85	@ 0x55
 800dd46:	d11d      	bne.n	800dd84 <svl_dsmPrintAppInfo+0xe8>
 800dd48:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd4c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd50:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800dd54:	461a      	mov	r2, r3
 800dd56:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd5a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd5e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 800dd62:	4619      	mov	r1, r3
 800dd64:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd68:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd6c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	460b      	mov	r3, r1
 800dd74:	4976      	ldr	r1, [pc, #472]	@ (800df50 <svl_dsmPrintAppInfo+0x2b4>)
 800dd76:	2049      	movs	r0, #73	@ 0x49
 800dd78:	f007 ff6c 	bl	8015c54 <gos_traceTraceFormatted>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800dd82:	e002      	b.n	800dd8a <svl_dsmPrintAppInfo+0xee>
 800dd84:	23ae      	movs	r3, #174	@ 0xae
 800dd86:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.bldSwVerInfo.date.years, swInfo.bldSwVerInfo.date.months, swInfo.bldSwVerInfo.date.days));
 800dd8a:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dd8e:	2b55      	cmp	r3, #85	@ 0x55
 800dd90:	d11e      	bne.n	800ddd0 <svl_dsmPrintAppInfo+0x134>
 800dd92:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dd96:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dd9a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dda4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dda8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ddac:	4619      	mov	r1, r3
 800ddae:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800ddb2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800ddb6:	f8b3 30ab 	ldrh.w	r3, [r3, #171]	@ 0xab
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4964      	ldr	r1, [pc, #400]	@ (800df54 <svl_dsmPrintAppInfo+0x2b8>)
 800ddc2:	2049      	movs	r0, #73	@ 0x49
 800ddc4:	f007 ff46 	bl	8015c54 <gos_traceTraceFormatted>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800ddce:	e002      	b.n	800ddd6 <svl_dsmPrintAppInfo+0x13a>
 800ddd0:	23ae      	movs	r3, #174	@ 0xae
 800ddd2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.bldSwVerInfo.author));
 800ddd6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800ddda:	2b55      	cmp	r3, #85	@ 0x55
 800dddc:	d10b      	bne.n	800ddf6 <svl_dsmPrintAppInfo+0x15a>
 800ddde:	1d3b      	adds	r3, r7, #4
 800dde0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800dde4:	461a      	mov	r2, r3
 800dde6:	495c      	ldr	r1, [pc, #368]	@ (800df58 <svl_dsmPrintAppInfo+0x2bc>)
 800dde8:	2049      	movs	r0, #73	@ 0x49
 800ddea:	f007 ff33 	bl	8015c54 <gos_traceTraceFormatted>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800ddf4:	e002      	b.n	800ddfc <svl_dsmPrintAppInfo+0x160>
 800ddf6:	23ae      	movs	r3, #174	@ 0xae
 800ddf8:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Bootloader does not exist.
	}

	if (strcmp(swInfo.appSwVerInfo.name, "") != 0)
 800ddfc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800de00:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800de04:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 8093 	beq.w	800df34 <svl_dsmPrintAppInfo+0x298>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n"));
 800de0e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de12:	2b55      	cmp	r3, #85	@ 0x55
 800de14:	d107      	bne.n	800de26 <svl_dsmPrintAppInfo+0x18a>
 800de16:	4951      	ldr	r1, [pc, #324]	@ (800df5c <svl_dsmPrintAppInfo+0x2c0>)
 800de18:	2049      	movs	r0, #73	@ 0x49
 800de1a:	f007 ff1b 	bl	8015c54 <gos_traceTraceFormatted>
 800de1e:	4603      	mov	r3, r0
 800de20:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de24:	e002      	b.n	800de2c <svl_dsmPrintAppInfo+0x190>
 800de26:	23ae      	movs	r3, #174	@ 0xae
 800de28:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name));
 800de2c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de30:	2b55      	cmp	r3, #85	@ 0x55
 800de32:	d10b      	bne.n	800de4c <svl_dsmPrintAppInfo+0x1b0>
 800de34:	1d3b      	adds	r3, r7, #4
 800de36:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800de3a:	461a      	mov	r2, r3
 800de3c:	4942      	ldr	r1, [pc, #264]	@ (800df48 <svl_dsmPrintAppInfo+0x2ac>)
 800de3e:	2049      	movs	r0, #73	@ 0x49
 800de40:	f007 ff08 	bl	8015c54 <gos_traceTraceFormatted>
 800de44:	4603      	mov	r3, r0
 800de46:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de4a:	e002      	b.n	800de52 <svl_dsmPrintAppInfo+0x1b6>
 800de4c:	23ae      	movs	r3, #174	@ 0xae
 800de4e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description));
 800de52:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de56:	2b55      	cmp	r3, #85	@ 0x55
 800de58:	d10b      	bne.n	800de72 <svl_dsmPrintAppInfo+0x1d6>
 800de5a:	1d3b      	adds	r3, r7, #4
 800de5c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800de60:	461a      	mov	r2, r3
 800de62:	493a      	ldr	r1, [pc, #232]	@ (800df4c <svl_dsmPrintAppInfo+0x2b0>)
 800de64:	2049      	movs	r0, #73	@ 0x49
 800de66:	f007 fef5 	bl	8015c54 <gos_traceTraceFormatted>
 800de6a:	4603      	mov	r3, r0
 800de6c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800de70:	e002      	b.n	800de78 <svl_dsmPrintAppInfo+0x1dc>
 800de72:	23ae      	movs	r3, #174	@ 0xae
 800de74:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build));
 800de78:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800de7c:	2b55      	cmp	r3, #85	@ 0x55
 800de7e:	d11d      	bne.n	800debc <svl_dsmPrintAppInfo+0x220>
 800de80:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800de84:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800de88:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
 800de8c:	461a      	mov	r2, r3
 800de8e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800de92:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800de96:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
 800de9a:	4619      	mov	r1, r3
 800de9c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dea0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dea4:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	460b      	mov	r3, r1
 800deac:	4928      	ldr	r1, [pc, #160]	@ (800df50 <svl_dsmPrintAppInfo+0x2b4>)
 800deae:	2049      	movs	r0, #73	@ 0x49
 800deb0:	f007 fed0 	bl	8015c54 <gos_traceTraceFormatted>
 800deb4:	4603      	mov	r3, r0
 800deb6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800deba:	e002      	b.n	800dec2 <svl_dsmPrintAppInfo+0x226>
 800debc:	23ae      	movs	r3, #174	@ 0xae
 800debe:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days));
 800dec2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800dec6:	2b55      	cmp	r3, #85	@ 0x55
 800dec8:	d11e      	bne.n	800df08 <svl_dsmPrintAppInfo+0x26c>
 800deca:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dece:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800ded2:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 800ded6:	461a      	mov	r2, r3
 800ded8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800dedc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800dee0:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 800dee4:	4619      	mov	r1, r3
 800dee6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800deea:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800deee:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 800def2:	b29b      	uxth	r3, r3
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	460b      	mov	r3, r1
 800def8:	4916      	ldr	r1, [pc, #88]	@ (800df54 <svl_dsmPrintAppInfo+0x2b8>)
 800defa:	2049      	movs	r0, #73	@ 0x49
 800defc:	f007 feaa 	bl	8015c54 <gos_traceTraceFormatted>
 800df00:	4603      	mov	r3, r0
 800df02:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800df06:	e002      	b.n	800df0e <svl_dsmPrintAppInfo+0x272>
 800df08:	23ae      	movs	r3, #174	@ 0xae
 800df0a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author));
 800df0e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800df12:	2b55      	cmp	r3, #85	@ 0x55
 800df14:	d10b      	bne.n	800df2e <svl_dsmPrintAppInfo+0x292>
 800df16:	1d3b      	adds	r3, r7, #4
 800df18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df1c:	461a      	mov	r2, r3
 800df1e:	490e      	ldr	r1, [pc, #56]	@ (800df58 <svl_dsmPrintAppInfo+0x2bc>)
 800df20:	2049      	movs	r0, #73	@ 0x49
 800df22:	f007 fe97 	bl	8015c54 <gos_traceTraceFormatted>
 800df26:	4603      	mov	r3, r0
 800df28:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 800df2c:	e002      	b.n	800df34 <svl_dsmPrintAppInfo+0x298>
 800df2e:	23ae      	movs	r3, #174	@ 0xae
 800df30:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Application does not exist.
	}

	return printResult;
 800df34:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
}
 800df38:	4618      	mov	r0, r3
 800df3a:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	0801972c 	.word	0x0801972c
 800df48:	080195f8 	.word	0x080195f8
 800df4c:	0801960c 	.word	0x0801960c
 800df50:	08019620 	.word	0x08019620
 800df54:	08019640 	.word	0x08019640
 800df58:	08019660 	.word	0x08019660
 800df5c:	0801974c 	.word	0x0801974c

0800df60 <svl_dsmDaemonTask>:
 *          it activates the related reactions - if any.
 *
 * @return  -
 */
GOS_STATIC void_t svl_dsmDaemonTask (void_t)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 800df66:	2300      	movs	r3, #0
 800df68:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Disable scheduling to keep printed info consistent.
	GOS_DISABLE_SCHED
 800df6a:	4b32      	ldr	r3, [pc, #200]	@ (800e034 <svl_dsmDaemonTask+0xd4>)
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	3301      	adds	r3, #1
 800df70:	b2da      	uxtb	r2, r3
 800df72:	4b30      	ldr	r3, [pc, #192]	@ (800e034 <svl_dsmDaemonTask+0xd4>)
 800df74:	701a      	strb	r2, [r3, #0]

	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 800df76:	f7ff fd17 	bl	800d9a8 <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 800df7a:	f7ff fd3d 	bl	800d9f8 <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 800df7e:	f7ff fddb 	bl	800db38 <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 800df82:	f7ff fe8b 	bl	800dc9c <svl_dsmPrintAppInfo>

	// Enable scheduling, data printed.
	GOS_ENABLE_SCHED
 800df86:	4b2b      	ldr	r3, [pc, #172]	@ (800e034 <svl_dsmDaemonTask+0xd4>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d005      	beq.n	800df9a <svl_dsmDaemonTask+0x3a>
 800df8e:	4b29      	ldr	r3, [pc, #164]	@ (800e034 <svl_dsmDaemonTask+0xd4>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	3b01      	subs	r3, #1
 800df94:	b2da      	uxtb	r2, r3
 800df96:	4b27      	ldr	r3, [pc, #156]	@ (800e034 <svl_dsmDaemonTask+0xd4>)
 800df98:	701a      	strb	r2, [r3, #0]

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 800df9a:	4b27      	ldr	r3, [pc, #156]	@ (800e038 <svl_dsmDaemonTask+0xd8>)
 800df9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df9e:	21c8      	movs	r1, #200	@ 0xc8
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f004 fa4b 	bl	801243c <gos_taskSetPriority>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 800dfaa:	4b24      	ldr	r3, [pc, #144]	@ (800e03c <svl_dsmDaemonTask+0xdc>)
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	4b24      	ldr	r3, [pc, #144]	@ (800e040 <svl_dsmDaemonTask+0xe0>)
 800dfb0:	701a      	strb	r2, [r3, #0]
	deviceState     = requiredState;
 800dfb2:	4a22      	ldr	r2, [pc, #136]	@ (800e03c <svl_dsmDaemonTask+0xdc>)
 800dfb4:	79bb      	ldrb	r3, [r7, #6]
 800dfb6:	7013      	strb	r3, [r2, #0]
}
 800dfb8:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800dfba:	4b21      	ldr	r3, [pc, #132]	@ (800e040 <svl_dsmDaemonTask+0xe0>)
 800dfbc:	781a      	ldrb	r2, [r3, #0]
 800dfbe:	4b1f      	ldr	r3, [pc, #124]	@ (800e03c <svl_dsmDaemonTask+0xdc>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d031      	beq.n	800e02a <svl_dsmDaemonTask+0xca>
 800dfc6:	4b1f      	ldr	r3, [pc, #124]	@ (800e044 <svl_dsmDaemonTask+0xe4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d02d      	beq.n	800e02a <svl_dsmDaemonTask+0xca>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800dfce:	2300      	movs	r3, #0
 800dfd0:	71fb      	strb	r3, [r7, #7]
 800dfd2:	e020      	b.n	800e016 <svl_dsmDaemonTask+0xb6>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
 800dfd6:	4a1c      	ldr	r2, [pc, #112]	@ (800e048 <svl_dsmDaemonTask+0xe8>)
 800dfd8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800dfdc:	4b18      	ldr	r3, [pc, #96]	@ (800e040 <svl_dsmDaemonTask+0xe0>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d115      	bne.n	800e010 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].currState == deviceState &&
 800dfe4:	79fb      	ldrb	r3, [r7, #7]
 800dfe6:	4a18      	ldr	r2, [pc, #96]	@ (800e048 <svl_dsmDaemonTask+0xe8>)
 800dfe8:	00db      	lsls	r3, r3, #3
 800dfea:	4413      	add	r3, r2
 800dfec:	785a      	ldrb	r2, [r3, #1]
 800dfee:	4b13      	ldr	r3, [pc, #76]	@ (800e03c <svl_dsmDaemonTask+0xdc>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d10c      	bne.n	800e010 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].pReaction != NULL)
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	4a13      	ldr	r2, [pc, #76]	@ (800e048 <svl_dsmDaemonTask+0xe8>)
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	4413      	add	r3, r2
 800dffe:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <svl_dsmDaemonTask+0xb0>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	4a10      	ldr	r2, [pc, #64]	@ (800e048 <svl_dsmDaemonTask+0xe8>)
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	4413      	add	r3, r2
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	3301      	adds	r3, #1
 800e014:	71fb      	strb	r3, [r7, #7]
 800e016:	79fa      	ldrb	r2, [r7, #7]
 800e018:	4b0a      	ldr	r3, [pc, #40]	@ (800e044 <svl_dsmDaemonTask+0xe4>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	08db      	lsrs	r3, r3, #3
 800e01e:	429a      	cmp	r2, r3
 800e020:	d3d8      	bcc.n	800dfd4 <svl_dsmDaemonTask+0x74>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 800e022:	4b06      	ldr	r3, [pc, #24]	@ (800e03c <svl_dsmDaemonTask+0xdc>)
 800e024:	781a      	ldrb	r2, [r3, #0]
 800e026:	4b06      	ldr	r3, [pc, #24]	@ (800e040 <svl_dsmDaemonTask+0xe0>)
 800e028:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 800e02a:	2014      	movs	r0, #20
 800e02c:	f003 fbbe 	bl	80117ac <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800e030:	e7c3      	b.n	800dfba <svl_dsmDaemonTask+0x5a>
 800e032:	bf00      	nop
 800e034:	20005e51 	.word	0x20005e51
 800e038:	20000530 	.word	0x20000530
 800e03c:	20003b62 	.word	0x20003b62
 800e040:	20003b63 	.word	0x20003b63
 800e044:	2000169c 	.word	0x2000169c
 800e048:	0801a760 	.word	0x0801a760

0800e04c <svl_iplInit>:

/*
 * Function: svl_iplInit
 */
gos_result_t svl_iplInit (void_t)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 800e052:	23ae      	movs	r3, #174	@ 0xae
 800e054:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIplTaskDesc, NULL);
 800e056:	2100      	movs	r1, #0
 800e058:	4804      	ldr	r0, [pc, #16]	@ (800e06c <svl_iplInit+0x20>)
 800e05a:	f003 fa15 	bl	8011488 <gos_taskRegister>
 800e05e:	4603      	mov	r3, r0
 800e060:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800e062:	79fb      	ldrb	r3, [r7, #7]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	2000059c 	.word	0x2000059c

0800e070 <svl_iplRegisterUserMsg>:

/*
 * Function: svl_iplRegisterUserMsg
 */
gos_result_t svl_iplRegisterUserMsg (svl_iplUserMsgDesc_t* pUserMsgDesc)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t registerResult = GOS_ERROR;
 800e078:	23ae      	movs	r3, #174	@ 0xae
 800e07a:	73fb      	strb	r3, [r7, #15]
	u8_t         lutIndex       = 0u;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73bb      	strb	r3, [r7, #14]

	/*
	 * Function code.
	 */
	if (pUserMsgDesc != NULL)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d01b      	beq.n	800e0be <svl_iplRegisterUserMsg+0x4e>
	{
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e086:	2300      	movs	r3, #0
 800e088:	73bb      	strb	r3, [r7, #14]
 800e08a:	e015      	b.n	800e0b8 <svl_iplRegisterUserMsg+0x48>
		{
			if (userMsgLut[lutIndex].callback == NULL)
 800e08c:	7bbb      	ldrb	r3, [r7, #14]
 800e08e:	4a0e      	ldr	r2, [pc, #56]	@ (800e0c8 <svl_iplRegisterUserMsg+0x58>)
 800e090:	00db      	lsls	r3, r3, #3
 800e092:	4413      	add	r3, r2
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10b      	bne.n	800e0b2 <svl_iplRegisterUserMsg+0x42>
			{
				(void_t) memcpy((void_t*)&userMsgLut[lutIndex], (void_t*)pUserMsgDesc, sizeof(*pUserMsgDesc));
 800e09a:	7bbb      	ldrb	r3, [r7, #14]
 800e09c:	00db      	lsls	r3, r3, #3
 800e09e:	4a0a      	ldr	r2, [pc, #40]	@ (800e0c8 <svl_iplRegisterUserMsg+0x58>)
 800e0a0:	4413      	add	r3, r2
 800e0a2:	2208      	movs	r2, #8
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f009 f87f 	bl	80171aa <memcpy>
				registerResult = GOS_SUCCESS;
 800e0ac:	2355      	movs	r3, #85	@ 0x55
 800e0ae:	73fb      	strb	r3, [r7, #15]
				break;
 800e0b0:	e005      	b.n	800e0be <svl_iplRegisterUserMsg+0x4e>
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e0b2:	7bbb      	ldrb	r3, [r7, #14]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	73bb      	strb	r3, [r7, #14]
 800e0b8:	7bbb      	ldrb	r3, [r7, #14]
 800e0ba:	2b0f      	cmp	r3, #15
 800e0bc:	d9e6      	bls.n	800e08c <svl_iplRegisterUserMsg+0x1c>
	else
	{
		// NULL pointer.
	}

	return registerResult;
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	2000511c 	.word	0x2000511c

0800e0cc <svl_iplConfigure>:

/*
 * Function: svl_iplConfigure
 */
gos_result_t svl_iplConfigure (svl_iplTransmitFunction transmitFunc, svl_iplReceiveFunction receiveFunc)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_ERROR;
 800e0d6:	23ae      	movs	r3, #174	@ 0xae
 800e0d8:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	svl_iplTransmit = transmitFunc;
 800e0da:	4a0f      	ldr	r2, [pc, #60]	@ (800e118 <svl_iplConfigure+0x4c>)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6013      	str	r3, [r2, #0]
	svl_iplReceive  = receiveFunc;
 800e0e0:	4a0e      	ldr	r2, [pc, #56]	@ (800e11c <svl_iplConfigure+0x50>)
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	6013      	str	r3, [r2, #0]

	// Set IPL state machine based on NULL pointer check.
	if (svl_iplTransmit != NULL && svl_iplReceive != NULL)
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e118 <svl_iplConfigure+0x4c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d009      	beq.n	800e102 <svl_iplConfigure+0x36>
 800e0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e11c <svl_iplConfigure+0x50>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d005      	beq.n	800e102 <svl_iplConfigure+0x36>
	{
		iplState = SVL_IPL_STATE_DISCOVER_START;
 800e0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e120 <svl_iplConfigure+0x54>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	701a      	strb	r2, [r3, #0]
		configureResult = GOS_SUCCESS;
 800e0fc:	2355      	movs	r3, #85	@ 0x55
 800e0fe:	73fb      	strb	r3, [r7, #15]
 800e100:	e002      	b.n	800e108 <svl_iplConfigure+0x3c>
	}
	else
	{
		iplState = SVL_IPL_STATE_NOT_CONFIGURED;
 800e102:	4b07      	ldr	r3, [pc, #28]	@ (800e120 <svl_iplConfigure+0x54>)
 800e104:	2200      	movs	r2, #0
 800e106:	701a      	strb	r2, [r3, #0]
	}

	return configureResult;
 800e108:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	2000519c 	.word	0x2000519c
 800e11c:	200051a0 	.word	0x200051a0
 800e120:	20003b64 	.word	0x20003b64

0800e124 <svl_iplSendMessage>:

/*
 * Function: svl_iplSendMessage
 */
gos_result_t svl_iplSendMessage (u32_t msgId, u8_t* pData, u32_t dataLength)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b08a      	sub	sp, #40	@ 0x28
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t       sendResult = GOS_ERROR;
 800e130:	23ae      	movs	r3, #174	@ 0xae
 800e132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	svl_iplMsgHeader_t header;

	/*
	 * Function code.
	 */
	header.messageId     = msgId;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	617b      	str	r3, [r7, #20]
	header.messageLength = dataLength;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	61bb      	str	r3, [r7, #24]

	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800e13e:	f107 0314 	add.w	r3, r7, #20
 800e142:	330c      	adds	r3, #12
 800e144:	461a      	mov	r2, r3
 800e146:	6879      	ldr	r1, [r7, #4]
 800e148:	68b8      	ldr	r0, [r7, #8]
 800e14a:	f7fb fe89 	bl	8009e60 <drv_crcGetCrc32>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b55      	cmp	r3, #85	@ 0x55
 800e152:	d117      	bne.n	800e184 <svl_iplSendMessage+0x60>
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800e154:	4b0e      	ldr	r3, [pc, #56]	@ (800e190 <svl_iplSendMessage+0x6c>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f107 0014 	add.w	r0, r7, #20
 800e15c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e160:	2110      	movs	r1, #16
 800e162:	4798      	blx	r3
 800e164:	4603      	mov	r3, r0
	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800e166:	2b55      	cmp	r3, #85	@ 0x55
 800e168:	d10c      	bne.n	800e184 <svl_iplSendMessage+0x60>
		svl_iplTransmit(pData, dataLength, 1000u) == GOS_SUCCESS)
 800e16a:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <svl_iplSendMessage+0x6c>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	68b8      	ldr	r0, [r7, #8]
 800e176:	4798      	blx	r3
 800e178:	4603      	mov	r3, r0
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800e17a:	2b55      	cmp	r3, #85	@ 0x55
 800e17c:	d102      	bne.n	800e184 <svl_iplSendMessage+0x60>
	{
		sendResult = GOS_SUCCESS;
 800e17e:	2355      	movs	r3, #85	@ 0x55
 800e180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	else
	{
		// Error.
	}

	return sendResult;
 800e184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3728      	adds	r7, #40	@ 0x28
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	2000519c 	.word	0x2000519c

0800e194 <svl_iplDaemon>:
 * @details Handles IPL state machine and incoming IPL messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_iplDaemon (void_t)
{
 800e194:	b590      	push	{r4, r7, lr}
 800e196:	b087      	sub	sp, #28
 800e198:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t               lutIndex = 0u;
 800e19a:	2300      	movs	r3, #0
 800e19c:	75fb      	strb	r3, [r7, #23]
	/*
	 * Function code.
	 */
	for (;;)
	{
		switch (iplState)
 800e19e:	4b9b      	ldr	r3, [pc, #620]	@ (800e40c <svl_iplDaemon+0x278>)
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	2b07      	cmp	r3, #7
 800e1a4:	f200 8352 	bhi.w	800e84c <svl_iplDaemon+0x6b8>
 800e1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b0 <svl_iplDaemon+0x1c>)
 800e1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ae:	bf00      	nop
 800e1b0:	0800e84d 	.word	0x0800e84d
 800e1b4:	0800e1d1 	.word	0x0800e1d1
 800e1b8:	0800e1ff 	.word	0x0800e1ff
 800e1bc:	0800e2af 	.word	0x0800e2af
 800e1c0:	0800e2b7 	.word	0x0800e2b7
 800e1c4:	0800e35b 	.word	0x0800e35b
 800e1c8:	0800e363 	.word	0x0800e363
 800e1cc:	0800e43d 	.word	0x0800e43d
				// Wait until transmit and receive functions are registered.
				break;
			}
			case SVL_IPL_STATE_DISCOVER_START:
			{
				attemptCount++;
 800e1d0:	4b8f      	ldr	r3, [pc, #572]	@ (800e410 <svl_iplDaemon+0x27c>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	4b8d      	ldr	r3, [pc, #564]	@ (800e410 <svl_iplDaemon+0x27c>)
 800e1da:	701a      	strb	r2, [r3, #0]

				if (attemptCount <= SVL_IPL_MAX_ATTEMPTS)
 800e1dc:	4b8c      	ldr	r3, [pc, #560]	@ (800e410 <svl_iplDaemon+0x27c>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b05      	cmp	r3, #5
 800e1e2:	d803      	bhi.n	800e1ec <svl_iplDaemon+0x58>
				{
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery start...\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER;
 800e1e4:	4b89      	ldr	r3, [pc, #548]	@ (800e40c <svl_iplDaemon+0x278>)
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);

					// If task gets resumed externally, restart state-machine.
					attemptCount = 0u;
				}
				break;
 800e1ea:	e32f      	b.n	800e84c <svl_iplDaemon+0x6b8>
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);
 800e1ec:	4b89      	ldr	r3, [pc, #548]	@ (800e414 <svl_iplDaemon+0x280>)
 800e1ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f003 fc33 	bl	8011a5c <gos_taskSuspend>
					attemptCount = 0u;
 800e1f6:	4b86      	ldr	r3, [pc, #536]	@ (800e410 <svl_iplDaemon+0x27c>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	701a      	strb	r2, [r3, #0]
				break;
 800e1fc:	e326      	b.n	800e84c <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_DISCOVER:
			{
				msgHeader.messageId     = IPL_MSG_ID_DISCOVERY;
 800e1fe:	2301      	movs	r3, #1
 800e200:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(discoveryMsg);
 800e202:	2340      	movs	r3, #64	@ 0x40
 800e204:	60bb      	str	r3, [r7, #8]

				(void_t) strcpy(discoveryMsg.masterDeviceId, "STM32F446-0001");
 800e206:	4a84      	ldr	r2, [pc, #528]	@ (800e418 <svl_iplDaemon+0x284>)
 800e208:	4b84      	ldr	r3, [pc, #528]	@ (800e41c <svl_iplDaemon+0x288>)
 800e20a:	4614      	mov	r4, r2
 800e20c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e20e:	c407      	stmia	r4!, {r0, r1, r2}
 800e210:	8023      	strh	r3, [r4, #0]
 800e212:	3402      	adds	r4, #2
 800e214:	0c1b      	lsrs	r3, r3, #16
 800e216:	7023      	strb	r3, [r4, #0]
				(void_t) drv_crcGetCrc32((u8_t*)&discoveryMsg, sizeof(discoveryMsg), &msgHeader.messageCrc);
 800e218:	1d3b      	adds	r3, r7, #4
 800e21a:	330c      	adds	r3, #12
 800e21c:	461a      	mov	r2, r3
 800e21e:	2140      	movs	r1, #64	@ 0x40
 800e220:	487d      	ldr	r0, [pc, #500]	@ (800e418 <svl_iplDaemon+0x284>)
 800e222:	f7fb fe1d 	bl	8009e60 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e226:	4b7e      	ldr	r3, [pc, #504]	@ (800e420 <svl_iplDaemon+0x28c>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	1d38      	adds	r0, r7, #4
 800e22c:	2264      	movs	r2, #100	@ 0x64
 800e22e:	2110      	movs	r1, #16
 800e230:	4798      	blx	r3
 800e232:	4603      	mov	r3, r0
 800e234:	2b55      	cmp	r3, #85	@ 0x55
 800e236:	d132      	bne.n	800e29e <svl_iplDaemon+0x10a>
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 800e238:	4b79      	ldr	r3, [pc, #484]	@ (800e420 <svl_iplDaemon+0x28c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2264      	movs	r2, #100	@ 0x64
 800e23e:	2140      	movs	r1, #64	@ 0x40
 800e240:	4875      	ldr	r0, [pc, #468]	@ (800e418 <svl_iplDaemon+0x284>)
 800e242:	4798      	blx	r3
 800e244:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e246:	2b55      	cmp	r3, #85	@ 0x55
 800e248:	d129      	bne.n	800e29e <svl_iplDaemon+0x10a>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e24a:	4b76      	ldr	r3, [pc, #472]	@ (800e424 <svl_iplDaemon+0x290>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	1d38      	adds	r0, r7, #4
 800e250:	22c8      	movs	r2, #200	@ 0xc8
 800e252:	2110      	movs	r1, #16
 800e254:	4798      	blx	r3
 800e256:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 800e258:	2b55      	cmp	r3, #85	@ 0x55
 800e25a:	d120      	bne.n	800e29e <svl_iplDaemon+0x10a>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e25c:	4b71      	ldr	r3, [pc, #452]	@ (800e424 <svl_iplDaemon+0x290>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	68b9      	ldr	r1, [r7, #8]
 800e262:	22c8      	movs	r2, #200	@ 0xc8
 800e264:	4870      	ldr	r0, [pc, #448]	@ (800e428 <svl_iplDaemon+0x294>)
 800e266:	4798      	blx	r3
 800e268:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e26a:	2b55      	cmp	r3, #85	@ 0x55
 800e26c:	d117      	bne.n	800e29e <svl_iplDaemon+0x10a>
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800e26e:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e270:	f640 2201 	movw	r2, #2561	@ 0xa01
 800e274:	4293      	cmp	r3, r2
 800e276:	d112      	bne.n	800e29e <svl_iplDaemon+0x10a>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e278:	68b9      	ldr	r1, [r7, #8]
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	2300      	movs	r3, #0
 800e27e:	486a      	ldr	r0, [pc, #424]	@ (800e428 <svl_iplDaemon+0x294>)
 800e280:	f7fb fe3a 	bl	8009ef8 <drv_crcCheckCrc32>
 800e284:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800e286:	2bca      	cmp	r3, #202	@ 0xca
 800e288:	d109      	bne.n	800e29e <svl_iplDaemon+0x10a>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&discoveryMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	461a      	mov	r2, r3
 800e28e:	4966      	ldr	r1, [pc, #408]	@ (800e428 <svl_iplDaemon+0x294>)
 800e290:	4861      	ldr	r0, [pc, #388]	@ (800e418 <svl_iplDaemon+0x284>)
 800e292:	f008 ff8a 	bl	80171aa <memcpy>
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL device discovered: %s\r\n", discoveryMsg.slaveDeviceId);
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
 800e296:	4b5d      	ldr	r3, [pc, #372]	@ (800e40c <svl_iplDaemon+0x278>)
 800e298:	2203      	movs	r2, #3
 800e29a:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800e29c:	e2d6      	b.n	800e84c <svl_iplDaemon+0x6b8>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800e29e:	4b5b      	ldr	r3, [pc, #364]	@ (800e40c <svl_iplDaemon+0x278>)
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 800e2a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e2a8:	f003 fa80 	bl	80117ac <gos_taskSleep>
				break;
 800e2ac:	e2ce      	b.n	800e84c <svl_iplDaemon+0x6b8>
			case SVL_IPL_STATE_CONFIG_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Configuring device...\r\n");
#endif
				iplState = SVL_IPL_STATE_CONFIG;
 800e2ae:	4b57      	ldr	r3, [pc, #348]	@ (800e40c <svl_iplDaemon+0x278>)
 800e2b0:	2204      	movs	r2, #4
 800e2b2:	701a      	strb	r2, [r3, #0]
				break;
 800e2b4:	e2ca      	b.n	800e84c <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_CONFIG:
			{
				(void_t) svl_pdhGetWifiCfg(&devConfigMsg);
 800e2b6:	485d      	ldr	r0, [pc, #372]	@ (800e42c <svl_iplDaemon+0x298>)
 800e2b8:	f000 fca8 	bl	800ec0c <svl_pdhGetWifiCfg>

				msgHeader.messageId     = IPL_MSG_ID_CONFIG;
 800e2bc:	2311      	movs	r3, #17
 800e2be:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(devConfigMsg);
 800e2c0:	236e      	movs	r3, #110	@ 0x6e
 800e2c2:	60bb      	str	r3, [r7, #8]

				(void_t) drv_crcGetCrc32((u8_t*)&devConfigMsg, sizeof(devConfigMsg), &msgHeader.messageCrc);
 800e2c4:	1d3b      	adds	r3, r7, #4
 800e2c6:	330c      	adds	r3, #12
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	216e      	movs	r1, #110	@ 0x6e
 800e2cc:	4857      	ldr	r0, [pc, #348]	@ (800e42c <svl_iplDaemon+0x298>)
 800e2ce:	f7fb fdc7 	bl	8009e60 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e2d2:	4b53      	ldr	r3, [pc, #332]	@ (800e420 <svl_iplDaemon+0x28c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	1d38      	adds	r0, r7, #4
 800e2d8:	2264      	movs	r2, #100	@ 0x64
 800e2da:	2110      	movs	r1, #16
 800e2dc:	4798      	blx	r3
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b55      	cmp	r3, #85	@ 0x55
 800e2e2:	d132      	bne.n	800e34a <svl_iplDaemon+0x1b6>
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       100u) == GOS_SUCCESS &&
 800e2e4:	4b4e      	ldr	r3, [pc, #312]	@ (800e420 <svl_iplDaemon+0x28c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2264      	movs	r2, #100	@ 0x64
 800e2ea:	216e      	movs	r1, #110	@ 0x6e
 800e2ec:	484f      	ldr	r0, [pc, #316]	@ (800e42c <svl_iplDaemon+0x298>)
 800e2ee:	4798      	blx	r3
 800e2f0:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e2f2:	2b55      	cmp	r3, #85	@ 0x55
 800e2f4:	d129      	bne.n	800e34a <svl_iplDaemon+0x1b6>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e2f6:	4b4b      	ldr	r3, [pc, #300]	@ (800e424 <svl_iplDaemon+0x290>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	1d38      	adds	r0, r7, #4
 800e2fc:	22c8      	movs	r2, #200	@ 0xc8
 800e2fe:	2110      	movs	r1, #16
 800e300:	4798      	blx	r3
 800e302:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       100u) == GOS_SUCCESS &&
 800e304:	2b55      	cmp	r3, #85	@ 0x55
 800e306:	d120      	bne.n	800e34a <svl_iplDaemon+0x1b6>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e308:	4b46      	ldr	r3, [pc, #280]	@ (800e424 <svl_iplDaemon+0x290>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	22c8      	movs	r2, #200	@ 0xc8
 800e310:	4845      	ldr	r0, [pc, #276]	@ (800e428 <svl_iplDaemon+0x294>)
 800e312:	4798      	blx	r3
 800e314:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800e316:	2b55      	cmp	r3, #85	@ 0x55
 800e318:	d117      	bne.n	800e34a <svl_iplDaemon+0x1b6>
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800e31a:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e31c:	f640 2211 	movw	r2, #2577	@ 0xa11
 800e320:	4293      	cmp	r3, r2
 800e322:	d112      	bne.n	800e34a <svl_iplDaemon+0x1b6>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e324:	68b9      	ldr	r1, [r7, #8]
 800e326:	693a      	ldr	r2, [r7, #16]
 800e328:	2300      	movs	r3, #0
 800e32a:	483f      	ldr	r0, [pc, #252]	@ (800e428 <svl_iplDaemon+0x294>)
 800e32c:	f7fb fde4 	bl	8009ef8 <drv_crcCheckCrc32>
 800e330:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800e332:	2bca      	cmp	r3, #202	@ 0xca
 800e334:	d109      	bne.n	800e34a <svl_iplDaemon+0x1b6>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&receivedDevConfigMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	461a      	mov	r2, r3
 800e33a:	493b      	ldr	r1, [pc, #236]	@ (800e428 <svl_iplDaemon+0x294>)
 800e33c:	483c      	ldr	r0, [pc, #240]	@ (800e430 <svl_iplDaemon+0x29c>)
 800e33e:	f008 ff34 	bl	80171aa <memcpy>
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
						);
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 800e342:	4b32      	ldr	r3, [pc, #200]	@ (800e40c <svl_iplDaemon+0x278>)
 800e344:	2205      	movs	r2, #5
 800e346:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800e348:	e280      	b.n	800e84c <svl_iplDaemon+0x6b8>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800e34a:	4b30      	ldr	r3, [pc, #192]	@ (800e40c <svl_iplDaemon+0x278>)
 800e34c:	2201      	movs	r2, #1
 800e34e:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 800e350:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e354:	f003 fa2a 	bl	80117ac <gos_taskSleep>
				break;
 800e358:	e278      	b.n	800e84c <svl_iplDaemon+0x6b8>
			case SVL_IPL_STATE_CONNECT_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Connecting to network...\r\n");
#endif
				iplState = SVL_IPL_STATE_CONNECT;
 800e35a:	4b2c      	ldr	r3, [pc, #176]	@ (800e40c <svl_iplDaemon+0x278>)
 800e35c:	2206      	movs	r2, #6
 800e35e:	701a      	strb	r2, [r3, #0]
				break;
 800e360:	e274      	b.n	800e84c <svl_iplDaemon+0x6b8>
			}
			case SVL_IPL_STATE_CONNECT:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONNECT;
 800e362:	2321      	movs	r3, #33	@ 0x21
 800e364:	607b      	str	r3, [r7, #4]
				msgHeader.messageLength = sizeof(connectMsg);
 800e366:	2301      	movs	r3, #1
 800e368:	60bb      	str	r3, [r7, #8]

				(void_t) drv_crcGetCrc32((u8_t*)&connectMsg, sizeof(connectMsg), &msgHeader.messageCrc);
 800e36a:	1d3b      	adds	r3, r7, #4
 800e36c:	330c      	adds	r3, #12
 800e36e:	461a      	mov	r2, r3
 800e370:	2101      	movs	r1, #1
 800e372:	4830      	ldr	r0, [pc, #192]	@ (800e434 <svl_iplDaemon+0x2a0>)
 800e374:	f7fb fd74 	bl	8009e60 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e378:	4b29      	ldr	r3, [pc, #164]	@ (800e420 <svl_iplDaemon+0x28c>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	1d38      	adds	r0, r7, #4
 800e37e:	2264      	movs	r2, #100	@ 0x64
 800e380:	2110      	movs	r1, #16
 800e382:	4798      	blx	r3
 800e384:	4603      	mov	r3, r0
 800e386:	2b55      	cmp	r3, #85	@ 0x55
 800e388:	d13b      	bne.n	800e402 <svl_iplDaemon+0x26e>
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         100u) == GOS_SUCCESS &&
 800e38a:	4b25      	ldr	r3, [pc, #148]	@ (800e420 <svl_iplDaemon+0x28c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2264      	movs	r2, #100	@ 0x64
 800e390:	2101      	movs	r1, #1
 800e392:	4828      	ldr	r0, [pc, #160]	@ (800e434 <svl_iplDaemon+0x2a0>)
 800e394:	4798      	blx	r3
 800e396:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800e398:	2b55      	cmp	r3, #85	@ 0x55
 800e39a:	d132      	bne.n	800e402 <svl_iplDaemon+0x26e>
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),          0xFFFFFFFFu) == GOS_SUCCESS &&
 800e39c:	4b21      	ldr	r3, [pc, #132]	@ (800e424 <svl_iplDaemon+0x290>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	1d38      	adds	r0, r7, #4
 800e3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a6:	2110      	movs	r1, #16
 800e3a8:	4798      	blx	r3
 800e3aa:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         100u) == GOS_SUCCESS &&
 800e3ac:	2b55      	cmp	r3, #85	@ 0x55
 800e3ae:	d128      	bne.n	800e402 <svl_iplDaemon+0x26e>
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e3b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e424 <svl_iplDaemon+0x290>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68b9      	ldr	r1, [r7, #8]
 800e3b6:	22c8      	movs	r2, #200	@ 0xc8
 800e3b8:	481b      	ldr	r0, [pc, #108]	@ (800e428 <svl_iplDaemon+0x294>)
 800e3ba:	4798      	blx	r3
 800e3bc:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),          0xFFFFFFFFu) == GOS_SUCCESS &&
 800e3be:	2b55      	cmp	r3, #85	@ 0x55
 800e3c0:	d11f      	bne.n	800e402 <svl_iplDaemon+0x26e>
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 800e3c2:	687b      	ldr	r3, [r7, #4]
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800e3c4:	f640 2221 	movw	r2, #2593	@ 0xa21
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d11a      	bne.n	800e402 <svl_iplDaemon+0x26e>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4815      	ldr	r0, [pc, #84]	@ (800e428 <svl_iplDaemon+0x294>)
 800e3d4:	f7fb fd90 	bl	8009ef8 <drv_crcCheckCrc32>
 800e3d8:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 800e3da:	2bca      	cmp	r3, #202	@ 0xca
 800e3dc:	d111      	bne.n	800e402 <svl_iplDaemon+0x26e>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&connectResultMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	4911      	ldr	r1, [pc, #68]	@ (800e428 <svl_iplDaemon+0x294>)
 800e3e4:	4814      	ldr	r0, [pc, #80]	@ (800e438 <svl_iplDaemon+0x2a4>)
 800e3e6:	f008 fee0 	bl	80171aa <memcpy>

					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800e3ea:	4b13      	ldr	r3, [pc, #76]	@ (800e438 <svl_iplDaemon+0x2a4>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	2b36      	cmp	r3, #54	@ 0x36
 800e3f0:	d103      	bne.n	800e3fa <svl_iplDaemon+0x266>
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Successfully connected to the network.\r\n");
#endif
						iplState = SVL_IPL_STATE_CONNECTED;
 800e3f2:	4b06      	ldr	r3, [pc, #24]	@ (800e40c <svl_iplDaemon+0x278>)
 800e3f4:	2207      	movs	r2, #7
 800e3f6:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800e3f8:	e007      	b.n	800e40a <svl_iplDaemon+0x276>
					else
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Network connection failed.\r\n");
#endif
						iplState = SVL_IPL_STATE_DISCOVER_START;
 800e3fa:	4b04      	ldr	r3, [pc, #16]	@ (800e40c <svl_iplDaemon+0x278>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800e400:	e003      	b.n	800e40a <svl_iplDaemon+0x276>
				{
					// No response.
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "No response was received.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800e402:	4b02      	ldr	r3, [pc, #8]	@ (800e40c <svl_iplDaemon+0x278>)
 800e404:	2201      	movs	r2, #1
 800e406:	701a      	strb	r2, [r3, #0]
				}

				break;
 800e408:	e220      	b.n	800e84c <svl_iplDaemon+0x6b8>
 800e40a:	e21f      	b.n	800e84c <svl_iplDaemon+0x6b8>
 800e40c:	20003b64 	.word	0x20003b64
 800e410:	200051a4 	.word	0x200051a4
 800e414:	2000059c 	.word	0x2000059c
 800e418:	20004d30 	.word	0x20004d30
 800e41c:	0801976c 	.word	0x0801976c
 800e420:	2000519c 	.word	0x2000519c
 800e424:	200051a0 	.word	0x200051a0
 800e428:	20003b68 	.word	0x20003b68
 800e42c:	20004c50 	.word	0x20004c50
 800e430:	20004cc0 	.word	0x20004cc0
 800e434:	20004c40 	.word	0x20004c40
 800e438:	20004c44 	.word	0x20004c44
			}
			case SVL_IPL_STATE_CONNECTED:
			{
				// Check if there is an incoming request.
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800e43c:	4bac      	ldr	r3, [pc, #688]	@ (800e6f0 <svl_iplDaemon+0x55c>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	1d38      	adds	r0, r7, #4
 800e442:	f04f 32ff 	mov.w	r2, #4294967295
 800e446:	2110      	movs	r1, #16
 800e448:	4798      	blx	r3
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b55      	cmp	r3, #85	@ 0x55
 800e44e:	f040 81fc 	bne.w	800e84a <svl_iplDaemon+0x6b6>
					svl_iplReceive(iplRxBuffer,       msgHeader.messageLength, 0xFFFFFFFFu) == GOS_SUCCESS)
 800e452:	4ba7      	ldr	r3, [pc, #668]	@ (800e6f0 <svl_iplDaemon+0x55c>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68b9      	ldr	r1, [r7, #8]
 800e458:	f04f 32ff 	mov.w	r2, #4294967295
 800e45c:	48a5      	ldr	r0, [pc, #660]	@ (800e6f4 <svl_iplDaemon+0x560>)
 800e45e:	4798      	blx	r3
 800e460:	4603      	mov	r3, r0
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800e462:	2b55      	cmp	r3, #85	@ 0x55
 800e464:	f040 81f1 	bne.w	800e84a <svl_iplDaemon+0x6b6>
				{
					if (drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	2300      	movs	r3, #0
 800e46e:	48a1      	ldr	r0, [pc, #644]	@ (800e6f4 <svl_iplDaemon+0x560>)
 800e470:	f7fb fd42 	bl	8009ef8 <drv_crcCheckCrc32>
 800e474:	4603      	mov	r3, r0
 800e476:	2bca      	cmp	r3, #202	@ 0xca
 800e478:	f040 81e2 	bne.w	800e840 <svl_iplDaemon+0x6ac>
					{
						switch (msgHeader.messageId)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2bd1      	cmp	r3, #209	@ 0xd1
 800e480:	f000 8108 	beq.w	800e694 <svl_iplDaemon+0x500>
 800e484:	2bd1      	cmp	r3, #209	@ 0xd1
 800e486:	f200 81ba 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e48a:	2bc1      	cmp	r3, #193	@ 0xc1
 800e48c:	f000 80ed 	beq.w	800e66a <svl_iplDaemon+0x4d6>
 800e490:	2bc1      	cmp	r3, #193	@ 0xc1
 800e492:	f200 81b4 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e496:	2bb1      	cmp	r3, #177	@ 0xb1
 800e498:	f000 810b 	beq.w	800e6b2 <svl_iplDaemon+0x51e>
 800e49c:	2bb1      	cmp	r3, #177	@ 0xb1
 800e49e:	f200 81ae 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4a2:	2ba1      	cmp	r3, #161	@ 0xa1
 800e4a4:	f000 80eb 	beq.w	800e67e <svl_iplDaemon+0x4ea>
 800e4a8:	2ba1      	cmp	r3, #161	@ 0xa1
 800e4aa:	f200 81a8 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4ae:	2b91      	cmp	r3, #145	@ 0x91
 800e4b0:	f000 80d1 	beq.w	800e656 <svl_iplDaemon+0x4c2>
 800e4b4:	2b91      	cmp	r3, #145	@ 0x91
 800e4b6:	f200 81a2 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4ba:	2b81      	cmp	r3, #129	@ 0x81
 800e4bc:	f000 8092 	beq.w	800e5e4 <svl_iplDaemon+0x450>
 800e4c0:	2b81      	cmp	r3, #129	@ 0x81
 800e4c2:	f200 819c 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4c6:	2b71      	cmp	r3, #113	@ 0x71
 800e4c8:	d039      	beq.n	800e53e <svl_iplDaemon+0x3aa>
 800e4ca:	2b71      	cmp	r3, #113	@ 0x71
 800e4cc:	f200 8197 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4d0:	2b61      	cmp	r3, #97	@ 0x61
 800e4d2:	d02a      	beq.n	800e52a <svl_iplDaemon+0x396>
 800e4d4:	2b61      	cmp	r3, #97	@ 0x61
 800e4d6:	f200 8192 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4da:	2b51      	cmp	r3, #81	@ 0x51
 800e4dc:	d01b      	beq.n	800e516 <svl_iplDaemon+0x382>
 800e4de:	2b51      	cmp	r3, #81	@ 0x51
 800e4e0:	f200 818d 	bhi.w	800e7fe <svl_iplDaemon+0x66a>
 800e4e4:	2b31      	cmp	r3, #49	@ 0x31
 800e4e6:	d002      	beq.n	800e4ee <svl_iplDaemon+0x35a>
 800e4e8:	2b41      	cmp	r3, #65	@ 0x41
 800e4ea:	d00d      	beq.n	800e508 <svl_iplDaemon+0x374>
 800e4ec:	e187      	b.n	800e7fe <svl_iplDaemon+0x66a>
							case IPL_MSG_ID_CPU_LOAD:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL CPU load request received.\r\n");
#endif
								cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 800e4ee:	f001 ffb3 	bl	8010458 <gos_kernelGetCpuUsage>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	4b80      	ldr	r3, [pc, #512]	@ (800e6f8 <svl_iplDaemon+0x564>)
 800e4f8:	801a      	strh	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_CPU_LOAD_ACK, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	497e      	ldr	r1, [pc, #504]	@ (800e6f8 <svl_iplDaemon+0x564>)
 800e4fe:	f640 2031 	movw	r0, #2609	@ 0xa31
 800e502:	f7ff fe0f 	bl	800e124 <svl_iplSendMessage>
								break;
 800e506:	e1a0      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_RESET:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL reset request received.\r\n");
#endif
								(void_t) gos_taskSleep(2000);
 800e508:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800e50c:	f003 f94e 	bl	80117ac <gos_taskSleep>
								gos_kernelReset();
 800e510:	f001 ffb4 	bl	801047c <gos_kernelReset>
								break;
 800e514:	e199      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_PING:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL ping request received.\r\n");
#endif
								pingMsg.pingResult = SVL_IPL_PING_OK;
 800e516:	4b79      	ldr	r3, [pc, #484]	@ (800e6fc <svl_iplDaemon+0x568>)
 800e518:	2228      	movs	r2, #40	@ 0x28
 800e51a:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_PING_ACK, (u8_t*)&pingMsg, sizeof(pingMsg));
 800e51c:	2201      	movs	r2, #1
 800e51e:	4977      	ldr	r1, [pc, #476]	@ (800e6fc <svl_iplDaemon+0x568>)
 800e520:	f640 2051 	movw	r0, #2641	@ 0xa51
 800e524:	f7ff fdfe 	bl	800e124 <svl_iplSendMessage>
								break;
 800e528:	e18f      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_TASK_NUM:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL task number request received.\r\n");
#endif
								(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 800e52a:	4875      	ldr	r0, [pc, #468]	@ (800e700 <svl_iplDaemon+0x56c>)
 800e52c:	f004 fc8e 	bl	8012e4c <gos_taskGetNumber>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_NUM_ACK, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 800e530:	2202      	movs	r2, #2
 800e532:	4973      	ldr	r1, [pc, #460]	@ (800e700 <svl_iplDaemon+0x56c>)
 800e534:	f640 2061 	movw	r0, #2657	@ 0xa61
 800e538:	f7ff fdf4 	bl	800e124 <svl_iplSendMessage>
								break;
 800e53c:	e185      	b.n	800e84a <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800e53e:	4b6d      	ldr	r3, [pc, #436]	@ (800e6f4 <svl_iplDaemon+0x560>)
 800e540:	881a      	ldrh	r2, [r3, #0]
 800e542:	4b70      	ldr	r3, [pc, #448]	@ (800e704 <svl_iplDaemon+0x570>)
 800e544:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 800e546:	4b6f      	ldr	r3, [pc, #444]	@ (800e704 <svl_iplDaemon+0x570>)
 800e548:	881b      	ldrh	r3, [r3, #0]
 800e54a:	496f      	ldr	r1, [pc, #444]	@ (800e708 <svl_iplDaemon+0x574>)
 800e54c:	4618      	mov	r0, r3
 800e54e:	f004 fc0b 	bl	8012d68 <gos_taskGetDataByIndex>
										GOS_TRUE,
										"IPL task data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
#endif
								// Fill out message.
								taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 800e552:	4b6d      	ldr	r3, [pc, #436]	@ (800e708 <svl_iplDaemon+0x574>)
 800e554:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e558:	4b6c      	ldr	r3, [pc, #432]	@ (800e70c <svl_iplDaemon+0x578>)
 800e55a:	875a      	strh	r2, [r3, #58]	@ 0x3a
								taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 800e55c:	4b6a      	ldr	r3, [pc, #424]	@ (800e708 <svl_iplDaemon+0x574>)
 800e55e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800e562:	4b6a      	ldr	r3, [pc, #424]	@ (800e70c <svl_iplDaemon+0x578>)
 800e564:	86da      	strh	r2, [r3, #54]	@ 0x36
								taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 800e566:	4b68      	ldr	r3, [pc, #416]	@ (800e708 <svl_iplDaemon+0x574>)
 800e568:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e56c:	4b67      	ldr	r3, [pc, #412]	@ (800e70c <svl_iplDaemon+0x578>)
 800e56e:	871a      	strh	r2, [r3, #56]	@ 0x38
								taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 800e570:	4b65      	ldr	r3, [pc, #404]	@ (800e708 <svl_iplDaemon+0x574>)
 800e572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e574:	4a65      	ldr	r2, [pc, #404]	@ (800e70c <svl_iplDaemon+0x578>)
 800e576:	f8c2 3027 	str.w	r3, [r2, #39]	@ 0x27
								taskDataMsg.taskId               = taskData.taskId;
 800e57a:	4b63      	ldr	r3, [pc, #396]	@ (800e708 <svl_iplDaemon+0x574>)
 800e57c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e57e:	4b63      	ldr	r3, [pc, #396]	@ (800e70c <svl_iplDaemon+0x578>)
 800e580:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
								(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 800e584:	4962      	ldr	r1, [pc, #392]	@ (800e710 <svl_iplDaemon+0x57c>)
 800e586:	4863      	ldr	r0, [pc, #396]	@ (800e714 <svl_iplDaemon+0x580>)
 800e588:	f008 fe07 	bl	801719a <strcpy>
								taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 800e58c:	4b5e      	ldr	r3, [pc, #376]	@ (800e708 <svl_iplDaemon+0x574>)
 800e58e:	79da      	ldrb	r2, [r3, #7]
 800e590:	4b5e      	ldr	r3, [pc, #376]	@ (800e70c <svl_iplDaemon+0x578>)
 800e592:	709a      	strb	r2, [r3, #2]
								taskDataMsg.taskPriority         = taskData.taskPriority;
 800e594:	4b5c      	ldr	r3, [pc, #368]	@ (800e708 <svl_iplDaemon+0x574>)
 800e596:	799a      	ldrb	r2, [r3, #6]
 800e598:	4b5c      	ldr	r3, [pc, #368]	@ (800e70c <svl_iplDaemon+0x578>)
 800e59a:	705a      	strb	r2, [r3, #1]
								taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 800e59c:	4b5a      	ldr	r3, [pc, #360]	@ (800e708 <svl_iplDaemon+0x574>)
 800e59e:	891a      	ldrh	r2, [r3, #8]
 800e5a0:	4b5a      	ldr	r3, [pc, #360]	@ (800e70c <svl_iplDaemon+0x578>)
 800e5a2:	f8a3 2003 	strh.w	r2, [r3, #3]
								(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800e5a6:	4a59      	ldr	r2, [pc, #356]	@ (800e70c <svl_iplDaemon+0x578>)
 800e5a8:	4b57      	ldr	r3, [pc, #348]	@ (800e708 <svl_iplDaemon+0x574>)
 800e5aa:	322d      	adds	r2, #45	@ 0x2d
 800e5ac:	334c      	adds	r3, #76	@ 0x4c
 800e5ae:	cb03      	ldmia	r3!, {r0, r1}
 800e5b0:	6010      	str	r0, [r2, #0]
 800e5b2:	6051      	str	r1, [r2, #4]
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	7213      	strb	r3, [r2, #8]
								taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 800e5b8:	4b53      	ldr	r3, [pc, #332]	@ (800e708 <svl_iplDaemon+0x574>)
 800e5ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e5be:	4b53      	ldr	r3, [pc, #332]	@ (800e70c <svl_iplDaemon+0x578>)
 800e5c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
								taskDataMsg.taskStackSize        = taskData.taskStackSize;
 800e5c2:	4b51      	ldr	r3, [pc, #324]	@ (800e708 <svl_iplDaemon+0x574>)
 800e5c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5c8:	4b50      	ldr	r3, [pc, #320]	@ (800e70c <svl_iplDaemon+0x578>)
 800e5ca:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
								taskDataMsg.taskState            = taskData.taskState;
 800e5ce:	4b4e      	ldr	r3, [pc, #312]	@ (800e708 <svl_iplDaemon+0x574>)
 800e5d0:	791a      	ldrb	r2, [r3, #4]
 800e5d2:	4b4e      	ldr	r3, [pc, #312]	@ (800e70c <svl_iplDaemon+0x578>)
 800e5d4:	701a      	strb	r2, [r3, #0]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_DATA_ACK, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 800e5d6:	223e      	movs	r2, #62	@ 0x3e
 800e5d8:	494c      	ldr	r1, [pc, #304]	@ (800e70c <svl_iplDaemon+0x578>)
 800e5da:	f640 2071 	movw	r0, #2673	@ 0xa71
 800e5de:	f7ff fda1 	bl	800e124 <svl_iplSendMessage>
								break;
 800e5e2:	e132      	b.n	800e84a <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_VAR_DATA:
							{
								// Get task index.
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800e5e4:	4b43      	ldr	r3, [pc, #268]	@ (800e6f4 <svl_iplDaemon+0x560>)
 800e5e6:	881a      	ldrh	r2, [r3, #0]
 800e5e8:	4b46      	ldr	r3, [pc, #280]	@ (800e704 <svl_iplDaemon+0x570>)
 800e5ea:	801a      	strh	r2, [r3, #0]
								// Get task data.
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 800e5ec:	4b45      	ldr	r3, [pc, #276]	@ (800e704 <svl_iplDaemon+0x570>)
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	4945      	ldr	r1, [pc, #276]	@ (800e708 <svl_iplDaemon+0x574>)
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f004 fbb8 	bl	8012d68 <gos_taskGetDataByIndex>
								(void_t) gos_traceTraceFormatted(
										GOS_TRUE,
										"IPL task variable data request received. Idx: %u.\r\n",
										taskDataGetMsg.taskIdx);
#endif
								taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 800e5f8:	4b43      	ldr	r3, [pc, #268]	@ (800e708 <svl_iplDaemon+0x574>)
 800e5fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e5fe:	4b46      	ldr	r3, [pc, #280]	@ (800e718 <svl_iplDaemon+0x584>)
 800e600:	f8a3 2013 	strh.w	r2, [r3, #19]
								taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 800e604:	4b40      	ldr	r3, [pc, #256]	@ (800e708 <svl_iplDaemon+0x574>)
 800e606:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e60a:	4b43      	ldr	r3, [pc, #268]	@ (800e718 <svl_iplDaemon+0x584>)
 800e60c:	f8a3 2011 	strh.w	r2, [r3, #17]
								taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 800e610:	4b3d      	ldr	r3, [pc, #244]	@ (800e708 <svl_iplDaemon+0x574>)
 800e612:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e616:	4b40      	ldr	r3, [pc, #256]	@ (800e718 <svl_iplDaemon+0x584>)
 800e618:	f8a3 200f 	strh.w	r2, [r3, #15]
								taskVarDataMsg.taskPriority      = taskData.taskPriority;
 800e61c:	4b3a      	ldr	r3, [pc, #232]	@ (800e708 <svl_iplDaemon+0x574>)
 800e61e:	799a      	ldrb	r2, [r3, #6]
 800e620:	4b3d      	ldr	r3, [pc, #244]	@ (800e718 <svl_iplDaemon+0x584>)
 800e622:	705a      	strb	r2, [r3, #1]
								taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 800e624:	4b38      	ldr	r3, [pc, #224]	@ (800e708 <svl_iplDaemon+0x574>)
 800e626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e628:	4a3b      	ldr	r2, [pc, #236]	@ (800e718 <svl_iplDaemon+0x584>)
 800e62a:	f8c2 3002 	str.w	r3, [r2, #2]
			                    taskVarDataMsg.taskState         = taskData.taskState;
 800e62e:	4b36      	ldr	r3, [pc, #216]	@ (800e708 <svl_iplDaemon+0x574>)
 800e630:	791a      	ldrb	r2, [r3, #4]
 800e632:	4b39      	ldr	r3, [pc, #228]	@ (800e718 <svl_iplDaemon+0x584>)
 800e634:	701a      	strb	r2, [r3, #0]

			                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800e636:	4a38      	ldr	r2, [pc, #224]	@ (800e718 <svl_iplDaemon+0x584>)
 800e638:	4b33      	ldr	r3, [pc, #204]	@ (800e708 <svl_iplDaemon+0x574>)
 800e63a:	3206      	adds	r2, #6
 800e63c:	334c      	adds	r3, #76	@ 0x4c
 800e63e:	cb03      	ldmia	r3!, {r0, r1}
 800e640:	6010      	str	r0, [r2, #0]
 800e642:	6051      	str	r1, [r2, #4]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	7213      	strb	r3, [r2, #8]

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_VAR_DATA_ACK, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 800e648:	2215      	movs	r2, #21
 800e64a:	4933      	ldr	r1, [pc, #204]	@ (800e718 <svl_iplDaemon+0x584>)
 800e64c:	f640 2081 	movw	r0, #2689	@ 0xa81
 800e650:	f7ff fd68 	bl	800e124 <svl_iplSendMessage>

								break;
 800e654:	e0f9      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_RUNTIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL runtime request received.\r\n");
#endif
								(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 800e656:	4831      	ldr	r0, [pc, #196]	@ (800e71c <svl_iplDaemon+0x588>)
 800e658:	f006 fe8e 	bl	8015378 <gos_runTimeGet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_RUNTIME_ACK, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 800e65c:	2209      	movs	r2, #9
 800e65e:	492f      	ldr	r1, [pc, #188]	@ (800e71c <svl_iplDaemon+0x588>)
 800e660:	f640 2091 	movw	r0, #2705	@ 0xa91
 800e664:	f7ff fd5e 	bl	800e124 <svl_iplSendMessage>
								break;
 800e668:	e0ef      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_HWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL hardware info request received.\r\n");
#endif
								(void_t) svl_pdhGetHwInfo(&hwInfoMsg);
 800e66a:	482d      	ldr	r0, [pc, #180]	@ (800e720 <svl_iplDaemon+0x58c>)
 800e66c:	f000 fa5e 	bl	800eb2c <svl_pdhGetHwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_HWINFO_ACK, (u8_t*)&hwInfoMsg, sizeof(hwInfoMsg));
 800e670:	22fa      	movs	r2, #250	@ 0xfa
 800e672:	492b      	ldr	r1, [pc, #172]	@ (800e720 <svl_iplDaemon+0x58c>)
 800e674:	f640 20c1 	movw	r0, #2753	@ 0xac1
 800e678:	f7ff fd54 	bl	800e124 <svl_iplSendMessage>
								break;
 800e67c:	e0e5      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_SWINFO:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL software info request received.\r\n");
#endif
								(void_t) svl_pdhGetSwInfo(&swInfoMsg);
 800e67e:	4829      	ldr	r0, [pc, #164]	@ (800e724 <svl_iplDaemon+0x590>)
 800e680:	f000 fa1c 	bl	800eabc <svl_pdhGetSwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SWINFO_ACK, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 800e684:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800e688:	4926      	ldr	r1, [pc, #152]	@ (800e724 <svl_iplDaemon+0x590>)
 800e68a:	f640 20a1 	movw	r0, #2721	@ 0xaa1
 800e68e:	f7ff fd49 	bl	800e124 <svl_iplSendMessage>
								break;
 800e692:	e0da      	b.n	800e84a <svl_iplDaemon+0x6b6>
							case IPL_MSG_ID_SYNC_TIME:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTrace(GOS_TRUE, "IPL system time synchronization request received.\r\n");
#endif
								(void_t) memcpy((void_t*)&sysTimeSetMsg, (void_t*)iplRxBuffer, sizeof(sysTimeSetMsg));
 800e694:	4b24      	ldr	r3, [pc, #144]	@ (800e728 <svl_iplDaemon+0x594>)
 800e696:	4a17      	ldr	r2, [pc, #92]	@ (800e6f4 <svl_iplDaemon+0x560>)
 800e698:	ca07      	ldmia	r2, {r0, r1, r2}
 800e69a:	c303      	stmia	r3!, {r0, r1}
 800e69c:	801a      	strh	r2, [r3, #0]
								(void_t) gos_timeSet(&sysTimeSetMsg.desiredSystemTime);
 800e69e:	4822      	ldr	r0, [pc, #136]	@ (800e728 <svl_iplDaemon+0x594>)
 800e6a0:	f006 fe4e 	bl	8015340 <gos_timeSet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SYNC_TIME_ACK, (u8_t*)&sysTimeSetMsg, sizeof(sysTimeSetMsg));
 800e6a4:	220a      	movs	r2, #10
 800e6a6:	4920      	ldr	r1, [pc, #128]	@ (800e728 <svl_iplDaemon+0x594>)
 800e6a8:	f640 20d1 	movw	r0, #2769	@ 0xad1
 800e6ac:	f7ff fd3a 	bl	800e124 <svl_iplSendMessage>
								break;
 800e6b0:	e0cb      	b.n	800e84a <svl_iplDaemon+0x6b6>
							}
							case IPL_MSG_ID_TASK_MODIFY:
							{
								// Get parameters.
								(void_t) memcpy((void_t*)&taskModifyMsg, (void_t*)iplRxBuffer, sizeof(taskModifyMsg));
 800e6b2:	4b10      	ldr	r3, [pc, #64]	@ (800e6f4 <svl_iplDaemon+0x560>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	4a1d      	ldr	r2, [pc, #116]	@ (800e72c <svl_iplDaemon+0x598>)
 800e6b8:	6013      	str	r3, [r2, #0]
										"IPL task modification request received. Idx: %u Type: %u.\r\n",
										taskModifyMsg.taskIdx,
										taskModifyMsg.modificationType);
#endif

								(void_t) gos_taskGetDataByIndex(taskModifyMsg.taskIdx, &taskData);
 800e6ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e72c <svl_iplDaemon+0x598>)
 800e6bc:	881b      	ldrh	r3, [r3, #0]
 800e6be:	4912      	ldr	r1, [pc, #72]	@ (800e708 <svl_iplDaemon+0x574>)
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f004 fb51 	bl	8012d68 <gos_taskGetDataByIndex>

								switch (taskModifyMsg.modificationType)
 800e6c6:	4b19      	ldr	r3, [pc, #100]	@ (800e72c <svl_iplDaemon+0x598>)
 800e6c8:	789b      	ldrb	r3, [r3, #2]
 800e6ca:	2b05      	cmp	r3, #5
 800e6cc:	f200 808c 	bhi.w	800e7e8 <svl_iplDaemon+0x654>
 800e6d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6d8 <svl_iplDaemon+0x544>)
 800e6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d6:	bf00      	nop
 800e6d8:	0800e731 	.word	0x0800e731
 800e6dc:	0800e74f 	.word	0x0800e74f
 800e6e0:	0800e76d 	.word	0x0800e76d
 800e6e4:	0800e78b 	.word	0x0800e78b
 800e6e8:	0800e7ad 	.word	0x0800e7ad
 800e6ec:	0800e7cb 	.word	0x0800e7cb
 800e6f0:	200051a0 	.word	0x200051a0
 800e6f4:	20003b68 	.word	0x20003b68
 800e6f8:	20004c3c 	.word	0x20004c3c
 800e6fc:	20004c48 	.word	0x20004c48
 800e700:	20004c4c 	.word	0x20004c4c
 800e704:	20004bd4 	.word	0x20004bd4
 800e708:	20004b68 	.word	0x20004b68
 800e70c:	20004bfc 	.word	0x20004bfc
 800e710:	20004b72 	.word	0x20004b72
 800e714:	20004c01 	.word	0x20004c01
 800e718:	20004bd8 	.word	0x20004bd8
 800e71c:	20004bf0 	.word	0x20004bf0
 800e720:	20004d70 	.word	0x20004d70
 800e724:	20004e6c 	.word	0x20004e6c
 800e728:	20005110 	.word	0x20005110
 800e72c:	2000510c 	.word	0x2000510c
								{
									case IPL_TASK_MODIFY_SUSPEND:
									{
										taskModifyMsg.result = gos_taskSuspend(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e730:	4b48      	ldr	r3, [pc, #288]	@ (800e854 <svl_iplDaemon+0x6c0>)
 800e732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e734:	4618      	mov	r0, r3
 800e736:	f003 f991 	bl	8011a5c <gos_taskSuspend>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b55      	cmp	r3, #85	@ 0x55
 800e73e:	bf0c      	ite	eq
 800e740:	2301      	moveq	r3, #1
 800e742:	2300      	movne	r3, #0
 800e744:	b2db      	uxtb	r3, r3
 800e746:	461a      	mov	r2, r3
 800e748:	4b43      	ldr	r3, [pc, #268]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e74a:	70da      	strb	r2, [r3, #3]
										break;
 800e74c:	e050      	b.n	800e7f0 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_RESUME:
									{
										taskModifyMsg.result = gos_taskResume(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e74e:	4b41      	ldr	r3, [pc, #260]	@ (800e854 <svl_iplDaemon+0x6c0>)
 800e750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e752:	4618      	mov	r0, r3
 800e754:	f003 faa4 	bl	8011ca0 <gos_taskResume>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b55      	cmp	r3, #85	@ 0x55
 800e75c:	bf0c      	ite	eq
 800e75e:	2301      	moveq	r3, #1
 800e760:	2300      	movne	r3, #0
 800e762:	b2db      	uxtb	r3, r3
 800e764:	461a      	mov	r2, r3
 800e766:	4b3c      	ldr	r3, [pc, #240]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e768:	70da      	strb	r2, [r3, #3]
										break;
 800e76a:	e041      	b.n	800e7f0 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_DELETE:
									{
										taskModifyMsg.result = gos_taskDelete(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e76c:	4b39      	ldr	r3, [pc, #228]	@ (800e854 <svl_iplDaemon+0x6c0>)
 800e76e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e770:	4618      	mov	r0, r3
 800e772:	f003 fd3f 	bl	80121f4 <gos_taskDelete>
 800e776:	4603      	mov	r3, r0
 800e778:	2b55      	cmp	r3, #85	@ 0x55
 800e77a:	bf0c      	ite	eq
 800e77c:	2301      	moveq	r3, #1
 800e77e:	2300      	movne	r3, #0
 800e780:	b2db      	uxtb	r3, r3
 800e782:	461a      	mov	r2, r3
 800e784:	4b34      	ldr	r3, [pc, #208]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e786:	70da      	strb	r2, [r3, #3]
										break;
 800e788:	e032      	b.n	800e7f0 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_BLOCK:
									{
										taskModifyMsg.result = gos_taskBlock(taskData.taskId, GOS_TASK_MAX_BLOCK_TIME_MS) == GOS_SUCCESS ? 1 : 0;
 800e78a:	4b32      	ldr	r3, [pc, #200]	@ (800e854 <svl_iplDaemon+0x6c0>)
 800e78c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e78e:	f04f 31ff 	mov.w	r1, #4294967295
 800e792:	4618      	mov	r0, r3
 800e794:	f003 fb32 	bl	8011dfc <gos_taskBlock>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b55      	cmp	r3, #85	@ 0x55
 800e79c:	bf0c      	ite	eq
 800e79e:	2301      	moveq	r3, #1
 800e7a0:	2300      	movne	r3, #0
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4b2c      	ldr	r3, [pc, #176]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e7a8:	70da      	strb	r2, [r3, #3]
										break;
 800e7aa:	e021      	b.n	800e7f0 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_UNBLOCK:
									{
										taskModifyMsg.result = gos_taskUnblock(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e7ac:	4b29      	ldr	r3, [pc, #164]	@ (800e854 <svl_iplDaemon+0x6c0>)
 800e7ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f003 fc35 	bl	8012020 <gos_taskUnblock>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b55      	cmp	r3, #85	@ 0x55
 800e7ba:	bf0c      	ite	eq
 800e7bc:	2301      	moveq	r3, #1
 800e7be:	2300      	movne	r3, #0
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	4b24      	ldr	r3, [pc, #144]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e7c6:	70da      	strb	r2, [r3, #3]
										break;
 800e7c8:	e012      	b.n	800e7f0 <svl_iplDaemon+0x65c>
									}
									case IPL_TASK_MODIFY_WAKEUP:
									{
										taskModifyMsg.result = gos_taskWakeup(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800e7ca:	4b22      	ldr	r3, [pc, #136]	@ (800e854 <svl_iplDaemon+0x6c0>)
 800e7cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f003 f87e 	bl	80118d0 <gos_taskWakeup>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b55      	cmp	r3, #85	@ 0x55
 800e7d8:	bf0c      	ite	eq
 800e7da:	2301      	moveq	r3, #1
 800e7dc:	2300      	movne	r3, #0
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	4b1d      	ldr	r3, [pc, #116]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e7e4:	70da      	strb	r2, [r3, #3]
										break;
 800e7e6:	e003      	b.n	800e7f0 <svl_iplDaemon+0x65c>
									}
									default:
									{
										taskModifyMsg.result = 0;
 800e7e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	70da      	strb	r2, [r3, #3]
										break;
 800e7ee:	bf00      	nop
									}
								}

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	4919      	ldr	r1, [pc, #100]	@ (800e858 <svl_iplDaemon+0x6c4>)
 800e7f4:	f640 20b1 	movw	r0, #2737	@ 0xab1
 800e7f8:	f7ff fc94 	bl	800e124 <svl_iplSendMessage>
								break;
 800e7fc:	e025      	b.n	800e84a <svl_iplDaemon+0x6b6>
							default:
							{
#if SVL_IPL_TRACE_LEVEL == 2
								(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL request received with ID: %u.\r\n", msgHeader.messageId);
#endif
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e7fe:	2300      	movs	r3, #0
 800e800:	75fb      	strb	r3, [r7, #23]
 800e802:	e019      	b.n	800e838 <svl_iplDaemon+0x6a4>
								{
									if (userMsgLut[lutIndex].callback == NULL)
 800e804:	7dfb      	ldrb	r3, [r7, #23]
 800e806:	4a15      	ldr	r2, [pc, #84]	@ (800e85c <svl_iplDaemon+0x6c8>)
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	4413      	add	r3, r2
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d01a      	beq.n	800e848 <svl_iplDaemon+0x6b4>
										// Last registered message found, break loop.
										break;
									}
									else
									{
										if (userMsgLut[lutIndex].msgId == msgHeader.messageId)
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	4a11      	ldr	r2, [pc, #68]	@ (800e85c <svl_iplDaemon+0x6c8>)
 800e816:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d108      	bne.n	800e832 <svl_iplDaemon+0x69e>
										{
											userMsgLut[lutIndex].callback(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc);
 800e820:	7dfb      	ldrb	r3, [r7, #23]
 800e822:	4a0e      	ldr	r2, [pc, #56]	@ (800e85c <svl_iplDaemon+0x6c8>)
 800e824:	00db      	lsls	r3, r3, #3
 800e826:	4413      	add	r3, r2
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	693a      	ldr	r2, [r7, #16]
 800e82e:	480c      	ldr	r0, [pc, #48]	@ (800e860 <svl_iplDaemon+0x6cc>)
 800e830:	4798      	blx	r3
								for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	3301      	adds	r3, #1
 800e836:	75fb      	strb	r3, [r7, #23]
 800e838:	7dfb      	ldrb	r3, [r7, #23]
 800e83a:	2b0f      	cmp	r3, #15
 800e83c:	d9e2      	bls.n	800e804 <svl_iplDaemon+0x670>
					else
					{
						(void_t) gos_taskSleep(10);
					}
				}
				break;
 800e83e:	e004      	b.n	800e84a <svl_iplDaemon+0x6b6>
						(void_t) gos_taskSleep(10);
 800e840:	200a      	movs	r0, #10
 800e842:	f002 ffb3 	bl	80117ac <gos_taskSleep>
				break;
 800e846:	e000      	b.n	800e84a <svl_iplDaemon+0x6b6>
										break;
 800e848:	bf00      	nop
				break;
 800e84a:	bf00      	nop
			}
		}
		(void_t) gos_taskSleep(10);
 800e84c:	200a      	movs	r0, #10
 800e84e:	f002 ffad 	bl	80117ac <gos_taskSleep>
		switch (iplState)
 800e852:	e4a4      	b.n	800e19e <svl_iplDaemon+0xa>
 800e854:	20004b68 	.word	0x20004b68
 800e858:	2000510c 	.word	0x2000510c
 800e85c:	2000511c 	.word	0x2000511c
 800e860:	20003b68 	.word	0x20003b68

0800e864 <svl_pdhInit>:

/*
 * Function: svl_pdhInit
 */
gos_result_t svl_pdhInit (void_t)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 800e86a:	2355      	movs	r3, #85	@ 0x55
 800e86c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&softwareInfoReqMsg));
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	2b55      	cmp	r3, #85	@ 0x55
 800e872:	d105      	bne.n	800e880 <svl_pdhInit+0x1c>
 800e874:	4833      	ldr	r0, [pc, #204]	@ (800e944 <svl_pdhInit+0xe0>)
 800e876:	f006 f8f1 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e87a:	4603      	mov	r3, r0
 800e87c:	71fb      	strb	r3, [r7, #7]
 800e87e:	e001      	b.n	800e884 <svl_pdhInit+0x20>
 800e880:	23ae      	movs	r3, #174	@ 0xae
 800e882:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&hardwareInfoReqMsg));
 800e884:	79fb      	ldrb	r3, [r7, #7]
 800e886:	2b55      	cmp	r3, #85	@ 0x55
 800e888:	d105      	bne.n	800e896 <svl_pdhInit+0x32>
 800e88a:	482f      	ldr	r0, [pc, #188]	@ (800e948 <svl_pdhInit+0xe4>)
 800e88c:	f006 f8e6 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e890:	4603      	mov	r3, r0
 800e892:	71fb      	strb	r3, [r7, #7]
 800e894:	e001      	b.n	800e89a <svl_pdhInit+0x36>
 800e896:	23ae      	movs	r3, #174	@ 0xae
 800e898:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&wifiCfgReqMsg));
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	2b55      	cmp	r3, #85	@ 0x55
 800e89e:	d105      	bne.n	800e8ac <svl_pdhInit+0x48>
 800e8a0:	482a      	ldr	r0, [pc, #168]	@ (800e94c <svl_pdhInit+0xe8>)
 800e8a2:	f006 f8db 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	71fb      	strb	r3, [r7, #7]
 800e8aa:	e001      	b.n	800e8b0 <svl_pdhInit+0x4c>
 800e8ac:	23ae      	movs	r3, #174	@ 0xae
 800e8ae:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&bldCfgReqMsg));
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	2b55      	cmp	r3, #85	@ 0x55
 800e8b4:	d105      	bne.n	800e8c2 <svl_pdhInit+0x5e>
 800e8b6:	4826      	ldr	r0, [pc, #152]	@ (800e950 <svl_pdhInit+0xec>)
 800e8b8:	f006 f8d0 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	71fb      	strb	r3, [r7, #7]
 800e8c0:	e001      	b.n	800e8c6 <svl_pdhInit+0x62>
 800e8c2:	23ae      	movs	r3, #174	@ 0xae
 800e8c4:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&softwareInfoSetMsg));
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	2b55      	cmp	r3, #85	@ 0x55
 800e8ca:	d105      	bne.n	800e8d8 <svl_pdhInit+0x74>
 800e8cc:	4821      	ldr	r0, [pc, #132]	@ (800e954 <svl_pdhInit+0xf0>)
 800e8ce:	f006 f8c5 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	71fb      	strb	r3, [r7, #7]
 800e8d6:	e001      	b.n	800e8dc <svl_pdhInit+0x78>
 800e8d8:	23ae      	movs	r3, #174	@ 0xae
 800e8da:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&hardwareInfoSetMsg));
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	2b55      	cmp	r3, #85	@ 0x55
 800e8e0:	d105      	bne.n	800e8ee <svl_pdhInit+0x8a>
 800e8e2:	481d      	ldr	r0, [pc, #116]	@ (800e958 <svl_pdhInit+0xf4>)
 800e8e4:	f006 f8ba 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	71fb      	strb	r3, [r7, #7]
 800e8ec:	e001      	b.n	800e8f2 <svl_pdhInit+0x8e>
 800e8ee:	23ae      	movs	r3, #174	@ 0xae
 800e8f0:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&wifiCfgSetMsg));
 800e8f2:	79fb      	ldrb	r3, [r7, #7]
 800e8f4:	2b55      	cmp	r3, #85	@ 0x55
 800e8f6:	d105      	bne.n	800e904 <svl_pdhInit+0xa0>
 800e8f8:	4818      	ldr	r0, [pc, #96]	@ (800e95c <svl_pdhInit+0xf8>)
 800e8fa:	f006 f8af 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e8fe:	4603      	mov	r3, r0
 800e900:	71fb      	strb	r3, [r7, #7]
 800e902:	e001      	b.n	800e908 <svl_pdhInit+0xa4>
 800e904:	23ae      	movs	r3, #174	@ 0xae
 800e906:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&bldCfgSetMsg));
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	2b55      	cmp	r3, #85	@ 0x55
 800e90c:	d105      	bne.n	800e91a <svl_pdhInit+0xb6>
 800e90e:	4814      	ldr	r0, [pc, #80]	@ (800e960 <svl_pdhInit+0xfc>)
 800e910:	f006 f8a4 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800e914:	4603      	mov	r3, r0
 800e916:	71fb      	strb	r3, [r7, #7]
 800e918:	e001      	b.n	800e91e <svl_pdhInit+0xba>
 800e91a:	23ae      	movs	r3, #174	@ 0xae
 800e91c:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_mutexInit(&pdhMutex));
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	2b55      	cmp	r3, #85	@ 0x55
 800e922:	d105      	bne.n	800e930 <svl_pdhInit+0xcc>
 800e924:	480f      	ldr	r0, [pc, #60]	@ (800e964 <svl_pdhInit+0x100>)
 800e926:	f005 fa81 	bl	8013e2c <gos_mutexInit>
 800e92a:	4603      	mov	r3, r0
 800e92c:	71fb      	strb	r3, [r7, #7]
 800e92e:	e001      	b.n	800e934 <svl_pdhInit+0xd0>
 800e930:	23ae      	movs	r3, #174	@ 0xae
 800e932:	71fb      	strb	r3, [r7, #7]

	pdhInited = GOS_TRUE;
 800e934:	4b0c      	ldr	r3, [pc, #48]	@ (800e968 <svl_pdhInit+0x104>)
 800e936:	2236      	movs	r2, #54	@ 0x36
 800e938:	701a      	strb	r2, [r3, #0]

	return initResult;
 800e93a:	79fb      	ldrb	r3, [r7, #7]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	20000608 	.word	0x20000608
 800e948:	20000618 	.word	0x20000618
 800e94c:	20000628 	.word	0x20000628
 800e950:	20000638 	.word	0x20000638
 800e954:	20000648 	.word	0x20000648
 800e958:	20000658 	.word	0x20000658
 800e95c:	20000668 	.word	0x20000668
 800e960:	20000678 	.word	0x20000678
 800e964:	200051b0 	.word	0x200051b0
 800e968:	20000606 	.word	0x20000606

0800e96c <svl_pdhConfigure>:

/*
 * Function: svl_pdhConfigure
 */
gos_result_t svl_pdhConfigure (svl_pdhCfg_t* pCfg)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 800e974:	23ae      	movs	r3, #174	@ 0xae
 800e976:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d011      	beq.n	800e9a2 <svl_pdhConfigure+0x36>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00d      	beq.n	800e9a2 <svl_pdhConfigure+0x36>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d009      	beq.n	800e9a2 <svl_pdhConfigure+0x36>
	{
		pdhReadFunction  = pCfg->readFunction;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a07      	ldr	r2, [pc, #28]	@ (800e9b0 <svl_pdhConfigure+0x44>)
 800e994:	6013      	str	r3, [r2, #0]
		pdhWriteFunction = pCfg->writeFunction;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	4a06      	ldr	r2, [pc, #24]	@ (800e9b4 <svl_pdhConfigure+0x48>)
 800e99c:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 800e99e:	2355      	movs	r3, #85	@ 0x55
 800e9a0:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3714      	adds	r7, #20
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	200051a8 	.word	0x200051a8
 800e9b4:	200051ac 	.word	0x200051ac

0800e9b8 <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 800e9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800e9c0:	23ae      	movs	r3, #174	@ 0xae
 800e9c2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d069      	beq.n	800ea9e <svl_pdhGetLibVersion+0xe6>
 800e9ca:	4b38      	ldr	r3, [pc, #224]	@ (800eaac <svl_pdhGetLibVersion+0xf4>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d065      	beq.n	800ea9e <svl_pdhGetLibVersion+0xe6>
	{
		//(void_t) memset((void_t*)pLibVer, 0, sizeof(*pLibVer));

		pLibVer->major             = PDH_LIBVER_VERSION_MAJOR;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	701a      	strb	r2, [r3, #0]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	705a      	strb	r2, [r3, #1]
		pLibVer->minor             = PDH_LIBVER_VERSION_MINOR;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f042 0214 	orr.w	r2, r2, #20
 800e9e4:	709a      	strb	r2, [r3, #2]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	70da      	strb	r2, [r3, #3]
		pLibVer->build             = PDH_LIBVER_VERSION_BUILD;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	711a      	strb	r2, [r3, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years        = PDH_LIBVER_VERSION_DATE_YEAR;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f062 0216 	orn	r2, r2, #22
 800e9fc:	739a      	strb	r2, [r3, #14]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f042 0207 	orr.w	r2, r2, #7
 800ea04:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months       = PDH_LIBVER_VERSION_DATE_MONTH;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2204      	movs	r2, #4
 800ea0a:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days         = PDH_LIBVER_VERSION_DATE_DAY;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f042 0207 	orr.w	r2, r2, #7
 800ea14:	72da      	strb	r2, [r3, #11]
 800ea16:	2200      	movs	r2, #0
 800ea18:	731a      	strb	r2, [r3, #12]
		pLibVer->date.hours        = 0u;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	729a      	strb	r2, [r3, #10]
		pLibVer->date.minutes      = 0u;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	725a      	strb	r2, [r3, #9]
		pLibVer->date.seconds      = 0u;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	721a      	strb	r2, [r3, #8]
		pLibVer->date.milliseconds = 0u;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	719a      	strb	r2, [r3, #6]
 800ea32:	2200      	movs	r2, #0
 800ea34:	71da      	strb	r2, [r3, #7]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	3310      	adds	r3, #16
 800ea3a:	4a1d      	ldr	r2, [pc, #116]	@ (800eab0 <svl_pdhGetLibVersion+0xf8>)
 800ea3c:	461c      	mov	r4, r3
 800ea3e:	4613      	mov	r3, r2
 800ea40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea42:	6020      	str	r0, [r4, #0]
 800ea44:	6061      	str	r1, [r4, #4]
 800ea46:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	3370      	adds	r3, #112	@ 0x70
 800ea4c:	4a19      	ldr	r2, [pc, #100]	@ (800eab4 <svl_pdhGetLibVersion+0xfc>)
 800ea4e:	461d      	mov	r5, r3
 800ea50:	4614      	mov	r4, r2
 800ea52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea54:	6028      	str	r0, [r5, #0]
 800ea56:	6069      	str	r1, [r5, #4]
 800ea58:	60aa      	str	r2, [r5, #8]
 800ea5a:	60eb      	str	r3, [r5, #12]
 800ea5c:	6820      	ldr	r0, [r4, #0]
 800ea5e:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	3340      	adds	r3, #64	@ 0x40
 800ea64:	4a14      	ldr	r2, [pc, #80]	@ (800eab8 <svl_pdhGetLibVersion+0x100>)
 800ea66:	4614      	mov	r4, r2
 800ea68:	469c      	mov	ip, r3
 800ea6a:	f104 0e20 	add.w	lr, r4, #32
 800ea6e:	4665      	mov	r5, ip
 800ea70:	4626      	mov	r6, r4
 800ea72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea74:	6028      	str	r0, [r5, #0]
 800ea76:	6069      	str	r1, [r5, #4]
 800ea78:	60aa      	str	r2, [r5, #8]
 800ea7a:	60eb      	str	r3, [r5, #12]
 800ea7c:	3410      	adds	r4, #16
 800ea7e:	f10c 0c10 	add.w	ip, ip, #16
 800ea82:	4574      	cmp	r4, lr
 800ea84:	d1f3      	bne.n	800ea6e <svl_pdhGetLibVersion+0xb6>
 800ea86:	4662      	mov	r2, ip
 800ea88:	4623      	mov	r3, r4
 800ea8a:	cb03      	ldmia	r3!, {r0, r1}
 800ea8c:	6010      	str	r0, [r2, #0]
 800ea8e:	6051      	str	r1, [r2, #4]
 800ea90:	8819      	ldrh	r1, [r3, #0]
 800ea92:	789b      	ldrb	r3, [r3, #2]
 800ea94:	8111      	strh	r1, [r2, #8]
 800ea96:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 800ea98:	2355      	movs	r3, #85	@ 0x55
 800ea9a:	73fb      	strb	r3, [r7, #15]
 800ea9c:	e001      	b.n	800eaa2 <svl_pdhGetLibVersion+0xea>
	}
	else
	{
		getResult = GOS_ERROR;
 800ea9e:	23ae      	movs	r3, #174	@ 0xae
 800eaa0:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800eaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaac:	200051a8 	.word	0x200051a8
 800eab0:	0801977c 	.word	0x0801977c
 800eab4:	08019788 	.word	0x08019788
 800eab8:	0801979c 	.word	0x0801979c

0800eabc <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800eac4:	23ae      	movs	r3, #174	@ 0xae
 800eac6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d020      	beq.n	800eb10 <svl_pdhGetSwInfo+0x54>
 800eace:	4b14      	ldr	r3, [pc, #80]	@ (800eb20 <svl_pdhGetSwInfo+0x64>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d01c      	beq.n	800eb10 <svl_pdhGetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ead6:	4b13      	ldr	r3, [pc, #76]	@ (800eb24 <svl_pdhGetSwInfo+0x68>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eada:	2b49      	cmp	r3, #73	@ 0x49
 800eadc:	d00b      	beq.n	800eaf6 <svl_pdhGetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eade:	4b11      	ldr	r3, [pc, #68]	@ (800eb24 <svl_pdhGetSwInfo+0x68>)
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	2b36      	cmp	r3, #54	@ 0x36
 800eae4:	d114      	bne.n	800eb10 <svl_pdhGetSwInfo+0x54>
 800eae6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eaea:	480f      	ldr	r0, [pc, #60]	@ (800eb28 <svl_pdhGetSwInfo+0x6c>)
 800eaec:	f005 f9b8 	bl	8013e60 <gos_mutexLock>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b55      	cmp	r3, #85	@ 0x55
 800eaf4:	d10c      	bne.n	800eb10 <svl_pdhGetSwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	@ (800eb20 <svl_pdhGetSwInfo+0x64>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800eafe:	6879      	ldr	r1, [r7, #4]
 800eb00:	2000      	movs	r0, #0
 800eb02:	4798      	blx	r3
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800eb08:	4807      	ldr	r0, [pc, #28]	@ (800eb28 <svl_pdhGetSwInfo+0x6c>)
 800eb0a:	f005 faaf 	bl	801406c <gos_mutexUnlock>
 800eb0e:	e001      	b.n	800eb14 <svl_pdhGetSwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800eb10:	23ae      	movs	r3, #174	@ 0xae
 800eb12:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	200051a8 	.word	0x200051a8
 800eb24:	20000606 	.word	0x20000606
 800eb28:	200051b0 	.word	0x200051b0

0800eb2c <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800eb34:	23ae      	movs	r3, #174	@ 0xae
 800eb36:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d020      	beq.n	800eb80 <svl_pdhGetHwInfo+0x54>
 800eb3e:	4b14      	ldr	r3, [pc, #80]	@ (800eb90 <svl_pdhGetHwInfo+0x64>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d01c      	beq.n	800eb80 <svl_pdhGetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eb46:	4b13      	ldr	r3, [pc, #76]	@ (800eb94 <svl_pdhGetHwInfo+0x68>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eb4a:	2b49      	cmp	r3, #73	@ 0x49
 800eb4c:	d00b      	beq.n	800eb66 <svl_pdhGetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eb4e:	4b11      	ldr	r3, [pc, #68]	@ (800eb94 <svl_pdhGetHwInfo+0x68>)
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	2b36      	cmp	r3, #54	@ 0x36
 800eb54:	d114      	bne.n	800eb80 <svl_pdhGetHwInfo+0x54>
 800eb56:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eb5a:	480f      	ldr	r0, [pc, #60]	@ (800eb98 <svl_pdhGetHwInfo+0x6c>)
 800eb5c:	f005 f980 	bl	8013e60 <gos_mutexLock>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b55      	cmp	r3, #85	@ 0x55
 800eb64:	d10c      	bne.n	800eb80 <svl_pdhGetHwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800eb66:	4b0a      	ldr	r3, [pc, #40]	@ (800eb90 <svl_pdhGetHwInfo+0x64>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	22fa      	movs	r2, #250	@ 0xfa
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800eb72:	4798      	blx	r3
 800eb74:	4603      	mov	r3, r0
 800eb76:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800eb78:	4807      	ldr	r0, [pc, #28]	@ (800eb98 <svl_pdhGetHwInfo+0x6c>)
 800eb7a:	f005 fa77 	bl	801406c <gos_mutexUnlock>
 800eb7e:	e001      	b.n	800eb84 <svl_pdhGetHwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800eb80:	23ae      	movs	r3, #174	@ 0xae
 800eb82:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800eb84:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	200051a8 	.word	0x200051a8
 800eb94:	20000606 	.word	0x20000606
 800eb98:	200051b0 	.word	0x200051b0

0800eb9c <svl_pdhGetBldCfg>:

/*
 * Function: svl_pdhGetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhGetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800eba4:	23ae      	movs	r3, #174	@ 0xae
 800eba6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d020      	beq.n	800ebf0 <svl_pdhGetBldCfg+0x54>
 800ebae:	4b14      	ldr	r3, [pc, #80]	@ (800ec00 <svl_pdhGetBldCfg+0x64>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d01c      	beq.n	800ebf0 <svl_pdhGetBldCfg+0x54>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ebb6:	4b13      	ldr	r3, [pc, #76]	@ (800ec04 <svl_pdhGetBldCfg+0x68>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800ebba:	2b49      	cmp	r3, #73	@ 0x49
 800ebbc:	d00b      	beq.n	800ebd6 <svl_pdhGetBldCfg+0x3a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ebbe:	4b11      	ldr	r3, [pc, #68]	@ (800ec04 <svl_pdhGetBldCfg+0x68>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	2b36      	cmp	r3, #54	@ 0x36
 800ebc4:	d114      	bne.n	800ebf0 <svl_pdhGetBldCfg+0x54>
 800ebc6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ebca:	480f      	ldr	r0, [pc, #60]	@ (800ec08 <svl_pdhGetBldCfg+0x6c>)
 800ebcc:	f005 f948 	bl	8013e60 <gos_mutexLock>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b55      	cmp	r3, #85	@ 0x55
 800ebd4:	d10c      	bne.n	800ebf0 <svl_pdhGetBldCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800ebd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ec00 <svl_pdhGetBldCfg+0x64>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	220e      	movs	r2, #14
 800ebdc:	6879      	ldr	r1, [r7, #4]
 800ebde:	f240 309a 	movw	r0, #922	@ 0x39a
 800ebe2:	4798      	blx	r3
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ebe8:	4807      	ldr	r0, [pc, #28]	@ (800ec08 <svl_pdhGetBldCfg+0x6c>)
 800ebea:	f005 fa3f 	bl	801406c <gos_mutexUnlock>
 800ebee:	e001      	b.n	800ebf4 <svl_pdhGetBldCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800ebf0:	23ae      	movs	r3, #174	@ 0xae
 800ebf2:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	200051a8 	.word	0x200051a8
 800ec04:	20000606 	.word	0x20000606
 800ec08:	200051b0 	.word	0x200051b0

0800ec0c <svl_pdhGetWifiCfg>:

/*
 * Function: svl_pdhGetWifiCfg
 */
gos_result_t svl_pdhGetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800ec14:	23ae      	movs	r3, #174	@ 0xae
 800ec16:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d020      	beq.n	800ec60 <svl_pdhGetWifiCfg+0x54>
 800ec1e:	4b14      	ldr	r3, [pc, #80]	@ (800ec70 <svl_pdhGetWifiCfg+0x64>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d01c      	beq.n	800ec60 <svl_pdhGetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec26:	4b13      	ldr	r3, [pc, #76]	@ (800ec74 <svl_pdhGetWifiCfg+0x68>)
 800ec28:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 800ec2a:	2b49      	cmp	r3, #73	@ 0x49
 800ec2c:	d00b      	beq.n	800ec46 <svl_pdhGetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec2e:	4b11      	ldr	r3, [pc, #68]	@ (800ec74 <svl_pdhGetWifiCfg+0x68>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	2b36      	cmp	r3, #54	@ 0x36
 800ec34:	d114      	bne.n	800ec60 <svl_pdhGetWifiCfg+0x54>
 800ec36:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ec3a:	480f      	ldr	r0, [pc, #60]	@ (800ec78 <svl_pdhGetWifiCfg+0x6c>)
 800ec3c:	f005 f910 	bl	8013e60 <gos_mutexLock>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b55      	cmp	r3, #85	@ 0x55
 800ec44:	d10c      	bne.n	800ec60 <svl_pdhGetWifiCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 800ec46:	4b0a      	ldr	r3, [pc, #40]	@ (800ec70 <svl_pdhGetWifiCfg+0x64>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	226e      	movs	r2, #110	@ 0x6e
 800ec4c:	6879      	ldr	r1, [r7, #4]
 800ec4e:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 800ec52:	4798      	blx	r3
 800ec54:	4603      	mov	r3, r0
 800ec56:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ec58:	4807      	ldr	r0, [pc, #28]	@ (800ec78 <svl_pdhGetWifiCfg+0x6c>)
 800ec5a:	f005 fa07 	bl	801406c <gos_mutexUnlock>
 800ec5e:	e001      	b.n	800ec64 <svl_pdhGetWifiCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 800ec60:	23ae      	movs	r3, #174	@ 0xae
 800ec62:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	200051a8 	.word	0x200051a8
 800ec74:	20000606 	.word	0x20000606
 800ec78:	200051b0 	.word	0x200051b0

0800ec7c <svl_pdhSetSwInfo>:

/*
 * Function: svl_pdhSetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhSetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800ec84:	23ae      	movs	r3, #174	@ 0xae
 800ec86:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d020      	beq.n	800ecd0 <svl_pdhSetSwInfo+0x54>
 800ec8e:	4b14      	ldr	r3, [pc, #80]	@ (800ece0 <svl_pdhSetSwInfo+0x64>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d01c      	beq.n	800ecd0 <svl_pdhSetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec96:	4b13      	ldr	r3, [pc, #76]	@ (800ece4 <svl_pdhSetSwInfo+0x68>)
 800ec98:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ec9a:	2b49      	cmp	r3, #73	@ 0x49
 800ec9c:	d00b      	beq.n	800ecb6 <svl_pdhSetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ec9e:	4b11      	ldr	r3, [pc, #68]	@ (800ece4 <svl_pdhSetSwInfo+0x68>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b36      	cmp	r3, #54	@ 0x36
 800eca4:	d114      	bne.n	800ecd0 <svl_pdhSetSwInfo+0x54>
 800eca6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ecaa:	480f      	ldr	r0, [pc, #60]	@ (800ece8 <svl_pdhSetSwInfo+0x6c>)
 800ecac:	f005 f8d8 	bl	8013e60 <gos_mutexLock>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b55      	cmp	r3, #85	@ 0x55
 800ecb4:	d10c      	bne.n	800ecd0 <svl_pdhSetSwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800ecb6:	4b0a      	ldr	r3, [pc, #40]	@ (800ece0 <svl_pdhSetSwInfo+0x64>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800ecbe:	6879      	ldr	r1, [r7, #4]
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	4798      	blx	r3
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ecc8:	4807      	ldr	r0, [pc, #28]	@ (800ece8 <svl_pdhSetSwInfo+0x6c>)
 800ecca:	f005 f9cf 	bl	801406c <gos_mutexUnlock>
 800ecce:	e001      	b.n	800ecd4 <svl_pdhSetSwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ecd0:	23ae      	movs	r3, #174	@ 0xae
 800ecd2:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	200051ac 	.word	0x200051ac
 800ece4:	20000606 	.word	0x20000606
 800ece8:	200051b0 	.word	0x200051b0

0800ecec <svl_pdhSetHwInfo>:

/*
 * Function: svl_pdhSetHwInfo
 */
gos_result_t svl_pdhSetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800ecf4:	23ae      	movs	r3, #174	@ 0xae
 800ecf6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d020      	beq.n	800ed40 <svl_pdhSetHwInfo+0x54>
 800ecfe:	4b14      	ldr	r3, [pc, #80]	@ (800ed50 <svl_pdhSetHwInfo+0x64>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d01c      	beq.n	800ed40 <svl_pdhSetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ed06:	4b13      	ldr	r3, [pc, #76]	@ (800ed54 <svl_pdhSetHwInfo+0x68>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800ed0a:	2b49      	cmp	r3, #73	@ 0x49
 800ed0c:	d00b      	beq.n	800ed26 <svl_pdhSetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ed0e:	4b11      	ldr	r3, [pc, #68]	@ (800ed54 <svl_pdhSetHwInfo+0x68>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2b36      	cmp	r3, #54	@ 0x36
 800ed14:	d114      	bne.n	800ed40 <svl_pdhSetHwInfo+0x54>
 800ed16:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ed1a:	480f      	ldr	r0, [pc, #60]	@ (800ed58 <svl_pdhSetHwInfo+0x6c>)
 800ed1c:	f005 f8a0 	bl	8013e60 <gos_mutexLock>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b55      	cmp	r3, #85	@ 0x55
 800ed24:	d10c      	bne.n	800ed40 <svl_pdhSetHwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800ed26:	4b0a      	ldr	r3, [pc, #40]	@ (800ed50 <svl_pdhSetHwInfo+0x64>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	22fa      	movs	r2, #250	@ 0xfa
 800ed2c:	6879      	ldr	r1, [r7, #4]
 800ed2e:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800ed32:	4798      	blx	r3
 800ed34:	4603      	mov	r3, r0
 800ed36:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ed38:	4807      	ldr	r0, [pc, #28]	@ (800ed58 <svl_pdhSetHwInfo+0x6c>)
 800ed3a:	f005 f997 	bl	801406c <gos_mutexUnlock>
 800ed3e:	e001      	b.n	800ed44 <svl_pdhSetHwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ed40:	23ae      	movs	r3, #174	@ 0xae
 800ed42:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	200051ac 	.word	0x200051ac
 800ed54:	20000606 	.word	0x20000606
 800ed58:	200051b0 	.word	0x200051b0

0800ed5c <svl_pdhSetBldCfg>:

/*
 * Function: svl_pdhSetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhSetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800ed64:	23ae      	movs	r3, #174	@ 0xae
 800ed66:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d020      	beq.n	800edb0 <svl_pdhSetBldCfg+0x54>
 800ed6e:	4b14      	ldr	r3, [pc, #80]	@ (800edc0 <svl_pdhSetBldCfg+0x64>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d01c      	beq.n	800edb0 <svl_pdhSetBldCfg+0x54>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ed76:	4b13      	ldr	r3, [pc, #76]	@ (800edc4 <svl_pdhSetBldCfg+0x68>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800ed7a:	2b49      	cmp	r3, #73	@ 0x49
 800ed7c:	d00b      	beq.n	800ed96 <svl_pdhSetBldCfg+0x3a>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ed7e:	4b11      	ldr	r3, [pc, #68]	@ (800edc4 <svl_pdhSetBldCfg+0x68>)
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	2b36      	cmp	r3, #54	@ 0x36
 800ed84:	d114      	bne.n	800edb0 <svl_pdhSetBldCfg+0x54>
 800ed86:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ed8a:	480f      	ldr	r0, [pc, #60]	@ (800edc8 <svl_pdhSetBldCfg+0x6c>)
 800ed8c:	f005 f868 	bl	8013e60 <gos_mutexLock>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b55      	cmp	r3, #85	@ 0x55
 800ed94:	d10c      	bne.n	800edb0 <svl_pdhSetBldCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800ed96:	4b0a      	ldr	r3, [pc, #40]	@ (800edc0 <svl_pdhSetBldCfg+0x64>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	220e      	movs	r2, #14
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	f240 309a 	movw	r0, #922	@ 0x39a
 800eda2:	4798      	blx	r3
 800eda4:	4603      	mov	r3, r0
 800eda6:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800eda8:	4807      	ldr	r0, [pc, #28]	@ (800edc8 <svl_pdhSetBldCfg+0x6c>)
 800edaa:	f005 f95f 	bl	801406c <gos_mutexUnlock>
 800edae:	e001      	b.n	800edb4 <svl_pdhSetBldCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800edb0:	23ae      	movs	r3, #174	@ 0xae
 800edb2:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	200051ac 	.word	0x200051ac
 800edc4:	20000606 	.word	0x20000606
 800edc8:	200051b0 	.word	0x200051b0

0800edcc <svl_pdhSetWifiCfg>:

/*
 * Function: svl_pdhSetWifiCfg
 */
gos_result_t svl_pdhSetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800edd4:	23ae      	movs	r3, #174	@ 0xae
 800edd6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d020      	beq.n	800ee20 <svl_pdhSetWifiCfg+0x54>
 800edde:	4b14      	ldr	r3, [pc, #80]	@ (800ee30 <svl_pdhSetWifiCfg+0x64>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d01c      	beq.n	800ee20 <svl_pdhSetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ede6:	4b13      	ldr	r3, [pc, #76]	@ (800ee34 <svl_pdhSetWifiCfg+0x68>)
 800ede8:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 800edea:	2b49      	cmp	r3, #73	@ 0x49
 800edec:	d00b      	beq.n	800ee06 <svl_pdhSetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800edee:	4b11      	ldr	r3, [pc, #68]	@ (800ee34 <svl_pdhSetWifiCfg+0x68>)
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	2b36      	cmp	r3, #54	@ 0x36
 800edf4:	d114      	bne.n	800ee20 <svl_pdhSetWifiCfg+0x54>
 800edf6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800edfa:	480f      	ldr	r0, [pc, #60]	@ (800ee38 <svl_pdhSetWifiCfg+0x6c>)
 800edfc:	f005 f830 	bl	8013e60 <gos_mutexLock>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b55      	cmp	r3, #85	@ 0x55
 800ee04:	d10c      	bne.n	800ee20 <svl_pdhSetWifiCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 800ee06:	4b0a      	ldr	r3, [pc, #40]	@ (800ee30 <svl_pdhSetWifiCfg+0x64>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	226e      	movs	r2, #110	@ 0x6e
 800ee0c:	6879      	ldr	r1, [r7, #4]
 800ee0e:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 800ee12:	4798      	blx	r3
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ee18:	4807      	ldr	r0, [pc, #28]	@ (800ee38 <svl_pdhSetWifiCfg+0x6c>)
 800ee1a:	f005 f927 	bl	801406c <gos_mutexUnlock>
 800ee1e:	e001      	b.n	800ee24 <svl_pdhSetWifiCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 800ee20:	23ae      	movs	r3, #174	@ 0xae
 800ee22:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800ee24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	200051ac 	.word	0x200051ac
 800ee34:	20000606 	.word	0x20000606
 800ee38:	200051b0 	.word	0x200051b0

0800ee3c <svl_pdhSoftwareInfoReqMsgReceived>:
 * @details Sends out the software info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhSoftwareInfoReqMsgReceived (void_t)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af02      	add	r7, sp, #8
 800ee42:	4b1c      	ldr	r3, [pc, #112]	@ (800eeb4 <svl_pdhSoftwareInfoReqMsgReceived+0x78>)
 800ee44:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800ee46:	23ae      	movs	r3, #174	@ 0xae
 800ee48:	70fb      	strb	r3, [r7, #3]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d020      	beq.n	800ee92 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
 800ee50:	4b19      	ldr	r3, [pc, #100]	@ (800eeb8 <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d01c      	beq.n	800ee92 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ee58:	4b18      	ldr	r3, [pc, #96]	@ (800eebc <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800ee5c:	2b49      	cmp	r3, #73	@ 0x49
 800ee5e:	d00b      	beq.n	800ee78 <svl_pdhSoftwareInfoReqMsgReceived+0x3c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ee60:	4b16      	ldr	r3, [pc, #88]	@ (800eebc <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	2b36      	cmp	r3, #54	@ 0x36
 800ee66:	d114      	bne.n	800ee92 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
 800ee68:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ee6c:	4814      	ldr	r0, [pc, #80]	@ (800eec0 <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 800ee6e:	f004 fff7 	bl	8013e60 <gos_mutexLock>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b55      	cmp	r3, #85	@ 0x55
 800ee76:	d10c      	bne.n	800ee92 <svl_pdhSoftwareInfoReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800ee78:	4b0f      	ldr	r3, [pc, #60]	@ (800eeb8 <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	2000      	movs	r0, #0
 800ee84:	4798      	blx	r3
 800ee86:	4603      	mov	r3, r0
 800ee88:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ee8a:	480d      	ldr	r0, [pc, #52]	@ (800eec0 <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 800ee8c:	f005 f8ee 	bl	801406c <gos_mutexUnlock>
 800ee90:	e001      	b.n	800ee96 <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 800ee92:	23ae      	movs	r3, #174	@ 0xae
 800ee94:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800ee96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ee9a:	9300      	str	r3, [sp, #0]
 800ee9c:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800eea0:	4a04      	ldr	r2, [pc, #16]	@ (800eeb4 <svl_pdhSoftwareInfoReqMsgReceived+0x78>)
 800eea2:	f642 2101 	movw	r1, #10753	@ 0x2a01
 800eea6:	2000      	movs	r0, #0
 800eea8:	f004 faa0 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_GET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	200055b4 	.word	0x200055b4
 800eeb8:	200051a8 	.word	0x200051a8
 800eebc:	20000606 	.word	0x20000606
 800eec0:	200051b0 	.word	0x200051b0

0800eec4 <svl_pdhHardwareInfoReqMsgReceived>:
 * @details Sends out the hardware info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhHardwareInfoReqMsgReceived (void_t)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af02      	add	r7, sp, #8
 800eeca:	4b1c      	ldr	r3, [pc, #112]	@ (800ef3c <svl_pdhHardwareInfoReqMsgReceived+0x78>)
 800eecc:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800eece:	23ae      	movs	r3, #174	@ 0xae
 800eed0:	70fb      	strb	r3, [r7, #3]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d020      	beq.n	800ef1a <svl_pdhHardwareInfoReqMsgReceived+0x56>
 800eed8:	4b19      	ldr	r3, [pc, #100]	@ (800ef40 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d01c      	beq.n	800ef1a <svl_pdhHardwareInfoReqMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eee0:	4b18      	ldr	r3, [pc, #96]	@ (800ef44 <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800eee4:	2b49      	cmp	r3, #73	@ 0x49
 800eee6:	d00b      	beq.n	800ef00 <svl_pdhHardwareInfoReqMsgReceived+0x3c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800eee8:	4b16      	ldr	r3, [pc, #88]	@ (800ef44 <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b36      	cmp	r3, #54	@ 0x36
 800eeee:	d114      	bne.n	800ef1a <svl_pdhHardwareInfoReqMsgReceived+0x56>
 800eef0:	f241 3188 	movw	r1, #5000	@ 0x1388
 800eef4:	4814      	ldr	r0, [pc, #80]	@ (800ef48 <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 800eef6:	f004 ffb3 	bl	8013e60 <gos_mutexLock>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b55      	cmp	r3, #85	@ 0x55
 800eefe:	d10c      	bne.n	800ef1a <svl_pdhHardwareInfoReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800ef00:	4b0f      	ldr	r3, [pc, #60]	@ (800ef40 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	22fa      	movs	r2, #250	@ 0xfa
 800ef06:	6879      	ldr	r1, [r7, #4]
 800ef08:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800ef0c:	4798      	blx	r3
 800ef0e:	4603      	mov	r3, r0
 800ef10:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800ef12:	480d      	ldr	r0, [pc, #52]	@ (800ef48 <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 800ef14:	f005 f8aa 	bl	801406c <gos_mutexUnlock>
 800ef18:	e001      	b.n	800ef1e <svl_pdhHardwareInfoReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 800ef1a:	23ae      	movs	r3, #174	@ 0xae
 800ef1c:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800ef1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	23fa      	movs	r3, #250	@ 0xfa
 800ef26:	4a05      	ldr	r2, [pc, #20]	@ (800ef3c <svl_pdhHardwareInfoReqMsgReceived+0x78>)
 800ef28:	f642 2102 	movw	r1, #10754	@ 0x2a02
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	f004 fa5d 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_GET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 800ef32:	bf00      	nop
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	20005854 	.word	0x20005854
 800ef40:	200051a8 	.word	0x200051a8
 800ef44:	20000606 	.word	0x20000606
 800ef48:	200051b0 	.word	0x200051b0

0800ef4c <svl_pdhWifiCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgReqMsgReceived (void_t)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 800ef52:	4808      	ldr	r0, [pc, #32]	@ (800ef74 <svl_pdhWifiCfgReqMsgReceived+0x28>)
 800ef54:	f7ff fe5a 	bl	800ec0c <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 800ef58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	236e      	movs	r3, #110	@ 0x6e
 800ef60:	4a04      	ldr	r2, [pc, #16]	@ (800ef74 <svl_pdhWifiCfgReqMsgReceived+0x28>)
 800ef62:	f642 2103 	movw	r1, #10755	@ 0x2a03
 800ef66:	2000      	movs	r0, #0
 800ef68:	f004 fa40 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_GET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 800ef6c:	bf00      	nop
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20005950 	.word	0x20005950

0800ef78 <svl_pdhBldCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgReqMsgReceived (void_t)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	4b1c      	ldr	r3, [pc, #112]	@ (800eff0 <svl_pdhBldCfgReqMsgReceived+0x78>)
 800ef80:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800ef82:	23ae      	movs	r3, #174	@ 0xae
 800ef84:	70fb      	strb	r3, [r7, #3]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d020      	beq.n	800efce <svl_pdhBldCfgReqMsgReceived+0x56>
 800ef8c:	4b19      	ldr	r3, [pc, #100]	@ (800eff4 <svl_pdhBldCfgReqMsgReceived+0x7c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d01c      	beq.n	800efce <svl_pdhBldCfgReqMsgReceived+0x56>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ef94:	4b18      	ldr	r3, [pc, #96]	@ (800eff8 <svl_pdhBldCfgReqMsgReceived+0x80>)
 800ef96:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800ef98:	2b49      	cmp	r3, #73	@ 0x49
 800ef9a:	d00b      	beq.n	800efb4 <svl_pdhBldCfgReqMsgReceived+0x3c>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800ef9c:	4b16      	ldr	r3, [pc, #88]	@ (800eff8 <svl_pdhBldCfgReqMsgReceived+0x80>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b36      	cmp	r3, #54	@ 0x36
 800efa2:	d114      	bne.n	800efce <svl_pdhBldCfgReqMsgReceived+0x56>
 800efa4:	f241 3188 	movw	r1, #5000	@ 0x1388
 800efa8:	4814      	ldr	r0, [pc, #80]	@ (800effc <svl_pdhBldCfgReqMsgReceived+0x84>)
 800efaa:	f004 ff59 	bl	8013e60 <gos_mutexLock>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b55      	cmp	r3, #85	@ 0x55
 800efb2:	d10c      	bne.n	800efce <svl_pdhBldCfgReqMsgReceived+0x56>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800efb4:	4b0f      	ldr	r3, [pc, #60]	@ (800eff4 <svl_pdhBldCfgReqMsgReceived+0x7c>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	220e      	movs	r2, #14
 800efba:	6879      	ldr	r1, [r7, #4]
 800efbc:	f240 309a 	movw	r0, #922	@ 0x39a
 800efc0:	4798      	blx	r3
 800efc2:	4603      	mov	r3, r0
 800efc4:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800efc6:	480d      	ldr	r0, [pc, #52]	@ (800effc <svl_pdhBldCfgReqMsgReceived+0x84>)
 800efc8:	f005 f850 	bl	801406c <gos_mutexUnlock>
 800efcc:	e001      	b.n	800efd2 <svl_pdhBldCfgReqMsgReceived+0x5a>
		getResult = GOS_ERROR;
 800efce:	23ae      	movs	r3, #174	@ 0xae
 800efd0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 800efd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	230e      	movs	r3, #14
 800efda:	4a05      	ldr	r2, [pc, #20]	@ (800eff0 <svl_pdhBldCfgReqMsgReceived+0x78>)
 800efdc:	f642 2104 	movw	r1, #10756	@ 0x2a04
 800efe0:	2000      	movs	r0, #0
 800efe2:	f004 fa03 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_GET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 800efe6:	bf00      	nop
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	200059c0 	.word	0x200059c0
 800eff4:	200051a8 	.word	0x200051a8
 800eff8:	20000606 	.word	0x20000606
 800effc:	200051b0 	.word	0x200051b0

0800f000 <svl_pdhSoftwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhSoftwareInfoSetMsgReceived (void_t)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&swInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhSwInfo_t));
 800f006:	4a36      	ldr	r2, [pc, #216]	@ (800f0e0 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800f008:	4b36      	ldr	r3, [pc, #216]	@ (800f0e4 <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 800f00a:	4610      	mov	r0, r2
 800f00c:	4619      	mov	r1, r3
 800f00e:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800f012:	461a      	mov	r2, r3
 800f014:	f008 f8c9 	bl	80171aa <memcpy>
 800f018:	4b31      	ldr	r3, [pc, #196]	@ (800f0e0 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800f01a:	607b      	str	r3, [r7, #4]
	gos_result_t setResult = GOS_ERROR;
 800f01c:	23ae      	movs	r3, #174	@ 0xae
 800f01e:	70fb      	strb	r3, [r7, #3]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d020      	beq.n	800f068 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
 800f026:	4b30      	ldr	r3, [pc, #192]	@ (800f0e8 <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d01c      	beq.n	800f068 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f02e:	4b2f      	ldr	r3, [pc, #188]	@ (800f0ec <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f030:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 800f032:	2b49      	cmp	r3, #73	@ 0x49
 800f034:	d00b      	beq.n	800f04e <svl_pdhSoftwareInfoSetMsgReceived+0x4e>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f036:	4b2d      	ldr	r3, [pc, #180]	@ (800f0ec <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	2b36      	cmp	r3, #54	@ 0x36
 800f03c:	d114      	bne.n	800f068 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
 800f03e:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f042:	482b      	ldr	r0, [pc, #172]	@ (800f0f0 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f044:	f004 ff0c 	bl	8013e60 <gos_mutexLock>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b55      	cmp	r3, #85	@ 0x55
 800f04c:	d10c      	bne.n	800f068 <svl_pdhSoftwareInfoSetMsgReceived+0x68>
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800f04e:	4b26      	ldr	r3, [pc, #152]	@ (800f0e8 <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	2000      	movs	r0, #0
 800f05a:	4798      	blx	r3
 800f05c:	4603      	mov	r3, r0
 800f05e:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f060:	4823      	ldr	r0, [pc, #140]	@ (800f0f0 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f062:	f005 f803 	bl	801406c <gos_mutexUnlock>
 800f066:	e001      	b.n	800f06c <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
		setResult = GOS_ERROR;
 800f068:	23ae      	movs	r3, #174	@ 0xae
 800f06a:	70fb      	strb	r3, [r7, #3]
 800f06c:	4b1c      	ldr	r3, [pc, #112]	@ (800f0e0 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800f06e:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 800f070:	23ae      	movs	r3, #174	@ 0xae
 800f072:	72fb      	strb	r3, [r7, #11]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d020      	beq.n	800f0bc <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
 800f07a:	4b1e      	ldr	r3, [pc, #120]	@ (800f0f4 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d01c      	beq.n	800f0bc <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f082:	4b1a      	ldr	r3, [pc, #104]	@ (800f0ec <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f084:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f086:	2b49      	cmp	r3, #73	@ 0x49
 800f088:	d00b      	beq.n	800f0a2 <svl_pdhSoftwareInfoSetMsgReceived+0xa2>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f08a:	4b18      	ldr	r3, [pc, #96]	@ (800f0ec <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b36      	cmp	r3, #54	@ 0x36
 800f090:	d114      	bne.n	800f0bc <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
 800f092:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f096:	4816      	ldr	r0, [pc, #88]	@ (800f0f0 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f098:	f004 fee2 	bl	8013e60 <gos_mutexLock>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b55      	cmp	r3, #85	@ 0x55
 800f0a0:	d10c      	bne.n	800f0bc <svl_pdhSoftwareInfoSetMsgReceived+0xbc>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800f0a2:	4b14      	ldr	r3, [pc, #80]	@ (800f0f4 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 800f0aa:	68f9      	ldr	r1, [r7, #12]
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	4798      	blx	r3
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f0b4:	480e      	ldr	r0, [pc, #56]	@ (800f0f0 <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 800f0b6:	f004 ffd9 	bl	801406c <gos_mutexUnlock>
 800f0ba:	e001      	b.n	800f0c0 <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
		getResult = GOS_ERROR;
 800f0bc:	23ae      	movs	r3, #174	@ 0xae
 800f0be:	72fb      	strb	r3, [r7, #11]

	(void_t) svl_pdhSetSwInfo(&swInfoMsg);
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800f0c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 800f0ca:	4a05      	ldr	r2, [pc, #20]	@ (800f0e0 <svl_pdhSoftwareInfoSetMsgReceived+0xe0>)
 800f0cc:	f642 2105 	movw	r1, #10757	@ 0x2a05
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	f004 f98b 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_SET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	200055b4 	.word	0x200055b4
 800f0e4:	200051b4 	.word	0x200051b4
 800f0e8:	200051ac 	.word	0x200051ac
 800f0ec:	20000606 	.word	0x20000606
 800f0f0:	200051b0 	.word	0x200051b0
 800f0f4:	200051a8 	.word	0x200051a8

0800f0f8 <svl_pdhHardwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhHardwareInfoSetMsgReceived (void_t)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&hwInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhHwInfo_t));
 800f0fe:	4a21      	ldr	r2, [pc, #132]	@ (800f184 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f100:	4b21      	ldr	r3, [pc, #132]	@ (800f188 <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 800f102:	4610      	mov	r0, r2
 800f104:	4619      	mov	r1, r3
 800f106:	23fa      	movs	r3, #250	@ 0xfa
 800f108:	461a      	mov	r2, r3
 800f10a:	f008 f84e 	bl	80171aa <memcpy>

	(void_t) svl_pdhSetHwInfo(&hwInfoMsg);
 800f10e:	481d      	ldr	r0, [pc, #116]	@ (800f184 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f110:	f7ff fdec 	bl	800ecec <svl_pdhSetHwInfo>
 800f114:	4b1b      	ldr	r3, [pc, #108]	@ (800f184 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f116:	607b      	str	r3, [r7, #4]
	gos_result_t getResult = GOS_ERROR;
 800f118:	23ae      	movs	r3, #174	@ 0xae
 800f11a:	70fb      	strb	r3, [r7, #3]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d020      	beq.n	800f164 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
 800f122:	4b1a      	ldr	r3, [pc, #104]	@ (800f18c <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d01c      	beq.n	800f164 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f12a:	4b19      	ldr	r3, [pc, #100]	@ (800f190 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 800f12c:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 800f12e:	2b49      	cmp	r3, #73	@ 0x49
 800f130:	d00b      	beq.n	800f14a <svl_pdhHardwareInfoSetMsgReceived+0x52>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f132:	4b17      	ldr	r3, [pc, #92]	@ (800f190 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b36      	cmp	r3, #54	@ 0x36
 800f138:	d114      	bne.n	800f164 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
 800f13a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f13e:	4815      	ldr	r0, [pc, #84]	@ (800f194 <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 800f140:	f004 fe8e 	bl	8013e60 <gos_mutexLock>
 800f144:	4603      	mov	r3, r0
 800f146:	2b55      	cmp	r3, #85	@ 0x55
 800f148:	d10c      	bne.n	800f164 <svl_pdhHardwareInfoSetMsgReceived+0x6c>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800f14a:	4b10      	ldr	r3, [pc, #64]	@ (800f18c <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	22fa      	movs	r2, #250	@ 0xfa
 800f150:	6879      	ldr	r1, [r7, #4]
 800f152:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800f156:	4798      	blx	r3
 800f158:	4603      	mov	r3, r0
 800f15a:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f15c:	480d      	ldr	r0, [pc, #52]	@ (800f194 <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 800f15e:	f004 ff85 	bl	801406c <gos_mutexUnlock>
 800f162:	e001      	b.n	800f168 <svl_pdhHardwareInfoSetMsgReceived+0x70>
		getResult = GOS_ERROR;
 800f164:	23ae      	movs	r3, #174	@ 0xae
 800f166:	70fb      	strb	r3, [r7, #3]
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 800f168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	23fa      	movs	r3, #250	@ 0xfa
 800f170:	4a04      	ldr	r2, [pc, #16]	@ (800f184 <svl_pdhHardwareInfoSetMsgReceived+0x8c>)
 800f172:	f642 2106 	movw	r1, #10758	@ 0x2a06
 800f176:	2000      	movs	r0, #0
 800f178:	f004 f938 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_SET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 800f17c:	bf00      	nop
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20005854 	.word	0x20005854
 800f188:	200051b4 	.word	0x200051b4
 800f18c:	200051a8 	.word	0x200051a8
 800f190:	20000606 	.word	0x20000606
 800f194:	200051b0 	.word	0x200051b0

0800f198 <svl_pdhWifiCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgSetMsgReceived (void_t)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&wifiCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhWifiCfg_t));
 800f19e:	4a0d      	ldr	r2, [pc, #52]	@ (800f1d4 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f1a0:	4b0d      	ldr	r3, [pc, #52]	@ (800f1d8 <svl_pdhWifiCfgSetMsgReceived+0x40>)
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	236e      	movs	r3, #110	@ 0x6e
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	f007 fffe 	bl	80171aa <memcpy>

	(void_t) svl_pdhSetWifiCfg(&wifiCfgMsg);
 800f1ae:	4809      	ldr	r0, [pc, #36]	@ (800f1d4 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f1b0:	f7ff fe0c 	bl	800edcc <svl_pdhSetWifiCfg>
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 800f1b4:	4807      	ldr	r0, [pc, #28]	@ (800f1d4 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f1b6:	f7ff fd29 	bl	800ec0c <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 800f1ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	236e      	movs	r3, #110	@ 0x6e
 800f1c2:	4a04      	ldr	r2, [pc, #16]	@ (800f1d4 <svl_pdhWifiCfgSetMsgReceived+0x3c>)
 800f1c4:	f642 2107 	movw	r1, #10759	@ 0x2a07
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	f004 f90f 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_SET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 800f1ce:	bf00      	nop
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20005950 	.word	0x20005950
 800f1d8:	200051b4 	.word	0x200051b4

0800f1dc <svl_pdhBldCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgSetMsgReceived (void_t)
{
 800f1dc:	b590      	push	{r4, r7, lr}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af02      	add	r7, sp, #8
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&bldCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhBldCfg_t));
 800f1e2:	4a34      	ldr	r2, [pc, #208]	@ (800f2b4 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f1e4:	4b34      	ldr	r3, [pc, #208]	@ (800f2b8 <svl_pdhBldCfgSetMsgReceived+0xdc>)
 800f1e6:	4614      	mov	r4, r2
 800f1e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1ea:	c407      	stmia	r4!, {r0, r1, r2}
 800f1ec:	8023      	strh	r3, [r4, #0]
 800f1ee:	4b31      	ldr	r3, [pc, #196]	@ (800f2b4 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f1f0:	607b      	str	r3, [r7, #4]
	gos_result_t setResult = GOS_ERROR;
 800f1f2:	23ae      	movs	r3, #174	@ 0xae
 800f1f4:	70fb      	strb	r3, [r7, #3]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d020      	beq.n	800f23e <svl_pdhBldCfgSetMsgReceived+0x62>
 800f1fc:	4b2f      	ldr	r3, [pc, #188]	@ (800f2bc <svl_pdhBldCfgSetMsgReceived+0xe0>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d01c      	beq.n	800f23e <svl_pdhBldCfgSetMsgReceived+0x62>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f204:	4b2e      	ldr	r3, [pc, #184]	@ (800f2c0 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f206:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 800f208:	2b49      	cmp	r3, #73	@ 0x49
 800f20a:	d00b      	beq.n	800f224 <svl_pdhBldCfgSetMsgReceived+0x48>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f20c:	4b2c      	ldr	r3, [pc, #176]	@ (800f2c0 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b36      	cmp	r3, #54	@ 0x36
 800f212:	d114      	bne.n	800f23e <svl_pdhBldCfgSetMsgReceived+0x62>
 800f214:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f218:	482a      	ldr	r0, [pc, #168]	@ (800f2c4 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f21a:	f004 fe21 	bl	8013e60 <gos_mutexLock>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b55      	cmp	r3, #85	@ 0x55
 800f222:	d10c      	bne.n	800f23e <svl_pdhBldCfgSetMsgReceived+0x62>
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800f224:	4b25      	ldr	r3, [pc, #148]	@ (800f2bc <svl_pdhBldCfgSetMsgReceived+0xe0>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	220e      	movs	r2, #14
 800f22a:	6879      	ldr	r1, [r7, #4]
 800f22c:	f240 309a 	movw	r0, #922	@ 0x39a
 800f230:	4798      	blx	r3
 800f232:	4603      	mov	r3, r0
 800f234:	70fb      	strb	r3, [r7, #3]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f236:	4823      	ldr	r0, [pc, #140]	@ (800f2c4 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f238:	f004 ff18 	bl	801406c <gos_mutexUnlock>
 800f23c:	e001      	b.n	800f242 <svl_pdhBldCfgSetMsgReceived+0x66>
		setResult = GOS_ERROR;
 800f23e:	23ae      	movs	r3, #174	@ 0xae
 800f240:	70fb      	strb	r3, [r7, #3]
 800f242:	4b1c      	ldr	r3, [pc, #112]	@ (800f2b4 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f244:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 800f246:	23ae      	movs	r3, #174	@ 0xae
 800f248:	72fb      	strb	r3, [r7, #11]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d020      	beq.n	800f292 <svl_pdhBldCfgSetMsgReceived+0xb6>
 800f250:	4b1d      	ldr	r3, [pc, #116]	@ (800f2c8 <svl_pdhBldCfgSetMsgReceived+0xec>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01c      	beq.n	800f292 <svl_pdhBldCfgSetMsgReceived+0xb6>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f258:	4b19      	ldr	r3, [pc, #100]	@ (800f2c0 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 800f25c:	2b49      	cmp	r3, #73	@ 0x49
 800f25e:	d00b      	beq.n	800f278 <svl_pdhBldCfgSetMsgReceived+0x9c>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800f260:	4b17      	ldr	r3, [pc, #92]	@ (800f2c0 <svl_pdhBldCfgSetMsgReceived+0xe4>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b36      	cmp	r3, #54	@ 0x36
 800f266:	d114      	bne.n	800f292 <svl_pdhBldCfgSetMsgReceived+0xb6>
 800f268:	f241 3188 	movw	r1, #5000	@ 0x1388
 800f26c:	4815      	ldr	r0, [pc, #84]	@ (800f2c4 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f26e:	f004 fdf7 	bl	8013e60 <gos_mutexLock>
 800f272:	4603      	mov	r3, r0
 800f274:	2b55      	cmp	r3, #85	@ 0x55
 800f276:	d10c      	bne.n	800f292 <svl_pdhBldCfgSetMsgReceived+0xb6>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 800f278:	4b13      	ldr	r3, [pc, #76]	@ (800f2c8 <svl_pdhBldCfgSetMsgReceived+0xec>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	220e      	movs	r2, #14
 800f27e:	68f9      	ldr	r1, [r7, #12]
 800f280:	f240 309a 	movw	r0, #922	@ 0x39a
 800f284:	4798      	blx	r3
 800f286:	4603      	mov	r3, r0
 800f288:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 800f28a:	480e      	ldr	r0, [pc, #56]	@ (800f2c4 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 800f28c:	f004 feee 	bl	801406c <gos_mutexUnlock>
 800f290:	e001      	b.n	800f296 <svl_pdhBldCfgSetMsgReceived+0xba>
		getResult = GOS_ERROR;
 800f292:	23ae      	movs	r3, #174	@ 0xae
 800f294:	72fb      	strb	r3, [r7, #11]

	(void_t) svl_pdhSetBldCfg(&bldCfgMsg);
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 800f296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	230e      	movs	r3, #14
 800f29e:	4a05      	ldr	r2, [pc, #20]	@ (800f2b4 <svl_pdhBldCfgSetMsgReceived+0xd8>)
 800f2a0:	f642 2108 	movw	r1, #10760	@ 0x2a08
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f004 f8a1 	bl	80133ec <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_SET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 800f2aa:	bf00      	nop
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd90      	pop	{r4, r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	200059c0 	.word	0x200059c0
 800f2b8:	200051b4 	.word	0x200051b4
 800f2bc:	200051ac 	.word	0x200051ac
 800f2c0:	20000606 	.word	0x20000606
 800f2c4:	200051b0 	.word	0x200051b0
 800f2c8:	200051a8 	.word	0x200051a8

0800f2cc <svl_sdhInit>:

/*
 * Function: svl_sdhInit
 */
gos_result_t svl_sdhInit (void_t)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800f2d2:	2355      	movs	r3, #85	@ 0x55
 800f2d4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Register sysmon callbacks.
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryNumReqMsg));
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	2b55      	cmp	r3, #85	@ 0x55
 800f2da:	d105      	bne.n	800f2e8 <svl_sdhInit+0x1c>
 800f2dc:	4853      	ldr	r0, [pc, #332]	@ (800f42c <svl_sdhInit+0x160>)
 800f2de:	f005 fbbd 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	71fb      	strb	r3, [r7, #7]
 800f2e6:	e001      	b.n	800f2ec <svl_sdhInit+0x20>
 800f2e8:	23ae      	movs	r3, #174	@ 0xae
 800f2ea:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryInfoReqMsg));
 800f2ec:	79fb      	ldrb	r3, [r7, #7]
 800f2ee:	2b55      	cmp	r3, #85	@ 0x55
 800f2f0:	d105      	bne.n	800f2fe <svl_sdhInit+0x32>
 800f2f2:	484f      	ldr	r0, [pc, #316]	@ (800f430 <svl_sdhInit+0x164>)
 800f2f4:	f005 fbb2 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	71fb      	strb	r3, [r7, #7]
 800f2fc:	e001      	b.n	800f302 <svl_sdhInit+0x36>
 800f2fe:	23ae      	movs	r3, #174	@ 0xae
 800f300:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonDownloadReqMsg));
 800f302:	79fb      	ldrb	r3, [r7, #7]
 800f304:	2b55      	cmp	r3, #85	@ 0x55
 800f306:	d105      	bne.n	800f314 <svl_sdhInit+0x48>
 800f308:	484a      	ldr	r0, [pc, #296]	@ (800f434 <svl_sdhInit+0x168>)
 800f30a:	f005 fba7 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800f30e:	4603      	mov	r3, r0
 800f310:	71fb      	strb	r3, [r7, #7]
 800f312:	e001      	b.n	800f318 <svl_sdhInit+0x4c>
 800f314:	23ae      	movs	r3, #174	@ 0xae
 800f316:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryChunkReqMsg));
 800f318:	79fb      	ldrb	r3, [r7, #7]
 800f31a:	2b55      	cmp	r3, #85	@ 0x55
 800f31c:	d105      	bne.n	800f32a <svl_sdhInit+0x5e>
 800f31e:	4846      	ldr	r0, [pc, #280]	@ (800f438 <svl_sdhInit+0x16c>)
 800f320:	f005 fb9c 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800f324:	4603      	mov	r3, r0
 800f326:	71fb      	strb	r3, [r7, #7]
 800f328:	e001      	b.n	800f32e <svl_sdhInit+0x62>
 800f32a:	23ae      	movs	r3, #174	@ 0xae
 800f32c:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonSoftwareInstallReqMsg));
 800f32e:	79fb      	ldrb	r3, [r7, #7]
 800f330:	2b55      	cmp	r3, #85	@ 0x55
 800f332:	d105      	bne.n	800f340 <svl_sdhInit+0x74>
 800f334:	4841      	ldr	r0, [pc, #260]	@ (800f43c <svl_sdhInit+0x170>)
 800f336:	f005 fb91 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800f33a:	4603      	mov	r3, r0
 800f33c:	71fb      	strb	r3, [r7, #7]
 800f33e:	e001      	b.n	800f344 <svl_sdhInit+0x78>
 800f340:	23ae      	movs	r3, #174	@ 0xae
 800f342:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_sysmonRegisterUserMessage(&sysmonBinaryEraseReqMsg));
 800f344:	79fb      	ldrb	r3, [r7, #7]
 800f346:	2b55      	cmp	r3, #85	@ 0x55
 800f348:	d105      	bne.n	800f356 <svl_sdhInit+0x8a>
 800f34a:	483d      	ldr	r0, [pc, #244]	@ (800f440 <svl_sdhInit+0x174>)
 800f34c:	f005 fb86 	bl	8014a5c <gos_sysmonRegisterUserMessage>
 800f350:	4603      	mov	r3, r0
 800f352:	71fb      	strb	r3, [r7, #7]
 800f354:	e001      	b.n	800f35a <svl_sdhInit+0x8e>
 800f356:	23ae      	movs	r3, #174	@ 0xae
 800f358:	71fb      	strb	r3, [r7, #7]

    // Register IPL callbacks.
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryNumReqMsg));
 800f35a:	79fb      	ldrb	r3, [r7, #7]
 800f35c:	2b55      	cmp	r3, #85	@ 0x55
 800f35e:	d105      	bne.n	800f36c <svl_sdhInit+0xa0>
 800f360:	4838      	ldr	r0, [pc, #224]	@ (800f444 <svl_sdhInit+0x178>)
 800f362:	f7fe fe85 	bl	800e070 <svl_iplRegisterUserMsg>
 800f366:	4603      	mov	r3, r0
 800f368:	71fb      	strb	r3, [r7, #7]
 800f36a:	e001      	b.n	800f370 <svl_sdhInit+0xa4>
 800f36c:	23ae      	movs	r3, #174	@ 0xae
 800f36e:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryInfoReqMsg));
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	2b55      	cmp	r3, #85	@ 0x55
 800f374:	d105      	bne.n	800f382 <svl_sdhInit+0xb6>
 800f376:	4834      	ldr	r0, [pc, #208]	@ (800f448 <svl_sdhInit+0x17c>)
 800f378:	f7fe fe7a 	bl	800e070 <svl_iplRegisterUserMsg>
 800f37c:	4603      	mov	r3, r0
 800f37e:	71fb      	strb	r3, [r7, #7]
 800f380:	e001      	b.n	800f386 <svl_sdhInit+0xba>
 800f382:	23ae      	movs	r3, #174	@ 0xae
 800f384:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplDownloadReqMsg));
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	2b55      	cmp	r3, #85	@ 0x55
 800f38a:	d105      	bne.n	800f398 <svl_sdhInit+0xcc>
 800f38c:	482f      	ldr	r0, [pc, #188]	@ (800f44c <svl_sdhInit+0x180>)
 800f38e:	f7fe fe6f 	bl	800e070 <svl_iplRegisterUserMsg>
 800f392:	4603      	mov	r3, r0
 800f394:	71fb      	strb	r3, [r7, #7]
 800f396:	e001      	b.n	800f39c <svl_sdhInit+0xd0>
 800f398:	23ae      	movs	r3, #174	@ 0xae
 800f39a:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplBinaryChunkReqMsg));
 800f39c:	79fb      	ldrb	r3, [r7, #7]
 800f39e:	2b55      	cmp	r3, #85	@ 0x55
 800f3a0:	d105      	bne.n	800f3ae <svl_sdhInit+0xe2>
 800f3a2:	482b      	ldr	r0, [pc, #172]	@ (800f450 <svl_sdhInit+0x184>)
 800f3a4:	f7fe fe64 	bl	800e070 <svl_iplRegisterUserMsg>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	71fb      	strb	r3, [r7, #7]
 800f3ac:	e001      	b.n	800f3b2 <svl_sdhInit+0xe6>
 800f3ae:	23ae      	movs	r3, #174	@ 0xae
 800f3b0:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplSoftwareInstallReqMsg));
 800f3b2:	79fb      	ldrb	r3, [r7, #7]
 800f3b4:	2b55      	cmp	r3, #85	@ 0x55
 800f3b6:	d105      	bne.n	800f3c4 <svl_sdhInit+0xf8>
 800f3b8:	4826      	ldr	r0, [pc, #152]	@ (800f454 <svl_sdhInit+0x188>)
 800f3ba:	f7fe fe59 	bl	800e070 <svl_iplRegisterUserMsg>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	71fb      	strb	r3, [r7, #7]
 800f3c2:	e001      	b.n	800f3c8 <svl_sdhInit+0xfc>
 800f3c4:	23ae      	movs	r3, #174	@ 0xae
 800f3c6:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_iplRegisterUserMsg(&iplEraseReqMsg));
 800f3c8:	79fb      	ldrb	r3, [r7, #7]
 800f3ca:	2b55      	cmp	r3, #85	@ 0x55
 800f3cc:	d105      	bne.n	800f3da <svl_sdhInit+0x10e>
 800f3ce:	4822      	ldr	r0, [pc, #136]	@ (800f458 <svl_sdhInit+0x18c>)
 800f3d0:	f7fe fe4e 	bl	800e070 <svl_iplRegisterUserMsg>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	71fb      	strb	r3, [r7, #7]
 800f3d8:	e001      	b.n	800f3de <svl_sdhInit+0x112>
 800f3da:	23ae      	movs	r3, #174	@ 0xae
 800f3dc:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_taskRegister(&svlSdhTaskDesc, NULL));
 800f3de:	79fb      	ldrb	r3, [r7, #7]
 800f3e0:	2b55      	cmp	r3, #85	@ 0x55
 800f3e2:	d106      	bne.n	800f3f2 <svl_sdhInit+0x126>
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	481d      	ldr	r0, [pc, #116]	@ (800f45c <svl_sdhInit+0x190>)
 800f3e8:	f002 f84e 	bl	8011488 <gos_taskRegister>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	71fb      	strb	r3, [r7, #7]
 800f3f0:	e001      	b.n	800f3f6 <svl_sdhInit+0x12a>
 800f3f2:	23ae      	movs	r3, #174	@ 0xae
 800f3f4:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlTrigger));
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b55      	cmp	r3, #85	@ 0x55
 800f3fa:	d105      	bne.n	800f408 <svl_sdhInit+0x13c>
 800f3fc:	4818      	ldr	r0, [pc, #96]	@ (800f460 <svl_sdhInit+0x194>)
 800f3fe:	f006 fdb7 	bl	8015f70 <gos_triggerInit>
 800f402:	4603      	mov	r3, r0
 800f404:	71fb      	strb	r3, [r7, #7]
 800f406:	e001      	b.n	800f40c <svl_sdhInit+0x140>
 800f408:	23ae      	movs	r3, #174	@ 0xae
 800f40a:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlFeedbackTrigger));
 800f40c:	79fb      	ldrb	r3, [r7, #7]
 800f40e:	2b55      	cmp	r3, #85	@ 0x55
 800f410:	d105      	bne.n	800f41e <svl_sdhInit+0x152>
 800f412:	4814      	ldr	r0, [pc, #80]	@ (800f464 <svl_sdhInit+0x198>)
 800f414:	f006 fdac 	bl	8015f70 <gos_triggerInit>
 800f418:	4603      	mov	r3, r0
 800f41a:	71fb      	strb	r3, [r7, #7]
 800f41c:	e001      	b.n	800f422 <svl_sdhInit+0x156>
 800f41e:	23ae      	movs	r3, #174	@ 0xae
 800f420:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800f422:	79fb      	ldrb	r3, [r7, #7]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	20000688 	.word	0x20000688
 800f430:	20000698 	.word	0x20000698
 800f434:	200006a8 	.word	0x200006a8
 800f438:	200006b8 	.word	0x200006b8
 800f43c:	200006c8 	.word	0x200006c8
 800f440:	200006d8 	.word	0x200006d8
 800f444:	200006e8 	.word	0x200006e8
 800f448:	200006f0 	.word	0x200006f0
 800f44c:	200006f8 	.word	0x200006f8
 800f450:	20000700 	.word	0x20000700
 800f454:	20000708 	.word	0x20000708
 800f458:	20000710 	.word	0x20000710
 800f45c:	20000718 	.word	0x20000718
 800f460:	20005e18 	.word	0x20005e18
 800f464:	20005e24 	.word	0x20005e24

0800f468 <svl_sdhConfigure>:

/*
 * Function: svl_sdhConfigure
 */
gos_result_t svl_sdhConfigure (svl_sdhCfg_t* pCfg)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t cfgResult = GOS_ERROR;
 800f470:	23ae      	movs	r3, #174	@ 0xae
 800f472:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d011      	beq.n	800f49e <svl_sdhConfigure+0x36>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00d      	beq.n	800f49e <svl_sdhConfigure+0x36>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d009      	beq.n	800f49e <svl_sdhConfigure+0x36>
    {
        sdhReadFunction  = pCfg->readFunction;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4a07      	ldr	r2, [pc, #28]	@ (800f4ac <svl_sdhConfigure+0x44>)
 800f490:	6013      	str	r3, [r2, #0]
        sdhWriteFunction = pCfg->writeFunction;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	4a06      	ldr	r2, [pc, #24]	@ (800f4b0 <svl_sdhConfigure+0x48>)
 800f498:	6013      	str	r3, [r2, #0]
        cfgResult        = GOS_SUCCESS;
 800f49a:	2355      	movs	r3, #85	@ 0x55
 800f49c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return cfgResult;
 800f49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	200059d0 	.word	0x200059d0
 800f4b0:	200059d4 	.word	0x200059d4

0800f4b4 <svl_sdhGetBinaryData>:

/*
 * Function: svl_sdhGetBinaryData
 */
gos_result_t svl_sdhGetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	6039      	str	r1, [r7, #0]
 800f4be:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_SUCCESS;
 800f4c0:	2355      	movs	r3, #85	@ 0x55
 800f4c2:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL)
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d01c      	beq.n	800f508 <svl_sdhGetBinaryData+0x54>
 800f4ce:	4b12      	ldr	r3, [pc, #72]	@ (800f518 <svl_sdhGetBinaryData+0x64>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d018      	beq.n	800f508 <svl_sdhGetBinaryData+0x54>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f4d6:	4b10      	ldr	r3, [pc, #64]	@ (800f518 <svl_sdhGetBinaryData+0x64>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f107 010c 	add.w	r1, r7, #12
 800f4de:	2202      	movs	r2, #2
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	4798      	blx	r3

        if (index < numOfBinaries)
 800f4e4:	89bb      	ldrh	r3, [r7, #12]
 800f4e6:	88fa      	ldrh	r2, [r7, #6]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d20a      	bcs.n	800f502 <svl_sdhGetBinaryData+0x4e>
        {
            (void_t) sdhReadFunction(
 800f4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f518 <svl_sdhGetBinaryData+0x64>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 800f4f0:	88fa      	ldrh	r2, [r7, #6]
 800f4f2:	213a      	movs	r1, #58	@ 0x3a
 800f4f4:	fb01 f202 	mul.w	r2, r1, r2
 800f4f8:	1c90      	adds	r0, r2, #2
            (void_t) sdhReadFunction(
 800f4fa:	223a      	movs	r2, #58	@ 0x3a
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	4798      	blx	r3
        if (index < numOfBinaries)
 800f500:	e004      	b.n	800f50c <svl_sdhGetBinaryData+0x58>
                    );
        }
        else
        {
            // Invalid request.
            dataGetResult = GOS_ERROR;
 800f502:	23ae      	movs	r3, #174	@ 0xae
 800f504:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 800f506:	e001      	b.n	800f50c <svl_sdhGetBinaryData+0x58>
        }
    }
    else
    {
        // NULL pointer error.
        dataGetResult = GOS_ERROR;
 800f508:	23ae      	movs	r3, #174	@ 0xae
 800f50a:	73fb      	strb	r3, [r7, #15]
    }

    return dataGetResult;
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	200059d0 	.word	0x200059d0

0800f51c <svl_sdhSetBinaryData>:

/*
 * Function: svl_sdhSetBinaryData
 */
gos_result_t svl_sdhSetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	4603      	mov	r3, r0
 800f524:	6039      	str	r1, [r7, #0]
 800f526:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_SUCCESS;
 800f528:	2355      	movs	r3, #85	@ 0x55
 800f52a:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 800f52c:	2300      	movs	r3, #0
 800f52e:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d020      	beq.n	800f578 <svl_sdhSetBinaryData+0x5c>
 800f536:	4b14      	ldr	r3, [pc, #80]	@ (800f588 <svl_sdhSetBinaryData+0x6c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d01c      	beq.n	800f578 <svl_sdhSetBinaryData+0x5c>
 800f53e:	4b13      	ldr	r3, [pc, #76]	@ (800f58c <svl_sdhSetBinaryData+0x70>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d018      	beq.n	800f578 <svl_sdhSetBinaryData+0x5c>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f546:	4b10      	ldr	r3, [pc, #64]	@ (800f588 <svl_sdhSetBinaryData+0x6c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f107 010c 	add.w	r1, r7, #12
 800f54e:	2202      	movs	r2, #2
 800f550:	2000      	movs	r0, #0
 800f552:	4798      	blx	r3

        if (index < numOfBinaries)
 800f554:	89bb      	ldrh	r3, [r7, #12]
 800f556:	88fa      	ldrh	r2, [r7, #6]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d20a      	bcs.n	800f572 <svl_sdhSetBinaryData+0x56>
        {
            (void_t) sdhWriteFunction(
 800f55c:	4b0b      	ldr	r3, [pc, #44]	@ (800f58c <svl_sdhSetBinaryData+0x70>)
 800f55e:	681b      	ldr	r3, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 800f560:	88fa      	ldrh	r2, [r7, #6]
 800f562:	213a      	movs	r1, #58	@ 0x3a
 800f564:	fb01 f202 	mul.w	r2, r1, r2
 800f568:	1c90      	adds	r0, r2, #2
            (void_t) sdhWriteFunction(
 800f56a:	223a      	movs	r2, #58	@ 0x3a
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	4798      	blx	r3
        if (index < numOfBinaries)
 800f570:	e004      	b.n	800f57c <svl_sdhSetBinaryData+0x60>
                    );
        }
        else
        {
            // Invalid request.
            dataSetResult = GOS_ERROR;
 800f572:	23ae      	movs	r3, #174	@ 0xae
 800f574:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 800f576:	e001      	b.n	800f57c <svl_sdhSetBinaryData+0x60>
        }
    }
    else
    {
        // NULL pointer error.
        dataSetResult = GOS_ERROR;
 800f578:	23ae      	movs	r3, #174	@ 0xae
 800f57a:	73fb      	strb	r3, [r7, #15]
    }

    return dataSetResult;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	200059d0 	.word	0x200059d0
 800f58c:	200059d4 	.word	0x200059d4

0800f590 <svl_sdhReadBytesFromMemory>:

/*
 * Function: svl_sdhReadBytesFromMemory
 */
gos_result_t svl_sdhReadBytesFromMemory (u32_t address, u8_t* pBuffer, u32_t size)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t readResult = GOS_SUCCESS;
 800f59c:	2355      	movs	r3, #85	@ 0x55
 800f59e:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pBuffer != NULL && sdhReadFunction != NULL)
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00a      	beq.n	800f5bc <svl_sdhReadBytesFromMemory+0x2c>
 800f5a6:	4b09      	ldr	r3, [pc, #36]	@ (800f5cc <svl_sdhReadBytesFromMemory+0x3c>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d006      	beq.n	800f5bc <svl_sdhReadBytesFromMemory+0x2c>
    {
        (void_t) sdhReadFunction(address, pBuffer, size);
 800f5ae:	4b07      	ldr	r3, [pc, #28]	@ (800f5cc <svl_sdhReadBytesFromMemory+0x3c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	68b9      	ldr	r1, [r7, #8]
 800f5b6:	68f8      	ldr	r0, [r7, #12]
 800f5b8:	4798      	blx	r3
 800f5ba:	e001      	b.n	800f5c0 <svl_sdhReadBytesFromMemory+0x30>
    }
    else
    {
        // NULL pointer error.
        readResult = GOS_ERROR;
 800f5bc:	23ae      	movs	r3, #174	@ 0xae
 800f5be:	75fb      	strb	r3, [r7, #23]
    }

    return readResult;
 800f5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3718      	adds	r7, #24
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	200059d0 	.word	0x200059d0

0800f5d0 <svl_sdhDaemon>:
 * @details Handles the incoming requests via sysmon or IPL.
 *
 * @return -
 */
GOS_STATIC void_t svl_sdhDaemon (void_t)
{
 800f5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d2:	b0bb      	sub	sp, #236	@ 0xec
 800f5d4:	af0a      	add	r7, sp, #40	@ 0x28
    /*
     * Local variables.
     */
    svl_sdhBinaryDesc_t binaryDescriptor    = {0};
 800f5d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800f5da:	223a      	movs	r2, #58	@ 0x3a
 800f5dc:	2100      	movs	r1, #0
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f007 fd4c 	bl	801707c <memset>
    svl_sdhBinaryDesc_t newBinaryDescriptor = {0};
 800f5e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f5e8:	223a      	movs	r2, #58	@ 0x3a
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f007 fd45 	bl	801707c <memset>
    svl_sdhChunkDesc_t  chunkDesc           = {0};
 800f5f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	460a      	mov	r2, r1
 800f5fa:	801a      	strh	r2, [r3, #0]
 800f5fc:	460a      	mov	r2, r1
 800f5fe:	709a      	strb	r2, [r3, #2]
    svl_pdhBldCfg_t     bldCfg              = {0};
 800f600:	f107 031c 	add.w	r3, r7, #28
 800f604:	2200      	movs	r2, #0
 800f606:	601a      	str	r2, [r3, #0]
 800f608:	605a      	str	r2, [r3, #4]
 800f60a:	609a      	str	r2, [r3, #8]
 800f60c:	819a      	strh	r2, [r3, #12]
    u16_t               numOfChunks         = 0u;
 800f60e:	2300      	movs	r3, #0
 800f610:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    u16_t               index               = 0u;
 800f614:	2300      	movs	r3, #0
 800f616:	837b      	strh	r3, [r7, #26]
    u16_t               numOfBinaries       = 0u;
 800f618:	2300      	movs	r3, #0
 800f61a:	833b      	strh	r3, [r7, #24]
    u8_t                result              = 0u;
 800f61c:	2300      	movs	r3, #0
 800f61e:	75fb      	strb	r3, [r7, #23]
    u32_t               startAddress        = 0u;
 800f620:	2300      	movs	r3, #0
 800f622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    u32_t               fromAddress         = 0u;
 800f626:	2300      	movs	r3, #0
 800f628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    u32_t               totalCopySize       = 0u;
 800f62c:	2300      	movs	r3, #0
 800f62e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    bool_t              defragment          = GOS_FALSE;
 800f632:	2349      	movs	r3, #73	@ 0x49
 800f634:	75bb      	strb	r3, [r7, #22]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800f636:	f04f 32ff 	mov.w	r2, #4294967295
 800f63a:	2101      	movs	r1, #1
 800f63c:	48a7      	ldr	r0, [pc, #668]	@ (800f8dc <svl_sdhDaemon+0x30c>)
 800f63e:	f006 fd0b 	bl	8016058 <gos_triggerWait>
 800f642:	4603      	mov	r3, r0
 800f644:	2b55      	cmp	r3, #85	@ 0x55
 800f646:	f040 82d1 	bne.w	800fbec <svl_sdhDaemon+0x61c>
        {
            switch (sdhRequestedState)
 800f64a:	4ba5      	ldr	r3, [pc, #660]	@ (800f8e0 <svl_sdhDaemon+0x310>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	3b01      	subs	r3, #1
 800f650:	2b05      	cmp	r3, #5
 800f652:	f200 82ba 	bhi.w	800fbca <svl_sdhDaemon+0x5fa>
 800f656:	a201      	add	r2, pc, #4	@ (adr r2, 800f65c <svl_sdhDaemon+0x8c>)
 800f658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65c:	0800f911 	.word	0x0800f911
 800f660:	0800f675 	.word	0x0800f675
 800f664:	0800f6cd 	.word	0x0800f6cd
 800f668:	0800f781 	.word	0x0800f781
 800f66c:	0800f723 	.word	0x0800f723
 800f670:	0800fa07 	.word	0x0800fa07
            {
                case SDH_STATE_BINARY_NUM_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f674:	4b9b      	ldr	r3, [pc, #620]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f000 82a8 	beq.w	800fbce <svl_sdhDaemon+0x5fe>
 800f67e:	4b9a      	ldr	r3, [pc, #616]	@ (800f8e8 <svl_sdhDaemon+0x318>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f000 82a3 	beq.w	800fbce <svl_sdhDaemon+0x5fe>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary number request received.\r\n");
 800f688:	4998      	ldr	r1, [pc, #608]	@ (800f8ec <svl_sdhDaemon+0x31c>)
 800f68a:	2036      	movs	r0, #54	@ 0x36
 800f68c:	f006 f9be 	bl	8015a0c <gos_traceTrace>
#endif
                        u16_t numOfBinaries = 0u;
 800f690:	2300      	movs	r3, #0
 800f692:	82bb      	strh	r3, [r7, #20]

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f694:	4b93      	ldr	r3, [pc, #588]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f107 0114 	add.w	r1, r7, #20
 800f69c:	2202      	movs	r2, #2
 800f69e:	2000      	movs	r0, #0
 800f6a0:	4798      	blx	r3

                        if (numOfBinaries == 0xFFFF)
 800f6a2:	8abb      	ldrh	r3, [r7, #20]
 800f6a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d108      	bne.n	800f6be <svl_sdhDaemon+0xee>
                        {
                            numOfBinaries = 0u;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	82bb      	strh	r3, [r7, #20]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f6b0:	4b8d      	ldr	r3, [pc, #564]	@ (800f8e8 <svl_sdhDaemon+0x318>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f107 0114 	add.w	r1, r7, #20
 800f6b8:	2202      	movs	r2, #2
 800f6ba:	2000      	movs	r0, #0
 800f6bc:	4798      	blx	r3
                        else
                        {
                            // Number OK.
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, &numOfBinaries, sizeof(numOfBinaries));
 800f6be:	8aba      	ldrh	r2, [r7, #20]
 800f6c0:	4b8b      	ldr	r3, [pc, #556]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f6c2:	801a      	strh	r2, [r3, #0]

                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f6c4:	488b      	ldr	r0, [pc, #556]	@ (800f8f4 <svl_sdhDaemon+0x324>)
 800f6c6:	f006 fd77 	bl	80161b8 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f6ca:	e280      	b.n	800fbce <svl_sdhDaemon+0x5fe>
                }
                case SDH_STATE_BINARY_INFO_REQ:
                {
                    if (sdhReadFunction != NULL)
 800f6cc:	4b85      	ldr	r3, [pc, #532]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 827e 	beq.w	800fbd2 <svl_sdhDaemon+0x602>
                    {
                        (void_t) memcpy((void_t*)&index, sdhBuffer, sizeof(index));
 800f6d6:	4b86      	ldr	r3, [pc, #536]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	837b      	strh	r3, [r7, #26]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary info request received. Index: %u\r\n", index);
 800f6dc:	8b7b      	ldrh	r3, [r7, #26]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	4985      	ldr	r1, [pc, #532]	@ (800f8f8 <svl_sdhDaemon+0x328>)
 800f6e2:	2036      	movs	r0, #54	@ 0x36
 800f6e4:	f006 fab6 	bl	8015c54 <gos_traceTraceFormatted>
#endif
                        if (svl_sdhGetBinaryData(index, &binaryDescriptor) == GOS_SUCCESS)
 800f6e8:	8b7b      	ldrh	r3, [r7, #26]
 800f6ea:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800f6ee:	4611      	mov	r1, r2
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff fedf 	bl	800f4b4 <svl_sdhGetBinaryData>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b55      	cmp	r3, #85	@ 0x55
 800f6fa:	f040 826a 	bne.w	800fbd2 <svl_sdhDaemon+0x602>
                        {
                            (void_t) memcpy(sdhBuffer, (void_t*)&binaryDescriptor, sizeof(binaryDescriptor));
 800f6fe:	4b7c      	ldr	r3, [pc, #496]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f700:	461c      	mov	r4, r3
 800f702:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 800f706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f70a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f70c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f70e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f716:	c403      	stmia	r4!, {r0, r1}
 800f718:	8022      	strh	r2, [r4, #0]
                            gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f71a:	4876      	ldr	r0, [pc, #472]	@ (800f8f4 <svl_sdhDaemon+0x324>)
 800f71c:	f006 fd4c 	bl	80161b8 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f720:	e257      	b.n	800fbd2 <svl_sdhDaemon+0x602>
                }
                case SDH_STATE_BINARY_INSTALL_REQ:
                {
                    if (sdhReadFunction != NULL)
 800f722:	4b70      	ldr	r3, [pc, #448]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	f000 8255 	beq.w	800fbd6 <svl_sdhDaemon+0x606>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 800f72c:	4b70      	ldr	r3, [pc, #448]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	837b      	strh	r3, [r7, #26]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary install request received. Index: %u\r\n", index);
 800f732:	8b7b      	ldrh	r3, [r7, #26]
 800f734:	461a      	mov	r2, r3
 800f736:	4971      	ldr	r1, [pc, #452]	@ (800f8fc <svl_sdhDaemon+0x32c>)
 800f738:	2036      	movs	r0, #54	@ 0x36
 800f73a:	f006 fa8b 	bl	8015c54 <gos_traceTraceFormatted>
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f73e:	4b69      	ldr	r3, [pc, #420]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f107 0118 	add.w	r1, r7, #24
 800f746:	2202      	movs	r2, #2
 800f748:	2000      	movs	r0, #0
 800f74a:	4798      	blx	r3

                        if (index < numOfBinaries)
 800f74c:	8b7a      	ldrh	r2, [r7, #26]
 800f74e:	8b3b      	ldrh	r3, [r7, #24]
 800f750:	429a      	cmp	r2, r3
 800f752:	f080 8240 	bcs.w	800fbd6 <svl_sdhDaemon+0x606>
                        {
                            (void_t) svl_pdhGetBldCfg(&bldCfg);
 800f756:	f107 031c 	add.w	r3, r7, #28
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff fa1e 	bl	800eb9c <svl_pdhGetBldCfg>

                            bldCfg.installRequested = GOS_TRUE;
 800f760:	2336      	movs	r3, #54	@ 0x36
 800f762:	773b      	strb	r3, [r7, #28]
                            bldCfg.binaryIndex      = index;
 800f764:	8b7b      	ldrh	r3, [r7, #26]
 800f766:	83fb      	strh	r3, [r7, #30]

                            (void_t) svl_pdhSetBldCfg(&bldCfg);
 800f768:	f107 031c 	add.w	r3, r7, #28
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7ff faf5 	bl	800ed5c <svl_pdhSetBldCfg>

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 800f772:	8b7a      	ldrh	r2, [r7, #26]
 800f774:	4b5e      	ldr	r3, [pc, #376]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f776:	801a      	strh	r2, [r3, #0]

                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f778:	485e      	ldr	r0, [pc, #376]	@ (800f8f4 <svl_sdhDaemon+0x324>)
 800f77a:	f006 fd1d 	bl	80161b8 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f77e:	e22a      	b.n	800fbd6 <svl_sdhDaemon+0x606>
                }
                case SDH_STATE_BINARY_DOWNLOAD_REQ:
                {
                    if (sdhReadFunction != NULL)
 800f780:	4b58      	ldr	r3, [pc, #352]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f000 8228 	beq.w	800fbda <svl_sdhDaemon+0x60a>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download request received.\r\n");
 800f78a:	495d      	ldr	r1, [pc, #372]	@ (800f900 <svl_sdhDaemon+0x330>)
 800f78c:	2036      	movs	r0, #54	@ 0x36
 800f78e:	f006 f93d 	bl	8015a0c <gos_traceTrace>
#endif
                        // Check if descriptor fits.
                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f792:	4b54      	ldr	r3, [pc, #336]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f107 0118 	add.w	r1, r7, #24
 800f79a:	2202      	movs	r2, #2
 800f79c:	2000      	movs	r0, #0
 800f79e:	4798      	blx	r3

                        if ((SVL_SDH_STORAGE_DESC_BIN_DESC_START + ((numOfBinaries + 1) * sizeof(svl_sdhBinaryDesc_t))) < SVL_SDH_STORAGE_DESC_AREA_SIZE)
 800f7a0:	8b3b      	ldrh	r3, [r7, #24]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	233a      	movs	r3, #58	@ 0x3a
 800f7a8:	fb02 f303 	mul.w	r3, r2, r3
 800f7ac:	3302      	adds	r3, #2
 800f7ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7b2:	f080 808a 	bcs.w	800f8ca <svl_sdhDaemon+0x2fa>
                        {
                            (void_t) memcpy((void_t*)&newBinaryDescriptor, (void_t*)sdhBuffer, sizeof(newBinaryDescriptor));
 800f7b6:	4b4e      	ldr	r3, [pc, #312]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f7b8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f7bc:	461d      	mov	r5, r3
 800f7be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7ce:	c403      	stmia	r4!, {r0, r1}
 800f7d0:	8022      	strh	r2, [r4, #0]

                            if (numOfBinaries > 0)
 800f7d2:	8b3b      	ldrh	r3, [r7, #24]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d014      	beq.n	800f802 <svl_sdhDaemon+0x232>
                            {
                                (void_t) sdhReadFunction(
 800f7d8:	4b42      	ldr	r3, [pc, #264]	@ (800f8e4 <svl_sdhDaemon+0x314>)
 800f7da:	681b      	ldr	r3, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + (numOfBinaries - 1) * sizeof(svl_sdhBinaryDesc_t),
 800f7dc:	8b3a      	ldrh	r2, [r7, #24]
 800f7de:	3a01      	subs	r2, #1
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	223a      	movs	r2, #58	@ 0x3a
 800f7e4:	fb01 f202 	mul.w	r2, r1, r2
 800f7e8:	1c90      	adds	r0, r2, #2
                                (void_t) sdhReadFunction(
 800f7ea:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800f7ee:	223a      	movs	r2, #58	@ 0x3a
 800f7f0:	4798      	blx	r3
                                        (u8_t*)&binaryDescriptor,
                                        sizeof(binaryDescriptor)
                                        );

                                newBinaryDescriptor.binaryLocation = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size;
 800f7f2:	f8d7 2096 	ldr.w	r2, [r7, #150]	@ 0x96
 800f7f6:	f8d7 309e 	ldr.w	r3, [r7, #158]	@ 0x9e
 800f7fa:	4413      	add	r3, r2
 800f7fc:	f8c7 305a 	str.w	r3, [r7, #90]	@ 0x5a
 800f800:	e007      	b.n	800f812 <svl_sdhDaemon+0x242>
                            }
                            else
                            {
                                newBinaryDescriptor.binaryLocation = SVL_SDH_BINARY_AREA_START;
 800f802:	2300      	movs	r3, #0
 800f804:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f808:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800f80c:	2300      	movs	r3, #0
 800f80e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
                                    "Location: %u\r\n"
                                    "Size: %u\r\n"
                                    "Address: %u\r\n"
                                    "CRC: %u\r\n",
                                    newBinaryDescriptor.name,
									newBinaryDescriptor.installDate.years,
 800f812:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
                            (void_t) gos_traceTraceFormatted(
 800f816:	469c      	mov	ip, r3
									newBinaryDescriptor.installDate.months,
 800f818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
                            (void_t) gos_traceTraceFormatted(
 800f81c:	461d      	mov	r5, r3
									newBinaryDescriptor.installDate.days,
 800f81e:	f8b7 3055 	ldrh.w	r3, [r7, #85]	@ 0x55
 800f822:	b29b      	uxth	r3, r3
                            (void_t) gos_traceTraceFormatted(
 800f824:	461e      	mov	r6, r3
									newBinaryDescriptor.installDate.hours,
 800f826:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
                            (void_t) gos_traceTraceFormatted(
 800f82a:	60fb      	str	r3, [r7, #12]
									newBinaryDescriptor.installDate.minutes,
 800f82c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
                            (void_t) gos_traceTraceFormatted(
 800f830:	60bb      	str	r3, [r7, #8]
									newBinaryDescriptor.installDate.seconds,
 800f832:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
                            (void_t) gos_traceTraceFormatted(
 800f836:	607b      	str	r3, [r7, #4]
 800f838:	f8d7 305a 	ldr.w	r3, [r7, #90]	@ 0x5a
 800f83c:	f8d7 2062 	ldr.w	r2, [r7, #98]	@ 0x62
 800f840:	f8d7 105e 	ldr.w	r1, [r7, #94]	@ 0x5e
 800f844:	f8d7 0066 	ldr.w	r0, [r7, #102]	@ 0x66
 800f848:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800f84c:	9008      	str	r0, [sp, #32]
 800f84e:	9107      	str	r1, [sp, #28]
 800f850:	9206      	str	r2, [sp, #24]
 800f852:	9305      	str	r3, [sp, #20]
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	9204      	str	r2, [sp, #16]
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	9203      	str	r2, [sp, #12]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	9302      	str	r3, [sp, #8]
 800f860:	9601      	str	r6, [sp, #4]
 800f862:	9500      	str	r5, [sp, #0]
 800f864:	4663      	mov	r3, ip
 800f866:	4622      	mov	r2, r4
 800f868:	4926      	ldr	r1, [pc, #152]	@ (800f904 <svl_sdhDaemon+0x334>)
 800f86a:	2036      	movs	r0, #54	@ 0x36
 800f86c:	f006 f9f2 	bl	8015c54 <gos_traceTraceFormatted>
                                    newBinaryDescriptor.binaryInfo.size,
                                    newBinaryDescriptor.binaryInfo.startAddress,
                                    newBinaryDescriptor.binaryInfo.crc);
#endif

                            if ((newBinaryDescriptor.binaryLocation + newBinaryDescriptor.binaryInfo.size) < SVL_SDH_BINARY_AREA_END)
 800f870:	f8d7 205a 	ldr.w	r2, [r7, #90]	@ 0x5a
 800f874:	f8d7 3062 	ldr.w	r3, [r7, #98]	@ 0x62
 800f878:	4413      	add	r3, r2
 800f87a:	4a23      	ldr	r2, [pc, #140]	@ (800f908 <svl_sdhDaemon+0x338>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d821      	bhi.n	800f8c4 <svl_sdhDaemon+0x2f4>
                            {
                                (void_t) sdhWriteFunction(
 800f880:	4b19      	ldr	r3, [pc, #100]	@ (800f8e8 <svl_sdhDaemon+0x318>)
 800f882:	681b      	ldr	r3, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + numOfBinaries * sizeof(svl_sdhBinaryDesc_t),
 800f884:	8b3a      	ldrh	r2, [r7, #24]
 800f886:	4611      	mov	r1, r2
 800f888:	223a      	movs	r2, #58	@ 0x3a
 800f88a:	fb01 f202 	mul.w	r2, r1, r2
 800f88e:	1c90      	adds	r0, r2, #2
                                (void_t) sdhWriteFunction(
 800f890:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800f894:	223a      	movs	r2, #58	@ 0x3a
 800f896:	4798      	blx	r3
                                        (u8_t*)&newBinaryDescriptor,
                                        sizeof(newBinaryDescriptor)
                                );
                                result = SDH_DOWNLOAD_REQ_OK;
 800f898:	2301      	movs	r3, #1
 800f89a:	75fb      	strb	r3, [r7, #23]

                                numOfChunks = newBinaryDescriptor.binaryInfo.size / SVL_SDH_CHUNK_SIZE + (newBinaryDescriptor.binaryInfo.size % SVL_SDH_CHUNK_SIZE == 0 ? 0 : 1);
 800f89c:	f8d7 3062 	ldr.w	r3, [r7, #98]	@ 0x62
 800f8a0:	0a9b      	lsrs	r3, r3, #10
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	f8d7 2062 	ldr.w	r2, [r7, #98]	@ 0x62
 800f8a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f8ac:	2a00      	cmp	r2, #0
 800f8ae:	bf14      	ite	ne
 800f8b0:	2201      	movne	r2, #1
 800f8b2:	2200      	moveq	r2, #0
 800f8b4:	b2d2      	uxtb	r2, r2
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

                                sdhState = SDH_STATE_DOWNLOADING_BINARY;
 800f8bc:	4b13      	ldr	r3, [pc, #76]	@ (800f90c <svl_sdhDaemon+0x33c>)
 800f8be:	2201      	movs	r2, #1
 800f8c0:	701a      	strb	r2, [r3, #0]
 800f8c2:	e004      	b.n	800f8ce <svl_sdhDaemon+0x2fe>
                            }
                            else
                            {
                                // New binary does not fit.
                                result = SDH_DOWNLOAD_REQ_FILE_SIZE_ERR;
 800f8c4:	2304      	movs	r3, #4
 800f8c6:	75fb      	strb	r3, [r7, #23]
 800f8c8:	e001      	b.n	800f8ce <svl_sdhDaemon+0x2fe>
                            }
                        }
                        else
                        {
                            // There is not enough size for descriptor.
                            result = SDH_DOWNLOAD_REQ_DESC_SIZE_ERR;
 800f8ca:	2302      	movs	r3, #2
 800f8cc:	75fb      	strb	r3, [r7, #23]
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&result, sizeof(result));
 800f8ce:	7dfa      	ldrb	r2, [r7, #23]
 800f8d0:	4b07      	ldr	r3, [pc, #28]	@ (800f8f0 <svl_sdhDaemon+0x320>)
 800f8d2:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f8d4:	4807      	ldr	r0, [pc, #28]	@ (800f8f4 <svl_sdhDaemon+0x324>)
 800f8d6:	f006 fc6f 	bl	80161b8 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800f8da:	e17e      	b.n	800fbda <svl_sdhDaemon+0x60a>
 800f8dc:	20005e18 	.word	0x20005e18
 800f8e0:	20005e31 	.word	0x20005e31
 800f8e4:	200059d0 	.word	0x200059d0
 800f8e8:	200059d4 	.word	0x200059d4
 800f8ec:	080197c8 	.word	0x080197c8
 800f8f0:	200059d8 	.word	0x200059d8
 800f8f4:	20005e24 	.word	0x20005e24
 800f8f8:	080197f0 	.word	0x080197f0
 800f8fc:	08019820 	.word	0x08019820
 800f900:	08019854 	.word	0x08019854
 800f904:	0801987c 	.word	0x0801987c
 800f908:	007ffffe 	.word	0x007ffffe
 800f90c:	20005e30 	.word	0x20005e30
                }
                case SDH_STATE_DOWNLOADING_BINARY:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800f910:	4bbe      	ldr	r3, [pc, #760]	@ (800fc0c <svl_sdhDaemon+0x63c>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	f000 8162 	beq.w	800fbde <svl_sdhDaemon+0x60e>
 800f91a:	4bbd      	ldr	r3, [pc, #756]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f000 815d 	beq.w	800fbde <svl_sdhDaemon+0x60e>
                    {
                        // Get chunk descriptor.
                        (void_t) memcpy((void_t*)&chunkDesc, (void_t*)sdhBuffer, sizeof(chunkDesc));
 800f924:	4abb      	ldr	r2, [pc, #748]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800f926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f92a:	6812      	ldr	r2, [r2, #0]
 800f92c:	4611      	mov	r1, r2
 800f92e:	8019      	strh	r1, [r3, #0]
 800f930:	3302      	adds	r3, #2
 800f932:	0c12      	lsrs	r2, r2, #16
 800f934:	701a      	strb	r2, [r3, #0]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary chunk request received.\r\n");
 800f936:	49b8      	ldr	r1, [pc, #736]	@ (800fc18 <svl_sdhDaemon+0x648>)
 800f938:	2036      	movs	r0, #54	@ 0x36
 800f93a:	f006 f867 	bl	8015a0c <gos_traceTrace>
#endif

#if SVL_SDH_TRACE_LEVEL == 2
                        u32_t percentage = 100 * 100 * (chunkDesc.chunkIdx + 1) / numOfChunks;
 800f93e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f940:	3301      	adds	r3, #1
 800f942:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f946:	fb03 f202 	mul.w	r2, r3, r2
 800f94a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f94e:	fb92 f3f3 	sdiv	r3, r2, r3
 800f952:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                        (void_t) gos_traceTraceFormatted(
                                GOS_TRUE,
                                "SDH chunk counter [%u/%u] ... %3u.%02u%%\r\n",
                                chunkDesc.chunkIdx + 1,
 800f956:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
                        (void_t) gos_traceTraceFormatted(
 800f958:	1c58      	adds	r0, r3, #1
 800f95a:	f8b7 40be 	ldrh.w	r4, [r7, #190]	@ 0xbe
 800f95e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f962:	4aae      	ldr	r2, [pc, #696]	@ (800fc1c <svl_sdhDaemon+0x64c>)
 800f964:	fba2 2303 	umull	r2, r3, r2, r3
 800f968:	0959      	lsrs	r1, r3, #5
 800f96a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f96e:	4bab      	ldr	r3, [pc, #684]	@ (800fc1c <svl_sdhDaemon+0x64c>)
 800f970:	fba3 5302 	umull	r5, r3, r3, r2
 800f974:	095b      	lsrs	r3, r3, #5
 800f976:	2564      	movs	r5, #100	@ 0x64
 800f978:	fb05 f303 	mul.w	r3, r5, r3
 800f97c:	1ad3      	subs	r3, r2, r3
 800f97e:	9301      	str	r3, [sp, #4]
 800f980:	9100      	str	r1, [sp, #0]
 800f982:	4623      	mov	r3, r4
 800f984:	4602      	mov	r2, r0
 800f986:	49a6      	ldr	r1, [pc, #664]	@ (800fc20 <svl_sdhDaemon+0x650>)
 800f988:	2036      	movs	r0, #54	@ 0x36
 800f98a:	f006 f963 	bl	8015c54 <gos_traceTraceFormatted>
                                percentage % 100
                        );
#endif

                        // Save chunk.
                        (void_t) sdhWriteFunction(
 800f98e:	4ba0      	ldr	r3, [pc, #640]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800f990:	681b      	ldr	r3, [r3, #0]
                                newBinaryDescriptor.binaryLocation + chunkDesc.chunkIdx * SVL_SDH_CHUNK_SIZE,
 800f992:	f8d7 105a 	ldr.w	r1, [r7, #90]	@ 0x5a
 800f996:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800f998:	0292      	lsls	r2, r2, #10
                        (void_t) sdhWriteFunction(
 800f99a:	1888      	adds	r0, r1, r2
 800f99c:	49a1      	ldr	r1, [pc, #644]	@ (800fc24 <svl_sdhDaemon+0x654>)
 800f99e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f9a2:	4798      	blx	r3
                                (u8_t*)(/*controlMsg.pData*/sdhBuffer + sizeof(chunkDesc)),
                                SVL_SDH_CHUNK_SIZE
                        );

                        // Send response.
                        chunkDesc.result = 1;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&chunkDesc, sizeof(chunkDesc));
 800f9aa:	4b9a      	ldr	r3, [pc, #616]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800f9ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f9b0:	6812      	ldr	r2, [r2, #0]
 800f9b2:	4611      	mov	r1, r2
 800f9b4:	8019      	strh	r1, [r3, #0]
 800f9b6:	3302      	adds	r3, #2
 800f9b8:	0c12      	lsrs	r2, r2, #16
 800f9ba:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800f9bc:	489a      	ldr	r0, [pc, #616]	@ (800fc28 <svl_sdhDaemon+0x658>)
 800f9be:	f006 fbfb 	bl	80161b8 <gos_triggerIncrement>

                        // Check if all chunks have been received.
                        if (chunkDesc.chunkIdx == (numOfChunks - 1))
 800f9c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	f040 8106 	bne.w	800fbde <svl_sdhDaemon+0x60e>
                        {
#if SVL_SDH_TRACE_LEVEL > 0
                            (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download finished.\r\n");
 800f9d2:	4996      	ldr	r1, [pc, #600]	@ (800fc2c <svl_sdhDaemon+0x65c>)
 800f9d4:	2036      	movs	r0, #54	@ 0x36
 800f9d6:	f006 f819 	bl	8015a0c <gos_traceTrace>
#endif
                            (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f9da:	4b8c      	ldr	r3, [pc, #560]	@ (800fc0c <svl_sdhDaemon+0x63c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f107 0118 	add.w	r1, r7, #24
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	4798      	blx	r3
                            numOfBinaries++;
 800f9e8:	8b3b      	ldrh	r3, [r7, #24]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	833b      	strh	r3, [r7, #24]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800f9f0:	4b87      	ldr	r3, [pc, #540]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f107 0118 	add.w	r1, r7, #24
 800f9f8:	2202      	movs	r2, #2
 800f9fa:	2000      	movs	r0, #0
 800f9fc:	4798      	blx	r3

                            sdhState = SDH_STATE_IDLE;
 800f9fe:	4b8c      	ldr	r3, [pc, #560]	@ (800fc30 <svl_sdhDaemon+0x660>)
 800fa00:	2200      	movs	r2, #0
 800fa02:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            // Continue reception.
                        }
                    }
                    break;
 800fa04:	e0eb      	b.n	800fbde <svl_sdhDaemon+0x60e>
                }
                case SDH_STATE_BINARY_ERASE_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800fa06:	4b81      	ldr	r3, [pc, #516]	@ (800fc0c <svl_sdhDaemon+0x63c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 80e9 	beq.w	800fbe2 <svl_sdhDaemon+0x612>
 800fa10:	4b7f      	ldr	r3, [pc, #508]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f000 80e4 	beq.w	800fbe2 <svl_sdhDaemon+0x612>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 800fa1a:	4b7e      	ldr	r3, [pc, #504]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800fa1c:	881b      	ldrh	r3, [r3, #0]
 800fa1e:	837b      	strh	r3, [r7, #26]
                        (void_t) memcpy((void_t*)&defragment, (void_t*)sdhBuffer + sizeof(index), sizeof(defragment));
 800fa20:	4b84      	ldr	r3, [pc, #528]	@ (800fc34 <svl_sdhDaemon+0x664>)
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	75bb      	strb	r3, [r7, #22]
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary erase request received. Index: %u\r\n", index);
 800fa26:	8b7b      	ldrh	r3, [r7, #26]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	4983      	ldr	r1, [pc, #524]	@ (800fc38 <svl_sdhDaemon+0x668>)
 800fa2c:	2036      	movs	r0, #54	@ 0x36
 800fa2e:	f006 f911 	bl	8015c54 <gos_traceTraceFormatted>
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800fa32:	4b76      	ldr	r3, [pc, #472]	@ (800fc0c <svl_sdhDaemon+0x63c>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f107 0118 	add.w	r1, r7, #24
 800fa3a:	2202      	movs	r2, #2
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	4798      	blx	r3

                        if (index < numOfBinaries)
 800fa40:	8b7a      	ldrh	r2, [r7, #26]
 800fa42:	8b3b      	ldrh	r3, [r7, #24]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	f080 80cc 	bcs.w	800fbe2 <svl_sdhDaemon+0x612>
                        {
                            svl_sdhGetBinaryData(index, &binaryDescriptor);
 800fa4a:	8b7b      	ldrh	r3, [r7, #26]
 800fa4c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800fa50:	4611      	mov	r1, r2
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff fd2e 	bl	800f4b4 <svl_sdhGetBinaryData>

                            // Start address to copy is the binary location of
                            // the binary that is being deleted.
                            startAddress = binaryDescriptor.binaryLocation;
 800fa58:	f8d7 3096 	ldr.w	r3, [r7, #150]	@ 0x96
 800fa5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

                            // Reorganize descriptors and binary.
                            if (index != (numOfBinaries - 1))
 800fa60:	8b7b      	ldrh	r3, [r7, #26]
 800fa62:	461a      	mov	r2, r3
 800fa64:	8b3b      	ldrh	r3, [r7, #24]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	f000 809c 	beq.w	800fba6 <svl_sdhDaemon+0x5d6>
                            {
                                // Move descriptors.
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 800fa6e:	2300      	movs	r3, #0
 800fa70:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 800fa74:	e01c      	b.n	800fab0 <svl_sdhDaemon+0x4e0>
                                {
                                    (void_t) svl_sdhGetBinaryData((index + 1 + idx), &binaryDescriptor);
 800fa76:	8b7a      	ldrh	r2, [r7, #26]
 800fa78:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800fa7c:	4413      	add	r3, r2
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	3301      	adds	r3, #1
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800fa88:	4611      	mov	r1, r2
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7ff fd12 	bl	800f4b4 <svl_sdhGetBinaryData>
                                    (void_t) svl_sdhSetBinaryData((index + idx), &binaryDescriptor);
 800fa90:	8b7a      	ldrh	r2, [r7, #26]
 800fa92:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800fa96:	4413      	add	r3, r2
 800fa98:	b29b      	uxth	r3, r3
 800fa9a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800fa9e:	4611      	mov	r1, r2
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff fd3b 	bl	800f51c <svl_sdhSetBinaryData>
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 800faa6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800faaa:	3301      	adds	r3, #1
 800faac:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 800fab0:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 800fab4:	8b3b      	ldrh	r3, [r7, #24]
 800fab6:	4619      	mov	r1, r3
 800fab8:	8b7b      	ldrh	r3, [r7, #26]
 800faba:	3301      	adds	r3, #1
 800fabc:	1acb      	subs	r3, r1, r3
 800fabe:	429a      	cmp	r2, r3
 800fac0:	dbd9      	blt.n	800fa76 <svl_sdhDaemon+0x4a6>
                                }

                                // Move binaries and update descriptor data.
                                // Prepare variables.
                                if (defragment == GOS_TRUE)
 800fac2:	7dbb      	ldrb	r3, [r7, #22]
 800fac4:	2b36      	cmp	r3, #54	@ 0x36
 800fac6:	d16e      	bne.n	800fba6 <svl_sdhDaemon+0x5d6>
                                {
                                    (void_t) svl_sdhGetBinaryData(index, &binaryDescriptor);
 800fac8:	8b7b      	ldrh	r3, [r7, #26]
 800faca:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800face:	4611      	mov	r1, r2
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff fcef 	bl	800f4b4 <svl_sdhGetBinaryData>
                                    fromAddress = binaryDescriptor.binaryLocation;
 800fad6:	f8d7 3096 	ldr.w	r3, [r7, #150]	@ 0x96
 800fada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

                                    (void_t) svl_sdhGetBinaryData((numOfBinaries - 2), &binaryDescriptor);
 800fade:	8b3b      	ldrh	r3, [r7, #24]
 800fae0:	3b02      	subs	r3, #2
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800fae8:	4611      	mov	r1, r2
 800faea:	4618      	mov	r0, r3
 800faec:	f7ff fce2 	bl	800f4b4 <svl_sdhGetBinaryData>
                                    totalCopySize = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size - fromAddress;
 800faf0:	f8d7 2096 	ldr.w	r2, [r7, #150]	@ 0x96
 800faf4:	f8d7 309e 	ldr.w	r3, [r7, #158]	@ 0x9e
 800faf8:	441a      	add	r2, r3
 800fafa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                                    // Move in chunks using SDH buffer.
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 800fb04:	2300      	movs	r3, #0
 800fb06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb0a:	e045      	b.n	800fb98 <svl_sdhDaemon+0x5c8>
                                    {
                                        if ((cntr + 1) * SVL_SDH_CHUNK_SIZE < totalCopySize)
 800fb0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb10:	3301      	adds	r3, #1
 800fb12:	029b      	lsls	r3, r3, #10
 800fb14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d918      	bls.n	800fb4e <svl_sdhDaemon+0x57e>
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 800fb1c:	4b3b      	ldr	r3, [pc, #236]	@ (800fc0c <svl_sdhDaemon+0x63c>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb24:	0291      	lsls	r1, r2, #10
 800fb26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb2a:	1888      	adds	r0, r1, r2
 800fb2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fb30:	4938      	ldr	r1, [pc, #224]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800fb32:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 800fb34:	4b36      	ldr	r3, [pc, #216]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb3c:	0291      	lsls	r1, r2, #10
 800fb3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb42:	1888      	adds	r0, r1, r2
 800fb44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800fb48:	4932      	ldr	r1, [pc, #200]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800fb4a:	4798      	blx	r3
 800fb4c:	e01f      	b.n	800fb8e <svl_sdhDaemon+0x5be>
                                        }
                                        else
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 800fb4e:	4b2f      	ldr	r3, [pc, #188]	@ (800fc0c <svl_sdhDaemon+0x63c>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb56:	0291      	lsls	r1, r2, #10
 800fb58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb5c:	1888      	adds	r0, r1, r2
 800fb5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb62:	0292      	lsls	r2, r2, #10
 800fb64:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800fb68:	1a8a      	subs	r2, r1, r2
 800fb6a:	492a      	ldr	r1, [pc, #168]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800fb6c:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 800fb6e:	4b28      	ldr	r3, [pc, #160]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb76:	0291      	lsls	r1, r2, #10
 800fb78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb7c:	1888      	adds	r0, r1, r2
 800fb7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800fb82:	0292      	lsls	r2, r2, #10
 800fb84:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800fb88:	1a8a      	subs	r2, r1, r2
 800fb8a:	4922      	ldr	r1, [pc, #136]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800fb8c:	4798      	blx	r3
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 800fb8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb92:	3301      	adds	r3, #1
 800fb94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fb9c:	029b      	lsls	r3, r3, #10
 800fb9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d8b2      	bhi.n	800fb0c <svl_sdhDaemon+0x53c>
                            {
                                // No moving required.
                            }

                            // Decrease number of binaries.
                            numOfBinaries--;
 800fba6:	8b3b      	ldrh	r3, [r7, #24]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	833b      	strh	r3, [r7, #24]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800fbae:	4b18      	ldr	r3, [pc, #96]	@ (800fc10 <svl_sdhDaemon+0x640>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f107 0118 	add.w	r1, r7, #24
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	2000      	movs	r0, #0
 800fbba:	4798      	blx	r3

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 800fbbc:	8b7a      	ldrh	r2, [r7, #26]
 800fbbe:	4b15      	ldr	r3, [pc, #84]	@ (800fc14 <svl_sdhDaemon+0x644>)
 800fbc0:	801a      	strh	r2, [r3, #0]
                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 800fbc2:	4819      	ldr	r0, [pc, #100]	@ (800fc28 <svl_sdhDaemon+0x658>)
 800fbc4:	f006 faf8 	bl	80161b8 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 800fbc8:	e00b      	b.n	800fbe2 <svl_sdhDaemon+0x612>
                }
                default: break;
 800fbca:	bf00      	nop
 800fbcc:	e00a      	b.n	800fbe4 <svl_sdhDaemon+0x614>
                    break;
 800fbce:	bf00      	nop
 800fbd0:	e008      	b.n	800fbe4 <svl_sdhDaemon+0x614>
                    break;
 800fbd2:	bf00      	nop
 800fbd4:	e006      	b.n	800fbe4 <svl_sdhDaemon+0x614>
                    break;
 800fbd6:	bf00      	nop
 800fbd8:	e004      	b.n	800fbe4 <svl_sdhDaemon+0x614>
                    break;
 800fbda:	bf00      	nop
 800fbdc:	e002      	b.n	800fbe4 <svl_sdhDaemon+0x614>
                    break;
 800fbde:	bf00      	nop
 800fbe0:	e000      	b.n	800fbe4 <svl_sdhDaemon+0x614>
                    break;
 800fbe2:	bf00      	nop
            }
            (void_t) gos_triggerReset(&sdhControlTrigger);
 800fbe4:	4815      	ldr	r0, [pc, #84]	@ (800fc3c <svl_sdhDaemon+0x66c>)
 800fbe6:	f006 f9df 	bl	8015fa8 <gos_triggerReset>
 800fbea:	e524      	b.n	800f636 <svl_sdhDaemon+0x66>
        }
        else
        {
            // Timeout.
#if SVL_SDH_TRACE_LEVEL > 0
            if (sdhState != SDH_STATE_IDLE)
 800fbec:	4b10      	ldr	r3, [pc, #64]	@ (800fc30 <svl_sdhDaemon+0x660>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d003      	beq.n	800fbfc <svl_sdhDaemon+0x62c>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "SDH timeout.\r\n");
 800fbf4:	4912      	ldr	r1, [pc, #72]	@ (800fc40 <svl_sdhDaemon+0x670>)
 800fbf6:	2036      	movs	r0, #54	@ 0x36
 800fbf8:	f005 ff08 	bl	8015a0c <gos_traceTrace>
            else
            {
                // Just message RX timeout in idle state.
            }
#endif
            sdhState = SDH_STATE_IDLE;
 800fbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <svl_sdhDaemon+0x660>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskSleep(100);
 800fc02:	2064      	movs	r0, #100	@ 0x64
 800fc04:	f001 fdd2 	bl	80117ac <gos_taskSleep>
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800fc08:	e515      	b.n	800f636 <svl_sdhDaemon+0x66>
 800fc0a:	bf00      	nop
 800fc0c:	200059d0 	.word	0x200059d0
 800fc10:	200059d4 	.word	0x200059d4
 800fc14:	200059d8 	.word	0x200059d8
 800fc18:	080198f0 	.word	0x080198f0
 800fc1c:	51eb851f 	.word	0x51eb851f
 800fc20:	08019918 	.word	0x08019918
 800fc24:	200059db 	.word	0x200059db
 800fc28:	20005e24 	.word	0x20005e24
 800fc2c:	08019944 	.word	0x08019944
 800fc30:	20005e30 	.word	0x20005e30
 800fc34:	200059da 	.word	0x200059da
 800fc38:	08019964 	.word	0x08019964
 800fc3c:	20005e18 	.word	0x20005e18
 800fc40:	08019994 	.word	0x08019994

0800fc44 <svl_sdhSysmonBinaryNumReqCallback>:
 * @details Handles the binary number request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryNumReqCallback (void_t)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 800fc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fc88 <svl_sdhSysmonBinaryNumReqCallback+0x44>)
 800fc4c:	2202      	movs	r2, #2
 800fc4e:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fc50:	480e      	ldr	r0, [pc, #56]	@ (800fc8c <svl_sdhSysmonBinaryNumReqCallback+0x48>)
 800fc52:	f006 fab1 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fc56:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	480c      	ldr	r0, [pc, #48]	@ (800fc90 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 800fc5e:	f006 f9fb 	bl	8016058 <gos_triggerWait>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b55      	cmp	r3, #85	@ 0x55
 800fc66:	d109      	bne.n	800fc7c <svl_sdhSysmonBinaryNumReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fc68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	2302      	movs	r3, #2
 800fc70:	4a08      	ldr	r2, [pc, #32]	@ (800fc94 <svl_sdhSysmonBinaryNumReqCallback+0x50>)
 800fc72:	f641 2101 	movw	r1, #6657	@ 0x1a01
 800fc76:	2000      	movs	r0, #0
 800fc78:	f003 fbb8 	bl	80133ec <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fc7c:	4804      	ldr	r0, [pc, #16]	@ (800fc90 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 800fc7e:	f006 f993 	bl	8015fa8 <gos_triggerReset>
}
 800fc82:	bf00      	nop
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20005e31 	.word	0x20005e31
 800fc8c:	20005e18 	.word	0x20005e18
 800fc90:	20005e24 	.word	0x20005e24
 800fc94:	200059d8 	.word	0x200059d8

0800fc98 <svl_sdhSysmonBinaryInfoReqCallback>:
 * @details Handles the binary info request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryInfoReqCallback (void_t)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 800fc9e:	4b0f      	ldr	r3, [pc, #60]	@ (800fcdc <svl_sdhSysmonBinaryInfoReqCallback+0x44>)
 800fca0:	2203      	movs	r2, #3
 800fca2:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fca4:	480e      	ldr	r0, [pc, #56]	@ (800fce0 <svl_sdhSysmonBinaryInfoReqCallback+0x48>)
 800fca6:	f006 fa87 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fcaa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fcae:	2101      	movs	r1, #1
 800fcb0:	480c      	ldr	r0, [pc, #48]	@ (800fce4 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 800fcb2:	f006 f9d1 	bl	8016058 <gos_triggerWait>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b55      	cmp	r3, #85	@ 0x55
 800fcba:	d109      	bne.n	800fcd0 <svl_sdhSysmonBinaryInfoReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fcbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	233a      	movs	r3, #58	@ 0x3a
 800fcc4:	4a08      	ldr	r2, [pc, #32]	@ (800fce8 <svl_sdhSysmonBinaryInfoReqCallback+0x50>)
 800fcc6:	f641 2102 	movw	r1, #6658	@ 0x1a02
 800fcca:	2000      	movs	r0, #0
 800fccc:	f003 fb8e 	bl	80133ec <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fcd0:	4804      	ldr	r0, [pc, #16]	@ (800fce4 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 800fcd2:	f006 f969 	bl	8015fa8 <gos_triggerReset>
}
 800fcd6:	bf00      	nop
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}
 800fcdc:	20005e31 	.word	0x20005e31
 800fce0:	20005e18 	.word	0x20005e18
 800fce4:	20005e24 	.word	0x20005e24
 800fce8:	200059d8 	.word	0x200059d8

0800fcec <svl_sdhSysmonDownloadReqCallback>:
 * @details Handles the download request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonDownloadReqCallback (void_t)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 800fcf2:	4b0f      	ldr	r3, [pc, #60]	@ (800fd30 <svl_sdhSysmonDownloadReqCallback+0x44>)
 800fcf4:	2204      	movs	r2, #4
 800fcf6:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fcf8:	480e      	ldr	r0, [pc, #56]	@ (800fd34 <svl_sdhSysmonDownloadReqCallback+0x48>)
 800fcfa:	f006 fa5d 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fcfe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fd02:	2101      	movs	r1, #1
 800fd04:	480c      	ldr	r0, [pc, #48]	@ (800fd38 <svl_sdhSysmonDownloadReqCallback+0x4c>)
 800fd06:	f006 f9a7 	bl	8016058 <gos_triggerWait>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b55      	cmp	r3, #85	@ 0x55
 800fd0e:	d109      	bne.n	800fd24 <svl_sdhSysmonDownloadReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fd10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	2301      	movs	r3, #1
 800fd18:	4a08      	ldr	r2, [pc, #32]	@ (800fd3c <svl_sdhSysmonDownloadReqCallback+0x50>)
 800fd1a:	f641 2103 	movw	r1, #6659	@ 0x1a03
 800fd1e:	2000      	movs	r0, #0
 800fd20:	f003 fb64 	bl	80133ec <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fd24:	4804      	ldr	r0, [pc, #16]	@ (800fd38 <svl_sdhSysmonDownloadReqCallback+0x4c>)
 800fd26:	f006 f93f 	bl	8015fa8 <gos_triggerReset>
}
 800fd2a:	bf00      	nop
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	20005e31 	.word	0x20005e31
 800fd34:	20005e18 	.word	0x20005e18
 800fd38:	20005e24 	.word	0x20005e24
 800fd3c:	200059d8 	.word	0x200059d8

0800fd40 <svl_sdhSysmonBinaryChunkReqCallback>:
 * @details Handles the binary chunk request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryChunkReqCallback (void_t)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 800fd46:	4b0f      	ldr	r3, [pc, #60]	@ (800fd84 <svl_sdhSysmonBinaryChunkReqCallback+0x44>)
 800fd48:	2201      	movs	r2, #1
 800fd4a:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fd4c:	480e      	ldr	r0, [pc, #56]	@ (800fd88 <svl_sdhSysmonBinaryChunkReqCallback+0x48>)
 800fd4e:	f006 fa33 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 800fd52:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fd56:	2101      	movs	r1, #1
 800fd58:	480c      	ldr	r0, [pc, #48]	@ (800fd8c <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 800fd5a:	f006 f97d 	bl	8016058 <gos_triggerWait>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b55      	cmp	r3, #85	@ 0x55
 800fd62:	d109      	bne.n	800fd78 <svl_sdhSysmonBinaryChunkReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fd64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	2303      	movs	r3, #3
 800fd6c:	4a08      	ldr	r2, [pc, #32]	@ (800fd90 <svl_sdhSysmonBinaryChunkReqCallback+0x50>)
 800fd6e:	f641 2104 	movw	r1, #6660	@ 0x1a04
 800fd72:	2000      	movs	r0, #0
 800fd74:	f003 fb3a 	bl	80133ec <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fd78:	4804      	ldr	r0, [pc, #16]	@ (800fd8c <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 800fd7a:	f006 f915 	bl	8015fa8 <gos_triggerReset>
}
 800fd7e:	bf00      	nop
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	20005e31 	.word	0x20005e31
 800fd88:	20005e18 	.word	0x20005e18
 800fd8c:	20005e24 	.word	0x20005e24
 800fd90:	200059d8 	.word	0x200059d8

0800fd94 <svl_sdhSysmonSoftwareInstallReqCallback>:
 * @details Handles the install request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonSoftwareInstallReqCallback (void_t)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 800fd9a:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd8 <svl_sdhSysmonSoftwareInstallReqCallback+0x44>)
 800fd9c:	2205      	movs	r2, #5
 800fd9e:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fda0:	480e      	ldr	r0, [pc, #56]	@ (800fddc <svl_sdhSysmonSoftwareInstallReqCallback+0x48>)
 800fda2:	f006 fa09 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fda6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fdaa:	2101      	movs	r1, #1
 800fdac:	480c      	ldr	r0, [pc, #48]	@ (800fde0 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 800fdae:	f006 f953 	bl	8016058 <gos_triggerWait>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b55      	cmp	r3, #85	@ 0x55
 800fdb6:	d109      	bne.n	800fdcc <svl_sdhSysmonSoftwareInstallReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fdb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	2302      	movs	r3, #2
 800fdc0:	4a08      	ldr	r2, [pc, #32]	@ (800fde4 <svl_sdhSysmonSoftwareInstallReqCallback+0x50>)
 800fdc2:	f641 2105 	movw	r1, #6661	@ 0x1a05
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f003 fb10 	bl	80133ec <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fdcc:	4804      	ldr	r0, [pc, #16]	@ (800fde0 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 800fdce:	f006 f8eb 	bl	8015fa8 <gos_triggerReset>
}
 800fdd2:	bf00      	nop
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	20005e31 	.word	0x20005e31
 800fddc:	20005e18 	.word	0x20005e18
 800fde0:	20005e24 	.word	0x20005e24
 800fde4:	200059d8 	.word	0x200059d8

0800fde8 <svl_sdhSysmonBinaryEraseReqCallback>:
 * @details Handles the erase request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryEraseReqCallback (void_t)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af02      	add	r7, sp, #8
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 800fdee:	4b0f      	ldr	r3, [pc, #60]	@ (800fe2c <svl_sdhSysmonBinaryEraseReqCallback+0x44>)
 800fdf0:	2206      	movs	r2, #6
 800fdf2:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fdf4:	480e      	ldr	r0, [pc, #56]	@ (800fe30 <svl_sdhSysmonBinaryEraseReqCallback+0x48>)
 800fdf6:	f006 f9df 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 800fdfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdfe:	2101      	movs	r1, #1
 800fe00:	480c      	ldr	r0, [pc, #48]	@ (800fe34 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 800fe02:	f006 f929 	bl	8016058 <gos_triggerWait>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b55      	cmp	r3, #85	@ 0x55
 800fe0a:	d109      	bne.n	800fe20 <svl_sdhSysmonBinaryEraseReqCallback+0x38>
    {
        (void_t) gos_gcpTransmitMessage(
 800fe0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	2302      	movs	r3, #2
 800fe14:	4a08      	ldr	r2, [pc, #32]	@ (800fe38 <svl_sdhSysmonBinaryEraseReqCallback+0x50>)
 800fe16:	f641 2106 	movw	r1, #6662	@ 0x1a06
 800fe1a:	2000      	movs	r0, #0
 800fe1c:	f003 fae6 	bl	80133ec <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fe20:	4804      	ldr	r0, [pc, #16]	@ (800fe34 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 800fe22:	f006 f8c1 	bl	8015fa8 <gos_triggerReset>
}
 800fe26:	bf00      	nop
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	20005e31 	.word	0x20005e31
 800fe30:	20005e18 	.word	0x20005e18
 800fe34:	20005e24 	.word	0x20005e24
 800fe38:	200059d8 	.word	0x200059d8

0800fe3c <svl_sdhIplBinaryNumReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhIplBinaryNumReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b084      	sub	sp, #16
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 800fe48:	4b0d      	ldr	r3, [pc, #52]	@ (800fe80 <svl_sdhIplBinaryNumReqCallback+0x44>)
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fe4e:	480d      	ldr	r0, [pc, #52]	@ (800fe84 <svl_sdhIplBinaryNumReqCallback+0x48>)
 800fe50:	f006 f9b2 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fe54:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fe58:	2101      	movs	r1, #1
 800fe5a:	480b      	ldr	r0, [pc, #44]	@ (800fe88 <svl_sdhIplBinaryNumReqCallback+0x4c>)
 800fe5c:	f006 f8fc 	bl	8016058 <gos_triggerWait>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b55      	cmp	r3, #85	@ 0x55
 800fe64:	d105      	bne.n	800fe72 <svl_sdhIplBinaryNumReqCallback+0x36>
    {
        (void_t) svl_iplSendMessage(0xA02, sdhBuffer, sizeof(u16_t));
 800fe66:	2202      	movs	r2, #2
 800fe68:	4908      	ldr	r1, [pc, #32]	@ (800fe8c <svl_sdhIplBinaryNumReqCallback+0x50>)
 800fe6a:	f640 2002 	movw	r0, #2562	@ 0xa02
 800fe6e:	f7fe f959 	bl	800e124 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fe72:	4805      	ldr	r0, [pc, #20]	@ (800fe88 <svl_sdhIplBinaryNumReqCallback+0x4c>)
 800fe74:	f006 f898 	bl	8015fa8 <gos_triggerReset>
}
 800fe78:	bf00      	nop
 800fe7a:	3710      	adds	r7, #16
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	20005e31 	.word	0x20005e31
 800fe84:	20005e18 	.word	0x20005e18
 800fe88:	20005e24 	.word	0x20005e24
 800fe8c:	200059d8 	.word	0x200059d8

0800fe90 <svl_sdhIplBinaryInfoReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryInfoReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 800fe9c:	4b13      	ldr	r3, [pc, #76]	@ (800feec <svl_sdhIplBinaryInfoReqCallback+0x5c>)
 800fe9e:	2203      	movs	r2, #3
 800fea0:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800fea8:	d902      	bls.n	800feb0 <svl_sdhIplBinaryInfoReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800feaa:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800feae:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800feb0:	68ba      	ldr	r2, [r7, #8]
 800feb2:	68f9      	ldr	r1, [r7, #12]
 800feb4:	480e      	ldr	r0, [pc, #56]	@ (800fef0 <svl_sdhIplBinaryInfoReqCallback+0x60>)
 800feb6:	f007 f978 	bl	80171aa <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800feba:	480e      	ldr	r0, [pc, #56]	@ (800fef4 <svl_sdhIplBinaryInfoReqCallback+0x64>)
 800febc:	f006 f97c 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800fec0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800fec4:	2101      	movs	r1, #1
 800fec6:	480c      	ldr	r0, [pc, #48]	@ (800fef8 <svl_sdhIplBinaryInfoReqCallback+0x68>)
 800fec8:	f006 f8c6 	bl	8016058 <gos_triggerWait>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b55      	cmp	r3, #85	@ 0x55
 800fed0:	d105      	bne.n	800fede <svl_sdhIplBinaryInfoReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA12, (u8_t*)sdhBuffer, sizeof(svl_sdhBinaryDesc_t));
 800fed2:	223a      	movs	r2, #58	@ 0x3a
 800fed4:	4906      	ldr	r1, [pc, #24]	@ (800fef0 <svl_sdhIplBinaryInfoReqCallback+0x60>)
 800fed6:	f640 2012 	movw	r0, #2578	@ 0xa12
 800feda:	f7fe f923 	bl	800e124 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800fede:	4806      	ldr	r0, [pc, #24]	@ (800fef8 <svl_sdhIplBinaryInfoReqCallback+0x68>)
 800fee0:	f006 f862 	bl	8015fa8 <gos_triggerReset>
}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	20005e31 	.word	0x20005e31
 800fef0:	200059d8 	.word	0x200059d8
 800fef4:	20005e18 	.word	0x20005e18
 800fef8:	20005e24 	.word	0x20005e24

0800fefc <svl_sdhIplDownloadReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplDownloadReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 800ff08:	4b13      	ldr	r3, [pc, #76]	@ (800ff58 <svl_sdhIplDownloadReqCallback+0x5c>)
 800ff0a:	2204      	movs	r2, #4
 800ff0c:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800ff14:	d902      	bls.n	800ff1c <svl_sdhIplDownloadReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800ff16:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800ff1a:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800ff1c:	68ba      	ldr	r2, [r7, #8]
 800ff1e:	68f9      	ldr	r1, [r7, #12]
 800ff20:	480e      	ldr	r0, [pc, #56]	@ (800ff5c <svl_sdhIplDownloadReqCallback+0x60>)
 800ff22:	f007 f942 	bl	80171aa <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800ff26:	480e      	ldr	r0, [pc, #56]	@ (800ff60 <svl_sdhIplDownloadReqCallback+0x64>)
 800ff28:	f006 f946 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 800ff2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ff30:	2101      	movs	r1, #1
 800ff32:	480c      	ldr	r0, [pc, #48]	@ (800ff64 <svl_sdhIplDownloadReqCallback+0x68>)
 800ff34:	f006 f890 	bl	8016058 <gos_triggerWait>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b55      	cmp	r3, #85	@ 0x55
 800ff3c:	d105      	bne.n	800ff4a <svl_sdhIplDownloadReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA22, sdhBuffer, sizeof(u8_t));
 800ff3e:	2201      	movs	r2, #1
 800ff40:	4906      	ldr	r1, [pc, #24]	@ (800ff5c <svl_sdhIplDownloadReqCallback+0x60>)
 800ff42:	f640 2022 	movw	r0, #2594	@ 0xa22
 800ff46:	f7fe f8ed 	bl	800e124 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800ff4a:	4806      	ldr	r0, [pc, #24]	@ (800ff64 <svl_sdhIplDownloadReqCallback+0x68>)
 800ff4c:	f006 f82c 	bl	8015fa8 <gos_triggerReset>
}
 800ff50:	bf00      	nop
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	20005e31 	.word	0x20005e31
 800ff5c:	200059d8 	.word	0x200059d8
 800ff60:	20005e18 	.word	0x20005e18
 800ff64:	20005e24 	.word	0x20005e24

0800ff68 <svl_sdhIplBinaryChunkReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryChunkReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 800ff74:	4b13      	ldr	r3, [pc, #76]	@ (800ffc4 <svl_sdhIplBinaryChunkReqCallback+0x5c>)
 800ff76:	2201      	movs	r2, #1
 800ff78:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800ff80:	d902      	bls.n	800ff88 <svl_sdhIplBinaryChunkReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800ff82:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800ff86:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	68f9      	ldr	r1, [r7, #12]
 800ff8c:	480e      	ldr	r0, [pc, #56]	@ (800ffc8 <svl_sdhIplBinaryChunkReqCallback+0x60>)
 800ff8e:	f007 f90c 	bl	80171aa <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800ff92:	480e      	ldr	r0, [pc, #56]	@ (800ffcc <svl_sdhIplBinaryChunkReqCallback+0x64>)
 800ff94:	f006 f910 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 800ff98:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	480c      	ldr	r0, [pc, #48]	@ (800ffd0 <svl_sdhIplBinaryChunkReqCallback+0x68>)
 800ffa0:	f006 f85a 	bl	8016058 <gos_triggerWait>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b55      	cmp	r3, #85	@ 0x55
 800ffa8:	d105      	bne.n	800ffb6 <svl_sdhIplBinaryChunkReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA32, sdhBuffer, sizeof(svl_sdhChunkDesc_t));
 800ffaa:	2203      	movs	r2, #3
 800ffac:	4906      	ldr	r1, [pc, #24]	@ (800ffc8 <svl_sdhIplBinaryChunkReqCallback+0x60>)
 800ffae:	f640 2032 	movw	r0, #2610	@ 0xa32
 800ffb2:	f7fe f8b7 	bl	800e124 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 800ffb6:	4806      	ldr	r0, [pc, #24]	@ (800ffd0 <svl_sdhIplBinaryChunkReqCallback+0x68>)
 800ffb8:	f005 fff6 	bl	8015fa8 <gos_triggerReset>
}
 800ffbc:	bf00      	nop
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	20005e31 	.word	0x20005e31
 800ffc8:	200059d8 	.word	0x200059d8
 800ffcc:	20005e18 	.word	0x20005e18
 800ffd0:	20005e24 	.word	0x20005e24

0800ffd4 <svl_sdhIplSoftwareInstallReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplSoftwareInstallReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 800ffe0:	4b13      	ldr	r3, [pc, #76]	@ (8010030 <svl_sdhIplSoftwareInstallReqCallback+0x5c>)
 800ffe2:	2205      	movs	r2, #5
 800ffe4:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 800ffec:	d902      	bls.n	800fff4 <svl_sdhIplSoftwareInstallReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 800ffee:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800fff2:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	68f9      	ldr	r1, [r7, #12]
 800fff8:	480e      	ldr	r0, [pc, #56]	@ (8010034 <svl_sdhIplSoftwareInstallReqCallback+0x60>)
 800fffa:	f007 f8d6 	bl	80171aa <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 800fffe:	480e      	ldr	r0, [pc, #56]	@ (8010038 <svl_sdhIplSoftwareInstallReqCallback+0x64>)
 8010000:	f006 f8da 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 8010004:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010008:	2101      	movs	r1, #1
 801000a:	480c      	ldr	r0, [pc, #48]	@ (801003c <svl_sdhIplSoftwareInstallReqCallback+0x68>)
 801000c:	f006 f824 	bl	8016058 <gos_triggerWait>
 8010010:	4603      	mov	r3, r0
 8010012:	2b55      	cmp	r3, #85	@ 0x55
 8010014:	d105      	bne.n	8010022 <svl_sdhIplSoftwareInstallReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA42, sdhBuffer, sizeof(u16_t));
 8010016:	2202      	movs	r2, #2
 8010018:	4906      	ldr	r1, [pc, #24]	@ (8010034 <svl_sdhIplSoftwareInstallReqCallback+0x60>)
 801001a:	f640 2042 	movw	r0, #2626	@ 0xa42
 801001e:	f7fe f881 	bl	800e124 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8010022:	4806      	ldr	r0, [pc, #24]	@ (801003c <svl_sdhIplSoftwareInstallReqCallback+0x68>)
 8010024:	f005 ffc0 	bl	8015fa8 <gos_triggerReset>
}
 8010028:	bf00      	nop
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	20005e31 	.word	0x20005e31
 8010034:	200059d8 	.word	0x200059d8
 8010038:	20005e18 	.word	0x20005e18
 801003c:	20005e24 	.word	0x20005e24

08010040 <svl_sdhIplBinaryEraseReqCallback>:
 * @param     crc   CRC of the received data.
 *
 * @return    -
 */
GOS_STATIC void_t svl_sdhIplBinaryEraseReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 801004c:	4b13      	ldr	r3, [pc, #76]	@ (801009c <svl_sdhIplBinaryEraseReqCallback+0x5c>)
 801004e:	2206      	movs	r2, #6
 8010050:	701a      	strb	r2, [r3, #0]

    if (size > SVL_SDH_BUFFER_SIZE)
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8010058:	d902      	bls.n	8010060 <svl_sdhIplBinaryEraseReqCallback+0x20>
    {
        size = SVL_SDH_BUFFER_SIZE;
 801005a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 801005e:	60bb      	str	r3, [r7, #8]
    else
    {
        // Size check OK.
    }

    (void_t) memcpy((void_t*)sdhBuffer, (void_t*)pData, size);
 8010060:	68ba      	ldr	r2, [r7, #8]
 8010062:	68f9      	ldr	r1, [r7, #12]
 8010064:	480e      	ldr	r0, [pc, #56]	@ (80100a0 <svl_sdhIplBinaryEraseReqCallback+0x60>)
 8010066:	f007 f8a0 	bl	80171aa <memcpy>

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 801006a:	480e      	ldr	r0, [pc, #56]	@ (80100a4 <svl_sdhIplBinaryEraseReqCallback+0x64>)
 801006c:	f006 f8a4 	bl	80161b8 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 8010070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010074:	2101      	movs	r1, #1
 8010076:	480c      	ldr	r0, [pc, #48]	@ (80100a8 <svl_sdhIplBinaryEraseReqCallback+0x68>)
 8010078:	f005 ffee 	bl	8016058 <gos_triggerWait>
 801007c:	4603      	mov	r3, r0
 801007e:	2b55      	cmp	r3, #85	@ 0x55
 8010080:	d105      	bne.n	801008e <svl_sdhIplBinaryEraseReqCallback+0x4e>
    {
        (void_t) svl_iplSendMessage(0xA52, sdhBuffer, sizeof(u16_t));
 8010082:	2202      	movs	r2, #2
 8010084:	4906      	ldr	r1, [pc, #24]	@ (80100a0 <svl_sdhIplBinaryEraseReqCallback+0x60>)
 8010086:	f640 2052 	movw	r0, #2642	@ 0xa52
 801008a:	f7fe f84b 	bl	800e124 <svl_iplSendMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 801008e:	4806      	ldr	r0, [pc, #24]	@ (80100a8 <svl_sdhIplBinaryEraseReqCallback+0x68>)
 8010090:	f005 ff8a 	bl	8015fa8 <gos_triggerReset>
}
 8010094:	bf00      	nop
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	20005e31 	.word	0x20005e31
 80100a0:	200059d8 	.word	0x200059d8
 80100a4:	20005e18 	.word	0x20005e18
 80100a8:	20005e24 	.word	0x20005e24

080100ac <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80100b4:	23ae      	movs	r3, #174	@ 0xae
 80100b6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d006      	beq.n	80100cc <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80100be:	221c      	movs	r2, #28
 80100c0:	6879      	ldr	r1, [r7, #4]
 80100c2:	4805      	ldr	r0, [pc, #20]	@ (80100d8 <gos_driverInit+0x2c>)
 80100c4:	f007 f871 	bl	80171aa <memcpy>
        driverInitResult = GOS_SUCCESS;
 80100c8:	2355      	movs	r3, #85	@ 0x55
 80100ca:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 80100cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	20005e34 	.word	0x20005e34

080100dc <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 80100e4:	23ae      	movs	r3, #174	@ 0xae
 80100e6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 80100e8:	4b07      	ldr	r3, [pc, #28]	@ (8010108 <gos_traceDriverTransmitString+0x2c>)
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d005      	beq.n	80100fc <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 80100f0:	4b05      	ldr	r3, [pc, #20]	@ (8010108 <gos_traceDriverTransmitString+0x2c>)
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	4798      	blx	r3
 80100f8:	4603      	mov	r3, r0
 80100fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 80100fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	20005e34 	.word	0x20005e34

0801010c <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8010114:	23ae      	movs	r3, #174	@ 0xae
 8010116:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 8010118:	4b07      	ldr	r3, [pc, #28]	@ (8010138 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d005      	beq.n	801012c <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 8010120:	4b05      	ldr	r3, [pc, #20]	@ (8010138 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	4798      	blx	r3
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 801012c:	7bfb      	ldrb	r3, [r7, #15]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	20005e34 	.word	0x20005e34

0801013c <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 8010142:	23ae      	movs	r3, #174	@ 0xae
 8010144:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 8010146:	2301      	movs	r3, #1
 8010148:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801014a:	2301      	movs	r3, #1
 801014c:	80fb      	strh	r3, [r7, #6]
 801014e:	e038      	b.n	80101c2 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 8010150:	88fb      	ldrh	r3, [r7, #6]
 8010152:	4a6b      	ldr	r2, [pc, #428]	@ (8010300 <gos_kernelInit+0x1c4>)
 8010154:	216a      	movs	r1, #106	@ 0x6a
 8010156:	fb01 f303 	mul.w	r3, r1, r3
 801015a:	4413      	add	r3, r2
 801015c:	2200      	movs	r2, #0
 801015e:	701a      	strb	r2, [r3, #0]
 8010160:	2200      	movs	r2, #0
 8010162:	705a      	strb	r2, [r3, #1]
 8010164:	2200      	movs	r2, #0
 8010166:	709a      	strb	r2, [r3, #2]
 8010168:	2200      	movs	r2, #0
 801016a:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 801016c:	88fb      	ldrh	r3, [r7, #6]
 801016e:	4a64      	ldr	r2, [pc, #400]	@ (8010300 <gos_kernelInit+0x1c4>)
 8010170:	216a      	movs	r1, #106	@ 0x6a
 8010172:	fb01 f303 	mul.w	r3, r1, r3
 8010176:	4413      	add	r3, r2
 8010178:	3306      	adds	r3, #6
 801017a:	22ff      	movs	r2, #255	@ 0xff
 801017c:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 801017e:	88fb      	ldrh	r3, [r7, #6]
 8010180:	4a5f      	ldr	r2, [pc, #380]	@ (8010300 <gos_kernelInit+0x1c4>)
 8010182:	216a      	movs	r1, #106	@ 0x6a
 8010184:	fb01 f303 	mul.w	r3, r1, r3
 8010188:	4413      	add	r3, r2
 801018a:	3307      	adds	r3, #7
 801018c:	22ff      	movs	r2, #255	@ 0xff
 801018e:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	4a5b      	ldr	r2, [pc, #364]	@ (8010300 <gos_kernelInit+0x1c4>)
 8010194:	216a      	movs	r1, #106	@ 0x6a
 8010196:	fb01 f303 	mul.w	r3, r1, r3
 801019a:	4413      	add	r3, r2
 801019c:	3304      	adds	r3, #4
 801019e:	2205      	movs	r2, #5
 80101a0:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 80101a2:	88fb      	ldrh	r3, [r7, #6]
 80101a4:	4a56      	ldr	r2, [pc, #344]	@ (8010300 <gos_kernelInit+0x1c4>)
 80101a6:	216a      	movs	r1, #106	@ 0x6a
 80101a8:	fb01 f303 	mul.w	r3, r1, r3
 80101ac:	4413      	add	r3, r2
 80101ae:	3328      	adds	r3, #40	@ 0x28
 80101b0:	2200      	movs	r2, #0
 80101b2:	709a      	strb	r2, [r3, #2]
 80101b4:	2200      	movs	r2, #0
 80101b6:	f042 0201 	orr.w	r2, r2, #1
 80101ba:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80101bc:	88fb      	ldrh	r3, [r7, #6]
 80101be:	3301      	adds	r3, #1
 80101c0:	80fb      	strh	r3, [r7, #6]
 80101c2:	88fb      	ldrh	r3, [r7, #6]
 80101c4:	2b0f      	cmp	r3, #15
 80101c6:	d9c3      	bls.n	8010150 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 80101c8:	4b4e      	ldr	r3, [pc, #312]	@ (8010304 <gos_kernelInit+0x1c8>)
 80101ca:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	3b04      	subs	r3, #4
 80101d0:	603b      	str	r3, [r7, #0]
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80101d8:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	3b04      	subs	r3, #4
 80101de:	603b      	str	r3, [r7, #0]
 80101e0:	4a49      	ldr	r2, [pc, #292]	@ (8010308 <gos_kernelInit+0x1cc>)
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	3b04      	subs	r3, #4
 80101ea:	603b      	str	r3, [r7, #0]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	f06f 0202 	mvn.w	r2, #2
 80101f2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	3b04      	subs	r3, #4
 80101f8:	603b      	str	r3, [r7, #0]
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8010200:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	3b04      	subs	r3, #4
 8010206:	603b      	str	r3, [r7, #0]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 801020e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	3b04      	subs	r3, #4
 8010214:	603b      	str	r3, [r7, #0]
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 801021c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	3b04      	subs	r3, #4
 8010222:	603b      	str	r3, [r7, #0]
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 801022a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	3b04      	subs	r3, #4
 8010230:	603b      	str	r3, [r7, #0]
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2200      	movs	r2, #0
 8010236:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	3b04      	subs	r3, #4
 801023c:	603b      	str	r3, [r7, #0]
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8010244:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	3b04      	subs	r3, #4
 801024a:	603b      	str	r3, [r7, #0]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8010252:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	3b04      	subs	r3, #4
 8010258:	603b      	str	r3, [r7, #0]
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8010260:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	3b04      	subs	r3, #4
 8010266:	603b      	str	r3, [r7, #0]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 801026e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	3b04      	subs	r3, #4
 8010274:	603b      	str	r3, [r7, #0]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 801027c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	3b04      	subs	r3, #4
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 801028a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	3b04      	subs	r3, #4
 8010290:	603b      	str	r3, [r7, #0]
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8010298:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	3b04      	subs	r3, #4
 801029e:	603b      	str	r3, [r7, #0]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80102a6:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	4a15      	ldr	r2, [pc, #84]	@ (8010300 <gos_kernelInit+0x1c4>)
 80102ac:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 80102ae:	4b14      	ldr	r3, [pc, #80]	@ (8010300 <gos_kernelInit+0x1c4>)
 80102b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102b2:	4a13      	ldr	r2, [pc, #76]	@ (8010300 <gos_kernelInit+0x1c4>)
 80102b4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80102b8:	b292      	uxth	r2, r2
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	3340      	adds	r3, #64	@ 0x40
 80102be:	4a10      	ldr	r2, [pc, #64]	@ (8010300 <gos_kernelInit+0x1c4>)
 80102c0:	f8c2 3066 	str.w	r3, [r2, #102]	@ 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 80102c4:	4b11      	ldr	r3, [pc, #68]	@ (801030c <gos_kernelInit+0x1d0>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a10      	ldr	r2, [pc, #64]	@ (801030c <gos_kernelInit+0x1d0>)
 80102ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	4b0e      	ldr	r3, [pc, #56]	@ (801030c <gos_kernelInit+0x1d0>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4a0d      	ldr	r2, [pc, #52]	@ (801030c <gos_kernelInit+0x1d0>)
 80102d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80102da:	6013      	str	r3, [r2, #0]
 80102dc:	4b0b      	ldr	r3, [pc, #44]	@ (801030c <gos_kernelInit+0x1d0>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a0a      	ldr	r2, [pc, #40]	@ (801030c <gos_kernelInit+0x1d0>)
 80102e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80102e6:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 80102e8:	4b09      	ldr	r3, [pc, #36]	@ (8010310 <gos_kernelInit+0x1d4>)
 80102ea:	2200      	movs	r2, #0
 80102ec:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 80102ee:	2355      	movs	r3, #85	@ 0x55
 80102f0:	717b      	strb	r3, [r7, #5]

    return initResult;
 80102f2:	797b      	ldrb	r3, [r7, #5]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	20000788 	.word	0x20000788
 8010304:	2001ee00 	.word	0x2001ee00
 8010308:	08012f21 	.word	0x08012f21
 801030c:	e000ed24 	.word	0xe000ed24
 8010310:	20005e51 	.word	0x20005e51

08010314 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 801031a:	23ae      	movs	r3, #174	@ 0xae
 801031c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 801031e:	4b19      	ldr	r3, [pc, #100]	@ (8010384 <gos_kernelStart+0x70>)
 8010320:	2200      	movs	r2, #0
 8010322:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 8010324:	f000 fea2 	bl	801106c <gos_kernelGetCurrentPsp>
 8010328:	f380 8809 	msr	PSP, r0
 801032c:	f3ef 8014 	mrs	r0, CONTROL
 8010330:	f040 0002 	orr.w	r0, r0, #2
 8010334:	f380 8814 	msr	CONTROL, r0
 8010338:	f3ef 8014 	mrs	r0, CONTROL
 801033c:	f040 0001 	orr.w	r0, r0, #1
 8010340:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 8010344:	4b0f      	ldr	r3, [pc, #60]	@ (8010384 <gos_kernelStart+0x70>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a0f      	ldr	r2, [pc, #60]	@ (8010388 <gos_kernelStart+0x74>)
 801034a:	216a      	movs	r1, #106	@ 0x6a
 801034c:	fb01 f303 	mul.w	r3, r1, r3
 8010350:	4413      	add	r3, r2
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8010356:	480d      	ldr	r0, [pc, #52]	@ (801038c <gos_kernelStart+0x78>)
 8010358:	f006 f852 	bl	8016400 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 801035c:	4b0c      	ldr	r3, [pc, #48]	@ (8010390 <gos_kernelStart+0x7c>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d005      	beq.n	8010370 <gos_kernelStart+0x5c>
 8010364:	4b0a      	ldr	r3, [pc, #40]	@ (8010390 <gos_kernelStart+0x7c>)
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	3b01      	subs	r3, #1
 801036a:	b2da      	uxtb	r2, r3
 801036c:	4b08      	ldr	r3, [pc, #32]	@ (8010390 <gos_kernelStart+0x7c>)
 801036e:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 8010370:	4b08      	ldr	r3, [pc, #32]	@ (8010394 <gos_kernelStart+0x80>)
 8010372:	2236      	movs	r2, #54	@ 0x36
 8010374:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 801037a:	79fb      	ldrb	r3, [r7, #7]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	20005e58 	.word	0x20005e58
 8010388:	20000788 	.word	0x20000788
 801038c:	20005e60 	.word	0x20005e60
 8010390:	20005e51 	.word	0x20005e51
 8010394:	20000784 	.word	0x20000784

08010398 <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 8010398:	b480      	push	{r7}
 801039a:	b085      	sub	sp, #20
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 80103a0:	23ae      	movs	r3, #174	@ 0xae
 80103a2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d008      	beq.n	80103bc <gos_kernelRegisterSysTickHook+0x24>
 80103aa:	4b08      	ldr	r3, [pc, #32]	@ (80103cc <gos_kernelRegisterSysTickHook+0x34>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d104      	bne.n	80103bc <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 80103b2:	4a06      	ldr	r2, [pc, #24]	@ (80103cc <gos_kernelRegisterSysTickHook+0x34>)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 80103b8:	2355      	movs	r3, #85	@ 0x55
 80103ba:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 80103bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3714      	adds	r7, #20
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	20005e74 	.word	0x20005e74

080103d0 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b082      	sub	sp, #8
 80103d4:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 80103d6:	4b15      	ldr	r3, [pc, #84]	@ (801042c <SysTick_Handler+0x5c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	3301      	adds	r3, #1
 80103dc:	4a13      	ldr	r2, [pc, #76]	@ (801042c <SysTick_Handler+0x5c>)
 80103de:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 80103e0:	2001      	movs	r0, #1
 80103e2:	f005 fa6f 	bl	80158c4 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 80103e6:	4b12      	ldr	r3, [pc, #72]	@ (8010430 <SysTick_Handler+0x60>)
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2b36      	cmp	r3, #54	@ 0x36
 80103ec:	d113      	bne.n	8010416 <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 80103ee:	f000 fdad 	bl	8010f4c <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 80103f2:	4b10      	ldr	r3, [pc, #64]	@ (8010434 <SysTick_Handler+0x64>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10d      	bne.n	8010416 <SysTick_Handler+0x46>
 80103fa:	2316      	movs	r3, #22
 80103fc:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 80103fe:	79fb      	ldrb	r3, [r7, #7]
 8010400:	2b16      	cmp	r3, #22
 8010402:	d106      	bne.n	8010412 <SysTick_Handler+0x42>
 8010404:	4b0c      	ldr	r3, [pc, #48]	@ (8010438 <SysTick_Handler+0x68>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4a0b      	ldr	r2, [pc, #44]	@ (8010438 <SysTick_Handler+0x68>)
 801040a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801040e:	6013      	str	r3, [r2, #0]
}
 8010410:	e000      	b.n	8010414 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 8010412:	dfff      	svc	255	@ 0xff
}
 8010414:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 8010416:	4b09      	ldr	r3, [pc, #36]	@ (801043c <SysTick_Handler+0x6c>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d002      	beq.n	8010424 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 801041e:	4b07      	ldr	r3, [pc, #28]	@ (801043c <SysTick_Handler+0x6c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4798      	blx	r3
}
 8010424:	bf00      	nop
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	20005e5c 	.word	0x20005e5c
 8010430:	20000784 	.word	0x20000784
 8010434:	20005e51 	.word	0x20005e51
 8010438:	e000ed04 	.word	0xe000ed04
 801043c:	20005e74 	.word	0x20005e74

08010440 <gos_kernelGetSysTicks>:
{
 8010440:	b480      	push	{r7}
 8010442:	af00      	add	r7, sp, #0
    return sysTicks;
 8010444:	4b03      	ldr	r3, [pc, #12]	@ (8010454 <gos_kernelGetSysTicks+0x14>)
 8010446:	681b      	ldr	r3, [r3, #0]
}
 8010448:	4618      	mov	r0, r3
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	20005e5c 	.word	0x20005e5c

08010458 <gos_kernelGetCpuUsage>:
{
 8010458:	b480      	push	{r7}
 801045a:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 801045c:	4b06      	ldr	r3, [pc, #24]	@ (8010478 <gos_kernelGetCpuUsage+0x20>)
 801045e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010462:	b29b      	uxth	r3, r3
 8010464:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8010468:	3310      	adds	r3, #16
 801046a:	b29b      	uxth	r3, r3
}
 801046c:	4618      	mov	r0, r3
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	20000788 	.word	0x20000788

0801047c <gos_kernelReset>:
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
	if (kernelPreResetHookFunction != NULL)
 8010482:	4b0e      	ldr	r3, [pc, #56]	@ (80104bc <gos_kernelReset+0x40>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d002      	beq.n	8010490 <gos_kernelReset+0x14>
		kernelPreResetHookFunction();
 801048a:	4b0c      	ldr	r3, [pc, #48]	@ (80104bc <gos_kernelReset+0x40>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4798      	blx	r3
    resetRequired = GOS_TRUE;
 8010490:	4b0b      	ldr	r3, [pc, #44]	@ (80104c0 <gos_kernelReset+0x44>)
 8010492:	2236      	movs	r2, #54	@ 0x36
 8010494:	701a      	strb	r2, [r3, #0]
 8010496:	2309      	movs	r3, #9
 8010498:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 801049a:	79fb      	ldrb	r3, [r7, #7]
 801049c:	2b16      	cmp	r3, #22
 801049e:	d106      	bne.n	80104ae <gos_kernelReset+0x32>
 80104a0:	4b08      	ldr	r3, [pc, #32]	@ (80104c4 <gos_kernelReset+0x48>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a07      	ldr	r2, [pc, #28]	@ (80104c4 <gos_kernelReset+0x48>)
 80104a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104aa:	6013      	str	r3, [r2, #0]
}
 80104ac:	e000      	b.n	80104b0 <gos_kernelReset+0x34>
    gos_ported_reschedule(privilege);
 80104ae:	dfff      	svc	255	@ 0xff
}
 80104b0:	bf00      	nop
}
 80104b2:	bf00      	nop
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	20005e78 	.word	0x20005e78
 80104c0:	20000785 	.word	0x20000785
 80104c4:	e000ed04 	.word	0xe000ed04

080104c8 <gos_kernelDelayMs>:
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 80104d2:	4b0a      	ldr	r3, [pc, #40]	@ (80104fc <gos_kernelDelayMs+0x34>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 80104d8:	bf00      	nop
 80104da:	4b08      	ldr	r3, [pc, #32]	@ (80104fc <gos_kernelDelayMs+0x34>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	b29a      	uxth	r2, r3
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	88fa      	ldrh	r2, [r7, #6]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d8f5      	bhi.n	80104da <gos_kernelDelayMs+0x12>
}
 80104ee:	bf00      	nop
 80104f0:	bf00      	nop
 80104f2:	3714      	adds	r7, #20
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr
 80104fc:	20005e5c 	.word	0x20005e5c

08010500 <gos_kernelCalculateTaskCpuUsages>:
{
 8010500:	b590      	push	{r4, r7, lr}
 8010502:	b087      	sub	sp, #28
 8010504:	af00      	add	r7, sp, #0
 8010506:	4603      	mov	r3, r0
 8010508:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 801050a:	2300      	movs	r3, #0
 801050c:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 801050e:	2300      	movs	r3, #0
 8010510:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 8010512:	2300      	movs	r3, #0
 8010514:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8010516:	4ba8      	ldr	r3, [pc, #672]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010518:	795b      	ldrb	r3, [r3, #5]
 801051a:	461a      	mov	r2, r3
 801051c:	4ba7      	ldr	r3, [pc, #668]	@ (80107bc <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 801051e:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 8010522:	4ba5      	ldr	r3, [pc, #660]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010524:	791b      	ldrb	r3, [r3, #4]
 8010526:	4619      	mov	r1, r3
 8010528:	4ba5      	ldr	r3, [pc, #660]	@ (80107c0 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 801052a:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 801052e:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8010530:	4ba1      	ldr	r3, [pc, #644]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010532:	885b      	ldrh	r3, [r3, #2]
 8010534:	4619      	mov	r1, r3
 8010536:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801053a:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 801053e:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8010540:	4a9d      	ldr	r2, [pc, #628]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010542:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 8010544:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8010546:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010548:	2300      	movs	r3, #0
 801054a:	82fb      	strh	r3, [r7, #22]
 801054c:	e10f      	b.n	801076e <gos_kernelCalculateTaskCpuUsages+0x26e>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 801054e:	8afb      	ldrh	r3, [r7, #22]
 8010550:	4a9c      	ldr	r2, [pc, #624]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010552:	216a      	movs	r1, #106	@ 0x6a
 8010554:	fb01 f303 	mul.w	r3, r1, r3
 8010558:	4413      	add	r3, r2
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	f000 810b 	beq.w	8010778 <gos_kernelCalculateTaskCpuUsages+0x278>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8010562:	8afb      	ldrh	r3, [r7, #22]
 8010564:	4a97      	ldr	r2, [pc, #604]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010566:	216a      	movs	r1, #106	@ 0x6a
 8010568:	fb01 f303 	mul.w	r3, r1, r3
 801056c:	4413      	add	r3, r2
 801056e:	335a      	adds	r3, #90	@ 0x5a
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	461a      	mov	r2, r3
 8010574:	4b91      	ldr	r3, [pc, #580]	@ (80107bc <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8010576:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 801057a:	8afb      	ldrh	r3, [r7, #22]
 801057c:	4991      	ldr	r1, [pc, #580]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801057e:	206a      	movs	r0, #106	@ 0x6a
 8010580:	fb00 f303 	mul.w	r3, r0, r3
 8010584:	440b      	add	r3, r1
 8010586:	3359      	adds	r3, #89	@ 0x59
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	4619      	mov	r1, r3
 801058c:	4b8c      	ldr	r3, [pc, #560]	@ (80107c0 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 801058e:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8010592:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8010594:	8afb      	ldrh	r3, [r7, #22]
 8010596:	498b      	ldr	r1, [pc, #556]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010598:	206a      	movs	r0, #106	@ 0x6a
 801059a:	fb00 f303 	mul.w	r3, r0, r3
 801059e:	440b      	add	r3, r1
 80105a0:	3350      	adds	r3, #80	@ 0x50
 80105a2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	4619      	mov	r1, r3
 80105aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80105ae:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80105b2:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 80105b4:	8afa      	ldrh	r2, [r7, #22]
 80105b6:	4983      	ldr	r1, [pc, #524]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105b8:	206a      	movs	r0, #106	@ 0x6a
 80105ba:	fb00 f202 	mul.w	r2, r0, r2
 80105be:	440a      	add	r2, r1
 80105c0:	3250      	adds	r2, #80	@ 0x50
 80105c2:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 80105c6:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80105c8:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80105ca:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 80ca 	beq.w	8010768 <gos_kernelCalculateTaskCpuUsages+0x268>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80105da:	fb03 f202 	mul.w	r2, r3, r2
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80105e4:	8afb      	ldrh	r3, [r7, #22]
 80105e6:	b290      	uxth	r0, r2
 80105e8:	4a76      	ldr	r2, [pc, #472]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80105ea:	216a      	movs	r1, #106	@ 0x6a
 80105ec:	fb01 f303 	mul.w	r3, r1, r3
 80105f0:	4413      	add	r3, r2
 80105f2:	3360      	adds	r3, #96	@ 0x60
 80105f4:	4602      	mov	r2, r0
 80105f6:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	2b36      	cmp	r3, #54	@ 0x36
 80105fc:	d004      	beq.n	8010608 <gos_kernelCalculateTaskCpuUsages+0x108>
 80105fe:	4b6e      	ldr	r3, [pc, #440]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010600:	791b      	ldrb	r3, [r3, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	f000 80b0 	beq.w	8010768 <gos_kernelCalculateTaskCpuUsages+0x268>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801060e:	fb03 f202 	mul.w	r2, r3, r2
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	fbb2 f2f3 	udiv	r2, r2, r3
 8010618:	8afb      	ldrh	r3, [r7, #22]
 801061a:	b290      	uxth	r0, r2
 801061c:	4a69      	ldr	r2, [pc, #420]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801061e:	216a      	movs	r1, #106	@ 0x6a
 8010620:	fb01 f303 	mul.w	r3, r1, r3
 8010624:	4413      	add	r3, r2
 8010626:	3360      	adds	r3, #96	@ 0x60
 8010628:	4602      	mov	r2, r0
 801062a:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 801062c:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 801062e:	226a      	movs	r2, #106	@ 0x6a
 8010630:	fb02 f303 	mul.w	r3, r2, r3
 8010634:	3348      	adds	r3, #72	@ 0x48
 8010636:	4a63      	ldr	r2, [pc, #396]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010638:	4413      	add	r3, r2
 801063a:	1d18      	adds	r0, r3, #4
 801063c:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 801063e:	4a61      	ldr	r2, [pc, #388]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010640:	216a      	movs	r1, #106	@ 0x6a
 8010642:	fb01 f303 	mul.w	r3, r1, r3
 8010646:	4413      	add	r3, r2
 8010648:	3350      	adds	r3, #80	@ 0x50
 801064a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801064e:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 8010650:	461a      	mov	r2, r3
 8010652:	2100      	movs	r1, #0
 8010654:	f004 ffae 	bl	80155b4 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8010658:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 801065a:	226a      	movs	r2, #106	@ 0x6a
 801065c:	fb02 f303 	mul.w	r3, r2, r3
 8010660:	3348      	adds	r3, #72	@ 0x48
 8010662:	4a58      	ldr	r2, [pc, #352]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010664:	4413      	add	r3, r2
 8010666:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 8010668:	8afb      	ldrh	r3, [r7, #22]
 801066a:	4a56      	ldr	r2, [pc, #344]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801066c:	216a      	movs	r1, #106	@ 0x6a
 801066e:	fb01 f303 	mul.w	r3, r1, r3
 8010672:	4413      	add	r3, r2
 8010674:	3350      	adds	r3, #80	@ 0x50
 8010676:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801067a:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 801067c:	8afb      	ldrh	r3, [r7, #22]
 801067e:	4951      	ldr	r1, [pc, #324]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010680:	246a      	movs	r4, #106	@ 0x6a
 8010682:	fb04 f303 	mul.w	r3, r4, r3
 8010686:	440b      	add	r3, r1
 8010688:	3359      	adds	r3, #89	@ 0x59
 801068a:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 801068c:	4619      	mov	r1, r3
 801068e:	0149      	lsls	r1, r1, #5
 8010690:	1ac9      	subs	r1, r1, r3
 8010692:	0089      	lsls	r1, r1, #2
 8010694:	440b      	add	r3, r1
 8010696:	00db      	lsls	r3, r3, #3
 8010698:	b29b      	uxth	r3, r3
 801069a:	4413      	add	r3, r2
 801069c:	b29b      	uxth	r3, r3
 801069e:	4619      	mov	r1, r3
 80106a0:	f005 f868 	bl	8015774 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 80106a4:	8afb      	ldrh	r3, [r7, #22]
 80106a6:	4a47      	ldr	r2, [pc, #284]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106a8:	216a      	movs	r1, #106	@ 0x6a
 80106aa:	fb01 f303 	mul.w	r3, r1, r3
 80106ae:	4413      	add	r3, r2
 80106b0:	3350      	adds	r3, #80	@ 0x50
 80106b2:	2200      	movs	r2, #0
 80106b4:	731a      	strb	r2, [r3, #12]
 80106b6:	2200      	movs	r2, #0
 80106b8:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 80106ba:	8afb      	ldrh	r3, [r7, #22]
 80106bc:	4a41      	ldr	r2, [pc, #260]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106be:	216a      	movs	r1, #106	@ 0x6a
 80106c0:	fb01 f303 	mul.w	r3, r1, r3
 80106c4:	4413      	add	r3, r2
 80106c6:	335b      	adds	r3, #91	@ 0x5b
 80106c8:	2200      	movs	r2, #0
 80106ca:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 80106cc:	8afb      	ldrh	r3, [r7, #22]
 80106ce:	4a3d      	ldr	r2, [pc, #244]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106d0:	216a      	movs	r1, #106	@ 0x6a
 80106d2:	fb01 f303 	mul.w	r3, r1, r3
 80106d6:	4413      	add	r3, r2
 80106d8:	335a      	adds	r3, #90	@ 0x5a
 80106da:	2200      	movs	r2, #0
 80106dc:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 80106de:	8afb      	ldrh	r3, [r7, #22]
 80106e0:	4a38      	ldr	r2, [pc, #224]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106e2:	216a      	movs	r1, #106	@ 0x6a
 80106e4:	fb01 f303 	mul.w	r3, r1, r3
 80106e8:	4413      	add	r3, r2
 80106ea:	3359      	adds	r3, #89	@ 0x59
 80106ec:	2200      	movs	r2, #0
 80106ee:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 80106f0:	8afb      	ldrh	r3, [r7, #22]
 80106f2:	4a34      	ldr	r2, [pc, #208]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80106f4:	216a      	movs	r1, #106	@ 0x6a
 80106f6:	fb01 f303 	mul.w	r3, r1, r3
 80106fa:	4413      	add	r3, r2
 80106fc:	3350      	adds	r3, #80	@ 0x50
 80106fe:	2200      	movs	r2, #0
 8010700:	71da      	strb	r2, [r3, #7]
 8010702:	2200      	movs	r2, #0
 8010704:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8010706:	8afb      	ldrh	r3, [r7, #22]
 8010708:	4a2e      	ldr	r2, [pc, #184]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801070a:	216a      	movs	r1, #106	@ 0x6a
 801070c:	fb01 f303 	mul.w	r3, r1, r3
 8010710:	4413      	add	r3, r2
 8010712:	3350      	adds	r3, #80	@ 0x50
 8010714:	2200      	movs	r2, #0
 8010716:	715a      	strb	r2, [r3, #5]
 8010718:	2200      	movs	r2, #0
 801071a:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 801071c:	8afb      	ldrh	r3, [r7, #22]
 801071e:	4a29      	ldr	r2, [pc, #164]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010720:	216a      	movs	r1, #106	@ 0x6a
 8010722:	fb01 f303 	mul.w	r3, r1, r3
 8010726:	4413      	add	r3, r2
 8010728:	3360      	adds	r3, #96	@ 0x60
 801072a:	885b      	ldrh	r3, [r3, #2]
 801072c:	b29a      	uxth	r2, r3
 801072e:	8afb      	ldrh	r3, [r7, #22]
 8010730:	4924      	ldr	r1, [pc, #144]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8010732:	206a      	movs	r0, #106	@ 0x6a
 8010734:	fb00 f303 	mul.w	r3, r0, r3
 8010738:	440b      	add	r3, r1
 801073a:	3360      	adds	r3, #96	@ 0x60
 801073c:	881b      	ldrh	r3, [r3, #0]
 801073e:	b29b      	uxth	r3, r3
 8010740:	429a      	cmp	r2, r3
 8010742:	d911      	bls.n	8010768 <gos_kernelCalculateTaskCpuUsages+0x268>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8010744:	8afa      	ldrh	r2, [r7, #22]
 8010746:	8afb      	ldrh	r3, [r7, #22]
 8010748:	491e      	ldr	r1, [pc, #120]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801074a:	206a      	movs	r0, #106	@ 0x6a
 801074c:	fb00 f202 	mul.w	r2, r0, r2
 8010750:	440a      	add	r2, r1
 8010752:	3260      	adds	r2, #96	@ 0x60
 8010754:	8852      	ldrh	r2, [r2, #2]
 8010756:	b290      	uxth	r0, r2
 8010758:	4a1a      	ldr	r2, [pc, #104]	@ (80107c4 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 801075a:	216a      	movs	r1, #106	@ 0x6a
 801075c:	fb01 f303 	mul.w	r3, r1, r3
 8010760:	4413      	add	r3, r2
 8010762:	3360      	adds	r3, #96	@ 0x60
 8010764:	4602      	mov	r2, r0
 8010766:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010768:	8afb      	ldrh	r3, [r7, #22]
 801076a:	3301      	adds	r3, #1
 801076c:	82fb      	strh	r3, [r7, #22]
 801076e:	8afb      	ldrh	r3, [r7, #22]
 8010770:	2b0f      	cmp	r3, #15
 8010772:	f67f aeec 	bls.w	801054e <gos_kernelCalculateTaskCpuUsages+0x4e>
 8010776:	e000      	b.n	801077a <gos_kernelCalculateTaskCpuUsages+0x27a>
            break;
 8010778:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	2b36      	cmp	r3, #54	@ 0x36
 801077e:	d003      	beq.n	8010788 <gos_kernelCalculateTaskCpuUsages+0x288>
 8010780:	4b0d      	ldr	r3, [pc, #52]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010782:	791b      	ldrb	r3, [r3, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d013      	beq.n	80107b0 <gos_kernelCalculateTaskCpuUsages+0x2b0>
        monitoringTime.days         = 0u;
 8010788:	4b0b      	ldr	r3, [pc, #44]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 801078a:	2200      	movs	r2, #0
 801078c:	71da      	strb	r2, [r3, #7]
 801078e:	2200      	movs	r2, #0
 8010790:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 8010792:	4b09      	ldr	r3, [pc, #36]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8010794:	2200      	movs	r2, #0
 8010796:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8010798:	4b07      	ldr	r3, [pc, #28]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 801079a:	2200      	movs	r2, #0
 801079c:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 801079e:	4b06      	ldr	r3, [pc, #24]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80107a0:	2200      	movs	r2, #0
 80107a2:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 80107a4:	4b04      	ldr	r3, [pc, #16]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80107a6:	2200      	movs	r2, #0
 80107a8:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 80107aa:	4b03      	ldr	r3, [pc, #12]	@ (80107b8 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80107ac:	2200      	movs	r2, #0
 80107ae:	801a      	strh	r2, [r3, #0]
}
 80107b0:	bf00      	nop
 80107b2:	371c      	adds	r7, #28
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd90      	pop	{r4, r7, pc}
 80107b8:	20005e64 	.word	0x20005e64
 80107bc:	03938700 	.word	0x03938700
 80107c0:	000f4240 	.word	0x000f4240
 80107c4:	20000788 	.word	0x20000788

080107c8 <gos_kernelDump>:
{
 80107c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107cc:	b0a6      	sub	sp, #152	@ 0x98
 80107ce:	af14      	add	r7, sp, #80	@ 0x50
    u16_t taskIndex = 0u;
 80107d0:	2300      	movs	r3, #0
 80107d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 80107d6:	48ae      	ldr	r0, [pc, #696]	@ (8010a90 <gos_kernelDump+0x2c8>)
 80107d8:	f005 fdb6 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 80107dc:	48ad      	ldr	r0, [pc, #692]	@ (8010a94 <gos_kernelDump+0x2cc>)
 80107de:	f005 fdb3 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 80107e2:	4bad      	ldr	r3, [pc, #692]	@ (8010a98 <gos_kernelDump+0x2d0>)
 80107e4:	9302      	str	r3, [sp, #8]
 80107e6:	4bad      	ldr	r3, [pc, #692]	@ (8010a9c <gos_kernelDump+0x2d4>)
 80107e8:	9301      	str	r3, [sp, #4]
 80107ea:	4bad      	ldr	r3, [pc, #692]	@ (8010aa0 <gos_kernelDump+0x2d8>)
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	4bad      	ldr	r3, [pc, #692]	@ (8010aa4 <gos_kernelDump+0x2dc>)
 80107f0:	4aad      	ldr	r2, [pc, #692]	@ (8010aa8 <gos_kernelDump+0x2e0>)
 80107f2:	49ae      	ldr	r1, [pc, #696]	@ (8010aac <gos_kernelDump+0x2e4>)
 80107f4:	48ae      	ldr	r0, [pc, #696]	@ (8010ab0 <gos_kernelDump+0x2e8>)
 80107f6:	f005 fda7 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 80107fa:	48a6      	ldr	r0, [pc, #664]	@ (8010a94 <gos_kernelDump+0x2cc>)
 80107fc:	f005 fda4 	bl	8016348 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010800:	2300      	movs	r3, #0
 8010802:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010806:	e1cc      	b.n	8010ba2 <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8010808:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801080c:	4aa9      	ldr	r2, [pc, #676]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 801080e:	216a      	movs	r1, #106	@ 0x6a
 8010810:	fb01 f303 	mul.w	r3, r1, r3
 8010814:	4413      	add	r3, r2
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	f000 81c8 	beq.w	8010bae <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 801081e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010822:	4aa4      	ldr	r2, [pc, #656]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010824:	216a      	movs	r1, #106	@ 0x6a
 8010826:	fb01 f303 	mul.w	r3, r1, r3
 801082a:	4413      	add	r3, r2
 801082c:	3328      	adds	r3, #40	@ 0x28
 801082e:	885b      	ldrh	r3, [r3, #2]
 8010830:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010832:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 8010834:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010838:	226a      	movs	r2, #106	@ 0x6a
 801083a:	fb02 f303 	mul.w	r3, r2, r3
 801083e:	3308      	adds	r3, #8
 8010840:	4a9c      	ldr	r2, [pc, #624]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010842:	4413      	add	r3, r2
 8010844:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8010848:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801084c:	4a99      	ldr	r2, [pc, #612]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 801084e:	216a      	movs	r1, #106	@ 0x6a
 8010850:	fb01 f303 	mul.w	r3, r1, r3
 8010854:	4413      	add	r3, r2
 8010856:	3306      	adds	r3, #6
 8010858:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 801085a:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801085c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010860:	4a94      	ldr	r2, [pc, #592]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010862:	216a      	movs	r1, #106	@ 0x6a
 8010864:	fb01 f303 	mul.w	r3, r1, r3
 8010868:	4413      	add	r3, r2
 801086a:	3308      	adds	r3, #8
 801086c:	881b      	ldrh	r3, [r3, #0]
 801086e:	b29b      	uxth	r3, r3
 8010870:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010872:	2b00      	cmp	r3, #0
 8010874:	da02      	bge.n	801087c <gos_kernelDump+0xb4>
 8010876:	4b90      	ldr	r3, [pc, #576]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801087a:	e001      	b.n	8010880 <gos_kernelDump+0xb8>
 801087c:	4b8f      	ldr	r3, [pc, #572]	@ (8010abc <gos_kernelDump+0x2f4>)
 801087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010880:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010884:	4a8b      	ldr	r2, [pc, #556]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010886:	216a      	movs	r1, #106	@ 0x6a
 8010888:	fb01 f303 	mul.w	r3, r1, r3
 801088c:	4413      	add	r3, r2
 801088e:	3308      	adds	r3, #8
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	b29b      	uxth	r3, r3
 8010894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            (void_t) gos_shellDriverTransmitString(
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <gos_kernelDump+0xda>
 801089c:	4b86      	ldr	r3, [pc, #536]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 801089e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80108a0:	e001      	b.n	80108a6 <gos_kernelDump+0xde>
 80108a2:	4b86      	ldr	r3, [pc, #536]	@ (8010abc <gos_kernelDump+0x2f4>)
 80108a4:	63bb      	str	r3, [r7, #56]	@ 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80108a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80108aa:	4a82      	ldr	r2, [pc, #520]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 80108ac:	216a      	movs	r1, #106	@ 0x6a
 80108ae:	fb01 f303 	mul.w	r3, r1, r3
 80108b2:	4413      	add	r3, r2
 80108b4:	3308      	adds	r3, #8
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            (void_t) gos_shellDriverTransmitString(
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d002      	beq.n	80108c8 <gos_kernelDump+0x100>
 80108c2:	4b7d      	ldr	r3, [pc, #500]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 80108c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80108c6:	e001      	b.n	80108cc <gos_kernelDump+0x104>
 80108c8:	4b7c      	ldr	r3, [pc, #496]	@ (8010abc <gos_kernelDump+0x2f4>)
 80108ca:	637b      	str	r3, [r7, #52]	@ 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80108cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80108d0:	4a78      	ldr	r2, [pc, #480]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 80108d2:	216a      	movs	r1, #106	@ 0x6a
 80108d4:	fb01 f303 	mul.w	r3, r1, r3
 80108d8:	4413      	add	r3, r2
 80108da:	3308      	adds	r3, #8
 80108dc:	881b      	ldrh	r3, [r3, #0]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
            (void_t) gos_shellDriverTransmitString(
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <gos_kernelDump+0x126>
 80108e8:	4b73      	ldr	r3, [pc, #460]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 80108ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80108ec:	e001      	b.n	80108f2 <gos_kernelDump+0x12a>
 80108ee:	4b73      	ldr	r3, [pc, #460]	@ (8010abc <gos_kernelDump+0x2f4>)
 80108f0:	633b      	str	r3, [r7, #48]	@ 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80108f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80108f6:	4a6f      	ldr	r2, [pc, #444]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 80108f8:	216a      	movs	r1, #106	@ 0x6a
 80108fa:	fb01 f303 	mul.w	r3, r1, r3
 80108fe:	4413      	add	r3, r2
 8010900:	3308      	adds	r3, #8
 8010902:	881b      	ldrh	r3, [r3, #0]
 8010904:	b29b      	uxth	r3, r3
 8010906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            (void_t) gos_shellDriverTransmitString(
 801090a:	2b00      	cmp	r3, #0
 801090c:	d002      	beq.n	8010914 <gos_kernelDump+0x14c>
 801090e:	4b6a      	ldr	r3, [pc, #424]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010912:	e001      	b.n	8010918 <gos_kernelDump+0x150>
 8010914:	4b69      	ldr	r3, [pc, #420]	@ (8010abc <gos_kernelDump+0x2f4>)
 8010916:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801091c:	4a65      	ldr	r2, [pc, #404]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 801091e:	216a      	movs	r1, #106	@ 0x6a
 8010920:	fb01 f303 	mul.w	r3, r1, r3
 8010924:	4413      	add	r3, r2
 8010926:	3308      	adds	r3, #8
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	b29b      	uxth	r3, r3
 801092c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
            (void_t) gos_shellDriverTransmitString(
 8010930:	2b00      	cmp	r3, #0
 8010932:	d002      	beq.n	801093a <gos_kernelDump+0x172>
 8010934:	4b60      	ldr	r3, [pc, #384]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010938:	e001      	b.n	801093e <gos_kernelDump+0x176>
 801093a:	4b60      	ldr	r3, [pc, #384]	@ (8010abc <gos_kernelDump+0x2f4>)
 801093c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801093e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010942:	4a5c      	ldr	r2, [pc, #368]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010944:	216a      	movs	r1, #106	@ 0x6a
 8010946:	fb01 f303 	mul.w	r3, r1, r3
 801094a:	4413      	add	r3, r2
 801094c:	3308      	adds	r3, #8
 801094e:	881b      	ldrh	r3, [r3, #0]
 8010950:	b29b      	uxth	r3, r3
 8010952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
            (void_t) gos_shellDriverTransmitString(
 8010956:	2b00      	cmp	r3, #0
 8010958:	d002      	beq.n	8010960 <gos_kernelDump+0x198>
 801095a:	4b57      	ldr	r3, [pc, #348]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 801095c:	627b      	str	r3, [r7, #36]	@ 0x24
 801095e:	e001      	b.n	8010964 <gos_kernelDump+0x19c>
 8010960:	4b56      	ldr	r3, [pc, #344]	@ (8010abc <gos_kernelDump+0x2f4>)
 8010962:	627b      	str	r3, [r7, #36]	@ 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010964:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010968:	4a52      	ldr	r2, [pc, #328]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 801096a:	216a      	movs	r1, #106	@ 0x6a
 801096c:	fb01 f303 	mul.w	r3, r1, r3
 8010970:	4413      	add	r3, r2
 8010972:	3308      	adds	r3, #8
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	b29b      	uxth	r3, r3
 8010978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
            (void_t) gos_shellDriverTransmitString(
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <gos_kernelDump+0x1be>
 8010980:	4b4d      	ldr	r3, [pc, #308]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010982:	623b      	str	r3, [r7, #32]
 8010984:	e001      	b.n	801098a <gos_kernelDump+0x1c2>
 8010986:	4b4d      	ldr	r3, [pc, #308]	@ (8010abc <gos_kernelDump+0x2f4>)
 8010988:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 801098a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801098e:	4a49      	ldr	r2, [pc, #292]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010990:	216a      	movs	r1, #106	@ 0x6a
 8010992:	fb01 f303 	mul.w	r3, r1, r3
 8010996:	4413      	add	r3, r2
 8010998:	3308      	adds	r3, #8
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	b29b      	uxth	r3, r3
 801099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
            (void_t) gos_shellDriverTransmitString(
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d002      	beq.n	80109ac <gos_kernelDump+0x1e4>
 80109a6:	4b44      	ldr	r3, [pc, #272]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 80109a8:	61fb      	str	r3, [r7, #28]
 80109aa:	e001      	b.n	80109b0 <gos_kernelDump+0x1e8>
 80109ac:	4b43      	ldr	r3, [pc, #268]	@ (8010abc <gos_kernelDump+0x2f4>)
 80109ae:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80109b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80109b4:	493f      	ldr	r1, [pc, #252]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 80109b6:	236a      	movs	r3, #106	@ 0x6a
 80109b8:	fb02 f303 	mul.w	r3, r2, r3
 80109bc:	440b      	add	r3, r1
 80109be:	3308      	adds	r3, #8
 80109c0:	881b      	ldrh	r3, [r3, #0]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
            (void_t) gos_shellDriverTransmitString(
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d002      	beq.n	80109d2 <gos_kernelDump+0x20a>
 80109cc:	4b3a      	ldr	r3, [pc, #232]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 80109ce:	61bb      	str	r3, [r7, #24]
 80109d0:	e001      	b.n	80109d6 <gos_kernelDump+0x20e>
 80109d2:	4b3a      	ldr	r3, [pc, #232]	@ (8010abc <gos_kernelDump+0x2f4>)
 80109d4:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80109d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80109da:	4936      	ldr	r1, [pc, #216]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 80109dc:	236a      	movs	r3, #106	@ 0x6a
 80109de:	fb02 f303 	mul.w	r3, r2, r3
 80109e2:	440b      	add	r3, r1
 80109e4:	3308      	adds	r3, #8
 80109e6:	881b      	ldrh	r3, [r3, #0]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <gos_kernelDump+0x230>
 80109f2:	4b31      	ldr	r3, [pc, #196]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 80109f4:	617b      	str	r3, [r7, #20]
 80109f6:	e001      	b.n	80109fc <gos_kernelDump+0x234>
 80109f8:	4b30      	ldr	r3, [pc, #192]	@ (8010abc <gos_kernelDump+0x2f4>)
 80109fa:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80109fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a00:	492c      	ldr	r1, [pc, #176]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010a02:	236a      	movs	r3, #106	@ 0x6a
 8010a04:	fb02 f303 	mul.w	r3, r2, r3
 8010a08:	440b      	add	r3, r1
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	881b      	ldrh	r3, [r3, #0]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d002      	beq.n	8010a1e <gos_kernelDump+0x256>
 8010a18:	4b27      	ldr	r3, [pc, #156]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010a1a:	613b      	str	r3, [r7, #16]
 8010a1c:	e001      	b.n	8010a22 <gos_kernelDump+0x25a>
 8010a1e:	4b27      	ldr	r3, [pc, #156]	@ (8010abc <gos_kernelDump+0x2f4>)
 8010a20:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010a22:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a26:	4923      	ldr	r1, [pc, #140]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010a28:	236a      	movs	r3, #106	@ 0x6a
 8010a2a:	fb02 f303 	mul.w	r3, r2, r3
 8010a2e:	440b      	add	r3, r1
 8010a30:	3308      	adds	r3, #8
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d002      	beq.n	8010a44 <gos_kernelDump+0x27c>
 8010a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010a40:	60fb      	str	r3, [r7, #12]
 8010a42:	e001      	b.n	8010a48 <gos_kernelDump+0x280>
 8010a44:	4b1d      	ldr	r3, [pc, #116]	@ (8010abc <gos_kernelDump+0x2f4>)
 8010a46:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010a48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a4c:	4919      	ldr	r1, [pc, #100]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010a4e:	236a      	movs	r3, #106	@ 0x6a
 8010a50:	fb02 f303 	mul.w	r3, r2, r3
 8010a54:	440b      	add	r3, r1
 8010a56:	3308      	adds	r3, #8
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d002      	beq.n	8010a6a <gos_kernelDump+0x2a2>
 8010a64:	4b14      	ldr	r3, [pc, #80]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010a66:	60bb      	str	r3, [r7, #8]
 8010a68:	e001      	b.n	8010a6e <gos_kernelDump+0x2a6>
 8010a6a:	4b14      	ldr	r3, [pc, #80]	@ (8010abc <gos_kernelDump+0x2f4>)
 8010a6c:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010a6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010a72:	4910      	ldr	r1, [pc, #64]	@ (8010ab4 <gos_kernelDump+0x2ec>)
 8010a74:	236a      	movs	r3, #106	@ 0x6a
 8010a76:	fb02 f303 	mul.w	r3, r2, r3
 8010a7a:	440b      	add	r3, r1
 8010a7c:	3308      	adds	r3, #8
 8010a7e:	881b      	ldrh	r3, [r3, #0]
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d01a      	beq.n	8010ac0 <gos_kernelDump+0x2f8>
 8010a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010ab8 <gos_kernelDump+0x2f0>)
 8010a8c:	607b      	str	r3, [r7, #4]
 8010a8e:	e019      	b.n	8010ac4 <gos_kernelDump+0x2fc>
 8010a90:	080199a4 	.word	0x080199a4
 8010a94:	080199b4 	.word	0x080199b4
 8010a98:	08019a50 	.word	0x08019a50
 8010a9c:	08019a58 	.word	0x08019a58
 8010aa0:	08019a60 	.word	0x08019a60
 8010aa4:	08019a10 	.word	0x08019a10
 8010aa8:	08019a18 	.word	0x08019a18
 8010aac:	08019a20 	.word	0x08019a20
 8010ab0:	08019a24 	.word	0x08019a24
 8010ab4:	20000788 	.word	0x20000788
 8010ab8:	08019a6c 	.word	0x08019a6c
 8010abc:	08019a74 	.word	0x08019a74
 8010ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8010cb8 <gos_kernelDump+0x4f0>)
 8010ac2:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8010ac4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010ac8:	497c      	ldr	r1, [pc, #496]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010aca:	236a      	movs	r3, #106	@ 0x6a
 8010acc:	fb02 f303 	mul.w	r3, r2, r3
 8010ad0:	440b      	add	r3, r1
 8010ad2:	3308      	adds	r3, #8
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <gos_kernelDump+0x31c>
 8010ae0:	4d77      	ldr	r5, [pc, #476]	@ (8010cc0 <gos_kernelDump+0x4f8>)
 8010ae2:	e000      	b.n	8010ae6 <gos_kernelDump+0x31e>
 8010ae4:	4d74      	ldr	r5, [pc, #464]	@ (8010cb8 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 8010ae6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010aea:	4974      	ldr	r1, [pc, #464]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010aec:	236a      	movs	r3, #106	@ 0x6a
 8010aee:	fb02 f303 	mul.w	r3, r2, r3
 8010af2:	440b      	add	r3, r1
 8010af4:	3360      	adds	r3, #96	@ 0x60
 8010af6:	885b      	ldrh	r3, [r3, #2]
 8010af8:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8010afa:	4b72      	ldr	r3, [pc, #456]	@ (8010cc4 <gos_kernelDump+0x4fc>)
 8010afc:	fba3 2302 	umull	r2, r3, r3, r2
 8010b00:	095b      	lsrs	r3, r3, #5
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 8010b06:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010b0a:	496c      	ldr	r1, [pc, #432]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010b0c:	236a      	movs	r3, #106	@ 0x6a
 8010b0e:	fb02 f303 	mul.w	r3, r2, r3
 8010b12:	440b      	add	r3, r1
 8010b14:	3360      	adds	r3, #96	@ 0x60
 8010b16:	885b      	ldrh	r3, [r3, #2]
 8010b18:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8010b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8010cc4 <gos_kernelDump+0x4fc>)
 8010b1c:	fba3 2301 	umull	r2, r3, r3, r1
 8010b20:	095a      	lsrs	r2, r3, #5
 8010b22:	2364      	movs	r3, #100	@ 0x64
 8010b24:	fb02 f303 	mul.w	r3, r2, r3
 8010b28:	1acb      	subs	r3, r1, r3
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	461c      	mov	r4, r3
 8010b2e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010b32:	4962      	ldr	r1, [pc, #392]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010b34:	236a      	movs	r3, #106	@ 0x6a
 8010b36:	fb02 f303 	mul.w	r3, r2, r3
 8010b3a:	440b      	add	r3, r1
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	4618      	mov	r0, r3
 8010b42:	f000 fc25 	bl	8011390 <gos_kernelGetTaskStateString>
 8010b46:	4603      	mov	r3, r0
 8010b48:	9312      	str	r3, [sp, #72]	@ 0x48
 8010b4a:	9411      	str	r4, [sp, #68]	@ 0x44
 8010b4c:	9610      	str	r6, [sp, #64]	@ 0x40
 8010b4e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	930d      	str	r3, [sp, #52]	@ 0x34
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	9308      	str	r3, [sp, #32]
 8010b6c:	6a3b      	ldr	r3, [r7, #32]
 8010b6e:	9307      	str	r3, [sp, #28]
 8010b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b72:	9306      	str	r3, [sp, #24]
 8010b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b76:	9305      	str	r3, [sp, #20]
 8010b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7a:	9304      	str	r3, [sp, #16]
 8010b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b7e:	9303      	str	r3, [sp, #12]
 8010b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b82:	9302      	str	r3, [sp, #8]
 8010b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b86:	9301      	str	r3, [sp, #4]
 8010b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	4653      	mov	r3, sl
 8010b8e:	4642      	mov	r2, r8
 8010b90:	4649      	mov	r1, r9
 8010b92:	484d      	ldr	r0, [pc, #308]	@ (8010cc8 <gos_kernelDump+0x500>)
 8010b94:	f005 fbd8 	bl	8016348 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010b98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010ba2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010ba6:	2b0f      	cmp	r3, #15
 8010ba8:	f67f ae2e 	bls.w	8010808 <gos_kernelDump+0x40>
 8010bac:	e000      	b.n	8010bb0 <gos_kernelDump+0x3e8>
            break;
 8010bae:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8010bb0:	4846      	ldr	r0, [pc, #280]	@ (8010ccc <gos_kernelDump+0x504>)
 8010bb2:	f005 fbc9 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8010bb6:	4846      	ldr	r0, [pc, #280]	@ (8010cd0 <gos_kernelDump+0x508>)
 8010bb8:	f005 fbc6 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8010bbc:	4845      	ldr	r0, [pc, #276]	@ (8010cd4 <gos_kernelDump+0x50c>)
 8010bbe:	f005 fbc3 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8010bc2:	4b45      	ldr	r3, [pc, #276]	@ (8010cd8 <gos_kernelDump+0x510>)
 8010bc4:	4a45      	ldr	r2, [pc, #276]	@ (8010cdc <gos_kernelDump+0x514>)
 8010bc6:	4946      	ldr	r1, [pc, #280]	@ (8010ce0 <gos_kernelDump+0x518>)
 8010bc8:	4846      	ldr	r0, [pc, #280]	@ (8010ce4 <gos_kernelDump+0x51c>)
 8010bca:	f005 fbbd 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8010bce:	4841      	ldr	r0, [pc, #260]	@ (8010cd4 <gos_kernelDump+0x50c>)
 8010bd0:	f005 fbba 	bl	8016348 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010bda:	e04c      	b.n	8010c76 <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8010bdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010be0:	4a36      	ldr	r2, [pc, #216]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010be2:	216a      	movs	r1, #106	@ 0x6a
 8010be4:	fb01 f303 	mul.w	r3, r1, r3
 8010be8:	4413      	add	r3, r2
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d047      	beq.n	8010c80 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8010bf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010bf4:	4a31      	ldr	r2, [pc, #196]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010bf6:	216a      	movs	r1, #106	@ 0x6a
 8010bf8:	fb01 f303 	mul.w	r3, r1, r3
 8010bfc:	4413      	add	r3, r2
 8010bfe:	3328      	adds	r3, #40	@ 0x28
 8010c00:	885b      	ldrh	r3, [r3, #2]
 8010c02:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010c04:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 8010c06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c0a:	226a      	movs	r2, #106	@ 0x6a
 8010c0c:	fb02 f303 	mul.w	r3, r2, r3
 8010c10:	3308      	adds	r3, #8
 8010c12:	4a2a      	ldr	r2, [pc, #168]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010c14:	4413      	add	r3, r2
 8010c16:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8010c18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c1c:	4a27      	ldr	r2, [pc, #156]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010c1e:	206a      	movs	r0, #106	@ 0x6a
 8010c20:	fb00 f303 	mul.w	r3, r0, r3
 8010c24:	4413      	add	r3, r2
 8010c26:	3360      	adds	r3, #96	@ 0x60
 8010c28:	881b      	ldrh	r3, [r3, #0]
 8010c2a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010c2c:	4a25      	ldr	r2, [pc, #148]	@ (8010cc4 <gos_kernelDump+0x4fc>)
 8010c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c32:	095b      	lsrs	r3, r3, #5
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8010c38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8010cbc <gos_kernelDump+0x4f4>)
 8010c3e:	206a      	movs	r0, #106	@ 0x6a
 8010c40:	fb00 f303 	mul.w	r3, r0, r3
 8010c44:	4413      	add	r3, r2
 8010c46:	3360      	adds	r3, #96	@ 0x60
 8010c48:	881b      	ldrh	r3, [r3, #0]
 8010c4a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8010cc4 <gos_kernelDump+0x4fc>)
 8010c4e:	fba2 0203 	umull	r0, r2, r2, r3
 8010c52:	0952      	lsrs	r2, r2, #5
 8010c54:	2064      	movs	r0, #100	@ 0x64
 8010c56:	fb00 f202 	mul.w	r2, r0, r2
 8010c5a:	1a9b      	subs	r3, r3, r2
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	462b      	mov	r3, r5
 8010c62:	460a      	mov	r2, r1
 8010c64:	4621      	mov	r1, r4
 8010c66:	4820      	ldr	r0, [pc, #128]	@ (8010ce8 <gos_kernelDump+0x520>)
 8010c68:	f005 fb6e 	bl	8016348 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010c6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c70:	3301      	adds	r3, #1
 8010c72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010c76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010c7a:	2b0f      	cmp	r3, #15
 8010c7c:	d9ae      	bls.n	8010bdc <gos_kernelDump+0x414>
 8010c7e:	e000      	b.n	8010c82 <gos_kernelDump+0x4ba>
            break;
 8010c80:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 8010c82:	481a      	ldr	r0, [pc, #104]	@ (8010cec <gos_kernelDump+0x524>)
 8010c84:	f005 fb60 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8010c88:	4819      	ldr	r0, [pc, #100]	@ (8010cf0 <gos_kernelDump+0x528>)
 8010c8a:	f005 fb5d 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8010c8e:	4819      	ldr	r0, [pc, #100]	@ (8010cf4 <gos_kernelDump+0x52c>)
 8010c90:	f005 fb5a 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8010c94:	4b18      	ldr	r3, [pc, #96]	@ (8010cf8 <gos_kernelDump+0x530>)
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	4b18      	ldr	r3, [pc, #96]	@ (8010cfc <gos_kernelDump+0x534>)
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	4b18      	ldr	r3, [pc, #96]	@ (8010d00 <gos_kernelDump+0x538>)
 8010c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8010cdc <gos_kernelDump+0x514>)
 8010ca0:	490f      	ldr	r1, [pc, #60]	@ (8010ce0 <gos_kernelDump+0x518>)
 8010ca2:	4818      	ldr	r0, [pc, #96]	@ (8010d04 <gos_kernelDump+0x53c>)
 8010ca4:	f005 fb50 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8010ca8:	4812      	ldr	r0, [pc, #72]	@ (8010cf4 <gos_kernelDump+0x52c>)
 8010caa:	f005 fb4d 	bl	8016348 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010cb4:	e0b1      	b.n	8010e1a <gos_kernelDump+0x652>
 8010cb6:	bf00      	nop
 8010cb8:	08019a74 	.word	0x08019a74
 8010cbc:	20000788 	.word	0x20000788
 8010cc0:	08019a6c 	.word	0x08019a6c
 8010cc4:	51eb851f 	.word	0x51eb851f
 8010cc8:	08019a7c 	.word	0x08019a7c
 8010ccc:	08019ad0 	.word	0x08019ad0
 8010cd0:	08019b30 	.word	0x08019b30
 8010cd4:	08019b44 	.word	0x08019b44
 8010cd8:	08019b80 	.word	0x08019b80
 8010cdc:	08019a18 	.word	0x08019a18
 8010ce0:	08019a20 	.word	0x08019a20
 8010ce4:	08019b8c 	.word	0x08019b8c
 8010ce8:	08019ba4 	.word	0x08019ba4
 8010cec:	08019bc4 	.word	0x08019bc4
 8010cf0:	08019c00 	.word	0x08019c00
 8010cf4:	08019c14 	.word	0x08019c14
 8010cf8:	08019c94 	.word	0x08019c94
 8010cfc:	08019ca0 	.word	0x08019ca0
 8010d00:	08019c68 	.word	0x08019c68
 8010d04:	08019c70 	.word	0x08019c70
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8010d08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d0e:	216a      	movs	r1, #106	@ 0x6a
 8010d10:	fb01 f303 	mul.w	r3, r1, r3
 8010d14:	4413      	add	r3, r2
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 8084 	beq.w	8010e26 <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8010d1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d22:	4a45      	ldr	r2, [pc, #276]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d24:	216a      	movs	r1, #106	@ 0x6a
 8010d26:	fb01 f303 	mul.w	r3, r1, r3
 8010d2a:	4413      	add	r3, r2
 8010d2c:	3328      	adds	r3, #40	@ 0x28
 8010d2e:	885b      	ldrh	r3, [r3, #2]
 8010d30:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010d32:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 8010d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d38:	226a      	movs	r2, #106	@ 0x6a
 8010d3a:	fb02 f303 	mul.w	r3, r2, r3
 8010d3e:	3308      	adds	r3, #8
 8010d40:	4a3d      	ldr	r2, [pc, #244]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d42:	4413      	add	r3, r2
 8010d44:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 8010d46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d4c:	216a      	movs	r1, #106	@ 0x6a
 8010d4e:	fb01 f303 	mul.w	r3, r1, r3
 8010d52:	4413      	add	r3, r2
 8010d54:	3348      	adds	r3, #72	@ 0x48
 8010d56:	881b      	ldrh	r3, [r3, #0]
 8010d58:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010d5a:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8010d5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d60:	4a35      	ldr	r2, [pc, #212]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d62:	216a      	movs	r1, #106	@ 0x6a
 8010d64:	fb01 f303 	mul.w	r3, r1, r3
 8010d68:	4413      	add	r3, r2
 8010d6a:	3348      	adds	r3, #72	@ 0x48
 8010d6c:	885b      	ldrh	r3, [r3, #2]
 8010d6e:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8010d70:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 8010d72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d76:	4a30      	ldr	r2, [pc, #192]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d78:	216a      	movs	r1, #106	@ 0x6a
 8010d7a:	fb01 f303 	mul.w	r3, r1, r3
 8010d7e:	4413      	add	r3, r2
 8010d80:	3348      	adds	r3, #72	@ 0x48
 8010d82:	885b      	ldrh	r3, [r3, #2]
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	461a      	mov	r2, r3
 8010d88:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010d8c:	fb02 f303 	mul.w	r3, r2, r3
 8010d90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010d94:	4928      	ldr	r1, [pc, #160]	@ (8010e38 <gos_kernelDump+0x670>)
 8010d96:	206a      	movs	r0, #106	@ 0x6a
 8010d98:	fb00 f202 	mul.w	r2, r0, r2
 8010d9c:	440a      	add	r2, r1
 8010d9e:	3248      	adds	r2, #72	@ 0x48
 8010da0:	8812      	ldrh	r2, [r2, #0]
 8010da2:	b292      	uxth	r2, r2
 8010da4:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8010da8:	4a24      	ldr	r2, [pc, #144]	@ (8010e3c <gos_kernelDump+0x674>)
 8010daa:	fb82 1203 	smull	r1, r2, r2, r3
 8010dae:	1152      	asrs	r2, r2, #5
 8010db0:	17db      	asrs	r3, r3, #31
 8010db2:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 8010db4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010db8:	4a1f      	ldr	r2, [pc, #124]	@ (8010e38 <gos_kernelDump+0x670>)
 8010dba:	206a      	movs	r0, #106	@ 0x6a
 8010dbc:	fb00 f303 	mul.w	r3, r0, r3
 8010dc0:	4413      	add	r3, r2
 8010dc2:	3348      	adds	r3, #72	@ 0x48
 8010dc4:	885b      	ldrh	r3, [r3, #2]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	461a      	mov	r2, r3
 8010dca:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010dce:	fb02 f303 	mul.w	r3, r2, r3
 8010dd2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010dd6:	4818      	ldr	r0, [pc, #96]	@ (8010e38 <gos_kernelDump+0x670>)
 8010dd8:	256a      	movs	r5, #106	@ 0x6a
 8010dda:	fb05 f202 	mul.w	r2, r5, r2
 8010dde:	4402      	add	r2, r0
 8010de0:	3248      	adds	r2, #72	@ 0x48
 8010de2:	8812      	ldrh	r2, [r2, #0]
 8010de4:	b292      	uxth	r2, r2
 8010de6:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8010dea:	4b14      	ldr	r3, [pc, #80]	@ (8010e3c <gos_kernelDump+0x674>)
 8010dec:	fb83 0302 	smull	r0, r3, r3, r2
 8010df0:	1158      	asrs	r0, r3, #5
 8010df2:	17d3      	asrs	r3, r2, #31
 8010df4:	1ac3      	subs	r3, r0, r3
 8010df6:	2064      	movs	r0, #100	@ 0x64
 8010df8:	fb00 f303 	mul.w	r3, r0, r3
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	9302      	str	r3, [sp, #8]
 8010e00:	9101      	str	r1, [sp, #4]
 8010e02:	9600      	str	r6, [sp, #0]
 8010e04:	4673      	mov	r3, lr
 8010e06:	4622      	mov	r2, r4
 8010e08:	4661      	mov	r1, ip
 8010e0a:	480d      	ldr	r0, [pc, #52]	@ (8010e40 <gos_kernelDump+0x678>)
 8010e0c:	f005 fa9c 	bl	8016348 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8010e10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010e14:	3301      	adds	r3, #1
 8010e16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8010e1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010e1e:	2b0f      	cmp	r3, #15
 8010e20:	f67f af72 	bls.w	8010d08 <gos_kernelDump+0x540>
 8010e24:	e000      	b.n	8010e28 <gos_kernelDump+0x660>
            break;
 8010e26:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 8010e28:	4806      	ldr	r0, [pc, #24]	@ (8010e44 <gos_kernelDump+0x67c>)
 8010e2a:	f005 fa8d 	bl	8016348 <gos_shellDriverTransmitString>
}
 8010e2e:	bf00      	nop
 8010e30:	3748      	adds	r7, #72	@ 0x48
 8010e32:	46bd      	mov	sp, r7
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	20000788 	.word	0x20000788
 8010e3c:	51eb851f 	.word	0x51eb851f
 8010e40:	08019cb0 	.word	0x08019cb0
 8010e44:	08019ce4 	.word	0x08019ce4

08010e48 <gos_kernelIsCallerIsr>:
{
 8010e48:	b480      	push	{r7}
 8010e4a:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 8010e4c:	4b05      	ldr	r3, [pc, #20]	@ (8010e64 <gos_kernelIsCallerIsr+0x1c>)
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d001      	beq.n	8010e58 <gos_kernelIsCallerIsr+0x10>
 8010e54:	2336      	movs	r3, #54	@ 0x36
 8010e56:	e000      	b.n	8010e5a <gos_kernelIsCallerIsr+0x12>
 8010e58:	2349      	movs	r3, #73	@ 0x49
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	20005e52 	.word	0x20005e52

08010e68 <SVC_Handler>:
    gos_ported_handleSVC();
 8010e68:	f01e 0f04 	tst.w	lr, #4
 8010e6c:	bf0c      	ite	eq
 8010e6e:	f3ef 8008 	mrseq	r0, MSP
 8010e72:	f3ef 8009 	mrsne	r0, PSP
 8010e76:	4b06      	ldr	r3, [pc, #24]	@ (8010e90 <SVC_Handler+0x28>)
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	2b36      	cmp	r3, #54	@ 0x36
 8010e7c:	d104      	bne.n	8010e88 <SVC_Handler+0x20>
 8010e7e:	4b04      	ldr	r3, [pc, #16]	@ (8010e90 <SVC_Handler+0x28>)
 8010e80:	2249      	movs	r2, #73	@ 0x49
 8010e82:	701a      	strb	r2, [r3, #0]
 8010e84:	f000 fad8 	bl	8011438 <gos_kernelProcessorReset>
 8010e88:	f000 b804 	b.w	8010e94 <gos_kernelSVC_HandlerMain>
}
 8010e8c:	bf00      	nop
 8010e8e:	bf00      	nop
 8010e90:	20000785 	.word	0x20000785

08010e94 <gos_kernelSVC_HandlerMain>:
{
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	3318      	adds	r3, #24
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	60fb      	str	r3, [r7, #12]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	3b02      	subs	r3, #2
 8010ea8:	60fb      	str	r3, [r7, #12]
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	72fb      	strb	r3, [r7, #11]
 8010eb0:	7afb      	ldrb	r3, [r7, #11]
 8010eb2:	2bff      	cmp	r3, #255	@ 0xff
 8010eb4:	d105      	bne.n	8010ec2 <gos_kernelSVC_HandlerMain+0x2e>
 8010eb6:	4b06      	ldr	r3, [pc, #24]	@ (8010ed0 <gos_kernelSVC_HandlerMain+0x3c>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a05      	ldr	r2, [pc, #20]	@ (8010ed0 <gos_kernelSVC_HandlerMain+0x3c>)
 8010ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010ec0:	6013      	str	r3, [r2, #0]
}
 8010ec2:	bf00      	nop
 8010ec4:	3714      	adds	r7, #20
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	e000ed04 	.word	0xe000ed04

08010ed4 <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 8010ed4:	4b10      	ldr	r3, [pc, #64]	@ (8010f18 <PendSV_Handler+0x44>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	2b36      	cmp	r3, #54	@ 0x36
 8010eda:	d109      	bne.n	8010ef0 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 8010edc:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8010ee0:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 8010ee4:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 8010ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8010f18 <PendSV_Handler+0x44>)
 8010eea:	2249      	movs	r2, #73	@ 0x49
 8010eec:	701a      	strb	r2, [r3, #0]
}
 8010eee:	e011      	b.n	8010f14 <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8010ef0:	b500      	push	{lr}
 8010ef2:	f3ef 8009 	mrs	r0, PSP
 8010ef6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010efa:	f000 f8cb 	bl	8011094 <gos_kernelSaveCurrentPsp>
 8010efe:	f000 f8e1 	bl	80110c4 <gos_kernelSelectNextTask>
 8010f02:	f000 f8b3 	bl	801106c <gos_kernelGetCurrentPsp>
 8010f06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010f0a:	f380 8809 	msr	PSP, r0
 8010f0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f12:	4770      	bx	lr
}
 8010f14:	bf00      	nop
 8010f16:	bf00      	nop
 8010f18:	20000786 	.word	0x20000786

08010f1c <gos_kernelReschedule>:
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	4603      	mov	r3, r0
 8010f24:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8010f26:	79fb      	ldrb	r3, [r7, #7]
 8010f28:	2b16      	cmp	r3, #22
 8010f2a:	d106      	bne.n	8010f3a <gos_kernelReschedule+0x1e>
 8010f2c:	4b06      	ldr	r3, [pc, #24]	@ (8010f48 <gos_kernelReschedule+0x2c>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a05      	ldr	r2, [pc, #20]	@ (8010f48 <gos_kernelReschedule+0x2c>)
 8010f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f36:	6013      	str	r3, [r2, #0]
}
 8010f38:	e000      	b.n	8010f3c <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 8010f3a:	dfff      	svc	255	@ 0xff
}
 8010f3c:	bf00      	nop
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	e000ed04 	.word	0xe000ed04

08010f4c <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b086      	sub	sp, #24
 8010f50:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 8010f52:	2300      	movs	r3, #0
 8010f54:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 8010f56:	f3ef 8309 	mrs	r3, PSP
 8010f5a:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d02b      	beq.n	8010fba <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 8010f62:	4b3f      	ldr	r3, [pc, #252]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	4a3f      	ldr	r2, [pc, #252]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8010f68:	216a      	movs	r1, #106	@ 0x6a
 8010f6a:	fb01 f303 	mul.w	r3, r1, r3
 8010f6e:	4413      	add	r3, r2
 8010f70:	3360      	adds	r3, #96	@ 0x60
 8010f72:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d21e      	bcs.n	8010fba <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 8010f7c:	4b38      	ldr	r3, [pc, #224]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	226a      	movs	r2, #106	@ 0x6a
 8010f82:	fb02 f303 	mul.w	r3, r2, r3
 8010f86:	3308      	adds	r3, #8
 8010f88:	4a36      	ldr	r2, [pc, #216]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8010f8a:	4413      	add	r3, r2
 8010f8c:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 8010f8e:	4a34      	ldr	r2, [pc, #208]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8010f90:	6812      	ldr	r2, [r2, #0]
 8010f92:	4934      	ldr	r1, [pc, #208]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8010f94:	206a      	movs	r0, #106	@ 0x6a
 8010f96:	fb00 f202 	mul.w	r2, r0, r2
 8010f9a:	440a      	add	r2, r1
 8010f9c:	3260      	adds	r2, #96	@ 0x60
 8010f9e:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	1a8a      	subs	r2, r1, r2
 8010fa6:	9202      	str	r2, [sp, #8]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	9201      	str	r2, [sp, #4]
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	4b2e      	ldr	r3, [pc, #184]	@ (8011068 <gos_kernelCheckTaskStack+0x11c>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	2034      	movs	r0, #52	@ 0x34
 8010fb6:	f002 f8eb 	bl	8013190 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d04a      	beq.n	8011056 <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8010fc0:	4b27      	ldr	r3, [pc, #156]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4a27      	ldr	r2, [pc, #156]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8010fc6:	216a      	movs	r1, #106	@ 0x6a
 8010fc8:	fb01 f303 	mul.w	r3, r1, r3
 8010fcc:	4413      	add	r3, r2
 8010fce:	3360      	adds	r3, #96	@ 0x60
 8010fd0:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8010fd4:	4a22      	ldr	r2, [pc, #136]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8010fd6:	6812      	ldr	r2, [r2, #0]
 8010fd8:	4922      	ldr	r1, [pc, #136]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8010fda:	206a      	movs	r0, #106	@ 0x6a
 8010fdc:	fb00 f202 	mul.w	r2, r0, r2
 8010fe0:	440a      	add	r2, r1
 8010fe2:	3248      	adds	r2, #72	@ 0x48
 8010fe4:	8812      	ldrh	r2, [r2, #0]
 8010fe6:	b292      	uxth	r2, r2
 8010fe8:	441a      	add	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	3b40      	subs	r3, #64	@ 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 8010ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8010ff2:	6812      	ldr	r2, [r2, #0]
 8010ff4:	491b      	ldr	r1, [pc, #108]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8010ff6:	206a      	movs	r0, #106	@ 0x6a
 8010ff8:	fb00 f202 	mul.w	r2, r0, r2
 8010ffc:	440a      	add	r2, r1
 8010ffe:	3248      	adds	r2, #72	@ 0x48
 8011000:	8852      	ldrh	r2, [r2, #2]
 8011002:	b292      	uxth	r2, r2
    if (sp != 0 &&
 8011004:	4293      	cmp	r3, r2
 8011006:	d926      	bls.n	8011056 <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8011008:	4b15      	ldr	r3, [pc, #84]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a15      	ldr	r2, [pc, #84]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 801100e:	216a      	movs	r1, #106	@ 0x6a
 8011010:	fb01 f303 	mul.w	r3, r1, r3
 8011014:	4413      	add	r3, r2
 8011016:	3360      	adds	r3, #96	@ 0x60
 8011018:	f8d3 3006 	ldr.w	r3, [r3, #6]
 801101c:	b29a      	uxth	r2, r3
 801101e:	4b10      	ldr	r3, [pc, #64]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4910      	ldr	r1, [pc, #64]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8011024:	206a      	movs	r0, #106	@ 0x6a
 8011026:	fb00 f303 	mul.w	r3, r0, r3
 801102a:	440b      	add	r3, r1
 801102c:	3348      	adds	r3, #72	@ 0x48
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	b29b      	uxth	r3, r3
 8011032:	4413      	add	r3, r2
 8011034:	b29a      	uxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	b29b      	uxth	r3, r3
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	b29a      	uxth	r2, r3
 801103e:	4b08      	ldr	r3, [pc, #32]	@ (8011060 <gos_kernelCheckTaskStack+0x114>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	3a20      	subs	r2, #32
 8011044:	b290      	uxth	r0, r2
 8011046:	4a07      	ldr	r2, [pc, #28]	@ (8011064 <gos_kernelCheckTaskStack+0x118>)
 8011048:	216a      	movs	r1, #106	@ 0x6a
 801104a:	fb01 f303 	mul.w	r3, r1, r3
 801104e:	4413      	add	r3, r2
 8011050:	3348      	adds	r3, #72	@ 0x48
 8011052:	4602      	mov	r2, r0
 8011054:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 8011056:	bf00      	nop
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	20005e58 	.word	0x20005e58
 8011064:	20000788 	.word	0x20000788
 8011068:	08019d38 	.word	0x08019d38

0801106c <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 801106c:	b480      	push	{r7}
 801106e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 8011070:	4b06      	ldr	r3, [pc, #24]	@ (801108c <gos_kernelGetCurrentPsp+0x20>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4a06      	ldr	r2, [pc, #24]	@ (8011090 <gos_kernelGetCurrentPsp+0x24>)
 8011076:	216a      	movs	r1, #106	@ 0x6a
 8011078:	fb01 f303 	mul.w	r3, r1, r3
 801107c:	4413      	add	r3, r2
 801107e:	3338      	adds	r3, #56	@ 0x38
 8011080:	685b      	ldr	r3, [r3, #4]
}
 8011082:	4618      	mov	r0, r3
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr
 801108c:	20005e58 	.word	0x20005e58
 8011090:	20000788 	.word	0x20000788

08011094 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 801109c:	4b07      	ldr	r3, [pc, #28]	@ (80110bc <gos_kernelSaveCurrentPsp+0x28>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4a07      	ldr	r2, [pc, #28]	@ (80110c0 <gos_kernelSaveCurrentPsp+0x2c>)
 80110a2:	216a      	movs	r1, #106	@ 0x6a
 80110a4:	fb01 f303 	mul.w	r3, r1, r3
 80110a8:	4413      	add	r3, r2
 80110aa:	3338      	adds	r3, #56	@ 0x38
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	605a      	str	r2, [r3, #4]
}
 80110b0:	bf00      	nop
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr
 80110bc:	20005e58 	.word	0x20005e58
 80110c0:	20000788 	.word	0x20000788

080110c4 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 80110c4:	b590      	push	{r4, r7, lr}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 80110ca:	2300      	movs	r3, #0
 80110cc:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 80110ce:	23ff      	movs	r3, #255	@ 0xff
 80110d0:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 80110d2:	2300      	movs	r3, #0
 80110d4:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 80110d6:	2300      	movs	r3, #0
 80110d8:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 80110da:	2300      	movs	r3, #0
 80110dc:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 80110de:	4ba3      	ldr	r3, [pc, #652]	@ (801136c <gos_kernelSelectNextTask+0x2a8>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	4ba3      	ldr	r3, [pc, #652]	@ (8011370 <gos_kernelSelectNextTask+0x2ac>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	1ad3      	subs	r3, r2, r3
 80110e8:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 80110ea:	f7ff ff2f 	bl	8010f4c <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 80110ee:	4ba1      	ldr	r3, [pc, #644]	@ (8011374 <gos_kernelSelectNextTask+0x2b0>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	f040 8136 	bne.w	8011364 <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80110f8:	2300      	movs	r3, #0
 80110fa:	81fb      	strh	r3, [r7, #14]
 80110fc:	e0d0      	b.n	80112a0 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 80110fe:	89fb      	ldrh	r3, [r7, #14]
 8011100:	4a9d      	ldr	r2, [pc, #628]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011102:	216a      	movs	r1, #106	@ 0x6a
 8011104:	fb01 f303 	mul.w	r3, r1, r3
 8011108:	4413      	add	r3, r2
 801110a:	3304      	adds	r3, #4
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	2b16      	cmp	r3, #22
 8011110:	d12c      	bne.n	801116c <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 8011112:	89fb      	ldrh	r3, [r7, #14]
 8011114:	4a98      	ldr	r2, [pc, #608]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011116:	216a      	movs	r1, #106	@ 0x6a
 8011118:	fb01 f303 	mul.w	r3, r1, r3
 801111c:	4413      	add	r3, r2
 801111e:	3330      	adds	r3, #48	@ 0x30
 8011120:	6819      	ldr	r1, [r3, #0]
 8011122:	89fb      	ldrh	r3, [r7, #14]
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	4411      	add	r1, r2
 8011128:	4893      	ldr	r0, [pc, #588]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 801112a:	226a      	movs	r2, #106	@ 0x6a
 801112c:	fb03 f202 	mul.w	r2, r3, r2
 8011130:	4402      	add	r2, r0
 8011132:	3230      	adds	r2, #48	@ 0x30
 8011134:	6011      	str	r1, [r2, #0]
 8011136:	4a90      	ldr	r2, [pc, #576]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011138:	216a      	movs	r1, #106	@ 0x6a
 801113a:	fb01 f303 	mul.w	r3, r1, r3
 801113e:	4413      	add	r3, r2
 8011140:	3330      	adds	r3, #48	@ 0x30
 8011142:	681a      	ldr	r2, [r3, #0]
 8011144:	89fb      	ldrh	r3, [r7, #14]
 8011146:	498c      	ldr	r1, [pc, #560]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011148:	206a      	movs	r0, #106	@ 0x6a
 801114a:	fb00 f303 	mul.w	r3, r0, r3
 801114e:	440b      	add	r3, r1
 8011150:	3328      	adds	r3, #40	@ 0x28
 8011152:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8011154:	429a      	cmp	r2, r3
 8011156:	d309      	bcc.n	801116c <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8011158:	89fb      	ldrh	r3, [r7, #14]
 801115a:	4a87      	ldr	r2, [pc, #540]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 801115c:	216a      	movs	r1, #106	@ 0x6a
 801115e:	fb01 f303 	mul.w	r3, r1, r3
 8011162:	4413      	add	r3, r2
 8011164:	3304      	adds	r3, #4
 8011166:	220a      	movs	r2, #10
 8011168:	701a      	strb	r2, [r3, #0]
 801116a:	e040      	b.n	80111ee <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 801116c:	89fb      	ldrh	r3, [r7, #14]
 801116e:	4a82      	ldr	r2, [pc, #520]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011170:	216a      	movs	r1, #106	@ 0x6a
 8011172:	fb01 f303 	mul.w	r3, r1, r3
 8011176:	4413      	add	r3, r2
 8011178:	3304      	adds	r3, #4
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	2b19      	cmp	r3, #25
 801117e:	d136      	bne.n	80111ee <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8011180:	89fb      	ldrh	r3, [r7, #14]
 8011182:	4a7d      	ldr	r2, [pc, #500]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011184:	216a      	movs	r1, #106	@ 0x6a
 8011186:	fb01 f303 	mul.w	r3, r1, r3
 801118a:	4413      	add	r3, r2
 801118c:	3330      	adds	r3, #48	@ 0x30
 801118e:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8011190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011194:	d02b      	beq.n	80111ee <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 8011196:	89fb      	ldrh	r3, [r7, #14]
 8011198:	4a77      	ldr	r2, [pc, #476]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 801119a:	216a      	movs	r1, #106	@ 0x6a
 801119c:	fb01 f303 	mul.w	r3, r1, r3
 80111a0:	4413      	add	r3, r2
 80111a2:	3338      	adds	r3, #56	@ 0x38
 80111a4:	6819      	ldr	r1, [r3, #0]
 80111a6:	89fb      	ldrh	r3, [r7, #14]
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	4411      	add	r1, r2
 80111ac:	4872      	ldr	r0, [pc, #456]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80111ae:	226a      	movs	r2, #106	@ 0x6a
 80111b0:	fb03 f202 	mul.w	r2, r3, r2
 80111b4:	4402      	add	r2, r0
 80111b6:	3238      	adds	r2, #56	@ 0x38
 80111b8:	6011      	str	r1, [r2, #0]
 80111ba:	4a6f      	ldr	r2, [pc, #444]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80111bc:	216a      	movs	r1, #106	@ 0x6a
 80111be:	fb01 f303 	mul.w	r3, r1, r3
 80111c2:	4413      	add	r3, r2
 80111c4:	3338      	adds	r3, #56	@ 0x38
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	89fb      	ldrh	r3, [r7, #14]
 80111ca:	496b      	ldr	r1, [pc, #428]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80111cc:	206a      	movs	r0, #106	@ 0x6a
 80111ce:	fb00 f303 	mul.w	r3, r0, r3
 80111d2:	440b      	add	r3, r1
 80111d4:	3330      	adds	r3, #48	@ 0x30
 80111d6:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 80111d8:	429a      	cmp	r2, r3
 80111da:	d308      	bcc.n	80111ee <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80111dc:	89fb      	ldrh	r3, [r7, #14]
 80111de:	4a66      	ldr	r2, [pc, #408]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80111e0:	216a      	movs	r1, #106	@ 0x6a
 80111e2:	fb01 f303 	mul.w	r3, r1, r3
 80111e6:	4413      	add	r3, r2
 80111e8:	3304      	adds	r3, #4
 80111ea:	220a      	movs	r2, #10
 80111ec:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 80111ee:	89fa      	ldrh	r2, [r7, #14]
 80111f0:	4b62      	ldr	r3, [pc, #392]	@ (801137c <gos_kernelSelectNextTask+0x2b8>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d047      	beq.n	8011288 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 80111f8:	89fb      	ldrh	r3, [r7, #14]
 80111fa:	4a5f      	ldr	r2, [pc, #380]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80111fc:	216a      	movs	r1, #106	@ 0x6a
 80111fe:	fb01 f303 	mul.w	r3, r1, r3
 8011202:	4413      	add	r3, r2
 8011204:	3304      	adds	r3, #4
 8011206:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 8011208:	2b0a      	cmp	r3, #10
 801120a:	d13d      	bne.n	8011288 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 801120c:	89fb      	ldrh	r3, [r7, #14]
 801120e:	4a5a      	ldr	r2, [pc, #360]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011210:	216a      	movs	r1, #106	@ 0x6a
 8011212:	fb01 f303 	mul.w	r3, r1, r3
 8011216:	4413      	add	r3, r2
 8011218:	3306      	adds	r3, #6
 801121a:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 801121c:	7b7a      	ldrb	r2, [r7, #13]
 801121e:	429a      	cmp	r2, r3
 8011220:	d932      	bls.n	8011288 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8011222:	89fb      	ldrh	r3, [r7, #14]
 8011224:	4a54      	ldr	r2, [pc, #336]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011226:	216a      	movs	r1, #106	@ 0x6a
 8011228:	fb01 f303 	mul.w	r3, r1, r3
 801122c:	4413      	add	r3, r2
 801122e:	3360      	adds	r3, #96	@ 0x60
 8011230:	889b      	ldrh	r3, [r3, #4]
 8011232:	b29a      	uxth	r2, r3
 8011234:	89fb      	ldrh	r3, [r7, #14]
 8011236:	4950      	ldr	r1, [pc, #320]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011238:	206a      	movs	r0, #106	@ 0x6a
 801123a:	fb00 f303 	mul.w	r3, r0, r3
 801123e:	440b      	add	r3, r1
 8011240:	3358      	adds	r3, #88	@ 0x58
 8011242:	88db      	ldrh	r3, [r3, #6]
 8011244:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8011246:	429a      	cmp	r2, r3
 8011248:	d21e      	bcs.n	8011288 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 801124a:	89fb      	ldrh	r3, [r7, #14]
 801124c:	4a4a      	ldr	r2, [pc, #296]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 801124e:	216a      	movs	r1, #106	@ 0x6a
 8011250:	fb01 f303 	mul.w	r3, r1, r3
 8011254:	4413      	add	r3, r2
 8011256:	3360      	adds	r3, #96	@ 0x60
 8011258:	885b      	ldrh	r3, [r3, #2]
 801125a:	b29a      	uxth	r2, r3
 801125c:	89fb      	ldrh	r3, [r7, #14]
 801125e:	4946      	ldr	r1, [pc, #280]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011260:	206a      	movs	r0, #106	@ 0x6a
 8011262:	fb00 f303 	mul.w	r3, r0, r3
 8011266:	440b      	add	r3, r1
 8011268:	3358      	adds	r3, #88	@ 0x58
 801126a:	88db      	ldrh	r3, [r3, #6]
 801126c:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 801126e:	429a      	cmp	r2, r3
 8011270:	d20a      	bcs.n	8011288 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 8011272:	89fb      	ldrh	r3, [r7, #14]
 8011274:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 8011276:	89fb      	ldrh	r3, [r7, #14]
 8011278:	4a3f      	ldr	r2, [pc, #252]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 801127a:	216a      	movs	r1, #106	@ 0x6a
 801127c:	fb01 f303 	mul.w	r3, r1, r3
 8011280:	4413      	add	r3, r2
 8011282:	3306      	adds	r3, #6
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8011288:	89fb      	ldrh	r3, [r7, #14]
 801128a:	4a3b      	ldr	r2, [pc, #236]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 801128c:	216a      	movs	r1, #106	@ 0x6a
 801128e:	fb01 f303 	mul.w	r3, r1, r3
 8011292:	4413      	add	r3, r2
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d007      	beq.n	80112aa <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 801129a:	89fb      	ldrh	r3, [r7, #14]
 801129c:	3301      	adds	r3, #1
 801129e:	81fb      	strh	r3, [r7, #14]
 80112a0:	89fb      	ldrh	r3, [r7, #14]
 80112a2:	2b0f      	cmp	r3, #15
 80112a4:	f67f af2b 	bls.w	80110fe <gos_kernelSelectNextTask+0x3a>
 80112a8:	e000      	b.n	80112ac <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 80112aa:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 80112ac:	f7ff f8d4 	bl	8010458 <gos_kernelGetCpuUsage>
 80112b0:	4603      	mov	r3, r0
 80112b2:	461a      	mov	r2, r3
 80112b4:	4b32      	ldr	r3, [pc, #200]	@ (8011380 <gos_kernelSelectNextTask+0x2bc>)
 80112b6:	881b      	ldrh	r3, [r3, #0]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d901      	bls.n	80112c0 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 80112bc:	2300      	movs	r3, #0
 80112be:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 80112c0:	897a      	ldrh	r2, [r7, #10]
 80112c2:	4b2e      	ldr	r3, [pc, #184]	@ (801137c <gos_kernelSelectNextTask+0x2b8>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d02b      	beq.n	8011322 <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 80112ca:	4b2e      	ldr	r3, [pc, #184]	@ (8011384 <gos_kernelSelectNextTask+0x2c0>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d016      	beq.n	8011300 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 80112d2:	4b2c      	ldr	r3, [pc, #176]	@ (8011384 <gos_kernelSelectNextTask+0x2c0>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a29      	ldr	r2, [pc, #164]	@ (801137c <gos_kernelSelectNextTask+0x2b8>)
 80112d8:	6812      	ldr	r2, [r2, #0]
 80112da:	4927      	ldr	r1, [pc, #156]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80112dc:	206a      	movs	r0, #106	@ 0x6a
 80112de:	fb00 f202 	mul.w	r2, r0, r2
 80112e2:	440a      	add	r2, r1
 80112e4:	3228      	adds	r2, #40	@ 0x28
 80112e6:	8852      	ldrh	r2, [r2, #2]
 80112e8:	b290      	uxth	r0, r2
 80112ea:	897a      	ldrh	r2, [r7, #10]
 80112ec:	4922      	ldr	r1, [pc, #136]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 80112ee:	246a      	movs	r4, #106	@ 0x6a
 80112f0:	fb04 f202 	mul.w	r2, r4, r2
 80112f4:	440a      	add	r2, r1
 80112f6:	3228      	adds	r2, #40	@ 0x28
 80112f8:	8852      	ldrh	r2, [r2, #2]
 80112fa:	b292      	uxth	r2, r2
 80112fc:	4611      	mov	r1, r2
 80112fe:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8011300:	4b1e      	ldr	r3, [pc, #120]	@ (801137c <gos_kernelSelectNextTask+0x2b8>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	491c      	ldr	r1, [pc, #112]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011306:	226a      	movs	r2, #106	@ 0x6a
 8011308:	fb03 f202 	mul.w	r2, r3, r2
 801130c:	440a      	add	r2, r1
 801130e:	3240      	adds	r2, #64	@ 0x40
 8011310:	6852      	ldr	r2, [r2, #4]
 8011312:	3201      	adds	r2, #1
 8011314:	4918      	ldr	r1, [pc, #96]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011316:	206a      	movs	r0, #106	@ 0x6a
 8011318:	fb00 f303 	mul.w	r3, r0, r3
 801131c:	440b      	add	r3, r1
 801131e:	3340      	adds	r3, #64	@ 0x40
 8011320:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 8011322:	1cbb      	adds	r3, r7, #2
 8011324:	4618      	mov	r0, r3
 8011326:	f005 f86b 	bl	8016400 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 801132a:	887a      	ldrh	r2, [r7, #2]
 801132c:	4b16      	ldr	r3, [pc, #88]	@ (8011388 <gos_kernelSelectNextTask+0x2c4>)
 801132e:	881b      	ldrh	r3, [r3, #0]
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 8011334:	4b11      	ldr	r3, [pc, #68]	@ (801137c <gos_kernelSelectNextTask+0x2b8>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	226a      	movs	r2, #106	@ 0x6a
 801133a:	fb02 f303 	mul.w	r3, r2, r3
 801133e:	3350      	adds	r3, #80	@ 0x50
 8011340:	4a0d      	ldr	r2, [pc, #52]	@ (8011378 <gos_kernelSelectNextTask+0x2b4>)
 8011342:	4413      	add	r3, r2
 8011344:	3305      	adds	r3, #5
 8011346:	893a      	ldrh	r2, [r7, #8]
 8011348:	4619      	mov	r1, r3
 801134a:	4810      	ldr	r0, [pc, #64]	@ (801138c <gos_kernelSelectNextTask+0x2c8>)
 801134c:	f004 f932 	bl	80155b4 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8011350:	480d      	ldr	r0, [pc, #52]	@ (8011388 <gos_kernelSelectNextTask+0x2c4>)
 8011352:	f005 f855 	bl	8016400 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 8011356:	897b      	ldrh	r3, [r7, #10]
 8011358:	4a08      	ldr	r2, [pc, #32]	@ (801137c <gos_kernelSelectNextTask+0x2b8>)
 801135a:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 801135c:	4b03      	ldr	r3, [pc, #12]	@ (801136c <gos_kernelSelectNextTask+0x2a8>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a03      	ldr	r2, [pc, #12]	@ (8011370 <gos_kernelSelectNextTask+0x2ac>)
 8011362:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 8011364:	bf00      	nop
 8011366:	3714      	adds	r7, #20
 8011368:	46bd      	mov	sp, r7
 801136a:	bd90      	pop	{r4, r7, pc}
 801136c:	20005e5c 	.word	0x20005e5c
 8011370:	20005e7c 	.word	0x20005e7c
 8011374:	20005e51 	.word	0x20005e51
 8011378:	20000788 	.word	0x20000788
 801137c:	20005e58 	.word	0x20005e58
 8011380:	20000782 	.word	0x20000782
 8011384:	20005e70 	.word	0x20005e70
 8011388:	20005e60 	.word	0x20005e60
 801138c:	20005e64 	.word	0x20005e64

08011390 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	4603      	mov	r3, r0
 8011398:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 801139a:	79fb      	ldrb	r3, [r7, #7]
 801139c:	3b05      	subs	r3, #5
 801139e:	2b14      	cmp	r3, #20
 80113a0:	d836      	bhi.n	8011410 <gos_kernelGetTaskStateString+0x80>
 80113a2:	a201      	add	r2, pc, #4	@ (adr r2, 80113a8 <gos_kernelGetTaskStateString+0x18>)
 80113a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a8:	08011405 	.word	0x08011405
 80113ac:	08011411 	.word	0x08011411
 80113b0:	08011411 	.word	0x08011411
 80113b4:	08011411 	.word	0x08011411
 80113b8:	08011411 	.word	0x08011411
 80113bc:	080113fd 	.word	0x080113fd
 80113c0:	08011411 	.word	0x08011411
 80113c4:	08011411 	.word	0x08011411
 80113c8:	0801140d 	.word	0x0801140d
 80113cc:	08011411 	.word	0x08011411
 80113d0:	08011411 	.word	0x08011411
 80113d4:	08011411 	.word	0x08011411
 80113d8:	08011411 	.word	0x08011411
 80113dc:	08011411 	.word	0x08011411
 80113e0:	08011411 	.word	0x08011411
 80113e4:	08011411 	.word	0x08011411
 80113e8:	08011411 	.word	0x08011411
 80113ec:	08011401 	.word	0x08011401
 80113f0:	08011411 	.word	0x08011411
 80113f4:	08011411 	.word	0x08011411
 80113f8:	08011409 	.word	0x08011409
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 80113fc:	4b08      	ldr	r3, [pc, #32]	@ (8011420 <gos_kernelGetTaskStateString+0x90>)
 80113fe:	e008      	b.n	8011412 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8011400:	4b08      	ldr	r3, [pc, #32]	@ (8011424 <gos_kernelGetTaskStateString+0x94>)
 8011402:	e006      	b.n	8011412 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 8011404:	4b08      	ldr	r3, [pc, #32]	@ (8011428 <gos_kernelGetTaskStateString+0x98>)
 8011406:	e004      	b.n	8011412 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8011408:	4b08      	ldr	r3, [pc, #32]	@ (801142c <gos_kernelGetTaskStateString+0x9c>)
 801140a:	e002      	b.n	8011412 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 801140c:	4b08      	ldr	r3, [pc, #32]	@ (8011430 <gos_kernelGetTaskStateString+0xa0>)
 801140e:	e000      	b.n	8011412 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8011410:	4b08      	ldr	r3, [pc, #32]	@ (8011434 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 8011412:	4618      	mov	r0, r3
 8011414:	370c      	adds	r7, #12
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop
 8011420:	08019d7c 	.word	0x08019d7c
 8011424:	08019d8c 	.word	0x08019d8c
 8011428:	08019da0 	.word	0x08019da0
 801142c:	08019db4 	.word	0x08019db4
 8011430:	08019dc8 	.word	0x08019dc8
 8011434:	08019dd8 	.word	0x08019dd8

08011438 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 8011438:	b480      	push	{r7}
 801143a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 801143c:	f3bf 8f4f 	dsb	sy
 8011440:	4b05      	ldr	r3, [pc, #20]	@ (8011458 <gos_kernelProcessorReset+0x20>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011448:	4903      	ldr	r1, [pc, #12]	@ (8011458 <gos_kernelProcessorReset+0x20>)
 801144a:	4b04      	ldr	r3, [pc, #16]	@ (801145c <gos_kernelProcessorReset+0x24>)
 801144c:	4313      	orrs	r3, r2
 801144e:	600b      	str	r3, [r1, #0]
 8011450:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 8011454:	bf00      	nop
 8011456:	e7fd      	b.n	8011454 <gos_kernelProcessorReset+0x1c>
 8011458:	e000ed0c 	.word	0xe000ed0c
 801145c:	05fa0004 	.word	0x05fa0004

08011460 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 8011460:	b480      	push	{r7}
 8011462:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8011464:	bf00      	nop
 8011466:	e7fd      	b.n	8011464 <NMI_Handler+0x4>

08011468 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 8011468:	b480      	push	{r7}
 801146a:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 801146c:	bf00      	nop
 801146e:	e7fd      	b.n	801146c <HardFault_Handler+0x4>

08011470 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 8011470:	b480      	push	{r7}
 8011472:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8011474:	bf00      	nop
 8011476:	e7fd      	b.n	8011474 <MemManage_Handler+0x4>

08011478 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 8011478:	b480      	push	{r7}
 801147a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 801147c:	bf00      	nop
 801147e:	e7fd      	b.n	801147c <BusFault_Handler+0x4>

08011480 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8011480:	b480      	push	{r7}
 8011482:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8011484:	bf00      	nop
 8011486:	e7fd      	b.n	8011484 <UsageFault_Handler+0x4>

08011488 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 8011492:	2355      	movs	r3, #85	@ 0x55
 8011494:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 8011496:	2300      	movs	r3, #0
 8011498:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 801149a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 801149e:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 80114a0:	2300      	movs	r3, #0
 80114a2:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f001 fd05 	bl	8012eb4 <gos_taskCheckDescriptor>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2bae      	cmp	r3, #174	@ 0xae
 80114ae:	d102      	bne.n	80114b6 <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 80114b0:	23ae      	movs	r3, #174	@ 0xae
 80114b2:	75fb      	strb	r3, [r7, #23]
 80114b4:	e173      	b.n	801179e <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 80114b6:	23ae      	movs	r3, #174	@ 0xae
 80114b8:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80114ba:	2300      	movs	r3, #0
 80114bc:	82bb      	strh	r3, [r7, #20]
 80114be:	e01a      	b.n	80114f6 <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 80114c0:	8abb      	ldrh	r3, [r7, #20]
 80114c2:	4a89      	ldr	r2, [pc, #548]	@ (80116e8 <gos_taskRegister+0x260>)
 80114c4:	216a      	movs	r1, #106	@ 0x6a
 80114c6:	fb01 f303 	mul.w	r3, r1, r3
 80114ca:	4413      	add	r3, r2
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 80114d2:	2355      	movs	r3, #85	@ 0x55
 80114d4:	75fb      	strb	r3, [r7, #23]
                break;
 80114d6:	e011      	b.n	80114fc <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 80114d8:	8abb      	ldrh	r3, [r7, #20]
 80114da:	4a83      	ldr	r2, [pc, #524]	@ (80116e8 <gos_taskRegister+0x260>)
 80114dc:	216a      	movs	r1, #106	@ 0x6a
 80114de:	fb01 f303 	mul.w	r3, r1, r3
 80114e2:	4413      	add	r3, r2
 80114e4:	3348      	adds	r3, #72	@ 0x48
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	461a      	mov	r2, r3
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	4413      	add	r3, r2
 80114ee:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80114f0:	8abb      	ldrh	r3, [r7, #20]
 80114f2:	3301      	adds	r3, #1
 80114f4:	82bb      	strh	r3, [r7, #20]
 80114f6:	8abb      	ldrh	r3, [r7, #20]
 80114f8:	2b0f      	cmp	r3, #15
 80114fa:	d9e1      	bls.n	80114c0 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 80114fc:	8abb      	ldrh	r3, [r7, #20]
 80114fe:	2b0f      	cmp	r3, #15
 8011500:	d902      	bls.n	8011508 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 8011502:	23ae      	movs	r3, #174	@ 0xae
 8011504:	75fb      	strb	r3, [r7, #23]
 8011506:	e14a      	b.n	801179e <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 801150e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8011512:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	3b04      	subs	r3, #4
 8011518:	60fb      	str	r3, [r7, #12]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011520:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	3b04      	subs	r3, #4
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	3b04      	subs	r3, #4
 8011534:	60fb      	str	r3, [r7, #12]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f06f 0202 	mvn.w	r2, #2
 801153c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3b04      	subs	r3, #4
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 801154a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	3b04      	subs	r3, #4
 8011550:	60fb      	str	r3, [r7, #12]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8011558:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	3b04      	subs	r3, #4
 801155e:	60fb      	str	r3, [r7, #12]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8011566:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	3b04      	subs	r3, #4
 801156c:	60fb      	str	r3, [r7, #12]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8011574:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	3b04      	subs	r3, #4
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	3b04      	subs	r3, #4
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 801158e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	3b04      	subs	r3, #4
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 801159c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	3b04      	subs	r3, #4
 80115a2:	60fb      	str	r3, [r7, #12]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80115aa:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	3b04      	subs	r3, #4
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80115b8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	3b04      	subs	r3, #4
 80115be:	60fb      	str	r3, [r7, #12]
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80115c6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	3b04      	subs	r3, #4
 80115cc:	60fb      	str	r3, [r7, #12]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80115d4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	3b04      	subs	r3, #4
 80115da:	60fb      	str	r3, [r7, #12]
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80115e2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	3b04      	subs	r3, #4
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80115f0:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 80115f2:	8abb      	ldrh	r3, [r7, #20]
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	493c      	ldr	r1, [pc, #240]	@ (80116e8 <gos_taskRegister+0x260>)
 80115f8:	206a      	movs	r0, #106	@ 0x6a
 80115fa:	fb00 f303 	mul.w	r3, r0, r3
 80115fe:	440b      	add	r3, r1
 8011600:	333c      	adds	r3, #60	@ 0x3c
 8011602:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 8011604:	8abb      	ldrh	r3, [r7, #20]
 8011606:	4a38      	ldr	r2, [pc, #224]	@ (80116e8 <gos_taskRegister+0x260>)
 8011608:	216a      	movs	r1, #106	@ 0x6a
 801160a:	fb01 f303 	mul.w	r3, r1, r3
 801160e:	4413      	add	r3, r2
 8011610:	3304      	adds	r3, #4
 8011612:	220a      	movs	r2, #10
 8011614:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 8011616:	8abb      	ldrh	r3, [r7, #20]
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	6812      	ldr	r2, [r2, #0]
 801161c:	4932      	ldr	r1, [pc, #200]	@ (80116e8 <gos_taskRegister+0x260>)
 801161e:	206a      	movs	r0, #106	@ 0x6a
 8011620:	fb00 f303 	mul.w	r3, r0, r3
 8011624:	440b      	add	r3, r1
 8011626:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 8011628:	8abb      	ldrh	r3, [r7, #20]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	7990      	ldrb	r0, [r2, #6]
 801162e:	4a2e      	ldr	r2, [pc, #184]	@ (80116e8 <gos_taskRegister+0x260>)
 8011630:	216a      	movs	r1, #106	@ 0x6a
 8011632:	fb01 f303 	mul.w	r3, r1, r3
 8011636:	4413      	add	r3, r2
 8011638:	3306      	adds	r3, #6
 801163a:	4602      	mov	r2, r0
 801163c:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 801163e:	8abb      	ldrh	r3, [r7, #20]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	7990      	ldrb	r0, [r2, #6]
 8011644:	4a28      	ldr	r2, [pc, #160]	@ (80116e8 <gos_taskRegister+0x260>)
 8011646:	216a      	movs	r1, #106	@ 0x6a
 8011648:	fb01 f303 	mul.w	r3, r1, r3
 801164c:	4413      	add	r3, r2
 801164e:	3307      	adds	r3, #7
 8011650:	4602      	mov	r2, r0
 8011652:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 8011654:	8abb      	ldrh	r3, [r7, #20]
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 801165c:	b290      	uxth	r0, r2
 801165e:	4a22      	ldr	r2, [pc, #136]	@ (80116e8 <gos_taskRegister+0x260>)
 8011660:	216a      	movs	r1, #106	@ 0x6a
 8011662:	fb01 f303 	mul.w	r3, r1, r3
 8011666:	4413      	add	r3, r2
 8011668:	3348      	adds	r3, #72	@ 0x48
 801166a:	4602      	mov	r2, r0
 801166c:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 801166e:	8abb      	ldrh	r3, [r7, #20]
 8011670:	8aba      	ldrh	r2, [r7, #20]
 8011672:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 8011676:	b290      	uxth	r0, r2
 8011678:	4a1b      	ldr	r2, [pc, #108]	@ (80116e8 <gos_taskRegister+0x260>)
 801167a:	216a      	movs	r1, #106	@ 0x6a
 801167c:	fb01 f303 	mul.w	r3, r1, r3
 8011680:	4413      	add	r3, r2
 8011682:	332a      	adds	r3, #42	@ 0x2a
 8011684:	4602      	mov	r2, r0
 8011686:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 8011688:	8abb      	ldrh	r3, [r7, #20]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	8912      	ldrh	r2, [r2, #8]
 801168e:	b290      	uxth	r0, r2
 8011690:	4a15      	ldr	r2, [pc, #84]	@ (80116e8 <gos_taskRegister+0x260>)
 8011692:	216a      	movs	r1, #106	@ 0x6a
 8011694:	fb01 f303 	mul.w	r3, r1, r3
 8011698:	4413      	add	r3, r2
 801169a:	3308      	adds	r3, #8
 801169c:	4602      	mov	r2, r0
 801169e:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d10a      	bne.n	80116c2 <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 80116ac:	8abb      	ldrh	r3, [r7, #20]
 80116ae:	4a0e      	ldr	r2, [pc, #56]	@ (80116e8 <gos_taskRegister+0x260>)
 80116b0:	216a      	movs	r1, #106	@ 0x6a
 80116b2:	fb01 f303 	mul.w	r3, r1, r3
 80116b6:	4413      	add	r3, r2
 80116b8:	335e      	adds	r3, #94	@ 0x5e
 80116ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80116be:	801a      	strh	r2, [r3, #0]
 80116c0:	e021      	b.n	8011706 <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d90c      	bls.n	80116ec <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 80116d2:	8abb      	ldrh	r3, [r7, #20]
 80116d4:	4a04      	ldr	r2, [pc, #16]	@ (80116e8 <gos_taskRegister+0x260>)
 80116d6:	216a      	movs	r1, #106	@ 0x6a
 80116d8:	fb01 f303 	mul.w	r3, r1, r3
 80116dc:	4413      	add	r3, r2
 80116de:	335e      	adds	r3, #94	@ 0x5e
 80116e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80116e4:	801a      	strh	r2, [r3, #0]
 80116e6:	e00e      	b.n	8011706 <gos_taskRegister+0x27e>
 80116e8:	20000788 	.word	0x20000788
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 80116ec:	8abb      	ldrh	r3, [r7, #20]
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80116f4:	b290      	uxth	r0, r2
 80116f6:	4a2c      	ldr	r2, [pc, #176]	@ (80117a8 <gos_taskRegister+0x320>)
 80116f8:	216a      	movs	r1, #106	@ 0x6a
 80116fa:	fb01 f303 	mul.w	r3, r1, r3
 80116fe:	4413      	add	r3, r2
 8011700:	335e      	adds	r3, #94	@ 0x5e
 8011702:	4602      	mov	r2, r0
 8011704:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	330a      	adds	r3, #10
 801170a:	2b00      	cmp	r3, #0
 801170c:	d015      	beq.n	801173a <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	330a      	adds	r3, #10
 8011712:	4618      	mov	r0, r3
 8011714:	f7ee fdcc 	bl	80002b0 <strlen>
 8011718:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 801171a:	2b20      	cmp	r3, #32
 801171c:	d80d      	bhi.n	801173a <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 801171e:	8abb      	ldrh	r3, [r7, #20]
 8011720:	226a      	movs	r2, #106	@ 0x6a
 8011722:	fb02 f303 	mul.w	r3, r2, r3
 8011726:	3308      	adds	r3, #8
 8011728:	4a1f      	ldr	r2, [pc, #124]	@ (80117a8 <gos_taskRegister+0x320>)
 801172a:	4413      	add	r3, r2
 801172c:	1c9a      	adds	r2, r3, #2
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	330a      	adds	r3, #10
 8011732:	4619      	mov	r1, r3
 8011734:	4610      	mov	r0, r2
 8011736:	f005 fd30 	bl	801719a <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 801173a:	8abb      	ldrh	r3, [r7, #20]
 801173c:	4a1a      	ldr	r2, [pc, #104]	@ (80117a8 <gos_taskRegister+0x320>)
 801173e:	216a      	movs	r1, #106	@ 0x6a
 8011740:	fb01 f303 	mul.w	r3, r1, r3
 8011744:	4413      	add	r3, r2
 8011746:	332a      	adds	r3, #42	@ 0x2a
 8011748:	881a      	ldrh	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	855a      	strh	r2, [r3, #42]	@ 0x2a
            if (taskId != NULL)
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d009      	beq.n	8011768 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 8011754:	8abb      	ldrh	r3, [r7, #20]
 8011756:	4a14      	ldr	r2, [pc, #80]	@ (80117a8 <gos_taskRegister+0x320>)
 8011758:	216a      	movs	r1, #106	@ 0x6a
 801175a:	fb01 f303 	mul.w	r3, r1, r3
 801175e:	4413      	add	r3, r2
 8011760:	332a      	adds	r3, #42	@ 0x2a
 8011762:	881a      	ldrh	r2, [r3, #0]
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8011768:	8abb      	ldrh	r3, [r7, #20]
 801176a:	4a0f      	ldr	r2, [pc, #60]	@ (80117a8 <gos_taskRegister+0x320>)
 801176c:	216a      	movs	r1, #106	@ 0x6a
 801176e:	fb01 f303 	mul.w	r3, r1, r3
 8011772:	4413      	add	r3, r2
 8011774:	333c      	adds	r3, #60	@ 0x3c
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	8aba      	ldrh	r2, [r7, #20]
 801177a:	490b      	ldr	r1, [pc, #44]	@ (80117a8 <gos_taskRegister+0x320>)
 801177c:	206a      	movs	r0, #106	@ 0x6a
 801177e:	fb00 f202 	mul.w	r2, r0, r2
 8011782:	440a      	add	r2, r1
 8011784:	3248      	adds	r2, #72	@ 0x48
 8011786:	8812      	ldrh	r2, [r2, #0]
 8011788:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 801178a:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 801178c:	3240      	adds	r2, #64	@ 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 801178e:	4906      	ldr	r1, [pc, #24]	@ (80117a8 <gos_taskRegister+0x320>)
 8011790:	206a      	movs	r0, #106	@ 0x6a
 8011792:	fb00 f303 	mul.w	r3, r0, r3
 8011796:	440b      	add	r3, r1
 8011798:	3360      	adds	r3, #96	@ 0x60
 801179a:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 801179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	20000788 	.word	0x20000788

080117ac <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 80117b4:	23ae      	movs	r3, #174	@ 0xae
 80117b6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (isKernelRunning == GOS_FALSE)
 80117b8:	4b3f      	ldr	r3, [pc, #252]	@ (80118b8 <gos_taskSleep+0x10c>)
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	2b49      	cmp	r3, #73	@ 0x49
 80117be:	d105      	bne.n	80117cc <gos_taskSleep+0x20>
    {
    	gos_kernelDelayMs(sleepTicks);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fe fe7f 	bl	80104c8 <gos_kernelDelayMs>
 80117ca:	e070      	b.n	80118ae <gos_taskSleep+0x102>
    }
    else
    {
        if (currentTaskIndex > 0u)
 80117cc:	4b3b      	ldr	r3, [pc, #236]	@ (80118bc <gos_taskSleep+0x110>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d06c      	beq.n	80118ae <gos_taskSleep+0x102>
        {
            GOS_ATOMIC_ENTER
 80117d4:	4b3a      	ldr	r3, [pc, #232]	@ (80118c0 <gos_taskSleep+0x114>)
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d108      	bne.n	80117ee <gos_taskSleep+0x42>
 80117dc:	b672      	cpsid	i
 80117de:	f3ef 8310 	mrs	r3, PRIMASK
 80117e2:	4a38      	ldr	r2, [pc, #224]	@ (80118c4 <gos_taskSleep+0x118>)
 80117e4:	6013      	str	r3, [r2, #0]
 80117e6:	f3bf 8f4f 	dsb	sy
 80117ea:	f3bf 8f6f 	isb	sy
 80117ee:	4b34      	ldr	r3, [pc, #208]	@ (80118c0 <gos_taskSleep+0x114>)
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	3301      	adds	r3, #1
 80117f4:	b2da      	uxtb	r2, r3
 80117f6:	4b32      	ldr	r3, [pc, #200]	@ (80118c0 <gos_taskSleep+0x114>)
 80117f8:	701a      	strb	r2, [r3, #0]
 80117fa:	4b33      	ldr	r3, [pc, #204]	@ (80118c8 <gos_taskSleep+0x11c>)
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	3301      	adds	r3, #1
 8011800:	b2da      	uxtb	r2, r3
 8011802:	4b31      	ldr	r3, [pc, #196]	@ (80118c8 <gos_taskSleep+0x11c>)
 8011804:	701a      	strb	r2, [r3, #0]
            {
                if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 8011806:	4b2d      	ldr	r3, [pc, #180]	@ (80118bc <gos_taskSleep+0x110>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	4a30      	ldr	r2, [pc, #192]	@ (80118cc <gos_taskSleep+0x120>)
 801180c:	216a      	movs	r1, #106	@ 0x6a
 801180e:	fb01 f303 	mul.w	r3, r1, r3
 8011812:	4413      	add	r3, r2
 8011814:	3304      	adds	r3, #4
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b0a      	cmp	r3, #10
 801181a:	d121      	bne.n	8011860 <gos_taskSleep+0xb4>
                {
                    taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 801181c:	4b27      	ldr	r3, [pc, #156]	@ (80118bc <gos_taskSleep+0x110>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4a2a      	ldr	r2, [pc, #168]	@ (80118cc <gos_taskSleep+0x120>)
 8011822:	216a      	movs	r1, #106	@ 0x6a
 8011824:	fb01 f303 	mul.w	r3, r1, r3
 8011828:	4413      	add	r3, r2
 801182a:	3304      	adds	r3, #4
 801182c:	2216      	movs	r2, #22
 801182e:	701a      	strb	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8011830:	4b22      	ldr	r3, [pc, #136]	@ (80118bc <gos_taskSleep+0x110>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	4a25      	ldr	r2, [pc, #148]	@ (80118cc <gos_taskSleep+0x120>)
 8011836:	216a      	movs	r1, #106	@ 0x6a
 8011838:	fb01 f303 	mul.w	r3, r1, r3
 801183c:	4413      	add	r3, r2
 801183e:	332c      	adds	r3, #44	@ 0x2c
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	601a      	str	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 8011844:	4b1d      	ldr	r3, [pc, #116]	@ (80118bc <gos_taskSleep+0x110>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	4a20      	ldr	r2, [pc, #128]	@ (80118cc <gos_taskSleep+0x120>)
 801184a:	216a      	movs	r1, #106	@ 0x6a
 801184c:	fb01 f303 	mul.w	r3, r1, r3
 8011850:	4413      	add	r3, r2
 8011852:	3330      	adds	r3, #48	@ 0x30
 8011854:	2200      	movs	r2, #0
 8011856:	801a      	strh	r2, [r3, #0]
 8011858:	2200      	movs	r2, #0
 801185a:	805a      	strh	r2, [r3, #2]
                    taskSleepResult = GOS_SUCCESS;
 801185c:	2355      	movs	r3, #85	@ 0x55
 801185e:	73fb      	strb	r3, [r7, #15]
                else
                {
                    // Nothing to do.
                }
            }
            GOS_ATOMIC_EXIT
 8011860:	4b17      	ldr	r3, [pc, #92]	@ (80118c0 <gos_taskSleep+0x114>)
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d005      	beq.n	8011874 <gos_taskSleep+0xc8>
 8011868:	4b15      	ldr	r3, [pc, #84]	@ (80118c0 <gos_taskSleep+0x114>)
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	3b01      	subs	r3, #1
 801186e:	b2da      	uxtb	r2, r3
 8011870:	4b13      	ldr	r3, [pc, #76]	@ (80118c0 <gos_taskSleep+0x114>)
 8011872:	701a      	strb	r2, [r3, #0]
 8011874:	4b12      	ldr	r3, [pc, #72]	@ (80118c0 <gos_taskSleep+0x114>)
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d108      	bne.n	801188e <gos_taskSleep+0xe2>
 801187c:	4b11      	ldr	r3, [pc, #68]	@ (80118c4 <gos_taskSleep+0x118>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f383 8810 	msr	PRIMASK, r3
 8011884:	b662      	cpsie	i
 8011886:	f3bf 8f4f 	dsb	sy
 801188a:	f3bf 8f6f 	isb	sy
 801188e:	4b0e      	ldr	r3, [pc, #56]	@ (80118c8 <gos_taskSleep+0x11c>)
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d005      	beq.n	80118a2 <gos_taskSleep+0xf6>
 8011896:	4b0c      	ldr	r3, [pc, #48]	@ (80118c8 <gos_taskSleep+0x11c>)
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	3b01      	subs	r3, #1
 801189c:	b2da      	uxtb	r2, r3
 801189e:	4b0a      	ldr	r3, [pc, #40]	@ (80118c8 <gos_taskSleep+0x11c>)
 80118a0:	701a      	strb	r2, [r3, #0]

            if (taskSleepResult == GOS_SUCCESS)
 80118a2:	7bfb      	ldrb	r3, [r7, #15]
 80118a4:	2b55      	cmp	r3, #85	@ 0x55
 80118a6:	d102      	bne.n	80118ae <gos_taskSleep+0x102>
            {
                // Unprivileged.
                gos_kernelReschedule(GOS_UNPRIVILEGED);
 80118a8:	2009      	movs	r0, #9
 80118aa:	f7ff fb37 	bl	8010f1c <gos_kernelReschedule>
        {
            // Idle task cannot sleep.
        }
    }

    return taskSleepResult;
 80118ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	20000784 	.word	0x20000784
 80118bc:	20005e58 	.word	0x20005e58
 80118c0:	20005e53 	.word	0x20005e53
 80118c4:	20005e54 	.word	0x20005e54
 80118c8:	20005e51 	.word	0x20005e51
 80118cc:	20000788 	.word	0x20000788

080118d0 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af02      	add	r7, sp, #8
 80118d6:	4603      	mov	r3, r0
 80118d8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 80118da:	23ae      	movs	r3, #174	@ 0xae
 80118dc:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 80118de:	2300      	movs	r3, #0
 80118e0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80118e2:	4b56      	ldr	r3, [pc, #344]	@ (8011a3c <gos_taskWakeup+0x16c>)
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d108      	bne.n	80118fc <gos_taskWakeup+0x2c>
 80118ea:	b672      	cpsid	i
 80118ec:	f3ef 8310 	mrs	r3, PRIMASK
 80118f0:	4a53      	ldr	r2, [pc, #332]	@ (8011a40 <gos_taskWakeup+0x170>)
 80118f2:	6013      	str	r3, [r2, #0]
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	f3bf 8f6f 	isb	sy
 80118fc:	4b4f      	ldr	r3, [pc, #316]	@ (8011a3c <gos_taskWakeup+0x16c>)
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	3301      	adds	r3, #1
 8011902:	b2da      	uxtb	r2, r3
 8011904:	4b4d      	ldr	r3, [pc, #308]	@ (8011a3c <gos_taskWakeup+0x16c>)
 8011906:	701a      	strb	r2, [r3, #0]
 8011908:	4b4e      	ldr	r3, [pc, #312]	@ (8011a44 <gos_taskWakeup+0x174>)
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	3301      	adds	r3, #1
 801190e:	b2da      	uxtb	r2, r3
 8011910:	4b4c      	ldr	r3, [pc, #304]	@ (8011a44 <gos_taskWakeup+0x174>)
 8011912:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011914:	88fb      	ldrh	r3, [r7, #6]
 8011916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801191a:	d969      	bls.n	80119f0 <gos_taskWakeup+0x120>
 801191c:	88fb      	ldrh	r3, [r7, #6]
 801191e:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011922:	4293      	cmp	r3, r2
 8011924:	d864      	bhi.n	80119f0 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011926:	88fb      	ldrh	r3, [r7, #6]
 8011928:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801192c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 801192e:	4b46      	ldr	r3, [pc, #280]	@ (8011a48 <gos_taskWakeup+0x178>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4a46      	ldr	r2, [pc, #280]	@ (8011a4c <gos_taskWakeup+0x17c>)
 8011934:	216a      	movs	r1, #106	@ 0x6a
 8011936:	fb01 f303 	mul.w	r3, r1, r3
 801193a:	4413      	add	r3, r2
 801193c:	3308      	adds	r3, #8
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	b21b      	sxth	r3, r3
 8011942:	2b00      	cmp	r3, #0
 8011944:	db03      	blt.n	801194e <gos_taskWakeup+0x7e>
            inIsr > 0)
 8011946:	4b42      	ldr	r3, [pc, #264]	@ (8011a50 <gos_taskWakeup+0x180>)
 8011948:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 801194a:	2b00      	cmp	r3, #0
 801194c:	d015      	beq.n	801197a <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 801194e:	4a3f      	ldr	r2, [pc, #252]	@ (8011a4c <gos_taskWakeup+0x17c>)
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	216a      	movs	r1, #106	@ 0x6a
 8011954:	fb01 f303 	mul.w	r3, r1, r3
 8011958:	4413      	add	r3, r2
 801195a:	3304      	adds	r3, #4
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	2b16      	cmp	r3, #22
 8011960:	d146      	bne.n	80119f0 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8011962:	4a3a      	ldr	r2, [pc, #232]	@ (8011a4c <gos_taskWakeup+0x17c>)
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	216a      	movs	r1, #106	@ 0x6a
 8011968:	fb01 f303 	mul.w	r3, r1, r3
 801196c:	4413      	add	r3, r2
 801196e:	3304      	adds	r3, #4
 8011970:	220a      	movs	r2, #10
 8011972:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 8011974:	2355      	movs	r3, #85	@ 0x55
 8011976:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8011978:	e03a      	b.n	80119f0 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 801197a:	4b30      	ldr	r3, [pc, #192]	@ (8011a3c <gos_taskWakeup+0x16c>)
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d005      	beq.n	801198e <gos_taskWakeup+0xbe>
 8011982:	4b2e      	ldr	r3, [pc, #184]	@ (8011a3c <gos_taskWakeup+0x16c>)
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	3b01      	subs	r3, #1
 8011988:	b2da      	uxtb	r2, r3
 801198a:	4b2c      	ldr	r3, [pc, #176]	@ (8011a3c <gos_taskWakeup+0x16c>)
 801198c:	701a      	strb	r2, [r3, #0]
 801198e:	4b2b      	ldr	r3, [pc, #172]	@ (8011a3c <gos_taskWakeup+0x16c>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d108      	bne.n	80119a8 <gos_taskWakeup+0xd8>
 8011996:	4b2a      	ldr	r3, [pc, #168]	@ (8011a40 <gos_taskWakeup+0x170>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f383 8810 	msr	PRIMASK, r3
 801199e:	b662      	cpsie	i
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	f3bf 8f6f 	isb	sy
 80119a8:	4b26      	ldr	r3, [pc, #152]	@ (8011a44 <gos_taskWakeup+0x174>)
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d005      	beq.n	80119bc <gos_taskWakeup+0xec>
 80119b0:	4b24      	ldr	r3, [pc, #144]	@ (8011a44 <gos_taskWakeup+0x174>)
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	3b01      	subs	r3, #1
 80119b6:	b2da      	uxtb	r2, r3
 80119b8:	4b22      	ldr	r3, [pc, #136]	@ (8011a44 <gos_taskWakeup+0x174>)
 80119ba:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80119bc:	4b22      	ldr	r3, [pc, #136]	@ (8011a48 <gos_taskWakeup+0x178>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	226a      	movs	r2, #106	@ 0x6a
 80119c2:	fb02 f303 	mul.w	r3, r2, r3
 80119c6:	3308      	adds	r3, #8
 80119c8:	4a20      	ldr	r2, [pc, #128]	@ (8011a4c <gos_taskWakeup+0x17c>)
 80119ca:	4413      	add	r3, r2
 80119cc:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	216a      	movs	r1, #106	@ 0x6a
 80119d2:	fb01 f202 	mul.w	r2, r1, r2
 80119d6:	3208      	adds	r2, #8
 80119d8:	491c      	ldr	r1, [pc, #112]	@ (8011a4c <gos_taskWakeup+0x17c>)
 80119da:	440a      	add	r2, r1
 80119dc:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 80119de:	9201      	str	r2, [sp, #4]
 80119e0:	9300      	str	r3, [sp, #0]
 80119e2:	4b1c      	ldr	r3, [pc, #112]	@ (8011a54 <gos_taskWakeup+0x184>)
 80119e4:	f240 1275 	movw	r2, #373	@ 0x175
 80119e8:	491b      	ldr	r1, [pc, #108]	@ (8011a58 <gos_taskWakeup+0x188>)
 80119ea:	2034      	movs	r0, #52	@ 0x34
 80119ec:	f001 fbd0 	bl	8013190 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80119f0:	4b12      	ldr	r3, [pc, #72]	@ (8011a3c <gos_taskWakeup+0x16c>)
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d005      	beq.n	8011a04 <gos_taskWakeup+0x134>
 80119f8:	4b10      	ldr	r3, [pc, #64]	@ (8011a3c <gos_taskWakeup+0x16c>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	3b01      	subs	r3, #1
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	4b0e      	ldr	r3, [pc, #56]	@ (8011a3c <gos_taskWakeup+0x16c>)
 8011a02:	701a      	strb	r2, [r3, #0]
 8011a04:	4b0d      	ldr	r3, [pc, #52]	@ (8011a3c <gos_taskWakeup+0x16c>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d108      	bne.n	8011a1e <gos_taskWakeup+0x14e>
 8011a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8011a40 <gos_taskWakeup+0x170>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	f383 8810 	msr	PRIMASK, r3
 8011a14:	b662      	cpsie	i
 8011a16:	f3bf 8f4f 	dsb	sy
 8011a1a:	f3bf 8f6f 	isb	sy
 8011a1e:	4b09      	ldr	r3, [pc, #36]	@ (8011a44 <gos_taskWakeup+0x174>)
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d005      	beq.n	8011a32 <gos_taskWakeup+0x162>
 8011a26:	4b07      	ldr	r3, [pc, #28]	@ (8011a44 <gos_taskWakeup+0x174>)
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	3b01      	subs	r3, #1
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	4b05      	ldr	r3, [pc, #20]	@ (8011a44 <gos_taskWakeup+0x174>)
 8011a30:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 8011a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	20005e53 	.word	0x20005e53
 8011a40:	20005e54 	.word	0x20005e54
 8011a44:	20005e51 	.word	0x20005e51
 8011a48:	20005e58 	.word	0x20005e58
 8011a4c:	20000788 	.word	0x20000788
 8011a50:	20005e52 	.word	0x20005e52
 8011a54:	08019ddc 	.word	0x08019ddc
 8011a58:	0801aa94 	.word	0x0801aa94

08011a5c <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b086      	sub	sp, #24
 8011a60:	af02      	add	r7, sp, #8
 8011a62:	4603      	mov	r3, r0
 8011a64:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 8011a66:	23ae      	movs	r3, #174	@ 0xae
 8011a68:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011a6e:	4b84      	ldr	r3, [pc, #528]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d108      	bne.n	8011a88 <gos_taskSuspend+0x2c>
 8011a76:	b672      	cpsid	i
 8011a78:	f3ef 8310 	mrs	r3, PRIMASK
 8011a7c:	4a81      	ldr	r2, [pc, #516]	@ (8011c84 <gos_taskSuspend+0x228>)
 8011a7e:	6013      	str	r3, [r2, #0]
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	4b7d      	ldr	r3, [pc, #500]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	4b7b      	ldr	r3, [pc, #492]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011a92:	701a      	strb	r2, [r3, #0]
 8011a94:	4b7c      	ldr	r3, [pc, #496]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	b2da      	uxtb	r2, r3
 8011a9c:	4b7a      	ldr	r3, [pc, #488]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011a9e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011aa0:	88fb      	ldrh	r3, [r7, #6]
 8011aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011aa6:	f240 80c1 	bls.w	8011c2c <gos_taskSuspend+0x1d0>
 8011aaa:	88fb      	ldrh	r3, [r7, #6]
 8011aac:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	f200 80bb 	bhi.w	8011c2c <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011ab6:	88fb      	ldrh	r3, [r7, #6]
 8011ab8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8011abc:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011abe:	4b73      	ldr	r3, [pc, #460]	@ (8011c8c <gos_taskSuspend+0x230>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4a73      	ldr	r2, [pc, #460]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011ac4:	216a      	movs	r1, #106	@ 0x6a
 8011ac6:	fb01 f303 	mul.w	r3, r1, r3
 8011aca:	4413      	add	r3, r2
 8011acc:	3308      	adds	r3, #8
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	b21b      	sxth	r3, r3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	db08      	blt.n	8011ae8 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8011c8c <gos_taskSuspend+0x230>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011ada:	68ba      	ldr	r2, [r7, #8]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d003      	beq.n	8011ae8 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8011c94 <gos_taskSuspend+0x238>)
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d064      	beq.n	8011bb2 <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011ae8:	4a69      	ldr	r2, [pc, #420]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	216a      	movs	r1, #106	@ 0x6a
 8011aee:	fb01 f303 	mul.w	r3, r1, r3
 8011af2:	4413      	add	r3, r2
 8011af4:	3304      	adds	r3, #4
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	2b0a      	cmp	r3, #10
 8011afa:	d014      	beq.n	8011b26 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8011afc:	4a64      	ldr	r2, [pc, #400]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	216a      	movs	r1, #106	@ 0x6a
 8011b02:	fb01 f303 	mul.w	r3, r1, r3
 8011b06:	4413      	add	r3, r2
 8011b08:	3304      	adds	r3, #4
 8011b0a:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011b0c:	2b16      	cmp	r3, #22
 8011b0e:	d00a      	beq.n	8011b26 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8011b10:	4a5f      	ldr	r2, [pc, #380]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	216a      	movs	r1, #106	@ 0x6a
 8011b16:	fb01 f303 	mul.w	r3, r1, r3
 8011b1a:	4413      	add	r3, r2
 8011b1c:	3304      	adds	r3, #4
 8011b1e:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8011b20:	2b19      	cmp	r3, #25
 8011b22:	f040 8082 	bne.w	8011c2a <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 8011b26:	4a5a      	ldr	r2, [pc, #360]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	216a      	movs	r1, #106	@ 0x6a
 8011b2c:	fb01 f303 	mul.w	r3, r1, r3
 8011b30:	4413      	add	r3, r2
 8011b32:	3304      	adds	r3, #4
 8011b34:	7818      	ldrb	r0, [r3, #0]
 8011b36:	4a56      	ldr	r2, [pc, #344]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	216a      	movs	r1, #106	@ 0x6a
 8011b3c:	fb01 f303 	mul.w	r3, r1, r3
 8011b40:	4413      	add	r3, r2
 8011b42:	3305      	adds	r3, #5
 8011b44:	4602      	mov	r2, r0
 8011b46:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 8011b48:	4a51      	ldr	r2, [pc, #324]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	216a      	movs	r1, #106	@ 0x6a
 8011b4e:	fb01 f303 	mul.w	r3, r1, r3
 8011b52:	4413      	add	r3, r2
 8011b54:	3304      	adds	r3, #4
 8011b56:	2205      	movs	r2, #5
 8011b58:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8011b5a:	2355      	movs	r3, #85	@ 0x55
 8011b5c:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8011b5e:	4b48      	ldr	r3, [pc, #288]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d005      	beq.n	8011b72 <gos_taskSuspend+0x116>
 8011b66:	4b46      	ldr	r3, [pc, #280]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	4b44      	ldr	r3, [pc, #272]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011b70:	701a      	strb	r2, [r3, #0]
 8011b72:	4b43      	ldr	r3, [pc, #268]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d108      	bne.n	8011b8c <gos_taskSuspend+0x130>
 8011b7a:	4b42      	ldr	r3, [pc, #264]	@ (8011c84 <gos_taskSuspend+0x228>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f383 8810 	msr	PRIMASK, r3
 8011b82:	b662      	cpsie	i
 8011b84:	f3bf 8f4f 	dsb	sy
 8011b88:	f3bf 8f6f 	isb	sy
 8011b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d005      	beq.n	8011ba0 <gos_taskSuspend+0x144>
 8011b94:	4b3c      	ldr	r3, [pc, #240]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011b9e:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8011ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8011c8c <gos_taskSuspend+0x230>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68ba      	ldr	r2, [r7, #8]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d13f      	bne.n	8011c2a <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8011baa:	2009      	movs	r0, #9
 8011bac:	f7ff f9b6 	bl	8010f1c <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011bb0:	e03b      	b.n	8011c2a <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8011bb2:	4b33      	ldr	r3, [pc, #204]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d005      	beq.n	8011bc6 <gos_taskSuspend+0x16a>
 8011bba:	4b31      	ldr	r3, [pc, #196]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	3b01      	subs	r3, #1
 8011bc0:	b2da      	uxtb	r2, r3
 8011bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011bc4:	701a      	strb	r2, [r3, #0]
 8011bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d108      	bne.n	8011be0 <gos_taskSuspend+0x184>
 8011bce:	4b2d      	ldr	r3, [pc, #180]	@ (8011c84 <gos_taskSuspend+0x228>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f383 8810 	msr	PRIMASK, r3
 8011bd6:	b662      	cpsie	i
 8011bd8:	f3bf 8f4f 	dsb	sy
 8011bdc:	f3bf 8f6f 	isb	sy
 8011be0:	4b29      	ldr	r3, [pc, #164]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d005      	beq.n	8011bf4 <gos_taskSuspend+0x198>
 8011be8:	4b27      	ldr	r3, [pc, #156]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	3b01      	subs	r3, #1
 8011bee:	b2da      	uxtb	r2, r3
 8011bf0:	4b25      	ldr	r3, [pc, #148]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011bf2:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011bf4:	4b25      	ldr	r3, [pc, #148]	@ (8011c8c <gos_taskSuspend+0x230>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	226a      	movs	r2, #106	@ 0x6a
 8011bfa:	fb02 f303 	mul.w	r3, r2, r3
 8011bfe:	3308      	adds	r3, #8
 8011c00:	4a23      	ldr	r2, [pc, #140]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011c02:	4413      	add	r3, r2
 8011c04:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	216a      	movs	r1, #106	@ 0x6a
 8011c0a:	fb01 f202 	mul.w	r2, r1, r2
 8011c0e:	3208      	adds	r2, #8
 8011c10:	491f      	ldr	r1, [pc, #124]	@ (8011c90 <gos_taskSuspend+0x234>)
 8011c12:	440a      	add	r2, r1
 8011c14:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 8011c16:	9201      	str	r2, [sp, #4]
 8011c18:	9300      	str	r3, [sp, #0]
 8011c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8011c98 <gos_taskSuspend+0x23c>)
 8011c1c:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8011c20:	491e      	ldr	r1, [pc, #120]	@ (8011c9c <gos_taskSuspend+0x240>)
 8011c22:	2034      	movs	r0, #52	@ 0x34
 8011c24:	f001 fab4 	bl	8013190 <gos_errorHandler>
 8011c28:	e000      	b.n	8011c2c <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8011c2a:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 8011c2c:	7bfb      	ldrb	r3, [r7, #15]
 8011c2e:	2b55      	cmp	r3, #85	@ 0x55
 8011c30:	d020      	beq.n	8011c74 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 8011c32:	4b13      	ldr	r3, [pc, #76]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d005      	beq.n	8011c46 <gos_taskSuspend+0x1ea>
 8011c3a:	4b11      	ldr	r3, [pc, #68]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	b2da      	uxtb	r2, r3
 8011c42:	4b0f      	ldr	r3, [pc, #60]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011c44:	701a      	strb	r2, [r3, #0]
 8011c46:	4b0e      	ldr	r3, [pc, #56]	@ (8011c80 <gos_taskSuspend+0x224>)
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d108      	bne.n	8011c60 <gos_taskSuspend+0x204>
 8011c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c84 <gos_taskSuspend+0x228>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f383 8810 	msr	PRIMASK, r3
 8011c56:	b662      	cpsie	i
 8011c58:	f3bf 8f4f 	dsb	sy
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	4b09      	ldr	r3, [pc, #36]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d005      	beq.n	8011c74 <gos_taskSuspend+0x218>
 8011c68:	4b07      	ldr	r3, [pc, #28]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	4b05      	ldr	r3, [pc, #20]	@ (8011c88 <gos_taskSuspend+0x22c>)
 8011c72:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 8011c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	20005e53 	.word	0x20005e53
 8011c84:	20005e54 	.word	0x20005e54
 8011c88:	20005e51 	.word	0x20005e51
 8011c8c:	20005e58 	.word	0x20005e58
 8011c90:	20000788 	.word	0x20000788
 8011c94:	20005e52 	.word	0x20005e52
 8011c98:	08019e04 	.word	0x08019e04
 8011c9c:	0801aaa4 	.word	0x0801aaa4

08011ca0 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af02      	add	r7, sp, #8
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 8011caa:	23ae      	movs	r3, #174	@ 0xae
 8011cac:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8011ddc <gos_taskResume+0x13c>)
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d108      	bne.n	8011ccc <gos_taskResume+0x2c>
 8011cba:	b672      	cpsid	i
 8011cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8011cc0:	4a47      	ldr	r2, [pc, #284]	@ (8011de0 <gos_taskResume+0x140>)
 8011cc2:	6013      	str	r3, [r2, #0]
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	4b43      	ldr	r3, [pc, #268]	@ (8011ddc <gos_taskResume+0x13c>)
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	4b41      	ldr	r3, [pc, #260]	@ (8011ddc <gos_taskResume+0x13c>)
 8011cd6:	701a      	strb	r2, [r3, #0]
 8011cd8:	4b42      	ldr	r3, [pc, #264]	@ (8011de4 <gos_taskResume+0x144>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	4b40      	ldr	r3, [pc, #256]	@ (8011de4 <gos_taskResume+0x144>)
 8011ce2:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011ce4:	88fb      	ldrh	r3, [r7, #6]
 8011ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011cea:	d950      	bls.n	8011d8e <gos_taskResume+0xee>
 8011cec:	88fb      	ldrh	r3, [r7, #6]
 8011cee:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	d84b      	bhi.n	8011d8e <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011cf6:	88fb      	ldrh	r3, [r7, #6]
 8011cf8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8011cfc:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8011de8 <gos_taskResume+0x148>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	4a3a      	ldr	r2, [pc, #232]	@ (8011dec <gos_taskResume+0x14c>)
 8011d04:	216a      	movs	r1, #106	@ 0x6a
 8011d06:	fb01 f303 	mul.w	r3, r1, r3
 8011d0a:	4413      	add	r3, r2
 8011d0c:	3308      	adds	r3, #8
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	b21b      	sxth	r3, r3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	db03      	blt.n	8011d1e <gos_taskResume+0x7e>
            inIsr > 0)
 8011d16:	4b36      	ldr	r3, [pc, #216]	@ (8011df0 <gos_taskResume+0x150>)
 8011d18:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d01d      	beq.n	8011d5a <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8011d1e:	4a33      	ldr	r2, [pc, #204]	@ (8011dec <gos_taskResume+0x14c>)
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	216a      	movs	r1, #106	@ 0x6a
 8011d24:	fb01 f303 	mul.w	r3, r1, r3
 8011d28:	4413      	add	r3, r2
 8011d2a:	3304      	adds	r3, #4
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	2b05      	cmp	r3, #5
 8011d30:	d12d      	bne.n	8011d8e <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 8011d32:	4a2e      	ldr	r2, [pc, #184]	@ (8011dec <gos_taskResume+0x14c>)
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	216a      	movs	r1, #106	@ 0x6a
 8011d38:	fb01 f303 	mul.w	r3, r1, r3
 8011d3c:	4413      	add	r3, r2
 8011d3e:	3305      	adds	r3, #5
 8011d40:	7818      	ldrb	r0, [r3, #0]
 8011d42:	4a2a      	ldr	r2, [pc, #168]	@ (8011dec <gos_taskResume+0x14c>)
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	216a      	movs	r1, #106	@ 0x6a
 8011d48:	fb01 f303 	mul.w	r3, r1, r3
 8011d4c:	4413      	add	r3, r2
 8011d4e:	3304      	adds	r3, #4
 8011d50:	4602      	mov	r2, r0
 8011d52:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8011d54:	2355      	movs	r3, #85	@ 0x55
 8011d56:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8011d58:	e019      	b.n	8011d8e <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011d5a:	4b23      	ldr	r3, [pc, #140]	@ (8011de8 <gos_taskResume+0x148>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	226a      	movs	r2, #106	@ 0x6a
 8011d60:	fb02 f303 	mul.w	r3, r2, r3
 8011d64:	3308      	adds	r3, #8
 8011d66:	4a21      	ldr	r2, [pc, #132]	@ (8011dec <gos_taskResume+0x14c>)
 8011d68:	4413      	add	r3, r2
 8011d6a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	216a      	movs	r1, #106	@ 0x6a
 8011d70:	fb01 f202 	mul.w	r2, r1, r2
 8011d74:	3208      	adds	r2, #8
 8011d76:	491d      	ldr	r1, [pc, #116]	@ (8011dec <gos_taskResume+0x14c>)
 8011d78:	440a      	add	r2, r1
 8011d7a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 8011d7c:	9201      	str	r2, [sp, #4]
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	4b1c      	ldr	r3, [pc, #112]	@ (8011df4 <gos_taskResume+0x154>)
 8011d82:	f240 12f1 	movw	r2, #497	@ 0x1f1
 8011d86:	491c      	ldr	r1, [pc, #112]	@ (8011df8 <gos_taskResume+0x158>)
 8011d88:	2034      	movs	r0, #52	@ 0x34
 8011d8a:	f001 fa01 	bl	8013190 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 8011d8e:	4b13      	ldr	r3, [pc, #76]	@ (8011ddc <gos_taskResume+0x13c>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d005      	beq.n	8011da2 <gos_taskResume+0x102>
 8011d96:	4b11      	ldr	r3, [pc, #68]	@ (8011ddc <gos_taskResume+0x13c>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	3b01      	subs	r3, #1
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8011ddc <gos_taskResume+0x13c>)
 8011da0:	701a      	strb	r2, [r3, #0]
 8011da2:	4b0e      	ldr	r3, [pc, #56]	@ (8011ddc <gos_taskResume+0x13c>)
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d108      	bne.n	8011dbc <gos_taskResume+0x11c>
 8011daa:	4b0d      	ldr	r3, [pc, #52]	@ (8011de0 <gos_taskResume+0x140>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	f383 8810 	msr	PRIMASK, r3
 8011db2:	b662      	cpsie	i
 8011db4:	f3bf 8f4f 	dsb	sy
 8011db8:	f3bf 8f6f 	isb	sy
 8011dbc:	4b09      	ldr	r3, [pc, #36]	@ (8011de4 <gos_taskResume+0x144>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d005      	beq.n	8011dd0 <gos_taskResume+0x130>
 8011dc4:	4b07      	ldr	r3, [pc, #28]	@ (8011de4 <gos_taskResume+0x144>)
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	3b01      	subs	r3, #1
 8011dca:	b2da      	uxtb	r2, r3
 8011dcc:	4b05      	ldr	r3, [pc, #20]	@ (8011de4 <gos_taskResume+0x144>)
 8011dce:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	20005e53 	.word	0x20005e53
 8011de0:	20005e54 	.word	0x20005e54
 8011de4:	20005e51 	.word	0x20005e51
 8011de8:	20005e58 	.word	0x20005e58
 8011dec:	20000788 	.word	0x20000788
 8011df0:	20005e52 	.word	0x20005e52
 8011df4:	08019e2c 	.word	0x08019e2c
 8011df8:	0801aab4 	.word	0x0801aab4

08011dfc <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af02      	add	r7, sp, #8
 8011e02:	4603      	mov	r3, r0
 8011e04:	6039      	str	r1, [r7, #0]
 8011e06:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 8011e08:	23ae      	movs	r3, #174	@ 0xae
 8011e0a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011e10:	4b7b      	ldr	r3, [pc, #492]	@ (8012000 <gos_taskBlock+0x204>)
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d108      	bne.n	8011e2a <gos_taskBlock+0x2e>
 8011e18:	b672      	cpsid	i
 8011e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e1e:	4a79      	ldr	r2, [pc, #484]	@ (8012004 <gos_taskBlock+0x208>)
 8011e20:	6013      	str	r3, [r2, #0]
 8011e22:	f3bf 8f4f 	dsb	sy
 8011e26:	f3bf 8f6f 	isb	sy
 8011e2a:	4b75      	ldr	r3, [pc, #468]	@ (8012000 <gos_taskBlock+0x204>)
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	4b73      	ldr	r3, [pc, #460]	@ (8012000 <gos_taskBlock+0x204>)
 8011e34:	701a      	strb	r2, [r3, #0]
 8011e36:	4b74      	ldr	r3, [pc, #464]	@ (8012008 <gos_taskBlock+0x20c>)
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	b2da      	uxtb	r2, r3
 8011e3e:	4b72      	ldr	r3, [pc, #456]	@ (8012008 <gos_taskBlock+0x20c>)
 8011e40:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8011e42:	88fb      	ldrh	r3, [r7, #6]
 8011e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e48:	f240 80b0 	bls.w	8011fac <gos_taskBlock+0x1b0>
 8011e4c:	88fb      	ldrh	r3, [r7, #6]
 8011e4e:	f248 020f 	movw	r2, #32783	@ 0x800f
 8011e52:	4293      	cmp	r3, r2
 8011e54:	f200 80aa 	bhi.w	8011fac <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8011e58:	88fb      	ldrh	r3, [r7, #6]
 8011e5a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8011e5e:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011e60:	4b6a      	ldr	r3, [pc, #424]	@ (801200c <gos_taskBlock+0x210>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	4a6a      	ldr	r2, [pc, #424]	@ (8012010 <gos_taskBlock+0x214>)
 8011e66:	216a      	movs	r1, #106	@ 0x6a
 8011e68:	fb01 f303 	mul.w	r3, r1, r3
 8011e6c:	4413      	add	r3, r2
 8011e6e:	3308      	adds	r3, #8
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	b21b      	sxth	r3, r3
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	db08      	blt.n	8011e8a <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011e78:	4b64      	ldr	r3, [pc, #400]	@ (801200c <gos_taskBlock+0x210>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8011e7c:	68ba      	ldr	r2, [r7, #8]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d003      	beq.n	8011e8a <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8011e82:	4b64      	ldr	r3, [pc, #400]	@ (8012014 <gos_taskBlock+0x218>)
 8011e84:	781b      	ldrb	r3, [r3, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d053      	beq.n	8011f32 <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8011e8a:	4a61      	ldr	r2, [pc, #388]	@ (8012010 <gos_taskBlock+0x214>)
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	216a      	movs	r1, #106	@ 0x6a
 8011e90:	fb01 f303 	mul.w	r3, r1, r3
 8011e94:	4413      	add	r3, r2
 8011e96:	3304      	adds	r3, #4
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b0a      	cmp	r3, #10
 8011e9c:	f040 8085 	bne.w	8011faa <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 8011ea0:	4a5b      	ldr	r2, [pc, #364]	@ (8012010 <gos_taskBlock+0x214>)
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	216a      	movs	r1, #106	@ 0x6a
 8011ea6:	fb01 f303 	mul.w	r3, r1, r3
 8011eaa:	4413      	add	r3, r2
 8011eac:	3304      	adds	r3, #4
 8011eae:	2219      	movs	r2, #25
 8011eb0:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 8011eb2:	4a57      	ldr	r2, [pc, #348]	@ (8012010 <gos_taskBlock+0x214>)
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	216a      	movs	r1, #106	@ 0x6a
 8011eb8:	fb01 f303 	mul.w	r3, r1, r3
 8011ebc:	4413      	add	r3, r2
 8011ebe:	3334      	adds	r3, #52	@ 0x34
 8011ec0:	683a      	ldr	r2, [r7, #0]
 8011ec2:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 8011ec4:	4a52      	ldr	r2, [pc, #328]	@ (8012010 <gos_taskBlock+0x214>)
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	216a      	movs	r1, #106	@ 0x6a
 8011eca:	fb01 f303 	mul.w	r3, r1, r3
 8011ece:	4413      	add	r3, r2
 8011ed0:	3338      	adds	r3, #56	@ 0x38
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	801a      	strh	r2, [r3, #0]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 8011eda:	2355      	movs	r3, #85	@ 0x55
 8011edc:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8011ede:	4b48      	ldr	r3, [pc, #288]	@ (8012000 <gos_taskBlock+0x204>)
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d005      	beq.n	8011ef2 <gos_taskBlock+0xf6>
 8011ee6:	4b46      	ldr	r3, [pc, #280]	@ (8012000 <gos_taskBlock+0x204>)
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	3b01      	subs	r3, #1
 8011eec:	b2da      	uxtb	r2, r3
 8011eee:	4b44      	ldr	r3, [pc, #272]	@ (8012000 <gos_taskBlock+0x204>)
 8011ef0:	701a      	strb	r2, [r3, #0]
 8011ef2:	4b43      	ldr	r3, [pc, #268]	@ (8012000 <gos_taskBlock+0x204>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d108      	bne.n	8011f0c <gos_taskBlock+0x110>
 8011efa:	4b42      	ldr	r3, [pc, #264]	@ (8012004 <gos_taskBlock+0x208>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f383 8810 	msr	PRIMASK, r3
 8011f02:	b662      	cpsie	i
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8012008 <gos_taskBlock+0x20c>)
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d005      	beq.n	8011f20 <gos_taskBlock+0x124>
 8011f14:	4b3c      	ldr	r3, [pc, #240]	@ (8012008 <gos_taskBlock+0x20c>)
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	b2da      	uxtb	r2, r3
 8011f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8012008 <gos_taskBlock+0x20c>)
 8011f1e:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8011f20:	4b3a      	ldr	r3, [pc, #232]	@ (801200c <gos_taskBlock+0x210>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	68ba      	ldr	r2, [r7, #8]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d13f      	bne.n	8011faa <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8011f2a:	2009      	movs	r0, #9
 8011f2c:	f7fe fff6 	bl	8010f1c <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8011f30:	e03b      	b.n	8011faa <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8011f32:	4b33      	ldr	r3, [pc, #204]	@ (8012000 <gos_taskBlock+0x204>)
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d005      	beq.n	8011f46 <gos_taskBlock+0x14a>
 8011f3a:	4b31      	ldr	r3, [pc, #196]	@ (8012000 <gos_taskBlock+0x204>)
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	3b01      	subs	r3, #1
 8011f40:	b2da      	uxtb	r2, r3
 8011f42:	4b2f      	ldr	r3, [pc, #188]	@ (8012000 <gos_taskBlock+0x204>)
 8011f44:	701a      	strb	r2, [r3, #0]
 8011f46:	4b2e      	ldr	r3, [pc, #184]	@ (8012000 <gos_taskBlock+0x204>)
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d108      	bne.n	8011f60 <gos_taskBlock+0x164>
 8011f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8012004 <gos_taskBlock+0x208>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f383 8810 	msr	PRIMASK, r3
 8011f56:	b662      	cpsie	i
 8011f58:	f3bf 8f4f 	dsb	sy
 8011f5c:	f3bf 8f6f 	isb	sy
 8011f60:	4b29      	ldr	r3, [pc, #164]	@ (8012008 <gos_taskBlock+0x20c>)
 8011f62:	781b      	ldrb	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d005      	beq.n	8011f74 <gos_taskBlock+0x178>
 8011f68:	4b27      	ldr	r3, [pc, #156]	@ (8012008 <gos_taskBlock+0x20c>)
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	3b01      	subs	r3, #1
 8011f6e:	b2da      	uxtb	r2, r3
 8011f70:	4b25      	ldr	r3, [pc, #148]	@ (8012008 <gos_taskBlock+0x20c>)
 8011f72:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8011f74:	4b25      	ldr	r3, [pc, #148]	@ (801200c <gos_taskBlock+0x210>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	226a      	movs	r2, #106	@ 0x6a
 8011f7a:	fb02 f303 	mul.w	r3, r2, r3
 8011f7e:	3308      	adds	r3, #8
 8011f80:	4a23      	ldr	r2, [pc, #140]	@ (8012010 <gos_taskBlock+0x214>)
 8011f82:	4413      	add	r3, r2
 8011f84:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8011f86:	68ba      	ldr	r2, [r7, #8]
 8011f88:	216a      	movs	r1, #106	@ 0x6a
 8011f8a:	fb01 f202 	mul.w	r2, r1, r2
 8011f8e:	3208      	adds	r2, #8
 8011f90:	491f      	ldr	r1, [pc, #124]	@ (8012010 <gos_taskBlock+0x214>)
 8011f92:	440a      	add	r2, r1
 8011f94:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 8011f96:	9201      	str	r2, [sp, #4]
 8011f98:	9300      	str	r3, [sp, #0]
 8011f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8012018 <gos_taskBlock+0x21c>)
 8011f9c:	f240 2235 	movw	r2, #565	@ 0x235
 8011fa0:	491e      	ldr	r1, [pc, #120]	@ (801201c <gos_taskBlock+0x220>)
 8011fa2:	2034      	movs	r0, #52	@ 0x34
 8011fa4:	f001 f8f4 	bl	8013190 <gos_errorHandler>
 8011fa8:	e000      	b.n	8011fac <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8011faa:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
 8011fae:	2b55      	cmp	r3, #85	@ 0x55
 8011fb0:	d020      	beq.n	8011ff4 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 8011fb2:	4b13      	ldr	r3, [pc, #76]	@ (8012000 <gos_taskBlock+0x204>)
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d005      	beq.n	8011fc6 <gos_taskBlock+0x1ca>
 8011fba:	4b11      	ldr	r3, [pc, #68]	@ (8012000 <gos_taskBlock+0x204>)
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	3b01      	subs	r3, #1
 8011fc0:	b2da      	uxtb	r2, r3
 8011fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8012000 <gos_taskBlock+0x204>)
 8011fc4:	701a      	strb	r2, [r3, #0]
 8011fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8012000 <gos_taskBlock+0x204>)
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d108      	bne.n	8011fe0 <gos_taskBlock+0x1e4>
 8011fce:	4b0d      	ldr	r3, [pc, #52]	@ (8012004 <gos_taskBlock+0x208>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	f383 8810 	msr	PRIMASK, r3
 8011fd6:	b662      	cpsie	i
 8011fd8:	f3bf 8f4f 	dsb	sy
 8011fdc:	f3bf 8f6f 	isb	sy
 8011fe0:	4b09      	ldr	r3, [pc, #36]	@ (8012008 <gos_taskBlock+0x20c>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d005      	beq.n	8011ff4 <gos_taskBlock+0x1f8>
 8011fe8:	4b07      	ldr	r3, [pc, #28]	@ (8012008 <gos_taskBlock+0x20c>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	3b01      	subs	r3, #1
 8011fee:	b2da      	uxtb	r2, r3
 8011ff0:	4b05      	ldr	r3, [pc, #20]	@ (8012008 <gos_taskBlock+0x20c>)
 8011ff2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 8011ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	20005e53 	.word	0x20005e53
 8012004:	20005e54 	.word	0x20005e54
 8012008:	20005e51 	.word	0x20005e51
 801200c:	20005e58 	.word	0x20005e58
 8012010:	20000788 	.word	0x20000788
 8012014:	20005e52 	.word	0x20005e52
 8012018:	08019e54 	.word	0x08019e54
 801201c:	0801aac4 	.word	0x0801aac4

08012020 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af02      	add	r7, sp, #8
 8012026:	4603      	mov	r3, r0
 8012028:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 801202a:	23ae      	movs	r3, #174	@ 0xae
 801202c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 801202e:	2300      	movs	r3, #0
 8012030:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012032:	4b68      	ldr	r3, [pc, #416]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d108      	bne.n	801204c <gos_taskUnblock+0x2c>
 801203a:	b672      	cpsid	i
 801203c:	f3ef 8310 	mrs	r3, PRIMASK
 8012040:	4a65      	ldr	r2, [pc, #404]	@ (80121d8 <gos_taskUnblock+0x1b8>)
 8012042:	6013      	str	r3, [r2, #0]
 8012044:	f3bf 8f4f 	dsb	sy
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	4b61      	ldr	r3, [pc, #388]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	3301      	adds	r3, #1
 8012052:	b2da      	uxtb	r2, r3
 8012054:	4b5f      	ldr	r3, [pc, #380]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012056:	701a      	strb	r2, [r3, #0]
 8012058:	4b60      	ldr	r3, [pc, #384]	@ (80121dc <gos_taskUnblock+0x1bc>)
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	3301      	adds	r3, #1
 801205e:	b2da      	uxtb	r2, r3
 8012060:	4b5e      	ldr	r3, [pc, #376]	@ (80121dc <gos_taskUnblock+0x1bc>)
 8012062:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8012064:	88fb      	ldrh	r3, [r7, #6]
 8012066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801206a:	f240 808d 	bls.w	8012188 <gos_taskUnblock+0x168>
 801206e:	88fb      	ldrh	r3, [r7, #6]
 8012070:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012074:	4293      	cmp	r3, r2
 8012076:	f200 8087 	bhi.w	8012188 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801207a:	88fb      	ldrh	r3, [r7, #6]
 801207c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012080:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8012082:	4b57      	ldr	r3, [pc, #348]	@ (80121e0 <gos_taskUnblock+0x1c0>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4a57      	ldr	r2, [pc, #348]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 8012088:	216a      	movs	r1, #106	@ 0x6a
 801208a:	fb01 f303 	mul.w	r3, r1, r3
 801208e:	4413      	add	r3, r2
 8012090:	3308      	adds	r3, #8
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	b21b      	sxth	r3, r3
 8012096:	2b00      	cmp	r3, #0
 8012098:	db03      	blt.n	80120a2 <gos_taskUnblock+0x82>
            inIsr > 0)
 801209a:	4b53      	ldr	r3, [pc, #332]	@ (80121e8 <gos_taskUnblock+0x1c8>)
 801209c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d035      	beq.n	801210e <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80120a2:	4a50      	ldr	r2, [pc, #320]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	216a      	movs	r1, #106	@ 0x6a
 80120a8:	fb01 f303 	mul.w	r3, r1, r3
 80120ac:	4413      	add	r3, r2
 80120ae:	3304      	adds	r3, #4
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	2b19      	cmp	r3, #25
 80120b4:	d10b      	bne.n	80120ce <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80120b6:	4a4b      	ldr	r2, [pc, #300]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	216a      	movs	r1, #106	@ 0x6a
 80120bc:	fb01 f303 	mul.w	r3, r1, r3
 80120c0:	4413      	add	r3, r2
 80120c2:	3304      	adds	r3, #4
 80120c4:	220a      	movs	r2, #10
 80120c6:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 80120c8:	2355      	movs	r3, #85	@ 0x55
 80120ca:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80120cc:	e05b      	b.n	8012186 <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 80120ce:	4a45      	ldr	r2, [pc, #276]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	216a      	movs	r1, #106	@ 0x6a
 80120d4:	fb01 f303 	mul.w	r3, r1, r3
 80120d8:	4413      	add	r3, r2
 80120da:	3304      	adds	r3, #4
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	2b05      	cmp	r3, #5
 80120e0:	d151      	bne.n	8012186 <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 80120e2:	4a40      	ldr	r2, [pc, #256]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	216a      	movs	r1, #106	@ 0x6a
 80120e8:	fb01 f303 	mul.w	r3, r1, r3
 80120ec:	4413      	add	r3, r2
 80120ee:	3305      	adds	r3, #5
 80120f0:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 80120f2:	2b19      	cmp	r3, #25
 80120f4:	d147      	bne.n	8012186 <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 80120f6:	4a3b      	ldr	r2, [pc, #236]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	216a      	movs	r1, #106	@ 0x6a
 80120fc:	fb01 f303 	mul.w	r3, r1, r3
 8012100:	4413      	add	r3, r2
 8012102:	3305      	adds	r3, #5
 8012104:	220a      	movs	r2, #10
 8012106:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8012108:	2355      	movs	r3, #85	@ 0x55
 801210a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 801210c:	e03b      	b.n	8012186 <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 801210e:	4b31      	ldr	r3, [pc, #196]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d005      	beq.n	8012122 <gos_taskUnblock+0x102>
 8012116:	4b2f      	ldr	r3, [pc, #188]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	3b01      	subs	r3, #1
 801211c:	b2da      	uxtb	r2, r3
 801211e:	4b2d      	ldr	r3, [pc, #180]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012120:	701a      	strb	r2, [r3, #0]
 8012122:	4b2c      	ldr	r3, [pc, #176]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d108      	bne.n	801213c <gos_taskUnblock+0x11c>
 801212a:	4b2b      	ldr	r3, [pc, #172]	@ (80121d8 <gos_taskUnblock+0x1b8>)
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	f383 8810 	msr	PRIMASK, r3
 8012132:	b662      	cpsie	i
 8012134:	f3bf 8f4f 	dsb	sy
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	4b27      	ldr	r3, [pc, #156]	@ (80121dc <gos_taskUnblock+0x1bc>)
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d005      	beq.n	8012150 <gos_taskUnblock+0x130>
 8012144:	4b25      	ldr	r3, [pc, #148]	@ (80121dc <gos_taskUnblock+0x1bc>)
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	3b01      	subs	r3, #1
 801214a:	b2da      	uxtb	r2, r3
 801214c:	4b23      	ldr	r3, [pc, #140]	@ (80121dc <gos_taskUnblock+0x1bc>)
 801214e:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8012150:	4b23      	ldr	r3, [pc, #140]	@ (80121e0 <gos_taskUnblock+0x1c0>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	226a      	movs	r2, #106	@ 0x6a
 8012156:	fb02 f303 	mul.w	r3, r2, r3
 801215a:	3308      	adds	r3, #8
 801215c:	4a21      	ldr	r2, [pc, #132]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 801215e:	4413      	add	r3, r2
 8012160:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	216a      	movs	r1, #106	@ 0x6a
 8012166:	fb01 f202 	mul.w	r2, r1, r2
 801216a:	3208      	adds	r2, #8
 801216c:	491d      	ldr	r1, [pc, #116]	@ (80121e4 <gos_taskUnblock+0x1c4>)
 801216e:	440a      	add	r2, r1
 8012170:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 8012172:	9201      	str	r2, [sp, #4]
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	4b1d      	ldr	r3, [pc, #116]	@ (80121ec <gos_taskUnblock+0x1cc>)
 8012178:	f240 2276 	movw	r2, #630	@ 0x276
 801217c:	491c      	ldr	r1, [pc, #112]	@ (80121f0 <gos_taskUnblock+0x1d0>)
 801217e:	2034      	movs	r0, #52	@ 0x34
 8012180:	f001 f806 	bl	8013190 <gos_errorHandler>
 8012184:	e000      	b.n	8012188 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8012186:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8012188:	4b12      	ldr	r3, [pc, #72]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d005      	beq.n	801219c <gos_taskUnblock+0x17c>
 8012190:	4b10      	ldr	r3, [pc, #64]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	3b01      	subs	r3, #1
 8012196:	b2da      	uxtb	r2, r3
 8012198:	4b0e      	ldr	r3, [pc, #56]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 801219a:	701a      	strb	r2, [r3, #0]
 801219c:	4b0d      	ldr	r3, [pc, #52]	@ (80121d4 <gos_taskUnblock+0x1b4>)
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d108      	bne.n	80121b6 <gos_taskUnblock+0x196>
 80121a4:	4b0c      	ldr	r3, [pc, #48]	@ (80121d8 <gos_taskUnblock+0x1b8>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f383 8810 	msr	PRIMASK, r3
 80121ac:	b662      	cpsie	i
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	4b09      	ldr	r3, [pc, #36]	@ (80121dc <gos_taskUnblock+0x1bc>)
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d005      	beq.n	80121ca <gos_taskUnblock+0x1aa>
 80121be:	4b07      	ldr	r3, [pc, #28]	@ (80121dc <gos_taskUnblock+0x1bc>)
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	3b01      	subs	r3, #1
 80121c4:	b2da      	uxtb	r2, r3
 80121c6:	4b05      	ldr	r3, [pc, #20]	@ (80121dc <gos_taskUnblock+0x1bc>)
 80121c8:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3710      	adds	r7, #16
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	20005e53 	.word	0x20005e53
 80121d8:	20005e54 	.word	0x20005e54
 80121dc:	20005e51 	.word	0x20005e51
 80121e0:	20005e58 	.word	0x20005e58
 80121e4:	20000788 	.word	0x20000788
 80121e8:	20005e52 	.word	0x20005e52
 80121ec:	08019e7c 	.word	0x08019e7c
 80121f0:	0801aad4 	.word	0x0801aad4

080121f4 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b086      	sub	sp, #24
 80121f8:	af02      	add	r7, sp, #8
 80121fa:	4603      	mov	r3, r0
 80121fc:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 80121fe:	23ae      	movs	r3, #174	@ 0xae
 8012200:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8012202:	2300      	movs	r3, #0
 8012204:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012206:	4b84      	ldr	r3, [pc, #528]	@ (8012418 <gos_taskDelete+0x224>)
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d108      	bne.n	8012220 <gos_taskDelete+0x2c>
 801220e:	b672      	cpsid	i
 8012210:	f3ef 8310 	mrs	r3, PRIMASK
 8012214:	4a81      	ldr	r2, [pc, #516]	@ (801241c <gos_taskDelete+0x228>)
 8012216:	6013      	str	r3, [r2, #0]
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	4b7d      	ldr	r3, [pc, #500]	@ (8012418 <gos_taskDelete+0x224>)
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	3301      	adds	r3, #1
 8012226:	b2da      	uxtb	r2, r3
 8012228:	4b7b      	ldr	r3, [pc, #492]	@ (8012418 <gos_taskDelete+0x224>)
 801222a:	701a      	strb	r2, [r3, #0]
 801222c:	4b7c      	ldr	r3, [pc, #496]	@ (8012420 <gos_taskDelete+0x22c>)
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	3301      	adds	r3, #1
 8012232:	b2da      	uxtb	r2, r3
 8012234:	4b7a      	ldr	r3, [pc, #488]	@ (8012420 <gos_taskDelete+0x22c>)
 8012236:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8012238:	88fb      	ldrh	r3, [r7, #6]
 801223a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801223e:	f240 80b9 	bls.w	80123b4 <gos_taskDelete+0x1c0>
 8012242:	88fb      	ldrh	r3, [r7, #6]
 8012244:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012248:	4293      	cmp	r3, r2
 801224a:	f200 80b3 	bhi.w	80123b4 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801224e:	88fb      	ldrh	r3, [r7, #6]
 8012250:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012254:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8012256:	4b73      	ldr	r3, [pc, #460]	@ (8012424 <gos_taskDelete+0x230>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	4a73      	ldr	r2, [pc, #460]	@ (8012428 <gos_taskDelete+0x234>)
 801225c:	216a      	movs	r1, #106	@ 0x6a
 801225e:	fb01 f303 	mul.w	r3, r1, r3
 8012262:	4413      	add	r3, r2
 8012264:	3308      	adds	r3, #8
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	b21b      	sxth	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	db08      	blt.n	8012280 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 801226e:	4b6d      	ldr	r3, [pc, #436]	@ (8012424 <gos_taskDelete+0x230>)
 8012270:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8012272:	68ba      	ldr	r2, [r7, #8]
 8012274:	429a      	cmp	r2, r3
 8012276:	d003      	beq.n	8012280 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8012278:	4b6c      	ldr	r3, [pc, #432]	@ (801242c <gos_taskDelete+0x238>)
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d05e      	beq.n	801233e <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8012280:	4a69      	ldr	r2, [pc, #420]	@ (8012428 <gos_taskDelete+0x234>)
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	216a      	movs	r1, #106	@ 0x6a
 8012286:	fb01 f303 	mul.w	r3, r1, r3
 801228a:	4413      	add	r3, r2
 801228c:	3304      	adds	r3, #4
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	2b0d      	cmp	r3, #13
 8012292:	f000 808f 	beq.w	80123b4 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 8012296:	4a64      	ldr	r2, [pc, #400]	@ (8012428 <gos_taskDelete+0x234>)
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	216a      	movs	r1, #106	@ 0x6a
 801229c:	fb01 f303 	mul.w	r3, r1, r3
 80122a0:	4413      	add	r3, r2
 80122a2:	3304      	adds	r3, #4
 80122a4:	220d      	movs	r2, #13
 80122a6:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 80122a8:	2355      	movs	r3, #85	@ 0x55
 80122aa:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 80122ac:	4b5d      	ldr	r3, [pc, #372]	@ (8012424 <gos_taskDelete+0x230>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4a5d      	ldr	r2, [pc, #372]	@ (8012428 <gos_taskDelete+0x234>)
 80122b2:	216a      	movs	r1, #106	@ 0x6a
 80122b4:	fb01 f303 	mul.w	r3, r1, r3
 80122b8:	4413      	add	r3, r2
 80122ba:	3308      	adds	r3, #8
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d133      	bne.n	801232e <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 80122c6:	4b57      	ldr	r3, [pc, #348]	@ (8012424 <gos_taskDelete+0x230>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4a57      	ldr	r2, [pc, #348]	@ (8012428 <gos_taskDelete+0x234>)
 80122cc:	216a      	movs	r1, #106	@ 0x6a
 80122ce:	fb01 f303 	mul.w	r3, r1, r3
 80122d2:	4413      	add	r3, r2
 80122d4:	3308      	adds	r3, #8
 80122d6:	881a      	ldrh	r2, [r3, #0]
 80122d8:	4b52      	ldr	r3, [pc, #328]	@ (8012424 <gos_taskDelete+0x230>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80122e0:	b290      	uxth	r0, r2
 80122e2:	4a51      	ldr	r2, [pc, #324]	@ (8012428 <gos_taskDelete+0x234>)
 80122e4:	216a      	movs	r1, #106	@ 0x6a
 80122e6:	fb01 f303 	mul.w	r3, r1, r3
 80122ea:	4413      	add	r3, r2
 80122ec:	3308      	adds	r3, #8
 80122ee:	4602      	mov	r2, r0
 80122f0:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 80122f2:	4b4f      	ldr	r3, [pc, #316]	@ (8012430 <gos_taskDelete+0x23c>)
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	88fa      	ldrh	r2, [r7, #6]
 80122f8:	4611      	mov	r1, r2
 80122fa:	4618      	mov	r0, r3
 80122fc:	f002 fa78 	bl	80147f0 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8012300:	4b48      	ldr	r3, [pc, #288]	@ (8012424 <gos_taskDelete+0x230>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4a48      	ldr	r2, [pc, #288]	@ (8012428 <gos_taskDelete+0x234>)
 8012306:	216a      	movs	r1, #106	@ 0x6a
 8012308:	fb01 f303 	mul.w	r3, r1, r3
 801230c:	4413      	add	r3, r2
 801230e:	3308      	adds	r3, #8
 8012310:	881a      	ldrh	r2, [r3, #0]
 8012312:	4b44      	ldr	r3, [pc, #272]	@ (8012424 <gos_taskDelete+0x230>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801231a:	b290      	uxth	r0, r2
 801231c:	4a42      	ldr	r2, [pc, #264]	@ (8012428 <gos_taskDelete+0x234>)
 801231e:	216a      	movs	r1, #106	@ 0x6a
 8012320:	fb01 f303 	mul.w	r3, r1, r3
 8012324:	4413      	add	r3, r2
 8012326:	3308      	adds	r3, #8
 8012328:	4602      	mov	r2, r0
 801232a:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 801232c:	e042      	b.n	80123b4 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 801232e:	4b40      	ldr	r3, [pc, #256]	@ (8012430 <gos_taskDelete+0x23c>)
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	88fa      	ldrh	r2, [r7, #6]
 8012334:	4611      	mov	r1, r2
 8012336:	4618      	mov	r0, r3
 8012338:	f002 fa5a 	bl	80147f0 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 801233c:	e03a      	b.n	80123b4 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 801233e:	4b36      	ldr	r3, [pc, #216]	@ (8012418 <gos_taskDelete+0x224>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d005      	beq.n	8012352 <gos_taskDelete+0x15e>
 8012346:	4b34      	ldr	r3, [pc, #208]	@ (8012418 <gos_taskDelete+0x224>)
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	3b01      	subs	r3, #1
 801234c:	b2da      	uxtb	r2, r3
 801234e:	4b32      	ldr	r3, [pc, #200]	@ (8012418 <gos_taskDelete+0x224>)
 8012350:	701a      	strb	r2, [r3, #0]
 8012352:	4b31      	ldr	r3, [pc, #196]	@ (8012418 <gos_taskDelete+0x224>)
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d108      	bne.n	801236c <gos_taskDelete+0x178>
 801235a:	4b30      	ldr	r3, [pc, #192]	@ (801241c <gos_taskDelete+0x228>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f383 8810 	msr	PRIMASK, r3
 8012362:	b662      	cpsie	i
 8012364:	f3bf 8f4f 	dsb	sy
 8012368:	f3bf 8f6f 	isb	sy
 801236c:	4b2c      	ldr	r3, [pc, #176]	@ (8012420 <gos_taskDelete+0x22c>)
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d005      	beq.n	8012380 <gos_taskDelete+0x18c>
 8012374:	4b2a      	ldr	r3, [pc, #168]	@ (8012420 <gos_taskDelete+0x22c>)
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	3b01      	subs	r3, #1
 801237a:	b2da      	uxtb	r2, r3
 801237c:	4b28      	ldr	r3, [pc, #160]	@ (8012420 <gos_taskDelete+0x22c>)
 801237e:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8012380:	4b28      	ldr	r3, [pc, #160]	@ (8012424 <gos_taskDelete+0x230>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	226a      	movs	r2, #106	@ 0x6a
 8012386:	fb02 f303 	mul.w	r3, r2, r3
 801238a:	3308      	adds	r3, #8
 801238c:	4a26      	ldr	r2, [pc, #152]	@ (8012428 <gos_taskDelete+0x234>)
 801238e:	4413      	add	r3, r2
 8012390:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8012392:	68ba      	ldr	r2, [r7, #8]
 8012394:	216a      	movs	r1, #106	@ 0x6a
 8012396:	fb01 f202 	mul.w	r2, r1, r2
 801239a:	3208      	adds	r2, #8
 801239c:	4922      	ldr	r1, [pc, #136]	@ (8012428 <gos_taskDelete+0x234>)
 801239e:	440a      	add	r2, r1
 80123a0:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 80123a2:	9201      	str	r2, [sp, #4]
 80123a4:	9300      	str	r3, [sp, #0]
 80123a6:	4b23      	ldr	r3, [pc, #140]	@ (8012434 <gos_taskDelete+0x240>)
 80123a8:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80123ac:	4922      	ldr	r1, [pc, #136]	@ (8012438 <gos_taskDelete+0x244>)
 80123ae:	2034      	movs	r0, #52	@ 0x34
 80123b0:	f000 feee 	bl	8013190 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80123b4:	4b18      	ldr	r3, [pc, #96]	@ (8012418 <gos_taskDelete+0x224>)
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d005      	beq.n	80123c8 <gos_taskDelete+0x1d4>
 80123bc:	4b16      	ldr	r3, [pc, #88]	@ (8012418 <gos_taskDelete+0x224>)
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	3b01      	subs	r3, #1
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	4b14      	ldr	r3, [pc, #80]	@ (8012418 <gos_taskDelete+0x224>)
 80123c6:	701a      	strb	r2, [r3, #0]
 80123c8:	4b13      	ldr	r3, [pc, #76]	@ (8012418 <gos_taskDelete+0x224>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d108      	bne.n	80123e2 <gos_taskDelete+0x1ee>
 80123d0:	4b12      	ldr	r3, [pc, #72]	@ (801241c <gos_taskDelete+0x228>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f383 8810 	msr	PRIMASK, r3
 80123d8:	b662      	cpsie	i
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	f3bf 8f6f 	isb	sy
 80123e2:	4b0f      	ldr	r3, [pc, #60]	@ (8012420 <gos_taskDelete+0x22c>)
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d005      	beq.n	80123f6 <gos_taskDelete+0x202>
 80123ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012420 <gos_taskDelete+0x22c>)
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	3b01      	subs	r3, #1
 80123f0:	b2da      	uxtb	r2, r3
 80123f2:	4b0b      	ldr	r3, [pc, #44]	@ (8012420 <gos_taskDelete+0x22c>)
 80123f4:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 80123f6:	7bfb      	ldrb	r3, [r7, #15]
 80123f8:	2b55      	cmp	r3, #85	@ 0x55
 80123fa:	d107      	bne.n	801240c <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 80123fc:	4b09      	ldr	r3, [pc, #36]	@ (8012424 <gos_taskDelete+0x230>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	429a      	cmp	r2, r3
 8012404:	d102      	bne.n	801240c <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 8012406:	2009      	movs	r0, #9
 8012408:	f7fe fd88 	bl	8010f1c <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 801240c:	7bfb      	ldrb	r3, [r7, #15]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20005e53 	.word	0x20005e53
 801241c:	20005e54 	.word	0x20005e54
 8012420:	20005e51 	.word	0x20005e51
 8012424:	20005e58 	.word	0x20005e58
 8012428:	20000788 	.word	0x20000788
 801242c:	20005e52 	.word	0x20005e52
 8012430:	20005e80 	.word	0x20005e80
 8012434:	08019ea4 	.word	0x08019ea4
 8012438:	0801aae4 	.word	0x0801aae4

0801243c <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b086      	sub	sp, #24
 8012440:	af02      	add	r7, sp, #8
 8012442:	4603      	mov	r3, r0
 8012444:	460a      	mov	r2, r1
 8012446:	80fb      	strh	r3, [r7, #6]
 8012448:	4613      	mov	r3, r2
 801244a:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 801244c:	23ae      	movs	r3, #174	@ 0xae
 801244e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8012450:	2300      	movs	r3, #0
 8012452:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012454:	4b53      	ldr	r3, [pc, #332]	@ (80125a4 <gos_taskSetPriority+0x168>)
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d108      	bne.n	801246e <gos_taskSetPriority+0x32>
 801245c:	b672      	cpsid	i
 801245e:	f3ef 8310 	mrs	r3, PRIMASK
 8012462:	4a51      	ldr	r2, [pc, #324]	@ (80125a8 <gos_taskSetPriority+0x16c>)
 8012464:	6013      	str	r3, [r2, #0]
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	f3bf 8f6f 	isb	sy
 801246e:	4b4d      	ldr	r3, [pc, #308]	@ (80125a4 <gos_taskSetPriority+0x168>)
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	3301      	adds	r3, #1
 8012474:	b2da      	uxtb	r2, r3
 8012476:	4b4b      	ldr	r3, [pc, #300]	@ (80125a4 <gos_taskSetPriority+0x168>)
 8012478:	701a      	strb	r2, [r3, #0]
 801247a:	4b4c      	ldr	r3, [pc, #304]	@ (80125ac <gos_taskSetPriority+0x170>)
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	3301      	adds	r3, #1
 8012480:	b2da      	uxtb	r2, r3
 8012482:	4b4a      	ldr	r3, [pc, #296]	@ (80125ac <gos_taskSetPriority+0x170>)
 8012484:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012486:	88fb      	ldrh	r3, [r7, #6]
 8012488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801248c:	d963      	bls.n	8012556 <gos_taskSetPriority+0x11a>
 801248e:	88fb      	ldrh	r3, [r7, #6]
 8012490:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012494:	4293      	cmp	r3, r2
 8012496:	d85e      	bhi.n	8012556 <gos_taskSetPriority+0x11a>
 8012498:	797b      	ldrb	r3, [r7, #5]
 801249a:	2bff      	cmp	r3, #255	@ 0xff
 801249c:	d05b      	beq.n	8012556 <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801249e:	88fb      	ldrh	r3, [r7, #6]
 80124a0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80124a4:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80124a6:	4b42      	ldr	r3, [pc, #264]	@ (80125b0 <gos_taskSetPriority+0x174>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a42      	ldr	r2, [pc, #264]	@ (80125b4 <gos_taskSetPriority+0x178>)
 80124ac:	216a      	movs	r1, #106	@ 0x6a
 80124ae:	fb01 f303 	mul.w	r3, r1, r3
 80124b2:	4413      	add	r3, r2
 80124b4:	3308      	adds	r3, #8
 80124b6:	881b      	ldrh	r3, [r3, #0]
 80124b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d103      	bne.n	80124c8 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 80124c0:	4b3d      	ldr	r3, [pc, #244]	@ (80125b8 <gos_taskSetPriority+0x17c>)
 80124c2:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00b      	beq.n	80124e0 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 80124c8:	4a3a      	ldr	r2, [pc, #232]	@ (80125b4 <gos_taskSetPriority+0x178>)
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	216a      	movs	r1, #106	@ 0x6a
 80124ce:	fb01 f303 	mul.w	r3, r1, r3
 80124d2:	4413      	add	r3, r2
 80124d4:	3306      	adds	r3, #6
 80124d6:	797a      	ldrb	r2, [r7, #5]
 80124d8:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 80124da:	2355      	movs	r3, #85	@ 0x55
 80124dc:	73fb      	strb	r3, [r7, #15]
 80124de:	e03a      	b.n	8012556 <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 80124e0:	4b30      	ldr	r3, [pc, #192]	@ (80125a4 <gos_taskSetPriority+0x168>)
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d005      	beq.n	80124f4 <gos_taskSetPriority+0xb8>
 80124e8:	4b2e      	ldr	r3, [pc, #184]	@ (80125a4 <gos_taskSetPriority+0x168>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	3b01      	subs	r3, #1
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	4b2c      	ldr	r3, [pc, #176]	@ (80125a4 <gos_taskSetPriority+0x168>)
 80124f2:	701a      	strb	r2, [r3, #0]
 80124f4:	4b2b      	ldr	r3, [pc, #172]	@ (80125a4 <gos_taskSetPriority+0x168>)
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d108      	bne.n	801250e <gos_taskSetPriority+0xd2>
 80124fc:	4b2a      	ldr	r3, [pc, #168]	@ (80125a8 <gos_taskSetPriority+0x16c>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f383 8810 	msr	PRIMASK, r3
 8012504:	b662      	cpsie	i
 8012506:	f3bf 8f4f 	dsb	sy
 801250a:	f3bf 8f6f 	isb	sy
 801250e:	4b27      	ldr	r3, [pc, #156]	@ (80125ac <gos_taskSetPriority+0x170>)
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d005      	beq.n	8012522 <gos_taskSetPriority+0xe6>
 8012516:	4b25      	ldr	r3, [pc, #148]	@ (80125ac <gos_taskSetPriority+0x170>)
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	3b01      	subs	r3, #1
 801251c:	b2da      	uxtb	r2, r3
 801251e:	4b23      	ldr	r3, [pc, #140]	@ (80125ac <gos_taskSetPriority+0x170>)
 8012520:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8012522:	4b23      	ldr	r3, [pc, #140]	@ (80125b0 <gos_taskSetPriority+0x174>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	226a      	movs	r2, #106	@ 0x6a
 8012528:	fb02 f303 	mul.w	r3, r2, r3
 801252c:	3308      	adds	r3, #8
 801252e:	4a21      	ldr	r2, [pc, #132]	@ (80125b4 <gos_taskSetPriority+0x178>)
 8012530:	4413      	add	r3, r2
 8012532:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8012534:	68ba      	ldr	r2, [r7, #8]
 8012536:	216a      	movs	r1, #106	@ 0x6a
 8012538:	fb01 f202 	mul.w	r2, r1, r2
 801253c:	3208      	adds	r2, #8
 801253e:	491d      	ldr	r1, [pc, #116]	@ (80125b4 <gos_taskSetPriority+0x178>)
 8012540:	440a      	add	r2, r1
 8012542:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8012544:	9201      	str	r2, [sp, #4]
 8012546:	9300      	str	r3, [sp, #0]
 8012548:	4b1c      	ldr	r3, [pc, #112]	@ (80125bc <gos_taskSetPriority+0x180>)
 801254a:	f44f 723d 	mov.w	r2, #756	@ 0x2f4
 801254e:	491c      	ldr	r1, [pc, #112]	@ (80125c0 <gos_taskSetPriority+0x184>)
 8012550:	2034      	movs	r0, #52	@ 0x34
 8012552:	f000 fe1d 	bl	8013190 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8012556:	4b13      	ldr	r3, [pc, #76]	@ (80125a4 <gos_taskSetPriority+0x168>)
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d005      	beq.n	801256a <gos_taskSetPriority+0x12e>
 801255e:	4b11      	ldr	r3, [pc, #68]	@ (80125a4 <gos_taskSetPriority+0x168>)
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	3b01      	subs	r3, #1
 8012564:	b2da      	uxtb	r2, r3
 8012566:	4b0f      	ldr	r3, [pc, #60]	@ (80125a4 <gos_taskSetPriority+0x168>)
 8012568:	701a      	strb	r2, [r3, #0]
 801256a:	4b0e      	ldr	r3, [pc, #56]	@ (80125a4 <gos_taskSetPriority+0x168>)
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d108      	bne.n	8012584 <gos_taskSetPriority+0x148>
 8012572:	4b0d      	ldr	r3, [pc, #52]	@ (80125a8 <gos_taskSetPriority+0x16c>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f383 8810 	msr	PRIMASK, r3
 801257a:	b662      	cpsie	i
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	f3bf 8f6f 	isb	sy
 8012584:	4b09      	ldr	r3, [pc, #36]	@ (80125ac <gos_taskSetPriority+0x170>)
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d005      	beq.n	8012598 <gos_taskSetPriority+0x15c>
 801258c:	4b07      	ldr	r3, [pc, #28]	@ (80125ac <gos_taskSetPriority+0x170>)
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	3b01      	subs	r3, #1
 8012592:	b2da      	uxtb	r2, r3
 8012594:	4b05      	ldr	r3, [pc, #20]	@ (80125ac <gos_taskSetPriority+0x170>)
 8012596:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8012598:	7bfb      	ldrb	r3, [r7, #15]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3710      	adds	r7, #16
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	20005e53 	.word	0x20005e53
 80125a8:	20005e54 	.word	0x20005e54
 80125ac:	20005e51 	.word	0x20005e51
 80125b0:	20005e58 	.word	0x20005e58
 80125b4:	20000788 	.word	0x20000788
 80125b8:	20005e52 	.word	0x20005e52
 80125bc:	08019ecc 	.word	0x08019ecc
 80125c0:	0801aaf4 	.word	0x0801aaf4

080125c4 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af02      	add	r7, sp, #8
 80125ca:	4603      	mov	r3, r0
 80125cc:	460a      	mov	r2, r1
 80125ce:	80fb      	strh	r3, [r7, #6]
 80125d0:	4613      	mov	r3, r2
 80125d2:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80125d4:	23ae      	movs	r3, #174	@ 0xae
 80125d6:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80125d8:	2300      	movs	r3, #0
 80125da:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80125dc:	4b53      	ldr	r3, [pc, #332]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d108      	bne.n	80125f6 <gos_taskSetOriginalPriority+0x32>
 80125e4:	b672      	cpsid	i
 80125e6:	f3ef 8310 	mrs	r3, PRIMASK
 80125ea:	4a51      	ldr	r2, [pc, #324]	@ (8012730 <gos_taskSetOriginalPriority+0x16c>)
 80125ec:	6013      	str	r3, [r2, #0]
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	4b4d      	ldr	r3, [pc, #308]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	3301      	adds	r3, #1
 80125fc:	b2da      	uxtb	r2, r3
 80125fe:	4b4b      	ldr	r3, [pc, #300]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 8012600:	701a      	strb	r2, [r3, #0]
 8012602:	4b4c      	ldr	r3, [pc, #304]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	3301      	adds	r3, #1
 8012608:	b2da      	uxtb	r2, r3
 801260a:	4b4a      	ldr	r3, [pc, #296]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 801260c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 801260e:	88fb      	ldrh	r3, [r7, #6]
 8012610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012614:	d963      	bls.n	80126de <gos_taskSetOriginalPriority+0x11a>
 8012616:	88fb      	ldrh	r3, [r7, #6]
 8012618:	f248 020f 	movw	r2, #32783	@ 0x800f
 801261c:	4293      	cmp	r3, r2
 801261e:	d85e      	bhi.n	80126de <gos_taskSetOriginalPriority+0x11a>
 8012620:	797b      	ldrb	r3, [r7, #5]
 8012622:	2bff      	cmp	r3, #255	@ 0xff
 8012624:	d05b      	beq.n	80126de <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012626:	88fb      	ldrh	r3, [r7, #6]
 8012628:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801262c:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 801262e:	4b42      	ldr	r3, [pc, #264]	@ (8012738 <gos_taskSetOriginalPriority+0x174>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4a42      	ldr	r2, [pc, #264]	@ (801273c <gos_taskSetOriginalPriority+0x178>)
 8012634:	216a      	movs	r1, #106	@ 0x6a
 8012636:	fb01 f303 	mul.w	r3, r1, r3
 801263a:	4413      	add	r3, r2
 801263c:	3308      	adds	r3, #8
 801263e:	881b      	ldrh	r3, [r3, #0]
 8012640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012644:	2b00      	cmp	r3, #0
 8012646:	d103      	bne.n	8012650 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 8012648:	4b3d      	ldr	r3, [pc, #244]	@ (8012740 <gos_taskSetOriginalPriority+0x17c>)
 801264a:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00b      	beq.n	8012668 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 8012650:	4a3a      	ldr	r2, [pc, #232]	@ (801273c <gos_taskSetOriginalPriority+0x178>)
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	216a      	movs	r1, #106	@ 0x6a
 8012656:	fb01 f303 	mul.w	r3, r1, r3
 801265a:	4413      	add	r3, r2
 801265c:	3307      	adds	r3, #7
 801265e:	797a      	ldrb	r2, [r7, #5]
 8012660:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 8012662:	2355      	movs	r3, #85	@ 0x55
 8012664:	73fb      	strb	r3, [r7, #15]
 8012666:	e03a      	b.n	80126de <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8012668:	4b30      	ldr	r3, [pc, #192]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d005      	beq.n	801267c <gos_taskSetOriginalPriority+0xb8>
 8012670:	4b2e      	ldr	r3, [pc, #184]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	3b01      	subs	r3, #1
 8012676:	b2da      	uxtb	r2, r3
 8012678:	4b2c      	ldr	r3, [pc, #176]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 801267a:	701a      	strb	r2, [r3, #0]
 801267c:	4b2b      	ldr	r3, [pc, #172]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d108      	bne.n	8012696 <gos_taskSetOriginalPriority+0xd2>
 8012684:	4b2a      	ldr	r3, [pc, #168]	@ (8012730 <gos_taskSetOriginalPriority+0x16c>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f383 8810 	msr	PRIMASK, r3
 801268c:	b662      	cpsie	i
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	f3bf 8f6f 	isb	sy
 8012696:	4b27      	ldr	r3, [pc, #156]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d005      	beq.n	80126aa <gos_taskSetOriginalPriority+0xe6>
 801269e:	4b25      	ldr	r3, [pc, #148]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	3b01      	subs	r3, #1
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	4b23      	ldr	r3, [pc, #140]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 80126a8:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80126aa:	4b23      	ldr	r3, [pc, #140]	@ (8012738 <gos_taskSetOriginalPriority+0x174>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	226a      	movs	r2, #106	@ 0x6a
 80126b0:	fb02 f303 	mul.w	r3, r2, r3
 80126b4:	3308      	adds	r3, #8
 80126b6:	4a21      	ldr	r2, [pc, #132]	@ (801273c <gos_taskSetOriginalPriority+0x178>)
 80126b8:	4413      	add	r3, r2
 80126ba:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80126bc:	68ba      	ldr	r2, [r7, #8]
 80126be:	216a      	movs	r1, #106	@ 0x6a
 80126c0:	fb01 f202 	mul.w	r2, r1, r2
 80126c4:	3208      	adds	r2, #8
 80126c6:	491d      	ldr	r1, [pc, #116]	@ (801273c <gos_taskSetOriginalPriority+0x178>)
 80126c8:	440a      	add	r2, r1
 80126ca:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 80126cc:	9201      	str	r2, [sp, #4]
 80126ce:	9300      	str	r3, [sp, #0]
 80126d0:	4b1c      	ldr	r3, [pc, #112]	@ (8012744 <gos_taskSetOriginalPriority+0x180>)
 80126d2:	f240 3222 	movw	r2, #802	@ 0x322
 80126d6:	491c      	ldr	r1, [pc, #112]	@ (8012748 <gos_taskSetOriginalPriority+0x184>)
 80126d8:	2034      	movs	r0, #52	@ 0x34
 80126da:	f000 fd59 	bl	8013190 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 80126de:	4b13      	ldr	r3, [pc, #76]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d005      	beq.n	80126f2 <gos_taskSetOriginalPriority+0x12e>
 80126e6:	4b11      	ldr	r3, [pc, #68]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	3b01      	subs	r3, #1
 80126ec:	b2da      	uxtb	r2, r3
 80126ee:	4b0f      	ldr	r3, [pc, #60]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 80126f0:	701a      	strb	r2, [r3, #0]
 80126f2:	4b0e      	ldr	r3, [pc, #56]	@ (801272c <gos_taskSetOriginalPriority+0x168>)
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d108      	bne.n	801270c <gos_taskSetOriginalPriority+0x148>
 80126fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012730 <gos_taskSetOriginalPriority+0x16c>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	f383 8810 	msr	PRIMASK, r3
 8012702:	b662      	cpsie	i
 8012704:	f3bf 8f4f 	dsb	sy
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	4b09      	ldr	r3, [pc, #36]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d005      	beq.n	8012720 <gos_taskSetOriginalPriority+0x15c>
 8012714:	4b07      	ldr	r3, [pc, #28]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	3b01      	subs	r3, #1
 801271a:	b2da      	uxtb	r2, r3
 801271c:	4b05      	ldr	r3, [pc, #20]	@ (8012734 <gos_taskSetOriginalPriority+0x170>)
 801271e:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8012720:	7bfb      	ldrb	r3, [r7, #15]
}
 8012722:	4618      	mov	r0, r3
 8012724:	3710      	adds	r7, #16
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	20005e53 	.word	0x20005e53
 8012730:	20005e54 	.word	0x20005e54
 8012734:	20005e51 	.word	0x20005e51
 8012738:	20005e58 	.word	0x20005e58
 801273c:	20000788 	.word	0x20000788
 8012740:	20005e52 	.word	0x20005e52
 8012744:	08019ecc 	.word	0x08019ecc
 8012748:	0801ab08 	.word	0x0801ab08

0801274c <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	6039      	str	r1, [r7, #0]
 8012756:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8012758:	23ae      	movs	r3, #174	@ 0xae
 801275a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 801275c:	2300      	movs	r3, #0
 801275e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012760:	4b2e      	ldr	r3, [pc, #184]	@ (801281c <gos_taskGetPriority+0xd0>)
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d108      	bne.n	801277a <gos_taskGetPriority+0x2e>
 8012768:	b672      	cpsid	i
 801276a:	f3ef 8310 	mrs	r3, PRIMASK
 801276e:	4a2c      	ldr	r2, [pc, #176]	@ (8012820 <gos_taskGetPriority+0xd4>)
 8012770:	6013      	str	r3, [r2, #0]
 8012772:	f3bf 8f4f 	dsb	sy
 8012776:	f3bf 8f6f 	isb	sy
 801277a:	4b28      	ldr	r3, [pc, #160]	@ (801281c <gos_taskGetPriority+0xd0>)
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	3301      	adds	r3, #1
 8012780:	b2da      	uxtb	r2, r3
 8012782:	4b26      	ldr	r3, [pc, #152]	@ (801281c <gos_taskGetPriority+0xd0>)
 8012784:	701a      	strb	r2, [r3, #0]
 8012786:	4b27      	ldr	r3, [pc, #156]	@ (8012824 <gos_taskGetPriority+0xd8>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	3301      	adds	r3, #1
 801278c:	b2da      	uxtb	r2, r3
 801278e:	4b25      	ldr	r3, [pc, #148]	@ (8012824 <gos_taskGetPriority+0xd8>)
 8012790:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012792:	88fb      	ldrh	r3, [r7, #6]
 8012794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012798:	d917      	bls.n	80127ca <gos_taskGetPriority+0x7e>
 801279a:	88fb      	ldrh	r3, [r7, #6]
 801279c:	f248 020f 	movw	r2, #32783	@ 0x800f
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d812      	bhi.n	80127ca <gos_taskGetPriority+0x7e>
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00f      	beq.n	80127ca <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80127aa:	88fb      	ldrh	r3, [r7, #6]
 80127ac:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80127b0:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 80127b2:	4a1d      	ldr	r2, [pc, #116]	@ (8012828 <gos_taskGetPriority+0xdc>)
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	216a      	movs	r1, #106	@ 0x6a
 80127b8:	fb01 f303 	mul.w	r3, r1, r3
 80127bc:	4413      	add	r3, r2
 80127be:	3306      	adds	r3, #6
 80127c0:	781a      	ldrb	r2, [r3, #0]
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 80127c6:	2355      	movs	r3, #85	@ 0x55
 80127c8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 80127ca:	4b14      	ldr	r3, [pc, #80]	@ (801281c <gos_taskGetPriority+0xd0>)
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d005      	beq.n	80127de <gos_taskGetPriority+0x92>
 80127d2:	4b12      	ldr	r3, [pc, #72]	@ (801281c <gos_taskGetPriority+0xd0>)
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	3b01      	subs	r3, #1
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	4b10      	ldr	r3, [pc, #64]	@ (801281c <gos_taskGetPriority+0xd0>)
 80127dc:	701a      	strb	r2, [r3, #0]
 80127de:	4b0f      	ldr	r3, [pc, #60]	@ (801281c <gos_taskGetPriority+0xd0>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d108      	bne.n	80127f8 <gos_taskGetPriority+0xac>
 80127e6:	4b0e      	ldr	r3, [pc, #56]	@ (8012820 <gos_taskGetPriority+0xd4>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	f383 8810 	msr	PRIMASK, r3
 80127ee:	b662      	cpsie	i
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	f3bf 8f6f 	isb	sy
 80127f8:	4b0a      	ldr	r3, [pc, #40]	@ (8012824 <gos_taskGetPriority+0xd8>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d005      	beq.n	801280c <gos_taskGetPriority+0xc0>
 8012800:	4b08      	ldr	r3, [pc, #32]	@ (8012824 <gos_taskGetPriority+0xd8>)
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	3b01      	subs	r3, #1
 8012806:	b2da      	uxtb	r2, r3
 8012808:	4b06      	ldr	r3, [pc, #24]	@ (8012824 <gos_taskGetPriority+0xd8>)
 801280a:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 801280c:	7bfb      	ldrb	r3, [r7, #15]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3714      	adds	r7, #20
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr
 801281a:	bf00      	nop
 801281c:	20005e53 	.word	0x20005e53
 8012820:	20005e54 	.word	0x20005e54
 8012824:	20005e51 	.word	0x20005e51
 8012828:	20000788 	.word	0x20000788

0801282c <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 801282c:	b480      	push	{r7}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	4603      	mov	r3, r0
 8012834:	460a      	mov	r2, r1
 8012836:	80fb      	strh	r3, [r7, #6]
 8012838:	4613      	mov	r3, r2
 801283a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 801283c:	23ae      	movs	r3, #174	@ 0xae
 801283e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8012840:	2300      	movs	r3, #0
 8012842:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012844:	4b31      	ldr	r3, [pc, #196]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d108      	bne.n	801285e <gos_taskAddPrivilege+0x32>
 801284c:	b672      	cpsid	i
 801284e:	f3ef 8310 	mrs	r3, PRIMASK
 8012852:	4a2f      	ldr	r2, [pc, #188]	@ (8012910 <gos_taskAddPrivilege+0xe4>)
 8012854:	6013      	str	r3, [r2, #0]
 8012856:	f3bf 8f4f 	dsb	sy
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	4b2b      	ldr	r3, [pc, #172]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	3301      	adds	r3, #1
 8012864:	b2da      	uxtb	r2, r3
 8012866:	4b29      	ldr	r3, [pc, #164]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 8012868:	701a      	strb	r2, [r3, #0]
 801286a:	4b2a      	ldr	r3, [pc, #168]	@ (8012914 <gos_taskAddPrivilege+0xe8>)
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	3301      	adds	r3, #1
 8012870:	b2da      	uxtb	r2, r3
 8012872:	4b28      	ldr	r3, [pc, #160]	@ (8012914 <gos_taskAddPrivilege+0xe8>)
 8012874:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8012876:	88fb      	ldrh	r3, [r7, #6]
 8012878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801287c:	d91e      	bls.n	80128bc <gos_taskAddPrivilege+0x90>
 801287e:	88fb      	ldrh	r3, [r7, #6]
 8012880:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012884:	4293      	cmp	r3, r2
 8012886:	d819      	bhi.n	80128bc <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012888:	88fb      	ldrh	r3, [r7, #6]
 801288a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801288e:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8012890:	4a21      	ldr	r2, [pc, #132]	@ (8012918 <gos_taskAddPrivilege+0xec>)
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	216a      	movs	r1, #106	@ 0x6a
 8012896:	fb01 f303 	mul.w	r3, r1, r3
 801289a:	4413      	add	r3, r2
 801289c:	3308      	adds	r3, #8
 801289e:	881a      	ldrh	r2, [r3, #0]
 80128a0:	88bb      	ldrh	r3, [r7, #4]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	b298      	uxth	r0, r3
 80128a6:	4a1c      	ldr	r2, [pc, #112]	@ (8012918 <gos_taskAddPrivilege+0xec>)
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	216a      	movs	r1, #106	@ 0x6a
 80128ac:	fb01 f303 	mul.w	r3, r1, r3
 80128b0:	4413      	add	r3, r2
 80128b2:	3308      	adds	r3, #8
 80128b4:	4602      	mov	r2, r0
 80128b6:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 80128b8:	2355      	movs	r3, #85	@ 0x55
 80128ba:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80128bc:	4b13      	ldr	r3, [pc, #76]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d005      	beq.n	80128d0 <gos_taskAddPrivilege+0xa4>
 80128c4:	4b11      	ldr	r3, [pc, #68]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	3b01      	subs	r3, #1
 80128ca:	b2da      	uxtb	r2, r3
 80128cc:	4b0f      	ldr	r3, [pc, #60]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 80128ce:	701a      	strb	r2, [r3, #0]
 80128d0:	4b0e      	ldr	r3, [pc, #56]	@ (801290c <gos_taskAddPrivilege+0xe0>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d108      	bne.n	80128ea <gos_taskAddPrivilege+0xbe>
 80128d8:	4b0d      	ldr	r3, [pc, #52]	@ (8012910 <gos_taskAddPrivilege+0xe4>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f383 8810 	msr	PRIMASK, r3
 80128e0:	b662      	cpsie	i
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	f3bf 8f6f 	isb	sy
 80128ea:	4b0a      	ldr	r3, [pc, #40]	@ (8012914 <gos_taskAddPrivilege+0xe8>)
 80128ec:	781b      	ldrb	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d005      	beq.n	80128fe <gos_taskAddPrivilege+0xd2>
 80128f2:	4b08      	ldr	r3, [pc, #32]	@ (8012914 <gos_taskAddPrivilege+0xe8>)
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	3b01      	subs	r3, #1
 80128f8:	b2da      	uxtb	r2, r3
 80128fa:	4b06      	ldr	r3, [pc, #24]	@ (8012914 <gos_taskAddPrivilege+0xe8>)
 80128fc:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 80128fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012900:	4618      	mov	r0, r3
 8012902:	3714      	adds	r7, #20
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr
 801290c:	20005e53 	.word	0x20005e53
 8012910:	20005e54 	.word	0x20005e54
 8012914:	20005e51 	.word	0x20005e51
 8012918:	20000788 	.word	0x20000788

0801291c <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	4603      	mov	r3, r0
 8012924:	460a      	mov	r2, r1
 8012926:	80fb      	strh	r3, [r7, #6]
 8012928:	4613      	mov	r3, r2
 801292a:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 801292c:	23ae      	movs	r3, #174	@ 0xae
 801292e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 8012930:	2300      	movs	r3, #0
 8012932:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012934:	4b34      	ldr	r3, [pc, #208]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d108      	bne.n	801294e <gos_taskRemovePrivilege+0x32>
 801293c:	b672      	cpsid	i
 801293e:	f3ef 8310 	mrs	r3, PRIMASK
 8012942:	4a32      	ldr	r2, [pc, #200]	@ (8012a0c <gos_taskRemovePrivilege+0xf0>)
 8012944:	6013      	str	r3, [r2, #0]
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	f3bf 8f6f 	isb	sy
 801294e:	4b2e      	ldr	r3, [pc, #184]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	3301      	adds	r3, #1
 8012954:	b2da      	uxtb	r2, r3
 8012956:	4b2c      	ldr	r3, [pc, #176]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 8012958:	701a      	strb	r2, [r3, #0]
 801295a:	4b2d      	ldr	r3, [pc, #180]	@ (8012a10 <gos_taskRemovePrivilege+0xf4>)
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	3301      	adds	r3, #1
 8012960:	b2da      	uxtb	r2, r3
 8012962:	4b2b      	ldr	r3, [pc, #172]	@ (8012a10 <gos_taskRemovePrivilege+0xf4>)
 8012964:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8012966:	88fb      	ldrh	r3, [r7, #6]
 8012968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801296c:	d923      	bls.n	80129b6 <gos_taskRemovePrivilege+0x9a>
 801296e:	88fb      	ldrh	r3, [r7, #6]
 8012970:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012974:	4293      	cmp	r3, r2
 8012976:	d81e      	bhi.n	80129b6 <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012978:	88fb      	ldrh	r3, [r7, #6]
 801297a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801297e:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8012980:	4a24      	ldr	r2, [pc, #144]	@ (8012a14 <gos_taskRemovePrivilege+0xf8>)
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	216a      	movs	r1, #106	@ 0x6a
 8012986:	fb01 f303 	mul.w	r3, r1, r3
 801298a:	4413      	add	r3, r2
 801298c:	3308      	adds	r3, #8
 801298e:	881b      	ldrh	r3, [r3, #0]
 8012990:	b21a      	sxth	r2, r3
 8012992:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012996:	43db      	mvns	r3, r3
 8012998:	b21b      	sxth	r3, r3
 801299a:	4013      	ands	r3, r2
 801299c:	b21b      	sxth	r3, r3
 801299e:	b298      	uxth	r0, r3
 80129a0:	4a1c      	ldr	r2, [pc, #112]	@ (8012a14 <gos_taskRemovePrivilege+0xf8>)
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	216a      	movs	r1, #106	@ 0x6a
 80129a6:	fb01 f303 	mul.w	r3, r1, r3
 80129aa:	4413      	add	r3, r2
 80129ac:	3308      	adds	r3, #8
 80129ae:	4602      	mov	r2, r0
 80129b0:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 80129b2:	2355      	movs	r3, #85	@ 0x55
 80129b4:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80129b6:	4b14      	ldr	r3, [pc, #80]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d005      	beq.n	80129ca <gos_taskRemovePrivilege+0xae>
 80129be:	4b12      	ldr	r3, [pc, #72]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	3b01      	subs	r3, #1
 80129c4:	b2da      	uxtb	r2, r3
 80129c6:	4b10      	ldr	r3, [pc, #64]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 80129c8:	701a      	strb	r2, [r3, #0]
 80129ca:	4b0f      	ldr	r3, [pc, #60]	@ (8012a08 <gos_taskRemovePrivilege+0xec>)
 80129cc:	781b      	ldrb	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d108      	bne.n	80129e4 <gos_taskRemovePrivilege+0xc8>
 80129d2:	4b0e      	ldr	r3, [pc, #56]	@ (8012a0c <gos_taskRemovePrivilege+0xf0>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f383 8810 	msr	PRIMASK, r3
 80129da:	b662      	cpsie	i
 80129dc:	f3bf 8f4f 	dsb	sy
 80129e0:	f3bf 8f6f 	isb	sy
 80129e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012a10 <gos_taskRemovePrivilege+0xf4>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <gos_taskRemovePrivilege+0xdc>
 80129ec:	4b08      	ldr	r3, [pc, #32]	@ (8012a10 <gos_taskRemovePrivilege+0xf4>)
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	3b01      	subs	r3, #1
 80129f2:	b2da      	uxtb	r2, r3
 80129f4:	4b06      	ldr	r3, [pc, #24]	@ (8012a10 <gos_taskRemovePrivilege+0xf4>)
 80129f6:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 80129f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3714      	adds	r7, #20
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop
 8012a08:	20005e53 	.word	0x20005e53
 8012a0c:	20005e54 	.word	0x20005e54
 8012a10:	20005e51 	.word	0x20005e51
 8012a14:	20000788 	.word	0x20000788

08012a18 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8012a18:	b480      	push	{r7}
 8012a1a:	b085      	sub	sp, #20
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	4603      	mov	r3, r0
 8012a20:	460a      	mov	r2, r1
 8012a22:	80fb      	strh	r3, [r7, #6]
 8012a24:	4613      	mov	r3, r2
 8012a26:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8012a28:	23ae      	movs	r3, #174	@ 0xae
 8012a2a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012a30:	4b2c      	ldr	r3, [pc, #176]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d108      	bne.n	8012a4a <gos_taskSetPrivileges+0x32>
 8012a38:	b672      	cpsid	i
 8012a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8012a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8012ae8 <gos_taskSetPrivileges+0xd0>)
 8012a40:	6013      	str	r3, [r2, #0]
 8012a42:	f3bf 8f4f 	dsb	sy
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	4b26      	ldr	r3, [pc, #152]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	4b24      	ldr	r3, [pc, #144]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012a54:	701a      	strb	r2, [r3, #0]
 8012a56:	4b25      	ldr	r3, [pc, #148]	@ (8012aec <gos_taskSetPrivileges+0xd4>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	b2da      	uxtb	r2, r3
 8012a5e:	4b23      	ldr	r3, [pc, #140]	@ (8012aec <gos_taskSetPrivileges+0xd4>)
 8012a60:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8012a62:	88fb      	ldrh	r3, [r7, #6]
 8012a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012a68:	d913      	bls.n	8012a92 <gos_taskSetPrivileges+0x7a>
 8012a6a:	88fb      	ldrh	r3, [r7, #6]
 8012a6c:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d80e      	bhi.n	8012a92 <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012a74:	88fb      	ldrh	r3, [r7, #6]
 8012a76:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012a7a:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8012a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8012af0 <gos_taskSetPrivileges+0xd8>)
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	216a      	movs	r1, #106	@ 0x6a
 8012a82:	fb01 f303 	mul.w	r3, r1, r3
 8012a86:	4413      	add	r3, r2
 8012a88:	3308      	adds	r3, #8
 8012a8a:	88ba      	ldrh	r2, [r7, #4]
 8012a8c:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8012a8e:	2355      	movs	r3, #85	@ 0x55
 8012a90:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8012a92:	4b14      	ldr	r3, [pc, #80]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d005      	beq.n	8012aa6 <gos_taskSetPrivileges+0x8e>
 8012a9a:	4b12      	ldr	r3, [pc, #72]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	3b01      	subs	r3, #1
 8012aa0:	b2da      	uxtb	r2, r3
 8012aa2:	4b10      	ldr	r3, [pc, #64]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012aa4:	701a      	strb	r2, [r3, #0]
 8012aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8012ae4 <gos_taskSetPrivileges+0xcc>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d108      	bne.n	8012ac0 <gos_taskSetPrivileges+0xa8>
 8012aae:	4b0e      	ldr	r3, [pc, #56]	@ (8012ae8 <gos_taskSetPrivileges+0xd0>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	f383 8810 	msr	PRIMASK, r3
 8012ab6:	b662      	cpsie	i
 8012ab8:	f3bf 8f4f 	dsb	sy
 8012abc:	f3bf 8f6f 	isb	sy
 8012ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8012aec <gos_taskSetPrivileges+0xd4>)
 8012ac2:	781b      	ldrb	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d005      	beq.n	8012ad4 <gos_taskSetPrivileges+0xbc>
 8012ac8:	4b08      	ldr	r3, [pc, #32]	@ (8012aec <gos_taskSetPrivileges+0xd4>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	3b01      	subs	r3, #1
 8012ace:	b2da      	uxtb	r2, r3
 8012ad0:	4b06      	ldr	r3, [pc, #24]	@ (8012aec <gos_taskSetPrivileges+0xd4>)
 8012ad2:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3714      	adds	r7, #20
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	20005e53 	.word	0x20005e53
 8012ae8:	20005e54 	.word	0x20005e54
 8012aec:	20005e51 	.word	0x20005e51
 8012af0:	20000788 	.word	0x20000788

08012af4 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	4603      	mov	r3, r0
 8012afc:	6039      	str	r1, [r7, #0]
 8012afe:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8012b00:	23ae      	movs	r3, #174	@ 0xae
 8012b02:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8012b04:	2300      	movs	r3, #0
 8012b06:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012b08:	4b2e      	ldr	r3, [pc, #184]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d108      	bne.n	8012b22 <gos_taskGetPrivileges+0x2e>
 8012b10:	b672      	cpsid	i
 8012b12:	f3ef 8310 	mrs	r3, PRIMASK
 8012b16:	4a2c      	ldr	r2, [pc, #176]	@ (8012bc8 <gos_taskGetPrivileges+0xd4>)
 8012b18:	6013      	str	r3, [r2, #0]
 8012b1a:	f3bf 8f4f 	dsb	sy
 8012b1e:	f3bf 8f6f 	isb	sy
 8012b22:	4b28      	ldr	r3, [pc, #160]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	3301      	adds	r3, #1
 8012b28:	b2da      	uxtb	r2, r3
 8012b2a:	4b26      	ldr	r3, [pc, #152]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b2c:	701a      	strb	r2, [r3, #0]
 8012b2e:	4b27      	ldr	r3, [pc, #156]	@ (8012bcc <gos_taskGetPrivileges+0xd8>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	3301      	adds	r3, #1
 8012b34:	b2da      	uxtb	r2, r3
 8012b36:	4b25      	ldr	r3, [pc, #148]	@ (8012bcc <gos_taskGetPrivileges+0xd8>)
 8012b38:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012b3a:	88fb      	ldrh	r3, [r7, #6]
 8012b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012b40:	d917      	bls.n	8012b72 <gos_taskGetPrivileges+0x7e>
 8012b42:	88fb      	ldrh	r3, [r7, #6]
 8012b44:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d812      	bhi.n	8012b72 <gos_taskGetPrivileges+0x7e>
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d00f      	beq.n	8012b72 <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012b52:	88fb      	ldrh	r3, [r7, #6]
 8012b54:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012b58:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8012b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8012bd0 <gos_taskGetPrivileges+0xdc>)
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	216a      	movs	r1, #106	@ 0x6a
 8012b60:	fb01 f303 	mul.w	r3, r1, r3
 8012b64:	4413      	add	r3, r2
 8012b66:	3308      	adds	r3, #8
 8012b68:	881a      	ldrh	r2, [r3, #0]
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8012b6e:	2355      	movs	r3, #85	@ 0x55
 8012b70:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 8012b72:	4b14      	ldr	r3, [pc, #80]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d005      	beq.n	8012b86 <gos_taskGetPrivileges+0x92>
 8012b7a:	4b12      	ldr	r3, [pc, #72]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	4b10      	ldr	r3, [pc, #64]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b84:	701a      	strb	r2, [r3, #0]
 8012b86:	4b0f      	ldr	r3, [pc, #60]	@ (8012bc4 <gos_taskGetPrivileges+0xd0>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d108      	bne.n	8012ba0 <gos_taskGetPrivileges+0xac>
 8012b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8012bc8 <gos_taskGetPrivileges+0xd4>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f383 8810 	msr	PRIMASK, r3
 8012b96:	b662      	cpsie	i
 8012b98:	f3bf 8f4f 	dsb	sy
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8012bcc <gos_taskGetPrivileges+0xd8>)
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d005      	beq.n	8012bb4 <gos_taskGetPrivileges+0xc0>
 8012ba8:	4b08      	ldr	r3, [pc, #32]	@ (8012bcc <gos_taskGetPrivileges+0xd8>)
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	3b01      	subs	r3, #1
 8012bae:	b2da      	uxtb	r2, r3
 8012bb0:	4b06      	ldr	r3, [pc, #24]	@ (8012bcc <gos_taskGetPrivileges+0xd8>)
 8012bb2:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 8012bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3714      	adds	r7, #20
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	20005e53 	.word	0x20005e53
 8012bc8:	20005e54 	.word	0x20005e54
 8012bcc:	20005e51 	.word	0x20005e51
 8012bd0:	20000788 	.word	0x20000788

08012bd4 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b085      	sub	sp, #20
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8012bdc:	23ae      	movs	r3, #174	@ 0xae
 8012bde:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012be0:	4b26      	ldr	r3, [pc, #152]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d108      	bne.n	8012bfa <gos_taskGetCurrentId+0x26>
 8012be8:	b672      	cpsid	i
 8012bea:	f3ef 8310 	mrs	r3, PRIMASK
 8012bee:	4a24      	ldr	r2, [pc, #144]	@ (8012c80 <gos_taskGetCurrentId+0xac>)
 8012bf0:	6013      	str	r3, [r2, #0]
 8012bf2:	f3bf 8f4f 	dsb	sy
 8012bf6:	f3bf 8f6f 	isb	sy
 8012bfa:	4b20      	ldr	r3, [pc, #128]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	3301      	adds	r3, #1
 8012c00:	b2da      	uxtb	r2, r3
 8012c02:	4b1e      	ldr	r3, [pc, #120]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012c04:	701a      	strb	r2, [r3, #0]
 8012c06:	4b1f      	ldr	r3, [pc, #124]	@ (8012c84 <gos_taskGetCurrentId+0xb0>)
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	b2da      	uxtb	r2, r3
 8012c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8012c84 <gos_taskGetCurrentId+0xb0>)
 8012c10:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d009      	beq.n	8012c2c <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8012c18:	4b1b      	ldr	r3, [pc, #108]	@ (8012c88 <gos_taskGetCurrentId+0xb4>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012c22:	b29a      	uxth	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8012c28:	2355      	movs	r3, #85	@ 0x55
 8012c2a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 8012c2c:	4b13      	ldr	r3, [pc, #76]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d005      	beq.n	8012c40 <gos_taskGetCurrentId+0x6c>
 8012c34:	4b11      	ldr	r3, [pc, #68]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	3b01      	subs	r3, #1
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012c3e:	701a      	strb	r2, [r3, #0]
 8012c40:	4b0e      	ldr	r3, [pc, #56]	@ (8012c7c <gos_taskGetCurrentId+0xa8>)
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d108      	bne.n	8012c5a <gos_taskGetCurrentId+0x86>
 8012c48:	4b0d      	ldr	r3, [pc, #52]	@ (8012c80 <gos_taskGetCurrentId+0xac>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	f383 8810 	msr	PRIMASK, r3
 8012c50:	b662      	cpsie	i
 8012c52:	f3bf 8f4f 	dsb	sy
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8012c84 <gos_taskGetCurrentId+0xb0>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <gos_taskGetCurrentId+0x9a>
 8012c62:	4b08      	ldr	r3, [pc, #32]	@ (8012c84 <gos_taskGetCurrentId+0xb0>)
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	3b01      	subs	r3, #1
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	4b06      	ldr	r3, [pc, #24]	@ (8012c84 <gos_taskGetCurrentId+0xb0>)
 8012c6c:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 8012c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	3714      	adds	r7, #20
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	20005e53 	.word	0x20005e53
 8012c80:	20005e54 	.word	0x20005e54
 8012c84:	20005e51 	.word	0x20005e51
 8012c88:	20005e58 	.word	0x20005e58

08012c8c <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	4603      	mov	r3, r0
 8012c94:	6039      	str	r1, [r7, #0]
 8012c96:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8012c98:	23ae      	movs	r3, #174	@ 0xae
 8012c9a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d108      	bne.n	8012cba <gos_taskGetData+0x2e>
 8012ca8:	b672      	cpsid	i
 8012caa:	f3ef 8310 	mrs	r3, PRIMASK
 8012cae:	4a2b      	ldr	r2, [pc, #172]	@ (8012d5c <gos_taskGetData+0xd0>)
 8012cb0:	6013      	str	r3, [r2, #0]
 8012cb2:	f3bf 8f4f 	dsb	sy
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	4b27      	ldr	r3, [pc, #156]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	b2da      	uxtb	r2, r3
 8012cc2:	4b25      	ldr	r3, [pc, #148]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012cc4:	701a      	strb	r2, [r3, #0]
 8012cc6:	4b26      	ldr	r3, [pc, #152]	@ (8012d60 <gos_taskGetData+0xd4>)
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	b2da      	uxtb	r2, r3
 8012cce:	4b24      	ldr	r3, [pc, #144]	@ (8012d60 <gos_taskGetData+0xd4>)
 8012cd0:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8012cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	da18      	bge.n	8012d0c <gos_taskGetData+0x80>
 8012cda:	88fb      	ldrh	r3, [r7, #6]
 8012cdc:	f248 020f 	movw	r2, #32783	@ 0x800f
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d813      	bhi.n	8012d0c <gos_taskGetData+0x80>
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d010      	beq.n	8012d0c <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8012cea:	88fb      	ldrh	r3, [r7, #6]
 8012cec:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8012cf0:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	226a      	movs	r2, #106	@ 0x6a
 8012cf6:	fb02 f303 	mul.w	r3, r2, r3
 8012cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8012d64 <gos_taskGetData+0xd8>)
 8012cfc:	4413      	add	r3, r2
 8012cfe:	226a      	movs	r2, #106	@ 0x6a
 8012d00:	4619      	mov	r1, r3
 8012d02:	6838      	ldr	r0, [r7, #0]
 8012d04:	f004 fa51 	bl	80171aa <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8012d08:	2355      	movs	r3, #85	@ 0x55
 8012d0a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8012d0c:	4b12      	ldr	r3, [pc, #72]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d005      	beq.n	8012d20 <gos_taskGetData+0x94>
 8012d14:	4b10      	ldr	r3, [pc, #64]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	3b01      	subs	r3, #1
 8012d1a:	b2da      	uxtb	r2, r3
 8012d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012d1e:	701a      	strb	r2, [r3, #0]
 8012d20:	4b0d      	ldr	r3, [pc, #52]	@ (8012d58 <gos_taskGetData+0xcc>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d108      	bne.n	8012d3a <gos_taskGetData+0xae>
 8012d28:	4b0c      	ldr	r3, [pc, #48]	@ (8012d5c <gos_taskGetData+0xd0>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	f383 8810 	msr	PRIMASK, r3
 8012d30:	b662      	cpsie	i
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	f3bf 8f6f 	isb	sy
 8012d3a:	4b09      	ldr	r3, [pc, #36]	@ (8012d60 <gos_taskGetData+0xd4>)
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d005      	beq.n	8012d4e <gos_taskGetData+0xc2>
 8012d42:	4b07      	ldr	r3, [pc, #28]	@ (8012d60 <gos_taskGetData+0xd4>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	3b01      	subs	r3, #1
 8012d48:	b2da      	uxtb	r2, r3
 8012d4a:	4b05      	ldr	r3, [pc, #20]	@ (8012d60 <gos_taskGetData+0xd4>)
 8012d4c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	20005e53 	.word	0x20005e53
 8012d5c:	20005e54 	.word	0x20005e54
 8012d60:	20005e51 	.word	0x20005e51
 8012d64:	20000788 	.word	0x20000788

08012d68 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	4603      	mov	r3, r0
 8012d70:	6039      	str	r1, [r7, #0]
 8012d72:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8012d74:	23ae      	movs	r3, #174	@ 0xae
 8012d76:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8012d78:	4b2f      	ldr	r3, [pc, #188]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d108      	bne.n	8012d92 <gos_taskGetDataByIndex+0x2a>
 8012d80:	b672      	cpsid	i
 8012d82:	f3ef 8310 	mrs	r3, PRIMASK
 8012d86:	4a2d      	ldr	r2, [pc, #180]	@ (8012e3c <gos_taskGetDataByIndex+0xd4>)
 8012d88:	6013      	str	r3, [r2, #0]
 8012d8a:	f3bf 8f4f 	dsb	sy
 8012d8e:	f3bf 8f6f 	isb	sy
 8012d92:	4b29      	ldr	r3, [pc, #164]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	3301      	adds	r3, #1
 8012d98:	b2da      	uxtb	r2, r3
 8012d9a:	4b27      	ldr	r3, [pc, #156]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012d9c:	701a      	strb	r2, [r3, #0]
 8012d9e:	4b28      	ldr	r3, [pc, #160]	@ (8012e40 <gos_taskGetDataByIndex+0xd8>)
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	3301      	adds	r3, #1
 8012da4:	b2da      	uxtb	r2, r3
 8012da6:	4b26      	ldr	r3, [pc, #152]	@ (8012e40 <gos_taskGetDataByIndex+0xd8>)
 8012da8:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 8012daa:	88fb      	ldrh	r3, [r7, #6]
 8012dac:	2b0f      	cmp	r3, #15
 8012dae:	d81d      	bhi.n	8012dec <gos_taskGetDataByIndex+0x84>
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d01a      	beq.n	8012dec <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 8012db6:	4b23      	ldr	r3, [pc, #140]	@ (8012e44 <gos_taskGetDataByIndex+0xdc>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a23      	ldr	r2, [pc, #140]	@ (8012e48 <gos_taskGetDataByIndex+0xe0>)
 8012dbc:	216a      	movs	r1, #106	@ 0x6a
 8012dbe:	fb01 f303 	mul.w	r3, r1, r3
 8012dc2:	4413      	add	r3, r2
 8012dc4:	3308      	adds	r3, #8
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        taskData != NULL &&
 8012dcc:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8012dd0:	d10c      	bne.n	8012dec <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8012dd2:	88fb      	ldrh	r3, [r7, #6]
 8012dd4:	226a      	movs	r2, #106	@ 0x6a
 8012dd6:	fb02 f303 	mul.w	r3, r2, r3
 8012dda:	4a1b      	ldr	r2, [pc, #108]	@ (8012e48 <gos_taskGetDataByIndex+0xe0>)
 8012ddc:	4413      	add	r3, r2
 8012dde:	226a      	movs	r2, #106	@ 0x6a
 8012de0:	4619      	mov	r1, r3
 8012de2:	6838      	ldr	r0, [r7, #0]
 8012de4:	f004 f9e1 	bl	80171aa <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8012de8:	2355      	movs	r3, #85	@ 0x55
 8012dea:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8012dec:	4b12      	ldr	r3, [pc, #72]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d005      	beq.n	8012e00 <gos_taskGetDataByIndex+0x98>
 8012df4:	4b10      	ldr	r3, [pc, #64]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	b2da      	uxtb	r2, r3
 8012dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012dfe:	701a      	strb	r2, [r3, #0]
 8012e00:	4b0d      	ldr	r3, [pc, #52]	@ (8012e38 <gos_taskGetDataByIndex+0xd0>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d108      	bne.n	8012e1a <gos_taskGetDataByIndex+0xb2>
 8012e08:	4b0c      	ldr	r3, [pc, #48]	@ (8012e3c <gos_taskGetDataByIndex+0xd4>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f383 8810 	msr	PRIMASK, r3
 8012e10:	b662      	cpsie	i
 8012e12:	f3bf 8f4f 	dsb	sy
 8012e16:	f3bf 8f6f 	isb	sy
 8012e1a:	4b09      	ldr	r3, [pc, #36]	@ (8012e40 <gos_taskGetDataByIndex+0xd8>)
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d005      	beq.n	8012e2e <gos_taskGetDataByIndex+0xc6>
 8012e22:	4b07      	ldr	r3, [pc, #28]	@ (8012e40 <gos_taskGetDataByIndex+0xd8>)
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	3b01      	subs	r3, #1
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	4b05      	ldr	r3, [pc, #20]	@ (8012e40 <gos_taskGetDataByIndex+0xd8>)
 8012e2c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3710      	adds	r7, #16
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	20005e53 	.word	0x20005e53
 8012e3c:	20005e54 	.word	0x20005e54
 8012e40:	20005e51 	.word	0x20005e51
 8012e44:	20005e58 	.word	0x20005e58
 8012e48:	20000788 	.word	0x20000788

08012e4c <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b085      	sub	sp, #20
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 8012e54:	23ae      	movs	r3, #174	@ 0xae
 8012e56:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d01e      	beq.n	8012ea0 <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2200      	movs	r2, #0
 8012e66:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012e68:	2300      	movs	r3, #0
 8012e6a:	81bb      	strh	r3, [r7, #12]
 8012e6c:	e011      	b.n	8012e92 <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 8012e6e:	89bb      	ldrh	r3, [r7, #12]
 8012e70:	4a0f      	ldr	r2, [pc, #60]	@ (8012eb0 <gos_taskGetNumber+0x64>)
 8012e72:	216a      	movs	r1, #106	@ 0x6a
 8012e74:	fb01 f303 	mul.w	r3, r1, r3
 8012e78:	4413      	add	r3, r2
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00c      	beq.n	8012e9a <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	3301      	adds	r3, #1
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8012e8c:	89bb      	ldrh	r3, [r7, #12]
 8012e8e:	3301      	adds	r3, #1
 8012e90:	81bb      	strh	r3, [r7, #12]
 8012e92:	89bb      	ldrh	r3, [r7, #12]
 8012e94:	2b0f      	cmp	r3, #15
 8012e96:	d9ea      	bls.n	8012e6e <gos_taskGetNumber+0x22>
 8012e98:	e000      	b.n	8012e9c <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 8012e9a:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 8012e9c:	2355      	movs	r3, #85	@ 0x55
 8012e9e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 8012ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3714      	adds	r7, #20
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop
 8012eb0:	20000788 	.word	0x20000788

08012eb4 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b085      	sub	sp, #20
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_ERROR;
 8012ebc:	23ae      	movs	r3, #174	@ 0xae
 8012ebe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction != NULL                     &&
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d022      	beq.n	8012f0e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPrivilegeLevel != 0                  &&
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	891b      	ldrh	r3, [r3, #8]
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d01d      	beq.n	8012f0e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
        taskDescriptor->taskFunction != gos_idleTask             &&
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
 8012ed6:	4a11      	ldr	r2, [pc, #68]	@ (8012f1c <gos_taskCheckDescriptor+0x68>)
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	d018      	beq.n	8012f0e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ee2:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction != gos_idleTask             &&
 8012ee4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012ee8:	d811      	bhi.n	8012f0e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ef0:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 8012ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ef6:	d30a      	bcc.n	8012f0e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize % 4 == 0u)
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	f003 0303 	and.w	r3, r3, #3
 8012f04:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d101      	bne.n	8012f0e <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_SUCCESS;
 8012f0a:	2355      	movs	r3, #85	@ 0x55
 8012f0c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 8012f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3714      	adds	r7, #20
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr
 8012f1c:	08012f21 	.word	0x08012f21

08012f20 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8012f26:	2155      	movs	r1, #85	@ 0x55
 8012f28:	480c      	ldr	r0, [pc, #48]	@ (8012f5c <gos_idleTask+0x3c>)
 8012f2a:	f000 f9c9 	bl	80132c0 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 8012f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8012f60 <gos_idleTask+0x40>)
 8012f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f32:	3301      	adds	r3, #1
 8012f34:	4a0a      	ldr	r2, [pc, #40]	@ (8012f60 <gos_idleTask+0x40>)
 8012f36:	6413      	str	r3, [r2, #64]	@ 0x40

        if (kernelIdleHookFunction != NULL)
 8012f38:	4b0a      	ldr	r3, [pc, #40]	@ (8012f64 <gos_idleTask+0x44>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 8012f40:	4b08      	ldr	r3, [pc, #32]	@ (8012f64 <gos_idleTask+0x44>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 8012f46:	2049      	movs	r0, #73	@ 0x49
 8012f48:	f7fd fada 	bl	8010500 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 8012f4c:	2355      	movs	r3, #85	@ 0x55
 8012f4e:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8012f50:	2009      	movs	r0, #9
 8012f52:	f7fd ffe3 	bl	8010f1c <gos_kernelReschedule>
    return taskYieldResult;
 8012f56:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8012f58:	e7e9      	b.n	8012f2e <gos_idleTask+0xe>
 8012f5a:	bf00      	nop
 8012f5c:	08019f00 	.word	0x08019f00
 8012f60:	20000788 	.word	0x20000788
 8012f64:	20005e84 	.word	0x20005e84

08012f68 <main>:

/*
 * Main
 */
int main (void_t)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8012f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8012fe4 <main+0x7c>)
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	3301      	adds	r3, #1
 8012f74:	b2da      	uxtb	r2, r3
 8012f76:	4b1b      	ldr	r3, [pc, #108]	@ (8012fe4 <main+0x7c>)
 8012f78:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 8012f7a:	f7ed ffad 	bl	8000ed8 <gos_platformDriverInit>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8012f82:	f000 f8cb 	bl	801311c <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 8012f86:	79fb      	ldrb	r3, [r7, #7]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	4817      	ldr	r0, [pc, #92]	@ (8012fe8 <main+0x80>)
 8012f8c:	f000 f998 	bl	80132c0 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8012f90:	f7fd f8d4 	bl	801013c <gos_kernelInit>
 8012f94:	4603      	mov	r3, r0
 8012f96:	4619      	mov	r1, r3
 8012f98:	4814      	ldr	r0, [pc, #80]	@ (8012fec <main+0x84>)
 8012f9a:	f000 f991 	bl	80132c0 <gos_errorTraceInit>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b55      	cmp	r3, #85	@ 0x55
 8012fa2:	d109      	bne.n	8012fb8 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 8012fa4:	4912      	ldr	r1, [pc, #72]	@ (8012ff0 <main+0x88>)
 8012fa6:	4813      	ldr	r0, [pc, #76]	@ (8012ff4 <main+0x8c>)
 8012fa8:	f7fe fa6e 	bl	8011488 <gos_taskRegister>
 8012fac:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 8012fae:	2b55      	cmp	r3, #85	@ 0x55
 8012fb0:	d102      	bne.n	8012fb8 <main+0x50>
    {
        initError = GOS_FALSE;
 8012fb2:	4b11      	ldr	r3, [pc, #68]	@ (8012ff8 <main+0x90>)
 8012fb4:	2249      	movs	r2, #73	@ 0x49
 8012fb6:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 8012fb8:	f000 f826 	bl	8013008 <gos_Start>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2bae      	cmp	r3, #174	@ 0xae
 8012fc0:	d106      	bne.n	8012fd0 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 8012fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8012ffc <main+0x94>)
 8012fc4:	22c2      	movs	r2, #194	@ 0xc2
 8012fc6:	490e      	ldr	r1, [pc, #56]	@ (8013000 <main+0x98>)
 8012fc8:	2034      	movs	r0, #52	@ 0x34
 8012fca:	f000 f8e1 	bl	8013190 <gos_errorHandler>
 8012fce:	e006      	b.n	8012fde <main+0x76>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 8012fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8013004 <main+0x9c>)
 8012fd2:	22c6      	movs	r2, #198	@ 0xc6
 8012fd4:	490a      	ldr	r1, [pc, #40]	@ (8013000 <main+0x98>)
 8012fd6:	2034      	movs	r0, #52	@ 0x34
 8012fd8:	f000 f8da 	bl	8013190 <gos_errorHandler>
    }

    for (;;);
 8012fdc:	bf00      	nop
 8012fde:	bf00      	nop
 8012fe0:	e7fd      	b.n	8012fde <main+0x76>
 8012fe2:	bf00      	nop
 8012fe4:	20005e51 	.word	0x20005e51
 8012fe8:	08019f10 	.word	0x08019f10
 8012fec:	08019f30 	.word	0x08019f30
 8012ff0:	20005e8a 	.word	0x20005e8a
 8012ff4:	20000f48 	.word	0x20000f48
 8012ff8:	20005e88 	.word	0x20005e88
 8012ffc:	08019f48 	.word	0x08019f48
 8013000:	0801ab24 	.word	0x0801ab24
 8013004:	08019f68 	.word	0x08019f68

08013008 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 801300e:	23b1      	movs	r3, #177	@ 0xb1
 8013010:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8013012:	4b06      	ldr	r3, [pc, #24]	@ (801302c <gos_Start+0x24>)
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	2b49      	cmp	r3, #73	@ 0x49
 8013018:	d103      	bne.n	8013022 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 801301a:	f7fd f97b 	bl	8010314 <gos_kernelStart>
 801301e:	4603      	mov	r3, r0
 8013020:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 8013022:	79fb      	ldrb	r3, [r7, #7]
}
 8013024:	4618      	mov	r0, r3
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	20005e88 	.word	0x20005e88

08013030 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b083      	sub	sp, #12
 8013034:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 8013036:	2355      	movs	r3, #85	@ 0x55
 8013038:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 801303a:	2300      	movs	r3, #0
 801303c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 801303e:	4b31      	ldr	r3, [pc, #196]	@ (8013104 <gos_systemTask+0xd4>)
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	3301      	adds	r3, #1
 8013044:	b2da      	uxtb	r2, r3
 8013046:	4b2f      	ldr	r3, [pc, #188]	@ (8013104 <gos_systemTask+0xd4>)
 8013048:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 801304a:	2300      	movs	r3, #0
 801304c:	71bb      	strb	r3, [r7, #6]
 801304e:	e020      	b.n	8013092 <gos_systemTask+0x62>
    {
    	GOS_CONCAT_RESULT(sysInitResult, gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc()));
 8013050:	79fb      	ldrb	r3, [r7, #7]
 8013052:	2b55      	cmp	r3, #85	@ 0x55
 8013054:	d118      	bne.n	8013088 <gos_systemTask+0x58>
 8013056:	79ba      	ldrb	r2, [r7, #6]
 8013058:	4613      	mov	r3, r2
 801305a:	00db      	lsls	r3, r3, #3
 801305c:	4413      	add	r3, r2
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	4a29      	ldr	r2, [pc, #164]	@ (8013108 <gos_systemTask+0xd8>)
 8013062:	189c      	adds	r4, r3, r2
 8013064:	79ba      	ldrb	r2, [r7, #6]
 8013066:	4928      	ldr	r1, [pc, #160]	@ (8013108 <gos_systemTask+0xd8>)
 8013068:	4613      	mov	r3, r2
 801306a:	00db      	lsls	r3, r3, #3
 801306c:	4413      	add	r3, r2
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	440b      	add	r3, r1
 8013072:	3320      	adds	r3, #32
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4798      	blx	r3
 8013078:	4603      	mov	r3, r0
 801307a:	4619      	mov	r1, r3
 801307c:	4620      	mov	r0, r4
 801307e:	f000 f91f 	bl	80132c0 <gos_errorTraceInit>
 8013082:	4603      	mov	r3, r0
 8013084:	71fb      	strb	r3, [r7, #7]
 8013086:	e001      	b.n	801308c <gos_systemTask+0x5c>
 8013088:	23ae      	movs	r3, #174	@ 0xae
 801308a:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 801308c:	79bb      	ldrb	r3, [r7, #6]
 801308e:	3301      	adds	r3, #1
 8013090:	71bb      	strb	r3, [r7, #6]
 8013092:	79bb      	ldrb	r3, [r7, #6]
 8013094:	2b07      	cmp	r3, #7
 8013096:	d9db      	bls.n	8013050 <gos_systemTask+0x20>
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 8013098:	79fb      	ldrb	r3, [r7, #7]
 801309a:	4619      	mov	r1, r3
 801309c:	481b      	ldr	r0, [pc, #108]	@ (801310c <gos_systemTask+0xdc>)
 801309e:	f000 f90f 	bl	80132c0 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 80130a2:	4b18      	ldr	r3, [pc, #96]	@ (8013104 <gos_systemTask+0xd4>)
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d005      	beq.n	80130b6 <gos_systemTask+0x86>
 80130aa:	4b16      	ldr	r3, [pc, #88]	@ (8013104 <gos_systemTask+0xd4>)
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	3b01      	subs	r3, #1
 80130b0:	b2da      	uxtb	r2, r3
 80130b2:	4b14      	ldr	r3, [pc, #80]	@ (8013104 <gos_systemTask+0xd4>)
 80130b4:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80130b6:	4b16      	ldr	r3, [pc, #88]	@ (8013110 <gos_systemTask+0xe0>)
 80130b8:	881b      	ldrh	r3, [r3, #0]
 80130ba:	21c3      	movs	r1, #195	@ 0xc3
 80130bc:	4618      	mov	r0, r3
 80130be:	f7ff fa81 	bl	80125c4 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 80130c2:	4b13      	ldr	r3, [pc, #76]	@ (8013110 <gos_systemTask+0xe0>)
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	21c3      	movs	r1, #195	@ 0xc3
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7ff f9b7 	bl	801243c <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 80130ce:	2036      	movs	r0, #54	@ 0x36
 80130d0:	f7fd fa16 	bl	8010500 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 80130d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013114 <gos_systemTask+0xe4>)
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	2b36      	cmp	r3, #54	@ 0x36
 80130da:	d10e      	bne.n	80130fa <gos_systemTask+0xca>
        {
            gos_kernelDump();
 80130dc:	f7fd fb74 	bl	80107c8 <gos_kernelDump>
            gos_queueDump();
 80130e0:	f001 fa8e 	bl	8014600 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 80130e4:	4b0c      	ldr	r3, [pc, #48]	@ (8013118 <gos_systemTask+0xe8>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2100      	movs	r1, #0
 80130ea:	4618      	mov	r0, r3
 80130ec:	f001 fb80 	bl	80147f0 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 80130f0:	4b08      	ldr	r3, [pc, #32]	@ (8013114 <gos_systemTask+0xe4>)
 80130f2:	2249      	movs	r2, #73	@ 0x49
 80130f4:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 80130f6:	f001 fae7 	bl	80146c8 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 80130fa:	2064      	movs	r0, #100	@ 0x64
 80130fc:	f7fe fb56 	bl	80117ac <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8013100:	e7e5      	b.n	80130ce <gos_systemTask+0x9e>
 8013102:	bf00      	nop
 8013104:	20005e51 	.word	0x20005e51
 8013108:	20000e28 	.word	0x20000e28
 801310c:	08019fe4 	.word	0x08019fe4
 8013110:	20005e8a 	.word	0x20005e8a
 8013114:	20005e89 	.word	0x20005e89
 8013118:	20005e50 	.word	0x20005e50

0801311c <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 8013120:	4811      	ldr	r0, [pc, #68]	@ (8013168 <gos_printStartupLogo+0x4c>)
 8013122:	f002 fec9 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 8013126:	4811      	ldr	r0, [pc, #68]	@ (801316c <gos_printStartupLogo+0x50>)
 8013128:	f002 fec6 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 801312c:	4810      	ldr	r0, [pc, #64]	@ (8013170 <gos_printStartupLogo+0x54>)
 801312e:	f002 fec3 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 8013132:	4810      	ldr	r0, [pc, #64]	@ (8013174 <gos_printStartupLogo+0x58>)
 8013134:	f002 fec0 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 8013138:	480f      	ldr	r0, [pc, #60]	@ (8013178 <gos_printStartupLogo+0x5c>)
 801313a:	f002 febd 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 801313e:	480f      	ldr	r0, [pc, #60]	@ (801317c <gos_printStartupLogo+0x60>)
 8013140:	f002 feba 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 8013144:	480e      	ldr	r0, [pc, #56]	@ (8013180 <gos_printStartupLogo+0x64>)
 8013146:	f002 feb7 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 801314a:	4809      	ldr	r0, [pc, #36]	@ (8013170 <gos_printStartupLogo+0x54>)
 801314c:	f002 feb4 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 8013150:	480c      	ldr	r0, [pc, #48]	@ (8013184 <gos_printStartupLogo+0x68>)
 8013152:	f002 feb1 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2025                        \r\n\r\n");
 8013156:	480c      	ldr	r0, [pc, #48]	@ (8013188 <gos_printStartupLogo+0x6c>)
 8013158:	f002 feae 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 801315c:	480b      	ldr	r0, [pc, #44]	@ (801318c <gos_printStartupLogo+0x70>)
 801315e:	f002 feab 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
}
 8013162:	bf00      	nop
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	08019ffc 	.word	0x08019ffc
 801316c:	0801a04c 	.word	0x0801a04c
 8013170:	0801a09c 	.word	0x0801a09c
 8013174:	0801a0ec 	.word	0x0801a0ec
 8013178:	0801a13c 	.word	0x0801a13c
 801317c:	0801a18c 	.word	0x0801a18c
 8013180:	0801a1dc 	.word	0x0801a1dc
 8013184:	0801a22c 	.word	0x0801a22c
 8013188:	0801a27c 	.word	0x0801a27c
 801318c:	0801a2cc 	.word	0x0801a2cc

08013190 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 8013190:	b408      	push	{r3}
 8013192:	b580      	push	{r7, lr}
 8013194:	b087      	sub	sp, #28
 8013196:	af00      	add	r7, sp, #0
 8013198:	4603      	mov	r3, r0
 801319a:	60b9      	str	r1, [r7, #8]
 801319c:	607a      	str	r2, [r7, #4]
 801319e:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 80131a0:	483a      	ldr	r0, [pc, #232]	@ (801328c <gos_errorHandler+0xfc>)
 80131a2:	f002 fe89 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 80131a6:	7bfb      	ldrb	r3, [r7, #15]
 80131a8:	2b34      	cmp	r3, #52	@ 0x34
 80131aa:	d103      	bne.n	80131b4 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80131ac:	4838      	ldr	r0, [pc, #224]	@ (8013290 <gos_errorHandler+0x100>)
 80131ae:	f002 fe83 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
 80131b2:	e013      	b.n	80131dc <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 80131b4:	7bfb      	ldrb	r3, [r7, #15]
 80131b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80131b8:	d103      	bne.n	80131c2 <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80131ba:	4836      	ldr	r0, [pc, #216]	@ (8013294 <gos_errorHandler+0x104>)
 80131bc:	f002 fe7c 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
 80131c0:	e00c      	b.n	80131dc <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
 80131c4:	2b1a      	cmp	r3, #26
 80131c6:	d103      	bne.n	80131d0 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80131c8:	4833      	ldr	r0, [pc, #204]	@ (8013298 <gos_errorHandler+0x108>)
 80131ca:	f002 fe75 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
 80131ce:	e005      	b.n	80131dc <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 80131d0:	7bfb      	ldrb	r3, [r7, #15]
 80131d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80131d4:	d102      	bne.n	80131dc <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 80131d6:	4831      	ldr	r0, [pc, #196]	@ (801329c <gos_errorHandler+0x10c>)
 80131d8:	f002 fe6e 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 80131dc:	68bb      	ldr	r3, [r7, #8]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d005      	beq.n	80131ee <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	68b9      	ldr	r1, [r7, #8]
 80131e6:	482e      	ldr	r0, [pc, #184]	@ (80132a0 <gos_errorHandler+0x110>)
 80131e8:	f002 fe66 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
 80131ec:	e006      	b.n	80131fc <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d003      	beq.n	80131fc <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 80131f4:	6879      	ldr	r1, [r7, #4]
 80131f6:	482b      	ldr	r0, [pc, #172]	@ (80132a4 <gos_errorHandler+0x114>)
 80131f8:	f002 fe5e 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 80131fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d00b      	beq.n	801321a <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 8013202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013206:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 8013208:	697a      	ldr	r2, [r7, #20]
 801320a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801320c:	4826      	ldr	r0, [pc, #152]	@ (80132a8 <gos_errorHandler+0x118>)
 801320e:	f003 ff2b 	bl	8017068 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 8013212:	4925      	ldr	r1, [pc, #148]	@ (80132a8 <gos_errorHandler+0x118>)
 8013214:	4825      	ldr	r0, [pc, #148]	@ (80132ac <gos_errorHandler+0x11c>)
 8013216:	f002 fe4f 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 801321a:	4825      	ldr	r0, [pc, #148]	@ (80132b0 <gos_errorHandler+0x120>)
 801321c:	f002 fe4c 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 8013220:	7bfb      	ldrb	r3, [r7, #15]
 8013222:	2b34      	cmp	r3, #52	@ 0x34
 8013224:	d002      	beq.n	801322c <gos_errorHandler+0x9c>
 8013226:	7bfb      	ldrb	r3, [r7, #15]
 8013228:	2b1a      	cmp	r3, #26
 801322a:	d127      	bne.n	801327c <gos_errorHandler+0xec>
    {
        GOS_DISABLE_SCHED
 801322c:	4b21      	ldr	r3, [pc, #132]	@ (80132b4 <gos_errorHandler+0x124>)
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	3301      	adds	r3, #1
 8013232:	b2da      	uxtb	r2, r3
 8013234:	4b1f      	ldr	r3, [pc, #124]	@ (80132b4 <gos_errorHandler+0x124>)
 8013236:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 8013238:	4b1f      	ldr	r3, [pc, #124]	@ (80132b8 <gos_errorHandler+0x128>)
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d108      	bne.n	8013252 <gos_errorHandler+0xc2>
 8013240:	b672      	cpsid	i
 8013242:	f3ef 8310 	mrs	r3, PRIMASK
 8013246:	4a1d      	ldr	r2, [pc, #116]	@ (80132bc <gos_errorHandler+0x12c>)
 8013248:	6013      	str	r3, [r2, #0]
 801324a:	f3bf 8f4f 	dsb	sy
 801324e:	f3bf 8f6f 	isb	sy
 8013252:	4b19      	ldr	r3, [pc, #100]	@ (80132b8 <gos_errorHandler+0x128>)
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	3301      	adds	r3, #1
 8013258:	b2da      	uxtb	r2, r3
 801325a:	4b17      	ldr	r3, [pc, #92]	@ (80132b8 <gos_errorHandler+0x128>)
 801325c:	701a      	strb	r2, [r3, #0]
 801325e:	4b15      	ldr	r3, [pc, #84]	@ (80132b4 <gos_errorHandler+0x124>)
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	3301      	adds	r3, #1
 8013264:	b2da      	uxtb	r2, r3
 8013266:	4b13      	ldr	r3, [pc, #76]	@ (80132b4 <gos_errorHandler+0x124>)
 8013268:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 801326a:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 801326c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8013270:	f7fd f92a 	bl	80104c8 <gos_kernelDelayMs>
            gos_kernelReset();
 8013274:	f7fd f902 	bl	801047c <gos_kernelReset>
            GOS_NOP;
 8013278:	bf00      	nop
 801327a:	e7f6      	b.n	801326a <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 801327c:	bf00      	nop
 801327e:	371c      	adds	r7, #28
 8013280:	46bd      	mov	sp, r7
 8013282:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013286:	b001      	add	sp, #4
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop
 801328c:	0801a31c 	.word	0x0801a31c
 8013290:	0801a370 	.word	0x0801a370
 8013294:	0801a39c 	.word	0x0801a39c
 8013298:	0801a3bc 	.word	0x0801a3bc
 801329c:	0801a3ec 	.word	0x0801a3ec
 80132a0:	0801a40c 	.word	0x0801a40c
 80132a4:	0801a430 	.word	0x0801a430
 80132a8:	20005e8c 	.word	0x20005e8c
 80132ac:	0801a45c 	.word	0x0801a45c
 80132b0:	0801a464 	.word	0x0801a464
 80132b4:	20005e51 	.word	0x20005e51
 80132b8:	20005e53 	.word	0x20005e53
 80132bc:	20005e54 	.word	0x20005e54

080132c0 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 80132c0:	b590      	push	{r4, r7, lr}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	460b      	mov	r3, r1
 80132ca:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 80132cc:	f7fd f8b8 	bl	8010440 <gos_kernelGetSysTicks>
 80132d0:	4604      	mov	r4, r0
 80132d2:	1cfb      	adds	r3, r7, #3
 80132d4:	4618      	mov	r0, r3
 80132d6:	f000 f80d 	bl	80132f4 <gos_traceResultToString>
 80132da:	4603      	mov	r3, r0
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	4621      	mov	r1, r4
 80132e0:	4803      	ldr	r0, [pc, #12]	@ (80132f0 <gos_errorTraceInit+0x30>)
 80132e2:	f002 fde9 	bl	8015eb8 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 80132e6:	78fb      	ldrb	r3, [r7, #3]
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	370c      	adds	r7, #12
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd90      	pop	{r4, r7, pc}
 80132f0:	0801a4b4 	.word	0x0801a4b4

080132f4 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	2b55      	cmp	r3, #85	@ 0x55
 8013302:	d002      	beq.n	801330a <gos_traceResultToString+0x16>
 8013304:	2bae      	cmp	r3, #174	@ 0xae
 8013306:	d002      	beq.n	801330e <gos_traceResultToString+0x1a>
 8013308:	e003      	b.n	8013312 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 801330a:	4b05      	ldr	r3, [pc, #20]	@ (8013320 <gos_traceResultToString+0x2c>)
 801330c:	e002      	b.n	8013314 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 801330e:	4b05      	ldr	r3, [pc, #20]	@ (8013324 <gos_traceResultToString+0x30>)
 8013310:	e000      	b.n	8013314 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 8013312:	4b05      	ldr	r3, [pc, #20]	@ (8013328 <gos_traceResultToString+0x34>)
        }
    }
}
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	0801a4d0 	.word	0x0801a4d0
 8013324:	0801a4e4 	.word	0x0801a4e4
 8013328:	0801a4f8 	.word	0x0801a4f8

0801332c <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 8013332:	2355      	movs	r3, #85	@ 0x55
 8013334:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 8013336:	2300      	movs	r3, #0
 8013338:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 801333a:	2300      	movs	r3, #0
 801333c:	80bb      	strh	r3, [r7, #4]
 801333e:	e020      	b.n	8013382 <gos_gcpInit+0x56>
    {
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpRxMutexes[mutexIdx]));
 8013340:	79fb      	ldrb	r3, [r7, #7]
 8013342:	2b55      	cmp	r3, #85	@ 0x55
 8013344:	d109      	bne.n	801335a <gos_gcpInit+0x2e>
 8013346:	88bb      	ldrh	r3, [r7, #4]
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	4a12      	ldr	r2, [pc, #72]	@ (8013394 <gos_gcpInit+0x68>)
 801334c:	4413      	add	r3, r2
 801334e:	4618      	mov	r0, r3
 8013350:	f000 fd6c 	bl	8013e2c <gos_mutexInit>
 8013354:	4603      	mov	r3, r0
 8013356:	71fb      	strb	r3, [r7, #7]
 8013358:	e001      	b.n	801335e <gos_gcpInit+0x32>
 801335a:	23ae      	movs	r3, #174	@ 0xae
 801335c:	71fb      	strb	r3, [r7, #7]
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpTxMutexes[mutexIdx]));
 801335e:	79fb      	ldrb	r3, [r7, #7]
 8013360:	2b55      	cmp	r3, #85	@ 0x55
 8013362:	d109      	bne.n	8013378 <gos_gcpInit+0x4c>
 8013364:	88bb      	ldrh	r3, [r7, #4]
 8013366:	009b      	lsls	r3, r3, #2
 8013368:	4a0b      	ldr	r2, [pc, #44]	@ (8013398 <gos_gcpInit+0x6c>)
 801336a:	4413      	add	r3, r2
 801336c:	4618      	mov	r0, r3
 801336e:	f000 fd5d 	bl	8013e2c <gos_mutexInit>
 8013372:	4603      	mov	r3, r0
 8013374:	71fb      	strb	r3, [r7, #7]
 8013376:	e001      	b.n	801337c <gos_gcpInit+0x50>
 8013378:	23ae      	movs	r3, #174	@ 0xae
 801337a:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 801337c:	88bb      	ldrh	r3, [r7, #4]
 801337e:	3301      	adds	r3, #1
 8013380:	80bb      	strh	r3, [r7, #4]
 8013382:	88bb      	ldrh	r3, [r7, #4]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d0db      	beq.n	8013340 <gos_gcpInit+0x14>
    }

    return gcpInitResult;
 8013388:	79fb      	ldrb	r3, [r7, #7]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3708      	adds	r7, #8
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	20005ee4 	.word	0x20005ee4
 8013398:	20005ee8 	.word	0x20005ee8

0801339c <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 801339c:	b480      	push	{r7}
 801339e:	b087      	sub	sp, #28
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	4603      	mov	r3, r0
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	607a      	str	r2, [r7, #4]
 80133a8:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 80133aa:	23ae      	movs	r3, #174	@ 0xae
 80133ac:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d112      	bne.n	80133da <gos_gcpRegisterPhysicalDriver+0x3e>
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00f      	beq.n	80133da <gos_gcpRegisterPhysicalDriver+0x3e>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00c      	beq.n	80133da <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
 80133c2:	4a09      	ldr	r2, [pc, #36]	@ (80133e8 <gos_gcpRegisterPhysicalDriver+0x4c>)
 80133c4:	00db      	lsls	r3, r3, #3
 80133c6:	4413      	add	r3, r2
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 80133cc:	7bfb      	ldrb	r3, [r7, #15]
 80133ce:	4906      	ldr	r1, [pc, #24]	@ (80133e8 <gos_gcpRegisterPhysicalDriver+0x4c>)
 80133d0:	68ba      	ldr	r2, [r7, #8]
 80133d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 80133d6:	2355      	movs	r3, #85	@ 0x55
 80133d8:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 80133da:	7dfb      	ldrb	r3, [r7, #23]
}
 80133dc:	4618      	mov	r0, r3
 80133de:	371c      	adds	r7, #28
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr
 80133e8:	20005edc 	.word	0x20005edc

080133ec <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b092      	sub	sp, #72	@ 0x48
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60ba      	str	r2, [r7, #8]
 80133f4:	461a      	mov	r2, r3
 80133f6:	4603      	mov	r3, r0
 80133f8:	73fb      	strb	r3, [r7, #15]
 80133fa:	460b      	mov	r3, r1
 80133fc:	81bb      	strh	r3, [r7, #12]
 80133fe:	4613      	mov	r3, r2
 8013400:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 8013402:	23ae      	movs	r3, #174	@ 0xae
 8013404:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013408:	7bfb      	ldrb	r3, [r7, #15]
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	4a8e      	ldr	r2, [pc, #568]	@ (8013648 <gos_gcpTransmitMessage+0x25c>)
 801340e:	4413      	add	r3, r2
 8013410:	f04f 31ff 	mov.w	r1, #4294967295
 8013414:	4618      	mov	r0, r3
 8013416:	f000 fd23 	bl	8013e60 <gos_mutexLock>
 801341a:	4603      	mov	r3, r0
 801341c:	2b55      	cmp	r3, #85	@ 0x55
 801341e:	f040 8105 	bne.w	801362c <gos_gcpTransmitMessage+0x240>
 8013422:	7bfb      	ldrb	r3, [r7, #15]
 8013424:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8013428:	89bb      	ldrh	r3, [r7, #12]
 801342a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	643b      	str	r3, [r7, #64]	@ 0x40
 8013432:	88fb      	ldrh	r3, [r7, #6]
 8013434:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8013436:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801343a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 801343c:	23ae      	movs	r3, #174	@ 0xae
 801343e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 8013442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013446:	2200      	movs	r2, #0
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	605a      	str	r2, [r3, #4]
 801344c:	609a      	str	r2, [r3, #8]
 801344e:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8013450:	f107 0314 	add.w	r3, r7, #20
 8013454:	2200      	movs	r2, #0
 8013456:	601a      	str	r2, [r3, #0]
 8013458:	605a      	str	r2, [r3, #4]
 801345a:	609a      	str	r2, [r3, #8]
 801345c:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 801345e:	2300      	movs	r3, #0
 8013460:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 8013462:	2300      	movs	r3, #0
 8013464:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    u8_t                 chunkIndex            = 0u;
 8013468:	2300      	movs	r3, #0
 801346a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    u16_t                tempSize              = 0u;
 801346e:	2300      	movs	r3, #0
 8013470:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 8013472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013474:	2b00      	cmp	r3, #0
 8013476:	d107      	bne.n	8013488 <gos_gcpTransmitMessage+0x9c>
 8013478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801347a:	2b00      	cmp	r3, #0
 801347c:	f040 80d2 	bne.w	8013624 <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 8013480:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013482:	2b00      	cmp	r3, #0
 8013484:	f040 80ce 	bne.w	8013624 <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 8013488:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801348c:	2b00      	cmp	r3, #0
 801348e:	f040 80c9 	bne.w	8013624 <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 8013492:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013496:	4a6d      	ldr	r2, [pc, #436]	@ (801364c <gos_gcpTransmitMessage+0x260>)
 8013498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 801349c:	2b00      	cmp	r3, #0
 801349e:	f000 80c1 	beq.w	8013624 <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 80134a2:	2300      	movs	r3, #0
 80134a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 80134a8:	2302      	movs	r3, #2
 80134aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 80134ae:	2300      	movs	r3, #0
 80134b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 80134b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80134b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
        requestHeaderFrame.messageId     = messageId;
 80134b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80134bc:	853b      	strh	r3, [r7, #40]	@ 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 80134be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80134c0:	4619      	mov	r1, r3
 80134c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80134c4:	f002 ff02 	bl	80162cc <gos_crcDriverGetCrc>
 80134c8:	4603      	mov	r3, r0
 80134ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 80134cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134d0:	210c      	movs	r1, #12
 80134d2:	4618      	mov	r0, r3
 80134d4:	f002 fefa 	bl	80162cc <gos_crcDriverGetCrc>
 80134d8:	4603      	mov	r3, r0
 80134da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 80134dc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80134e0:	4a5a      	ldr	r2, [pc, #360]	@ (801364c <gos_gcpTransmitMessage+0x260>)
 80134e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80134e6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80134ea:	2110      	movs	r1, #16
 80134ec:	4610      	mov	r0, r2
 80134ee:	4798      	blx	r3
 80134f0:	4603      	mov	r3, r0
 80134f2:	2b55      	cmp	r3, #85	@ 0x55
 80134f4:	f040 8096 	bne.w	8013624 <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 80134f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d120      	bne.n	8013540 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 80134fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013502:	4a52      	ldr	r2, [pc, #328]	@ (801364c <gos_gcpTransmitMessage+0x260>)
 8013504:	00db      	lsls	r3, r3, #3
 8013506:	4413      	add	r3, r2
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	f107 0214 	add.w	r2, r7, #20
 801350e:	2110      	movs	r1, #16
 8013510:	4610      	mov	r0, r2
 8013512:	4798      	blx	r3
 8013514:	4603      	mov	r3, r0
 8013516:	2b55      	cmp	r3, #85	@ 0x55
 8013518:	f040 8084 	bne.w	8013624 <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 801351c:	f107 0213 	add.w	r2, r7, #19
 8013520:	f107 0314 	add.w	r3, r7, #20
 8013524:	4611      	mov	r1, r2
 8013526:	4618      	mov	r0, r3
 8013528:	f000 f9de 	bl	80138e8 <gos_gcpValidateHeader>
 801352c:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 801352e:	2b55      	cmp	r3, #85	@ 0x55
 8013530:	d178      	bne.n	8013624 <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 8013532:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8013534:	2b01      	cmp	r3, #1
 8013536:	d175      	bne.n	8013624 <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 8013538:	2355      	movs	r3, #85	@ 0x55
 801353a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801353e:	e071      	b.n	8013624 <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8013540:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8013542:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013544:	fbb2 f3f3 	udiv	r3, r2, r3
 8013548:	b29b      	uxth	r3, r3
 801354a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 801354e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013550:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8013552:	fbb3 f1f2 	udiv	r1, r3, r2
 8013556:	fb01 f202 	mul.w	r2, r1, r2
 801355a:	1a9b      	subs	r3, r3, r2
 801355c:	b29b      	uxth	r3, r3
 801355e:	2b00      	cmp	r3, #0
 8013560:	d004      	beq.n	801356c <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 8013562:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8013566:	3301      	adds	r3, #1
 8013568:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 801356c:	2300      	movs	r3, #0
 801356e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8013572:	e051      	b.n	8013618 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8013574:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013578:	3301      	adds	r3, #1
 801357a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801357c:	fb02 f303 	mul.w	r3, r2, r3
 8013580:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8013582:	4293      	cmp	r3, r2
 8013584:	dd0a      	ble.n	801359c <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8013586:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8013588:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801358c:	b29b      	uxth	r3, r3
 801358e:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8013590:	fb11 f303 	smulbb	r3, r1, r3
 8013594:	b29b      	uxth	r3, r3
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801359a:	e001      	b.n	80135a0 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 801359c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801359e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 80135a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80135a4:	4a29      	ldr	r2, [pc, #164]	@ (801364c <gos_gcpTransmitMessage+0x260>)
 80135a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80135aa:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80135ae:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80135b0:	fb01 f202 	mul.w	r2, r1, r2
 80135b4:	4611      	mov	r1, r2
 80135b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80135b8:	440a      	add	r2, r1
 80135ba:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 80135bc:	4610      	mov	r0, r2
 80135be:	4798      	blx	r3
 80135c0:	4603      	mov	r3, r0
 80135c2:	2b55      	cmp	r3, #85	@ 0x55
 80135c4:	d124      	bne.n	8013610 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 80135c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80135ca:	4a20      	ldr	r2, [pc, #128]	@ (801364c <gos_gcpTransmitMessage+0x260>)
 80135cc:	00db      	lsls	r3, r3, #3
 80135ce:	4413      	add	r3, r2
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	f107 0214 	add.w	r2, r7, #20
 80135d6:	2110      	movs	r1, #16
 80135d8:	4610      	mov	r0, r2
 80135da:	4798      	blx	r3
 80135dc:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 80135de:	2b55      	cmp	r3, #85	@ 0x55
 80135e0:	d116      	bne.n	8013610 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80135e2:	f107 0213 	add.w	r2, r7, #19
 80135e6:	f107 0314 	add.w	r3, r7, #20
 80135ea:	4611      	mov	r1, r2
 80135ec:	4618      	mov	r0, r3
 80135ee:	f000 f97b 	bl	80138e8 <gos_gcpValidateHeader>
 80135f2:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 80135f4:	2b55      	cmp	r3, #85	@ 0x55
 80135f6:	d10b      	bne.n	8013610 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 80135f8:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80135fa:	2b01      	cmp	r3, #1
 80135fc:	d108      	bne.n	8013610 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 80135fe:	2355      	movs	r3, #85	@ 0x55
 8013600:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8013604:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8013608:	3301      	adds	r3, #1
 801360a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 801360e:	e003      	b.n	8013618 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 8013610:	23ae      	movs	r3, #174	@ 0xae
 8013612:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            			break;
 8013616:	e005      	b.n	8013624 <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8013618:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 801361c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8013620:	429a      	cmp	r2, r3
 8013622:	d3a7      	bcc.n	8013574 <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 8013624:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 8013628:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 801362c:	7bfb      	ldrb	r3, [r7, #15]
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	4a05      	ldr	r2, [pc, #20]	@ (8013648 <gos_gcpTransmitMessage+0x25c>)
 8013632:	4413      	add	r3, r2
 8013634:	4618      	mov	r0, r3
 8013636:	f000 fd19 	bl	801406c <gos_mutexUnlock>
    return transmitMessageResult;
 801363a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801363e:	4618      	mov	r0, r3
 8013640:	3748      	adds	r7, #72	@ 0x48
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	20005ee8 	.word	0x20005ee8
 801364c:	20005edc 	.word	0x20005edc

08013650 <gos_gcpReceiveMessage>:
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b094      	sub	sp, #80	@ 0x50
 8013654:	af00      	add	r7, sp, #0
 8013656:	60b9      	str	r1, [r7, #8]
 8013658:	607a      	str	r2, [r7, #4]
 801365a:	461a      	mov	r2, r3
 801365c:	4603      	mov	r3, r0
 801365e:	73fb      	strb	r3, [r7, #15]
 8013660:	4613      	mov	r3, r2
 8013662:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 8013664:	23ae      	movs	r3, #174	@ 0xae
 8013666:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 801366a:	7bfb      	ldrb	r3, [r7, #15]
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4a9c      	ldr	r2, [pc, #624]	@ (80138e0 <gos_gcpReceiveMessage+0x290>)
 8013670:	4413      	add	r3, r2
 8013672:	f04f 31ff 	mov.w	r1, #4294967295
 8013676:	4618      	mov	r0, r3
 8013678:	f000 fbf2 	bl	8013e60 <gos_mutexLock>
 801367c:	4603      	mov	r3, r0
 801367e:	2b55      	cmp	r3, #85	@ 0x55
 8013680:	f040 8120 	bne.w	80138c4 <gos_gcpReceiveMessage+0x274>
 8013684:	7bfb      	ldrb	r3, [r7, #15]
 8013686:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	647b      	str	r3, [r7, #68]	@ 0x44
 8013692:	89bb      	ldrh	r3, [r7, #12]
 8013694:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8013698:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801369c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 80136a0:	23ae      	movs	r3, #174	@ 0xae
 80136a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 80136a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80136aa:	2200      	movs	r2, #0
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	605a      	str	r2, [r3, #4]
 80136b0:	609a      	str	r2, [r3, #8]
 80136b2:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 80136b4:	f107 0318 	add.w	r3, r7, #24
 80136b8:	2200      	movs	r2, #0
 80136ba:	601a      	str	r2, [r3, #0]
 80136bc:	605a      	str	r2, [r3, #4]
 80136be:	609a      	str	r2, [r3, #8]
 80136c0:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 80136c2:	2300      	movs	r3, #0
 80136c4:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 80136c6:	2300      	movs	r3, #0
 80136c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    u8_t                 chunkIndex            = 0u;
 80136cc:	2300      	movs	r3, #0
 80136ce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    u16_t                tempSize              = 0u;
 80136d2:	2300      	movs	r3, #0
 80136d4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 80136d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136d8:	2b00      	cmp	r3, #0
 80136da:	f000 80ef 	beq.w	80138bc <gos_gcpReceiveMessage+0x26c>
 80136de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f000 80eb 	beq.w	80138bc <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 80136e6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f040 80e6 	bne.w	80138bc <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 80136f0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80136f4:	4a7b      	ldr	r2, [pc, #492]	@ (80138e4 <gos_gcpReceiveMessage+0x294>)
 80136f6:	00db      	lsls	r3, r3, #3
 80136f8:	4413      	add	r3, r2
 80136fa:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 80dd 	beq.w	80138bc <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 8013702:	2300      	movs	r3, #0
 8013704:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 8013706:	2300      	movs	r3, #0
 8013708:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 801370a:	2302      	movs	r3, #2
 801370c:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 801370e:	2300      	movs	r3, #0
 8013710:	767b      	strb	r3, [r7, #25]

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8013712:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8013716:	4a73      	ldr	r2, [pc, #460]	@ (80138e4 <gos_gcpReceiveMessage+0x294>)
 8013718:	00db      	lsls	r3, r3, #3
 801371a:	4413      	add	r3, r2
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8013722:	2110      	movs	r1, #16
 8013724:	4610      	mov	r0, r2
 8013726:	4798      	blx	r3
 8013728:	4603      	mov	r3, r0
 801372a:	2b55      	cmp	r3, #85	@ 0x55
 801372c:	f040 80b0 	bne.w	8013890 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 8013730:	f107 0217 	add.w	r2, r7, #23
 8013734:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013738:	4611      	mov	r1, r2
 801373a:	4618      	mov	r0, r3
 801373c:	f000 f8d4 	bl	80138e8 <gos_gcpValidateHeader>
 8013740:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8013742:	2b55      	cmp	r3, #85	@ 0x55
 8013744:	f040 80a4 	bne.w	8013890 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 8013748:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801374a:	2b00      	cmp	r3, #0
 801374c:	d11e      	bne.n	801378c <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 801374e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8013750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013752:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 8013754:	2301      	movs	r3, #1
 8013756:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8013758:	f107 0318 	add.w	r3, r7, #24
 801375c:	210c      	movs	r1, #12
 801375e:	4618      	mov	r0, r3
 8013760:	f002 fdb4 	bl	80162cc <gos_crcDriverGetCrc>
 8013764:	4603      	mov	r3, r0
 8013766:	627b      	str	r3, [r7, #36]	@ 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8013768:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801376c:	4a5d      	ldr	r2, [pc, #372]	@ (80138e4 <gos_gcpReceiveMessage+0x294>)
 801376e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013772:	f107 0218 	add.w	r2, r7, #24
 8013776:	2110      	movs	r1, #16
 8013778:	4610      	mov	r0, r2
 801377a:	4798      	blx	r3
 801377c:	4603      	mov	r3, r0
 801377e:	2b55      	cmp	r3, #85	@ 0x55
 8013780:	f040 809b 	bne.w	80138ba <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 8013784:	2355      	movs	r3, #85	@ 0x55
 8013786:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 801378a:	e096      	b.n	80138ba <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 801378c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801378e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013792:	fbb2 f3f3 	udiv	r3, r2, r3
 8013796:	b29b      	uxth	r3, r3
 8013798:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 801379c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801379e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80137a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80137a6:	fb01 f202 	mul.w	r2, r1, r2
 80137aa:	1a9b      	subs	r3, r3, r2
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d004      	beq.n	80137bc <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 80137b2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80137b6:	3301      	adds	r3, #1
 80137b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80137bc:	2300      	movs	r3, #0
 80137be:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80137c2:	e04c      	b.n	801385e <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 80137c4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80137c8:	3301      	adds	r3, #1
 80137ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80137ce:	fb02 f303 	mul.w	r3, r2, r3
 80137d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80137d4:	4293      	cmp	r3, r2
 80137d6:	dd0b      	ble.n	80137f0 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 80137d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80137da:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80137de:	b29b      	uxth	r3, r3
 80137e0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80137e4:	fb11 f303 	smulbb	r3, r1, r3
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	1ad3      	subs	r3, r2, r3
 80137ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80137ee:	e002      	b.n	80137f6 <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 80137f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80137f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 80137f6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80137fa:	4a3a      	ldr	r2, [pc, #232]	@ (80138e4 <gos_gcpReceiveMessage+0x294>)
 80137fc:	00db      	lsls	r3, r3, #3
 80137fe:	4413      	add	r3, r2
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8013806:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 801380a:	fb01 f202 	mul.w	r2, r1, r2
 801380e:	4611      	mov	r1, r2
 8013810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013812:	440a      	add	r2, r1
 8013814:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 8013816:	4610      	mov	r0, r2
 8013818:	4798      	blx	r3
 801381a:	4603      	mov	r3, r0
 801381c:	2b55      	cmp	r3, #85	@ 0x55
 801381e:	d125      	bne.n	801386c <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 8013820:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8013822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013824:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 8013826:	2301      	movs	r3, #1
 8013828:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 801382a:	f107 0318 	add.w	r3, r7, #24
 801382e:	210c      	movs	r1, #12
 8013830:	4618      	mov	r0, r3
 8013832:	f002 fd4b 	bl	80162cc <gos_crcDriverGetCrc>
 8013836:	4603      	mov	r3, r0
 8013838:	627b      	str	r3, [r7, #36]	@ 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 801383a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801383e:	4a29      	ldr	r2, [pc, #164]	@ (80138e4 <gos_gcpReceiveMessage+0x294>)
 8013840:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013844:	f107 0218 	add.w	r2, r7, #24
 8013848:	2110      	movs	r1, #16
 801384a:	4610      	mov	r0, r2
 801384c:	4798      	blx	r3
 801384e:	4603      	mov	r3, r0
 8013850:	2b55      	cmp	r3, #85	@ 0x55
 8013852:	d10d      	bne.n	8013870 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8013854:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8013858:	3301      	adds	r3, #1
 801385a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 801385e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8013862:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8013866:	429a      	cmp	r2, r3
 8013868:	d3ac      	bcc.n	80137c4 <gos_gcpReceiveMessage+0x174>
 801386a:	e002      	b.n	8013872 <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 801386c:	bf00      	nop
 801386e:	e000      	b.n	8013872 <gos_gcpReceiveMessage+0x222>
                        	break;
 8013870:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 8013872:	f107 0217 	add.w	r2, r7, #23
 8013876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801387a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801387c:	4618      	mov	r0, r3
 801387e:	f000 f860 	bl	8013942 <gos_gcpValidateData>
 8013882:	4603      	mov	r3, r0
 8013884:	2b55      	cmp	r3, #85	@ 0x55
 8013886:	d118      	bne.n	80138ba <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 8013888:	2355      	movs	r3, #85	@ 0x55
 801388a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 801388e:	e014      	b.n	80138ba <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 8013890:	7dfb      	ldrb	r3, [r7, #23]
 8013892:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8013894:	f107 0318 	add.w	r3, r7, #24
 8013898:	210c      	movs	r1, #12
 801389a:	4618      	mov	r0, r3
 801389c:	f002 fd16 	bl	80162cc <gos_crcDriverGetCrc>
 80138a0:	4603      	mov	r3, r0
 80138a2:	627b      	str	r3, [r7, #36]	@ 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 80138a4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80138a8:	4a0e      	ldr	r2, [pc, #56]	@ (80138e4 <gos_gcpReceiveMessage+0x294>)
 80138aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80138ae:	f107 0218 	add.w	r2, r7, #24
 80138b2:	2110      	movs	r1, #16
 80138b4:	4610      	mov	r0, r2
 80138b6:	4798      	blx	r3
 80138b8:	e000      	b.n	80138bc <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 80138ba:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 80138bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 80138c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 80138c4:	7bfb      	ldrb	r3, [r7, #15]
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	4a05      	ldr	r2, [pc, #20]	@ (80138e0 <gos_gcpReceiveMessage+0x290>)
 80138ca:	4413      	add	r3, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f000 fbcd 	bl	801406c <gos_mutexUnlock>
    return receiveMessageResult;
 80138d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3750      	adds	r7, #80	@ 0x50
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	20005ee4 	.word	0x20005ee4
 80138e4:	20005edc 	.word	0x20005edc

080138e8 <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 80138f2:	23ae      	movs	r3, #174	@ 0xae
 80138f4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d01d      	beq.n	8013938 <gos_gcpValidateHeader+0x50>
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d01a      	beq.n	8013938 <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 8013902:	210c      	movs	r1, #12
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f002 fce1 	bl	80162cc <gos_crcDriverGetCrc>
 801390a:	4602      	mov	r2, r0
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	429a      	cmp	r2, r3
 8013912:	d10e      	bne.n	8013932 <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	781b      	ldrb	r3, [r3, #0]
 8013918:	2b02      	cmp	r3, #2
 801391a:	d106      	bne.n	801392a <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8013920:	2b00      	cmp	r3, #0
 8013922:	d102      	bne.n	801392a <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 8013924:	2355      	movs	r3, #85	@ 0x55
 8013926:	73fb      	strb	r3, [r7, #15]
 8013928:	e006      	b.n	8013938 <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	2205      	movs	r2, #5
 801392e:	701a      	strb	r2, [r3, #0]
 8013930:	e002      	b.n	8013938 <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	2202      	movs	r2, #2
 8013936:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8013938:	7bfb      	ldrb	r3, [r7, #15]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3710      	adds	r7, #16
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}

08013942 <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 8013942:	b580      	push	{r7, lr}
 8013944:	b086      	sub	sp, #24
 8013946:	af00      	add	r7, sp, #0
 8013948:	60f8      	str	r0, [r7, #12]
 801394a:	60b9      	str	r1, [r7, #8]
 801394c:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 801394e:	23ae      	movs	r3, #174	@ 0xae
 8013950:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d016      	beq.n	8013986 <gos_gcpValidateData+0x44>
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d013      	beq.n	8013986 <gos_gcpValidateData+0x44>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d010      	beq.n	8013986 <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	88db      	ldrh	r3, [r3, #6]
 8013968:	4619      	mov	r1, r3
 801396a:	68b8      	ldr	r0, [r7, #8]
 801396c:	f002 fcae 	bl	80162cc <gos_crcDriverGetCrc>
 8013970:	4602      	mov	r2, r0
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	689b      	ldr	r3, [r3, #8]
 8013976:	429a      	cmp	r2, r3
 8013978:	d102      	bne.n	8013980 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 801397a:	2355      	movs	r3, #85	@ 0x55
 801397c:	75fb      	strb	r3, [r7, #23]
 801397e:	e002      	b.n	8013986 <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2202      	movs	r2, #2
 8013984:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8013986:	7dfb      	ldrb	r3, [r7, #23]
}
 8013988:	4618      	mov	r0, r3
 801398a:	3718      	adds	r7, #24
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_ERROR;
 8013996:	23ae      	movs	r3, #174	@ 0xae
 8013998:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 801399a:	2300      	movs	r3, #0
 801399c:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 801399e:	2300      	movs	r3, #0
 80139a0:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 80139a2:	4b22      	ldr	r3, [pc, #136]	@ (8013a2c <gos_messageInit+0x9c>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 80139a8:	4b21      	ldr	r3, [pc, #132]	@ (8013a30 <gos_messageInit+0xa0>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80139ae:	2300      	movs	r3, #0
 80139b0:	71bb      	strb	r3, [r7, #6]
 80139b2:	e014      	b.n	80139de <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 80139b4:	79bb      	ldrb	r3, [r7, #6]
 80139b6:	4a1f      	ldr	r2, [pc, #124]	@ (8013a34 <gos_messageInit+0xa4>)
 80139b8:	2154      	movs	r1, #84	@ 0x54
 80139ba:	fb01 f303 	mul.w	r3, r1, r3
 80139be:	4413      	add	r3, r2
 80139c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80139c4:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 80139c6:	79bb      	ldrb	r3, [r7, #6]
 80139c8:	4a1a      	ldr	r2, [pc, #104]	@ (8013a34 <gos_messageInit+0xa4>)
 80139ca:	2154      	movs	r1, #84	@ 0x54
 80139cc:	fb01 f303 	mul.w	r3, r1, r3
 80139d0:	4413      	add	r3, r2
 80139d2:	3302      	adds	r3, #2
 80139d4:	2200      	movs	r2, #0
 80139d6:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80139d8:	79bb      	ldrb	r3, [r7, #6]
 80139da:	3301      	adds	r3, #1
 80139dc:	71bb      	strb	r3, [r7, #6]
 80139de:	79bb      	ldrb	r3, [r7, #6]
 80139e0:	2b0f      	cmp	r3, #15
 80139e2:	d9e7      	bls.n	80139b4 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80139e4:	2300      	movs	r3, #0
 80139e6:	717b      	strb	r3, [r7, #5]
 80139e8:	e009      	b.n	80139fe <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80139ea:	797b      	ldrb	r3, [r7, #5]
 80139ec:	4a12      	ldr	r2, [pc, #72]	@ (8013a38 <gos_messageInit+0xa8>)
 80139ee:	015b      	lsls	r3, r3, #5
 80139f0:	4413      	add	r3, r2
 80139f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80139f6:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80139f8:	797b      	ldrb	r3, [r7, #5]
 80139fa:	3301      	adds	r3, #1
 80139fc:	717b      	strb	r3, [r7, #5]
 80139fe:	797b      	ldrb	r3, [r7, #5]
 8013a00:	2b0f      	cmp	r3, #15
 8013a02:	d9f2      	bls.n	80139ea <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 8013a04:	480d      	ldr	r0, [pc, #52]	@ (8013a3c <gos_messageInit+0xac>)
 8013a06:	f000 fa11 	bl	8013e2c <gos_mutexInit>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b55      	cmp	r3, #85	@ 0x55
 8013a0e:	d108      	bne.n	8013a22 <gos_messageInit+0x92>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) == GOS_SUCCESS)
 8013a10:	490b      	ldr	r1, [pc, #44]	@ (8013a40 <gos_messageInit+0xb0>)
 8013a12:	480c      	ldr	r0, [pc, #48]	@ (8013a44 <gos_messageInit+0xb4>)
 8013a14:	f7fd fd38 	bl	8011488 <gos_taskRegister>
 8013a18:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 8013a1a:	2b55      	cmp	r3, #85	@ 0x55
 8013a1c:	d101      	bne.n	8013a22 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_SUCCESS;
 8013a1e:	2355      	movs	r3, #85	@ 0x55
 8013a20:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 8013a22:	79fb      	ldrb	r3, [r7, #7]
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}
 8013a2c:	2000662e 	.word	0x2000662e
 8013a30:	2000662f 	.word	0x2000662f
 8013a34:	20005eec 	.word	0x20005eec
 8013a38:	2000642c 	.word	0x2000642c
 8013a3c:	20006630 	.word	0x20006630
 8013a40:	2000662c 	.word	0x2000662c
 8013a44:	20000fb4 	.word	0x20000fb4

08013a48 <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 8013a48:	b590      	push	{r4, r7, lr}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	4613      	mov	r3, r2
 8013a54:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 8013a56:	23ae      	movs	r3, #174	@ 0xae
 8013a58:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 8013a5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013a5e:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8013a60:	2300      	movs	r3, #0
 8013a62:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 8013a64:	2300      	movs	r3, #0
 8013a66:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f000 80d9 	beq.w	8013c2a <gos_messageRx+0x1e2>
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	f000 80d5 	beq.w	8013c2a <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013a80:	f04f 31ff 	mov.w	r1, #4294967295
 8013a84:	486d      	ldr	r0, [pc, #436]	@ (8013c3c <gos_messageRx+0x1f4>)
 8013a86:	f000 f9eb 	bl	8013e60 <gos_mutexLock>
 8013a8a:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 8013a8c:	2b55      	cmp	r3, #85	@ 0x55
 8013a8e:	f040 80cc 	bne.w	8013c2a <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8013a92:	4b6b      	ldr	r3, [pc, #428]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	4a6b      	ldr	r2, [pc, #428]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013a98:	015b      	lsls	r3, r3, #5
 8013a9a:	4413      	add	r3, r2
 8013a9c:	881b      	ldrh	r3, [r3, #0]
 8013a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013aa2:	f040 80c2 	bne.w	8013c2a <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 8013aa6:	f107 0312 	add.w	r3, r7, #18
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7ff f892 	bl	8012bd4 <gos_taskGetCurrentId>
 8013ab0:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8013ab2:	2b55      	cmp	r3, #85	@ 0x55
 8013ab4:	f040 80b9 	bne.w	8013c2a <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 8013ab8:	4b61      	ldr	r3, [pc, #388]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	8a79      	ldrh	r1, [r7, #18]
 8013abe:	4a61      	ldr	r2, [pc, #388]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013ac0:	015b      	lsls	r3, r3, #5
 8013ac2:	4413      	add	r3, r2
 8013ac4:	460a      	mov	r2, r1
 8013ac6:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 8013ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	4a5d      	ldr	r2, [pc, #372]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013ace:	015b      	lsls	r3, r3, #5
 8013ad0:	4413      	add	r3, r2
 8013ad2:	3302      	adds	r3, #2
 8013ad4:	88fa      	ldrh	r2, [r7, #6]
 8013ad6:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 8013ad8:	4b59      	ldr	r3, [pc, #356]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	4a59      	ldr	r2, [pc, #356]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013ade:	015b      	lsls	r3, r3, #5
 8013ae0:	4413      	add	r3, r2
 8013ae2:	3304      	adds	r3, #4
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 8013ae8:	4b55      	ldr	r3, [pc, #340]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	4a55      	ldr	r2, [pc, #340]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013aee:	015b      	lsls	r3, r3, #5
 8013af0:	4413      	add	r3, r2
 8013af2:	3318      	adds	r3, #24
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 8013af8:	4b51      	ldr	r3, [pc, #324]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	4a51      	ldr	r2, [pc, #324]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013afe:	015b      	lsls	r3, r3, #5
 8013b00:	4413      	add	r3, r2
 8013b02:	331c      	adds	r3, #28
 8013b04:	2249      	movs	r2, #73	@ 0x49
 8013b06:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 8013b08:	4b4d      	ldr	r3, [pc, #308]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	015b      	lsls	r3, r3, #5
 8013b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013b10:	4413      	add	r3, r2
 8013b12:	3306      	adds	r3, #6
 8013b14:	2210      	movs	r2, #16
 8013b16:	2100      	movs	r1, #0
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f003 faaf 	bl	801707c <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013b1e:	2300      	movs	r3, #0
 8013b20:	757b      	strb	r3, [r7, #21]
 8013b22:	e019      	b.n	8013b58 <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 8013b24:	7d7b      	ldrb	r3, [r7, #21]
 8013b26:	005b      	lsls	r3, r3, #1
 8013b28:	68fa      	ldr	r2, [r7, #12]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	881b      	ldrh	r3, [r3, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d016      	beq.n	8013b60 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 8013b32:	7d7b      	ldrb	r3, [r7, #21]
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	441a      	add	r2, r3
 8013b3a:	4b41      	ldr	r3, [pc, #260]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	461c      	mov	r4, r3
 8013b40:	7d7b      	ldrb	r3, [r7, #21]
 8013b42:	8810      	ldrh	r0, [r2, #0]
 8013b44:	493f      	ldr	r1, [pc, #252]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013b46:	0122      	lsls	r2, r4, #4
 8013b48:	4413      	add	r3, r2
 8013b4a:	005b      	lsls	r3, r3, #1
 8013b4c:	440b      	add	r3, r1
 8013b4e:	4602      	mov	r2, r0
 8013b50:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013b52:	7d7b      	ldrb	r3, [r7, #21]
 8013b54:	3301      	adds	r3, #1
 8013b56:	757b      	strb	r3, [r7, #21]
 8013b58:	7d7b      	ldrb	r3, [r7, #21]
 8013b5a:	2b07      	cmp	r3, #7
 8013b5c:	d9e2      	bls.n	8013b24 <gos_messageRx+0xdc>
 8013b5e:	e000      	b.n	8013b62 <gos_messageRx+0x11a>
                    break;
 8013b60:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 8013b62:	4b37      	ldr	r3, [pc, #220]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8013b68:	2300      	movs	r3, #0
 8013b6a:	75bb      	strb	r3, [r7, #22]
 8013b6c:	e018      	b.n	8013ba0 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 8013b6e:	4b34      	ldr	r3, [pc, #208]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	3301      	adds	r3, #1
 8013b74:	b2da      	uxtb	r2, r3
 8013b76:	4b32      	ldr	r3, [pc, #200]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b78:	701a      	strb	r2, [r3, #0]
 8013b7a:	4b31      	ldr	r3, [pc, #196]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	2b10      	cmp	r3, #16
 8013b80:	d102      	bne.n	8013b88 <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 8013b82:	4b2f      	ldr	r3, [pc, #188]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 8013b88:	4b2d      	ldr	r3, [pc, #180]	@ (8013c40 <gos_messageRx+0x1f8>)
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013b8e:	015b      	lsls	r3, r3, #5
 8013b90:	4413      	add	r3, r2
 8013b92:	881b      	ldrh	r3, [r3, #0]
 8013b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013b98:	d006      	beq.n	8013ba8 <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8013b9a:	7dbb      	ldrb	r3, [r7, #22]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	75bb      	strb	r3, [r7, #22]
 8013ba0:	7dbb      	ldrb	r3, [r7, #22]
 8013ba2:	2b0f      	cmp	r3, #15
 8013ba4:	d9e3      	bls.n	8013b6e <gos_messageRx+0x126>
 8013ba6:	e000      	b.n	8013baa <gos_messageRx+0x162>
                {
                    break;
 8013ba8:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8013baa:	4824      	ldr	r0, [pc, #144]	@ (8013c3c <gos_messageRx+0x1f4>)
 8013bac:	f000 fa5e 	bl	801406c <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 8013bb0:	8a7b      	ldrh	r3, [r7, #18]
 8013bb2:	f107 0210 	add.w	r2, r7, #16
 8013bb6:	4611      	mov	r1, r2
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fe ff9b 	bl	8012af4 <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8013bbe:	8a3b      	ldrh	r3, [r7, #16]
 8013bc0:	b21b      	sxth	r3, r3
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	db12      	blt.n	8013bec <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8013bc6:	8a7b      	ldrh	r3, [r7, #18]
 8013bc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fe fe2d 	bl	801282c <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8013bd2:	8a7b      	ldrh	r3, [r7, #18]
 8013bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7fe f90f 	bl	8011dfc <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8013bde:	8a7b      	ldrh	r3, [r7, #18]
 8013be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7fe fe99 	bl	801291c <gos_taskRemovePrivilege>
 8013bea:	e005      	b.n	8013bf8 <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8013bec:	8a7b      	ldrh	r3, [r7, #18]
 8013bee:	f04f 31ff 	mov.w	r1, #4294967295
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe f902 	bl	8011dfc <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 8013bf8:	7d3b      	ldrb	r3, [r7, #20]
 8013bfa:	4a12      	ldr	r2, [pc, #72]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013bfc:	015b      	lsls	r3, r3, #5
 8013bfe:	4413      	add	r3, r2
 8013c00:	331c      	adds	r3, #28
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	2b36      	cmp	r3, #54	@ 0x36
 8013c06:	d102      	bne.n	8013c0e <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 8013c08:	2355      	movs	r3, #85	@ 0x55
 8013c0a:	75fb      	strb	r3, [r7, #23]
 8013c0c:	e006      	b.n	8013c1c <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8013c0e:	7d3b      	ldrb	r3, [r7, #20]
 8013c10:	4a0c      	ldr	r2, [pc, #48]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013c12:	015b      	lsls	r3, r3, #5
 8013c14:	4413      	add	r3, r2
 8013c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013c1a:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 8013c1c:	7d3b      	ldrb	r3, [r7, #20]
 8013c1e:	4a09      	ldr	r2, [pc, #36]	@ (8013c44 <gos_messageRx+0x1fc>)
 8013c20:	015b      	lsls	r3, r3, #5
 8013c22:	4413      	add	r3, r2
 8013c24:	331c      	adds	r3, #28
 8013c26:	2249      	movs	r2, #73	@ 0x49
 8013c28:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8013c2a:	4804      	ldr	r0, [pc, #16]	@ (8013c3c <gos_messageRx+0x1f4>)
 8013c2c:	f000 fa1e 	bl	801406c <gos_mutexUnlock>

    return messageRxResult;
 8013c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	371c      	adds	r7, #28
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd90      	pop	{r4, r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20006630 	.word	0x20006630
 8013c40:	2000662f 	.word	0x2000662f
 8013c44:	2000642c 	.word	0x2000642c

08013c48 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8013c48:	b590      	push	{r4, r7, lr}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8013c52:	2300      	movs	r3, #0
 8013c54:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8013c56:	2300      	movs	r3, #0
 8013c58:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8013c5e:	4870      	ldr	r0, [pc, #448]	@ (8013e20 <gos_messageDaemonTask+0x1d8>)
 8013c60:	f000 f8fe 	bl	8013e60 <gos_mutexLock>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b55      	cmp	r3, #85	@ 0x55
 8013c68:	f040 80d5 	bne.w	8013e16 <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	71bb      	strb	r3, [r7, #6]
 8013c70:	e0ca      	b.n	8013e08 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 8013c72:	79bb      	ldrb	r3, [r7, #6]
 8013c74:	4a6b      	ldr	r2, [pc, #428]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013c76:	015b      	lsls	r3, r3, #5
 8013c78:	4413      	add	r3, r2
 8013c7a:	881b      	ldrh	r3, [r3, #0]
 8013c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c80:	f000 80bf 	beq.w	8013e02 <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013c84:	2300      	movs	r3, #0
 8013c86:	717b      	strb	r3, [r7, #5]
 8013c88:	e077      	b.n	8013d7a <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	71fb      	strb	r3, [r7, #7]
 8013c8e:	e06e      	b.n	8013d6e <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8013c90:	79ba      	ldrb	r2, [r7, #6]
 8013c92:	797b      	ldrb	r3, [r7, #5]
 8013c94:	4963      	ldr	r1, [pc, #396]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013c96:	0112      	lsls	r2, r2, #4
 8013c98:	4413      	add	r3, r2
 8013c9a:	005b      	lsls	r3, r3, #1
 8013c9c:	440b      	add	r3, r1
 8013c9e:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 8013ca0:	79fb      	ldrb	r3, [r7, #7]
 8013ca2:	4961      	ldr	r1, [pc, #388]	@ (8013e28 <gos_messageDaemonTask+0x1e0>)
 8013ca4:	2054      	movs	r0, #84	@ 0x54
 8013ca6:	fb00 f303 	mul.w	r3, r0, r3
 8013caa:	440b      	add	r3, r1
 8013cac:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d15a      	bne.n	8013d68 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8013cb2:	79bb      	ldrb	r3, [r7, #6]
 8013cb4:	4a5b      	ldr	r2, [pc, #364]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013cb6:	015b      	lsls	r3, r3, #5
 8013cb8:	4413      	add	r3, r2
 8013cba:	3318      	adds	r3, #24
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 8013cc0:	79fb      	ldrb	r3, [r7, #7]
 8013cc2:	2254      	movs	r2, #84	@ 0x54
 8013cc4:	fb02 f303 	mul.w	r3, r2, r3
 8013cc8:	4a57      	ldr	r2, [pc, #348]	@ (8013e28 <gos_messageDaemonTask+0x1e0>)
 8013cca:	4413      	add	r3, r2
 8013ccc:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 8013cce:	79fb      	ldrb	r3, [r7, #7]
 8013cd0:	4a55      	ldr	r2, [pc, #340]	@ (8013e28 <gos_messageDaemonTask+0x1e0>)
 8013cd2:	2454      	movs	r4, #84	@ 0x54
 8013cd4:	fb04 f303 	mul.w	r3, r4, r3
 8013cd8:	4413      	add	r3, r2
 8013cda:	3302      	adds	r3, #2
 8013cdc:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8013cde:	461a      	mov	r2, r3
 8013ce0:	f003 fa63 	bl	80171aa <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 8013ce4:	79fa      	ldrb	r2, [r7, #7]
 8013ce6:	79bb      	ldrb	r3, [r7, #6]
 8013ce8:	494e      	ldr	r1, [pc, #312]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013cea:	015b      	lsls	r3, r3, #5
 8013cec:	440b      	add	r3, r1
 8013cee:	3318      	adds	r3, #24
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	494d      	ldr	r1, [pc, #308]	@ (8013e28 <gos_messageDaemonTask+0x1e0>)
 8013cf4:	2054      	movs	r0, #84	@ 0x54
 8013cf6:	fb00 f202 	mul.w	r2, r0, r2
 8013cfa:	440a      	add	r2, r1
 8013cfc:	3202      	adds	r2, #2
 8013cfe:	7812      	ldrb	r2, [r2, #0]
 8013d00:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 8013d02:	79fa      	ldrb	r2, [r7, #7]
 8013d04:	79bb      	ldrb	r3, [r7, #6]
 8013d06:	4947      	ldr	r1, [pc, #284]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013d08:	015b      	lsls	r3, r3, #5
 8013d0a:	440b      	add	r3, r1
 8013d0c:	3318      	adds	r3, #24
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	4945      	ldr	r1, [pc, #276]	@ (8013e28 <gos_messageDaemonTask+0x1e0>)
 8013d12:	2054      	movs	r0, #84	@ 0x54
 8013d14:	fb00 f202 	mul.w	r2, r0, r2
 8013d18:	440a      	add	r2, r1
 8013d1a:	8812      	ldrh	r2, [r2, #0]
 8013d1c:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8013d1e:	79bb      	ldrb	r3, [r7, #6]
 8013d20:	4a40      	ldr	r2, [pc, #256]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013d22:	015b      	lsls	r3, r3, #5
 8013d24:	4413      	add	r3, r2
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7fe f979 	bl	8012020 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8013d2e:	79fb      	ldrb	r3, [r7, #7]
 8013d30:	4a3d      	ldr	r2, [pc, #244]	@ (8013e28 <gos_messageDaemonTask+0x1e0>)
 8013d32:	2154      	movs	r1, #84	@ 0x54
 8013d34:	fb01 f303 	mul.w	r3, r1, r3
 8013d38:	4413      	add	r3, r2
 8013d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d3e:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8013d40:	79bb      	ldrb	r3, [r7, #6]
 8013d42:	4a38      	ldr	r2, [pc, #224]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013d44:	015b      	lsls	r3, r3, #5
 8013d46:	4413      	add	r3, r2
 8013d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013d4c:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 8013d4e:	79bb      	ldrb	r3, [r7, #6]
 8013d50:	4a34      	ldr	r2, [pc, #208]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013d52:	015b      	lsls	r3, r3, #5
 8013d54:	4413      	add	r3, r2
 8013d56:	331c      	adds	r3, #28
 8013d58:	2236      	movs	r2, #54	@ 0x36
 8013d5a:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 8013d5c:	2310      	movs	r3, #16
 8013d5e:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 8013d60:	2308      	movs	r3, #8
 8013d62:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 8013d64:	2310      	movs	r3, #16
 8013d66:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8013d68:	79fb      	ldrb	r3, [r7, #7]
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	71fb      	strb	r3, [r7, #7]
 8013d6e:	79fb      	ldrb	r3, [r7, #7]
 8013d70:	2b0f      	cmp	r3, #15
 8013d72:	d98d      	bls.n	8013c90 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8013d74:	797b      	ldrb	r3, [r7, #5]
 8013d76:	3301      	adds	r3, #1
 8013d78:	717b      	strb	r3, [r7, #5]
 8013d7a:	797b      	ldrb	r3, [r7, #5]
 8013d7c:	2b07      	cmp	r3, #7
 8013d7e:	d984      	bls.n	8013c8a <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8013d80:	79bb      	ldrb	r3, [r7, #6]
 8013d82:	4a28      	ldr	r2, [pc, #160]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013d84:	015b      	lsls	r3, r3, #5
 8013d86:	4413      	add	r3, r2
 8013d88:	331c      	adds	r3, #28
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	2b49      	cmp	r3, #73	@ 0x49
 8013d8e:	d138      	bne.n	8013e02 <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 8013d90:	79bb      	ldrb	r3, [r7, #6]
 8013d92:	4a24      	ldr	r2, [pc, #144]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013d94:	015b      	lsls	r3, r3, #5
 8013d96:	4413      	add	r3, r2
 8013d98:	3302      	adds	r3, #2
 8013d9a:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8013d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d02e      	beq.n	8013e02 <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 8013da4:	79bb      	ldrb	r3, [r7, #6]
 8013da6:	491f      	ldr	r1, [pc, #124]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013da8:	015a      	lsls	r2, r3, #5
 8013daa:	440a      	add	r2, r1
 8013dac:	3204      	adds	r2, #4
 8013dae:	8812      	ldrh	r2, [r2, #0]
 8013db0:	3201      	adds	r2, #1
 8013db2:	b291      	uxth	r1, r2
 8013db4:	4a1b      	ldr	r2, [pc, #108]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013db6:	015b      	lsls	r3, r3, #5
 8013db8:	4413      	add	r3, r2
 8013dba:	3304      	adds	r3, #4
 8013dbc:	460a      	mov	r2, r1
 8013dbe:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8013dc0:	79bb      	ldrb	r3, [r7, #6]
 8013dc2:	4a18      	ldr	r2, [pc, #96]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013dc4:	015b      	lsls	r3, r3, #5
 8013dc6:	4413      	add	r3, r2
 8013dc8:	3304      	adds	r3, #4
 8013dca:	881b      	ldrh	r3, [r3, #0]
 8013dcc:	461a      	mov	r2, r3
 8013dce:	2332      	movs	r3, #50	@ 0x32
 8013dd0:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 8013dd4:	79ba      	ldrb	r2, [r7, #6]
 8013dd6:	4913      	ldr	r1, [pc, #76]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013dd8:	0152      	lsls	r2, r2, #5
 8013dda:	440a      	add	r2, r1
 8013ddc:	3202      	adds	r2, #2
 8013dde:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8013de0:	4293      	cmp	r3, r2
 8013de2:	d90e      	bls.n	8013e02 <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8013de4:	79bb      	ldrb	r3, [r7, #6]
 8013de6:	4a0f      	ldr	r2, [pc, #60]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013de8:	015b      	lsls	r3, r3, #5
 8013dea:	4413      	add	r3, r2
 8013dec:	881b      	ldrh	r3, [r3, #0]
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7fe f916 	bl	8012020 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8013df4:	79bb      	ldrb	r3, [r7, #6]
 8013df6:	4a0b      	ldr	r2, [pc, #44]	@ (8013e24 <gos_messageDaemonTask+0x1dc>)
 8013df8:	015b      	lsls	r3, r3, #5
 8013dfa:	4413      	add	r3, r2
 8013dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013e00:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8013e02:	79bb      	ldrb	r3, [r7, #6]
 8013e04:	3301      	adds	r3, #1
 8013e06:	71bb      	strb	r3, [r7, #6]
 8013e08:	79bb      	ldrb	r3, [r7, #6]
 8013e0a:	2b0f      	cmp	r3, #15
 8013e0c:	f67f af31 	bls.w	8013c72 <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8013e10:	4803      	ldr	r0, [pc, #12]	@ (8013e20 <gos_messageDaemonTask+0x1d8>)
 8013e12:	f000 f92b 	bl	801406c <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 8013e16:	2032      	movs	r0, #50	@ 0x32
 8013e18:	f7fd fcc8 	bl	80117ac <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8013e1c:	e71d      	b.n	8013c5a <gos_messageDaemonTask+0x12>
 8013e1e:	bf00      	nop
 8013e20:	20006630 	.word	0x20006630
 8013e24:	2000642c 	.word	0x2000642c
 8013e28:	20005eec 	.word	0x20005eec

08013e2c <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b085      	sub	sp, #20
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 8013e34:	23ae      	movs	r3, #174	@ 0xae
 8013e36:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d008      	beq.n	8013e50 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	22d2      	movs	r2, #210	@ 0xd2
 8013e42:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013e4a:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 8013e4c:	2355      	movs	r3, #85	@ 0x55
 8013e4e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 8013e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3714      	adds	r7, #20
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr
	...

08013e60 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 8013e6a:	23ae      	movs	r3, #174	@ 0xae
 8013e6c:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 8013e6e:	f7fc fae7 	bl	8010440 <gos_kernelGetSysTicks>
 8013e72:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 8013e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013e78:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 8013e7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013e7e:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 8013e80:	23ff      	movs	r3, #255	@ 0xff
 8013e82:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 8013e84:	23ff      	movs	r3, #255	@ 0xff
 8013e86:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 8013e88:	2349      	movs	r3, #73	@ 0x49
 8013e8a:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8013e8c:	e0ce      	b.n	801402c <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 8013e8e:	4b73      	ldr	r3, [pc, #460]	@ (801405c <gos_mutexLock+0x1fc>)
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d108      	bne.n	8013ea8 <gos_mutexLock+0x48>
 8013e96:	b672      	cpsid	i
 8013e98:	f3ef 8310 	mrs	r3, PRIMASK
 8013e9c:	4a70      	ldr	r2, [pc, #448]	@ (8014060 <gos_mutexLock+0x200>)
 8013e9e:	6013      	str	r3, [r2, #0]
 8013ea0:	f3bf 8f4f 	dsb	sy
 8013ea4:	f3bf 8f6f 	isb	sy
 8013ea8:	4b6c      	ldr	r3, [pc, #432]	@ (801405c <gos_mutexLock+0x1fc>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	3301      	adds	r3, #1
 8013eae:	b2da      	uxtb	r2, r3
 8013eb0:	4b6a      	ldr	r3, [pc, #424]	@ (801405c <gos_mutexLock+0x1fc>)
 8013eb2:	701a      	strb	r2, [r3, #0]
 8013eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8014064 <gos_mutexLock+0x204>)
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	3301      	adds	r3, #1
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	4b69      	ldr	r3, [pc, #420]	@ (8014064 <gos_mutexLock+0x204>)
 8013ebe:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	2bd2      	cmp	r3, #210	@ 0xd2
 8013ec6:	d13b      	bne.n	8013f40 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 8013ec8:	7cfb      	ldrb	r3, [r7, #19]
 8013eca:	2b36      	cmp	r3, #54	@ 0x36
 8013ecc:	d12d      	bne.n	8013f2a <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8013ece:	4b66      	ldr	r3, [pc, #408]	@ (8014068 <gos_mutexLock+0x208>)
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d105      	bne.n	8013ee2 <gos_mutexLock+0x82>
 8013ed6:	4b63      	ldr	r3, [pc, #396]	@ (8014064 <gos_mutexLock+0x204>)
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	3301      	adds	r3, #1
 8013edc:	b2da      	uxtb	r2, r3
 8013ede:	4b61      	ldr	r3, [pc, #388]	@ (8014064 <gos_mutexLock+0x204>)
 8013ee0:	701a      	strb	r2, [r3, #0]
 8013ee2:	4b61      	ldr	r3, [pc, #388]	@ (8014068 <gos_mutexLock+0x208>)
 8013ee4:	781b      	ldrb	r3, [r3, #0]
 8013ee6:	3301      	adds	r3, #1
 8013ee8:	b2da      	uxtb	r2, r3
 8013eea:	4b5f      	ldr	r3, [pc, #380]	@ (8014068 <gos_mutexLock+0x208>)
 8013eec:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 8013eee:	7a7a      	ldrb	r2, [r7, #9]
 8013ef0:	8abb      	ldrh	r3, [r7, #20]
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fe faa1 	bl	801243c <gos_taskSetPriority>
                GOS_ISR_EXIT
 8013efa:	4b5b      	ldr	r3, [pc, #364]	@ (8014068 <gos_mutexLock+0x208>)
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d005      	beq.n	8013f0e <gos_mutexLock+0xae>
 8013f02:	4b59      	ldr	r3, [pc, #356]	@ (8014068 <gos_mutexLock+0x208>)
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	3b01      	subs	r3, #1
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	4b57      	ldr	r3, [pc, #348]	@ (8014068 <gos_mutexLock+0x208>)
 8013f0c:	701a      	strb	r2, [r3, #0]
 8013f0e:	4b56      	ldr	r3, [pc, #344]	@ (8014068 <gos_mutexLock+0x208>)
 8013f10:	781b      	ldrb	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d109      	bne.n	8013f2a <gos_mutexLock+0xca>
 8013f16:	4b53      	ldr	r3, [pc, #332]	@ (8014064 <gos_mutexLock+0x204>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d005      	beq.n	8013f2a <gos_mutexLock+0xca>
 8013f1e:	4b51      	ldr	r3, [pc, #324]	@ (8014064 <gos_mutexLock+0x204>)
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	3b01      	subs	r3, #1
 8013f24:	b2da      	uxtb	r2, r3
 8013f26:	4b4f      	ldr	r3, [pc, #316]	@ (8014064 <gos_mutexLock+0x204>)
 8013f28:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	226b      	movs	r2, #107	@ 0x6b
 8013f2e:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	3302      	adds	r3, #2
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fe fe4d 	bl	8012bd4 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 8013f3a:	2355      	movs	r3, #85	@ 0x55
 8013f3c:	75fb      	strb	r3, [r7, #23]
 8013f3e:	e04b      	b.n	8013fd8 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	885b      	ldrh	r3, [r3, #2]
 8013f44:	f107 0209 	add.w	r2, r7, #9
 8013f48:	4611      	mov	r1, r2
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fe fbfe 	bl	801274c <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 8013f50:	f107 030a 	add.w	r3, r7, #10
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7fe fe3d 	bl	8012bd4 <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 8013f5a:	897b      	ldrh	r3, [r7, #10]
 8013f5c:	f107 0208 	add.w	r2, r7, #8
 8013f60:	4611      	mov	r1, r2
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7fe fbf2 	bl	801274c <gos_taskGetPriority>
            ownerId = pMutex->owner;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	885b      	ldrh	r3, [r3, #2]
 8013f6c:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 8013f6e:	7a3a      	ldrb	r2, [r7, #8]
 8013f70:	7a7b      	ldrb	r3, [r7, #9]
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d230      	bcs.n	8013fd8 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8013f76:	4b3c      	ldr	r3, [pc, #240]	@ (8014068 <gos_mutexLock+0x208>)
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d105      	bne.n	8013f8a <gos_mutexLock+0x12a>
 8013f7e:	4b39      	ldr	r3, [pc, #228]	@ (8014064 <gos_mutexLock+0x204>)
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	3301      	adds	r3, #1
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	4b37      	ldr	r3, [pc, #220]	@ (8014064 <gos_mutexLock+0x204>)
 8013f88:	701a      	strb	r2, [r3, #0]
 8013f8a:	4b37      	ldr	r3, [pc, #220]	@ (8014068 <gos_mutexLock+0x208>)
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	b2da      	uxtb	r2, r3
 8013f92:	4b35      	ldr	r3, [pc, #212]	@ (8014068 <gos_mutexLock+0x208>)
 8013f94:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	885b      	ldrh	r3, [r3, #2]
 8013f9a:	7a3a      	ldrb	r2, [r7, #8]
 8013f9c:	4611      	mov	r1, r2
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fe fa4c 	bl	801243c <gos_taskSetPriority>
                GOS_ISR_EXIT
 8013fa4:	4b30      	ldr	r3, [pc, #192]	@ (8014068 <gos_mutexLock+0x208>)
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d005      	beq.n	8013fb8 <gos_mutexLock+0x158>
 8013fac:	4b2e      	ldr	r3, [pc, #184]	@ (8014068 <gos_mutexLock+0x208>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	b2da      	uxtb	r2, r3
 8013fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8014068 <gos_mutexLock+0x208>)
 8013fb6:	701a      	strb	r2, [r3, #0]
 8013fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8014068 <gos_mutexLock+0x208>)
 8013fba:	781b      	ldrb	r3, [r3, #0]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d109      	bne.n	8013fd4 <gos_mutexLock+0x174>
 8013fc0:	4b28      	ldr	r3, [pc, #160]	@ (8014064 <gos_mutexLock+0x204>)
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d005      	beq.n	8013fd4 <gos_mutexLock+0x174>
 8013fc8:	4b26      	ldr	r3, [pc, #152]	@ (8014064 <gos_mutexLock+0x204>)
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	3b01      	subs	r3, #1
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	4b24      	ldr	r3, [pc, #144]	@ (8014064 <gos_mutexLock+0x204>)
 8013fd2:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 8013fd4:	2336      	movs	r3, #54	@ 0x36
 8013fd6:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 8013fd8:	4b20      	ldr	r3, [pc, #128]	@ (801405c <gos_mutexLock+0x1fc>)
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d005      	beq.n	8013fec <gos_mutexLock+0x18c>
 8013fe0:	4b1e      	ldr	r3, [pc, #120]	@ (801405c <gos_mutexLock+0x1fc>)
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	3b01      	subs	r3, #1
 8013fe6:	b2da      	uxtb	r2, r3
 8013fe8:	4b1c      	ldr	r3, [pc, #112]	@ (801405c <gos_mutexLock+0x1fc>)
 8013fea:	701a      	strb	r2, [r3, #0]
 8013fec:	4b1b      	ldr	r3, [pc, #108]	@ (801405c <gos_mutexLock+0x1fc>)
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d108      	bne.n	8014006 <gos_mutexLock+0x1a6>
 8013ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8014060 <gos_mutexLock+0x200>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	f383 8810 	msr	PRIMASK, r3
 8013ffc:	b662      	cpsie	i
 8013ffe:	f3bf 8f4f 	dsb	sy
 8014002:	f3bf 8f6f 	isb	sy
 8014006:	4b17      	ldr	r3, [pc, #92]	@ (8014064 <gos_mutexLock+0x204>)
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d005      	beq.n	801401a <gos_mutexLock+0x1ba>
 801400e:	4b15      	ldr	r3, [pc, #84]	@ (8014064 <gos_mutexLock+0x204>)
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	3b01      	subs	r3, #1
 8014014:	b2da      	uxtb	r2, r3
 8014016:	4b13      	ldr	r3, [pc, #76]	@ (8014064 <gos_mutexLock+0x204>)
 8014018:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 801401a:	7dfb      	ldrb	r3, [r7, #23]
 801401c:	2b55      	cmp	r3, #85	@ 0x55
 801401e:	d017      	beq.n	8014050 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d002      	beq.n	801402c <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 8014026:	2002      	movs	r0, #2
 8014028:	f7fd fbc0 	bl	80117ac <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d00f      	beq.n	8014052 <gos_mutexLock+0x1f2>
 8014032:	f7fc fa05 	bl	8010440 <gos_kernelGetSysTicks>
 8014036:	4602      	mov	r2, r0
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	683a      	ldr	r2, [r7, #0]
 801403e:	429a      	cmp	r2, r3
 8014040:	f4bf af25 	bcs.w	8013e8e <gos_mutexLock+0x2e>
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801404a:	f43f af20 	beq.w	8013e8e <gos_mutexLock+0x2e>
 801404e:	e000      	b.n	8014052 <gos_mutexLock+0x1f2>
            break;
 8014050:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 8014052:	7dfb      	ldrb	r3, [r7, #23]
}
 8014054:	4618      	mov	r0, r3
 8014056:	3718      	adds	r7, #24
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	20005e53 	.word	0x20005e53
 8014060:	20005e54 	.word	0x20005e54
 8014064:	20005e51 	.word	0x20005e51
 8014068:	20005e52 	.word	0x20005e52

0801406c <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 8014074:	23ae      	movs	r3, #174	@ 0xae
 8014076:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 8014078:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801407c:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d04c      	beq.n	801411e <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 8014084:	4b28      	ldr	r3, [pc, #160]	@ (8014128 <gos_mutexUnlock+0xbc>)
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d108      	bne.n	801409e <gos_mutexUnlock+0x32>
 801408c:	b672      	cpsid	i
 801408e:	f3ef 8310 	mrs	r3, PRIMASK
 8014092:	4a26      	ldr	r2, [pc, #152]	@ (801412c <gos_mutexUnlock+0xc0>)
 8014094:	6013      	str	r3, [r2, #0]
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	f3bf 8f6f 	isb	sy
 801409e:	4b22      	ldr	r3, [pc, #136]	@ (8014128 <gos_mutexUnlock+0xbc>)
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	3301      	adds	r3, #1
 80140a4:	b2da      	uxtb	r2, r3
 80140a6:	4b20      	ldr	r3, [pc, #128]	@ (8014128 <gos_mutexUnlock+0xbc>)
 80140a8:	701a      	strb	r2, [r3, #0]
 80140aa:	4b21      	ldr	r3, [pc, #132]	@ (8014130 <gos_mutexUnlock+0xc4>)
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	3301      	adds	r3, #1
 80140b0:	b2da      	uxtb	r2, r3
 80140b2:	4b1f      	ldr	r3, [pc, #124]	@ (8014130 <gos_mutexUnlock+0xc4>)
 80140b4:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 80140b6:	f107 030c 	add.w	r3, r7, #12
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fe fd8a 	bl	8012bd4 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	885a      	ldrh	r2, [r3, #2]
 80140c4:	89bb      	ldrh	r3, [r7, #12]
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d108      	bne.n	80140dc <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	22d2      	movs	r2, #210	@ 0xd2
 80140ce:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80140d6:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 80140d8:	2355      	movs	r3, #85	@ 0x55
 80140da:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 80140dc:	4b12      	ldr	r3, [pc, #72]	@ (8014128 <gos_mutexUnlock+0xbc>)
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d005      	beq.n	80140f0 <gos_mutexUnlock+0x84>
 80140e4:	4b10      	ldr	r3, [pc, #64]	@ (8014128 <gos_mutexUnlock+0xbc>)
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	3b01      	subs	r3, #1
 80140ea:	b2da      	uxtb	r2, r3
 80140ec:	4b0e      	ldr	r3, [pc, #56]	@ (8014128 <gos_mutexUnlock+0xbc>)
 80140ee:	701a      	strb	r2, [r3, #0]
 80140f0:	4b0d      	ldr	r3, [pc, #52]	@ (8014128 <gos_mutexUnlock+0xbc>)
 80140f2:	781b      	ldrb	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d108      	bne.n	801410a <gos_mutexUnlock+0x9e>
 80140f8:	4b0c      	ldr	r3, [pc, #48]	@ (801412c <gos_mutexUnlock+0xc0>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f383 8810 	msr	PRIMASK, r3
 8014100:	b662      	cpsie	i
 8014102:	f3bf 8f4f 	dsb	sy
 8014106:	f3bf 8f6f 	isb	sy
 801410a:	4b09      	ldr	r3, [pc, #36]	@ (8014130 <gos_mutexUnlock+0xc4>)
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d005      	beq.n	801411e <gos_mutexUnlock+0xb2>
 8014112:	4b07      	ldr	r3, [pc, #28]	@ (8014130 <gos_mutexUnlock+0xc4>)
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	3b01      	subs	r3, #1
 8014118:	b2da      	uxtb	r2, r3
 801411a:	4b05      	ldr	r3, [pc, #20]	@ (8014130 <gos_mutexUnlock+0xc4>)
 801411c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 801411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014120:	4618      	mov	r0, r3
 8014122:	3710      	adds	r7, #16
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	20005e53 	.word	0x20005e53
 801412c:	20005e54 	.word	0x20005e54
 8014130:	20005e51 	.word	0x20005e51

08014134 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_ERROR;
 801413a:	23ae      	movs	r3, #174	@ 0xae
 801413c:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 801413e:	2300      	movs	r3, #0
 8014140:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 8014142:	2300      	movs	r3, #0
 8014144:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014146:	2300      	movs	r3, #0
 8014148:	71fb      	strb	r3, [r7, #7]
 801414a:	e038      	b.n	80141be <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 801414c:	79fb      	ldrb	r3, [r7, #7]
 801414e:	4a22      	ldr	r2, [pc, #136]	@ (80141d8 <gos_queueInit+0xa4>)
 8014150:	2100      	movs	r1, #0
 8014152:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 8014154:	79fb      	ldrb	r3, [r7, #7]
 8014156:	4a21      	ldr	r2, [pc, #132]	@ (80141dc <gos_queueInit+0xa8>)
 8014158:	2100      	movs	r1, #0
 801415a:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 801415c:	79fb      	ldrb	r3, [r7, #7]
 801415e:	4a20      	ldr	r2, [pc, #128]	@ (80141e0 <gos_queueInit+0xac>)
 8014160:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014164:	fb01 f303 	mul.w	r3, r1, r3
 8014168:	4413      	add	r3, r2
 801416a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 801416e:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 8014170:	79fb      	ldrb	r3, [r7, #7]
 8014172:	4a1b      	ldr	r2, [pc, #108]	@ (80141e0 <gos_queueInit+0xac>)
 8014174:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014178:	fb01 f303 	mul.w	r3, r1, r3
 801417c:	4413      	add	r3, r2
 801417e:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014182:	3308      	adds	r3, #8
 8014184:	2200      	movs	r2, #0
 8014186:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8014188:	2300      	movs	r3, #0
 801418a:	71bb      	strb	r3, [r7, #6]
 801418c:	e011      	b.n	80141b2 <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 801418e:	79fb      	ldrb	r3, [r7, #7]
 8014190:	79ba      	ldrb	r2, [r7, #6]
 8014192:	4913      	ldr	r1, [pc, #76]	@ (80141e0 <gos_queueInit+0xac>)
 8014194:	20c9      	movs	r0, #201	@ 0xc9
 8014196:	fb00 f202 	mul.w	r2, r0, r2
 801419a:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 801419e:	fb00 f303 	mul.w	r3, r0, r3
 80141a2:	4413      	add	r3, r2
 80141a4:	440b      	add	r3, r1
 80141a6:	33e2      	adds	r3, #226	@ 0xe2
 80141a8:	2200      	movs	r2, #0
 80141aa:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 80141ac:	79bb      	ldrb	r3, [r7, #6]
 80141ae:	3301      	adds	r3, #1
 80141b0:	71bb      	strb	r3, [r7, #6]
 80141b2:	79bb      	ldrb	r3, [r7, #6]
 80141b4:	2b1d      	cmp	r3, #29
 80141b6:	d9ea      	bls.n	801418e <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80141b8:	79fb      	ldrb	r3, [r7, #7]
 80141ba:	3301      	adds	r3, #1
 80141bc:	71fb      	strb	r3, [r7, #7]
 80141be:	79fb      	ldrb	r3, [r7, #7]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d0c3      	beq.n	801414c <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 80141c4:	4807      	ldr	r0, [pc, #28]	@ (80141e4 <gos_queueInit+0xb0>)
 80141c6:	f7ff fe31 	bl	8013e2c <gos_mutexInit>
 80141ca:	4603      	mov	r3, r0
 80141cc:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 80141ce:	797b      	ldrb	r3, [r7, #5]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	20007de0 	.word	0x20007de0
 80141dc:	20007de4 	.word	0x20007de4
 80141e0:	20006634 	.word	0x20006634
 80141e4:	20007de8 	.word	0x20007de8

080141e8 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b084      	sub	sp, #16
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 80141f0:	23ae      	movs	r3, #174	@ 0xae
 80141f2:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 80141f4:	2300      	movs	r3, #0
 80141f6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d048      	beq.n	8014290 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80141fe:	2300      	movs	r3, #0
 8014200:	73bb      	strb	r3, [r7, #14]
 8014202:	e042      	b.n	801428a <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8014204:	7bbb      	ldrb	r3, [r7, #14]
 8014206:	4a25      	ldr	r2, [pc, #148]	@ (801429c <gos_queueCreate+0xb4>)
 8014208:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801420c:	fb01 f303 	mul.w	r3, r1, r3
 8014210:	4413      	add	r3, r2
 8014212:	881b      	ldrh	r3, [r3, #0]
 8014214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014218:	d134      	bne.n	8014284 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 801421a:	7bbb      	ldrb	r3, [r7, #14]
 801421c:	b29a      	uxth	r2, r3
 801421e:	7bbb      	ldrb	r3, [r7, #14]
 8014220:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8014224:	b290      	uxth	r0, r2
 8014226:	4a1d      	ldr	r2, [pc, #116]	@ (801429c <gos_queueCreate+0xb4>)
 8014228:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801422c:	fb01 f303 	mul.w	r3, r1, r3
 8014230:	4413      	add	r3, r2
 8014232:	4602      	mov	r2, r0
 8014234:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 8014236:	7bbb      	ldrb	r3, [r7, #14]
 8014238:	4a18      	ldr	r2, [pc, #96]	@ (801429c <gos_queueCreate+0xb4>)
 801423a:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801423e:	fb01 f303 	mul.w	r3, r1, r3
 8014242:	4413      	add	r3, r2
 8014244:	881a      	ldrh	r2, [r3, #0]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	3302      	adds	r3, #2
 801424e:	2b00      	cmp	r3, #0
 8014250:	d015      	beq.n	801427e <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	3302      	adds	r3, #2
 8014256:	4618      	mov	r0, r3
 8014258:	f7ec f82a 	bl	80002b0 <strlen>
 801425c:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 801425e:	2b18      	cmp	r3, #24
 8014260:	d80d      	bhi.n	801427e <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 8014262:	7bbb      	ldrb	r3, [r7, #14]
 8014264:	f241 72aa 	movw	r2, #6058	@ 0x17aa
 8014268:	fb02 f303 	mul.w	r3, r2, r3
 801426c:	4a0b      	ldr	r2, [pc, #44]	@ (801429c <gos_queueCreate+0xb4>)
 801426e:	4413      	add	r3, r2
 8014270:	1c9a      	adds	r2, r3, #2
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	3302      	adds	r3, #2
 8014276:	4619      	mov	r1, r3
 8014278:	4610      	mov	r0, r2
 801427a:	f002 ff8e 	bl	801719a <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 801427e:	2355      	movs	r3, #85	@ 0x55
 8014280:	73fb      	strb	r3, [r7, #15]
                break;
 8014282:	e005      	b.n	8014290 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014284:	7bbb      	ldrb	r3, [r7, #14]
 8014286:	3301      	adds	r3, #1
 8014288:	73bb      	strb	r3, [r7, #14]
 801428a:	7bbb      	ldrb	r3, [r7, #14]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d0b9      	beq.n	8014204 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8014290:	7bfb      	ldrb	r3, [r7, #15]
}
 8014292:	4618      	mov	r0, r3
 8014294:	3710      	adds	r7, #16
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	bf00      	nop
 801429c:	20006634 	.word	0x20006634

080142a0 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b086      	sub	sp, #24
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60b9      	str	r1, [r7, #8]
 80142a8:	607b      	str	r3, [r7, #4]
 80142aa:	4603      	mov	r3, r0
 80142ac:	81fb      	strh	r3, [r7, #14]
 80142ae:	4613      	mov	r3, r2
 80142b0:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 80142b2:	23ae      	movs	r3, #174	@ 0xae
 80142b4:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 80142b6:	2300      	movs	r3, #0
 80142b8:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 80142ba:	6879      	ldr	r1, [r7, #4]
 80142bc:	485a      	ldr	r0, [pc, #360]	@ (8014428 <gos_queuePut+0x188>)
 80142be:	f7ff fdcf 	bl	8013e60 <gos_mutexLock>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b55      	cmp	r3, #85	@ 0x55
 80142c6:	f040 80a6 	bne.w	8014416 <gos_queuePut+0x176>
 80142ca:	89fb      	ldrh	r3, [r7, #14]
 80142cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80142d0:	f0c0 80a1 	bcc.w	8014416 <gos_queuePut+0x176>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 80142d4:	89fb      	ldrh	r3, [r7, #14]
 80142d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80142da:	f200 809c 	bhi.w	8014416 <gos_queuePut+0x176>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 80142de:	68bb      	ldr	r3, [r7, #8]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	f000 8098 	beq.w	8014416 <gos_queuePut+0x176>
        element                                          != NULL                 &&
 80142e6:	7b7b      	ldrb	r3, [r7, #13]
 80142e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80142ea:	f200 8094 	bhi.w	8014416 <gos_queuePut+0x176>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 80142ee:	89fb      	ldrh	r3, [r7, #14]
 80142f0:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 80142f4:	4a4d      	ldr	r2, [pc, #308]	@ (801442c <gos_queuePut+0x18c>)
 80142f6:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80142fa:	fb01 f303 	mul.w	r3, r1, r3
 80142fe:	4413      	add	r3, r2
 8014300:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 8014302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014306:	f000 8086 	beq.w	8014416 <gos_queuePut+0x176>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 801430a:	89fb      	ldrh	r3, [r7, #14]
 801430c:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 801430e:	7dbb      	ldrb	r3, [r7, #22]
 8014310:	4a47      	ldr	r2, [pc, #284]	@ (8014430 <gos_queuePut+0x190>)
 8014312:	5cd3      	ldrb	r3, [r2, r3]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d009      	beq.n	801432c <gos_queuePut+0x8c>
 8014318:	7dbb      	ldrb	r3, [r7, #22]
 801431a:	4a46      	ldr	r2, [pc, #280]	@ (8014434 <gos_queuePut+0x194>)
 801431c:	5cd3      	ldrb	r3, [r2, r3]
 801431e:	4619      	mov	r1, r3
 8014320:	7dbb      	ldrb	r3, [r7, #22]
 8014322:	4a43      	ldr	r2, [pc, #268]	@ (8014430 <gos_queuePut+0x190>)
 8014324:	5cd3      	ldrb	r3, [r2, r3]
 8014326:	3b01      	subs	r3, #1
 8014328:	4299      	cmp	r1, r3
 801432a:	d109      	bne.n	8014340 <gos_queuePut+0xa0>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 801432c:	7dbb      	ldrb	r3, [r7, #22]
 801432e:	4a40      	ldr	r2, [pc, #256]	@ (8014430 <gos_queuePut+0x190>)
 8014330:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8014332:	2b00      	cmp	r3, #0
 8014334:	d16f      	bne.n	8014416 <gos_queuePut+0x176>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8014336:	7dbb      	ldrb	r3, [r7, #22]
 8014338:	4a3e      	ldr	r2, [pc, #248]	@ (8014434 <gos_queuePut+0x194>)
 801433a:	5cd3      	ldrb	r3, [r2, r3]
 801433c:	2b1d      	cmp	r3, #29
 801433e:	d06a      	beq.n	8014416 <gos_queuePut+0x176>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 8014340:	7dbb      	ldrb	r3, [r7, #22]
 8014342:	7dba      	ldrb	r2, [r7, #22]
 8014344:	493b      	ldr	r1, [pc, #236]	@ (8014434 <gos_queuePut+0x194>)
 8014346:	5c8a      	ldrb	r2, [r1, r2]
 8014348:	4611      	mov	r1, r2
 801434a:	22c9      	movs	r2, #201	@ 0xc9
 801434c:	fb01 f202 	mul.w	r2, r1, r2
 8014350:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014354:	fb01 f303 	mul.w	r3, r1, r3
 8014358:	4413      	add	r3, r2
 801435a:	3318      	adds	r3, #24
 801435c:	4a33      	ldr	r2, [pc, #204]	@ (801442c <gos_queuePut+0x18c>)
 801435e:	4413      	add	r3, r2
 8014360:	3302      	adds	r3, #2
            (void_t) memcpy(
 8014362:	7b7a      	ldrb	r2, [r7, #13]
 8014364:	68b9      	ldr	r1, [r7, #8]
 8014366:	4618      	mov	r0, r3
 8014368:	f002 ff1f 	bl	80171aa <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 801436c:	7dbb      	ldrb	r3, [r7, #22]
 801436e:	7dba      	ldrb	r2, [r7, #22]
 8014370:	4930      	ldr	r1, [pc, #192]	@ (8014434 <gos_queuePut+0x194>)
 8014372:	5c8a      	ldrb	r2, [r1, r2]
 8014374:	4610      	mov	r0, r2
 8014376:	492d      	ldr	r1, [pc, #180]	@ (801442c <gos_queuePut+0x18c>)
 8014378:	22c9      	movs	r2, #201	@ 0xc9
 801437a:	fb00 f202 	mul.w	r2, r0, r2
 801437e:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 8014382:	fb00 f303 	mul.w	r3, r0, r3
 8014386:	4413      	add	r3, r2
 8014388:	440b      	add	r3, r1
 801438a:	33e2      	adds	r3, #226	@ 0xe2
 801438c:	7b7a      	ldrb	r2, [r7, #13]
 801438e:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 8014390:	7dbb      	ldrb	r3, [r7, #22]
 8014392:	4a28      	ldr	r2, [pc, #160]	@ (8014434 <gos_queuePut+0x194>)
 8014394:	5cd2      	ldrb	r2, [r2, r3]
 8014396:	3201      	adds	r2, #1
 8014398:	b2d1      	uxtb	r1, r2
 801439a:	4a26      	ldr	r2, [pc, #152]	@ (8014434 <gos_queuePut+0x194>)
 801439c:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 801439e:	7dba      	ldrb	r2, [r7, #22]
 80143a0:	4922      	ldr	r1, [pc, #136]	@ (801442c <gos_queuePut+0x18c>)
 80143a2:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 80143a6:	fb02 f303 	mul.w	r3, r2, r3
 80143aa:	440b      	add	r3, r1
 80143ac:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 80143b0:	3308      	adds	r3, #8
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	3301      	adds	r3, #1
 80143b6:	b2d8      	uxtb	r0, r3
 80143b8:	491c      	ldr	r1, [pc, #112]	@ (801442c <gos_queuePut+0x18c>)
 80143ba:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 80143be:	fb02 f303 	mul.w	r3, r2, r3
 80143c2:	440b      	add	r3, r1
 80143c4:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 80143c8:	3308      	adds	r3, #8
 80143ca:	4602      	mov	r2, r0
 80143cc:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 80143ce:	7dbb      	ldrb	r3, [r7, #22]
 80143d0:	4a18      	ldr	r2, [pc, #96]	@ (8014434 <gos_queuePut+0x194>)
 80143d2:	5cd3      	ldrb	r3, [r2, r3]
 80143d4:	2b1d      	cmp	r3, #29
 80143d6:	d903      	bls.n	80143e0 <gos_queuePut+0x140>
            {
                writeCounters[queueIndex] = 0u;
 80143d8:	7dbb      	ldrb	r3, [r7, #22]
 80143da:	4a16      	ldr	r2, [pc, #88]	@ (8014434 <gos_queuePut+0x194>)
 80143dc:	2100      	movs	r1, #0
 80143de:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 80143e0:	7dbb      	ldrb	r3, [r7, #22]
 80143e2:	4a12      	ldr	r2, [pc, #72]	@ (801442c <gos_queuePut+0x18c>)
 80143e4:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80143e8:	fb01 f303 	mul.w	r3, r1, r3
 80143ec:	4413      	add	r3, r2
 80143ee:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 80143f2:	3308      	adds	r3, #8
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	2b1d      	cmp	r3, #29
 80143f8:	d10b      	bne.n	8014412 <gos_queuePut+0x172>
                queueFullHook != NULL)
 80143fa:	4b0f      	ldr	r3, [pc, #60]	@ (8014438 <gos_queuePut+0x198>)
 80143fc:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d007      	beq.n	8014412 <gos_queuePut+0x172>
            {
                gos_mutexUnlock(&queueMutex);
 8014402:	4809      	ldr	r0, [pc, #36]	@ (8014428 <gos_queuePut+0x188>)
 8014404:	f7ff fe32 	bl	801406c <gos_mutexUnlock>
                queueFullHook(queueId);
 8014408:	4b0b      	ldr	r3, [pc, #44]	@ (8014438 <gos_queuePut+0x198>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	89fa      	ldrh	r2, [r7, #14]
 801440e:	4610      	mov	r0, r2
 8014410:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 8014412:	2355      	movs	r3, #85	@ 0x55
 8014414:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8014416:	4804      	ldr	r0, [pc, #16]	@ (8014428 <gos_queuePut+0x188>)
 8014418:	f7ff fe28 	bl	801406c <gos_mutexUnlock>

    return queuePutResult;
 801441c:	7dfb      	ldrb	r3, [r7, #23]
}
 801441e:	4618      	mov	r0, r3
 8014420:	3718      	adds	r7, #24
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	20007de8 	.word	0x20007de8
 801442c:	20006634 	.word	0x20006634
 8014430:	20007de0 	.word	0x20007de0
 8014434:	20007de4 	.word	0x20007de4
 8014438:	20007dec 	.word	0x20007dec

0801443c <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 801443c:	b590      	push	{r4, r7, lr}
 801443e:	b087      	sub	sp, #28
 8014440:	af00      	add	r7, sp, #0
 8014442:	60b9      	str	r1, [r7, #8]
 8014444:	607b      	str	r3, [r7, #4]
 8014446:	4603      	mov	r3, r0
 8014448:	81fb      	strh	r3, [r7, #14]
 801444a:	4613      	mov	r3, r2
 801444c:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 801444e:	23ae      	movs	r3, #174	@ 0xae
 8014450:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 8014452:	2300      	movs	r3, #0
 8014454:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8014456:	6879      	ldr	r1, [r7, #4]
 8014458:	4864      	ldr	r0, [pc, #400]	@ (80145ec <gos_queueGet+0x1b0>)
 801445a:	f7ff fd01 	bl	8013e60 <gos_mutexLock>
 801445e:	4603      	mov	r3, r0
 8014460:	2b55      	cmp	r3, #85	@ 0x55
 8014462:	f040 80ba 	bne.w	80145da <gos_queueGet+0x19e>
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	2b00      	cmp	r3, #0
 801446a:	f000 80b6 	beq.w	80145da <gos_queueGet+0x19e>
        target                                           != NULL                 &&
 801446e:	89fb      	ldrh	r3, [r7, #14]
 8014470:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8014474:	f0c0 80b1 	bcc.w	80145da <gos_queueGet+0x19e>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8014478:	89fb      	ldrh	r3, [r7, #14]
 801447a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801447e:	f200 80ac 	bhi.w	80145da <gos_queueGet+0x19e>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8014482:	89fb      	ldrh	r3, [r7, #14]
 8014484:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8014488:	4a59      	ldr	r2, [pc, #356]	@ (80145f0 <gos_queueGet+0x1b4>)
 801448a:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801448e:	fb01 f303 	mul.w	r3, r1, r3
 8014492:	4413      	add	r3, r2
 8014494:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8014496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801449a:	f000 809e 	beq.w	80145da <gos_queueGet+0x19e>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 801449e:	89fb      	ldrh	r3, [r7, #14]
 80144a0:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 80144a4:	89fa      	ldrh	r2, [r7, #14]
 80144a6:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 80144aa:	4952      	ldr	r1, [pc, #328]	@ (80145f4 <gos_queueGet+0x1b8>)
 80144ac:	5c8a      	ldrb	r2, [r1, r2]
 80144ae:	4610      	mov	r0, r2
 80144b0:	494f      	ldr	r1, [pc, #316]	@ (80145f0 <gos_queueGet+0x1b4>)
 80144b2:	22c9      	movs	r2, #201	@ 0xc9
 80144b4:	fb00 f202 	mul.w	r2, r0, r2
 80144b8:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 80144bc:	fb00 f303 	mul.w	r3, r0, r3
 80144c0:	4413      	add	r3, r2
 80144c2:	440b      	add	r3, r1
 80144c4:	33e2      	adds	r3, #226	@ 0xe2
 80144c6:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 80144c8:	7b7a      	ldrb	r2, [r7, #13]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	f0c0 8085 	bcc.w	80145da <gos_queueGet+0x19e>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 80144d0:	89fb      	ldrh	r3, [r7, #14]
 80144d2:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 80144d4:	7dbb      	ldrb	r3, [r7, #22]
 80144d6:	4a47      	ldr	r2, [pc, #284]	@ (80145f4 <gos_queueGet+0x1b8>)
 80144d8:	5cd2      	ldrb	r2, [r2, r3]
 80144da:	7dbb      	ldrb	r3, [r7, #22]
 80144dc:	4946      	ldr	r1, [pc, #280]	@ (80145f8 <gos_queueGet+0x1bc>)
 80144de:	5ccb      	ldrb	r3, [r1, r3]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d07a      	beq.n	80145da <gos_queueGet+0x19e>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 80144e4:	7dbb      	ldrb	r3, [r7, #22]
 80144e6:	7dba      	ldrb	r2, [r7, #22]
 80144e8:	4942      	ldr	r1, [pc, #264]	@ (80145f4 <gos_queueGet+0x1b8>)
 80144ea:	5c8a      	ldrb	r2, [r1, r2]
 80144ec:	4611      	mov	r1, r2
 80144ee:	22c9      	movs	r2, #201	@ 0xc9
 80144f0:	fb01 f202 	mul.w	r2, r1, r2
 80144f4:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80144f8:	fb01 f303 	mul.w	r3, r1, r3
 80144fc:	4413      	add	r3, r2
 80144fe:	3318      	adds	r3, #24
 8014500:	4a3b      	ldr	r2, [pc, #236]	@ (80145f0 <gos_queueGet+0x1b4>)
 8014502:	4413      	add	r3, r2
 8014504:	1c99      	adds	r1, r3, #2
 8014506:	7dbb      	ldrb	r3, [r7, #22]
 8014508:	7dba      	ldrb	r2, [r7, #22]
 801450a:	483a      	ldr	r0, [pc, #232]	@ (80145f4 <gos_queueGet+0x1b8>)
 801450c:	5c82      	ldrb	r2, [r0, r2]
 801450e:	4614      	mov	r4, r2
 8014510:	4837      	ldr	r0, [pc, #220]	@ (80145f0 <gos_queueGet+0x1b4>)
 8014512:	22c9      	movs	r2, #201	@ 0xc9
 8014514:	fb04 f202 	mul.w	r2, r4, r2
 8014518:	f241 74aa 	movw	r4, #6058	@ 0x17aa
 801451c:	fb04 f303 	mul.w	r3, r4, r3
 8014520:	4413      	add	r3, r2
 8014522:	4403      	add	r3, r0
 8014524:	33e2      	adds	r3, #226	@ 0xe2
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	461a      	mov	r2, r3
 801452a:	68b8      	ldr	r0, [r7, #8]
 801452c:	f002 fe3d 	bl	80171aa <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 8014530:	7dbb      	ldrb	r3, [r7, #22]
 8014532:	7dba      	ldrb	r2, [r7, #22]
 8014534:	492f      	ldr	r1, [pc, #188]	@ (80145f4 <gos_queueGet+0x1b8>)
 8014536:	5c8a      	ldrb	r2, [r1, r2]
 8014538:	4610      	mov	r0, r2
 801453a:	492d      	ldr	r1, [pc, #180]	@ (80145f0 <gos_queueGet+0x1b4>)
 801453c:	22c9      	movs	r2, #201	@ 0xc9
 801453e:	fb00 f202 	mul.w	r2, r0, r2
 8014542:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 8014546:	fb00 f303 	mul.w	r3, r0, r3
 801454a:	4413      	add	r3, r2
 801454c:	440b      	add	r3, r1
 801454e:	33e2      	adds	r3, #226	@ 0xe2
 8014550:	2200      	movs	r2, #0
 8014552:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 8014554:	7dbb      	ldrb	r3, [r7, #22]
 8014556:	4a27      	ldr	r2, [pc, #156]	@ (80145f4 <gos_queueGet+0x1b8>)
 8014558:	5cd2      	ldrb	r2, [r2, r3]
 801455a:	3201      	adds	r2, #1
 801455c:	b2d1      	uxtb	r1, r2
 801455e:	4a25      	ldr	r2, [pc, #148]	@ (80145f4 <gos_queueGet+0x1b8>)
 8014560:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 8014562:	7dba      	ldrb	r2, [r7, #22]
 8014564:	4922      	ldr	r1, [pc, #136]	@ (80145f0 <gos_queueGet+0x1b4>)
 8014566:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 801456a:	fb02 f303 	mul.w	r3, r2, r3
 801456e:	440b      	add	r3, r1
 8014570:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014574:	3308      	adds	r3, #8
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	3b01      	subs	r3, #1
 801457a:	b2d8      	uxtb	r0, r3
 801457c:	491c      	ldr	r1, [pc, #112]	@ (80145f0 <gos_queueGet+0x1b4>)
 801457e:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 8014582:	fb02 f303 	mul.w	r3, r2, r3
 8014586:	440b      	add	r3, r1
 8014588:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 801458c:	3308      	adds	r3, #8
 801458e:	4602      	mov	r2, r0
 8014590:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8014592:	7dbb      	ldrb	r3, [r7, #22]
 8014594:	4a17      	ldr	r2, [pc, #92]	@ (80145f4 <gos_queueGet+0x1b8>)
 8014596:	5cd3      	ldrb	r3, [r2, r3]
 8014598:	2b1d      	cmp	r3, #29
 801459a:	d903      	bls.n	80145a4 <gos_queueGet+0x168>
            {
                readCounters[queueIndex] = 0u;
 801459c:	7dbb      	ldrb	r3, [r7, #22]
 801459e:	4a15      	ldr	r2, [pc, #84]	@ (80145f4 <gos_queueGet+0x1b8>)
 80145a0:	2100      	movs	r1, #0
 80145a2:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 80145a4:	7dbb      	ldrb	r3, [r7, #22]
 80145a6:	4a12      	ldr	r2, [pc, #72]	@ (80145f0 <gos_queueGet+0x1b4>)
 80145a8:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 80145ac:	fb01 f303 	mul.w	r3, r1, r3
 80145b0:	4413      	add	r3, r2
 80145b2:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 80145b6:	3308      	adds	r3, #8
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d10b      	bne.n	80145d6 <gos_queueGet+0x19a>
                queueEmptyHook != NULL)
 80145be:	4b0f      	ldr	r3, [pc, #60]	@ (80145fc <gos_queueGet+0x1c0>)
 80145c0:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d007      	beq.n	80145d6 <gos_queueGet+0x19a>
            {
                gos_mutexUnlock(&queueMutex);
 80145c6:	4809      	ldr	r0, [pc, #36]	@ (80145ec <gos_queueGet+0x1b0>)
 80145c8:	f7ff fd50 	bl	801406c <gos_mutexUnlock>
                queueEmptyHook(queueId);
 80145cc:	4b0b      	ldr	r3, [pc, #44]	@ (80145fc <gos_queueGet+0x1c0>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	89fa      	ldrh	r2, [r7, #14]
 80145d2:	4610      	mov	r0, r2
 80145d4:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 80145d6:	2355      	movs	r3, #85	@ 0x55
 80145d8:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 80145da:	4804      	ldr	r0, [pc, #16]	@ (80145ec <gos_queueGet+0x1b0>)
 80145dc:	f7ff fd46 	bl	801406c <gos_mutexUnlock>

    return queueGetResult;
 80145e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	371c      	adds	r7, #28
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd90      	pop	{r4, r7, pc}
 80145ea:	bf00      	nop
 80145ec:	20007de8 	.word	0x20007de8
 80145f0:	20006634 	.word	0x20006634
 80145f4:	20007de0 	.word	0x20007de0
 80145f8:	20007de4 	.word	0x20007de4
 80145fc:	20007df0 	.word	0x20007df0

08014600 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8014600:	b590      	push	{r4, r7, lr}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 8014606:	2300      	movs	r3, #0
 8014608:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 801460a:	4826      	ldr	r0, [pc, #152]	@ (80146a4 <gos_queueDump+0xa4>)
 801460c:	f001 fe9c 	bl	8016348 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8014610:	4825      	ldr	r0, [pc, #148]	@ (80146a8 <gos_queueDump+0xa8>)
 8014612:	f001 fe99 	bl	8016348 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 8014616:	4b25      	ldr	r3, [pc, #148]	@ (80146ac <gos_queueDump+0xac>)
 8014618:	4a25      	ldr	r2, [pc, #148]	@ (80146b0 <gos_queueDump+0xb0>)
 801461a:	4926      	ldr	r1, [pc, #152]	@ (80146b4 <gos_queueDump+0xb4>)
 801461c:	4826      	ldr	r0, [pc, #152]	@ (80146b8 <gos_queueDump+0xb8>)
 801461e:	f001 fe93 	bl	8016348 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8014622:	4821      	ldr	r0, [pc, #132]	@ (80146a8 <gos_queueDump+0xa8>)
 8014624:	f001 fe90 	bl	8016348 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014628:	2300      	movs	r3, #0
 801462a:	71fb      	strb	r3, [r7, #7]
 801462c:	e02d      	b.n	801468a <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 801462e:	79fb      	ldrb	r3, [r7, #7]
 8014630:	4a22      	ldr	r2, [pc, #136]	@ (80146bc <gos_queueDump+0xbc>)
 8014632:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 8014636:	fb01 f303 	mul.w	r3, r1, r3
 801463a:	4413      	add	r3, r2
 801463c:	881b      	ldrh	r3, [r3, #0]
 801463e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014642:	d026      	beq.n	8014692 <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 8014644:	79fb      	ldrb	r3, [r7, #7]
 8014646:	4a1d      	ldr	r2, [pc, #116]	@ (80146bc <gos_queueDump+0xbc>)
 8014648:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 801464c:	fb01 f303 	mul.w	r3, r1, r3
 8014650:	4413      	add	r3, r2
 8014652:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8014654:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 8014656:	79fb      	ldrb	r3, [r7, #7]
 8014658:	f241 72aa 	movw	r2, #6058	@ 0x17aa
 801465c:	fb02 f303 	mul.w	r3, r2, r3
 8014660:	4a16      	ldr	r2, [pc, #88]	@ (80146bc <gos_queueDump+0xbc>)
 8014662:	4413      	add	r3, r2
 8014664:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 8014666:	79fb      	ldrb	r3, [r7, #7]
 8014668:	4914      	ldr	r1, [pc, #80]	@ (80146bc <gos_queueDump+0xbc>)
 801466a:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 801466e:	fb00 f303 	mul.w	r3, r0, r3
 8014672:	440b      	add	r3, r1
 8014674:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 8014678:	3308      	adds	r3, #8
 801467a:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 801467c:	4621      	mov	r1, r4
 801467e:	4810      	ldr	r0, [pc, #64]	@ (80146c0 <gos_queueDump+0xc0>)
 8014680:	f001 fe62 	bl	8016348 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8014684:	79fb      	ldrb	r3, [r7, #7]
 8014686:	3301      	adds	r3, #1
 8014688:	71fb      	strb	r3, [r7, #7]
 801468a:	79fb      	ldrb	r3, [r7, #7]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d0ce      	beq.n	801462e <gos_queueDump+0x2e>
 8014690:	e000      	b.n	8014694 <gos_queueDump+0x94>
            break;
 8014692:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 8014694:	480b      	ldr	r0, [pc, #44]	@ (80146c4 <gos_queueDump+0xc4>)
 8014696:	f001 fe57 	bl	8016348 <gos_shellDriverTransmitString>
}
 801469a:	bf00      	nop
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd90      	pop	{r4, r7, pc}
 80146a2:	bf00      	nop
 80146a4:	0801a50c 	.word	0x0801a50c
 80146a8:	0801a51c 	.word	0x0801a51c
 80146ac:	0801a558 	.word	0x0801a558
 80146b0:	0801a564 	.word	0x0801a564
 80146b4:	0801a56c 	.word	0x0801a56c
 80146b8:	0801a570 	.word	0x0801a570
 80146bc:	20006634 	.word	0x20006634
 80146c0:	0801a588 	.word	0x0801a588
 80146c4:	0801a5a4 	.word	0x0801a5a4

080146c8 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b082      	sub	sp, #8
 80146cc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 80146ce:	23ae      	movs	r3, #174	@ 0xae
 80146d0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 80146d2:	4b06      	ldr	r3, [pc, #24]	@ (80146ec <gos_shellResume+0x24>)
 80146d4:	881b      	ldrh	r3, [r3, #0]
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fd fae2 	bl	8011ca0 <gos_taskResume>
 80146dc:	4603      	mov	r3, r0
 80146de:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 80146e0:	79fb      	ldrb	r3, [r7, #7]
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	20007df4 	.word	0x20007df4

080146f0 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_ERROR;
 80146f6:	23ae      	movs	r3, #174	@ 0xae
 80146f8:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 80146fa:	2300      	movs	r3, #0
 80146fc:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80146fe:	2300      	movs	r3, #0
 8014700:	71bb      	strb	r3, [r7, #6]
 8014702:	e00a      	b.n	801471a <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 8014704:	79bb      	ldrb	r3, [r7, #6]
 8014706:	4a16      	ldr	r2, [pc, #88]	@ (8014760 <gos_signalInit+0x70>)
 8014708:	212c      	movs	r1, #44	@ 0x2c
 801470a:	fb01 f303 	mul.w	r3, r1, r3
 801470e:	4413      	add	r3, r2
 8014710:	2249      	movs	r2, #73	@ 0x49
 8014712:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014714:	79bb      	ldrb	r3, [r7, #6]
 8014716:	3301      	adds	r3, #1
 8014718:	71bb      	strb	r3, [r7, #6]
 801471a:	79bb      	ldrb	r3, [r7, #6]
 801471c:	2b02      	cmp	r3, #2
 801471e:	d9f1      	bls.n	8014704 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 8014720:	2100      	movs	r1, #0
 8014722:	4810      	ldr	r0, [pc, #64]	@ (8014764 <gos_signalInit+0x74>)
 8014724:	f7fc feb0 	bl	8011488 <gos_taskRegister>
 8014728:	4603      	mov	r3, r0
 801472a:	2b55      	cmp	r3, #85	@ 0x55
 801472c:	d113      	bne.n	8014756 <gos_signalInit+0x66>
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 801472e:	480e      	ldr	r0, [pc, #56]	@ (8014768 <gos_signalInit+0x78>)
 8014730:	f000 f820 	bl	8014774 <gos_signalCreate>
 8014734:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 8014736:	2b55      	cmp	r3, #85	@ 0x55
 8014738:	d10d      	bne.n	8014756 <gos_signalInit+0x66>
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 801473a:	480c      	ldr	r0, [pc, #48]	@ (801476c <gos_signalInit+0x7c>)
 801473c:	f000 f81a 	bl	8014774 <gos_signalCreate>
 8014740:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 8014742:	2b55      	cmp	r3, #85	@ 0x55
 8014744:	d107      	bne.n	8014756 <gos_signalInit+0x66>
        gos_triggerInit(&signalInvokeTrigger)               == GOS_SUCCESS
 8014746:	480a      	ldr	r0, [pc, #40]	@ (8014770 <gos_signalInit+0x80>)
 8014748:	f001 fc12 	bl	8015f70 <gos_triggerInit>
 801474c:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 801474e:	2b55      	cmp	r3, #85	@ 0x55
 8014750:	d101      	bne.n	8014756 <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_SUCCESS;
 8014752:	2355      	movs	r3, #85	@ 0x55
 8014754:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 8014756:	79fb      	ldrb	r3, [r7, #7]
}
 8014758:	4618      	mov	r0, r3
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}
 8014760:	20007df8 	.word	0x20007df8
 8014764:	20001020 	.word	0x20001020
 8014768:	20005e80 	.word	0x20005e80
 801476c:	20005e50 	.word	0x20005e50
 8014770:	20007e7c 	.word	0x20007e7c

08014774 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 8014774:	b480      	push	{r7}
 8014776:	b085      	sub	sp, #20
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 801477c:	23ae      	movs	r3, #174	@ 0xae
 801477e:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 8014780:	2300      	movs	r3, #0
 8014782:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8014784:	2300      	movs	r3, #0
 8014786:	73bb      	strb	r3, [r7, #14]
 8014788:	e025      	b.n	80147d6 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 801478a:	7bbb      	ldrb	r3, [r7, #14]
 801478c:	4a17      	ldr	r2, [pc, #92]	@ (80147ec <gos_signalCreate+0x78>)
 801478e:	212c      	movs	r1, #44	@ 0x2c
 8014790:	fb01 f303 	mul.w	r3, r1, r3
 8014794:	4413      	add	r3, r2
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	2b49      	cmp	r3, #73	@ 0x49
 801479a:	d119      	bne.n	80147d0 <gos_signalCreate+0x5c>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d016      	beq.n	80147d0 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	7bba      	ldrb	r2, [r7, #14]
 80147a6:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 80147a8:	7bbb      	ldrb	r3, [r7, #14]
 80147aa:	4a10      	ldr	r2, [pc, #64]	@ (80147ec <gos_signalCreate+0x78>)
 80147ac:	212c      	movs	r1, #44	@ 0x2c
 80147ae:	fb01 f303 	mul.w	r3, r1, r3
 80147b2:	4413      	add	r3, r2
 80147b4:	2236      	movs	r2, #54	@ 0x36
 80147b6:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 80147b8:	7bbb      	ldrb	r3, [r7, #14]
 80147ba:	4a0c      	ldr	r2, [pc, #48]	@ (80147ec <gos_signalCreate+0x78>)
 80147bc:	212c      	movs	r1, #44	@ 0x2c
 80147be:	fb01 f303 	mul.w	r3, r1, r3
 80147c2:	4413      	add	r3, r2
 80147c4:	3328      	adds	r3, #40	@ 0x28
 80147c6:	2249      	movs	r2, #73	@ 0x49
 80147c8:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 80147ca:	2355      	movs	r3, #85	@ 0x55
 80147cc:	73fb      	strb	r3, [r7, #15]
            break;
 80147ce:	e005      	b.n	80147dc <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80147d0:	7bbb      	ldrb	r3, [r7, #14]
 80147d2:	3301      	adds	r3, #1
 80147d4:	73bb      	strb	r3, [r7, #14]
 80147d6:	7bbb      	ldrb	r3, [r7, #14]
 80147d8:	2b02      	cmp	r3, #2
 80147da:	d9d6      	bls.n	801478a <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 80147dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3714      	adds	r7, #20
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr
 80147ea:	bf00      	nop
 80147ec:	20007df8 	.word	0x20007df8

080147f0 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af02      	add	r7, sp, #8
 80147f6:	4603      	mov	r3, r0
 80147f8:	460a      	mov	r2, r1
 80147fa:	71fb      	strb	r3, [r7, #7]
 80147fc:	4613      	mov	r3, r2
 80147fe:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 8014800:	23ae      	movs	r3, #174	@ 0xae
 8014802:	73fb      	strb	r3, [r7, #15]
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 8014804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014808:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 801480a:	79fb      	ldrb	r3, [r7, #7]
 801480c:	2b02      	cmp	r3, #2
 801480e:	d844      	bhi.n	801489a <gos_signalInvoke+0xaa>
 8014810:	79fb      	ldrb	r3, [r7, #7]
 8014812:	4a24      	ldr	r2, [pc, #144]	@ (80148a4 <gos_signalInvoke+0xb4>)
 8014814:	212c      	movs	r1, #44	@ 0x2c
 8014816:	fb01 f303 	mul.w	r3, r1, r3
 801481a:	4413      	add	r3, r2
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	2b36      	cmp	r3, #54	@ 0x36
 8014820:	d13b      	bne.n	801489a <gos_signalInvoke+0xaa>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8014822:	f7fc fb11 	bl	8010e48 <gos_kernelIsCallerIsr>
 8014826:	4603      	mov	r3, r0
 8014828:	2b36      	cmp	r3, #54	@ 0x36
 801482a:	d015      	beq.n	8014858 <gos_signalInvoke+0x68>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 801482c:	f107 030c 	add.w	r3, r7, #12
 8014830:	4618      	mov	r0, r3
 8014832:	f7fe f9cf 	bl	8012bd4 <gos_taskGetCurrentId>
 8014836:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 8014838:	2b55      	cmp	r3, #85	@ 0x55
 801483a:	d125      	bne.n	8014888 <gos_signalInvoke+0x98>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 801483c:	89bb      	ldrh	r3, [r7, #12]
 801483e:	491a      	ldr	r1, [pc, #104]	@ (80148a8 <gos_signalInvoke+0xb8>)
 8014840:	4618      	mov	r0, r3
 8014842:	f7fe fa23 	bl	8012c8c <gos_taskGetData>
 8014846:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 8014848:	2b55      	cmp	r3, #85	@ 0x55
 801484a:	d11d      	bne.n	8014888 <gos_signalInvoke+0x98>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 801484c:	4b16      	ldr	r3, [pc, #88]	@ (80148a8 <gos_signalInvoke+0xb8>)
 801484e:	891b      	ldrh	r3, [r3, #8]
 8014850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 8014854:	2b00      	cmp	r3, #0
 8014856:	d017      	beq.n	8014888 <gos_signalInvoke+0x98>
            )
        {
            signalArray[signalId].senderId       = senderId;
 8014858:	79fb      	ldrb	r3, [r7, #7]
 801485a:	4a12      	ldr	r2, [pc, #72]	@ (80148a4 <gos_signalInvoke+0xb4>)
 801485c:	212c      	movs	r1, #44	@ 0x2c
 801485e:	fb01 f303 	mul.w	r3, r1, r3
 8014862:	4413      	add	r3, r2
 8014864:	332a      	adds	r3, #42	@ 0x2a
 8014866:	88ba      	ldrh	r2, [r7, #4]
 8014868:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 801486a:	79fb      	ldrb	r3, [r7, #7]
 801486c:	4a0d      	ldr	r2, [pc, #52]	@ (80148a4 <gos_signalInvoke+0xb4>)
 801486e:	212c      	movs	r1, #44	@ 0x2c
 8014870:	fb01 f303 	mul.w	r3, r1, r3
 8014874:	4413      	add	r3, r2
 8014876:	3328      	adds	r3, #40	@ 0x28
 8014878:	2236      	movs	r2, #54	@ 0x36
 801487a:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 801487c:	2355      	movs	r3, #85	@ 0x55
 801487e:	73fb      	strb	r3, [r7, #15]

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 8014880:	480a      	ldr	r0, [pc, #40]	@ (80148ac <gos_signalInvoke+0xbc>)
 8014882:	f001 fc99 	bl	80161b8 <gos_triggerIncrement>
 8014886:	e008      	b.n	801489a <gos_signalInvoke+0xaa>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 8014888:	4b09      	ldr	r3, [pc, #36]	@ (80148b0 <gos_signalInvoke+0xc0>)
 801488a:	9300      	str	r3, [sp, #0]
 801488c:	4b09      	ldr	r3, [pc, #36]	@ (80148b4 <gos_signalInvoke+0xc4>)
 801488e:	f240 1221 	movw	r2, #289	@ 0x121
 8014892:	4909      	ldr	r1, [pc, #36]	@ (80148b8 <gos_signalInvoke+0xc8>)
 8014894:	202e      	movs	r0, #46	@ 0x2e
 8014896:	f7fe fc7b 	bl	8013190 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 801489a:	7bfb      	ldrb	r3, [r7, #15]
}
 801489c:	4618      	mov	r0, r3
 801489e:	3710      	adds	r7, #16
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	20007df8 	.word	0x20007df8
 80148a8:	20007e88 	.word	0x20007e88
 80148ac:	20007e7c 	.word	0x20007e7c
 80148b0:	20007e92 	.word	0x20007e92
 80148b4:	0801a5e4 	.word	0x0801a5e4
 80148b8:	0801ab2c 	.word	0x0801ab2c

080148bc <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 80148bc:	b590      	push	{r4, r7, lr}
 80148be:	b083      	sub	sp, #12
 80148c0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 80148c2:	2300      	movs	r3, #0
 80148c4:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 80148c6:	2300      	movs	r3, #0
 80148c8:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 80148ca:	f04f 32ff 	mov.w	r2, #4294967295
 80148ce:	2101      	movs	r1, #1
 80148d0:	4837      	ldr	r0, [pc, #220]	@ (80149b0 <gos_signalDaemonTask+0xf4>)
 80148d2:	f001 fbc1 	bl	8016058 <gos_triggerWait>
 80148d6:	4603      	mov	r3, r0
 80148d8:	2b55      	cmp	r3, #85	@ 0x55
 80148da:	d164      	bne.n	80149a6 <gos_signalDaemonTask+0xea>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 80148dc:	4834      	ldr	r0, [pc, #208]	@ (80149b0 <gos_signalDaemonTask+0xf4>)
 80148de:	f001 fb63 	bl	8015fa8 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80148e2:	2300      	movs	r3, #0
 80148e4:	71bb      	strb	r3, [r7, #6]
 80148e6:	e05b      	b.n	80149a0 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 80148e8:	79bb      	ldrb	r3, [r7, #6]
 80148ea:	4a32      	ldr	r2, [pc, #200]	@ (80149b4 <gos_signalDaemonTask+0xf8>)
 80148ec:	212c      	movs	r1, #44	@ 0x2c
 80148ee:	fb01 f303 	mul.w	r3, r1, r3
 80148f2:	4413      	add	r3, r2
 80148f4:	3328      	adds	r3, #40	@ 0x28
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	2b36      	cmp	r3, #54	@ 0x36
 80148fa:	d14e      	bne.n	801499a <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 80148fc:	2300      	movs	r3, #0
 80148fe:	71fb      	strb	r3, [r7, #7]
 8014900:	e03d      	b.n	801497e <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 8014902:	79ba      	ldrb	r2, [r7, #6]
 8014904:	79f9      	ldrb	r1, [r7, #7]
 8014906:	482b      	ldr	r0, [pc, #172]	@ (80149b4 <gos_signalDaemonTask+0xf8>)
 8014908:	4613      	mov	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	005b      	lsls	r3, r3, #1
 8014910:	4413      	add	r3, r2
 8014912:	440b      	add	r3, r1
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	4403      	add	r3, r0
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d033      	beq.n	8014986 <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 801491e:	4b26      	ldr	r3, [pc, #152]	@ (80149b8 <gos_signalDaemonTask+0xfc>)
 8014920:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 8014922:	79ba      	ldrb	r2, [r7, #6]
 8014924:	79fb      	ldrb	r3, [r7, #7]
 8014926:	4923      	ldr	r1, [pc, #140]	@ (80149b4 <gos_signalDaemonTask+0xf8>)
 8014928:	2416      	movs	r4, #22
 801492a:	fb04 f202 	mul.w	r2, r4, r2
 801492e:	4413      	add	r3, r2
 8014930:	330c      	adds	r3, #12
 8014932:	005b      	lsls	r3, r3, #1
 8014934:	440b      	add	r3, r1
 8014936:	889b      	ldrh	r3, [r3, #4]
 8014938:	4619      	mov	r1, r3
 801493a:	f7fe f86d 	bl	8012a18 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 801493e:	79ba      	ldrb	r2, [r7, #6]
 8014940:	79f9      	ldrb	r1, [r7, #7]
 8014942:	481c      	ldr	r0, [pc, #112]	@ (80149b4 <gos_signalDaemonTask+0xf8>)
 8014944:	4613      	mov	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	440b      	add	r3, r1
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	4403      	add	r3, r0
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	79ba      	ldrb	r2, [r7, #6]
 8014958:	4916      	ldr	r1, [pc, #88]	@ (80149b4 <gos_signalDaemonTask+0xf8>)
 801495a:	202c      	movs	r0, #44	@ 0x2c
 801495c:	fb00 f202 	mul.w	r2, r0, r2
 8014960:	440a      	add	r2, r1
 8014962:	322a      	adds	r2, #42	@ 0x2a
 8014964:	8812      	ldrh	r2, [r2, #0]
 8014966:	4610      	mov	r0, r2
 8014968:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 801496a:	4b13      	ldr	r3, [pc, #76]	@ (80149b8 <gos_signalDaemonTask+0xfc>)
 801496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801496e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8014972:	4618      	mov	r0, r3
 8014974:	f7fe f850 	bl	8012a18 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8014978:	79fb      	ldrb	r3, [r7, #7]
 801497a:	3301      	adds	r3, #1
 801497c:	71fb      	strb	r3, [r7, #7]
 801497e:	79fb      	ldrb	r3, [r7, #7]
 8014980:	2b05      	cmp	r3, #5
 8014982:	d9be      	bls.n	8014902 <gos_signalDaemonTask+0x46>
 8014984:	e000      	b.n	8014988 <gos_signalDaemonTask+0xcc>
                            break;
 8014986:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8014988:	79bb      	ldrb	r3, [r7, #6]
 801498a:	4a0a      	ldr	r2, [pc, #40]	@ (80149b4 <gos_signalDaemonTask+0xf8>)
 801498c:	212c      	movs	r1, #44	@ 0x2c
 801498e:	fb01 f303 	mul.w	r3, r1, r3
 8014992:	4413      	add	r3, r2
 8014994:	3328      	adds	r3, #40	@ 0x28
 8014996:	2249      	movs	r2, #73	@ 0x49
 8014998:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 801499a:	79bb      	ldrb	r3, [r7, #6]
 801499c:	3301      	adds	r3, #1
 801499e:	71bb      	strb	r3, [r7, #6]
 80149a0:	79bb      	ldrb	r3, [r7, #6]
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	d9a0      	bls.n	80148e8 <gos_signalDaemonTask+0x2c>
        else
        {
            // Unexpected error.
        }

        (void_t) gos_taskSleep(GOS_SIGNAL_DAEMON_POLL_TIME_MS);
 80149a6:	2032      	movs	r0, #50	@ 0x32
 80149a8:	f7fc ff00 	bl	80117ac <gos_taskSleep>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 80149ac:	e78d      	b.n	80148ca <gos_signalDaemonTask+0xe>
 80149ae:	bf00      	nop
 80149b0:	20007e7c 	.word	0x20007e7c
 80149b4:	20007df8 	.word	0x20007df8
 80149b8:	20001020 	.word	0x20001020

080149bc <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 80149c2:	23ae      	movs	r3, #174	@ 0xae
 80149c4:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 80149c6:	2300      	movs	r3, #0
 80149c8:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80149ca:	2300      	movs	r3, #0
 80149cc:	71bb      	strb	r3, [r7, #6]
 80149ce:	e024      	b.n	8014a1a <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 80149d0:	79bb      	ldrb	r3, [r7, #6]
 80149d2:	4a1e      	ldr	r2, [pc, #120]	@ (8014a4c <gos_sysmonInit+0x90>)
 80149d4:	011b      	lsls	r3, r3, #4
 80149d6:	4413      	add	r3, r2
 80149d8:	330c      	adds	r3, #12
 80149da:	2200      	movs	r2, #0
 80149dc:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 80149de:	79bb      	ldrb	r3, [r7, #6]
 80149e0:	4a1a      	ldr	r2, [pc, #104]	@ (8014a4c <gos_sysmonInit+0x90>)
 80149e2:	011b      	lsls	r3, r3, #4
 80149e4:	4413      	add	r3, r2
 80149e6:	3304      	adds	r3, #4
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 80149ec:	79bb      	ldrb	r3, [r7, #6]
 80149ee:	4a17      	ldr	r2, [pc, #92]	@ (8014a4c <gos_sysmonInit+0x90>)
 80149f0:	011b      	lsls	r3, r3, #4
 80149f2:	4413      	add	r3, r2
 80149f4:	3308      	adds	r3, #8
 80149f6:	2200      	movs	r2, #0
 80149f8:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 80149fa:	79bb      	ldrb	r3, [r7, #6]
 80149fc:	4a13      	ldr	r2, [pc, #76]	@ (8014a4c <gos_sysmonInit+0x90>)
 80149fe:	011b      	lsls	r3, r3, #4
 8014a00:	4413      	add	r3, r2
 8014a02:	3302      	adds	r3, #2
 8014a04:	2200      	movs	r2, #0
 8014a06:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 8014a08:	79bb      	ldrb	r3, [r7, #6]
 8014a0a:	4a10      	ldr	r2, [pc, #64]	@ (8014a4c <gos_sysmonInit+0x90>)
 8014a0c:	011b      	lsls	r3, r3, #4
 8014a0e:	4413      	add	r3, r2
 8014a10:	2200      	movs	r2, #0
 8014a12:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014a14:	79bb      	ldrb	r3, [r7, #6]
 8014a16:	3301      	adds	r3, #1
 8014a18:	71bb      	strb	r3, [r7, #6]
 8014a1a:	79bb      	ldrb	r3, [r7, #6]
 8014a1c:	2b17      	cmp	r3, #23
 8014a1e:	d9d7      	bls.n	80149d0 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 8014a20:	4a0b      	ldr	r2, [pc, #44]	@ (8014a50 <gos_sysmonInit+0x94>)
 8014a22:	490c      	ldr	r1, [pc, #48]	@ (8014a54 <gos_sysmonInit+0x98>)
 8014a24:	2000      	movs	r0, #0
 8014a26:	f7fe fcb9 	bl	801339c <gos_gcpRegisterPhysicalDriver>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	2b55      	cmp	r3, #85	@ 0x55
 8014a2e:	d108      	bne.n	8014a42 <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 8014a30:	2100      	movs	r1, #0
 8014a32:	4809      	ldr	r0, [pc, #36]	@ (8014a58 <gos_sysmonInit+0x9c>)
 8014a34:	f7fc fd28 	bl	8011488 <gos_taskRegister>
 8014a38:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 8014a3a:	2b55      	cmp	r3, #85	@ 0x55
 8014a3c:	d101      	bne.n	8014a42 <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 8014a3e:	2355      	movs	r3, #85	@ 0x55
 8014a40:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 8014a42:	79fb      	ldrb	r3, [r7, #7]
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3708      	adds	r7, #8
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	20008fec 	.word	0x20008fec
 8014a50:	08016391 	.word	0x08016391
 8014a54:	080163c9 	.word	0x080163c9
 8014a58:	2000108c 	.word	0x2000108c

08014a5c <gos_sysmonRegisterUserMessage>:

/*
 * Function: gos_sysmonRegisterUserMessage
 */
gos_result_t gos_sysmonRegisterUserMessage (gos_sysmonUserMessageDescriptor_t* pDesc)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 8014a64:	23ae      	movs	r3, #174	@ 0xae
 8014a66:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 8014a68:	2300      	movs	r3, #0
 8014a6a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d027      	beq.n	8014ac2 <gos_sysmonRegisterUserMessage+0x66>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d023      	beq.n	8014ac2 <gos_sysmonRegisterUserMessage+0x66>
    {
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	73bb      	strb	r3, [r7, #14]
 8014a7e:	e01d      	b.n	8014abc <gos_sysmonRegisterUserMessage+0x60>
        {
            if (userMessages[userMessageIndex].messageId == 0u &&
 8014a80:	7bbb      	ldrb	r3, [r7, #14]
 8014a82:	4a12      	ldr	r2, [pc, #72]	@ (8014acc <gos_sysmonRegisterUserMessage+0x70>)
 8014a84:	011b      	lsls	r3, r3, #4
 8014a86:	4413      	add	r3, r2
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d113      	bne.n	8014ab6 <gos_sysmonRegisterUserMessage+0x5a>
                userMessages[userMessageIndex].callback == NULL)
 8014a8e:	7bbb      	ldrb	r3, [r7, #14]
 8014a90:	4a0e      	ldr	r2, [pc, #56]	@ (8014acc <gos_sysmonRegisterUserMessage+0x70>)
 8014a92:	011b      	lsls	r3, r3, #4
 8014a94:	4413      	add	r3, r2
 8014a96:	330c      	adds	r3, #12
 8014a98:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == 0u &&
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d10b      	bne.n	8014ab6 <gos_sysmonRegisterUserMessage+0x5a>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 8014a9e:	7bbb      	ldrb	r3, [r7, #14]
 8014aa0:	011b      	lsls	r3, r3, #4
 8014aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8014acc <gos_sysmonRegisterUserMessage+0x70>)
 8014aa4:	4413      	add	r3, r2
 8014aa6:	2210      	movs	r2, #16
 8014aa8:	6879      	ldr	r1, [r7, #4]
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f002 fb7d 	bl	80171aa <memcpy>
                registerResult = GOS_SUCCESS;
 8014ab0:	2355      	movs	r3, #85	@ 0x55
 8014ab2:	73fb      	strb	r3, [r7, #15]
                break;
 8014ab4:	e005      	b.n	8014ac2 <gos_sysmonRegisterUserMessage+0x66>
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014ab6:	7bbb      	ldrb	r3, [r7, #14]
 8014ab8:	3301      	adds	r3, #1
 8014aba:	73bb      	strb	r3, [r7, #14]
 8014abc:	7bbb      	ldrb	r3, [r7, #14]
 8014abe:	2b17      	cmp	r3, #23
 8014ac0:	d9de      	bls.n	8014a80 <gos_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 8014ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3710      	adds	r7, #16
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	20008fec 	.word	0x20008fec

08014ad0 <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 8014ada:	2300      	movs	r3, #0
 8014adc:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 8014ae6:	1d39      	adds	r1, r7, #4
 8014ae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014aec:	9300      	str	r3, [sp, #0]
 8014aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8014af2:	4a33      	ldr	r2, [pc, #204]	@ (8014bc0 <gos_sysmonDaemonTask+0xf0>)
 8014af4:	2000      	movs	r0, #0
 8014af6:	f7fe fdab 	bl	8013650 <gos_gcpReceiveMessage>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b55      	cmp	r3, #85	@ 0x55
 8014afe:	d15a      	bne.n	8014bb6 <gos_sysmonDaemonTask+0xe6>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 8014b00:	88bb      	ldrh	r3, [r7, #4]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f000 f862 	bl	8014bcc <gos_sysmonGetLutIndex>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8014b0c:	79bb      	ldrb	r3, [r7, #6]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d002      	beq.n	8014b18 <gos_sysmonDaemonTask+0x48>
 8014b12:	79bb      	ldrb	r3, [r7, #6]
 8014b14:	2b10      	cmp	r3, #16
 8014b16:	d138      	bne.n	8014b8a <gos_sysmonDaemonTask+0xba>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014b18:	2300      	movs	r3, #0
 8014b1a:	71fb      	strb	r3, [r7, #7]
 8014b1c:	e031      	b.n	8014b82 <gos_sysmonDaemonTask+0xb2>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 8014b1e:	79fb      	ldrb	r3, [r7, #7]
 8014b20:	4a28      	ldr	r2, [pc, #160]	@ (8014bc4 <gos_sysmonDaemonTask+0xf4>)
 8014b22:	011b      	lsls	r3, r3, #4
 8014b24:	4413      	add	r3, r2
 8014b26:	881a      	ldrh	r2, [r3, #0]
 8014b28:	88bb      	ldrh	r3, [r7, #4]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d126      	bne.n	8014b7c <gos_sysmonDaemonTask+0xac>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 8014b2e:	79fb      	ldrb	r3, [r7, #7]
 8014b30:	4a24      	ldr	r2, [pc, #144]	@ (8014bc4 <gos_sysmonDaemonTask+0xf4>)
 8014b32:	011b      	lsls	r3, r3, #4
 8014b34:	4413      	add	r3, r2
 8014b36:	3304      	adds	r3, #4
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d00f      	beq.n	8014b5e <gos_sysmonDaemonTask+0x8e>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 8014b3e:	79fb      	ldrb	r3, [r7, #7]
 8014b40:	4a20      	ldr	r2, [pc, #128]	@ (8014bc4 <gos_sysmonDaemonTask+0xf4>)
 8014b42:	011b      	lsls	r3, r3, #4
 8014b44:	4413      	add	r3, r2
 8014b46:	3304      	adds	r3, #4
 8014b48:	6818      	ldr	r0, [r3, #0]
 8014b4a:	79fb      	ldrb	r3, [r7, #7]
 8014b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8014bc4 <gos_sysmonDaemonTask+0xf4>)
 8014b4e:	011b      	lsls	r3, r3, #4
 8014b50:	4413      	add	r3, r2
 8014b52:	3308      	adds	r3, #8
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	461a      	mov	r2, r3
 8014b58:	4919      	ldr	r1, [pc, #100]	@ (8014bc0 <gos_sysmonDaemonTask+0xf0>)
 8014b5a:	f002 fb26 	bl	80171aa <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 8014b5e:	79fb      	ldrb	r3, [r7, #7]
 8014b60:	4a18      	ldr	r2, [pc, #96]	@ (8014bc4 <gos_sysmonDaemonTask+0xf4>)
 8014b62:	011b      	lsls	r3, r3, #4
 8014b64:	4413      	add	r3, r2
 8014b66:	330c      	adds	r3, #12
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d006      	beq.n	8014b7c <gos_sysmonDaemonTask+0xac>
                        {
                        	userMessages[userMessageIndex].callback();
 8014b6e:	79fb      	ldrb	r3, [r7, #7]
 8014b70:	4a14      	ldr	r2, [pc, #80]	@ (8014bc4 <gos_sysmonDaemonTask+0xf4>)
 8014b72:	011b      	lsls	r3, r3, #4
 8014b74:	4413      	add	r3, r2
 8014b76:	330c      	adds	r3, #12
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8014b7c:	79fb      	ldrb	r3, [r7, #7]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	71fb      	strb	r3, [r7, #7]
 8014b82:	79fb      	ldrb	r3, [r7, #7]
 8014b84:	2b17      	cmp	r3, #23
 8014b86:	d9ca      	bls.n	8014b1e <gos_sysmonDaemonTask+0x4e>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8014b88:	e018      	b.n	8014bbc <gos_sysmonDaemonTask+0xec>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 8014b8a:	79bb      	ldrb	r3, [r7, #6]
 8014b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8014bc8 <gos_sysmonDaemonTask+0xf8>)
 8014b8e:	011b      	lsls	r3, r3, #4
 8014b90:	4413      	add	r3, r2
 8014b92:	330c      	adds	r3, #12
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d009      	beq.n	8014bae <gos_sysmonDaemonTask+0xde>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 8014b9a:	79bb      	ldrb	r3, [r7, #6]
 8014b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8014bc8 <gos_sysmonDaemonTask+0xf8>)
 8014b9e:	011b      	lsls	r3, r3, #4
 8014ba0:	4413      	add	r3, r2
 8014ba2:	330c      	adds	r3, #12
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	79ba      	ldrb	r2, [r7, #6]
 8014ba8:	4610      	mov	r0, r2
 8014baa:	4798      	blx	r3
 8014bac:	e799      	b.n	8014ae2 <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 8014bae:	2000      	movs	r0, #0
 8014bb0:	f000 f830 	bl	8014c14 <gos_sysmonSendResponse>
 8014bb4:	e795      	b.n	8014ae2 <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 8014bb6:	200a      	movs	r0, #10
 8014bb8:	f7fc fdf8 	bl	80117ac <gos_taskSleep>
        messageId = 0u;
 8014bbc:	e791      	b.n	8014ae2 <gos_sysmonDaemonTask+0x12>
 8014bbe:	bf00      	nop
 8014bc0:	20007ef4 	.word	0x20007ef4
 8014bc4:	20008fec 	.word	0x20008fec
 8014bc8:	0801ab40 	.word	0x0801ab40

08014bcc <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b085      	sub	sp, #20
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8014bda:	2300      	movs	r3, #0
 8014bdc:	73fb      	strb	r3, [r7, #15]
 8014bde:	e00a      	b.n	8014bf6 <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 8014be0:	7bfb      	ldrb	r3, [r7, #15]
 8014be2:	4a0b      	ldr	r2, [pc, #44]	@ (8014c10 <gos_sysmonGetLutIndex+0x44>)
 8014be4:	011b      	lsls	r3, r3, #4
 8014be6:	4413      	add	r3, r2
 8014be8:	881b      	ldrh	r3, [r3, #0]
 8014bea:	88fa      	ldrh	r2, [r7, #6]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d006      	beq.n	8014bfe <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8014bf0:	7bfb      	ldrb	r3, [r7, #15]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	73fb      	strb	r3, [r7, #15]
 8014bf6:	7bfb      	ldrb	r3, [r7, #15]
 8014bf8:	2b0f      	cmp	r3, #15
 8014bfa:	d9f1      	bls.n	8014be0 <gos_sysmonGetLutIndex+0x14>
 8014bfc:	e000      	b.n	8014c00 <gos_sysmonGetLutIndex+0x34>
        {
            break;
 8014bfe:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 8014c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3714      	adds	r7, #20
 8014c06:	46bd      	mov	sp, r7
 8014c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0c:	4770      	bx	lr
 8014c0e:	bf00      	nop
 8014c10:	0801ab40 	.word	0x0801ab40

08014c14 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af02      	add	r7, sp, #8
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 8014c1e:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 8014c20:	4a0c      	ldr	r2, [pc, #48]	@ (8014c54 <gos_sysmonSendResponse+0x40>)
 8014c22:	011b      	lsls	r3, r3, #4
 8014c24:	4413      	add	r3, r2
 8014c26:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8014c28:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8014c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8014c54 <gos_sysmonSendResponse+0x40>)
 8014c2c:	011b      	lsls	r3, r3, #4
 8014c2e:	4413      	add	r3, r2
 8014c30:	3304      	adds	r3, #4
 8014c32:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8014c34:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8014c36:	4807      	ldr	r0, [pc, #28]	@ (8014c54 <gos_sysmonSendResponse+0x40>)
 8014c38:	011b      	lsls	r3, r3, #4
 8014c3a:	4403      	add	r3, r0
 8014c3c:	3308      	adds	r3, #8
 8014c3e:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8014c40:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8014c44:	9000      	str	r0, [sp, #0]
 8014c46:	2000      	movs	r0, #0
 8014c48:	f7fe fbd0 	bl	80133ec <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 8014c4c:	bf00      	nop
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	0801ab40 	.word	0x0801ab40

08014c58 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	4603      	mov	r3, r0
 8014c60:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014c62:	79fb      	ldrb	r3, [r7, #7]
 8014c64:	4618      	mov	r0, r3
 8014c66:	f000 fb05 	bl	8015274 <gos_sysmonCheckMessage>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	4b06      	ldr	r3, [pc, #24]	@ (8014c88 <gos_sysmonHandlePingRequest+0x30>)
 8014c70:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 8014c72:	79fb      	ldrb	r3, [r7, #7]
 8014c74:	3301      	adds	r3, #1
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7ff ffcb 	bl	8014c14 <gos_sysmonSendResponse>
}
 8014c7e:	bf00      	nop
 8014c80:	3708      	adds	r7, #8
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}
 8014c86:	bf00      	nop
 8014c88:	20008ef4 	.word	0x20008ef4

08014c8c <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	4603      	mov	r3, r0
 8014c94:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014c96:	79fb      	ldrb	r3, [r7, #7]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f000 faeb 	bl	8015274 <gos_sysmonCheckMessage>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8014cd0 <gos_sysmonHandleCpuUsageGet+0x44>)
 8014ca4:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8014cd0 <gos_sysmonHandleCpuUsageGet+0x44>)
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	2b28      	cmp	r3, #40	@ 0x28
 8014cac:	d106      	bne.n	8014cbc <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 8014cae:	f7fb fbd3 	bl	8010458 <gos_kernelGetCpuUsage>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	4b06      	ldr	r3, [pc, #24]	@ (8014cd0 <gos_sysmonHandleCpuUsageGet+0x44>)
 8014cb8:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8014cbc:	79fb      	ldrb	r3, [r7, #7]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff ffa6 	bl	8014c14 <gos_sysmonSendResponse>
}
 8014cc8:	bf00      	nop
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}
 8014cd0:	20008ef8 	.word	0x20008ef8

08014cd4 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	4603      	mov	r3, r0
 8014cdc:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8014ce2:	2349      	movs	r3, #73	@ 0x49
 8014ce4:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014ce6:	79fb      	ldrb	r3, [r7, #7]
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f000 fac3 	bl	8015274 <gos_sysmonCheckMessage>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	4b66      	ldr	r3, [pc, #408]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cf4:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014cf6:	4b65      	ldr	r3, [pc, #404]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	2b28      	cmp	r3, #40	@ 0x28
 8014cfc:	f040 80c2 	bne.w	8014e84 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8014d00:	4b63      	ldr	r3, [pc, #396]	@ (8014e90 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8014d02:	881b      	ldrh	r3, [r3, #0]
 8014d04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d08:	4293      	cmp	r3, r2
 8014d0a:	d168      	bne.n	8014dde <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	81fb      	strh	r3, [r7, #14]
 8014d10:	e061      	b.n	8014dd6 <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 8014d12:	7b7b      	ldrb	r3, [r7, #13]
 8014d14:	2b36      	cmp	r3, #54	@ 0x36
 8014d16:	f000 80b4 	beq.w	8014e82 <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8014d1a:	89fb      	ldrh	r3, [r7, #14]
 8014d1c:	495d      	ldr	r1, [pc, #372]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fe f822 	bl	8012d68 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8014d24:	4b5b      	ldr	r3, [pc, #364]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d2c:	d045      	beq.n	8014dba <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8014d2e:	4b59      	ldr	r3, [pc, #356]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014d32:	4b56      	ldr	r3, [pc, #344]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d34:	84da      	strh	r2, [r3, #38]	@ 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8014d36:	4b57      	ldr	r3, [pc, #348]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014d3c:	4b53      	ldr	r3, [pc, #332]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8014d40:	4b54      	ldr	r3, [pc, #336]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014d46:	4b51      	ldr	r3, [pc, #324]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d48:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8014d4c:	4b51      	ldr	r3, [pc, #324]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d4e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8014d52:	4b4e      	ldr	r3, [pc, #312]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d54:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8014d58:	4b4e      	ldr	r3, [pc, #312]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d5a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d60:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8014d64:	4b4b      	ldr	r3, [pc, #300]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014d6a:	4b48      	ldr	r3, [pc, #288]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d6c:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8014d70:	4b48      	ldr	r3, [pc, #288]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d72:	79da      	ldrb	r2, [r3, #7]
 8014d74:	4b45      	ldr	r3, [pc, #276]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d76:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8014d78:	4b46      	ldr	r3, [pc, #280]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d7a:	799a      	ldrb	r2, [r3, #6]
 8014d7c:	4b43      	ldr	r3, [pc, #268]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d7e:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8014d80:	4b44      	ldr	r3, [pc, #272]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d84:	4a41      	ldr	r2, [pc, #260]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d86:	6293      	str	r3, [r2, #40]	@ 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8014d88:	4b42      	ldr	r3, [pc, #264]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d8a:	891a      	ldrh	r2, [r3, #8]
 8014d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d8e:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8014d90:	4b40      	ldr	r3, [pc, #256]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d92:	791a      	ldrb	r2, [r3, #4]
 8014d94:	4b3d      	ldr	r3, [pc, #244]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d96:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014d98:	4a3c      	ldr	r2, [pc, #240]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014d9c:	322e      	adds	r2, #46	@ 0x2e
 8014d9e:	334c      	adds	r3, #76	@ 0x4c
 8014da0:	cb03      	ldmia	r3!, {r0, r1}
 8014da2:	6010      	str	r0, [r2, #0]
 8014da4:	6051      	str	r1, [r2, #4]
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8014daa:	493b      	ldr	r1, [pc, #236]	@ (8014e98 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8014dac:	483b      	ldr	r0, [pc, #236]	@ (8014e9c <gos_sysmonHandleTaskDataGet+0x1c8>)
 8014dae:	f002 f9f4 	bl	801719a <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014db2:	4b36      	ldr	r3, [pc, #216]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014db4:	2228      	movs	r2, #40	@ 0x28
 8014db6:	701a      	strb	r2, [r3, #0]
 8014db8:	e004      	b.n	8014dc4 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8014dba:	4b34      	ldr	r3, [pc, #208]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dbc:	2263      	movs	r2, #99	@ 0x63
 8014dbe:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8014dc0:	2336      	movs	r3, #54	@ 0x36
 8014dc2:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8014dc4:	79fb      	ldrb	r3, [r7, #7]
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7ff ff22 	bl	8014c14 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014dd0:	89fb      	ldrh	r3, [r7, #14]
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	81fb      	strh	r3, [r7, #14]
 8014dd6:	89fb      	ldrh	r3, [r7, #14]
 8014dd8:	2b0f      	cmp	r3, #15
 8014dda:	d99a      	bls.n	8014d12 <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8014ddc:	e052      	b.n	8014e84 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8014dde:	4b2c      	ldr	r3, [pc, #176]	@ (8014e90 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8014de0:	881b      	ldrh	r3, [r3, #0]
 8014de2:	492c      	ldr	r1, [pc, #176]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fd ffbf 	bl	8012d68 <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8014dea:	4b2a      	ldr	r3, [pc, #168]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014dec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014dee:	4b27      	ldr	r3, [pc, #156]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014df0:	84da      	strh	r2, [r3, #38]	@ 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8014df2:	4b28      	ldr	r3, [pc, #160]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014df4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014df8:	4b24      	ldr	r3, [pc, #144]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014dfa:	859a      	strh	r2, [r3, #44]	@ 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8014dfc:	4b25      	ldr	r3, [pc, #148]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014dfe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014e02:	4b22      	ldr	r3, [pc, #136]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e04:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8014e08:	4b22      	ldr	r3, [pc, #136]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e0a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8014e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e10:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8014e14:	4b1f      	ldr	r3, [pc, #124]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e16:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e1c:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8014e20:	4b1c      	ldr	r3, [pc, #112]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014e26:	4b19      	ldr	r3, [pc, #100]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e28:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8014e2c:	4b19      	ldr	r3, [pc, #100]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e2e:	79da      	ldrb	r2, [r3, #7]
 8014e30:	4b16      	ldr	r3, [pc, #88]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e32:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8014e34:	4b17      	ldr	r3, [pc, #92]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e36:	799a      	ldrb	r2, [r3, #6]
 8014e38:	4b14      	ldr	r3, [pc, #80]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e3a:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8014e3c:	4b15      	ldr	r3, [pc, #84]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e40:	4a12      	ldr	r2, [pc, #72]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e42:	6293      	str	r3, [r2, #40]	@ 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8014e44:	4b13      	ldr	r3, [pc, #76]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e46:	891a      	ldrh	r2, [r3, #8]
 8014e48:	4b10      	ldr	r3, [pc, #64]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e4a:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8014e4c:	4b11      	ldr	r3, [pc, #68]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e4e:	791a      	ldrb	r2, [r3, #4]
 8014e50:	4b0e      	ldr	r3, [pc, #56]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e52:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014e54:	4a0d      	ldr	r2, [pc, #52]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e56:	4b0f      	ldr	r3, [pc, #60]	@ (8014e94 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8014e58:	322e      	adds	r2, #46	@ 0x2e
 8014e5a:	334c      	adds	r3, #76	@ 0x4c
 8014e5c:	cb03      	ldmia	r3!, {r0, r1}
 8014e5e:	6010      	str	r0, [r2, #0]
 8014e60:	6051      	str	r1, [r2, #4]
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8014e66:	490c      	ldr	r1, [pc, #48]	@ (8014e98 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8014e68:	480c      	ldr	r0, [pc, #48]	@ (8014e9c <gos_sysmonHandleTaskDataGet+0x1c8>)
 8014e6a:	f002 f996 	bl	801719a <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014e6e:	4b07      	ldr	r3, [pc, #28]	@ (8014e8c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8014e70:	2228      	movs	r2, #40	@ 0x28
 8014e72:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8014e74:	79fb      	ldrb	r3, [r7, #7]
 8014e76:	3301      	adds	r3, #1
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7ff feca 	bl	8014c14 <gos_sysmonSendResponse>
}
 8014e80:	e000      	b.n	8014e84 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 8014e82:	bf00      	nop
}
 8014e84:	bf00      	nop
 8014e86:	3710      	adds	r7, #16
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}
 8014e8c:	20008f00 	.word	0x20008f00
 8014e90:	20008efc 	.word	0x20008efc
 8014e94:	20008f58 	.word	0x20008f58
 8014e98:	20008f62 	.word	0x20008f62
 8014e9c:	20008f06 	.word	0x20008f06

08014ea0 <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8014eae:	2349      	movs	r3, #73	@ 0x49
 8014eb0:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014eb2:	79fb      	ldrb	r3, [r7, #7]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f000 f9dd 	bl	8015274 <gos_sysmonCheckMessage>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	4b49      	ldr	r3, [pc, #292]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014ec0:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8014ec2:	4b48      	ldr	r3, [pc, #288]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	2b28      	cmp	r3, #40	@ 0x28
 8014ec8:	f040 8087 	bne.w	8014fda <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8014ecc:	4b46      	ldr	r3, [pc, #280]	@ (8014fe8 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8014ece:	881b      	ldrh	r3, [r3, #0]
 8014ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ed4:	4293      	cmp	r3, r2
 8014ed6:	d14a      	bne.n	8014f6e <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014ed8:	2300      	movs	r3, #0
 8014eda:	81fb      	strh	r3, [r7, #14]
 8014edc:	e043      	b.n	8014f66 <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 8014ede:	7b7b      	ldrb	r3, [r7, #13]
 8014ee0:	2b36      	cmp	r3, #54	@ 0x36
 8014ee2:	d079      	beq.n	8014fd8 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8014ee4:	89fb      	ldrh	r3, [r7, #14]
 8014ee6:	4941      	ldr	r1, [pc, #260]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fd ff3d 	bl	8012d68 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8014eee:	4b3f      	ldr	r3, [pc, #252]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014ef6:	d028      	beq.n	8014f4a <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8014ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014efa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014efe:	4b39      	ldr	r3, [pc, #228]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f00:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8014f02:	4b3a      	ldr	r3, [pc, #232]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f04:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014f08:	4b36      	ldr	r3, [pc, #216]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f0a:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8014f0c:	4b37      	ldr	r3, [pc, #220]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014f12:	4b34      	ldr	r3, [pc, #208]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f14:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8014f16:	4b35      	ldr	r3, [pc, #212]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f18:	799a      	ldrb	r2, [r3, #6]
 8014f1a:	4b32      	ldr	r3, [pc, #200]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f1c:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8014f1e:	4b33      	ldr	r3, [pc, #204]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f22:	4a30      	ldr	r2, [pc, #192]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f24:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8014f28:	4b30      	ldr	r3, [pc, #192]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f2a:	791a      	ldrb	r2, [r3, #4]
 8014f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f2e:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014f30:	4a2c      	ldr	r2, [pc, #176]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f32:	4b2e      	ldr	r3, [pc, #184]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f34:	3207      	adds	r2, #7
 8014f36:	334c      	adds	r3, #76	@ 0x4c
 8014f38:	cb03      	ldmia	r3!, {r0, r1}
 8014f3a:	6010      	str	r0, [r2, #0]
 8014f3c:	6051      	str	r1, [r2, #4]
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014f42:	4b28      	ldr	r3, [pc, #160]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f44:	2228      	movs	r2, #40	@ 0x28
 8014f46:	701a      	strb	r2, [r3, #0]
 8014f48:	e004      	b.n	8014f54 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8014f4a:	4b26      	ldr	r3, [pc, #152]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f4c:	2263      	movs	r2, #99	@ 0x63
 8014f4e:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8014f50:	2336      	movs	r3, #54	@ 0x36
 8014f52:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8014f54:	79fb      	ldrb	r3, [r7, #7]
 8014f56:	3301      	adds	r3, #1
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff fe5a 	bl	8014c14 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8014f60:	89fb      	ldrh	r3, [r7, #14]
 8014f62:	3301      	adds	r3, #1
 8014f64:	81fb      	strh	r3, [r7, #14]
 8014f66:	89fb      	ldrh	r3, [r7, #14]
 8014f68:	2b0f      	cmp	r3, #15
 8014f6a:	d9b8      	bls.n	8014ede <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8014f6c:	e035      	b.n	8014fda <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8014f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8014fe8 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8014f70:	881b      	ldrh	r3, [r3, #0]
 8014f72:	491e      	ldr	r1, [pc, #120]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7fd fef7 	bl	8012d68 <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8014f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014f80:	4b18      	ldr	r3, [pc, #96]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f82:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8014f84:	4b19      	ldr	r3, [pc, #100]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014f8a:	4b16      	ldr	r3, [pc, #88]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f8c:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8014f8e:	4b17      	ldr	r3, [pc, #92]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f90:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014f94:	4b13      	ldr	r3, [pc, #76]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f96:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8014f98:	4b14      	ldr	r3, [pc, #80]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014f9a:	799a      	ldrb	r2, [r3, #6]
 8014f9c:	4b11      	ldr	r3, [pc, #68]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014f9e:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8014fa0:	4b12      	ldr	r3, [pc, #72]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014fa6:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8014faa:	4b10      	ldr	r3, [pc, #64]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014fac:	791a      	ldrb	r2, [r3, #4]
 8014fae:	4b0d      	ldr	r3, [pc, #52]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014fb0:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8014fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8014fec <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8014fb6:	3207      	adds	r2, #7
 8014fb8:	334c      	adds	r3, #76	@ 0x4c
 8014fba:	cb03      	ldmia	r3!, {r0, r1}
 8014fbc:	6010      	str	r0, [r2, #0]
 8014fbe:	6051      	str	r1, [r2, #4]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8014fc4:	4b07      	ldr	r3, [pc, #28]	@ (8014fe4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8014fc6:	2228      	movs	r2, #40	@ 0x28
 8014fc8:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8014fca:	79fb      	ldrb	r3, [r7, #7]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff fe1f 	bl	8014c14 <gos_sysmonSendResponse>
}
 8014fd6:	e000      	b.n	8014fda <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 8014fd8:	bf00      	nop
}
 8014fda:	bf00      	nop
 8014fdc:	3710      	adds	r7, #16
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	20008f40 	.word	0x20008f40
 8014fe8:	20008efc 	.word	0x20008efc
 8014fec:	20008f58 	.word	0x20008f58

08014ff0 <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b082      	sub	sp, #8
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8014ffa:	79fb      	ldrb	r3, [r7, #7]
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f000 f939 	bl	8015274 <gos_sysmonCheckMessage>
 8015002:	4603      	mov	r3, r0
 8015004:	461a      	mov	r2, r3
 8015006:	4b63      	ldr	r3, [pc, #396]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 8015008:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 801500a:	4b62      	ldr	r3, [pc, #392]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	2b28      	cmp	r3, #40	@ 0x28
 8015010:	f040 80b5 	bne.w	801517e <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 8015014:	4b60      	ldr	r3, [pc, #384]	@ (8015198 <gos_sysmonHandleTaskModification+0x1a8>)
 8015016:	881b      	ldrh	r3, [r3, #0]
 8015018:	4960      	ldr	r1, [pc, #384]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 801501a:	4618      	mov	r0, r3
 801501c:	f7fd fea4 	bl	8012d68 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 8015020:	4b5d      	ldr	r3, [pc, #372]	@ (8015198 <gos_sysmonHandleTaskModification+0x1a8>)
 8015022:	789b      	ldrb	r3, [r3, #2]
 8015024:	2b4a      	cmp	r3, #74	@ 0x4a
 8015026:	f300 80a7 	bgt.w	8015178 <gos_sysmonHandleTaskModification+0x188>
 801502a:	2b31      	cmp	r3, #49	@ 0x31
 801502c:	da04      	bge.n	8015038 <gos_sysmonHandleTaskModification+0x48>
 801502e:	2b0c      	cmp	r3, #12
 8015030:	d03e      	beq.n	80150b0 <gos_sysmonHandleTaskModification+0xc0>
 8015032:	2b22      	cmp	r3, #34	@ 0x22
 8015034:	d04c      	beq.n	80150d0 <gos_sysmonHandleTaskModification+0xe0>
 8015036:	e09f      	b.n	8015178 <gos_sysmonHandleTaskModification+0x188>
 8015038:	3b31      	subs	r3, #49	@ 0x31
 801503a:	2b19      	cmp	r3, #25
 801503c:	f200 809c 	bhi.w	8015178 <gos_sysmonHandleTaskModification+0x188>
 8015040:	a201      	add	r2, pc, #4	@ (adr r2, 8015048 <gos_sysmonHandleTaskModification+0x58>)
 8015042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015046:	bf00      	nop
 8015048:	080150f1 	.word	0x080150f1
 801504c:	08015179 	.word	0x08015179
 8015050:	08015179 	.word	0x08015179
 8015054:	08015111 	.word	0x08015111
 8015058:	08015179 	.word	0x08015179
 801505c:	08015179 	.word	0x08015179
 8015060:	08015179 	.word	0x08015179
 8015064:	08015179 	.word	0x08015179
 8015068:	08015179 	.word	0x08015179
 801506c:	08015179 	.word	0x08015179
 8015070:	08015179 	.word	0x08015179
 8015074:	08015179 	.word	0x08015179
 8015078:	08015179 	.word	0x08015179
 801507c:	08015179 	.word	0x08015179
 8015080:	08015139 	.word	0x08015139
 8015084:	08015179 	.word	0x08015179
 8015088:	08015179 	.word	0x08015179
 801508c:	08015179 	.word	0x08015179
 8015090:	08015179 	.word	0x08015179
 8015094:	08015179 	.word	0x08015179
 8015098:	08015179 	.word	0x08015179
 801509c:	08015179 	.word	0x08015179
 80150a0:	08015179 	.word	0x08015179
 80150a4:	08015179 	.word	0x08015179
 80150a8:	08015179 	.word	0x08015179
 80150ac:	08015159 	.word	0x08015159
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 80150b0:	4b3a      	ldr	r3, [pc, #232]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 80150b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7fc fcd1 	bl	8011a5c <gos_taskSuspend>
 80150ba:	4603      	mov	r3, r0
 80150bc:	2b55      	cmp	r3, #85	@ 0x55
 80150be:	d103      	bne.n	80150c8 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80150c0:	4b34      	ldr	r3, [pc, #208]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 80150c2:	2228      	movs	r2, #40	@ 0x28
 80150c4:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80150c6:	e05a      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80150c8:	4b32      	ldr	r3, [pc, #200]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 80150ca:	2263      	movs	r2, #99	@ 0x63
 80150cc:	701a      	strb	r2, [r3, #0]
                 break;
 80150ce:	e056      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 80150d0:	4b32      	ldr	r3, [pc, #200]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 80150d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7fc fde3 	bl	8011ca0 <gos_taskResume>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b55      	cmp	r3, #85	@ 0x55
 80150de:	d103      	bne.n	80150e8 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80150e0:	4b2c      	ldr	r3, [pc, #176]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 80150e2:	2228      	movs	r2, #40	@ 0x28
 80150e4:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80150e6:	e04a      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80150e8:	4b2a      	ldr	r3, [pc, #168]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 80150ea:	2263      	movs	r2, #99	@ 0x63
 80150ec:	701a      	strb	r2, [r3, #0]
                 break;
 80150ee:	e046      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 80150f0:	4b2a      	ldr	r3, [pc, #168]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 80150f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7fd f87d 	bl	80121f4 <gos_taskDelete>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b55      	cmp	r3, #85	@ 0x55
 80150fe:	d103      	bne.n	8015108 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015100:	4b24      	ldr	r3, [pc, #144]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 8015102:	2228      	movs	r2, #40	@ 0x28
 8015104:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015106:	e03a      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8015108:	4b22      	ldr	r3, [pc, #136]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 801510a:	2263      	movs	r2, #99	@ 0x63
 801510c:	701a      	strb	r2, [r3, #0]
                 break;
 801510e:	e036      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 8015110:	4b22      	ldr	r3, [pc, #136]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 8015112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015114:	4a20      	ldr	r2, [pc, #128]	@ (8015198 <gos_sysmonHandleTaskModification+0x1a8>)
 8015116:	f8d2 2003 	ldr.w	r2, [r2, #3]
 801511a:	4611      	mov	r1, r2
 801511c:	4618      	mov	r0, r3
 801511e:	f7fc fe6d 	bl	8011dfc <gos_taskBlock>
 8015122:	4603      	mov	r3, r0
 8015124:	2b55      	cmp	r3, #85	@ 0x55
 8015126:	d103      	bne.n	8015130 <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015128:	4b1a      	ldr	r3, [pc, #104]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 801512a:	2228      	movs	r2, #40	@ 0x28
 801512c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801512e:	e026      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8015130:	4b18      	ldr	r3, [pc, #96]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 8015132:	2263      	movs	r2, #99	@ 0x63
 8015134:	701a      	strb	r2, [r3, #0]
                 break;
 8015136:	e022      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 8015138:	4b18      	ldr	r3, [pc, #96]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 801513a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801513c:	4618      	mov	r0, r3
 801513e:	f7fc ff6f 	bl	8012020 <gos_taskUnblock>
 8015142:	4603      	mov	r3, r0
 8015144:	2b55      	cmp	r3, #85	@ 0x55
 8015146:	d103      	bne.n	8015150 <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015148:	4b12      	ldr	r3, [pc, #72]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 801514a:	2228      	movs	r2, #40	@ 0x28
 801514c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801514e:	e016      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8015150:	4b10      	ldr	r3, [pc, #64]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 8015152:	2263      	movs	r2, #99	@ 0x63
 8015154:	701a      	strb	r2, [r3, #0]
                 break;
 8015156:	e012      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 8015158:	4b10      	ldr	r3, [pc, #64]	@ (801519c <gos_sysmonHandleTaskModification+0x1ac>)
 801515a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801515c:	4618      	mov	r0, r3
 801515e:	f7fc fbb7 	bl	80118d0 <gos_taskWakeup>
 8015162:	4603      	mov	r3, r0
 8015164:	2b55      	cmp	r3, #85	@ 0x55
 8015166:	d103      	bne.n	8015170 <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015168:	4b0a      	ldr	r3, [pc, #40]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 801516a:	2228      	movs	r2, #40	@ 0x28
 801516c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 801516e:	e006      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8015170:	4b08      	ldr	r3, [pc, #32]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 8015172:	2263      	movs	r2, #99	@ 0x63
 8015174:	701a      	strb	r2, [r3, #0]
                 break;
 8015176:	e002      	b.n	801517e <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8015178:	4b06      	ldr	r3, [pc, #24]	@ (8015194 <gos_sysmonHandleTaskModification+0x1a4>)
 801517a:	2263      	movs	r2, #99	@ 0x63
 801517c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 801517e:	79fb      	ldrb	r3, [r7, #7]
 8015180:	3301      	adds	r3, #1
 8015182:	b2db      	uxtb	r3, r3
 8015184:	4618      	mov	r0, r3
 8015186:	f7ff fd45 	bl	8014c14 <gos_sysmonSendResponse>
}
 801518a:	bf00      	nop
 801518c:	3708      	adds	r7, #8
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}
 8015192:	bf00      	nop
 8015194:	20008fcc 	.word	0x20008fcc
 8015198:	20008fc4 	.word	0x20008fc4
 801519c:	20008f58 	.word	0x20008f58

080151a0 <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 80151aa:	79fb      	ldrb	r3, [r7, #7]
 80151ac:	4618      	mov	r0, r3
 80151ae:	f000 f861 	bl	8015274 <gos_sysmonCheckMessage>
 80151b2:	4603      	mov	r3, r0
 80151b4:	461a      	mov	r2, r3
 80151b6:	4b0e      	ldr	r3, [pc, #56]	@ (80151f0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 80151b8:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 80151ba:	4b0d      	ldr	r3, [pc, #52]	@ (80151f0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	2b28      	cmp	r3, #40	@ 0x28
 80151c0:	d10c      	bne.n	80151dc <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 80151c2:	480c      	ldr	r0, [pc, #48]	@ (80151f4 <gos_sysmonHandleSysRuntimeGet+0x54>)
 80151c4:	f000 f8d8 	bl	8015378 <gos_runTimeGet>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b55      	cmp	r3, #85	@ 0x55
 80151cc:	d103      	bne.n	80151d6 <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80151ce:	4b08      	ldr	r3, [pc, #32]	@ (80151f0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 80151d0:	2228      	movs	r2, #40	@ 0x28
 80151d2:	701a      	strb	r2, [r3, #0]
 80151d4:	e002      	b.n	80151dc <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80151d6:	4b06      	ldr	r3, [pc, #24]	@ (80151f0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 80151d8:	2263      	movs	r2, #99	@ 0x63
 80151da:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 80151dc:	79fb      	ldrb	r3, [r7, #7]
 80151de:	3301      	adds	r3, #1
 80151e0:	b2db      	uxtb	r3, r3
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7ff fd16 	bl	8014c14 <gos_sysmonSendResponse>
}
 80151e8:	bf00      	nop
 80151ea:	3708      	adds	r7, #8
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	20008fd0 	.word	0x20008fd0
 80151f4:	20008fd1 	.word	0x20008fd1

080151f8 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b082      	sub	sp, #8
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	4603      	mov	r3, r0
 8015200:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8015202:	79fb      	ldrb	r3, [r7, #7]
 8015204:	4618      	mov	r0, r3
 8015206:	f000 f835 	bl	8015274 <gos_sysmonCheckMessage>
 801520a:	4603      	mov	r3, r0
 801520c:	461a      	mov	r2, r3
 801520e:	4b0e      	ldr	r3, [pc, #56]	@ (8015248 <gos_sysmonHandleSystimeSet+0x50>)
 8015210:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8015212:	4b0d      	ldr	r3, [pc, #52]	@ (8015248 <gos_sysmonHandleSystimeSet+0x50>)
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	2b28      	cmp	r3, #40	@ 0x28
 8015218:	d10c      	bne.n	8015234 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 801521a:	480c      	ldr	r0, [pc, #48]	@ (801524c <gos_sysmonHandleSystimeSet+0x54>)
 801521c:	f000 f890 	bl	8015340 <gos_timeSet>
 8015220:	4603      	mov	r3, r0
 8015222:	2b55      	cmp	r3, #85	@ 0x55
 8015224:	d103      	bne.n	801522e <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8015226:	4b08      	ldr	r3, [pc, #32]	@ (8015248 <gos_sysmonHandleSystimeSet+0x50>)
 8015228:	2228      	movs	r2, #40	@ 0x28
 801522a:	701a      	strb	r2, [r3, #0]
 801522c:	e002      	b.n	8015234 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 801522e:	4b06      	ldr	r3, [pc, #24]	@ (8015248 <gos_sysmonHandleSystimeSet+0x50>)
 8015230:	2263      	movs	r2, #99	@ 0x63
 8015232:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8015234:	79fb      	ldrb	r3, [r7, #7]
 8015236:	3301      	adds	r3, #1
 8015238:	b2db      	uxtb	r3, r3
 801523a:	4618      	mov	r0, r3
 801523c:	f7ff fcea 	bl	8014c14 <gos_sysmonSendResponse>
}
 8015240:	bf00      	nop
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	20008fe8 	.word	0x20008fe8
 801524c:	20008fdc 	.word	0x20008fdc

08015250 <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	4603      	mov	r3, r0
 8015258:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 801525a:	79fb      	ldrb	r3, [r7, #7]
 801525c:	4618      	mov	r0, r3
 801525e:	f000 f809 	bl	8015274 <gos_sysmonCheckMessage>
 8015262:	4603      	mov	r3, r0
 8015264:	2b28      	cmp	r3, #40	@ 0x28
 8015266:	d101      	bne.n	801526c <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 8015268:	f7fb f908 	bl	801047c <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 801526c:	bf00      	nop
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	4603      	mov	r3, r0
 801527c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 801527e:	2328      	movs	r3, #40	@ 0x28
 8015280:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 8015282:	79fb      	ldrb	r3, [r7, #7]
 8015284:	4a0d      	ldr	r2, [pc, #52]	@ (80152bc <gos_sysmonCheckMessage+0x48>)
 8015286:	011b      	lsls	r3, r3, #4
 8015288:	4413      	add	r3, r2
 801528a:	3304      	adds	r3, #4
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d00f      	beq.n	80152b2 <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 8015292:	79fb      	ldrb	r3, [r7, #7]
 8015294:	4a09      	ldr	r2, [pc, #36]	@ (80152bc <gos_sysmonCheckMessage+0x48>)
 8015296:	011b      	lsls	r3, r3, #4
 8015298:	4413      	add	r3, r2
 801529a:	3304      	adds	r3, #4
 801529c:	6818      	ldr	r0, [r3, #0]
 801529e:	79fb      	ldrb	r3, [r7, #7]
 80152a0:	4a06      	ldr	r2, [pc, #24]	@ (80152bc <gos_sysmonCheckMessage+0x48>)
 80152a2:	011b      	lsls	r3, r3, #4
 80152a4:	4413      	add	r3, r2
 80152a6:	3308      	adds	r3, #8
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	461a      	mov	r2, r3
 80152ac:	4904      	ldr	r1, [pc, #16]	@ (80152c0 <gos_sysmonCheckMessage+0x4c>)
 80152ae:	f001 ff7c 	bl	80171aa <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 80152b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3710      	adds	r7, #16
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	0801ab40 	.word	0x0801ab40
 80152c0:	20007ef4 	.word	0x20007ef4

080152c4 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_ERROR;
 80152ca:	23ae      	movs	r3, #174	@ 0xae
 80152cc:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 80152ce:	480a      	ldr	r0, [pc, #40]	@ (80152f8 <gos_timeInit+0x34>)
 80152d0:	f7ff fa50 	bl	8014774 <gos_signalCreate>
 80152d4:	4603      	mov	r3, r0
 80152d6:	2b55      	cmp	r3, #85	@ 0x55
 80152d8:	d108      	bne.n	80152ec <gos_timeInit+0x28>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) == GOS_SUCCESS
 80152da:	4908      	ldr	r1, [pc, #32]	@ (80152fc <gos_timeInit+0x38>)
 80152dc:	4808      	ldr	r0, [pc, #32]	@ (8015300 <gos_timeInit+0x3c>)
 80152de:	f7fc f8d3 	bl	8011488 <gos_taskRegister>
 80152e2:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 80152e4:	2b55      	cmp	r3, #85	@ 0x55
 80152e6:	d101      	bne.n	80152ec <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_SUCCESS;
 80152e8:	2355      	movs	r3, #85	@ 0x55
 80152ea:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 80152ec:	79fb      	ldrb	r3, [r7, #7]
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3708      	adds	r7, #8
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}
 80152f6:	bf00      	nop
 80152f8:	20009178 	.word	0x20009178
 80152fc:	20009176 	.word	0x20009176
 8015300:	20001104 	.word	0x20001104

08015304 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8015304:	b480      	push	{r7}
 8015306:	b085      	sub	sp, #20
 8015308:	af00      	add	r7, sp, #0
 801530a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 801530c:	23ae      	movs	r3, #174	@ 0xae
 801530e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d00a      	beq.n	801532c <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4908      	ldr	r1, [pc, #32]	@ (801533c <gos_timeGet+0x38>)
 801531a:	461a      	mov	r2, r3
 801531c:	460b      	mov	r3, r1
 801531e:	cb03      	ldmia	r3!, {r0, r1}
 8015320:	6010      	str	r0, [r2, #0]
 8015322:	6051      	str	r1, [r2, #4]
 8015324:	881b      	ldrh	r3, [r3, #0]
 8015326:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 8015328:	2355      	movs	r3, #85	@ 0x55
 801532a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 801532c:	7bfb      	ldrb	r3, [r7, #15]
}
 801532e:	4618      	mov	r0, r3
 8015330:	3714      	adds	r7, #20
 8015332:	46bd      	mov	sp, r7
 8015334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop
 801533c:	200010f8 	.word	0x200010f8

08015340 <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 8015340:	b480      	push	{r7}
 8015342:	b085      	sub	sp, #20
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 8015348:	23ae      	movs	r3, #174	@ 0xae
 801534a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d008      	beq.n	8015364 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 8015352:	4b08      	ldr	r3, [pc, #32]	@ (8015374 <gos_timeSet+0x34>)
 8015354:	687a      	ldr	r2, [r7, #4]
 8015356:	6810      	ldr	r0, [r2, #0]
 8015358:	6851      	ldr	r1, [r2, #4]
 801535a:	c303      	stmia	r3!, {r0, r1}
 801535c:	8912      	ldrh	r2, [r2, #8]
 801535e:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 8015360:	2355      	movs	r3, #85	@ 0x55
 8015362:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 8015364:	7bfb      	ldrb	r3, [r7, #15]
}
 8015366:	4618      	mov	r0, r3
 8015368:	3714      	adds	r7, #20
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop
 8015374:	200010f8 	.word	0x200010f8

08015378 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 8015378:	b480      	push	{r7}
 801537a:	b085      	sub	sp, #20
 801537c:	af00      	add	r7, sp, #0
 801537e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 8015380:	23ae      	movs	r3, #174	@ 0xae
 8015382:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00a      	beq.n	80153a0 <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	4908      	ldr	r1, [pc, #32]	@ (80153b0 <gos_runTimeGet+0x38>)
 801538e:	461a      	mov	r2, r3
 8015390:	460b      	mov	r3, r1
 8015392:	cb03      	ldmia	r3!, {r0, r1}
 8015394:	6010      	str	r0, [r2, #0]
 8015396:	6051      	str	r1, [r2, #4]
 8015398:	781b      	ldrb	r3, [r3, #0]
 801539a:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 801539c:	2355      	movs	r3, #85	@ 0x55
 801539e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 80153a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3714      	adds	r7, #20
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	2000916c 	.word	0x2000916c

080153b4 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 80153b4:	b480      	push	{r7}
 80153b6:	b085      	sub	sp, #20
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	460b      	mov	r3, r1
 80153be:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 80153c0:	23ae      	movs	r3, #174	@ 0xae
 80153c2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	f000 80e4 	beq.w	8015594 <gos_timeAddMilliseconds+0x1e0>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	881b      	ldrh	r3, [r3, #0]
 80153d0:	b29a      	uxth	r2, r3
 80153d2:	887b      	ldrh	r3, [r7, #2]
 80153d4:	4413      	add	r3, r2
 80153d6:	b29a      	uxth	r2, r3
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	881b      	ldrh	r3, [r3, #0]
 80153e0:	b29b      	uxth	r3, r3
 80153e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80153e6:	f0c0 80d3 	bcc.w	8015590 <gos_timeAddMilliseconds+0x1dc>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	789a      	ldrb	r2, [r3, #2]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	496b      	ldr	r1, [pc, #428]	@ (80155a4 <gos_timeAddMilliseconds+0x1f0>)
 80153f6:	fba1 1303 	umull	r1, r3, r1, r3
 80153fa:	099b      	lsrs	r3, r3, #6
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	4413      	add	r3, r2
 8015402:	b2da      	uxtb	r2, r3
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	881b      	ldrh	r3, [r3, #0]
 801540c:	b29b      	uxth	r3, r3
 801540e:	4a65      	ldr	r2, [pc, #404]	@ (80155a4 <gos_timeAddMilliseconds+0x1f0>)
 8015410:	fba2 1203 	umull	r1, r2, r2, r3
 8015414:	0992      	lsrs	r2, r2, #6
 8015416:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801541a:	fb01 f202 	mul.w	r2, r1, r2
 801541e:	1a9b      	subs	r3, r3, r2
 8015420:	b29a      	uxth	r2, r3
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	789b      	ldrb	r3, [r3, #2]
 801542a:	2b3b      	cmp	r3, #59	@ 0x3b
 801542c:	f240 80b0 	bls.w	8015590 <gos_timeAddMilliseconds+0x1dc>
            {
                pTime->minutes += pTime->seconds / 60u;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	78da      	ldrb	r2, [r3, #3]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	789b      	ldrb	r3, [r3, #2]
 8015438:	495b      	ldr	r1, [pc, #364]	@ (80155a8 <gos_timeAddMilliseconds+0x1f4>)
 801543a:	fba1 1303 	umull	r1, r3, r1, r3
 801543e:	095b      	lsrs	r3, r3, #5
 8015440:	b2db      	uxtb	r3, r3
 8015442:	4413      	add	r3, r2
 8015444:	b2da      	uxtb	r2, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	789a      	ldrb	r2, [r3, #2]
 801544e:	4b56      	ldr	r3, [pc, #344]	@ (80155a8 <gos_timeAddMilliseconds+0x1f4>)
 8015450:	fba3 1302 	umull	r1, r3, r3, r2
 8015454:	0959      	lsrs	r1, r3, #5
 8015456:	460b      	mov	r3, r1
 8015458:	011b      	lsls	r3, r3, #4
 801545a:	1a5b      	subs	r3, r3, r1
 801545c:	009b      	lsls	r3, r3, #2
 801545e:	1ad3      	subs	r3, r2, r3
 8015460:	b2da      	uxtb	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	78db      	ldrb	r3, [r3, #3]
 801546a:	2b3b      	cmp	r3, #59	@ 0x3b
 801546c:	f240 8090 	bls.w	8015590 <gos_timeAddMilliseconds+0x1dc>
                {
                    pTime->hours += pTime->minutes / 60u;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	791a      	ldrb	r2, [r3, #4]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	78db      	ldrb	r3, [r3, #3]
 8015478:	494b      	ldr	r1, [pc, #300]	@ (80155a8 <gos_timeAddMilliseconds+0x1f4>)
 801547a:	fba1 1303 	umull	r1, r3, r1, r3
 801547e:	095b      	lsrs	r3, r3, #5
 8015480:	b2db      	uxtb	r3, r3
 8015482:	4413      	add	r3, r2
 8015484:	b2da      	uxtb	r2, r3
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	78da      	ldrb	r2, [r3, #3]
 801548e:	4b46      	ldr	r3, [pc, #280]	@ (80155a8 <gos_timeAddMilliseconds+0x1f4>)
 8015490:	fba3 1302 	umull	r1, r3, r3, r2
 8015494:	0959      	lsrs	r1, r3, #5
 8015496:	460b      	mov	r3, r1
 8015498:	011b      	lsls	r3, r3, #4
 801549a:	1a5b      	subs	r3, r3, r1
 801549c:	009b      	lsls	r3, r3, #2
 801549e:	1ad3      	subs	r3, r2, r3
 80154a0:	b2da      	uxtb	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	791b      	ldrb	r3, [r3, #4]
 80154aa:	2b17      	cmp	r3, #23
 80154ac:	d970      	bls.n	8015590 <gos_timeAddMilliseconds+0x1dc>
                    {
                        pTime->days += pTime->hours / 24u;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	7912      	ldrb	r2, [r2, #4]
 80154ba:	493c      	ldr	r1, [pc, #240]	@ (80155ac <gos_timeAddMilliseconds+0x1f8>)
 80154bc:	fba1 1202 	umull	r1, r2, r1, r2
 80154c0:	0912      	lsrs	r2, r2, #4
 80154c2:	b2d2      	uxtb	r2, r2
 80154c4:	4413      	add	r3, r2
 80154c6:	b29a      	uxth	r2, r3
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	791a      	ldrb	r2, [r3, #4]
 80154d2:	4b36      	ldr	r3, [pc, #216]	@ (80155ac <gos_timeAddMilliseconds+0x1f8>)
 80154d4:	fba3 1302 	umull	r1, r3, r3, r2
 80154d8:	0919      	lsrs	r1, r3, #4
 80154da:	460b      	mov	r3, r1
 80154dc:	005b      	lsls	r3, r3, #1
 80154de:	440b      	add	r3, r1
 80154e0:	00db      	lsls	r3, r3, #3
 80154e2:	1ad3      	subs	r3, r2, r3
 80154e4:	b2da      	uxtb	r2, r3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	891b      	ldrh	r3, [r3, #8]
 80154ee:	b29b      	uxth	r3, r3
 80154f0:	f003 0303 	and.w	r3, r3, #3
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d117      	bne.n	801552a <gos_timeAddMilliseconds+0x176>
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	79db      	ldrb	r3, [r3, #7]
 80154fe:	2b02      	cmp	r3, #2
 8015500:	d113      	bne.n	801552a <gos_timeAddMilliseconds+0x176>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8015508:	b29b      	uxth	r3, r3
 801550a:	2b1d      	cmp	r3, #29
 801550c:	d90d      	bls.n	801552a <gos_timeAddMilliseconds+0x176>
                        {
                            pTime->days = 1u;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2200      	movs	r2, #0
 8015512:	f042 0201 	orr.w	r2, r2, #1
 8015516:	715a      	strb	r2, [r3, #5]
 8015518:	2200      	movs	r2, #0
 801551a:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	79db      	ldrb	r3, [r3, #7]
 8015520:	3301      	adds	r3, #1
 8015522:	b2da      	uxtb	r2, r3
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	71da      	strb	r2, [r3, #7]
 8015528:	e024      	b.n	8015574 <gos_timeAddMilliseconds+0x1c0>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	891b      	ldrh	r3, [r3, #8]
 801552e:	b29b      	uxth	r3, r3
 8015530:	f003 0303 	and.w	r3, r3, #3
 8015534:	b29b      	uxth	r3, r3
 8015536:	2b00      	cmp	r3, #0
 8015538:	d103      	bne.n	8015542 <gos_timeAddMilliseconds+0x18e>
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	79db      	ldrb	r3, [r3, #7]
 801553e:	2b02      	cmp	r3, #2
 8015540:	d018      	beq.n	8015574 <gos_timeAddMilliseconds+0x1c0>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	79db      	ldrb	r3, [r3, #7]
 8015546:	3b01      	subs	r3, #1
 8015548:	4a19      	ldr	r2, [pc, #100]	@ (80155b0 <gos_timeAddMilliseconds+0x1fc>)
 801554a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8015554:	b29b      	uxth	r3, r3
 8015556:	429a      	cmp	r2, r3
 8015558:	d20c      	bcs.n	8015574 <gos_timeAddMilliseconds+0x1c0>
                        {
                            pTime->days = 1u;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2200      	movs	r2, #0
 801555e:	f042 0201 	orr.w	r2, r2, #1
 8015562:	715a      	strb	r2, [r3, #5]
 8015564:	2200      	movs	r2, #0
 8015566:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	79db      	ldrb	r3, [r3, #7]
 801556c:	3301      	adds	r3, #1
 801556e:	b2da      	uxtb	r2, r3
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	79db      	ldrb	r3, [r3, #7]
 8015578:	2b0d      	cmp	r3, #13
 801557a:	d109      	bne.n	8015590 <gos_timeAddMilliseconds+0x1dc>
                        {
                            pTime->months = 1;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2201      	movs	r2, #1
 8015580:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	891b      	ldrh	r3, [r3, #8]
 8015586:	b29b      	uxth	r3, r3
 8015588:	3301      	adds	r3, #1
 801558a:	b29a      	uxth	r2, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 8015590:	2355      	movs	r3, #85	@ 0x55
 8015592:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 8015594:	7bfb      	ldrb	r3, [r7, #15]
}
 8015596:	4618      	mov	r0, r3
 8015598:	3714      	adds	r7, #20
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	10624dd3 	.word	0x10624dd3
 80155a8:	88888889 	.word	0x88888889
 80155ac:	aaaaaaab 	.word	0xaaaaaaab
 80155b0:	0801ac40 	.word	0x0801ac40

080155b4 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 80155b4:	b480      	push	{r7}
 80155b6:	b087      	sub	sp, #28
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	4613      	mov	r3, r2
 80155c0:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 80155c2:	23ae      	movs	r3, #174	@ 0xae
 80155c4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d063      	beq.n	8015694 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	881b      	ldrh	r3, [r3, #0]
 80155d0:	b29a      	uxth	r2, r3
 80155d2:	88fb      	ldrh	r3, [r7, #6]
 80155d4:	4413      	add	r3, r2
 80155d6:	b29a      	uxth	r2, r3
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	881b      	ldrh	r3, [r3, #0]
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80155e6:	d355      	bcc.n	8015694 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	881b      	ldrh	r3, [r3, #0]
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80155f2:	b29a      	uxth	r2, r3
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	885b      	ldrh	r3, [r3, #2]
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	3301      	adds	r3, #1
 8015600:	b29a      	uxth	r2, r3
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	885b      	ldrh	r3, [r3, #2]
 801560a:	b29b      	uxth	r3, r3
 801560c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015610:	d340      	bcc.n	8015694 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	885b      	ldrh	r3, [r3, #2]
 8015616:	b29b      	uxth	r3, r3
 8015618:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801561c:	b29a      	uxth	r2, r3
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	791b      	ldrb	r3, [r3, #4]
 8015626:	3301      	adds	r3, #1
 8015628:	b2da      	uxtb	r2, r3
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	791b      	ldrb	r3, [r3, #4]
 8015632:	2b3b      	cmp	r3, #59	@ 0x3b
 8015634:	d92e      	bls.n	8015694 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	791b      	ldrb	r3, [r3, #4]
 801563a:	3b3c      	subs	r3, #60	@ 0x3c
 801563c:	b2da      	uxtb	r2, r3
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	795b      	ldrb	r3, [r3, #5]
 8015646:	3301      	adds	r3, #1
 8015648:	b2da      	uxtb	r2, r3
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	795b      	ldrb	r3, [r3, #5]
 8015652:	2b3b      	cmp	r3, #59	@ 0x3b
 8015654:	d91e      	bls.n	8015694 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	795b      	ldrb	r3, [r3, #5]
 801565a:	3b3c      	subs	r3, #60	@ 0x3c
 801565c:	b2da      	uxtb	r2, r3
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	799b      	ldrb	r3, [r3, #6]
 8015666:	3301      	adds	r3, #1
 8015668:	b2da      	uxtb	r2, r3
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	799b      	ldrb	r3, [r3, #6]
 8015672:	2b17      	cmp	r3, #23
 8015674:	d90e      	bls.n	8015694 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	799b      	ldrb	r3, [r3, #6]
 801567a:	3b18      	subs	r3, #24
 801567c:	b2da      	uxtb	r2, r3
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8015688:	b29b      	uxth	r3, r3
 801568a:	3301      	adds	r3, #1
 801568c:	b29a      	uxth	r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d063      	beq.n	8015762 <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	881b      	ldrh	r3, [r3, #0]
 801569e:	b29a      	uxth	r2, r3
 80156a0:	88fb      	ldrh	r3, [r7, #6]
 80156a2:	4413      	add	r3, r2
 80156a4:	b29a      	uxth	r2, r3
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	881b      	ldrh	r3, [r3, #0]
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80156b4:	d355      	bcc.n	8015762 <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	881b      	ldrh	r3, [r3, #0]
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80156c0:	b29a      	uxth	r2, r3
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	885b      	ldrh	r3, [r3, #2]
 80156ca:	b29b      	uxth	r3, r3
 80156cc:	3301      	adds	r3, #1
 80156ce:	b29a      	uxth	r2, r3
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	885b      	ldrh	r3, [r3, #2]
 80156d8:	b29b      	uxth	r3, r3
 80156da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80156de:	d340      	bcc.n	8015762 <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	885b      	ldrh	r3, [r3, #2]
 80156e4:	b29b      	uxth	r3, r3
 80156e6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80156ea:	b29a      	uxth	r2, r3
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	791b      	ldrb	r3, [r3, #4]
 80156f4:	3301      	adds	r3, #1
 80156f6:	b2da      	uxtb	r2, r3
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	791b      	ldrb	r3, [r3, #4]
 8015700:	2b3b      	cmp	r3, #59	@ 0x3b
 8015702:	d92e      	bls.n	8015762 <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	791b      	ldrb	r3, [r3, #4]
 8015708:	3b3c      	subs	r3, #60	@ 0x3c
 801570a:	b2da      	uxtb	r2, r3
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	795b      	ldrb	r3, [r3, #5]
 8015714:	3301      	adds	r3, #1
 8015716:	b2da      	uxtb	r2, r3
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	795b      	ldrb	r3, [r3, #5]
 8015720:	2b3b      	cmp	r3, #59	@ 0x3b
 8015722:	d91e      	bls.n	8015762 <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	795b      	ldrb	r3, [r3, #5]
 8015728:	3b3c      	subs	r3, #60	@ 0x3c
 801572a:	b2da      	uxtb	r2, r3
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	799b      	ldrb	r3, [r3, #6]
 8015734:	3301      	adds	r3, #1
 8015736:	b2da      	uxtb	r2, r3
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	799b      	ldrb	r3, [r3, #6]
 8015740:	2b17      	cmp	r3, #23
 8015742:	d90e      	bls.n	8015762 <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	799b      	ldrb	r3, [r3, #6]
 8015748:	3b18      	subs	r3, #24
 801574a:	b2da      	uxtb	r2, r3
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8015756:	b29b      	uxth	r3, r3
 8015758:	3301      	adds	r3, #1
 801575a:	b29a      	uxth	r2, r3
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 8015762:	2355      	movs	r3, #85	@ 0x55
 8015764:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 8015766:	7dfb      	ldrb	r3, [r7, #23]
}
 8015768:	4618      	mov	r0, r3
 801576a:	371c      	adds	r7, #28
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr

08015774 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 8015774:	b480      	push	{r7}
 8015776:	b085      	sub	sp, #20
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	460b      	mov	r3, r1
 801577e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 8015780:	23ae      	movs	r3, #174	@ 0xae
 8015782:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2b00      	cmp	r3, #0
 8015788:	f000 808e 	beq.w	80158a8 <gos_runTimeAddMilliseconds+0x134>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	885b      	ldrh	r3, [r3, #2]
 8015790:	b29a      	uxth	r2, r3
 8015792:	887b      	ldrh	r3, [r7, #2]
 8015794:	4413      	add	r3, r2
 8015796:	b29a      	uxth	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	885b      	ldrh	r3, [r3, #2]
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80157a6:	d37d      	bcc.n	80158a4 <gos_runTimeAddMilliseconds+0x130>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	791a      	ldrb	r2, [r3, #4]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	885b      	ldrh	r3, [r3, #2]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	4941      	ldr	r1, [pc, #260]	@ (80158b8 <gos_runTimeAddMilliseconds+0x144>)
 80157b4:	fba1 1303 	umull	r1, r3, r1, r3
 80157b8:	099b      	lsrs	r3, r3, #6
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	4413      	add	r3, r2
 80157c0:	b2da      	uxtb	r2, r3
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	885b      	ldrh	r3, [r3, #2]
 80157ca:	b29b      	uxth	r3, r3
 80157cc:	4a3a      	ldr	r2, [pc, #232]	@ (80158b8 <gos_runTimeAddMilliseconds+0x144>)
 80157ce:	fba2 1203 	umull	r1, r2, r2, r3
 80157d2:	0992      	lsrs	r2, r2, #6
 80157d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80157d8:	fb01 f202 	mul.w	r2, r1, r2
 80157dc:	1a9b      	subs	r3, r3, r2
 80157de:	b29a      	uxth	r2, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	791b      	ldrb	r3, [r3, #4]
 80157e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80157ea:	d95b      	bls.n	80158a4 <gos_runTimeAddMilliseconds+0x130>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	795a      	ldrb	r2, [r3, #5]
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	791b      	ldrb	r3, [r3, #4]
 80157f4:	4931      	ldr	r1, [pc, #196]	@ (80158bc <gos_runTimeAddMilliseconds+0x148>)
 80157f6:	fba1 1303 	umull	r1, r3, r1, r3
 80157fa:	095b      	lsrs	r3, r3, #5
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	4413      	add	r3, r2
 8015800:	b2da      	uxtb	r2, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	791a      	ldrb	r2, [r3, #4]
 801580a:	4b2c      	ldr	r3, [pc, #176]	@ (80158bc <gos_runTimeAddMilliseconds+0x148>)
 801580c:	fba3 1302 	umull	r1, r3, r3, r2
 8015810:	0959      	lsrs	r1, r3, #5
 8015812:	460b      	mov	r3, r1
 8015814:	011b      	lsls	r3, r3, #4
 8015816:	1a5b      	subs	r3, r3, r1
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	1ad3      	subs	r3, r2, r3
 801581c:	b2da      	uxtb	r2, r3
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	795b      	ldrb	r3, [r3, #5]
 8015826:	2b3b      	cmp	r3, #59	@ 0x3b
 8015828:	d93c      	bls.n	80158a4 <gos_runTimeAddMilliseconds+0x130>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	799a      	ldrb	r2, [r3, #6]
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	795b      	ldrb	r3, [r3, #5]
 8015832:	4922      	ldr	r1, [pc, #136]	@ (80158bc <gos_runTimeAddMilliseconds+0x148>)
 8015834:	fba1 1303 	umull	r1, r3, r1, r3
 8015838:	095b      	lsrs	r3, r3, #5
 801583a:	b2db      	uxtb	r3, r3
 801583c:	4413      	add	r3, r2
 801583e:	b2da      	uxtb	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	795a      	ldrb	r2, [r3, #5]
 8015848:	4b1c      	ldr	r3, [pc, #112]	@ (80158bc <gos_runTimeAddMilliseconds+0x148>)
 801584a:	fba3 1302 	umull	r1, r3, r3, r2
 801584e:	0959      	lsrs	r1, r3, #5
 8015850:	460b      	mov	r3, r1
 8015852:	011b      	lsls	r3, r3, #4
 8015854:	1a5b      	subs	r3, r3, r1
 8015856:	009b      	lsls	r3, r3, #2
 8015858:	1ad3      	subs	r3, r2, r3
 801585a:	b2da      	uxtb	r2, r3
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	799b      	ldrb	r3, [r3, #6]
 8015864:	2b17      	cmp	r3, #23
 8015866:	d91d      	bls.n	80158a4 <gos_runTimeAddMilliseconds+0x130>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801586e:	b29b      	uxth	r3, r3
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	7992      	ldrb	r2, [r2, #6]
 8015874:	4912      	ldr	r1, [pc, #72]	@ (80158c0 <gos_runTimeAddMilliseconds+0x14c>)
 8015876:	fba1 1202 	umull	r1, r2, r1, r2
 801587a:	0912      	lsrs	r2, r2, #4
 801587c:	b2d2      	uxtb	r2, r2
 801587e:	4413      	add	r3, r2
 8015880:	b29a      	uxth	r2, r3
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	799a      	ldrb	r2, [r3, #6]
 801588c:	4b0c      	ldr	r3, [pc, #48]	@ (80158c0 <gos_runTimeAddMilliseconds+0x14c>)
 801588e:	fba3 1302 	umull	r1, r3, r3, r2
 8015892:	0919      	lsrs	r1, r3, #4
 8015894:	460b      	mov	r3, r1
 8015896:	005b      	lsls	r3, r3, #1
 8015898:	440b      	add	r3, r1
 801589a:	00db      	lsls	r3, r3, #3
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 80158a4:	2355      	movs	r3, #85	@ 0x55
 80158a6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 80158a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3714      	adds	r7, #20
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop
 80158b8:	10624dd3 	.word	0x10624dd3
 80158bc:	88888889 	.word	0x88888889
 80158c0:	aaaaaaab 	.word	0xaaaaaaab

080158c4 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 80158ce:	23ae      	movs	r3, #174	@ 0xae
 80158d0:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 80158d2:	88fb      	ldrh	r3, [r7, #6]
 80158d4:	4619      	mov	r1, r3
 80158d6:	480a      	ldr	r0, [pc, #40]	@ (8015900 <gos_timeIncreaseSystemTime+0x3c>)
 80158d8:	f7ff ff4c 	bl	8015774 <gos_runTimeAddMilliseconds>
 80158dc:	4603      	mov	r3, r0
 80158de:	2b55      	cmp	r3, #85	@ 0x55
 80158e0:	d109      	bne.n	80158f6 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 80158e2:	88fb      	ldrh	r3, [r7, #6]
 80158e4:	4619      	mov	r1, r3
 80158e6:	4807      	ldr	r0, [pc, #28]	@ (8015904 <gos_timeIncreaseSystemTime+0x40>)
 80158e8:	f7ff fd64 	bl	80153b4 <gos_timeAddMilliseconds>
 80158ec:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 80158ee:	2b55      	cmp	r3, #85	@ 0x55
 80158f0:	d101      	bne.n	80158f6 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 80158f2:	2355      	movs	r3, #85	@ 0x55
 80158f4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 80158f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3710      	adds	r7, #16
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	2000916c 	.word	0x2000916c
 8015904:	200010f8 	.word	0x200010f8

08015908 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 801590e:	1d3b      	adds	r3, r7, #4
 8015910:	2200      	movs	r2, #0
 8015912:	601a      	str	r2, [r3, #0]
 8015914:	605a      	str	r2, [r3, #4]
 8015916:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 8015918:	4b27      	ldr	r3, [pc, #156]	@ (80159b8 <gos_timeDaemonTask+0xb0>)
 801591a:	789a      	ldrb	r2, [r3, #2]
 801591c:	79bb      	ldrb	r3, [r7, #6]
 801591e:	429a      	cmp	r2, r3
 8015920:	d905      	bls.n	801592e <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 8015922:	4b26      	ldr	r3, [pc, #152]	@ (80159bc <gos_timeDaemonTask+0xb4>)
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	2100      	movs	r1, #0
 8015928:	4618      	mov	r0, r3
 801592a:	f7fe ff61 	bl	80147f0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 801592e:	4b22      	ldr	r3, [pc, #136]	@ (80159b8 <gos_timeDaemonTask+0xb0>)
 8015930:	78da      	ldrb	r2, [r3, #3]
 8015932:	79fb      	ldrb	r3, [r7, #7]
 8015934:	429a      	cmp	r2, r3
 8015936:	d905      	bls.n	8015944 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 8015938:	4b20      	ldr	r3, [pc, #128]	@ (80159bc <gos_timeDaemonTask+0xb4>)
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	2101      	movs	r1, #1
 801593e:	4618      	mov	r0, r3
 8015940:	f7fe ff56 	bl	80147f0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 8015944:	4b1c      	ldr	r3, [pc, #112]	@ (80159b8 <gos_timeDaemonTask+0xb0>)
 8015946:	791a      	ldrb	r2, [r3, #4]
 8015948:	7a3b      	ldrb	r3, [r7, #8]
 801594a:	429a      	cmp	r2, r3
 801594c:	d905      	bls.n	801595a <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 801594e:	4b1b      	ldr	r3, [pc, #108]	@ (80159bc <gos_timeDaemonTask+0xb4>)
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	2102      	movs	r1, #2
 8015954:	4618      	mov	r0, r3
 8015956:	f7fe ff4b 	bl	80147f0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 801595a:	4b17      	ldr	r3, [pc, #92]	@ (80159b8 <gos_timeDaemonTask+0xb0>)
 801595c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8015960:	b29a      	uxth	r2, r3
 8015962:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 8015966:	b29b      	uxth	r3, r3
 8015968:	429a      	cmp	r2, r3
 801596a:	d905      	bls.n	8015978 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 801596c:	4b13      	ldr	r3, [pc, #76]	@ (80159bc <gos_timeDaemonTask+0xb4>)
 801596e:	781b      	ldrb	r3, [r3, #0]
 8015970:	2103      	movs	r1, #3
 8015972:	4618      	mov	r0, r3
 8015974:	f7fe ff3c 	bl	80147f0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 8015978:	4b0f      	ldr	r3, [pc, #60]	@ (80159b8 <gos_timeDaemonTask+0xb0>)
 801597a:	79da      	ldrb	r2, [r3, #7]
 801597c:	7afb      	ldrb	r3, [r7, #11]
 801597e:	429a      	cmp	r2, r3
 8015980:	d905      	bls.n	801598e <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 8015982:	4b0e      	ldr	r3, [pc, #56]	@ (80159bc <gos_timeDaemonTask+0xb4>)
 8015984:	781b      	ldrb	r3, [r3, #0]
 8015986:	2104      	movs	r1, #4
 8015988:	4618      	mov	r0, r3
 801598a:	f7fe ff31 	bl	80147f0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 801598e:	4b0a      	ldr	r3, [pc, #40]	@ (80159b8 <gos_timeDaemonTask+0xb0>)
 8015990:	891a      	ldrh	r2, [r3, #8]
 8015992:	89bb      	ldrh	r3, [r7, #12]
 8015994:	429a      	cmp	r2, r3
 8015996:	d905      	bls.n	80159a4 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 8015998:	4b08      	ldr	r3, [pc, #32]	@ (80159bc <gos_timeDaemonTask+0xb4>)
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	2105      	movs	r1, #5
 801599e:	4618      	mov	r0, r3
 80159a0:	f7fe ff26 	bl	80147f0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 80159a4:	1d3b      	adds	r3, r7, #4
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7ff fcac 	bl	8015304 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 80159ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80159b0:	f7fb fefc 	bl	80117ac <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 80159b4:	e7b0      	b.n	8015918 <gos_timeDaemonTask+0x10>
 80159b6:	bf00      	nop
 80159b8:	200010f8 	.word	0x200010f8
 80159bc:	20009178 	.word	0x20009178

080159c0 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_ERROR;
 80159c6:	23ae      	movs	r3, #174	@ 0xae
 80159c8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 80159ca:	480d      	ldr	r0, [pc, #52]	@ (8015a00 <gos_traceInit+0x40>)
 80159cc:	f7fe fc0c 	bl	80141e8 <gos_queueCreate>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b55      	cmp	r3, #85	@ 0x55
 80159d4:	d10e      	bne.n	80159f4 <gos_traceInit+0x34>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 80159d6:	2100      	movs	r1, #0
 80159d8:	480a      	ldr	r0, [pc, #40]	@ (8015a04 <gos_traceInit+0x44>)
 80159da:	f7fb fd55 	bl	8011488 <gos_taskRegister>
 80159de:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 80159e0:	2b55      	cmp	r3, #85	@ 0x55
 80159e2:	d107      	bne.n	80159f4 <gos_traceInit+0x34>
        gos_mutexInit(&traceMutex) == GOS_SUCCESS
 80159e4:	4808      	ldr	r0, [pc, #32]	@ (8015a08 <gos_traceInit+0x48>)
 80159e6:	f7fe fa21 	bl	8013e2c <gos_mutexInit>
 80159ea:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 80159ec:	2b55      	cmp	r3, #85	@ 0x55
 80159ee:	d101      	bne.n	80159f4 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_SUCCESS;
 80159f0:	2355      	movs	r3, #85	@ 0x55
 80159f2:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 80159f4:	79fb      	ldrb	r3, [r7, #7]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3708      	adds	r7, #8
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	20001170 	.word	0x20001170
 8015a04:	2000118c 	.word	0x2000118c
 8015a08:	2000933c 	.word	0x2000933c

08015a0c <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 8015a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a0e:	b0a9      	sub	sp, #164	@ 0xa4
 8015a10:	af06      	add	r7, sp, #24
 8015a12:	4603      	mov	r3, r0
 8015a14:	6039      	str	r1, [r7, #0]
 8015a16:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 8015a18:	23ae      	movs	r3, #174	@ 0xae
 8015a1a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8015a1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015a22:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8015a26:	2300      	movs	r3, #0
 8015a28:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8015a2c:	f107 0318 	add.w	r3, r7, #24
 8015a30:	226a      	movs	r2, #106	@ 0x6a
 8015a32:	2100      	movs	r1, #0
 8015a34:	4618      	mov	r0, r3
 8015a36:	f001 fb21 	bl	801707c <memset>
    gos_time_t               sysTime        = {0};
 8015a3a:	f107 030c 	add.w	r3, r7, #12
 8015a3e:	2200      	movs	r2, #0
 8015a40:	601a      	str	r2, [r3, #0]
 8015a42:	605a      	str	r2, [r3, #4]
 8015a44:	811a      	strh	r2, [r3, #8]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f000 80ec 	beq.w	8015c26 <gos_traceTrace+0x21a>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8015a4e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8015a52:	4618      	mov	r0, r3
 8015a54:	f7fd f8be 	bl	8012bd4 <gos_taskGetCurrentId>
 8015a58:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 8015a5a:	2b55      	cmp	r3, #85	@ 0x55
 8015a5c:	f040 80e3 	bne.w	8015c26 <gos_traceTrace+0x21a>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015a60:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015a64:	f107 0218 	add.w	r2, r7, #24
 8015a68:	4611      	mov	r1, r2
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fd f90e 	bl	8012c8c <gos_taskGetData>
 8015a70:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8015a72:	2b55      	cmp	r3, #85	@ 0x55
 8015a74:	f040 80d7 	bne.w	8015c26 <gos_traceTrace+0x21a>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015a78:	8c3b      	ldrh	r3, [r7, #32]
 8015a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d105      	bne.n	8015a8e <gos_traceTrace+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015a82:	f7fb f9e1 	bl	8010e48 <gos_kernelIsCallerIsr>
 8015a86:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015a88:	2b36      	cmp	r3, #54	@ 0x36
 8015a8a:	f040 80cc 	bne.w	8015c26 <gos_traceTrace+0x21a>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8015a8e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8015a92:	4868      	ldr	r0, [pc, #416]	@ (8015c34 <gos_traceTrace+0x228>)
 8015a94:	f7fe f9e4 	bl	8013e60 <gos_mutexLock>
 8015a98:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015a9a:	2b55      	cmp	r3, #85	@ 0x55
 8015a9c:	f040 80c3 	bne.w	8015c26 <gos_traceTrace+0x21a>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 8015aa0:	2355      	movs	r3, #85	@ 0x55
 8015aa2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        if (addTimeStamp == GOS_TRUE)
 8015aa6:	79fb      	ldrb	r3, [r7, #7]
 8015aa8:	2b36      	cmp	r3, #54	@ 0x36
 8015aaa:	d13f      	bne.n	8015b2c <gos_traceTrace+0x120>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 8015aac:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8015ab0:	2b55      	cmp	r3, #85	@ 0x55
 8015ab2:	d108      	bne.n	8015ac6 <gos_traceTrace+0xba>
 8015ab4:	f107 030c 	add.w	r3, r7, #12
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7ff fc23 	bl	8015304 <gos_timeGet>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8015ac4:	e002      	b.n	8015acc <gos_traceTrace+0xc0>
 8015ac6:	23ae      	movs	r3, #174	@ 0xae
 8015ac8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8015acc:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015ace:	461d      	mov	r5, r3
                    sysTime.months,
 8015ad0:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015ad2:	461e      	mov	r6, r3
                    sysTime.days,
 8015ad4:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8015ad8:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8015ada:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 8015adc:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 8015ade:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 8015ae0:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015ae2:	9404      	str	r4, [sp, #16]
 8015ae4:	9003      	str	r0, [sp, #12]
 8015ae6:	9102      	str	r1, [sp, #8]
 8015ae8:	9201      	str	r2, [sp, #4]
 8015aea:	9300      	str	r3, [sp, #0]
 8015aec:	4633      	mov	r3, r6
 8015aee:	462a      	mov	r2, r5
 8015af0:	4951      	ldr	r1, [pc, #324]	@ (8015c38 <gos_traceTrace+0x22c>)
 8015af2:	4852      	ldr	r0, [pc, #328]	@ (8015c3c <gos_traceTrace+0x230>)
 8015af4:	f001 fa3e 	bl	8016f74 <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015af8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8015afc:	2b55      	cmp	r3, #85	@ 0x55
 8015afe:	d112      	bne.n	8015b26 <gos_traceTrace+0x11a>
 8015b00:	4b4f      	ldr	r3, [pc, #316]	@ (8015c40 <gos_traceTrace+0x234>)
 8015b02:	881c      	ldrh	r4, [r3, #0]
 8015b04:	484d      	ldr	r0, [pc, #308]	@ (8015c3c <gos_traceTrace+0x230>)
 8015b06:	f7ea fbd3 	bl	80002b0 <strlen>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	3301      	adds	r3, #1
 8015b10:	b2da      	uxtb	r2, r3
 8015b12:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015b16:	4949      	ldr	r1, [pc, #292]	@ (8015c3c <gos_traceTrace+0x230>)
 8015b18:	4620      	mov	r0, r4
 8015b1a:	f7fe fbc1 	bl	80142a0 <gos_queuePut>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8015b24:	e002      	b.n	8015b2c <gos_traceTrace+0x120>
 8015b26:	23ae      	movs	r3, #174	@ 0xae
 8015b28:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015b2c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8015b30:	2b55      	cmp	r3, #85	@ 0x55
 8015b32:	d112      	bne.n	8015b5a <gos_traceTrace+0x14e>
 8015b34:	4b42      	ldr	r3, [pc, #264]	@ (8015c40 <gos_traceTrace+0x234>)
 8015b36:	881c      	ldrh	r4, [r3, #0]
 8015b38:	6838      	ldr	r0, [r7, #0]
 8015b3a:	f7ea fbb9 	bl	80002b0 <strlen>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	3301      	adds	r3, #1
 8015b44:	b2da      	uxtb	r2, r3
 8015b46:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015b4a:	6839      	ldr	r1, [r7, #0]
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	f7fe fba7 	bl	80142a0 <gos_queuePut>
 8015b52:	4603      	mov	r3, r0
 8015b54:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8015b58:	e002      	b.n	8015b60 <gos_traceTrace+0x154>
 8015b5a:	23ae      	movs	r3, #174	@ 0xae
 8015b5c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 8015b60:	4b38      	ldr	r3, [pc, #224]	@ (8015c44 <gos_traceTrace+0x238>)
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d108      	bne.n	8015b7a <gos_traceTrace+0x16e>
 8015b68:	b672      	cpsid	i
 8015b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8015b6e:	4a36      	ldr	r2, [pc, #216]	@ (8015c48 <gos_traceTrace+0x23c>)
 8015b70:	6013      	str	r3, [r2, #0]
 8015b72:	f3bf 8f4f 	dsb	sy
 8015b76:	f3bf 8f6f 	isb	sy
 8015b7a:	4b32      	ldr	r3, [pc, #200]	@ (8015c44 <gos_traceTrace+0x238>)
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	b2da      	uxtb	r2, r3
 8015b82:	4b30      	ldr	r3, [pc, #192]	@ (8015c44 <gos_traceTrace+0x238>)
 8015b84:	701a      	strb	r2, [r3, #0]
 8015b86:	4b31      	ldr	r3, [pc, #196]	@ (8015c4c <gos_traceTrace+0x240>)
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	3301      	adds	r3, #1
 8015b8c:	b2da      	uxtb	r2, r3
 8015b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8015c4c <gos_traceTrace+0x240>)
 8015b90:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8015b92:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015b96:	f107 0282 	add.w	r2, r7, #130	@ 0x82
 8015b9a:	4611      	mov	r1, r2
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f7fc ffa9 	bl	8012af4 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8015ba2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8015ba6:	b21b      	sxth	r3, r3
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	db13      	blt.n	8015bd4 <gos_traceTrace+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015bac:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7fc fe39 	bl	801282c <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015bba:	4b25      	ldr	r3, [pc, #148]	@ (8015c50 <gos_traceTrace+0x244>)
 8015bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fc f86e 	bl	8011ca0 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015bc4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8015bc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7fc fea5 	bl	801291c <gos_taskRemovePrivilege>
 8015bd2:	e004      	b.n	8015bde <gos_traceTrace+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8015c50 <gos_traceTrace+0x244>)
 8015bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fc f861 	bl	8011ca0 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8015bde:	4b19      	ldr	r3, [pc, #100]	@ (8015c44 <gos_traceTrace+0x238>)
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d005      	beq.n	8015bf2 <gos_traceTrace+0x1e6>
 8015be6:	4b17      	ldr	r3, [pc, #92]	@ (8015c44 <gos_traceTrace+0x238>)
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	3b01      	subs	r3, #1
 8015bec:	b2da      	uxtb	r2, r3
 8015bee:	4b15      	ldr	r3, [pc, #84]	@ (8015c44 <gos_traceTrace+0x238>)
 8015bf0:	701a      	strb	r2, [r3, #0]
 8015bf2:	4b14      	ldr	r3, [pc, #80]	@ (8015c44 <gos_traceTrace+0x238>)
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d108      	bne.n	8015c0c <gos_traceTrace+0x200>
 8015bfa:	4b13      	ldr	r3, [pc, #76]	@ (8015c48 <gos_traceTrace+0x23c>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	f383 8810 	msr	PRIMASK, r3
 8015c02:	b662      	cpsie	i
 8015c04:	f3bf 8f4f 	dsb	sy
 8015c08:	f3bf 8f6f 	isb	sy
 8015c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8015c4c <gos_traceTrace+0x240>)
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d005      	beq.n	8015c20 <gos_traceTrace+0x214>
 8015c14:	4b0d      	ldr	r3, [pc, #52]	@ (8015c4c <gos_traceTrace+0x240>)
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	3b01      	subs	r3, #1
 8015c1a:	b2da      	uxtb	r2, r3
 8015c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8015c4c <gos_traceTrace+0x240>)
 8015c1e:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8015c20:	4804      	ldr	r0, [pc, #16]	@ (8015c34 <gos_traceTrace+0x228>)
 8015c22:	f7fe fa23 	bl	801406c <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8015c26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	378c      	adds	r7, #140	@ 0x8c
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c32:	bf00      	nop
 8015c34:	2000933c 	.word	0x2000933c
 8015c38:	0801a610 	.word	0x0801a610
 8015c3c:	2000930c 	.word	0x2000930c
 8015c40:	20001170 	.word	0x20001170
 8015c44:	20005e53 	.word	0x20005e53
 8015c48:	20005e54 	.word	0x20005e54
 8015c4c:	20005e51 	.word	0x20005e51
 8015c50:	2000118c 	.word	0x2000118c

08015c54 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 8015c54:	b40e      	push	{r1, r2, r3}
 8015c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c58:	b0aa      	sub	sp, #168	@ 0xa8
 8015c5a:	af06      	add	r7, sp, #24
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8015c60:	2355      	movs	r3, #85	@ 0x55
 8015c62:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8015c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015c6a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8015c6e:	f107 0320 	add.w	r3, r7, #32
 8015c72:	226a      	movs	r2, #106	@ 0x6a
 8015c74:	2100      	movs	r1, #0
 8015c76:	4618      	mov	r0, r3
 8015c78:	f001 fa00 	bl	801707c <memset>
    gos_time_t               sysTime        = {0};
 8015c7c:	f107 0314 	add.w	r3, r7, #20
 8015c80:	2200      	movs	r2, #0
 8015c82:	601a      	str	r2, [r3, #0]
 8015c84:	605a      	str	r2, [r3, #4]
 8015c86:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 8015c8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	f000 80f2 	beq.w	8015e7a <gos_traceTraceFormatted+0x226>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8015c96:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7fc ff9a 	bl	8012bd4 <gos_taskGetCurrentId>
 8015ca0:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 8015ca2:	2b55      	cmp	r3, #85	@ 0x55
 8015ca4:	f040 80e9 	bne.w	8015e7a <gos_traceTraceFormatted+0x226>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015ca8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015cac:	f107 0220 	add.w	r2, r7, #32
 8015cb0:	4611      	mov	r1, r2
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7fc ffea 	bl	8012c8c <gos_taskGetData>
 8015cb8:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8015cba:	2b55      	cmp	r3, #85	@ 0x55
 8015cbc:	f040 80dd 	bne.w	8015e7a <gos_traceTraceFormatted+0x226>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015cc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d105      	bne.n	8015cd6 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015cca:	f7fb f8bd 	bl	8010e48 <gos_kernelIsCallerIsr>
 8015cce:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8015cd0:	2b36      	cmp	r3, #54	@ 0x36
 8015cd2:	f040 80d2 	bne.w	8015e7a <gos_traceTraceFormatted+0x226>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8015cd6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8015cda:	486e      	ldr	r0, [pc, #440]	@ (8015e94 <gos_traceTraceFormatted+0x240>)
 8015cdc:	f7fe f8c0 	bl	8013e60 <gos_mutexLock>
 8015ce0:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8015ce2:	2b55      	cmp	r3, #85	@ 0x55
 8015ce4:	f040 80c9 	bne.w	8015e7a <gos_traceTraceFormatted+0x226>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8015ce8:	79fb      	ldrb	r3, [r7, #7]
 8015cea:	2b36      	cmp	r3, #54	@ 0x36
 8015cec:	d13f      	bne.n	8015d6e <gos_traceTraceFormatted+0x11a>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 8015cee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8015cf2:	2b55      	cmp	r3, #85	@ 0x55
 8015cf4:	d108      	bne.n	8015d08 <gos_traceTraceFormatted+0xb4>
 8015cf6:	f107 0314 	add.w	r3, r7, #20
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ff fb02 	bl	8015304 <gos_timeGet>
 8015d00:	4603      	mov	r3, r0
 8015d02:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8015d06:	e002      	b.n	8015d0e <gos_traceTraceFormatted+0xba>
 8015d08:	23ae      	movs	r3, #174	@ 0xae
 8015d0a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8015d0e:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015d10:	461d      	mov	r5, r3
                    sysTime.months,
 8015d12:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015d14:	461e      	mov	r6, r3
                    sysTime.days,
 8015d16:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8015d1a:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8015d1c:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 8015d1e:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 8015d20:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 8015d22:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8015d24:	9404      	str	r4, [sp, #16]
 8015d26:	9003      	str	r0, [sp, #12]
 8015d28:	9102      	str	r1, [sp, #8]
 8015d2a:	9201      	str	r2, [sp, #4]
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	4633      	mov	r3, r6
 8015d30:	462a      	mov	r2, r5
 8015d32:	4959      	ldr	r1, [pc, #356]	@ (8015e98 <gos_traceTraceFormatted+0x244>)
 8015d34:	4859      	ldr	r0, [pc, #356]	@ (8015e9c <gos_traceTraceFormatted+0x248>)
 8015d36:	f001 f91d 	bl	8016f74 <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015d3a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8015d3e:	2b55      	cmp	r3, #85	@ 0x55
 8015d40:	d112      	bne.n	8015d68 <gos_traceTraceFormatted+0x114>
 8015d42:	4b57      	ldr	r3, [pc, #348]	@ (8015ea0 <gos_traceTraceFormatted+0x24c>)
 8015d44:	881c      	ldrh	r4, [r3, #0]
 8015d46:	4855      	ldr	r0, [pc, #340]	@ (8015e9c <gos_traceTraceFormatted+0x248>)
 8015d48:	f7ea fab2 	bl	80002b0 <strlen>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	3301      	adds	r3, #1
 8015d52:	b2da      	uxtb	r2, r3
 8015d54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015d58:	4950      	ldr	r1, [pc, #320]	@ (8015e9c <gos_traceTraceFormatted+0x248>)
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	f7fe faa0 	bl	80142a0 <gos_queuePut>
 8015d60:	4603      	mov	r3, r0
 8015d62:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8015d66:	e002      	b.n	8015d6e <gos_traceTraceFormatted+0x11a>
 8015d68:	23ae      	movs	r3, #174	@ 0xae
 8015d6a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 8015d6e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8015d72:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8015d74:	693a      	ldr	r2, [r7, #16]
 8015d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8015d7a:	484a      	ldr	r0, [pc, #296]	@ (8015ea4 <gos_traceTraceFormatted+0x250>)
 8015d7c:	f001 f974 	bl	8017068 <vsiprintf>
        va_end(args);
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 8015d80:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8015d84:	2b55      	cmp	r3, #85	@ 0x55
 8015d86:	d112      	bne.n	8015dae <gos_traceTraceFormatted+0x15a>
 8015d88:	4b45      	ldr	r3, [pc, #276]	@ (8015ea0 <gos_traceTraceFormatted+0x24c>)
 8015d8a:	881c      	ldrh	r4, [r3, #0]
 8015d8c:	4845      	ldr	r0, [pc, #276]	@ (8015ea4 <gos_traceTraceFormatted+0x250>)
 8015d8e:	f7ea fa8f 	bl	80002b0 <strlen>
 8015d92:	4603      	mov	r3, r0
 8015d94:	b2db      	uxtb	r3, r3
 8015d96:	3301      	adds	r3, #1
 8015d98:	b2da      	uxtb	r2, r3
 8015d9a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015d9e:	4941      	ldr	r1, [pc, #260]	@ (8015ea4 <gos_traceTraceFormatted+0x250>)
 8015da0:	4620      	mov	r0, r4
 8015da2:	f7fe fa7d 	bl	80142a0 <gos_queuePut>
 8015da6:	4603      	mov	r3, r0
 8015da8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8015dac:	e002      	b.n	8015db4 <gos_traceTraceFormatted+0x160>
 8015dae:	23ae      	movs	r3, #174	@ 0xae
 8015db0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 8015db4:	4b3c      	ldr	r3, [pc, #240]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d108      	bne.n	8015dce <gos_traceTraceFormatted+0x17a>
 8015dbc:	b672      	cpsid	i
 8015dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8015dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8015eac <gos_traceTraceFormatted+0x258>)
 8015dc4:	6013      	str	r3, [r2, #0]
 8015dc6:	f3bf 8f4f 	dsb	sy
 8015dca:	f3bf 8f6f 	isb	sy
 8015dce:	4b36      	ldr	r3, [pc, #216]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	b2da      	uxtb	r2, r3
 8015dd6:	4b34      	ldr	r3, [pc, #208]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015dd8:	701a      	strb	r2, [r3, #0]
 8015dda:	4b35      	ldr	r3, [pc, #212]	@ (8015eb0 <gos_traceTraceFormatted+0x25c>)
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	3301      	adds	r3, #1
 8015de0:	b2da      	uxtb	r2, r3
 8015de2:	4b33      	ldr	r3, [pc, #204]	@ (8015eb0 <gos_traceTraceFormatted+0x25c>)
 8015de4:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8015de6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015dea:	f107 020e 	add.w	r2, r7, #14
 8015dee:	4611      	mov	r1, r2
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7fc fe7f 	bl	8012af4 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8015df6:	89fb      	ldrh	r3, [r7, #14]
 8015df8:	b21b      	sxth	r3, r3
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	db13      	blt.n	8015e26 <gos_traceTraceFormatted+0x1d2>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015dfe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015e02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015e06:	4618      	mov	r0, r3
 8015e08:	f7fc fd10 	bl	801282c <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015e0c:	4b29      	ldr	r3, [pc, #164]	@ (8015eb4 <gos_traceTraceFormatted+0x260>)
 8015e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7fb ff45 	bl	8011ca0 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8015e16:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8015e1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7fc fd7c 	bl	801291c <gos_taskRemovePrivilege>
 8015e24:	e004      	b.n	8015e30 <gos_traceTraceFormatted+0x1dc>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8015e26:	4b23      	ldr	r3, [pc, #140]	@ (8015eb4 <gos_traceTraceFormatted+0x260>)
 8015e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7fb ff38 	bl	8011ca0 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8015e30:	4b1d      	ldr	r3, [pc, #116]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d005      	beq.n	8015e44 <gos_traceTraceFormatted+0x1f0>
 8015e38:	4b1b      	ldr	r3, [pc, #108]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	3b01      	subs	r3, #1
 8015e3e:	b2da      	uxtb	r2, r3
 8015e40:	4b19      	ldr	r3, [pc, #100]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015e42:	701a      	strb	r2, [r3, #0]
 8015e44:	4b18      	ldr	r3, [pc, #96]	@ (8015ea8 <gos_traceTraceFormatted+0x254>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d108      	bne.n	8015e5e <gos_traceTraceFormatted+0x20a>
 8015e4c:	4b17      	ldr	r3, [pc, #92]	@ (8015eac <gos_traceTraceFormatted+0x258>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	f383 8810 	msr	PRIMASK, r3
 8015e54:	b662      	cpsie	i
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	f3bf 8f6f 	isb	sy
 8015e5e:	4b14      	ldr	r3, [pc, #80]	@ (8015eb0 <gos_traceTraceFormatted+0x25c>)
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d005      	beq.n	8015e72 <gos_traceTraceFormatted+0x21e>
 8015e66:	4b12      	ldr	r3, [pc, #72]	@ (8015eb0 <gos_traceTraceFormatted+0x25c>)
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	b2da      	uxtb	r2, r3
 8015e6e:	4b10      	ldr	r3, [pc, #64]	@ (8015eb0 <gos_traceTraceFormatted+0x25c>)
 8015e70:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8015e72:	4808      	ldr	r0, [pc, #32]	@ (8015e94 <gos_traceTraceFormatted+0x240>)
 8015e74:	f7fe f8fa 	bl	801406c <gos_mutexUnlock>
 8015e78:	e002      	b.n	8015e80 <gos_traceTraceFormatted+0x22c>
    }
    else
    {
        traceResult = GOS_ERROR;
 8015e7a:	23ae      	movs	r3, #174	@ 0xae
 8015e7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return traceResult;
 8015e80:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8015e84:	4618      	mov	r0, r3
 8015e86:	3790      	adds	r7, #144	@ 0x90
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e8e:	b003      	add	sp, #12
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop
 8015e94:	2000933c 	.word	0x2000933c
 8015e98:	0801a610 	.word	0x0801a610
 8015e9c:	2000930c 	.word	0x2000930c
 8015ea0:	20001170 	.word	0x20001170
 8015ea4:	20009244 	.word	0x20009244
 8015ea8:	20005e53 	.word	0x20005e53
 8015eac:	20005e54 	.word	0x20005e54
 8015eb0:	20005e51 	.word	0x20005e51
 8015eb4:	2000118c 	.word	0x2000118c

08015eb8 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 8015eb8:	b40f      	push	{r0, r1, r2, r3}
 8015eba:	b580      	push	{r7, lr}
 8015ebc:	b082      	sub	sp, #8
 8015ebe:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 8015ec0:	23ae      	movs	r3, #174	@ 0xae
 8015ec2:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 8015ec4:	693b      	ldr	r3, [r7, #16]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d01c      	beq.n	8015f04 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 8015eca:	4b12      	ldr	r3, [pc, #72]	@ (8015f14 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	3301      	adds	r3, #1
 8015ed0:	b2da      	uxtb	r2, r3
 8015ed2:	4b10      	ldr	r3, [pc, #64]	@ (8015f14 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015ed4:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 8015ed6:	f107 0314 	add.w	r3, r7, #20
 8015eda:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8015edc:	683a      	ldr	r2, [r7, #0]
 8015ede:	6939      	ldr	r1, [r7, #16]
 8015ee0:	480d      	ldr	r0, [pc, #52]	@ (8015f18 <gos_traceTraceFormattedUnsafe+0x60>)
 8015ee2:	f001 f8c1 	bl	8017068 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 8015ee6:	480c      	ldr	r0, [pc, #48]	@ (8015f18 <gos_traceTraceFormattedUnsafe+0x60>)
 8015ee8:	f7fa f910 	bl	801010c <gos_traceDriverTransmitString_Unsafe>
 8015eec:	4603      	mov	r3, r0
 8015eee:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8015ef0:	4b08      	ldr	r3, [pc, #32]	@ (8015f14 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d005      	beq.n	8015f04 <gos_traceTraceFormattedUnsafe+0x4c>
 8015ef8:	4b06      	ldr	r3, [pc, #24]	@ (8015f14 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	3b01      	subs	r3, #1
 8015efe:	b2da      	uxtb	r2, r3
 8015f00:	4b04      	ldr	r3, [pc, #16]	@ (8015f14 <gos_traceTraceFormattedUnsafe+0x5c>)
 8015f02:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8015f04:	79fb      	ldrb	r3, [r7, #7]
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3708      	adds	r7, #8
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015f10:	b004      	add	sp, #16
 8015f12:	4770      	bx	lr
 8015f14:	20005e51 	.word	0x20005e51
 8015f18:	20009244 	.word	0x20009244

08015f1c <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8015f20:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8015f24:	480e      	ldr	r0, [pc, #56]	@ (8015f60 <gos_traceDaemonTask+0x44>)
 8015f26:	f7fd ff9b 	bl	8013e60 <gos_mutexLock>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	2b55      	cmp	r3, #85	@ 0x55
 8015f2e:	d10e      	bne.n	8015f4e <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8015f30:	e002      	b.n	8015f38 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 8015f32:	480c      	ldr	r0, [pc, #48]	@ (8015f64 <gos_traceDaemonTask+0x48>)
 8015f34:	f7fa f8d2 	bl	80100dc <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8015f38:	4b0b      	ldr	r3, [pc, #44]	@ (8015f68 <gos_traceDaemonTask+0x4c>)
 8015f3a:	8818      	ldrh	r0, [r3, #0]
 8015f3c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015f40:	22c8      	movs	r2, #200	@ 0xc8
 8015f42:	4908      	ldr	r1, [pc, #32]	@ (8015f64 <gos_traceDaemonTask+0x48>)
 8015f44:	f7fe fa7a 	bl	801443c <gos_queueGet>
 8015f48:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 8015f4a:	2b55      	cmp	r3, #85	@ 0x55
 8015f4c:	d0f1      	beq.n	8015f32 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 8015f4e:	4804      	ldr	r0, [pc, #16]	@ (8015f60 <gos_traceDaemonTask+0x44>)
 8015f50:	f7fe f88c 	bl	801406c <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 8015f54:	4b05      	ldr	r3, [pc, #20]	@ (8015f6c <gos_traceDaemonTask+0x50>)
 8015f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7fb fd7f 	bl	8011a5c <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8015f5e:	e7df      	b.n	8015f20 <gos_traceDaemonTask+0x4>
 8015f60:	2000933c 	.word	0x2000933c
 8015f64:	2000917c 	.word	0x2000917c
 8015f68:	20001170 	.word	0x20001170
 8015f6c:	2000118c 	.word	0x2000118c

08015f70 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 8015f70:	b480      	push	{r7}
 8015f72:	b085      	sub	sp, #20
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 8015f78:	23ae      	movs	r3, #174	@ 0xae
 8015f7a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d00b      	beq.n	8015f9a <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2200      	movs	r2, #0
 8015f86:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015f94:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 8015f96:	2355      	movs	r3, #85	@ 0x55
 8015f98:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 8015f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	3714      	adds	r7, #20
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 8015fb0:	23ae      	movs	r3, #174	@ 0xae
 8015fb2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d041      	beq.n	801603e <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 8015fba:	4b24      	ldr	r3, [pc, #144]	@ (801604c <gos_triggerReset+0xa4>)
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d108      	bne.n	8015fd4 <gos_triggerReset+0x2c>
 8015fc2:	b672      	cpsid	i
 8015fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8015fc8:	4a21      	ldr	r2, [pc, #132]	@ (8016050 <gos_triggerReset+0xa8>)
 8015fca:	6013      	str	r3, [r2, #0]
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	f3bf 8f6f 	isb	sy
 8015fd4:	4b1d      	ldr	r3, [pc, #116]	@ (801604c <gos_triggerReset+0xa4>)
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	b2da      	uxtb	r2, r3
 8015fdc:	4b1b      	ldr	r3, [pc, #108]	@ (801604c <gos_triggerReset+0xa4>)
 8015fde:	701a      	strb	r2, [r3, #0]
 8015fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8016054 <gos_triggerReset+0xac>)
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	b2da      	uxtb	r2, r3
 8015fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8016054 <gos_triggerReset+0xac>)
 8015fea:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 8015ff8:	2355      	movs	r3, #85	@ 0x55
 8015ffa:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8015ffc:	4b13      	ldr	r3, [pc, #76]	@ (801604c <gos_triggerReset+0xa4>)
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d005      	beq.n	8016010 <gos_triggerReset+0x68>
 8016004:	4b11      	ldr	r3, [pc, #68]	@ (801604c <gos_triggerReset+0xa4>)
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	3b01      	subs	r3, #1
 801600a:	b2da      	uxtb	r2, r3
 801600c:	4b0f      	ldr	r3, [pc, #60]	@ (801604c <gos_triggerReset+0xa4>)
 801600e:	701a      	strb	r2, [r3, #0]
 8016010:	4b0e      	ldr	r3, [pc, #56]	@ (801604c <gos_triggerReset+0xa4>)
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d108      	bne.n	801602a <gos_triggerReset+0x82>
 8016018:	4b0d      	ldr	r3, [pc, #52]	@ (8016050 <gos_triggerReset+0xa8>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f383 8810 	msr	PRIMASK, r3
 8016020:	b662      	cpsie	i
 8016022:	f3bf 8f4f 	dsb	sy
 8016026:	f3bf 8f6f 	isb	sy
 801602a:	4b0a      	ldr	r3, [pc, #40]	@ (8016054 <gos_triggerReset+0xac>)
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d005      	beq.n	801603e <gos_triggerReset+0x96>
 8016032:	4b08      	ldr	r3, [pc, #32]	@ (8016054 <gos_triggerReset+0xac>)
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	3b01      	subs	r3, #1
 8016038:	b2da      	uxtb	r2, r3
 801603a:	4b06      	ldr	r3, [pc, #24]	@ (8016054 <gos_triggerReset+0xac>)
 801603c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 801603e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016040:	4618      	mov	r0, r3
 8016042:	3714      	adds	r7, #20
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr
 801604c:	20005e53 	.word	0x20005e53
 8016050:	20005e54 	.word	0x20005e54
 8016054:	20005e51 	.word	0x20005e51

08016058 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 8016064:	23ae      	movs	r3, #174	@ 0xae
 8016066:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 8016068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801606c:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 8096 	beq.w	80161a2 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 8016076:	4b4d      	ldr	r3, [pc, #308]	@ (80161ac <gos_triggerWait+0x154>)
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d108      	bne.n	8016090 <gos_triggerWait+0x38>
 801607e:	b672      	cpsid	i
 8016080:	f3ef 8310 	mrs	r3, PRIMASK
 8016084:	4a4a      	ldr	r2, [pc, #296]	@ (80161b0 <gos_triggerWait+0x158>)
 8016086:	6013      	str	r3, [r2, #0]
 8016088:	f3bf 8f4f 	dsb	sy
 801608c:	f3bf 8f6f 	isb	sy
 8016090:	4b46      	ldr	r3, [pc, #280]	@ (80161ac <gos_triggerWait+0x154>)
 8016092:	781b      	ldrb	r3, [r3, #0]
 8016094:	3301      	adds	r3, #1
 8016096:	b2da      	uxtb	r2, r3
 8016098:	4b44      	ldr	r3, [pc, #272]	@ (80161ac <gos_triggerWait+0x154>)
 801609a:	701a      	strb	r2, [r3, #0]
 801609c:	4b45      	ldr	r3, [pc, #276]	@ (80161b4 <gos_triggerWait+0x15c>)
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	3301      	adds	r3, #1
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	4b43      	ldr	r3, [pc, #268]	@ (80161b4 <gos_triggerWait+0x15c>)
 80160a6:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 80160a8:	f107 0314 	add.w	r3, r7, #20
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fc fd91 	bl	8012bd4 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 80160b2:	8aba      	ldrh	r2, [r7, #20]
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	68ba      	ldr	r2, [r7, #8]
 80160bc:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 80160be:	4b3b      	ldr	r3, [pc, #236]	@ (80161ac <gos_triggerWait+0x154>)
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d005      	beq.n	80160d2 <gos_triggerWait+0x7a>
 80160c6:	4b39      	ldr	r3, [pc, #228]	@ (80161ac <gos_triggerWait+0x154>)
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	3b01      	subs	r3, #1
 80160cc:	b2da      	uxtb	r2, r3
 80160ce:	4b37      	ldr	r3, [pc, #220]	@ (80161ac <gos_triggerWait+0x154>)
 80160d0:	701a      	strb	r2, [r3, #0]
 80160d2:	4b36      	ldr	r3, [pc, #216]	@ (80161ac <gos_triggerWait+0x154>)
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d108      	bne.n	80160ec <gos_triggerWait+0x94>
 80160da:	4b35      	ldr	r3, [pc, #212]	@ (80161b0 <gos_triggerWait+0x158>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	f383 8810 	msr	PRIMASK, r3
 80160e2:	b662      	cpsie	i
 80160e4:	f3bf 8f4f 	dsb	sy
 80160e8:	f3bf 8f6f 	isb	sy
 80160ec:	4b31      	ldr	r3, [pc, #196]	@ (80161b4 <gos_triggerWait+0x15c>)
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d005      	beq.n	8016100 <gos_triggerWait+0xa8>
 80160f4:	4b2f      	ldr	r3, [pc, #188]	@ (80161b4 <gos_triggerWait+0x15c>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	3b01      	subs	r3, #1
 80160fa:	b2da      	uxtb	r2, r3
 80160fc:	4b2d      	ldr	r3, [pc, #180]	@ (80161b4 <gos_triggerWait+0x15c>)
 80160fe:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	429a      	cmp	r2, r3
 801610a:	d204      	bcs.n	8016116 <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 801610c:	8abb      	ldrh	r3, [r7, #20]
 801610e:	6879      	ldr	r1, [r7, #4]
 8016110:	4618      	mov	r0, r3
 8016112:	f7fb fe73 	bl	8011dfc <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 8016116:	4b25      	ldr	r3, [pc, #148]	@ (80161ac <gos_triggerWait+0x154>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d108      	bne.n	8016130 <gos_triggerWait+0xd8>
 801611e:	b672      	cpsid	i
 8016120:	f3ef 8310 	mrs	r3, PRIMASK
 8016124:	4a22      	ldr	r2, [pc, #136]	@ (80161b0 <gos_triggerWait+0x158>)
 8016126:	6013      	str	r3, [r2, #0]
 8016128:	f3bf 8f4f 	dsb	sy
 801612c:	f3bf 8f6f 	isb	sy
 8016130:	4b1e      	ldr	r3, [pc, #120]	@ (80161ac <gos_triggerWait+0x154>)
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	3301      	adds	r3, #1
 8016136:	b2da      	uxtb	r2, r3
 8016138:	4b1c      	ldr	r3, [pc, #112]	@ (80161ac <gos_triggerWait+0x154>)
 801613a:	701a      	strb	r2, [r3, #0]
 801613c:	4b1d      	ldr	r3, [pc, #116]	@ (80161b4 <gos_triggerWait+0x15c>)
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	3301      	adds	r3, #1
 8016142:	b2da      	uxtb	r2, r3
 8016144:	4b1b      	ldr	r3, [pc, #108]	@ (80161b4 <gos_triggerWait+0x15c>)
 8016146:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	681a      	ldr	r2, [r3, #0]
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	429a      	cmp	r2, r3
 8016152:	d105      	bne.n	8016160 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 8016154:	2355      	movs	r3, #85	@ 0x55
 8016156:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801615e:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 8016160:	4b12      	ldr	r3, [pc, #72]	@ (80161ac <gos_triggerWait+0x154>)
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d005      	beq.n	8016174 <gos_triggerWait+0x11c>
 8016168:	4b10      	ldr	r3, [pc, #64]	@ (80161ac <gos_triggerWait+0x154>)
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	3b01      	subs	r3, #1
 801616e:	b2da      	uxtb	r2, r3
 8016170:	4b0e      	ldr	r3, [pc, #56]	@ (80161ac <gos_triggerWait+0x154>)
 8016172:	701a      	strb	r2, [r3, #0]
 8016174:	4b0d      	ldr	r3, [pc, #52]	@ (80161ac <gos_triggerWait+0x154>)
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d108      	bne.n	801618e <gos_triggerWait+0x136>
 801617c:	4b0c      	ldr	r3, [pc, #48]	@ (80161b0 <gos_triggerWait+0x158>)
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f383 8810 	msr	PRIMASK, r3
 8016184:	b662      	cpsie	i
 8016186:	f3bf 8f4f 	dsb	sy
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	4b09      	ldr	r3, [pc, #36]	@ (80161b4 <gos_triggerWait+0x15c>)
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d005      	beq.n	80161a2 <gos_triggerWait+0x14a>
 8016196:	4b07      	ldr	r3, [pc, #28]	@ (80161b4 <gos_triggerWait+0x15c>)
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	3b01      	subs	r3, #1
 801619c:	b2da      	uxtb	r2, r3
 801619e:	4b05      	ldr	r3, [pc, #20]	@ (80161b4 <gos_triggerWait+0x15c>)
 80161a0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 80161a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3718      	adds	r7, #24
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	20005e53 	.word	0x20005e53
 80161b0:	20005e54 	.word	0x20005e54
 80161b4:	20005e51 	.word	0x20005e51

080161b8 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b084      	sub	sp, #16
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 80161c0:	23ae      	movs	r3, #174	@ 0xae
 80161c2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d073      	beq.n	80162b2 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 80161ca:	4b3c      	ldr	r3, [pc, #240]	@ (80162bc <gos_triggerIncrement+0x104>)
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d108      	bne.n	80161e4 <gos_triggerIncrement+0x2c>
 80161d2:	b672      	cpsid	i
 80161d4:	f3ef 8310 	mrs	r3, PRIMASK
 80161d8:	4a39      	ldr	r2, [pc, #228]	@ (80162c0 <gos_triggerIncrement+0x108>)
 80161da:	6013      	str	r3, [r2, #0]
 80161dc:	f3bf 8f4f 	dsb	sy
 80161e0:	f3bf 8f6f 	isb	sy
 80161e4:	4b35      	ldr	r3, [pc, #212]	@ (80162bc <gos_triggerIncrement+0x104>)
 80161e6:	781b      	ldrb	r3, [r3, #0]
 80161e8:	3301      	adds	r3, #1
 80161ea:	b2da      	uxtb	r2, r3
 80161ec:	4b33      	ldr	r3, [pc, #204]	@ (80162bc <gos_triggerIncrement+0x104>)
 80161ee:	701a      	strb	r2, [r3, #0]
 80161f0:	4b34      	ldr	r3, [pc, #208]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	3301      	adds	r3, #1
 80161f6:	b2da      	uxtb	r2, r3
 80161f8:	4b32      	ldr	r3, [pc, #200]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 80161fa:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	1c5a      	adds	r2, r3, #1
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681a      	ldr	r2, [r3, #0]
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	429a      	cmp	r2, r3
 8016210:	d12c      	bne.n	801626c <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 8016212:	4b2d      	ldr	r3, [pc, #180]	@ (80162c8 <gos_triggerIncrement+0x110>)
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d105      	bne.n	8016226 <gos_triggerIncrement+0x6e>
 801621a:	4b2a      	ldr	r3, [pc, #168]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	3301      	adds	r3, #1
 8016220:	b2da      	uxtb	r2, r3
 8016222:	4b28      	ldr	r3, [pc, #160]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 8016224:	701a      	strb	r2, [r3, #0]
 8016226:	4b28      	ldr	r3, [pc, #160]	@ (80162c8 <gos_triggerIncrement+0x110>)
 8016228:	781b      	ldrb	r3, [r3, #0]
 801622a:	3301      	adds	r3, #1
 801622c:	b2da      	uxtb	r2, r3
 801622e:	4b26      	ldr	r3, [pc, #152]	@ (80162c8 <gos_triggerIncrement+0x110>)
 8016230:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	891b      	ldrh	r3, [r3, #8]
 8016236:	4618      	mov	r0, r3
 8016238:	f7fb fef2 	bl	8012020 <gos_taskUnblock>

            GOS_ISR_EXIT
 801623c:	4b22      	ldr	r3, [pc, #136]	@ (80162c8 <gos_triggerIncrement+0x110>)
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d005      	beq.n	8016250 <gos_triggerIncrement+0x98>
 8016244:	4b20      	ldr	r3, [pc, #128]	@ (80162c8 <gos_triggerIncrement+0x110>)
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	3b01      	subs	r3, #1
 801624a:	b2da      	uxtb	r2, r3
 801624c:	4b1e      	ldr	r3, [pc, #120]	@ (80162c8 <gos_triggerIncrement+0x110>)
 801624e:	701a      	strb	r2, [r3, #0]
 8016250:	4b1d      	ldr	r3, [pc, #116]	@ (80162c8 <gos_triggerIncrement+0x110>)
 8016252:	781b      	ldrb	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d109      	bne.n	801626c <gos_triggerIncrement+0xb4>
 8016258:	4b1a      	ldr	r3, [pc, #104]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d005      	beq.n	801626c <gos_triggerIncrement+0xb4>
 8016260:	4b18      	ldr	r3, [pc, #96]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	3b01      	subs	r3, #1
 8016266:	b2da      	uxtb	r2, r3
 8016268:	4b16      	ldr	r3, [pc, #88]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 801626a:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 801626c:	2355      	movs	r3, #85	@ 0x55
 801626e:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8016270:	4b12      	ldr	r3, [pc, #72]	@ (80162bc <gos_triggerIncrement+0x104>)
 8016272:	781b      	ldrb	r3, [r3, #0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d005      	beq.n	8016284 <gos_triggerIncrement+0xcc>
 8016278:	4b10      	ldr	r3, [pc, #64]	@ (80162bc <gos_triggerIncrement+0x104>)
 801627a:	781b      	ldrb	r3, [r3, #0]
 801627c:	3b01      	subs	r3, #1
 801627e:	b2da      	uxtb	r2, r3
 8016280:	4b0e      	ldr	r3, [pc, #56]	@ (80162bc <gos_triggerIncrement+0x104>)
 8016282:	701a      	strb	r2, [r3, #0]
 8016284:	4b0d      	ldr	r3, [pc, #52]	@ (80162bc <gos_triggerIncrement+0x104>)
 8016286:	781b      	ldrb	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d108      	bne.n	801629e <gos_triggerIncrement+0xe6>
 801628c:	4b0c      	ldr	r3, [pc, #48]	@ (80162c0 <gos_triggerIncrement+0x108>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	f383 8810 	msr	PRIMASK, r3
 8016294:	b662      	cpsie	i
 8016296:	f3bf 8f4f 	dsb	sy
 801629a:	f3bf 8f6f 	isb	sy
 801629e:	4b09      	ldr	r3, [pc, #36]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d005      	beq.n	80162b2 <gos_triggerIncrement+0xfa>
 80162a6:	4b07      	ldr	r3, [pc, #28]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	3b01      	subs	r3, #1
 80162ac:	b2da      	uxtb	r2, r3
 80162ae:	4b05      	ldr	r3, [pc, #20]	@ (80162c4 <gos_triggerIncrement+0x10c>)
 80162b0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 80162b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80162b4:	4618      	mov	r0, r3
 80162b6:	3710      	adds	r7, #16
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	20005e53 	.word	0x20005e53
 80162c0:	20005e54 	.word	0x20005e54
 80162c4:	20005e51 	.word	0x20005e51
 80162c8:	20005e52 	.word	0x20005e52

080162cc <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b087      	sub	sp, #28
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 80162d6:	f04f 33ff 	mov.w	r3, #4294967295
 80162da:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 80162dc:	2300      	movs	r3, #0
 80162de:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 80162e0:	2300      	movs	r3, #0
 80162e2:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 80162e4:	2300      	movs	r3, #0
 80162e6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 80162e8:	2300      	movs	r3, #0
 80162ea:	613b      	str	r3, [r7, #16]
 80162ec:	e01e      	b.n	801632c <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	4413      	add	r3, r2
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	461a      	mov	r2, r3
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	4053      	eors	r3, r2
 80162fc:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 80162fe:	2308      	movs	r3, #8
 8016300:	73fb      	strb	r3, [r7, #15]
 8016302:	e00d      	b.n	8016320 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	f003 0301 	and.w	r3, r3, #1
 801630a:	425b      	negs	r3, r3
 801630c:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 801630e:	68ba      	ldr	r2, [r7, #8]
 8016310:	4b0c      	ldr	r3, [pc, #48]	@ (8016344 <gos_crcDriverGetCrc+0x78>)
 8016312:	4013      	ands	r3, r2
 8016314:	697a      	ldr	r2, [r7, #20]
 8016316:	4053      	eors	r3, r2
 8016318:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 801631a:	7bfb      	ldrb	r3, [r7, #15]
 801631c:	3b01      	subs	r3, #1
 801631e:	73fb      	strb	r3, [r7, #15]
 8016320:	7bfb      	ldrb	r3, [r7, #15]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d1ee      	bne.n	8016304 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	3301      	adds	r3, #1
 801632a:	613b      	str	r3, [r7, #16]
 801632c:	693a      	ldr	r2, [r7, #16]
 801632e:	683b      	ldr	r3, [r7, #0]
 8016330:	429a      	cmp	r2, r3
 8016332:	d3dc      	bcc.n	80162ee <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	43db      	mvns	r3, r3
}
 8016338:	4618      	mov	r0, r3
 801633a:	371c      	adds	r7, #28
 801633c:	46bd      	mov	sp, r7
 801633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016342:	4770      	bx	lr
 8016344:	edb88320 	.word	0xedb88320

08016348 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 8016348:	b40f      	push	{r0, r1, r2, r3}
 801634a:	b580      	push	{r7, lr}
 801634c:	b082      	sub	sp, #8
 801634e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 8016350:	23ae      	movs	r3, #174	@ 0xae
 8016352:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 8016354:	f107 0314 	add.w	r3, r7, #20
 8016358:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 801635a:	683a      	ldr	r2, [r7, #0]
 801635c:	6939      	ldr	r1, [r7, #16]
 801635e:	480a      	ldr	r0, [pc, #40]	@ (8016388 <gos_shellDriverTransmitString+0x40>)
 8016360:	f000 fe82 	bl	8017068 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 8016364:	4b09      	ldr	r3, [pc, #36]	@ (801638c <gos_shellDriverTransmitString+0x44>)
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d005      	beq.n	8016378 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 801636c:	4b07      	ldr	r3, [pc, #28]	@ (801638c <gos_shellDriverTransmitString+0x44>)
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	4805      	ldr	r0, [pc, #20]	@ (8016388 <gos_shellDriverTransmitString+0x40>)
 8016372:	4798      	blx	r3
 8016374:	4603      	mov	r3, r0
 8016376:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 8016378:	79fb      	ldrb	r3, [r7, #7]
}
 801637a:	4618      	mov	r0, r3
 801637c:	3708      	adds	r7, #8
 801637e:	46bd      	mov	sp, r7
 8016380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016384:	b004      	add	sp, #16
 8016386:	4770      	bx	lr
 8016388:	20009340 	.word	0x20009340
 801638c:	20005e34 	.word	0x20005e34

08016390 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	460b      	mov	r3, r1
 801639a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 801639c:	23ae      	movs	r3, #174	@ 0xae
 801639e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 80163a0:	4b08      	ldr	r3, [pc, #32]	@ (80163c4 <gos_sysmonDriverReceive+0x34>)
 80163a2:	699b      	ldr	r3, [r3, #24]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d007      	beq.n	80163b8 <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 80163a8:	4b06      	ldr	r3, [pc, #24]	@ (80163c4 <gos_sysmonDriverReceive+0x34>)
 80163aa:	699b      	ldr	r3, [r3, #24]
 80163ac:	887a      	ldrh	r2, [r7, #2]
 80163ae:	4611      	mov	r1, r2
 80163b0:	6878      	ldr	r0, [r7, #4]
 80163b2:	4798      	blx	r3
 80163b4:	4603      	mov	r3, r0
 80163b6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 80163b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	3710      	adds	r7, #16
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	20005e34 	.word	0x20005e34

080163c8 <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	460b      	mov	r3, r1
 80163d2:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 80163d4:	23ae      	movs	r3, #174	@ 0xae
 80163d6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 80163d8:	4b08      	ldr	r3, [pc, #32]	@ (80163fc <gos_sysmonDriverTransmit+0x34>)
 80163da:	695b      	ldr	r3, [r3, #20]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d007      	beq.n	80163f0 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 80163e0:	4b06      	ldr	r3, [pc, #24]	@ (80163fc <gos_sysmonDriverTransmit+0x34>)
 80163e2:	695b      	ldr	r3, [r3, #20]
 80163e4:	887a      	ldrh	r2, [r7, #2]
 80163e6:	4611      	mov	r1, r2
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	4798      	blx	r3
 80163ec:	4603      	mov	r3, r0
 80163ee:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 80163f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3710      	adds	r7, #16
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	20005e34 	.word	0x20005e34

08016400 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 8016408:	23ae      	movs	r3, #174	@ 0xae
 801640a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 801640c:	4b07      	ldr	r3, [pc, #28]	@ (801642c <gos_timerDriverSysTimerGet+0x2c>)
 801640e:	691b      	ldr	r3, [r3, #16]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d005      	beq.n	8016420 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 8016414:	4b05      	ldr	r3, [pc, #20]	@ (801642c <gos_timerDriverSysTimerGet+0x2c>)
 8016416:	691b      	ldr	r3, [r3, #16]
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	4798      	blx	r3
 801641c:	4603      	mov	r3, r0
 801641e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 8016420:	7bfb      	ldrb	r3, [r7, #15]
}
 8016422:	4618      	mov	r0, r3
 8016424:	3710      	adds	r7, #16
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	20005e34 	.word	0x20005e34

08016430 <atoi>:
 8016430:	220a      	movs	r2, #10
 8016432:	2100      	movs	r1, #0
 8016434:	f000 b87a 	b.w	801652c <strtol>

08016438 <_strtol_l.constprop.0>:
 8016438:	2b24      	cmp	r3, #36	@ 0x24
 801643a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801643e:	4686      	mov	lr, r0
 8016440:	4690      	mov	r8, r2
 8016442:	d801      	bhi.n	8016448 <_strtol_l.constprop.0+0x10>
 8016444:	2b01      	cmp	r3, #1
 8016446:	d106      	bne.n	8016456 <_strtol_l.constprop.0+0x1e>
 8016448:	f000 fe7a 	bl	8017140 <__errno>
 801644c:	2316      	movs	r3, #22
 801644e:	6003      	str	r3, [r0, #0]
 8016450:	2000      	movs	r0, #0
 8016452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016456:	4834      	ldr	r0, [pc, #208]	@ (8016528 <_strtol_l.constprop.0+0xf0>)
 8016458:	460d      	mov	r5, r1
 801645a:	462a      	mov	r2, r5
 801645c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016460:	5d06      	ldrb	r6, [r0, r4]
 8016462:	f016 0608 	ands.w	r6, r6, #8
 8016466:	d1f8      	bne.n	801645a <_strtol_l.constprop.0+0x22>
 8016468:	2c2d      	cmp	r4, #45	@ 0x2d
 801646a:	d12d      	bne.n	80164c8 <_strtol_l.constprop.0+0x90>
 801646c:	782c      	ldrb	r4, [r5, #0]
 801646e:	2601      	movs	r6, #1
 8016470:	1c95      	adds	r5, r2, #2
 8016472:	f033 0210 	bics.w	r2, r3, #16
 8016476:	d109      	bne.n	801648c <_strtol_l.constprop.0+0x54>
 8016478:	2c30      	cmp	r4, #48	@ 0x30
 801647a:	d12a      	bne.n	80164d2 <_strtol_l.constprop.0+0x9a>
 801647c:	782a      	ldrb	r2, [r5, #0]
 801647e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016482:	2a58      	cmp	r2, #88	@ 0x58
 8016484:	d125      	bne.n	80164d2 <_strtol_l.constprop.0+0x9a>
 8016486:	786c      	ldrb	r4, [r5, #1]
 8016488:	2310      	movs	r3, #16
 801648a:	3502      	adds	r5, #2
 801648c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016490:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016494:	2200      	movs	r2, #0
 8016496:	fbbc f9f3 	udiv	r9, ip, r3
 801649a:	4610      	mov	r0, r2
 801649c:	fb03 ca19 	mls	sl, r3, r9, ip
 80164a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80164a4:	2f09      	cmp	r7, #9
 80164a6:	d81b      	bhi.n	80164e0 <_strtol_l.constprop.0+0xa8>
 80164a8:	463c      	mov	r4, r7
 80164aa:	42a3      	cmp	r3, r4
 80164ac:	dd27      	ble.n	80164fe <_strtol_l.constprop.0+0xc6>
 80164ae:	1c57      	adds	r7, r2, #1
 80164b0:	d007      	beq.n	80164c2 <_strtol_l.constprop.0+0x8a>
 80164b2:	4581      	cmp	r9, r0
 80164b4:	d320      	bcc.n	80164f8 <_strtol_l.constprop.0+0xc0>
 80164b6:	d101      	bne.n	80164bc <_strtol_l.constprop.0+0x84>
 80164b8:	45a2      	cmp	sl, r4
 80164ba:	db1d      	blt.n	80164f8 <_strtol_l.constprop.0+0xc0>
 80164bc:	fb00 4003 	mla	r0, r0, r3, r4
 80164c0:	2201      	movs	r2, #1
 80164c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164c6:	e7eb      	b.n	80164a0 <_strtol_l.constprop.0+0x68>
 80164c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80164ca:	bf04      	itt	eq
 80164cc:	782c      	ldrbeq	r4, [r5, #0]
 80164ce:	1c95      	addeq	r5, r2, #2
 80164d0:	e7cf      	b.n	8016472 <_strtol_l.constprop.0+0x3a>
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d1da      	bne.n	801648c <_strtol_l.constprop.0+0x54>
 80164d6:	2c30      	cmp	r4, #48	@ 0x30
 80164d8:	bf0c      	ite	eq
 80164da:	2308      	moveq	r3, #8
 80164dc:	230a      	movne	r3, #10
 80164de:	e7d5      	b.n	801648c <_strtol_l.constprop.0+0x54>
 80164e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80164e4:	2f19      	cmp	r7, #25
 80164e6:	d801      	bhi.n	80164ec <_strtol_l.constprop.0+0xb4>
 80164e8:	3c37      	subs	r4, #55	@ 0x37
 80164ea:	e7de      	b.n	80164aa <_strtol_l.constprop.0+0x72>
 80164ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80164f0:	2f19      	cmp	r7, #25
 80164f2:	d804      	bhi.n	80164fe <_strtol_l.constprop.0+0xc6>
 80164f4:	3c57      	subs	r4, #87	@ 0x57
 80164f6:	e7d8      	b.n	80164aa <_strtol_l.constprop.0+0x72>
 80164f8:	f04f 32ff 	mov.w	r2, #4294967295
 80164fc:	e7e1      	b.n	80164c2 <_strtol_l.constprop.0+0x8a>
 80164fe:	1c53      	adds	r3, r2, #1
 8016500:	d108      	bne.n	8016514 <_strtol_l.constprop.0+0xdc>
 8016502:	2322      	movs	r3, #34	@ 0x22
 8016504:	f8ce 3000 	str.w	r3, [lr]
 8016508:	4660      	mov	r0, ip
 801650a:	f1b8 0f00 	cmp.w	r8, #0
 801650e:	d0a0      	beq.n	8016452 <_strtol_l.constprop.0+0x1a>
 8016510:	1e69      	subs	r1, r5, #1
 8016512:	e006      	b.n	8016522 <_strtol_l.constprop.0+0xea>
 8016514:	b106      	cbz	r6, 8016518 <_strtol_l.constprop.0+0xe0>
 8016516:	4240      	negs	r0, r0
 8016518:	f1b8 0f00 	cmp.w	r8, #0
 801651c:	d099      	beq.n	8016452 <_strtol_l.constprop.0+0x1a>
 801651e:	2a00      	cmp	r2, #0
 8016520:	d1f6      	bne.n	8016510 <_strtol_l.constprop.0+0xd8>
 8016522:	f8c8 1000 	str.w	r1, [r8]
 8016526:	e794      	b.n	8016452 <_strtol_l.constprop.0+0x1a>
 8016528:	0801ac59 	.word	0x0801ac59

0801652c <strtol>:
 801652c:	4613      	mov	r3, r2
 801652e:	460a      	mov	r2, r1
 8016530:	4601      	mov	r1, r0
 8016532:	4802      	ldr	r0, [pc, #8]	@ (801653c <strtol+0x10>)
 8016534:	6800      	ldr	r0, [r0, #0]
 8016536:	f7ff bf7f 	b.w	8016438 <_strtol_l.constprop.0>
 801653a:	bf00      	nop
 801653c:	20001204 	.word	0x20001204

08016540 <__cvt>:
 8016540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016544:	ec57 6b10 	vmov	r6, r7, d0
 8016548:	2f00      	cmp	r7, #0
 801654a:	460c      	mov	r4, r1
 801654c:	4619      	mov	r1, r3
 801654e:	463b      	mov	r3, r7
 8016550:	bfbb      	ittet	lt
 8016552:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016556:	461f      	movlt	r7, r3
 8016558:	2300      	movge	r3, #0
 801655a:	232d      	movlt	r3, #45	@ 0x2d
 801655c:	700b      	strb	r3, [r1, #0]
 801655e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016560:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016564:	4691      	mov	r9, r2
 8016566:	f023 0820 	bic.w	r8, r3, #32
 801656a:	bfbc      	itt	lt
 801656c:	4632      	movlt	r2, r6
 801656e:	4616      	movlt	r6, r2
 8016570:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016574:	d005      	beq.n	8016582 <__cvt+0x42>
 8016576:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801657a:	d100      	bne.n	801657e <__cvt+0x3e>
 801657c:	3401      	adds	r4, #1
 801657e:	2102      	movs	r1, #2
 8016580:	e000      	b.n	8016584 <__cvt+0x44>
 8016582:	2103      	movs	r1, #3
 8016584:	ab03      	add	r3, sp, #12
 8016586:	9301      	str	r3, [sp, #4]
 8016588:	ab02      	add	r3, sp, #8
 801658a:	9300      	str	r3, [sp, #0]
 801658c:	ec47 6b10 	vmov	d0, r6, r7
 8016590:	4653      	mov	r3, sl
 8016592:	4622      	mov	r2, r4
 8016594:	f000 fea0 	bl	80172d8 <_dtoa_r>
 8016598:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801659c:	4605      	mov	r5, r0
 801659e:	d119      	bne.n	80165d4 <__cvt+0x94>
 80165a0:	f019 0f01 	tst.w	r9, #1
 80165a4:	d00e      	beq.n	80165c4 <__cvt+0x84>
 80165a6:	eb00 0904 	add.w	r9, r0, r4
 80165aa:	2200      	movs	r2, #0
 80165ac:	2300      	movs	r3, #0
 80165ae:	4630      	mov	r0, r6
 80165b0:	4639      	mov	r1, r7
 80165b2:	f7ea faa9 	bl	8000b08 <__aeabi_dcmpeq>
 80165b6:	b108      	cbz	r0, 80165bc <__cvt+0x7c>
 80165b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80165bc:	2230      	movs	r2, #48	@ 0x30
 80165be:	9b03      	ldr	r3, [sp, #12]
 80165c0:	454b      	cmp	r3, r9
 80165c2:	d31e      	bcc.n	8016602 <__cvt+0xc2>
 80165c4:	9b03      	ldr	r3, [sp, #12]
 80165c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165c8:	1b5b      	subs	r3, r3, r5
 80165ca:	4628      	mov	r0, r5
 80165cc:	6013      	str	r3, [r2, #0]
 80165ce:	b004      	add	sp, #16
 80165d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80165d8:	eb00 0904 	add.w	r9, r0, r4
 80165dc:	d1e5      	bne.n	80165aa <__cvt+0x6a>
 80165de:	7803      	ldrb	r3, [r0, #0]
 80165e0:	2b30      	cmp	r3, #48	@ 0x30
 80165e2:	d10a      	bne.n	80165fa <__cvt+0xba>
 80165e4:	2200      	movs	r2, #0
 80165e6:	2300      	movs	r3, #0
 80165e8:	4630      	mov	r0, r6
 80165ea:	4639      	mov	r1, r7
 80165ec:	f7ea fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 80165f0:	b918      	cbnz	r0, 80165fa <__cvt+0xba>
 80165f2:	f1c4 0401 	rsb	r4, r4, #1
 80165f6:	f8ca 4000 	str.w	r4, [sl]
 80165fa:	f8da 3000 	ldr.w	r3, [sl]
 80165fe:	4499      	add	r9, r3
 8016600:	e7d3      	b.n	80165aa <__cvt+0x6a>
 8016602:	1c59      	adds	r1, r3, #1
 8016604:	9103      	str	r1, [sp, #12]
 8016606:	701a      	strb	r2, [r3, #0]
 8016608:	e7d9      	b.n	80165be <__cvt+0x7e>

0801660a <__exponent>:
 801660a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801660c:	2900      	cmp	r1, #0
 801660e:	bfba      	itte	lt
 8016610:	4249      	neglt	r1, r1
 8016612:	232d      	movlt	r3, #45	@ 0x2d
 8016614:	232b      	movge	r3, #43	@ 0x2b
 8016616:	2909      	cmp	r1, #9
 8016618:	7002      	strb	r2, [r0, #0]
 801661a:	7043      	strb	r3, [r0, #1]
 801661c:	dd29      	ble.n	8016672 <__exponent+0x68>
 801661e:	f10d 0307 	add.w	r3, sp, #7
 8016622:	461d      	mov	r5, r3
 8016624:	270a      	movs	r7, #10
 8016626:	461a      	mov	r2, r3
 8016628:	fbb1 f6f7 	udiv	r6, r1, r7
 801662c:	fb07 1416 	mls	r4, r7, r6, r1
 8016630:	3430      	adds	r4, #48	@ 0x30
 8016632:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016636:	460c      	mov	r4, r1
 8016638:	2c63      	cmp	r4, #99	@ 0x63
 801663a:	f103 33ff 	add.w	r3, r3, #4294967295
 801663e:	4631      	mov	r1, r6
 8016640:	dcf1      	bgt.n	8016626 <__exponent+0x1c>
 8016642:	3130      	adds	r1, #48	@ 0x30
 8016644:	1e94      	subs	r4, r2, #2
 8016646:	f803 1c01 	strb.w	r1, [r3, #-1]
 801664a:	1c41      	adds	r1, r0, #1
 801664c:	4623      	mov	r3, r4
 801664e:	42ab      	cmp	r3, r5
 8016650:	d30a      	bcc.n	8016668 <__exponent+0x5e>
 8016652:	f10d 0309 	add.w	r3, sp, #9
 8016656:	1a9b      	subs	r3, r3, r2
 8016658:	42ac      	cmp	r4, r5
 801665a:	bf88      	it	hi
 801665c:	2300      	movhi	r3, #0
 801665e:	3302      	adds	r3, #2
 8016660:	4403      	add	r3, r0
 8016662:	1a18      	subs	r0, r3, r0
 8016664:	b003      	add	sp, #12
 8016666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016668:	f813 6b01 	ldrb.w	r6, [r3], #1
 801666c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016670:	e7ed      	b.n	801664e <__exponent+0x44>
 8016672:	2330      	movs	r3, #48	@ 0x30
 8016674:	3130      	adds	r1, #48	@ 0x30
 8016676:	7083      	strb	r3, [r0, #2]
 8016678:	70c1      	strb	r1, [r0, #3]
 801667a:	1d03      	adds	r3, r0, #4
 801667c:	e7f1      	b.n	8016662 <__exponent+0x58>
	...

08016680 <_printf_float>:
 8016680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016684:	b08d      	sub	sp, #52	@ 0x34
 8016686:	460c      	mov	r4, r1
 8016688:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801668c:	4616      	mov	r6, r2
 801668e:	461f      	mov	r7, r3
 8016690:	4605      	mov	r5, r0
 8016692:	f000 fd0b 	bl	80170ac <_localeconv_r>
 8016696:	6803      	ldr	r3, [r0, #0]
 8016698:	9304      	str	r3, [sp, #16]
 801669a:	4618      	mov	r0, r3
 801669c:	f7e9 fe08 	bl	80002b0 <strlen>
 80166a0:	2300      	movs	r3, #0
 80166a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80166a4:	f8d8 3000 	ldr.w	r3, [r8]
 80166a8:	9005      	str	r0, [sp, #20]
 80166aa:	3307      	adds	r3, #7
 80166ac:	f023 0307 	bic.w	r3, r3, #7
 80166b0:	f103 0208 	add.w	r2, r3, #8
 80166b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80166b8:	f8d4 b000 	ldr.w	fp, [r4]
 80166bc:	f8c8 2000 	str.w	r2, [r8]
 80166c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80166c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80166c8:	9307      	str	r3, [sp, #28]
 80166ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80166ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80166d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166d6:	4b9c      	ldr	r3, [pc, #624]	@ (8016948 <_printf_float+0x2c8>)
 80166d8:	f04f 32ff 	mov.w	r2, #4294967295
 80166dc:	f7ea fa46 	bl	8000b6c <__aeabi_dcmpun>
 80166e0:	bb70      	cbnz	r0, 8016740 <_printf_float+0xc0>
 80166e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166e6:	4b98      	ldr	r3, [pc, #608]	@ (8016948 <_printf_float+0x2c8>)
 80166e8:	f04f 32ff 	mov.w	r2, #4294967295
 80166ec:	f7ea fa20 	bl	8000b30 <__aeabi_dcmple>
 80166f0:	bb30      	cbnz	r0, 8016740 <_printf_float+0xc0>
 80166f2:	2200      	movs	r2, #0
 80166f4:	2300      	movs	r3, #0
 80166f6:	4640      	mov	r0, r8
 80166f8:	4649      	mov	r1, r9
 80166fa:	f7ea fa0f 	bl	8000b1c <__aeabi_dcmplt>
 80166fe:	b110      	cbz	r0, 8016706 <_printf_float+0x86>
 8016700:	232d      	movs	r3, #45	@ 0x2d
 8016702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016706:	4a91      	ldr	r2, [pc, #580]	@ (801694c <_printf_float+0x2cc>)
 8016708:	4b91      	ldr	r3, [pc, #580]	@ (8016950 <_printf_float+0x2d0>)
 801670a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801670e:	bf94      	ite	ls
 8016710:	4690      	movls	r8, r2
 8016712:	4698      	movhi	r8, r3
 8016714:	2303      	movs	r3, #3
 8016716:	6123      	str	r3, [r4, #16]
 8016718:	f02b 0304 	bic.w	r3, fp, #4
 801671c:	6023      	str	r3, [r4, #0]
 801671e:	f04f 0900 	mov.w	r9, #0
 8016722:	9700      	str	r7, [sp, #0]
 8016724:	4633      	mov	r3, r6
 8016726:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016728:	4621      	mov	r1, r4
 801672a:	4628      	mov	r0, r5
 801672c:	f000 f9d2 	bl	8016ad4 <_printf_common>
 8016730:	3001      	adds	r0, #1
 8016732:	f040 808d 	bne.w	8016850 <_printf_float+0x1d0>
 8016736:	f04f 30ff 	mov.w	r0, #4294967295
 801673a:	b00d      	add	sp, #52	@ 0x34
 801673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016740:	4642      	mov	r2, r8
 8016742:	464b      	mov	r3, r9
 8016744:	4640      	mov	r0, r8
 8016746:	4649      	mov	r1, r9
 8016748:	f7ea fa10 	bl	8000b6c <__aeabi_dcmpun>
 801674c:	b140      	cbz	r0, 8016760 <_printf_float+0xe0>
 801674e:	464b      	mov	r3, r9
 8016750:	2b00      	cmp	r3, #0
 8016752:	bfbc      	itt	lt
 8016754:	232d      	movlt	r3, #45	@ 0x2d
 8016756:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801675a:	4a7e      	ldr	r2, [pc, #504]	@ (8016954 <_printf_float+0x2d4>)
 801675c:	4b7e      	ldr	r3, [pc, #504]	@ (8016958 <_printf_float+0x2d8>)
 801675e:	e7d4      	b.n	801670a <_printf_float+0x8a>
 8016760:	6863      	ldr	r3, [r4, #4]
 8016762:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016766:	9206      	str	r2, [sp, #24]
 8016768:	1c5a      	adds	r2, r3, #1
 801676a:	d13b      	bne.n	80167e4 <_printf_float+0x164>
 801676c:	2306      	movs	r3, #6
 801676e:	6063      	str	r3, [r4, #4]
 8016770:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016774:	2300      	movs	r3, #0
 8016776:	6022      	str	r2, [r4, #0]
 8016778:	9303      	str	r3, [sp, #12]
 801677a:	ab0a      	add	r3, sp, #40	@ 0x28
 801677c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016780:	ab09      	add	r3, sp, #36	@ 0x24
 8016782:	9300      	str	r3, [sp, #0]
 8016784:	6861      	ldr	r1, [r4, #4]
 8016786:	ec49 8b10 	vmov	d0, r8, r9
 801678a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801678e:	4628      	mov	r0, r5
 8016790:	f7ff fed6 	bl	8016540 <__cvt>
 8016794:	9b06      	ldr	r3, [sp, #24]
 8016796:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016798:	2b47      	cmp	r3, #71	@ 0x47
 801679a:	4680      	mov	r8, r0
 801679c:	d129      	bne.n	80167f2 <_printf_float+0x172>
 801679e:	1cc8      	adds	r0, r1, #3
 80167a0:	db02      	blt.n	80167a8 <_printf_float+0x128>
 80167a2:	6863      	ldr	r3, [r4, #4]
 80167a4:	4299      	cmp	r1, r3
 80167a6:	dd41      	ble.n	801682c <_printf_float+0x1ac>
 80167a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80167ac:	fa5f fa8a 	uxtb.w	sl, sl
 80167b0:	3901      	subs	r1, #1
 80167b2:	4652      	mov	r2, sl
 80167b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80167b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80167ba:	f7ff ff26 	bl	801660a <__exponent>
 80167be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80167c0:	1813      	adds	r3, r2, r0
 80167c2:	2a01      	cmp	r2, #1
 80167c4:	4681      	mov	r9, r0
 80167c6:	6123      	str	r3, [r4, #16]
 80167c8:	dc02      	bgt.n	80167d0 <_printf_float+0x150>
 80167ca:	6822      	ldr	r2, [r4, #0]
 80167cc:	07d2      	lsls	r2, r2, #31
 80167ce:	d501      	bpl.n	80167d4 <_printf_float+0x154>
 80167d0:	3301      	adds	r3, #1
 80167d2:	6123      	str	r3, [r4, #16]
 80167d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d0a2      	beq.n	8016722 <_printf_float+0xa2>
 80167dc:	232d      	movs	r3, #45	@ 0x2d
 80167de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80167e2:	e79e      	b.n	8016722 <_printf_float+0xa2>
 80167e4:	9a06      	ldr	r2, [sp, #24]
 80167e6:	2a47      	cmp	r2, #71	@ 0x47
 80167e8:	d1c2      	bne.n	8016770 <_printf_float+0xf0>
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1c0      	bne.n	8016770 <_printf_float+0xf0>
 80167ee:	2301      	movs	r3, #1
 80167f0:	e7bd      	b.n	801676e <_printf_float+0xee>
 80167f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80167f6:	d9db      	bls.n	80167b0 <_printf_float+0x130>
 80167f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80167fc:	d118      	bne.n	8016830 <_printf_float+0x1b0>
 80167fe:	2900      	cmp	r1, #0
 8016800:	6863      	ldr	r3, [r4, #4]
 8016802:	dd0b      	ble.n	801681c <_printf_float+0x19c>
 8016804:	6121      	str	r1, [r4, #16]
 8016806:	b913      	cbnz	r3, 801680e <_printf_float+0x18e>
 8016808:	6822      	ldr	r2, [r4, #0]
 801680a:	07d0      	lsls	r0, r2, #31
 801680c:	d502      	bpl.n	8016814 <_printf_float+0x194>
 801680e:	3301      	adds	r3, #1
 8016810:	440b      	add	r3, r1
 8016812:	6123      	str	r3, [r4, #16]
 8016814:	65a1      	str	r1, [r4, #88]	@ 0x58
 8016816:	f04f 0900 	mov.w	r9, #0
 801681a:	e7db      	b.n	80167d4 <_printf_float+0x154>
 801681c:	b913      	cbnz	r3, 8016824 <_printf_float+0x1a4>
 801681e:	6822      	ldr	r2, [r4, #0]
 8016820:	07d2      	lsls	r2, r2, #31
 8016822:	d501      	bpl.n	8016828 <_printf_float+0x1a8>
 8016824:	3302      	adds	r3, #2
 8016826:	e7f4      	b.n	8016812 <_printf_float+0x192>
 8016828:	2301      	movs	r3, #1
 801682a:	e7f2      	b.n	8016812 <_printf_float+0x192>
 801682c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016832:	4299      	cmp	r1, r3
 8016834:	db05      	blt.n	8016842 <_printf_float+0x1c2>
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	6121      	str	r1, [r4, #16]
 801683a:	07d8      	lsls	r0, r3, #31
 801683c:	d5ea      	bpl.n	8016814 <_printf_float+0x194>
 801683e:	1c4b      	adds	r3, r1, #1
 8016840:	e7e7      	b.n	8016812 <_printf_float+0x192>
 8016842:	2900      	cmp	r1, #0
 8016844:	bfd4      	ite	le
 8016846:	f1c1 0202 	rsble	r2, r1, #2
 801684a:	2201      	movgt	r2, #1
 801684c:	4413      	add	r3, r2
 801684e:	e7e0      	b.n	8016812 <_printf_float+0x192>
 8016850:	6823      	ldr	r3, [r4, #0]
 8016852:	055a      	lsls	r2, r3, #21
 8016854:	d407      	bmi.n	8016866 <_printf_float+0x1e6>
 8016856:	6923      	ldr	r3, [r4, #16]
 8016858:	4642      	mov	r2, r8
 801685a:	4631      	mov	r1, r6
 801685c:	4628      	mov	r0, r5
 801685e:	47b8      	blx	r7
 8016860:	3001      	adds	r0, #1
 8016862:	d12b      	bne.n	80168bc <_printf_float+0x23c>
 8016864:	e767      	b.n	8016736 <_printf_float+0xb6>
 8016866:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801686a:	f240 80dd 	bls.w	8016a28 <_printf_float+0x3a8>
 801686e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016872:	2200      	movs	r2, #0
 8016874:	2300      	movs	r3, #0
 8016876:	f7ea f947 	bl	8000b08 <__aeabi_dcmpeq>
 801687a:	2800      	cmp	r0, #0
 801687c:	d033      	beq.n	80168e6 <_printf_float+0x266>
 801687e:	4a37      	ldr	r2, [pc, #220]	@ (801695c <_printf_float+0x2dc>)
 8016880:	2301      	movs	r3, #1
 8016882:	4631      	mov	r1, r6
 8016884:	4628      	mov	r0, r5
 8016886:	47b8      	blx	r7
 8016888:	3001      	adds	r0, #1
 801688a:	f43f af54 	beq.w	8016736 <_printf_float+0xb6>
 801688e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016892:	4543      	cmp	r3, r8
 8016894:	db02      	blt.n	801689c <_printf_float+0x21c>
 8016896:	6823      	ldr	r3, [r4, #0]
 8016898:	07d8      	lsls	r0, r3, #31
 801689a:	d50f      	bpl.n	80168bc <_printf_float+0x23c>
 801689c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168a0:	4631      	mov	r1, r6
 80168a2:	4628      	mov	r0, r5
 80168a4:	47b8      	blx	r7
 80168a6:	3001      	adds	r0, #1
 80168a8:	f43f af45 	beq.w	8016736 <_printf_float+0xb6>
 80168ac:	f04f 0900 	mov.w	r9, #0
 80168b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80168b4:	f104 0a1a 	add.w	sl, r4, #26
 80168b8:	45c8      	cmp	r8, r9
 80168ba:	dc09      	bgt.n	80168d0 <_printf_float+0x250>
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	079b      	lsls	r3, r3, #30
 80168c0:	f100 8103 	bmi.w	8016aca <_printf_float+0x44a>
 80168c4:	68e0      	ldr	r0, [r4, #12]
 80168c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80168c8:	4298      	cmp	r0, r3
 80168ca:	bfb8      	it	lt
 80168cc:	4618      	movlt	r0, r3
 80168ce:	e734      	b.n	801673a <_printf_float+0xba>
 80168d0:	2301      	movs	r3, #1
 80168d2:	4652      	mov	r2, sl
 80168d4:	4631      	mov	r1, r6
 80168d6:	4628      	mov	r0, r5
 80168d8:	47b8      	blx	r7
 80168da:	3001      	adds	r0, #1
 80168dc:	f43f af2b 	beq.w	8016736 <_printf_float+0xb6>
 80168e0:	f109 0901 	add.w	r9, r9, #1
 80168e4:	e7e8      	b.n	80168b8 <_printf_float+0x238>
 80168e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	dc39      	bgt.n	8016960 <_printf_float+0x2e0>
 80168ec:	4a1b      	ldr	r2, [pc, #108]	@ (801695c <_printf_float+0x2dc>)
 80168ee:	2301      	movs	r3, #1
 80168f0:	4631      	mov	r1, r6
 80168f2:	4628      	mov	r0, r5
 80168f4:	47b8      	blx	r7
 80168f6:	3001      	adds	r0, #1
 80168f8:	f43f af1d 	beq.w	8016736 <_printf_float+0xb6>
 80168fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016900:	ea59 0303 	orrs.w	r3, r9, r3
 8016904:	d102      	bne.n	801690c <_printf_float+0x28c>
 8016906:	6823      	ldr	r3, [r4, #0]
 8016908:	07d9      	lsls	r1, r3, #31
 801690a:	d5d7      	bpl.n	80168bc <_printf_float+0x23c>
 801690c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016910:	4631      	mov	r1, r6
 8016912:	4628      	mov	r0, r5
 8016914:	47b8      	blx	r7
 8016916:	3001      	adds	r0, #1
 8016918:	f43f af0d 	beq.w	8016736 <_printf_float+0xb6>
 801691c:	f04f 0a00 	mov.w	sl, #0
 8016920:	f104 0b1a 	add.w	fp, r4, #26
 8016924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016926:	425b      	negs	r3, r3
 8016928:	4553      	cmp	r3, sl
 801692a:	dc01      	bgt.n	8016930 <_printf_float+0x2b0>
 801692c:	464b      	mov	r3, r9
 801692e:	e793      	b.n	8016858 <_printf_float+0x1d8>
 8016930:	2301      	movs	r3, #1
 8016932:	465a      	mov	r2, fp
 8016934:	4631      	mov	r1, r6
 8016936:	4628      	mov	r0, r5
 8016938:	47b8      	blx	r7
 801693a:	3001      	adds	r0, #1
 801693c:	f43f aefb 	beq.w	8016736 <_printf_float+0xb6>
 8016940:	f10a 0a01 	add.w	sl, sl, #1
 8016944:	e7ee      	b.n	8016924 <_printf_float+0x2a4>
 8016946:	bf00      	nop
 8016948:	7fefffff 	.word	0x7fefffff
 801694c:	0801ad59 	.word	0x0801ad59
 8016950:	0801ad5d 	.word	0x0801ad5d
 8016954:	0801ad61 	.word	0x0801ad61
 8016958:	0801ad65 	.word	0x0801ad65
 801695c:	0801ad69 	.word	0x0801ad69
 8016960:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016962:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016966:	4553      	cmp	r3, sl
 8016968:	bfa8      	it	ge
 801696a:	4653      	movge	r3, sl
 801696c:	2b00      	cmp	r3, #0
 801696e:	4699      	mov	r9, r3
 8016970:	dc36      	bgt.n	80169e0 <_printf_float+0x360>
 8016972:	f04f 0b00 	mov.w	fp, #0
 8016976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801697a:	f104 021a 	add.w	r2, r4, #26
 801697e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016980:	9306      	str	r3, [sp, #24]
 8016982:	eba3 0309 	sub.w	r3, r3, r9
 8016986:	455b      	cmp	r3, fp
 8016988:	dc31      	bgt.n	80169ee <_printf_float+0x36e>
 801698a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801698c:	459a      	cmp	sl, r3
 801698e:	dc3a      	bgt.n	8016a06 <_printf_float+0x386>
 8016990:	6823      	ldr	r3, [r4, #0]
 8016992:	07da      	lsls	r2, r3, #31
 8016994:	d437      	bmi.n	8016a06 <_printf_float+0x386>
 8016996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016998:	ebaa 0903 	sub.w	r9, sl, r3
 801699c:	9b06      	ldr	r3, [sp, #24]
 801699e:	ebaa 0303 	sub.w	r3, sl, r3
 80169a2:	4599      	cmp	r9, r3
 80169a4:	bfa8      	it	ge
 80169a6:	4699      	movge	r9, r3
 80169a8:	f1b9 0f00 	cmp.w	r9, #0
 80169ac:	dc33      	bgt.n	8016a16 <_printf_float+0x396>
 80169ae:	f04f 0800 	mov.w	r8, #0
 80169b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80169b6:	f104 0b1a 	add.w	fp, r4, #26
 80169ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80169bc:	ebaa 0303 	sub.w	r3, sl, r3
 80169c0:	eba3 0309 	sub.w	r3, r3, r9
 80169c4:	4543      	cmp	r3, r8
 80169c6:	f77f af79 	ble.w	80168bc <_printf_float+0x23c>
 80169ca:	2301      	movs	r3, #1
 80169cc:	465a      	mov	r2, fp
 80169ce:	4631      	mov	r1, r6
 80169d0:	4628      	mov	r0, r5
 80169d2:	47b8      	blx	r7
 80169d4:	3001      	adds	r0, #1
 80169d6:	f43f aeae 	beq.w	8016736 <_printf_float+0xb6>
 80169da:	f108 0801 	add.w	r8, r8, #1
 80169de:	e7ec      	b.n	80169ba <_printf_float+0x33a>
 80169e0:	4642      	mov	r2, r8
 80169e2:	4631      	mov	r1, r6
 80169e4:	4628      	mov	r0, r5
 80169e6:	47b8      	blx	r7
 80169e8:	3001      	adds	r0, #1
 80169ea:	d1c2      	bne.n	8016972 <_printf_float+0x2f2>
 80169ec:	e6a3      	b.n	8016736 <_printf_float+0xb6>
 80169ee:	2301      	movs	r3, #1
 80169f0:	4631      	mov	r1, r6
 80169f2:	4628      	mov	r0, r5
 80169f4:	9206      	str	r2, [sp, #24]
 80169f6:	47b8      	blx	r7
 80169f8:	3001      	adds	r0, #1
 80169fa:	f43f ae9c 	beq.w	8016736 <_printf_float+0xb6>
 80169fe:	9a06      	ldr	r2, [sp, #24]
 8016a00:	f10b 0b01 	add.w	fp, fp, #1
 8016a04:	e7bb      	b.n	801697e <_printf_float+0x2fe>
 8016a06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a0a:	4631      	mov	r1, r6
 8016a0c:	4628      	mov	r0, r5
 8016a0e:	47b8      	blx	r7
 8016a10:	3001      	adds	r0, #1
 8016a12:	d1c0      	bne.n	8016996 <_printf_float+0x316>
 8016a14:	e68f      	b.n	8016736 <_printf_float+0xb6>
 8016a16:	9a06      	ldr	r2, [sp, #24]
 8016a18:	464b      	mov	r3, r9
 8016a1a:	4442      	add	r2, r8
 8016a1c:	4631      	mov	r1, r6
 8016a1e:	4628      	mov	r0, r5
 8016a20:	47b8      	blx	r7
 8016a22:	3001      	adds	r0, #1
 8016a24:	d1c3      	bne.n	80169ae <_printf_float+0x32e>
 8016a26:	e686      	b.n	8016736 <_printf_float+0xb6>
 8016a28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016a2c:	f1ba 0f01 	cmp.w	sl, #1
 8016a30:	dc01      	bgt.n	8016a36 <_printf_float+0x3b6>
 8016a32:	07db      	lsls	r3, r3, #31
 8016a34:	d536      	bpl.n	8016aa4 <_printf_float+0x424>
 8016a36:	2301      	movs	r3, #1
 8016a38:	4642      	mov	r2, r8
 8016a3a:	4631      	mov	r1, r6
 8016a3c:	4628      	mov	r0, r5
 8016a3e:	47b8      	blx	r7
 8016a40:	3001      	adds	r0, #1
 8016a42:	f43f ae78 	beq.w	8016736 <_printf_float+0xb6>
 8016a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a4a:	4631      	mov	r1, r6
 8016a4c:	4628      	mov	r0, r5
 8016a4e:	47b8      	blx	r7
 8016a50:	3001      	adds	r0, #1
 8016a52:	f43f ae70 	beq.w	8016736 <_printf_float+0xb6>
 8016a56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016a62:	f7ea f851 	bl	8000b08 <__aeabi_dcmpeq>
 8016a66:	b9c0      	cbnz	r0, 8016a9a <_printf_float+0x41a>
 8016a68:	4653      	mov	r3, sl
 8016a6a:	f108 0201 	add.w	r2, r8, #1
 8016a6e:	4631      	mov	r1, r6
 8016a70:	4628      	mov	r0, r5
 8016a72:	47b8      	blx	r7
 8016a74:	3001      	adds	r0, #1
 8016a76:	d10c      	bne.n	8016a92 <_printf_float+0x412>
 8016a78:	e65d      	b.n	8016736 <_printf_float+0xb6>
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	465a      	mov	r2, fp
 8016a7e:	4631      	mov	r1, r6
 8016a80:	4628      	mov	r0, r5
 8016a82:	47b8      	blx	r7
 8016a84:	3001      	adds	r0, #1
 8016a86:	f43f ae56 	beq.w	8016736 <_printf_float+0xb6>
 8016a8a:	f108 0801 	add.w	r8, r8, #1
 8016a8e:	45d0      	cmp	r8, sl
 8016a90:	dbf3      	blt.n	8016a7a <_printf_float+0x3fa>
 8016a92:	464b      	mov	r3, r9
 8016a94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016a98:	e6df      	b.n	801685a <_printf_float+0x1da>
 8016a9a:	f04f 0800 	mov.w	r8, #0
 8016a9e:	f104 0b1a 	add.w	fp, r4, #26
 8016aa2:	e7f4      	b.n	8016a8e <_printf_float+0x40e>
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	4642      	mov	r2, r8
 8016aa8:	e7e1      	b.n	8016a6e <_printf_float+0x3ee>
 8016aaa:	2301      	movs	r3, #1
 8016aac:	464a      	mov	r2, r9
 8016aae:	4631      	mov	r1, r6
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	47b8      	blx	r7
 8016ab4:	3001      	adds	r0, #1
 8016ab6:	f43f ae3e 	beq.w	8016736 <_printf_float+0xb6>
 8016aba:	f108 0801 	add.w	r8, r8, #1
 8016abe:	68e3      	ldr	r3, [r4, #12]
 8016ac0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016ac2:	1a5b      	subs	r3, r3, r1
 8016ac4:	4543      	cmp	r3, r8
 8016ac6:	dcf0      	bgt.n	8016aaa <_printf_float+0x42a>
 8016ac8:	e6fc      	b.n	80168c4 <_printf_float+0x244>
 8016aca:	f04f 0800 	mov.w	r8, #0
 8016ace:	f104 0919 	add.w	r9, r4, #25
 8016ad2:	e7f4      	b.n	8016abe <_printf_float+0x43e>

08016ad4 <_printf_common>:
 8016ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ad8:	4616      	mov	r6, r2
 8016ada:	4698      	mov	r8, r3
 8016adc:	688a      	ldr	r2, [r1, #8]
 8016ade:	690b      	ldr	r3, [r1, #16]
 8016ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016ae4:	4293      	cmp	r3, r2
 8016ae6:	bfb8      	it	lt
 8016ae8:	4613      	movlt	r3, r2
 8016aea:	6033      	str	r3, [r6, #0]
 8016aec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016af0:	4607      	mov	r7, r0
 8016af2:	460c      	mov	r4, r1
 8016af4:	b10a      	cbz	r2, 8016afa <_printf_common+0x26>
 8016af6:	3301      	adds	r3, #1
 8016af8:	6033      	str	r3, [r6, #0]
 8016afa:	6823      	ldr	r3, [r4, #0]
 8016afc:	0699      	lsls	r1, r3, #26
 8016afe:	bf42      	ittt	mi
 8016b00:	6833      	ldrmi	r3, [r6, #0]
 8016b02:	3302      	addmi	r3, #2
 8016b04:	6033      	strmi	r3, [r6, #0]
 8016b06:	6825      	ldr	r5, [r4, #0]
 8016b08:	f015 0506 	ands.w	r5, r5, #6
 8016b0c:	d106      	bne.n	8016b1c <_printf_common+0x48>
 8016b0e:	f104 0a19 	add.w	sl, r4, #25
 8016b12:	68e3      	ldr	r3, [r4, #12]
 8016b14:	6832      	ldr	r2, [r6, #0]
 8016b16:	1a9b      	subs	r3, r3, r2
 8016b18:	42ab      	cmp	r3, r5
 8016b1a:	dc26      	bgt.n	8016b6a <_printf_common+0x96>
 8016b1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016b20:	6822      	ldr	r2, [r4, #0]
 8016b22:	3b00      	subs	r3, #0
 8016b24:	bf18      	it	ne
 8016b26:	2301      	movne	r3, #1
 8016b28:	0692      	lsls	r2, r2, #26
 8016b2a:	d42b      	bmi.n	8016b84 <_printf_common+0xb0>
 8016b2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016b30:	4641      	mov	r1, r8
 8016b32:	4638      	mov	r0, r7
 8016b34:	47c8      	blx	r9
 8016b36:	3001      	adds	r0, #1
 8016b38:	d01e      	beq.n	8016b78 <_printf_common+0xa4>
 8016b3a:	6823      	ldr	r3, [r4, #0]
 8016b3c:	6922      	ldr	r2, [r4, #16]
 8016b3e:	f003 0306 	and.w	r3, r3, #6
 8016b42:	2b04      	cmp	r3, #4
 8016b44:	bf02      	ittt	eq
 8016b46:	68e5      	ldreq	r5, [r4, #12]
 8016b48:	6833      	ldreq	r3, [r6, #0]
 8016b4a:	1aed      	subeq	r5, r5, r3
 8016b4c:	68a3      	ldr	r3, [r4, #8]
 8016b4e:	bf0c      	ite	eq
 8016b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b54:	2500      	movne	r5, #0
 8016b56:	4293      	cmp	r3, r2
 8016b58:	bfc4      	itt	gt
 8016b5a:	1a9b      	subgt	r3, r3, r2
 8016b5c:	18ed      	addgt	r5, r5, r3
 8016b5e:	2600      	movs	r6, #0
 8016b60:	341a      	adds	r4, #26
 8016b62:	42b5      	cmp	r5, r6
 8016b64:	d11a      	bne.n	8016b9c <_printf_common+0xc8>
 8016b66:	2000      	movs	r0, #0
 8016b68:	e008      	b.n	8016b7c <_printf_common+0xa8>
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	4652      	mov	r2, sl
 8016b6e:	4641      	mov	r1, r8
 8016b70:	4638      	mov	r0, r7
 8016b72:	47c8      	blx	r9
 8016b74:	3001      	adds	r0, #1
 8016b76:	d103      	bne.n	8016b80 <_printf_common+0xac>
 8016b78:	f04f 30ff 	mov.w	r0, #4294967295
 8016b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b80:	3501      	adds	r5, #1
 8016b82:	e7c6      	b.n	8016b12 <_printf_common+0x3e>
 8016b84:	18e1      	adds	r1, r4, r3
 8016b86:	1c5a      	adds	r2, r3, #1
 8016b88:	2030      	movs	r0, #48	@ 0x30
 8016b8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016b8e:	4422      	add	r2, r4
 8016b90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016b94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016b98:	3302      	adds	r3, #2
 8016b9a:	e7c7      	b.n	8016b2c <_printf_common+0x58>
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	4622      	mov	r2, r4
 8016ba0:	4641      	mov	r1, r8
 8016ba2:	4638      	mov	r0, r7
 8016ba4:	47c8      	blx	r9
 8016ba6:	3001      	adds	r0, #1
 8016ba8:	d0e6      	beq.n	8016b78 <_printf_common+0xa4>
 8016baa:	3601      	adds	r6, #1
 8016bac:	e7d9      	b.n	8016b62 <_printf_common+0x8e>
	...

08016bb0 <_printf_i>:
 8016bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bb4:	7e0f      	ldrb	r7, [r1, #24]
 8016bb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016bb8:	2f78      	cmp	r7, #120	@ 0x78
 8016bba:	4691      	mov	r9, r2
 8016bbc:	4680      	mov	r8, r0
 8016bbe:	460c      	mov	r4, r1
 8016bc0:	469a      	mov	sl, r3
 8016bc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016bc6:	d807      	bhi.n	8016bd8 <_printf_i+0x28>
 8016bc8:	2f62      	cmp	r7, #98	@ 0x62
 8016bca:	d80a      	bhi.n	8016be2 <_printf_i+0x32>
 8016bcc:	2f00      	cmp	r7, #0
 8016bce:	f000 80d2 	beq.w	8016d76 <_printf_i+0x1c6>
 8016bd2:	2f58      	cmp	r7, #88	@ 0x58
 8016bd4:	f000 80b9 	beq.w	8016d4a <_printf_i+0x19a>
 8016bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016bdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016be0:	e03a      	b.n	8016c58 <_printf_i+0xa8>
 8016be2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016be6:	2b15      	cmp	r3, #21
 8016be8:	d8f6      	bhi.n	8016bd8 <_printf_i+0x28>
 8016bea:	a101      	add	r1, pc, #4	@ (adr r1, 8016bf0 <_printf_i+0x40>)
 8016bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016bf0:	08016c49 	.word	0x08016c49
 8016bf4:	08016c5d 	.word	0x08016c5d
 8016bf8:	08016bd9 	.word	0x08016bd9
 8016bfc:	08016bd9 	.word	0x08016bd9
 8016c00:	08016bd9 	.word	0x08016bd9
 8016c04:	08016bd9 	.word	0x08016bd9
 8016c08:	08016c5d 	.word	0x08016c5d
 8016c0c:	08016bd9 	.word	0x08016bd9
 8016c10:	08016bd9 	.word	0x08016bd9
 8016c14:	08016bd9 	.word	0x08016bd9
 8016c18:	08016bd9 	.word	0x08016bd9
 8016c1c:	08016d5d 	.word	0x08016d5d
 8016c20:	08016c87 	.word	0x08016c87
 8016c24:	08016d17 	.word	0x08016d17
 8016c28:	08016bd9 	.word	0x08016bd9
 8016c2c:	08016bd9 	.word	0x08016bd9
 8016c30:	08016d7f 	.word	0x08016d7f
 8016c34:	08016bd9 	.word	0x08016bd9
 8016c38:	08016c87 	.word	0x08016c87
 8016c3c:	08016bd9 	.word	0x08016bd9
 8016c40:	08016bd9 	.word	0x08016bd9
 8016c44:	08016d1f 	.word	0x08016d1f
 8016c48:	6833      	ldr	r3, [r6, #0]
 8016c4a:	1d1a      	adds	r2, r3, #4
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	6032      	str	r2, [r6, #0]
 8016c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016c54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e09d      	b.n	8016d98 <_printf_i+0x1e8>
 8016c5c:	6833      	ldr	r3, [r6, #0]
 8016c5e:	6820      	ldr	r0, [r4, #0]
 8016c60:	1d19      	adds	r1, r3, #4
 8016c62:	6031      	str	r1, [r6, #0]
 8016c64:	0606      	lsls	r6, r0, #24
 8016c66:	d501      	bpl.n	8016c6c <_printf_i+0xbc>
 8016c68:	681d      	ldr	r5, [r3, #0]
 8016c6a:	e003      	b.n	8016c74 <_printf_i+0xc4>
 8016c6c:	0645      	lsls	r5, r0, #25
 8016c6e:	d5fb      	bpl.n	8016c68 <_printf_i+0xb8>
 8016c70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016c74:	2d00      	cmp	r5, #0
 8016c76:	da03      	bge.n	8016c80 <_printf_i+0xd0>
 8016c78:	232d      	movs	r3, #45	@ 0x2d
 8016c7a:	426d      	negs	r5, r5
 8016c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c80:	4859      	ldr	r0, [pc, #356]	@ (8016de8 <_printf_i+0x238>)
 8016c82:	230a      	movs	r3, #10
 8016c84:	e011      	b.n	8016caa <_printf_i+0xfa>
 8016c86:	6821      	ldr	r1, [r4, #0]
 8016c88:	6833      	ldr	r3, [r6, #0]
 8016c8a:	0608      	lsls	r0, r1, #24
 8016c8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016c90:	d402      	bmi.n	8016c98 <_printf_i+0xe8>
 8016c92:	0649      	lsls	r1, r1, #25
 8016c94:	bf48      	it	mi
 8016c96:	b2ad      	uxthmi	r5, r5
 8016c98:	2f6f      	cmp	r7, #111	@ 0x6f
 8016c9a:	4853      	ldr	r0, [pc, #332]	@ (8016de8 <_printf_i+0x238>)
 8016c9c:	6033      	str	r3, [r6, #0]
 8016c9e:	bf14      	ite	ne
 8016ca0:	230a      	movne	r3, #10
 8016ca2:	2308      	moveq	r3, #8
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016caa:	6866      	ldr	r6, [r4, #4]
 8016cac:	60a6      	str	r6, [r4, #8]
 8016cae:	2e00      	cmp	r6, #0
 8016cb0:	bfa2      	ittt	ge
 8016cb2:	6821      	ldrge	r1, [r4, #0]
 8016cb4:	f021 0104 	bicge.w	r1, r1, #4
 8016cb8:	6021      	strge	r1, [r4, #0]
 8016cba:	b90d      	cbnz	r5, 8016cc0 <_printf_i+0x110>
 8016cbc:	2e00      	cmp	r6, #0
 8016cbe:	d04b      	beq.n	8016d58 <_printf_i+0x1a8>
 8016cc0:	4616      	mov	r6, r2
 8016cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8016cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8016cca:	5dc7      	ldrb	r7, [r0, r7]
 8016ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016cd0:	462f      	mov	r7, r5
 8016cd2:	42bb      	cmp	r3, r7
 8016cd4:	460d      	mov	r5, r1
 8016cd6:	d9f4      	bls.n	8016cc2 <_printf_i+0x112>
 8016cd8:	2b08      	cmp	r3, #8
 8016cda:	d10b      	bne.n	8016cf4 <_printf_i+0x144>
 8016cdc:	6823      	ldr	r3, [r4, #0]
 8016cde:	07df      	lsls	r7, r3, #31
 8016ce0:	d508      	bpl.n	8016cf4 <_printf_i+0x144>
 8016ce2:	6923      	ldr	r3, [r4, #16]
 8016ce4:	6861      	ldr	r1, [r4, #4]
 8016ce6:	4299      	cmp	r1, r3
 8016ce8:	bfde      	ittt	le
 8016cea:	2330      	movle	r3, #48	@ 0x30
 8016cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016cf4:	1b92      	subs	r2, r2, r6
 8016cf6:	6122      	str	r2, [r4, #16]
 8016cf8:	f8cd a000 	str.w	sl, [sp]
 8016cfc:	464b      	mov	r3, r9
 8016cfe:	aa03      	add	r2, sp, #12
 8016d00:	4621      	mov	r1, r4
 8016d02:	4640      	mov	r0, r8
 8016d04:	f7ff fee6 	bl	8016ad4 <_printf_common>
 8016d08:	3001      	adds	r0, #1
 8016d0a:	d14a      	bne.n	8016da2 <_printf_i+0x1f2>
 8016d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d10:	b004      	add	sp, #16
 8016d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d16:	6823      	ldr	r3, [r4, #0]
 8016d18:	f043 0320 	orr.w	r3, r3, #32
 8016d1c:	6023      	str	r3, [r4, #0]
 8016d1e:	4833      	ldr	r0, [pc, #204]	@ (8016dec <_printf_i+0x23c>)
 8016d20:	2778      	movs	r7, #120	@ 0x78
 8016d22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016d26:	6823      	ldr	r3, [r4, #0]
 8016d28:	6831      	ldr	r1, [r6, #0]
 8016d2a:	061f      	lsls	r7, r3, #24
 8016d2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8016d30:	d402      	bmi.n	8016d38 <_printf_i+0x188>
 8016d32:	065f      	lsls	r7, r3, #25
 8016d34:	bf48      	it	mi
 8016d36:	b2ad      	uxthmi	r5, r5
 8016d38:	6031      	str	r1, [r6, #0]
 8016d3a:	07d9      	lsls	r1, r3, #31
 8016d3c:	bf44      	itt	mi
 8016d3e:	f043 0320 	orrmi.w	r3, r3, #32
 8016d42:	6023      	strmi	r3, [r4, #0]
 8016d44:	b11d      	cbz	r5, 8016d4e <_printf_i+0x19e>
 8016d46:	2310      	movs	r3, #16
 8016d48:	e7ac      	b.n	8016ca4 <_printf_i+0xf4>
 8016d4a:	4827      	ldr	r0, [pc, #156]	@ (8016de8 <_printf_i+0x238>)
 8016d4c:	e7e9      	b.n	8016d22 <_printf_i+0x172>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	f023 0320 	bic.w	r3, r3, #32
 8016d54:	6023      	str	r3, [r4, #0]
 8016d56:	e7f6      	b.n	8016d46 <_printf_i+0x196>
 8016d58:	4616      	mov	r6, r2
 8016d5a:	e7bd      	b.n	8016cd8 <_printf_i+0x128>
 8016d5c:	6833      	ldr	r3, [r6, #0]
 8016d5e:	6825      	ldr	r5, [r4, #0]
 8016d60:	6961      	ldr	r1, [r4, #20]
 8016d62:	1d18      	adds	r0, r3, #4
 8016d64:	6030      	str	r0, [r6, #0]
 8016d66:	062e      	lsls	r6, r5, #24
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	d501      	bpl.n	8016d70 <_printf_i+0x1c0>
 8016d6c:	6019      	str	r1, [r3, #0]
 8016d6e:	e002      	b.n	8016d76 <_printf_i+0x1c6>
 8016d70:	0668      	lsls	r0, r5, #25
 8016d72:	d5fb      	bpl.n	8016d6c <_printf_i+0x1bc>
 8016d74:	8019      	strh	r1, [r3, #0]
 8016d76:	2300      	movs	r3, #0
 8016d78:	6123      	str	r3, [r4, #16]
 8016d7a:	4616      	mov	r6, r2
 8016d7c:	e7bc      	b.n	8016cf8 <_printf_i+0x148>
 8016d7e:	6833      	ldr	r3, [r6, #0]
 8016d80:	1d1a      	adds	r2, r3, #4
 8016d82:	6032      	str	r2, [r6, #0]
 8016d84:	681e      	ldr	r6, [r3, #0]
 8016d86:	6862      	ldr	r2, [r4, #4]
 8016d88:	2100      	movs	r1, #0
 8016d8a:	4630      	mov	r0, r6
 8016d8c:	f7e9 fa40 	bl	8000210 <memchr>
 8016d90:	b108      	cbz	r0, 8016d96 <_printf_i+0x1e6>
 8016d92:	1b80      	subs	r0, r0, r6
 8016d94:	6060      	str	r0, [r4, #4]
 8016d96:	6863      	ldr	r3, [r4, #4]
 8016d98:	6123      	str	r3, [r4, #16]
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016da0:	e7aa      	b.n	8016cf8 <_printf_i+0x148>
 8016da2:	6923      	ldr	r3, [r4, #16]
 8016da4:	4632      	mov	r2, r6
 8016da6:	4649      	mov	r1, r9
 8016da8:	4640      	mov	r0, r8
 8016daa:	47d0      	blx	sl
 8016dac:	3001      	adds	r0, #1
 8016dae:	d0ad      	beq.n	8016d0c <_printf_i+0x15c>
 8016db0:	6823      	ldr	r3, [r4, #0]
 8016db2:	079b      	lsls	r3, r3, #30
 8016db4:	d413      	bmi.n	8016dde <_printf_i+0x22e>
 8016db6:	68e0      	ldr	r0, [r4, #12]
 8016db8:	9b03      	ldr	r3, [sp, #12]
 8016dba:	4298      	cmp	r0, r3
 8016dbc:	bfb8      	it	lt
 8016dbe:	4618      	movlt	r0, r3
 8016dc0:	e7a6      	b.n	8016d10 <_printf_i+0x160>
 8016dc2:	2301      	movs	r3, #1
 8016dc4:	4632      	mov	r2, r6
 8016dc6:	4649      	mov	r1, r9
 8016dc8:	4640      	mov	r0, r8
 8016dca:	47d0      	blx	sl
 8016dcc:	3001      	adds	r0, #1
 8016dce:	d09d      	beq.n	8016d0c <_printf_i+0x15c>
 8016dd0:	3501      	adds	r5, #1
 8016dd2:	68e3      	ldr	r3, [r4, #12]
 8016dd4:	9903      	ldr	r1, [sp, #12]
 8016dd6:	1a5b      	subs	r3, r3, r1
 8016dd8:	42ab      	cmp	r3, r5
 8016dda:	dcf2      	bgt.n	8016dc2 <_printf_i+0x212>
 8016ddc:	e7eb      	b.n	8016db6 <_printf_i+0x206>
 8016dde:	2500      	movs	r5, #0
 8016de0:	f104 0619 	add.w	r6, r4, #25
 8016de4:	e7f5      	b.n	8016dd2 <_printf_i+0x222>
 8016de6:	bf00      	nop
 8016de8:	0801ad6b 	.word	0x0801ad6b
 8016dec:	0801ad7c 	.word	0x0801ad7c

08016df0 <std>:
 8016df0:	2300      	movs	r3, #0
 8016df2:	b510      	push	{r4, lr}
 8016df4:	4604      	mov	r4, r0
 8016df6:	e9c0 3300 	strd	r3, r3, [r0]
 8016dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016dfe:	6083      	str	r3, [r0, #8]
 8016e00:	8181      	strh	r1, [r0, #12]
 8016e02:	6643      	str	r3, [r0, #100]	@ 0x64
 8016e04:	81c2      	strh	r2, [r0, #14]
 8016e06:	6183      	str	r3, [r0, #24]
 8016e08:	4619      	mov	r1, r3
 8016e0a:	2208      	movs	r2, #8
 8016e0c:	305c      	adds	r0, #92	@ 0x5c
 8016e0e:	f000 f935 	bl	801707c <memset>
 8016e12:	4b0d      	ldr	r3, [pc, #52]	@ (8016e48 <std+0x58>)
 8016e14:	6263      	str	r3, [r4, #36]	@ 0x24
 8016e16:	4b0d      	ldr	r3, [pc, #52]	@ (8016e4c <std+0x5c>)
 8016e18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8016e50 <std+0x60>)
 8016e1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8016e54 <std+0x64>)
 8016e20:	6323      	str	r3, [r4, #48]	@ 0x30
 8016e22:	4b0d      	ldr	r3, [pc, #52]	@ (8016e58 <std+0x68>)
 8016e24:	6224      	str	r4, [r4, #32]
 8016e26:	429c      	cmp	r4, r3
 8016e28:	d006      	beq.n	8016e38 <std+0x48>
 8016e2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016e2e:	4294      	cmp	r4, r2
 8016e30:	d002      	beq.n	8016e38 <std+0x48>
 8016e32:	33d0      	adds	r3, #208	@ 0xd0
 8016e34:	429c      	cmp	r4, r3
 8016e36:	d105      	bne.n	8016e44 <std+0x54>
 8016e38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e40:	f000 b9a8 	b.w	8017194 <__retarget_lock_init_recursive>
 8016e44:	bd10      	pop	{r4, pc}
 8016e46:	bf00      	nop
 8016e48:	08016fb5 	.word	0x08016fb5
 8016e4c:	08016fd7 	.word	0x08016fd7
 8016e50:	0801700f 	.word	0x0801700f
 8016e54:	08017033 	.word	0x08017033
 8016e58:	20009408 	.word	0x20009408

08016e5c <stdio_exit_handler>:
 8016e5c:	4a02      	ldr	r2, [pc, #8]	@ (8016e68 <stdio_exit_handler+0xc>)
 8016e5e:	4903      	ldr	r1, [pc, #12]	@ (8016e6c <stdio_exit_handler+0x10>)
 8016e60:	4803      	ldr	r0, [pc, #12]	@ (8016e70 <stdio_exit_handler+0x14>)
 8016e62:	f000 b869 	b.w	8016f38 <_fwalk_sglue>
 8016e66:	bf00      	nop
 8016e68:	200011f8 	.word	0x200011f8
 8016e6c:	08018b1d 	.word	0x08018b1d
 8016e70:	20001208 	.word	0x20001208

08016e74 <cleanup_stdio>:
 8016e74:	6841      	ldr	r1, [r0, #4]
 8016e76:	4b0c      	ldr	r3, [pc, #48]	@ (8016ea8 <cleanup_stdio+0x34>)
 8016e78:	4299      	cmp	r1, r3
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	d001      	beq.n	8016e84 <cleanup_stdio+0x10>
 8016e80:	f001 fe4c 	bl	8018b1c <_fflush_r>
 8016e84:	68a1      	ldr	r1, [r4, #8]
 8016e86:	4b09      	ldr	r3, [pc, #36]	@ (8016eac <cleanup_stdio+0x38>)
 8016e88:	4299      	cmp	r1, r3
 8016e8a:	d002      	beq.n	8016e92 <cleanup_stdio+0x1e>
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f001 fe45 	bl	8018b1c <_fflush_r>
 8016e92:	68e1      	ldr	r1, [r4, #12]
 8016e94:	4b06      	ldr	r3, [pc, #24]	@ (8016eb0 <cleanup_stdio+0x3c>)
 8016e96:	4299      	cmp	r1, r3
 8016e98:	d004      	beq.n	8016ea4 <cleanup_stdio+0x30>
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ea0:	f001 be3c 	b.w	8018b1c <_fflush_r>
 8016ea4:	bd10      	pop	{r4, pc}
 8016ea6:	bf00      	nop
 8016ea8:	20009408 	.word	0x20009408
 8016eac:	20009470 	.word	0x20009470
 8016eb0:	200094d8 	.word	0x200094d8

08016eb4 <global_stdio_init.part.0>:
 8016eb4:	b510      	push	{r4, lr}
 8016eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8016ee4 <global_stdio_init.part.0+0x30>)
 8016eb8:	4c0b      	ldr	r4, [pc, #44]	@ (8016ee8 <global_stdio_init.part.0+0x34>)
 8016eba:	4a0c      	ldr	r2, [pc, #48]	@ (8016eec <global_stdio_init.part.0+0x38>)
 8016ebc:	601a      	str	r2, [r3, #0]
 8016ebe:	4620      	mov	r0, r4
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	2104      	movs	r1, #4
 8016ec4:	f7ff ff94 	bl	8016df0 <std>
 8016ec8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016ecc:	2201      	movs	r2, #1
 8016ece:	2109      	movs	r1, #9
 8016ed0:	f7ff ff8e 	bl	8016df0 <std>
 8016ed4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016ed8:	2202      	movs	r2, #2
 8016eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ede:	2112      	movs	r1, #18
 8016ee0:	f7ff bf86 	b.w	8016df0 <std>
 8016ee4:	20009540 	.word	0x20009540
 8016ee8:	20009408 	.word	0x20009408
 8016eec:	08016e5d 	.word	0x08016e5d

08016ef0 <__sfp_lock_acquire>:
 8016ef0:	4801      	ldr	r0, [pc, #4]	@ (8016ef8 <__sfp_lock_acquire+0x8>)
 8016ef2:	f000 b950 	b.w	8017196 <__retarget_lock_acquire_recursive>
 8016ef6:	bf00      	nop
 8016ef8:	20009549 	.word	0x20009549

08016efc <__sfp_lock_release>:
 8016efc:	4801      	ldr	r0, [pc, #4]	@ (8016f04 <__sfp_lock_release+0x8>)
 8016efe:	f000 b94b 	b.w	8017198 <__retarget_lock_release_recursive>
 8016f02:	bf00      	nop
 8016f04:	20009549 	.word	0x20009549

08016f08 <__sinit>:
 8016f08:	b510      	push	{r4, lr}
 8016f0a:	4604      	mov	r4, r0
 8016f0c:	f7ff fff0 	bl	8016ef0 <__sfp_lock_acquire>
 8016f10:	6a23      	ldr	r3, [r4, #32]
 8016f12:	b11b      	cbz	r3, 8016f1c <__sinit+0x14>
 8016f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f18:	f7ff bff0 	b.w	8016efc <__sfp_lock_release>
 8016f1c:	4b04      	ldr	r3, [pc, #16]	@ (8016f30 <__sinit+0x28>)
 8016f1e:	6223      	str	r3, [r4, #32]
 8016f20:	4b04      	ldr	r3, [pc, #16]	@ (8016f34 <__sinit+0x2c>)
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d1f5      	bne.n	8016f14 <__sinit+0xc>
 8016f28:	f7ff ffc4 	bl	8016eb4 <global_stdio_init.part.0>
 8016f2c:	e7f2      	b.n	8016f14 <__sinit+0xc>
 8016f2e:	bf00      	nop
 8016f30:	08016e75 	.word	0x08016e75
 8016f34:	20009540 	.word	0x20009540

08016f38 <_fwalk_sglue>:
 8016f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f3c:	4607      	mov	r7, r0
 8016f3e:	4688      	mov	r8, r1
 8016f40:	4614      	mov	r4, r2
 8016f42:	2600      	movs	r6, #0
 8016f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f48:	f1b9 0901 	subs.w	r9, r9, #1
 8016f4c:	d505      	bpl.n	8016f5a <_fwalk_sglue+0x22>
 8016f4e:	6824      	ldr	r4, [r4, #0]
 8016f50:	2c00      	cmp	r4, #0
 8016f52:	d1f7      	bne.n	8016f44 <_fwalk_sglue+0xc>
 8016f54:	4630      	mov	r0, r6
 8016f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f5a:	89ab      	ldrh	r3, [r5, #12]
 8016f5c:	2b01      	cmp	r3, #1
 8016f5e:	d907      	bls.n	8016f70 <_fwalk_sglue+0x38>
 8016f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f64:	3301      	adds	r3, #1
 8016f66:	d003      	beq.n	8016f70 <_fwalk_sglue+0x38>
 8016f68:	4629      	mov	r1, r5
 8016f6a:	4638      	mov	r0, r7
 8016f6c:	47c0      	blx	r8
 8016f6e:	4306      	orrs	r6, r0
 8016f70:	3568      	adds	r5, #104	@ 0x68
 8016f72:	e7e9      	b.n	8016f48 <_fwalk_sglue+0x10>

08016f74 <siprintf>:
 8016f74:	b40e      	push	{r1, r2, r3}
 8016f76:	b500      	push	{lr}
 8016f78:	b09c      	sub	sp, #112	@ 0x70
 8016f7a:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f7c:	9002      	str	r0, [sp, #8]
 8016f7e:	9006      	str	r0, [sp, #24]
 8016f80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f84:	4809      	ldr	r0, [pc, #36]	@ (8016fac <siprintf+0x38>)
 8016f86:	9107      	str	r1, [sp, #28]
 8016f88:	9104      	str	r1, [sp, #16]
 8016f8a:	4909      	ldr	r1, [pc, #36]	@ (8016fb0 <siprintf+0x3c>)
 8016f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f90:	9105      	str	r1, [sp, #20]
 8016f92:	6800      	ldr	r0, [r0, #0]
 8016f94:	9301      	str	r3, [sp, #4]
 8016f96:	a902      	add	r1, sp, #8
 8016f98:	f001 fc40 	bl	801881c <_svfiprintf_r>
 8016f9c:	9b02      	ldr	r3, [sp, #8]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	701a      	strb	r2, [r3, #0]
 8016fa2:	b01c      	add	sp, #112	@ 0x70
 8016fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016fa8:	b003      	add	sp, #12
 8016faa:	4770      	bx	lr
 8016fac:	20001204 	.word	0x20001204
 8016fb0:	ffff0208 	.word	0xffff0208

08016fb4 <__sread>:
 8016fb4:	b510      	push	{r4, lr}
 8016fb6:	460c      	mov	r4, r1
 8016fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fbc:	f000 f89c 	bl	80170f8 <_read_r>
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	bfab      	itete	ge
 8016fc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8016fc8:	181b      	addge	r3, r3, r0
 8016fca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016fce:	bfac      	ite	ge
 8016fd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016fd2:	81a3      	strhlt	r3, [r4, #12]
 8016fd4:	bd10      	pop	{r4, pc}

08016fd6 <__swrite>:
 8016fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fda:	461f      	mov	r7, r3
 8016fdc:	898b      	ldrh	r3, [r1, #12]
 8016fde:	05db      	lsls	r3, r3, #23
 8016fe0:	4605      	mov	r5, r0
 8016fe2:	460c      	mov	r4, r1
 8016fe4:	4616      	mov	r6, r2
 8016fe6:	d505      	bpl.n	8016ff4 <__swrite+0x1e>
 8016fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fec:	2302      	movs	r3, #2
 8016fee:	2200      	movs	r2, #0
 8016ff0:	f000 f870 	bl	80170d4 <_lseek_r>
 8016ff4:	89a3      	ldrh	r3, [r4, #12]
 8016ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016ffe:	81a3      	strh	r3, [r4, #12]
 8017000:	4632      	mov	r2, r6
 8017002:	463b      	mov	r3, r7
 8017004:	4628      	mov	r0, r5
 8017006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801700a:	f000 b887 	b.w	801711c <_write_r>

0801700e <__sseek>:
 801700e:	b510      	push	{r4, lr}
 8017010:	460c      	mov	r4, r1
 8017012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017016:	f000 f85d 	bl	80170d4 <_lseek_r>
 801701a:	1c43      	adds	r3, r0, #1
 801701c:	89a3      	ldrh	r3, [r4, #12]
 801701e:	bf15      	itete	ne
 8017020:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801702a:	81a3      	strheq	r3, [r4, #12]
 801702c:	bf18      	it	ne
 801702e:	81a3      	strhne	r3, [r4, #12]
 8017030:	bd10      	pop	{r4, pc}

08017032 <__sclose>:
 8017032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017036:	f000 b83d 	b.w	80170b4 <_close_r>
	...

0801703c <_vsiprintf_r>:
 801703c:	b500      	push	{lr}
 801703e:	b09b      	sub	sp, #108	@ 0x6c
 8017040:	9100      	str	r1, [sp, #0]
 8017042:	9104      	str	r1, [sp, #16]
 8017044:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017048:	9105      	str	r1, [sp, #20]
 801704a:	9102      	str	r1, [sp, #8]
 801704c:	4905      	ldr	r1, [pc, #20]	@ (8017064 <_vsiprintf_r+0x28>)
 801704e:	9103      	str	r1, [sp, #12]
 8017050:	4669      	mov	r1, sp
 8017052:	f001 fbe3 	bl	801881c <_svfiprintf_r>
 8017056:	9b00      	ldr	r3, [sp, #0]
 8017058:	2200      	movs	r2, #0
 801705a:	701a      	strb	r2, [r3, #0]
 801705c:	b01b      	add	sp, #108	@ 0x6c
 801705e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017062:	bf00      	nop
 8017064:	ffff0208 	.word	0xffff0208

08017068 <vsiprintf>:
 8017068:	4613      	mov	r3, r2
 801706a:	460a      	mov	r2, r1
 801706c:	4601      	mov	r1, r0
 801706e:	4802      	ldr	r0, [pc, #8]	@ (8017078 <vsiprintf+0x10>)
 8017070:	6800      	ldr	r0, [r0, #0]
 8017072:	f7ff bfe3 	b.w	801703c <_vsiprintf_r>
 8017076:	bf00      	nop
 8017078:	20001204 	.word	0x20001204

0801707c <memset>:
 801707c:	4402      	add	r2, r0
 801707e:	4603      	mov	r3, r0
 8017080:	4293      	cmp	r3, r2
 8017082:	d100      	bne.n	8017086 <memset+0xa>
 8017084:	4770      	bx	lr
 8017086:	f803 1b01 	strb.w	r1, [r3], #1
 801708a:	e7f9      	b.n	8017080 <memset+0x4>

0801708c <strcat>:
 801708c:	b510      	push	{r4, lr}
 801708e:	4602      	mov	r2, r0
 8017090:	7814      	ldrb	r4, [r2, #0]
 8017092:	4613      	mov	r3, r2
 8017094:	3201      	adds	r2, #1
 8017096:	2c00      	cmp	r4, #0
 8017098:	d1fa      	bne.n	8017090 <strcat+0x4>
 801709a:	3b01      	subs	r3, #1
 801709c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80170a4:	2a00      	cmp	r2, #0
 80170a6:	d1f9      	bne.n	801709c <strcat+0x10>
 80170a8:	bd10      	pop	{r4, pc}
	...

080170ac <_localeconv_r>:
 80170ac:	4800      	ldr	r0, [pc, #0]	@ (80170b0 <_localeconv_r+0x4>)
 80170ae:	4770      	bx	lr
 80170b0:	20001344 	.word	0x20001344

080170b4 <_close_r>:
 80170b4:	b538      	push	{r3, r4, r5, lr}
 80170b6:	4d06      	ldr	r5, [pc, #24]	@ (80170d0 <_close_r+0x1c>)
 80170b8:	2300      	movs	r3, #0
 80170ba:	4604      	mov	r4, r0
 80170bc:	4608      	mov	r0, r1
 80170be:	602b      	str	r3, [r5, #0]
 80170c0:	f7ea f9a6 	bl	8001410 <_close>
 80170c4:	1c43      	adds	r3, r0, #1
 80170c6:	d102      	bne.n	80170ce <_close_r+0x1a>
 80170c8:	682b      	ldr	r3, [r5, #0]
 80170ca:	b103      	cbz	r3, 80170ce <_close_r+0x1a>
 80170cc:	6023      	str	r3, [r4, #0]
 80170ce:	bd38      	pop	{r3, r4, r5, pc}
 80170d0:	20009544 	.word	0x20009544

080170d4 <_lseek_r>:
 80170d4:	b538      	push	{r3, r4, r5, lr}
 80170d6:	4d07      	ldr	r5, [pc, #28]	@ (80170f4 <_lseek_r+0x20>)
 80170d8:	4604      	mov	r4, r0
 80170da:	4608      	mov	r0, r1
 80170dc:	4611      	mov	r1, r2
 80170de:	2200      	movs	r2, #0
 80170e0:	602a      	str	r2, [r5, #0]
 80170e2:	461a      	mov	r2, r3
 80170e4:	f7ea f9bb 	bl	800145e <_lseek>
 80170e8:	1c43      	adds	r3, r0, #1
 80170ea:	d102      	bne.n	80170f2 <_lseek_r+0x1e>
 80170ec:	682b      	ldr	r3, [r5, #0]
 80170ee:	b103      	cbz	r3, 80170f2 <_lseek_r+0x1e>
 80170f0:	6023      	str	r3, [r4, #0]
 80170f2:	bd38      	pop	{r3, r4, r5, pc}
 80170f4:	20009544 	.word	0x20009544

080170f8 <_read_r>:
 80170f8:	b538      	push	{r3, r4, r5, lr}
 80170fa:	4d07      	ldr	r5, [pc, #28]	@ (8017118 <_read_r+0x20>)
 80170fc:	4604      	mov	r4, r0
 80170fe:	4608      	mov	r0, r1
 8017100:	4611      	mov	r1, r2
 8017102:	2200      	movs	r2, #0
 8017104:	602a      	str	r2, [r5, #0]
 8017106:	461a      	mov	r2, r3
 8017108:	f7ea f949 	bl	800139e <_read>
 801710c:	1c43      	adds	r3, r0, #1
 801710e:	d102      	bne.n	8017116 <_read_r+0x1e>
 8017110:	682b      	ldr	r3, [r5, #0]
 8017112:	b103      	cbz	r3, 8017116 <_read_r+0x1e>
 8017114:	6023      	str	r3, [r4, #0]
 8017116:	bd38      	pop	{r3, r4, r5, pc}
 8017118:	20009544 	.word	0x20009544

0801711c <_write_r>:
 801711c:	b538      	push	{r3, r4, r5, lr}
 801711e:	4d07      	ldr	r5, [pc, #28]	@ (801713c <_write_r+0x20>)
 8017120:	4604      	mov	r4, r0
 8017122:	4608      	mov	r0, r1
 8017124:	4611      	mov	r1, r2
 8017126:	2200      	movs	r2, #0
 8017128:	602a      	str	r2, [r5, #0]
 801712a:	461a      	mov	r2, r3
 801712c:	f7ea f954 	bl	80013d8 <_write>
 8017130:	1c43      	adds	r3, r0, #1
 8017132:	d102      	bne.n	801713a <_write_r+0x1e>
 8017134:	682b      	ldr	r3, [r5, #0]
 8017136:	b103      	cbz	r3, 801713a <_write_r+0x1e>
 8017138:	6023      	str	r3, [r4, #0]
 801713a:	bd38      	pop	{r3, r4, r5, pc}
 801713c:	20009544 	.word	0x20009544

08017140 <__errno>:
 8017140:	4b01      	ldr	r3, [pc, #4]	@ (8017148 <__errno+0x8>)
 8017142:	6818      	ldr	r0, [r3, #0]
 8017144:	4770      	bx	lr
 8017146:	bf00      	nop
 8017148:	20001204 	.word	0x20001204

0801714c <__libc_init_array>:
 801714c:	b570      	push	{r4, r5, r6, lr}
 801714e:	4d0d      	ldr	r5, [pc, #52]	@ (8017184 <__libc_init_array+0x38>)
 8017150:	4c0d      	ldr	r4, [pc, #52]	@ (8017188 <__libc_init_array+0x3c>)
 8017152:	1b64      	subs	r4, r4, r5
 8017154:	10a4      	asrs	r4, r4, #2
 8017156:	2600      	movs	r6, #0
 8017158:	42a6      	cmp	r6, r4
 801715a:	d109      	bne.n	8017170 <__libc_init_array+0x24>
 801715c:	4d0b      	ldr	r5, [pc, #44]	@ (801718c <__libc_init_array+0x40>)
 801715e:	4c0c      	ldr	r4, [pc, #48]	@ (8017190 <__libc_init_array+0x44>)
 8017160:	f002 f86c 	bl	801923c <_init>
 8017164:	1b64      	subs	r4, r4, r5
 8017166:	10a4      	asrs	r4, r4, #2
 8017168:	2600      	movs	r6, #0
 801716a:	42a6      	cmp	r6, r4
 801716c:	d105      	bne.n	801717a <__libc_init_array+0x2e>
 801716e:	bd70      	pop	{r4, r5, r6, pc}
 8017170:	f855 3b04 	ldr.w	r3, [r5], #4
 8017174:	4798      	blx	r3
 8017176:	3601      	adds	r6, #1
 8017178:	e7ee      	b.n	8017158 <__libc_init_array+0xc>
 801717a:	f855 3b04 	ldr.w	r3, [r5], #4
 801717e:	4798      	blx	r3
 8017180:	3601      	adds	r6, #1
 8017182:	e7f2      	b.n	801716a <__libc_init_array+0x1e>
 8017184:	0801afd0 	.word	0x0801afd0
 8017188:	0801afd0 	.word	0x0801afd0
 801718c:	0801afd0 	.word	0x0801afd0
 8017190:	0801afd4 	.word	0x0801afd4

08017194 <__retarget_lock_init_recursive>:
 8017194:	4770      	bx	lr

08017196 <__retarget_lock_acquire_recursive>:
 8017196:	4770      	bx	lr

08017198 <__retarget_lock_release_recursive>:
 8017198:	4770      	bx	lr

0801719a <strcpy>:
 801719a:	4603      	mov	r3, r0
 801719c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171a0:	f803 2b01 	strb.w	r2, [r3], #1
 80171a4:	2a00      	cmp	r2, #0
 80171a6:	d1f9      	bne.n	801719c <strcpy+0x2>
 80171a8:	4770      	bx	lr

080171aa <memcpy>:
 80171aa:	440a      	add	r2, r1
 80171ac:	4291      	cmp	r1, r2
 80171ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80171b2:	d100      	bne.n	80171b6 <memcpy+0xc>
 80171b4:	4770      	bx	lr
 80171b6:	b510      	push	{r4, lr}
 80171b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171c0:	4291      	cmp	r1, r2
 80171c2:	d1f9      	bne.n	80171b8 <memcpy+0xe>
 80171c4:	bd10      	pop	{r4, pc}

080171c6 <quorem>:
 80171c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ca:	6903      	ldr	r3, [r0, #16]
 80171cc:	690c      	ldr	r4, [r1, #16]
 80171ce:	42a3      	cmp	r3, r4
 80171d0:	4607      	mov	r7, r0
 80171d2:	db7e      	blt.n	80172d2 <quorem+0x10c>
 80171d4:	3c01      	subs	r4, #1
 80171d6:	f101 0814 	add.w	r8, r1, #20
 80171da:	00a3      	lsls	r3, r4, #2
 80171dc:	f100 0514 	add.w	r5, r0, #20
 80171e0:	9300      	str	r3, [sp, #0]
 80171e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171e6:	9301      	str	r3, [sp, #4]
 80171e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171f0:	3301      	adds	r3, #1
 80171f2:	429a      	cmp	r2, r3
 80171f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80171f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80171fc:	d32e      	bcc.n	801725c <quorem+0x96>
 80171fe:	f04f 0a00 	mov.w	sl, #0
 8017202:	46c4      	mov	ip, r8
 8017204:	46ae      	mov	lr, r5
 8017206:	46d3      	mov	fp, sl
 8017208:	f85c 3b04 	ldr.w	r3, [ip], #4
 801720c:	b298      	uxth	r0, r3
 801720e:	fb06 a000 	mla	r0, r6, r0, sl
 8017212:	0c02      	lsrs	r2, r0, #16
 8017214:	0c1b      	lsrs	r3, r3, #16
 8017216:	fb06 2303 	mla	r3, r6, r3, r2
 801721a:	f8de 2000 	ldr.w	r2, [lr]
 801721e:	b280      	uxth	r0, r0
 8017220:	b292      	uxth	r2, r2
 8017222:	1a12      	subs	r2, r2, r0
 8017224:	445a      	add	r2, fp
 8017226:	f8de 0000 	ldr.w	r0, [lr]
 801722a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801722e:	b29b      	uxth	r3, r3
 8017230:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017234:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017238:	b292      	uxth	r2, r2
 801723a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801723e:	45e1      	cmp	r9, ip
 8017240:	f84e 2b04 	str.w	r2, [lr], #4
 8017244:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017248:	d2de      	bcs.n	8017208 <quorem+0x42>
 801724a:	9b00      	ldr	r3, [sp, #0]
 801724c:	58eb      	ldr	r3, [r5, r3]
 801724e:	b92b      	cbnz	r3, 801725c <quorem+0x96>
 8017250:	9b01      	ldr	r3, [sp, #4]
 8017252:	3b04      	subs	r3, #4
 8017254:	429d      	cmp	r5, r3
 8017256:	461a      	mov	r2, r3
 8017258:	d32f      	bcc.n	80172ba <quorem+0xf4>
 801725a:	613c      	str	r4, [r7, #16]
 801725c:	4638      	mov	r0, r7
 801725e:	f001 f979 	bl	8018554 <__mcmp>
 8017262:	2800      	cmp	r0, #0
 8017264:	db25      	blt.n	80172b2 <quorem+0xec>
 8017266:	4629      	mov	r1, r5
 8017268:	2000      	movs	r0, #0
 801726a:	f858 2b04 	ldr.w	r2, [r8], #4
 801726e:	f8d1 c000 	ldr.w	ip, [r1]
 8017272:	fa1f fe82 	uxth.w	lr, r2
 8017276:	fa1f f38c 	uxth.w	r3, ip
 801727a:	eba3 030e 	sub.w	r3, r3, lr
 801727e:	4403      	add	r3, r0
 8017280:	0c12      	lsrs	r2, r2, #16
 8017282:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017286:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801728a:	b29b      	uxth	r3, r3
 801728c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017290:	45c1      	cmp	r9, r8
 8017292:	f841 3b04 	str.w	r3, [r1], #4
 8017296:	ea4f 4022 	mov.w	r0, r2, asr #16
 801729a:	d2e6      	bcs.n	801726a <quorem+0xa4>
 801729c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172a4:	b922      	cbnz	r2, 80172b0 <quorem+0xea>
 80172a6:	3b04      	subs	r3, #4
 80172a8:	429d      	cmp	r5, r3
 80172aa:	461a      	mov	r2, r3
 80172ac:	d30b      	bcc.n	80172c6 <quorem+0x100>
 80172ae:	613c      	str	r4, [r7, #16]
 80172b0:	3601      	adds	r6, #1
 80172b2:	4630      	mov	r0, r6
 80172b4:	b003      	add	sp, #12
 80172b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ba:	6812      	ldr	r2, [r2, #0]
 80172bc:	3b04      	subs	r3, #4
 80172be:	2a00      	cmp	r2, #0
 80172c0:	d1cb      	bne.n	801725a <quorem+0x94>
 80172c2:	3c01      	subs	r4, #1
 80172c4:	e7c6      	b.n	8017254 <quorem+0x8e>
 80172c6:	6812      	ldr	r2, [r2, #0]
 80172c8:	3b04      	subs	r3, #4
 80172ca:	2a00      	cmp	r2, #0
 80172cc:	d1ef      	bne.n	80172ae <quorem+0xe8>
 80172ce:	3c01      	subs	r4, #1
 80172d0:	e7ea      	b.n	80172a8 <quorem+0xe2>
 80172d2:	2000      	movs	r0, #0
 80172d4:	e7ee      	b.n	80172b4 <quorem+0xee>
	...

080172d8 <_dtoa_r>:
 80172d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172dc:	69c7      	ldr	r7, [r0, #28]
 80172de:	b099      	sub	sp, #100	@ 0x64
 80172e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80172e4:	ec55 4b10 	vmov	r4, r5, d0
 80172e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80172ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80172ec:	4683      	mov	fp, r0
 80172ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80172f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80172f2:	b97f      	cbnz	r7, 8017314 <_dtoa_r+0x3c>
 80172f4:	2010      	movs	r0, #16
 80172f6:	f000 fdfd 	bl	8017ef4 <malloc>
 80172fa:	4602      	mov	r2, r0
 80172fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8017300:	b920      	cbnz	r0, 801730c <_dtoa_r+0x34>
 8017302:	4ba7      	ldr	r3, [pc, #668]	@ (80175a0 <_dtoa_r+0x2c8>)
 8017304:	21ef      	movs	r1, #239	@ 0xef
 8017306:	48a7      	ldr	r0, [pc, #668]	@ (80175a4 <_dtoa_r+0x2cc>)
 8017308:	f001 fc5a 	bl	8018bc0 <__assert_func>
 801730c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017310:	6007      	str	r7, [r0, #0]
 8017312:	60c7      	str	r7, [r0, #12]
 8017314:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017318:	6819      	ldr	r1, [r3, #0]
 801731a:	b159      	cbz	r1, 8017334 <_dtoa_r+0x5c>
 801731c:	685a      	ldr	r2, [r3, #4]
 801731e:	604a      	str	r2, [r1, #4]
 8017320:	2301      	movs	r3, #1
 8017322:	4093      	lsls	r3, r2
 8017324:	608b      	str	r3, [r1, #8]
 8017326:	4658      	mov	r0, fp
 8017328:	f000 feda 	bl	80180e0 <_Bfree>
 801732c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017330:	2200      	movs	r2, #0
 8017332:	601a      	str	r2, [r3, #0]
 8017334:	1e2b      	subs	r3, r5, #0
 8017336:	bfb9      	ittee	lt
 8017338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801733c:	9303      	strlt	r3, [sp, #12]
 801733e:	2300      	movge	r3, #0
 8017340:	6033      	strge	r3, [r6, #0]
 8017342:	9f03      	ldr	r7, [sp, #12]
 8017344:	4b98      	ldr	r3, [pc, #608]	@ (80175a8 <_dtoa_r+0x2d0>)
 8017346:	bfbc      	itt	lt
 8017348:	2201      	movlt	r2, #1
 801734a:	6032      	strlt	r2, [r6, #0]
 801734c:	43bb      	bics	r3, r7
 801734e:	d112      	bne.n	8017376 <_dtoa_r+0x9e>
 8017350:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017352:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017356:	6013      	str	r3, [r2, #0]
 8017358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801735c:	4323      	orrs	r3, r4
 801735e:	f000 854d 	beq.w	8017dfc <_dtoa_r+0xb24>
 8017362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017364:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80175bc <_dtoa_r+0x2e4>
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 854f 	beq.w	8017e0c <_dtoa_r+0xb34>
 801736e:	f10a 0303 	add.w	r3, sl, #3
 8017372:	f000 bd49 	b.w	8017e08 <_dtoa_r+0xb30>
 8017376:	ed9d 7b02 	vldr	d7, [sp, #8]
 801737a:	2200      	movs	r2, #0
 801737c:	ec51 0b17 	vmov	r0, r1, d7
 8017380:	2300      	movs	r3, #0
 8017382:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8017386:	f7e9 fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 801738a:	4680      	mov	r8, r0
 801738c:	b158      	cbz	r0, 80173a6 <_dtoa_r+0xce>
 801738e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017390:	2301      	movs	r3, #1
 8017392:	6013      	str	r3, [r2, #0]
 8017394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017396:	b113      	cbz	r3, 801739e <_dtoa_r+0xc6>
 8017398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801739a:	4b84      	ldr	r3, [pc, #528]	@ (80175ac <_dtoa_r+0x2d4>)
 801739c:	6013      	str	r3, [r2, #0]
 801739e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80175c0 <_dtoa_r+0x2e8>
 80173a2:	f000 bd33 	b.w	8017e0c <_dtoa_r+0xb34>
 80173a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80173aa:	aa16      	add	r2, sp, #88	@ 0x58
 80173ac:	a917      	add	r1, sp, #92	@ 0x5c
 80173ae:	4658      	mov	r0, fp
 80173b0:	f001 f980 	bl	80186b4 <__d2b>
 80173b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80173b8:	4681      	mov	r9, r0
 80173ba:	2e00      	cmp	r6, #0
 80173bc:	d077      	beq.n	80174ae <_dtoa_r+0x1d6>
 80173be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80173c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80173cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80173d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80173d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80173d8:	4619      	mov	r1, r3
 80173da:	2200      	movs	r2, #0
 80173dc:	4b74      	ldr	r3, [pc, #464]	@ (80175b0 <_dtoa_r+0x2d8>)
 80173de:	f7e8 ff73 	bl	80002c8 <__aeabi_dsub>
 80173e2:	a369      	add	r3, pc, #420	@ (adr r3, 8017588 <_dtoa_r+0x2b0>)
 80173e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e8:	f7e9 f926 	bl	8000638 <__aeabi_dmul>
 80173ec:	a368      	add	r3, pc, #416	@ (adr r3, 8017590 <_dtoa_r+0x2b8>)
 80173ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f2:	f7e8 ff6b 	bl	80002cc <__adddf3>
 80173f6:	4604      	mov	r4, r0
 80173f8:	4630      	mov	r0, r6
 80173fa:	460d      	mov	r5, r1
 80173fc:	f7e9 f8b2 	bl	8000564 <__aeabi_i2d>
 8017400:	a365      	add	r3, pc, #404	@ (adr r3, 8017598 <_dtoa_r+0x2c0>)
 8017402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017406:	f7e9 f917 	bl	8000638 <__aeabi_dmul>
 801740a:	4602      	mov	r2, r0
 801740c:	460b      	mov	r3, r1
 801740e:	4620      	mov	r0, r4
 8017410:	4629      	mov	r1, r5
 8017412:	f7e8 ff5b 	bl	80002cc <__adddf3>
 8017416:	4604      	mov	r4, r0
 8017418:	460d      	mov	r5, r1
 801741a:	f7e9 fbbd 	bl	8000b98 <__aeabi_d2iz>
 801741e:	2200      	movs	r2, #0
 8017420:	4607      	mov	r7, r0
 8017422:	2300      	movs	r3, #0
 8017424:	4620      	mov	r0, r4
 8017426:	4629      	mov	r1, r5
 8017428:	f7e9 fb78 	bl	8000b1c <__aeabi_dcmplt>
 801742c:	b140      	cbz	r0, 8017440 <_dtoa_r+0x168>
 801742e:	4638      	mov	r0, r7
 8017430:	f7e9 f898 	bl	8000564 <__aeabi_i2d>
 8017434:	4622      	mov	r2, r4
 8017436:	462b      	mov	r3, r5
 8017438:	f7e9 fb66 	bl	8000b08 <__aeabi_dcmpeq>
 801743c:	b900      	cbnz	r0, 8017440 <_dtoa_r+0x168>
 801743e:	3f01      	subs	r7, #1
 8017440:	2f16      	cmp	r7, #22
 8017442:	d851      	bhi.n	80174e8 <_dtoa_r+0x210>
 8017444:	4b5b      	ldr	r3, [pc, #364]	@ (80175b4 <_dtoa_r+0x2dc>)
 8017446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017452:	f7e9 fb63 	bl	8000b1c <__aeabi_dcmplt>
 8017456:	2800      	cmp	r0, #0
 8017458:	d048      	beq.n	80174ec <_dtoa_r+0x214>
 801745a:	3f01      	subs	r7, #1
 801745c:	2300      	movs	r3, #0
 801745e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017460:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017462:	1b9b      	subs	r3, r3, r6
 8017464:	1e5a      	subs	r2, r3, #1
 8017466:	bf44      	itt	mi
 8017468:	f1c3 0801 	rsbmi	r8, r3, #1
 801746c:	2300      	movmi	r3, #0
 801746e:	9208      	str	r2, [sp, #32]
 8017470:	bf54      	ite	pl
 8017472:	f04f 0800 	movpl.w	r8, #0
 8017476:	9308      	strmi	r3, [sp, #32]
 8017478:	2f00      	cmp	r7, #0
 801747a:	db39      	blt.n	80174f0 <_dtoa_r+0x218>
 801747c:	9b08      	ldr	r3, [sp, #32]
 801747e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017480:	443b      	add	r3, r7
 8017482:	9308      	str	r3, [sp, #32]
 8017484:	2300      	movs	r3, #0
 8017486:	930a      	str	r3, [sp, #40]	@ 0x28
 8017488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801748a:	2b09      	cmp	r3, #9
 801748c:	d864      	bhi.n	8017558 <_dtoa_r+0x280>
 801748e:	2b05      	cmp	r3, #5
 8017490:	bfc4      	itt	gt
 8017492:	3b04      	subgt	r3, #4
 8017494:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8017496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017498:	f1a3 0302 	sub.w	r3, r3, #2
 801749c:	bfcc      	ite	gt
 801749e:	2400      	movgt	r4, #0
 80174a0:	2401      	movle	r4, #1
 80174a2:	2b03      	cmp	r3, #3
 80174a4:	d863      	bhi.n	801756e <_dtoa_r+0x296>
 80174a6:	e8df f003 	tbb	[pc, r3]
 80174aa:	372a      	.short	0x372a
 80174ac:	5535      	.short	0x5535
 80174ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80174b2:	441e      	add	r6, r3
 80174b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80174b8:	2b20      	cmp	r3, #32
 80174ba:	bfc1      	itttt	gt
 80174bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80174c0:	409f      	lslgt	r7, r3
 80174c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80174c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80174ca:	bfd6      	itet	le
 80174cc:	f1c3 0320 	rsble	r3, r3, #32
 80174d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80174d4:	fa04 f003 	lslle.w	r0, r4, r3
 80174d8:	f7e9 f834 	bl	8000544 <__aeabi_ui2d>
 80174dc:	2201      	movs	r2, #1
 80174de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80174e2:	3e01      	subs	r6, #1
 80174e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80174e6:	e777      	b.n	80173d8 <_dtoa_r+0x100>
 80174e8:	2301      	movs	r3, #1
 80174ea:	e7b8      	b.n	801745e <_dtoa_r+0x186>
 80174ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80174ee:	e7b7      	b.n	8017460 <_dtoa_r+0x188>
 80174f0:	427b      	negs	r3, r7
 80174f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80174f4:	2300      	movs	r3, #0
 80174f6:	eba8 0807 	sub.w	r8, r8, r7
 80174fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80174fc:	e7c4      	b.n	8017488 <_dtoa_r+0x1b0>
 80174fe:	2300      	movs	r3, #0
 8017500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017504:	2b00      	cmp	r3, #0
 8017506:	dc35      	bgt.n	8017574 <_dtoa_r+0x29c>
 8017508:	2301      	movs	r3, #1
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	9307      	str	r3, [sp, #28]
 801750e:	461a      	mov	r2, r3
 8017510:	920e      	str	r2, [sp, #56]	@ 0x38
 8017512:	e00b      	b.n	801752c <_dtoa_r+0x254>
 8017514:	2301      	movs	r3, #1
 8017516:	e7f3      	b.n	8017500 <_dtoa_r+0x228>
 8017518:	2300      	movs	r3, #0
 801751a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801751c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801751e:	18fb      	adds	r3, r7, r3
 8017520:	9300      	str	r3, [sp, #0]
 8017522:	3301      	adds	r3, #1
 8017524:	2b01      	cmp	r3, #1
 8017526:	9307      	str	r3, [sp, #28]
 8017528:	bfb8      	it	lt
 801752a:	2301      	movlt	r3, #1
 801752c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017530:	2100      	movs	r1, #0
 8017532:	2204      	movs	r2, #4
 8017534:	f102 0514 	add.w	r5, r2, #20
 8017538:	429d      	cmp	r5, r3
 801753a:	d91f      	bls.n	801757c <_dtoa_r+0x2a4>
 801753c:	6041      	str	r1, [r0, #4]
 801753e:	4658      	mov	r0, fp
 8017540:	f000 fd8e 	bl	8018060 <_Balloc>
 8017544:	4682      	mov	sl, r0
 8017546:	2800      	cmp	r0, #0
 8017548:	d13c      	bne.n	80175c4 <_dtoa_r+0x2ec>
 801754a:	4b1b      	ldr	r3, [pc, #108]	@ (80175b8 <_dtoa_r+0x2e0>)
 801754c:	4602      	mov	r2, r0
 801754e:	f240 11af 	movw	r1, #431	@ 0x1af
 8017552:	e6d8      	b.n	8017306 <_dtoa_r+0x2e>
 8017554:	2301      	movs	r3, #1
 8017556:	e7e0      	b.n	801751a <_dtoa_r+0x242>
 8017558:	2401      	movs	r4, #1
 801755a:	2300      	movs	r3, #0
 801755c:	9309      	str	r3, [sp, #36]	@ 0x24
 801755e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017560:	f04f 33ff 	mov.w	r3, #4294967295
 8017564:	9300      	str	r3, [sp, #0]
 8017566:	9307      	str	r3, [sp, #28]
 8017568:	2200      	movs	r2, #0
 801756a:	2312      	movs	r3, #18
 801756c:	e7d0      	b.n	8017510 <_dtoa_r+0x238>
 801756e:	2301      	movs	r3, #1
 8017570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017572:	e7f5      	b.n	8017560 <_dtoa_r+0x288>
 8017574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017576:	9300      	str	r3, [sp, #0]
 8017578:	9307      	str	r3, [sp, #28]
 801757a:	e7d7      	b.n	801752c <_dtoa_r+0x254>
 801757c:	3101      	adds	r1, #1
 801757e:	0052      	lsls	r2, r2, #1
 8017580:	e7d8      	b.n	8017534 <_dtoa_r+0x25c>
 8017582:	bf00      	nop
 8017584:	f3af 8000 	nop.w
 8017588:	636f4361 	.word	0x636f4361
 801758c:	3fd287a7 	.word	0x3fd287a7
 8017590:	8b60c8b3 	.word	0x8b60c8b3
 8017594:	3fc68a28 	.word	0x3fc68a28
 8017598:	509f79fb 	.word	0x509f79fb
 801759c:	3fd34413 	.word	0x3fd34413
 80175a0:	0801ad9a 	.word	0x0801ad9a
 80175a4:	0801adb1 	.word	0x0801adb1
 80175a8:	7ff00000 	.word	0x7ff00000
 80175ac:	0801ad6a 	.word	0x0801ad6a
 80175b0:	3ff80000 	.word	0x3ff80000
 80175b4:	0801aea8 	.word	0x0801aea8
 80175b8:	0801ae09 	.word	0x0801ae09
 80175bc:	0801ad96 	.word	0x0801ad96
 80175c0:	0801ad69 	.word	0x0801ad69
 80175c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80175c8:	6018      	str	r0, [r3, #0]
 80175ca:	9b07      	ldr	r3, [sp, #28]
 80175cc:	2b0e      	cmp	r3, #14
 80175ce:	f200 80a4 	bhi.w	801771a <_dtoa_r+0x442>
 80175d2:	2c00      	cmp	r4, #0
 80175d4:	f000 80a1 	beq.w	801771a <_dtoa_r+0x442>
 80175d8:	2f00      	cmp	r7, #0
 80175da:	dd33      	ble.n	8017644 <_dtoa_r+0x36c>
 80175dc:	4bad      	ldr	r3, [pc, #692]	@ (8017894 <_dtoa_r+0x5bc>)
 80175de:	f007 020f 	and.w	r2, r7, #15
 80175e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175e6:	ed93 7b00 	vldr	d7, [r3]
 80175ea:	05f8      	lsls	r0, r7, #23
 80175ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80175f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80175f4:	d516      	bpl.n	8017624 <_dtoa_r+0x34c>
 80175f6:	4ba8      	ldr	r3, [pc, #672]	@ (8017898 <_dtoa_r+0x5c0>)
 80175f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80175fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017600:	f7e9 f944 	bl	800088c <__aeabi_ddiv>
 8017604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017608:	f004 040f 	and.w	r4, r4, #15
 801760c:	2603      	movs	r6, #3
 801760e:	4da2      	ldr	r5, [pc, #648]	@ (8017898 <_dtoa_r+0x5c0>)
 8017610:	b954      	cbnz	r4, 8017628 <_dtoa_r+0x350>
 8017612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801761a:	f7e9 f937 	bl	800088c <__aeabi_ddiv>
 801761e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017622:	e028      	b.n	8017676 <_dtoa_r+0x39e>
 8017624:	2602      	movs	r6, #2
 8017626:	e7f2      	b.n	801760e <_dtoa_r+0x336>
 8017628:	07e1      	lsls	r1, r4, #31
 801762a:	d508      	bpl.n	801763e <_dtoa_r+0x366>
 801762c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017634:	f7e9 f800 	bl	8000638 <__aeabi_dmul>
 8017638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801763c:	3601      	adds	r6, #1
 801763e:	1064      	asrs	r4, r4, #1
 8017640:	3508      	adds	r5, #8
 8017642:	e7e5      	b.n	8017610 <_dtoa_r+0x338>
 8017644:	f000 80d2 	beq.w	80177ec <_dtoa_r+0x514>
 8017648:	427c      	negs	r4, r7
 801764a:	4b92      	ldr	r3, [pc, #584]	@ (8017894 <_dtoa_r+0x5bc>)
 801764c:	4d92      	ldr	r5, [pc, #584]	@ (8017898 <_dtoa_r+0x5c0>)
 801764e:	f004 020f 	and.w	r2, r4, #15
 8017652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801765a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801765e:	f7e8 ffeb 	bl	8000638 <__aeabi_dmul>
 8017662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017666:	1124      	asrs	r4, r4, #4
 8017668:	2300      	movs	r3, #0
 801766a:	2602      	movs	r6, #2
 801766c:	2c00      	cmp	r4, #0
 801766e:	f040 80b2 	bne.w	80177d6 <_dtoa_r+0x4fe>
 8017672:	2b00      	cmp	r3, #0
 8017674:	d1d3      	bne.n	801761e <_dtoa_r+0x346>
 8017676:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017678:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801767c:	2b00      	cmp	r3, #0
 801767e:	f000 80b7 	beq.w	80177f0 <_dtoa_r+0x518>
 8017682:	4b86      	ldr	r3, [pc, #536]	@ (801789c <_dtoa_r+0x5c4>)
 8017684:	2200      	movs	r2, #0
 8017686:	4620      	mov	r0, r4
 8017688:	4629      	mov	r1, r5
 801768a:	f7e9 fa47 	bl	8000b1c <__aeabi_dcmplt>
 801768e:	2800      	cmp	r0, #0
 8017690:	f000 80ae 	beq.w	80177f0 <_dtoa_r+0x518>
 8017694:	9b07      	ldr	r3, [sp, #28]
 8017696:	2b00      	cmp	r3, #0
 8017698:	f000 80aa 	beq.w	80177f0 <_dtoa_r+0x518>
 801769c:	9b00      	ldr	r3, [sp, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	dd37      	ble.n	8017712 <_dtoa_r+0x43a>
 80176a2:	1e7b      	subs	r3, r7, #1
 80176a4:	9304      	str	r3, [sp, #16]
 80176a6:	4620      	mov	r0, r4
 80176a8:	4b7d      	ldr	r3, [pc, #500]	@ (80178a0 <_dtoa_r+0x5c8>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	4629      	mov	r1, r5
 80176ae:	f7e8 ffc3 	bl	8000638 <__aeabi_dmul>
 80176b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176b6:	9c00      	ldr	r4, [sp, #0]
 80176b8:	3601      	adds	r6, #1
 80176ba:	4630      	mov	r0, r6
 80176bc:	f7e8 ff52 	bl	8000564 <__aeabi_i2d>
 80176c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80176c4:	f7e8 ffb8 	bl	8000638 <__aeabi_dmul>
 80176c8:	4b76      	ldr	r3, [pc, #472]	@ (80178a4 <_dtoa_r+0x5cc>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	f7e8 fdfe 	bl	80002cc <__adddf3>
 80176d0:	4605      	mov	r5, r0
 80176d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80176d6:	2c00      	cmp	r4, #0
 80176d8:	f040 808d 	bne.w	80177f6 <_dtoa_r+0x51e>
 80176dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176e0:	4b71      	ldr	r3, [pc, #452]	@ (80178a8 <_dtoa_r+0x5d0>)
 80176e2:	2200      	movs	r2, #0
 80176e4:	f7e8 fdf0 	bl	80002c8 <__aeabi_dsub>
 80176e8:	4602      	mov	r2, r0
 80176ea:	460b      	mov	r3, r1
 80176ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80176f0:	462a      	mov	r2, r5
 80176f2:	4633      	mov	r3, r6
 80176f4:	f7e9 fa30 	bl	8000b58 <__aeabi_dcmpgt>
 80176f8:	2800      	cmp	r0, #0
 80176fa:	f040 828b 	bne.w	8017c14 <_dtoa_r+0x93c>
 80176fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017702:	462a      	mov	r2, r5
 8017704:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017708:	f7e9 fa08 	bl	8000b1c <__aeabi_dcmplt>
 801770c:	2800      	cmp	r0, #0
 801770e:	f040 8128 	bne.w	8017962 <_dtoa_r+0x68a>
 8017712:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8017716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801771a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801771c:	2b00      	cmp	r3, #0
 801771e:	f2c0 815a 	blt.w	80179d6 <_dtoa_r+0x6fe>
 8017722:	2f0e      	cmp	r7, #14
 8017724:	f300 8157 	bgt.w	80179d6 <_dtoa_r+0x6fe>
 8017728:	4b5a      	ldr	r3, [pc, #360]	@ (8017894 <_dtoa_r+0x5bc>)
 801772a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801772e:	ed93 7b00 	vldr	d7, [r3]
 8017732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017734:	2b00      	cmp	r3, #0
 8017736:	ed8d 7b00 	vstr	d7, [sp]
 801773a:	da03      	bge.n	8017744 <_dtoa_r+0x46c>
 801773c:	9b07      	ldr	r3, [sp, #28]
 801773e:	2b00      	cmp	r3, #0
 8017740:	f340 8101 	ble.w	8017946 <_dtoa_r+0x66e>
 8017744:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017748:	4656      	mov	r6, sl
 801774a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801774e:	4620      	mov	r0, r4
 8017750:	4629      	mov	r1, r5
 8017752:	f7e9 f89b 	bl	800088c <__aeabi_ddiv>
 8017756:	f7e9 fa1f 	bl	8000b98 <__aeabi_d2iz>
 801775a:	4680      	mov	r8, r0
 801775c:	f7e8 ff02 	bl	8000564 <__aeabi_i2d>
 8017760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017764:	f7e8 ff68 	bl	8000638 <__aeabi_dmul>
 8017768:	4602      	mov	r2, r0
 801776a:	460b      	mov	r3, r1
 801776c:	4620      	mov	r0, r4
 801776e:	4629      	mov	r1, r5
 8017770:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8017774:	f7e8 fda8 	bl	80002c8 <__aeabi_dsub>
 8017778:	f806 4b01 	strb.w	r4, [r6], #1
 801777c:	9d07      	ldr	r5, [sp, #28]
 801777e:	eba6 040a 	sub.w	r4, r6, sl
 8017782:	42a5      	cmp	r5, r4
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	f040 8117 	bne.w	80179ba <_dtoa_r+0x6e2>
 801778c:	f7e8 fd9e 	bl	80002cc <__adddf3>
 8017790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017794:	4604      	mov	r4, r0
 8017796:	460d      	mov	r5, r1
 8017798:	f7e9 f9de 	bl	8000b58 <__aeabi_dcmpgt>
 801779c:	2800      	cmp	r0, #0
 801779e:	f040 80f9 	bne.w	8017994 <_dtoa_r+0x6bc>
 80177a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177a6:	4620      	mov	r0, r4
 80177a8:	4629      	mov	r1, r5
 80177aa:	f7e9 f9ad 	bl	8000b08 <__aeabi_dcmpeq>
 80177ae:	b118      	cbz	r0, 80177b8 <_dtoa_r+0x4e0>
 80177b0:	f018 0f01 	tst.w	r8, #1
 80177b4:	f040 80ee 	bne.w	8017994 <_dtoa_r+0x6bc>
 80177b8:	4649      	mov	r1, r9
 80177ba:	4658      	mov	r0, fp
 80177bc:	f000 fc90 	bl	80180e0 <_Bfree>
 80177c0:	2300      	movs	r3, #0
 80177c2:	7033      	strb	r3, [r6, #0]
 80177c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80177c6:	3701      	adds	r7, #1
 80177c8:	601f      	str	r7, [r3, #0]
 80177ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	f000 831d 	beq.w	8017e0c <_dtoa_r+0xb34>
 80177d2:	601e      	str	r6, [r3, #0]
 80177d4:	e31a      	b.n	8017e0c <_dtoa_r+0xb34>
 80177d6:	07e2      	lsls	r2, r4, #31
 80177d8:	d505      	bpl.n	80177e6 <_dtoa_r+0x50e>
 80177da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177de:	f7e8 ff2b 	bl	8000638 <__aeabi_dmul>
 80177e2:	3601      	adds	r6, #1
 80177e4:	2301      	movs	r3, #1
 80177e6:	1064      	asrs	r4, r4, #1
 80177e8:	3508      	adds	r5, #8
 80177ea:	e73f      	b.n	801766c <_dtoa_r+0x394>
 80177ec:	2602      	movs	r6, #2
 80177ee:	e742      	b.n	8017676 <_dtoa_r+0x39e>
 80177f0:	9c07      	ldr	r4, [sp, #28]
 80177f2:	9704      	str	r7, [sp, #16]
 80177f4:	e761      	b.n	80176ba <_dtoa_r+0x3e2>
 80177f6:	4b27      	ldr	r3, [pc, #156]	@ (8017894 <_dtoa_r+0x5bc>)
 80177f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80177fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80177fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017802:	4454      	add	r4, sl
 8017804:	2900      	cmp	r1, #0
 8017806:	d053      	beq.n	80178b0 <_dtoa_r+0x5d8>
 8017808:	4928      	ldr	r1, [pc, #160]	@ (80178ac <_dtoa_r+0x5d4>)
 801780a:	2000      	movs	r0, #0
 801780c:	f7e9 f83e 	bl	800088c <__aeabi_ddiv>
 8017810:	4633      	mov	r3, r6
 8017812:	462a      	mov	r2, r5
 8017814:	f7e8 fd58 	bl	80002c8 <__aeabi_dsub>
 8017818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801781c:	4656      	mov	r6, sl
 801781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017822:	f7e9 f9b9 	bl	8000b98 <__aeabi_d2iz>
 8017826:	4605      	mov	r5, r0
 8017828:	f7e8 fe9c 	bl	8000564 <__aeabi_i2d>
 801782c:	4602      	mov	r2, r0
 801782e:	460b      	mov	r3, r1
 8017830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017834:	f7e8 fd48 	bl	80002c8 <__aeabi_dsub>
 8017838:	3530      	adds	r5, #48	@ 0x30
 801783a:	4602      	mov	r2, r0
 801783c:	460b      	mov	r3, r1
 801783e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017842:	f806 5b01 	strb.w	r5, [r6], #1
 8017846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801784a:	f7e9 f967 	bl	8000b1c <__aeabi_dcmplt>
 801784e:	2800      	cmp	r0, #0
 8017850:	d171      	bne.n	8017936 <_dtoa_r+0x65e>
 8017852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017856:	4911      	ldr	r1, [pc, #68]	@ (801789c <_dtoa_r+0x5c4>)
 8017858:	2000      	movs	r0, #0
 801785a:	f7e8 fd35 	bl	80002c8 <__aeabi_dsub>
 801785e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017862:	f7e9 f95b 	bl	8000b1c <__aeabi_dcmplt>
 8017866:	2800      	cmp	r0, #0
 8017868:	f040 8095 	bne.w	8017996 <_dtoa_r+0x6be>
 801786c:	42a6      	cmp	r6, r4
 801786e:	f43f af50 	beq.w	8017712 <_dtoa_r+0x43a>
 8017872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017876:	4b0a      	ldr	r3, [pc, #40]	@ (80178a0 <_dtoa_r+0x5c8>)
 8017878:	2200      	movs	r2, #0
 801787a:	f7e8 fedd 	bl	8000638 <__aeabi_dmul>
 801787e:	4b08      	ldr	r3, [pc, #32]	@ (80178a0 <_dtoa_r+0x5c8>)
 8017880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017884:	2200      	movs	r2, #0
 8017886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801788a:	f7e8 fed5 	bl	8000638 <__aeabi_dmul>
 801788e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017892:	e7c4      	b.n	801781e <_dtoa_r+0x546>
 8017894:	0801aea8 	.word	0x0801aea8
 8017898:	0801ae80 	.word	0x0801ae80
 801789c:	3ff00000 	.word	0x3ff00000
 80178a0:	40240000 	.word	0x40240000
 80178a4:	401c0000 	.word	0x401c0000
 80178a8:	40140000 	.word	0x40140000
 80178ac:	3fe00000 	.word	0x3fe00000
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	f7e8 fec0 	bl	8000638 <__aeabi_dmul>
 80178b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80178bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80178be:	4656      	mov	r6, sl
 80178c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178c4:	f7e9 f968 	bl	8000b98 <__aeabi_d2iz>
 80178c8:	4605      	mov	r5, r0
 80178ca:	f7e8 fe4b 	bl	8000564 <__aeabi_i2d>
 80178ce:	4602      	mov	r2, r0
 80178d0:	460b      	mov	r3, r1
 80178d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178d6:	f7e8 fcf7 	bl	80002c8 <__aeabi_dsub>
 80178da:	3530      	adds	r5, #48	@ 0x30
 80178dc:	f806 5b01 	strb.w	r5, [r6], #1
 80178e0:	4602      	mov	r2, r0
 80178e2:	460b      	mov	r3, r1
 80178e4:	42a6      	cmp	r6, r4
 80178e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80178ea:	f04f 0200 	mov.w	r2, #0
 80178ee:	d124      	bne.n	801793a <_dtoa_r+0x662>
 80178f0:	4bac      	ldr	r3, [pc, #688]	@ (8017ba4 <_dtoa_r+0x8cc>)
 80178f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80178f6:	f7e8 fce9 	bl	80002cc <__adddf3>
 80178fa:	4602      	mov	r2, r0
 80178fc:	460b      	mov	r3, r1
 80178fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017902:	f7e9 f929 	bl	8000b58 <__aeabi_dcmpgt>
 8017906:	2800      	cmp	r0, #0
 8017908:	d145      	bne.n	8017996 <_dtoa_r+0x6be>
 801790a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801790e:	49a5      	ldr	r1, [pc, #660]	@ (8017ba4 <_dtoa_r+0x8cc>)
 8017910:	2000      	movs	r0, #0
 8017912:	f7e8 fcd9 	bl	80002c8 <__aeabi_dsub>
 8017916:	4602      	mov	r2, r0
 8017918:	460b      	mov	r3, r1
 801791a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801791e:	f7e9 f8fd 	bl	8000b1c <__aeabi_dcmplt>
 8017922:	2800      	cmp	r0, #0
 8017924:	f43f aef5 	beq.w	8017712 <_dtoa_r+0x43a>
 8017928:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801792a:	1e73      	subs	r3, r6, #1
 801792c:	9315      	str	r3, [sp, #84]	@ 0x54
 801792e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017932:	2b30      	cmp	r3, #48	@ 0x30
 8017934:	d0f8      	beq.n	8017928 <_dtoa_r+0x650>
 8017936:	9f04      	ldr	r7, [sp, #16]
 8017938:	e73e      	b.n	80177b8 <_dtoa_r+0x4e0>
 801793a:	4b9b      	ldr	r3, [pc, #620]	@ (8017ba8 <_dtoa_r+0x8d0>)
 801793c:	f7e8 fe7c 	bl	8000638 <__aeabi_dmul>
 8017940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017944:	e7bc      	b.n	80178c0 <_dtoa_r+0x5e8>
 8017946:	d10c      	bne.n	8017962 <_dtoa_r+0x68a>
 8017948:	4b98      	ldr	r3, [pc, #608]	@ (8017bac <_dtoa_r+0x8d4>)
 801794a:	2200      	movs	r2, #0
 801794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017950:	f7e8 fe72 	bl	8000638 <__aeabi_dmul>
 8017954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017958:	f7e9 f8f4 	bl	8000b44 <__aeabi_dcmpge>
 801795c:	2800      	cmp	r0, #0
 801795e:	f000 8157 	beq.w	8017c10 <_dtoa_r+0x938>
 8017962:	2400      	movs	r4, #0
 8017964:	4625      	mov	r5, r4
 8017966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017968:	43db      	mvns	r3, r3
 801796a:	9304      	str	r3, [sp, #16]
 801796c:	4656      	mov	r6, sl
 801796e:	2700      	movs	r7, #0
 8017970:	4621      	mov	r1, r4
 8017972:	4658      	mov	r0, fp
 8017974:	f000 fbb4 	bl	80180e0 <_Bfree>
 8017978:	2d00      	cmp	r5, #0
 801797a:	d0dc      	beq.n	8017936 <_dtoa_r+0x65e>
 801797c:	b12f      	cbz	r7, 801798a <_dtoa_r+0x6b2>
 801797e:	42af      	cmp	r7, r5
 8017980:	d003      	beq.n	801798a <_dtoa_r+0x6b2>
 8017982:	4639      	mov	r1, r7
 8017984:	4658      	mov	r0, fp
 8017986:	f000 fbab 	bl	80180e0 <_Bfree>
 801798a:	4629      	mov	r1, r5
 801798c:	4658      	mov	r0, fp
 801798e:	f000 fba7 	bl	80180e0 <_Bfree>
 8017992:	e7d0      	b.n	8017936 <_dtoa_r+0x65e>
 8017994:	9704      	str	r7, [sp, #16]
 8017996:	4633      	mov	r3, r6
 8017998:	461e      	mov	r6, r3
 801799a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801799e:	2a39      	cmp	r2, #57	@ 0x39
 80179a0:	d107      	bne.n	80179b2 <_dtoa_r+0x6da>
 80179a2:	459a      	cmp	sl, r3
 80179a4:	d1f8      	bne.n	8017998 <_dtoa_r+0x6c0>
 80179a6:	9a04      	ldr	r2, [sp, #16]
 80179a8:	3201      	adds	r2, #1
 80179aa:	9204      	str	r2, [sp, #16]
 80179ac:	2230      	movs	r2, #48	@ 0x30
 80179ae:	f88a 2000 	strb.w	r2, [sl]
 80179b2:	781a      	ldrb	r2, [r3, #0]
 80179b4:	3201      	adds	r2, #1
 80179b6:	701a      	strb	r2, [r3, #0]
 80179b8:	e7bd      	b.n	8017936 <_dtoa_r+0x65e>
 80179ba:	4b7b      	ldr	r3, [pc, #492]	@ (8017ba8 <_dtoa_r+0x8d0>)
 80179bc:	2200      	movs	r2, #0
 80179be:	f7e8 fe3b 	bl	8000638 <__aeabi_dmul>
 80179c2:	2200      	movs	r2, #0
 80179c4:	2300      	movs	r3, #0
 80179c6:	4604      	mov	r4, r0
 80179c8:	460d      	mov	r5, r1
 80179ca:	f7e9 f89d 	bl	8000b08 <__aeabi_dcmpeq>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	f43f aebb 	beq.w	801774a <_dtoa_r+0x472>
 80179d4:	e6f0      	b.n	80177b8 <_dtoa_r+0x4e0>
 80179d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80179d8:	2a00      	cmp	r2, #0
 80179da:	f000 80db 	beq.w	8017b94 <_dtoa_r+0x8bc>
 80179de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179e0:	2a01      	cmp	r2, #1
 80179e2:	f300 80bf 	bgt.w	8017b64 <_dtoa_r+0x88c>
 80179e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80179e8:	2a00      	cmp	r2, #0
 80179ea:	f000 80b7 	beq.w	8017b5c <_dtoa_r+0x884>
 80179ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80179f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80179f4:	4646      	mov	r6, r8
 80179f6:	9a08      	ldr	r2, [sp, #32]
 80179f8:	2101      	movs	r1, #1
 80179fa:	441a      	add	r2, r3
 80179fc:	4658      	mov	r0, fp
 80179fe:	4498      	add	r8, r3
 8017a00:	9208      	str	r2, [sp, #32]
 8017a02:	f000 fc21 	bl	8018248 <__i2b>
 8017a06:	4605      	mov	r5, r0
 8017a08:	b15e      	cbz	r6, 8017a22 <_dtoa_r+0x74a>
 8017a0a:	9b08      	ldr	r3, [sp, #32]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	dd08      	ble.n	8017a22 <_dtoa_r+0x74a>
 8017a10:	42b3      	cmp	r3, r6
 8017a12:	9a08      	ldr	r2, [sp, #32]
 8017a14:	bfa8      	it	ge
 8017a16:	4633      	movge	r3, r6
 8017a18:	eba8 0803 	sub.w	r8, r8, r3
 8017a1c:	1af6      	subs	r6, r6, r3
 8017a1e:	1ad3      	subs	r3, r2, r3
 8017a20:	9308      	str	r3, [sp, #32]
 8017a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a24:	b1f3      	cbz	r3, 8017a64 <_dtoa_r+0x78c>
 8017a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f000 80b7 	beq.w	8017b9c <_dtoa_r+0x8c4>
 8017a2e:	b18c      	cbz	r4, 8017a54 <_dtoa_r+0x77c>
 8017a30:	4629      	mov	r1, r5
 8017a32:	4622      	mov	r2, r4
 8017a34:	4658      	mov	r0, fp
 8017a36:	f000 fcc7 	bl	80183c8 <__pow5mult>
 8017a3a:	464a      	mov	r2, r9
 8017a3c:	4601      	mov	r1, r0
 8017a3e:	4605      	mov	r5, r0
 8017a40:	4658      	mov	r0, fp
 8017a42:	f000 fc17 	bl	8018274 <__multiply>
 8017a46:	4649      	mov	r1, r9
 8017a48:	9004      	str	r0, [sp, #16]
 8017a4a:	4658      	mov	r0, fp
 8017a4c:	f000 fb48 	bl	80180e0 <_Bfree>
 8017a50:	9b04      	ldr	r3, [sp, #16]
 8017a52:	4699      	mov	r9, r3
 8017a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a56:	1b1a      	subs	r2, r3, r4
 8017a58:	d004      	beq.n	8017a64 <_dtoa_r+0x78c>
 8017a5a:	4649      	mov	r1, r9
 8017a5c:	4658      	mov	r0, fp
 8017a5e:	f000 fcb3 	bl	80183c8 <__pow5mult>
 8017a62:	4681      	mov	r9, r0
 8017a64:	2101      	movs	r1, #1
 8017a66:	4658      	mov	r0, fp
 8017a68:	f000 fbee 	bl	8018248 <__i2b>
 8017a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a6e:	4604      	mov	r4, r0
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	f000 81cf 	beq.w	8017e14 <_dtoa_r+0xb3c>
 8017a76:	461a      	mov	r2, r3
 8017a78:	4601      	mov	r1, r0
 8017a7a:	4658      	mov	r0, fp
 8017a7c:	f000 fca4 	bl	80183c8 <__pow5mult>
 8017a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a82:	2b01      	cmp	r3, #1
 8017a84:	4604      	mov	r4, r0
 8017a86:	f300 8095 	bgt.w	8017bb4 <_dtoa_r+0x8dc>
 8017a8a:	9b02      	ldr	r3, [sp, #8]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	f040 8087 	bne.w	8017ba0 <_dtoa_r+0x8c8>
 8017a92:	9b03      	ldr	r3, [sp, #12]
 8017a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	f040 8089 	bne.w	8017bb0 <_dtoa_r+0x8d8>
 8017a9e:	9b03      	ldr	r3, [sp, #12]
 8017aa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017aa4:	0d1b      	lsrs	r3, r3, #20
 8017aa6:	051b      	lsls	r3, r3, #20
 8017aa8:	b12b      	cbz	r3, 8017ab6 <_dtoa_r+0x7de>
 8017aaa:	9b08      	ldr	r3, [sp, #32]
 8017aac:	3301      	adds	r3, #1
 8017aae:	9308      	str	r3, [sp, #32]
 8017ab0:	f108 0801 	add.w	r8, r8, #1
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	f000 81b0 	beq.w	8017e20 <_dtoa_r+0xb48>
 8017ac0:	6923      	ldr	r3, [r4, #16]
 8017ac2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017ac6:	6918      	ldr	r0, [r3, #16]
 8017ac8:	f000 fb72 	bl	80181b0 <__hi0bits>
 8017acc:	f1c0 0020 	rsb	r0, r0, #32
 8017ad0:	9b08      	ldr	r3, [sp, #32]
 8017ad2:	4418      	add	r0, r3
 8017ad4:	f010 001f 	ands.w	r0, r0, #31
 8017ad8:	d077      	beq.n	8017bca <_dtoa_r+0x8f2>
 8017ada:	f1c0 0320 	rsb	r3, r0, #32
 8017ade:	2b04      	cmp	r3, #4
 8017ae0:	dd6b      	ble.n	8017bba <_dtoa_r+0x8e2>
 8017ae2:	9b08      	ldr	r3, [sp, #32]
 8017ae4:	f1c0 001c 	rsb	r0, r0, #28
 8017ae8:	4403      	add	r3, r0
 8017aea:	4480      	add	r8, r0
 8017aec:	4406      	add	r6, r0
 8017aee:	9308      	str	r3, [sp, #32]
 8017af0:	f1b8 0f00 	cmp.w	r8, #0
 8017af4:	dd05      	ble.n	8017b02 <_dtoa_r+0x82a>
 8017af6:	4649      	mov	r1, r9
 8017af8:	4642      	mov	r2, r8
 8017afa:	4658      	mov	r0, fp
 8017afc:	f000 fcbe 	bl	801847c <__lshift>
 8017b00:	4681      	mov	r9, r0
 8017b02:	9b08      	ldr	r3, [sp, #32]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	dd05      	ble.n	8017b14 <_dtoa_r+0x83c>
 8017b08:	4621      	mov	r1, r4
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	4658      	mov	r0, fp
 8017b0e:	f000 fcb5 	bl	801847c <__lshift>
 8017b12:	4604      	mov	r4, r0
 8017b14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d059      	beq.n	8017bce <_dtoa_r+0x8f6>
 8017b1a:	4621      	mov	r1, r4
 8017b1c:	4648      	mov	r0, r9
 8017b1e:	f000 fd19 	bl	8018554 <__mcmp>
 8017b22:	2800      	cmp	r0, #0
 8017b24:	da53      	bge.n	8017bce <_dtoa_r+0x8f6>
 8017b26:	1e7b      	subs	r3, r7, #1
 8017b28:	9304      	str	r3, [sp, #16]
 8017b2a:	4649      	mov	r1, r9
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	220a      	movs	r2, #10
 8017b30:	4658      	mov	r0, fp
 8017b32:	f000 faf7 	bl	8018124 <__multadd>
 8017b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b38:	4681      	mov	r9, r0
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f000 8172 	beq.w	8017e24 <_dtoa_r+0xb4c>
 8017b40:	2300      	movs	r3, #0
 8017b42:	4629      	mov	r1, r5
 8017b44:	220a      	movs	r2, #10
 8017b46:	4658      	mov	r0, fp
 8017b48:	f000 faec 	bl	8018124 <__multadd>
 8017b4c:	9b00      	ldr	r3, [sp, #0]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	4605      	mov	r5, r0
 8017b52:	dc67      	bgt.n	8017c24 <_dtoa_r+0x94c>
 8017b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b56:	2b02      	cmp	r3, #2
 8017b58:	dc41      	bgt.n	8017bde <_dtoa_r+0x906>
 8017b5a:	e063      	b.n	8017c24 <_dtoa_r+0x94c>
 8017b5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017b5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017b62:	e746      	b.n	80179f2 <_dtoa_r+0x71a>
 8017b64:	9b07      	ldr	r3, [sp, #28]
 8017b66:	1e5c      	subs	r4, r3, #1
 8017b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017b6a:	42a3      	cmp	r3, r4
 8017b6c:	bfbf      	itttt	lt
 8017b6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017b70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017b72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017b74:	1ae3      	sublt	r3, r4, r3
 8017b76:	bfb4      	ite	lt
 8017b78:	18d2      	addlt	r2, r2, r3
 8017b7a:	1b1c      	subge	r4, r3, r4
 8017b7c:	9b07      	ldr	r3, [sp, #28]
 8017b7e:	bfbc      	itt	lt
 8017b80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017b82:	2400      	movlt	r4, #0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	bfb5      	itete	lt
 8017b88:	eba8 0603 	sublt.w	r6, r8, r3
 8017b8c:	9b07      	ldrge	r3, [sp, #28]
 8017b8e:	2300      	movlt	r3, #0
 8017b90:	4646      	movge	r6, r8
 8017b92:	e730      	b.n	80179f6 <_dtoa_r+0x71e>
 8017b94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017b96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017b98:	4646      	mov	r6, r8
 8017b9a:	e735      	b.n	8017a08 <_dtoa_r+0x730>
 8017b9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b9e:	e75c      	b.n	8017a5a <_dtoa_r+0x782>
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	e788      	b.n	8017ab6 <_dtoa_r+0x7de>
 8017ba4:	3fe00000 	.word	0x3fe00000
 8017ba8:	40240000 	.word	0x40240000
 8017bac:	40140000 	.word	0x40140000
 8017bb0:	9b02      	ldr	r3, [sp, #8]
 8017bb2:	e780      	b.n	8017ab6 <_dtoa_r+0x7de>
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017bb8:	e782      	b.n	8017ac0 <_dtoa_r+0x7e8>
 8017bba:	d099      	beq.n	8017af0 <_dtoa_r+0x818>
 8017bbc:	9a08      	ldr	r2, [sp, #32]
 8017bbe:	331c      	adds	r3, #28
 8017bc0:	441a      	add	r2, r3
 8017bc2:	4498      	add	r8, r3
 8017bc4:	441e      	add	r6, r3
 8017bc6:	9208      	str	r2, [sp, #32]
 8017bc8:	e792      	b.n	8017af0 <_dtoa_r+0x818>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	e7f6      	b.n	8017bbc <_dtoa_r+0x8e4>
 8017bce:	9b07      	ldr	r3, [sp, #28]
 8017bd0:	9704      	str	r7, [sp, #16]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	dc20      	bgt.n	8017c18 <_dtoa_r+0x940>
 8017bd6:	9300      	str	r3, [sp, #0]
 8017bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bda:	2b02      	cmp	r3, #2
 8017bdc:	dd1e      	ble.n	8017c1c <_dtoa_r+0x944>
 8017bde:	9b00      	ldr	r3, [sp, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	f47f aec0 	bne.w	8017966 <_dtoa_r+0x68e>
 8017be6:	4621      	mov	r1, r4
 8017be8:	2205      	movs	r2, #5
 8017bea:	4658      	mov	r0, fp
 8017bec:	f000 fa9a 	bl	8018124 <__multadd>
 8017bf0:	4601      	mov	r1, r0
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	4648      	mov	r0, r9
 8017bf6:	f000 fcad 	bl	8018554 <__mcmp>
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	f77f aeb3 	ble.w	8017966 <_dtoa_r+0x68e>
 8017c00:	4656      	mov	r6, sl
 8017c02:	2331      	movs	r3, #49	@ 0x31
 8017c04:	f806 3b01 	strb.w	r3, [r6], #1
 8017c08:	9b04      	ldr	r3, [sp, #16]
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	9304      	str	r3, [sp, #16]
 8017c0e:	e6ae      	b.n	801796e <_dtoa_r+0x696>
 8017c10:	9c07      	ldr	r4, [sp, #28]
 8017c12:	9704      	str	r7, [sp, #16]
 8017c14:	4625      	mov	r5, r4
 8017c16:	e7f3      	b.n	8017c00 <_dtoa_r+0x928>
 8017c18:	9b07      	ldr	r3, [sp, #28]
 8017c1a:	9300      	str	r3, [sp, #0]
 8017c1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	f000 8104 	beq.w	8017e2c <_dtoa_r+0xb54>
 8017c24:	2e00      	cmp	r6, #0
 8017c26:	dd05      	ble.n	8017c34 <_dtoa_r+0x95c>
 8017c28:	4629      	mov	r1, r5
 8017c2a:	4632      	mov	r2, r6
 8017c2c:	4658      	mov	r0, fp
 8017c2e:	f000 fc25 	bl	801847c <__lshift>
 8017c32:	4605      	mov	r5, r0
 8017c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d05a      	beq.n	8017cf0 <_dtoa_r+0xa18>
 8017c3a:	6869      	ldr	r1, [r5, #4]
 8017c3c:	4658      	mov	r0, fp
 8017c3e:	f000 fa0f 	bl	8018060 <_Balloc>
 8017c42:	4606      	mov	r6, r0
 8017c44:	b928      	cbnz	r0, 8017c52 <_dtoa_r+0x97a>
 8017c46:	4b84      	ldr	r3, [pc, #528]	@ (8017e58 <_dtoa_r+0xb80>)
 8017c48:	4602      	mov	r2, r0
 8017c4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017c4e:	f7ff bb5a 	b.w	8017306 <_dtoa_r+0x2e>
 8017c52:	692a      	ldr	r2, [r5, #16]
 8017c54:	3202      	adds	r2, #2
 8017c56:	0092      	lsls	r2, r2, #2
 8017c58:	f105 010c 	add.w	r1, r5, #12
 8017c5c:	300c      	adds	r0, #12
 8017c5e:	f7ff faa4 	bl	80171aa <memcpy>
 8017c62:	2201      	movs	r2, #1
 8017c64:	4631      	mov	r1, r6
 8017c66:	4658      	mov	r0, fp
 8017c68:	f000 fc08 	bl	801847c <__lshift>
 8017c6c:	f10a 0301 	add.w	r3, sl, #1
 8017c70:	9307      	str	r3, [sp, #28]
 8017c72:	9b00      	ldr	r3, [sp, #0]
 8017c74:	4453      	add	r3, sl
 8017c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c78:	9b02      	ldr	r3, [sp, #8]
 8017c7a:	f003 0301 	and.w	r3, r3, #1
 8017c7e:	462f      	mov	r7, r5
 8017c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c82:	4605      	mov	r5, r0
 8017c84:	9b07      	ldr	r3, [sp, #28]
 8017c86:	4621      	mov	r1, r4
 8017c88:	3b01      	subs	r3, #1
 8017c8a:	4648      	mov	r0, r9
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	f7ff fa9a 	bl	80171c6 <quorem>
 8017c92:	4639      	mov	r1, r7
 8017c94:	9002      	str	r0, [sp, #8]
 8017c96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017c9a:	4648      	mov	r0, r9
 8017c9c:	f000 fc5a 	bl	8018554 <__mcmp>
 8017ca0:	462a      	mov	r2, r5
 8017ca2:	9008      	str	r0, [sp, #32]
 8017ca4:	4621      	mov	r1, r4
 8017ca6:	4658      	mov	r0, fp
 8017ca8:	f000 fc70 	bl	801858c <__mdiff>
 8017cac:	68c2      	ldr	r2, [r0, #12]
 8017cae:	4606      	mov	r6, r0
 8017cb0:	bb02      	cbnz	r2, 8017cf4 <_dtoa_r+0xa1c>
 8017cb2:	4601      	mov	r1, r0
 8017cb4:	4648      	mov	r0, r9
 8017cb6:	f000 fc4d 	bl	8018554 <__mcmp>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	4631      	mov	r1, r6
 8017cbe:	4658      	mov	r0, fp
 8017cc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8017cc2:	f000 fa0d 	bl	80180e0 <_Bfree>
 8017cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017cca:	9e07      	ldr	r6, [sp, #28]
 8017ccc:	ea43 0102 	orr.w	r1, r3, r2
 8017cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017cd2:	4319      	orrs	r1, r3
 8017cd4:	d110      	bne.n	8017cf8 <_dtoa_r+0xa20>
 8017cd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017cda:	d029      	beq.n	8017d30 <_dtoa_r+0xa58>
 8017cdc:	9b08      	ldr	r3, [sp, #32]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	dd02      	ble.n	8017ce8 <_dtoa_r+0xa10>
 8017ce2:	9b02      	ldr	r3, [sp, #8]
 8017ce4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017ce8:	9b00      	ldr	r3, [sp, #0]
 8017cea:	f883 8000 	strb.w	r8, [r3]
 8017cee:	e63f      	b.n	8017970 <_dtoa_r+0x698>
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	e7bb      	b.n	8017c6c <_dtoa_r+0x994>
 8017cf4:	2201      	movs	r2, #1
 8017cf6:	e7e1      	b.n	8017cbc <_dtoa_r+0x9e4>
 8017cf8:	9b08      	ldr	r3, [sp, #32]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	db04      	blt.n	8017d08 <_dtoa_r+0xa30>
 8017cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017d00:	430b      	orrs	r3, r1
 8017d02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d04:	430b      	orrs	r3, r1
 8017d06:	d120      	bne.n	8017d4a <_dtoa_r+0xa72>
 8017d08:	2a00      	cmp	r2, #0
 8017d0a:	dded      	ble.n	8017ce8 <_dtoa_r+0xa10>
 8017d0c:	4649      	mov	r1, r9
 8017d0e:	2201      	movs	r2, #1
 8017d10:	4658      	mov	r0, fp
 8017d12:	f000 fbb3 	bl	801847c <__lshift>
 8017d16:	4621      	mov	r1, r4
 8017d18:	4681      	mov	r9, r0
 8017d1a:	f000 fc1b 	bl	8018554 <__mcmp>
 8017d1e:	2800      	cmp	r0, #0
 8017d20:	dc03      	bgt.n	8017d2a <_dtoa_r+0xa52>
 8017d22:	d1e1      	bne.n	8017ce8 <_dtoa_r+0xa10>
 8017d24:	f018 0f01 	tst.w	r8, #1
 8017d28:	d0de      	beq.n	8017ce8 <_dtoa_r+0xa10>
 8017d2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017d2e:	d1d8      	bne.n	8017ce2 <_dtoa_r+0xa0a>
 8017d30:	9a00      	ldr	r2, [sp, #0]
 8017d32:	2339      	movs	r3, #57	@ 0x39
 8017d34:	7013      	strb	r3, [r2, #0]
 8017d36:	4633      	mov	r3, r6
 8017d38:	461e      	mov	r6, r3
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017d40:	2a39      	cmp	r2, #57	@ 0x39
 8017d42:	d052      	beq.n	8017dea <_dtoa_r+0xb12>
 8017d44:	3201      	adds	r2, #1
 8017d46:	701a      	strb	r2, [r3, #0]
 8017d48:	e612      	b.n	8017970 <_dtoa_r+0x698>
 8017d4a:	2a00      	cmp	r2, #0
 8017d4c:	dd07      	ble.n	8017d5e <_dtoa_r+0xa86>
 8017d4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017d52:	d0ed      	beq.n	8017d30 <_dtoa_r+0xa58>
 8017d54:	9a00      	ldr	r2, [sp, #0]
 8017d56:	f108 0301 	add.w	r3, r8, #1
 8017d5a:	7013      	strb	r3, [r2, #0]
 8017d5c:	e608      	b.n	8017970 <_dtoa_r+0x698>
 8017d5e:	9b07      	ldr	r3, [sp, #28]
 8017d60:	9a07      	ldr	r2, [sp, #28]
 8017d62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8017d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d68:	4293      	cmp	r3, r2
 8017d6a:	d028      	beq.n	8017dbe <_dtoa_r+0xae6>
 8017d6c:	4649      	mov	r1, r9
 8017d6e:	2300      	movs	r3, #0
 8017d70:	220a      	movs	r2, #10
 8017d72:	4658      	mov	r0, fp
 8017d74:	f000 f9d6 	bl	8018124 <__multadd>
 8017d78:	42af      	cmp	r7, r5
 8017d7a:	4681      	mov	r9, r0
 8017d7c:	f04f 0300 	mov.w	r3, #0
 8017d80:	f04f 020a 	mov.w	r2, #10
 8017d84:	4639      	mov	r1, r7
 8017d86:	4658      	mov	r0, fp
 8017d88:	d107      	bne.n	8017d9a <_dtoa_r+0xac2>
 8017d8a:	f000 f9cb 	bl	8018124 <__multadd>
 8017d8e:	4607      	mov	r7, r0
 8017d90:	4605      	mov	r5, r0
 8017d92:	9b07      	ldr	r3, [sp, #28]
 8017d94:	3301      	adds	r3, #1
 8017d96:	9307      	str	r3, [sp, #28]
 8017d98:	e774      	b.n	8017c84 <_dtoa_r+0x9ac>
 8017d9a:	f000 f9c3 	bl	8018124 <__multadd>
 8017d9e:	4629      	mov	r1, r5
 8017da0:	4607      	mov	r7, r0
 8017da2:	2300      	movs	r3, #0
 8017da4:	220a      	movs	r2, #10
 8017da6:	4658      	mov	r0, fp
 8017da8:	f000 f9bc 	bl	8018124 <__multadd>
 8017dac:	4605      	mov	r5, r0
 8017dae:	e7f0      	b.n	8017d92 <_dtoa_r+0xaba>
 8017db0:	9b00      	ldr	r3, [sp, #0]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	bfcc      	ite	gt
 8017db6:	461e      	movgt	r6, r3
 8017db8:	2601      	movle	r6, #1
 8017dba:	4456      	add	r6, sl
 8017dbc:	2700      	movs	r7, #0
 8017dbe:	4649      	mov	r1, r9
 8017dc0:	2201      	movs	r2, #1
 8017dc2:	4658      	mov	r0, fp
 8017dc4:	f000 fb5a 	bl	801847c <__lshift>
 8017dc8:	4621      	mov	r1, r4
 8017dca:	4681      	mov	r9, r0
 8017dcc:	f000 fbc2 	bl	8018554 <__mcmp>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	dcb0      	bgt.n	8017d36 <_dtoa_r+0xa5e>
 8017dd4:	d102      	bne.n	8017ddc <_dtoa_r+0xb04>
 8017dd6:	f018 0f01 	tst.w	r8, #1
 8017dda:	d1ac      	bne.n	8017d36 <_dtoa_r+0xa5e>
 8017ddc:	4633      	mov	r3, r6
 8017dde:	461e      	mov	r6, r3
 8017de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017de4:	2a30      	cmp	r2, #48	@ 0x30
 8017de6:	d0fa      	beq.n	8017dde <_dtoa_r+0xb06>
 8017de8:	e5c2      	b.n	8017970 <_dtoa_r+0x698>
 8017dea:	459a      	cmp	sl, r3
 8017dec:	d1a4      	bne.n	8017d38 <_dtoa_r+0xa60>
 8017dee:	9b04      	ldr	r3, [sp, #16]
 8017df0:	3301      	adds	r3, #1
 8017df2:	9304      	str	r3, [sp, #16]
 8017df4:	2331      	movs	r3, #49	@ 0x31
 8017df6:	f88a 3000 	strb.w	r3, [sl]
 8017dfa:	e5b9      	b.n	8017970 <_dtoa_r+0x698>
 8017dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017dfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8017e5c <_dtoa_r+0xb84>
 8017e02:	b11b      	cbz	r3, 8017e0c <_dtoa_r+0xb34>
 8017e04:	f10a 0308 	add.w	r3, sl, #8
 8017e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017e0a:	6013      	str	r3, [r2, #0]
 8017e0c:	4650      	mov	r0, sl
 8017e0e:	b019      	add	sp, #100	@ 0x64
 8017e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	f77f ae37 	ble.w	8017a8a <_dtoa_r+0x7b2>
 8017e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e20:	2001      	movs	r0, #1
 8017e22:	e655      	b.n	8017ad0 <_dtoa_r+0x7f8>
 8017e24:	9b00      	ldr	r3, [sp, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f77f aed6 	ble.w	8017bd8 <_dtoa_r+0x900>
 8017e2c:	4656      	mov	r6, sl
 8017e2e:	4621      	mov	r1, r4
 8017e30:	4648      	mov	r0, r9
 8017e32:	f7ff f9c8 	bl	80171c6 <quorem>
 8017e36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017e3a:	f806 8b01 	strb.w	r8, [r6], #1
 8017e3e:	9b00      	ldr	r3, [sp, #0]
 8017e40:	eba6 020a 	sub.w	r2, r6, sl
 8017e44:	4293      	cmp	r3, r2
 8017e46:	ddb3      	ble.n	8017db0 <_dtoa_r+0xad8>
 8017e48:	4649      	mov	r1, r9
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	220a      	movs	r2, #10
 8017e4e:	4658      	mov	r0, fp
 8017e50:	f000 f968 	bl	8018124 <__multadd>
 8017e54:	4681      	mov	r9, r0
 8017e56:	e7ea      	b.n	8017e2e <_dtoa_r+0xb56>
 8017e58:	0801ae09 	.word	0x0801ae09
 8017e5c:	0801ad8d 	.word	0x0801ad8d

08017e60 <_free_r>:
 8017e60:	b538      	push	{r3, r4, r5, lr}
 8017e62:	4605      	mov	r5, r0
 8017e64:	2900      	cmp	r1, #0
 8017e66:	d041      	beq.n	8017eec <_free_r+0x8c>
 8017e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e6c:	1f0c      	subs	r4, r1, #4
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	bfb8      	it	lt
 8017e72:	18e4      	addlt	r4, r4, r3
 8017e74:	f000 f8e8 	bl	8018048 <__malloc_lock>
 8017e78:	4a1d      	ldr	r2, [pc, #116]	@ (8017ef0 <_free_r+0x90>)
 8017e7a:	6813      	ldr	r3, [r2, #0]
 8017e7c:	b933      	cbnz	r3, 8017e8c <_free_r+0x2c>
 8017e7e:	6063      	str	r3, [r4, #4]
 8017e80:	6014      	str	r4, [r2, #0]
 8017e82:	4628      	mov	r0, r5
 8017e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e88:	f000 b8e4 	b.w	8018054 <__malloc_unlock>
 8017e8c:	42a3      	cmp	r3, r4
 8017e8e:	d908      	bls.n	8017ea2 <_free_r+0x42>
 8017e90:	6820      	ldr	r0, [r4, #0]
 8017e92:	1821      	adds	r1, r4, r0
 8017e94:	428b      	cmp	r3, r1
 8017e96:	bf01      	itttt	eq
 8017e98:	6819      	ldreq	r1, [r3, #0]
 8017e9a:	685b      	ldreq	r3, [r3, #4]
 8017e9c:	1809      	addeq	r1, r1, r0
 8017e9e:	6021      	streq	r1, [r4, #0]
 8017ea0:	e7ed      	b.n	8017e7e <_free_r+0x1e>
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	685b      	ldr	r3, [r3, #4]
 8017ea6:	b10b      	cbz	r3, 8017eac <_free_r+0x4c>
 8017ea8:	42a3      	cmp	r3, r4
 8017eaa:	d9fa      	bls.n	8017ea2 <_free_r+0x42>
 8017eac:	6811      	ldr	r1, [r2, #0]
 8017eae:	1850      	adds	r0, r2, r1
 8017eb0:	42a0      	cmp	r0, r4
 8017eb2:	d10b      	bne.n	8017ecc <_free_r+0x6c>
 8017eb4:	6820      	ldr	r0, [r4, #0]
 8017eb6:	4401      	add	r1, r0
 8017eb8:	1850      	adds	r0, r2, r1
 8017eba:	4283      	cmp	r3, r0
 8017ebc:	6011      	str	r1, [r2, #0]
 8017ebe:	d1e0      	bne.n	8017e82 <_free_r+0x22>
 8017ec0:	6818      	ldr	r0, [r3, #0]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	6053      	str	r3, [r2, #4]
 8017ec6:	4408      	add	r0, r1
 8017ec8:	6010      	str	r0, [r2, #0]
 8017eca:	e7da      	b.n	8017e82 <_free_r+0x22>
 8017ecc:	d902      	bls.n	8017ed4 <_free_r+0x74>
 8017ece:	230c      	movs	r3, #12
 8017ed0:	602b      	str	r3, [r5, #0]
 8017ed2:	e7d6      	b.n	8017e82 <_free_r+0x22>
 8017ed4:	6820      	ldr	r0, [r4, #0]
 8017ed6:	1821      	adds	r1, r4, r0
 8017ed8:	428b      	cmp	r3, r1
 8017eda:	bf04      	itt	eq
 8017edc:	6819      	ldreq	r1, [r3, #0]
 8017ede:	685b      	ldreq	r3, [r3, #4]
 8017ee0:	6063      	str	r3, [r4, #4]
 8017ee2:	bf04      	itt	eq
 8017ee4:	1809      	addeq	r1, r1, r0
 8017ee6:	6021      	streq	r1, [r4, #0]
 8017ee8:	6054      	str	r4, [r2, #4]
 8017eea:	e7ca      	b.n	8017e82 <_free_r+0x22>
 8017eec:	bd38      	pop	{r3, r4, r5, pc}
 8017eee:	bf00      	nop
 8017ef0:	20009550 	.word	0x20009550

08017ef4 <malloc>:
 8017ef4:	4b02      	ldr	r3, [pc, #8]	@ (8017f00 <malloc+0xc>)
 8017ef6:	4601      	mov	r1, r0
 8017ef8:	6818      	ldr	r0, [r3, #0]
 8017efa:	f000 b825 	b.w	8017f48 <_malloc_r>
 8017efe:	bf00      	nop
 8017f00:	20001204 	.word	0x20001204

08017f04 <sbrk_aligned>:
 8017f04:	b570      	push	{r4, r5, r6, lr}
 8017f06:	4e0f      	ldr	r6, [pc, #60]	@ (8017f44 <sbrk_aligned+0x40>)
 8017f08:	460c      	mov	r4, r1
 8017f0a:	6831      	ldr	r1, [r6, #0]
 8017f0c:	4605      	mov	r5, r0
 8017f0e:	b911      	cbnz	r1, 8017f16 <sbrk_aligned+0x12>
 8017f10:	f000 fe46 	bl	8018ba0 <_sbrk_r>
 8017f14:	6030      	str	r0, [r6, #0]
 8017f16:	4621      	mov	r1, r4
 8017f18:	4628      	mov	r0, r5
 8017f1a:	f000 fe41 	bl	8018ba0 <_sbrk_r>
 8017f1e:	1c43      	adds	r3, r0, #1
 8017f20:	d103      	bne.n	8017f2a <sbrk_aligned+0x26>
 8017f22:	f04f 34ff 	mov.w	r4, #4294967295
 8017f26:	4620      	mov	r0, r4
 8017f28:	bd70      	pop	{r4, r5, r6, pc}
 8017f2a:	1cc4      	adds	r4, r0, #3
 8017f2c:	f024 0403 	bic.w	r4, r4, #3
 8017f30:	42a0      	cmp	r0, r4
 8017f32:	d0f8      	beq.n	8017f26 <sbrk_aligned+0x22>
 8017f34:	1a21      	subs	r1, r4, r0
 8017f36:	4628      	mov	r0, r5
 8017f38:	f000 fe32 	bl	8018ba0 <_sbrk_r>
 8017f3c:	3001      	adds	r0, #1
 8017f3e:	d1f2      	bne.n	8017f26 <sbrk_aligned+0x22>
 8017f40:	e7ef      	b.n	8017f22 <sbrk_aligned+0x1e>
 8017f42:	bf00      	nop
 8017f44:	2000954c 	.word	0x2000954c

08017f48 <_malloc_r>:
 8017f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f4c:	1ccd      	adds	r5, r1, #3
 8017f4e:	f025 0503 	bic.w	r5, r5, #3
 8017f52:	3508      	adds	r5, #8
 8017f54:	2d0c      	cmp	r5, #12
 8017f56:	bf38      	it	cc
 8017f58:	250c      	movcc	r5, #12
 8017f5a:	2d00      	cmp	r5, #0
 8017f5c:	4606      	mov	r6, r0
 8017f5e:	db01      	blt.n	8017f64 <_malloc_r+0x1c>
 8017f60:	42a9      	cmp	r1, r5
 8017f62:	d904      	bls.n	8017f6e <_malloc_r+0x26>
 8017f64:	230c      	movs	r3, #12
 8017f66:	6033      	str	r3, [r6, #0]
 8017f68:	2000      	movs	r0, #0
 8017f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018044 <_malloc_r+0xfc>
 8017f72:	f000 f869 	bl	8018048 <__malloc_lock>
 8017f76:	f8d8 3000 	ldr.w	r3, [r8]
 8017f7a:	461c      	mov	r4, r3
 8017f7c:	bb44      	cbnz	r4, 8017fd0 <_malloc_r+0x88>
 8017f7e:	4629      	mov	r1, r5
 8017f80:	4630      	mov	r0, r6
 8017f82:	f7ff ffbf 	bl	8017f04 <sbrk_aligned>
 8017f86:	1c43      	adds	r3, r0, #1
 8017f88:	4604      	mov	r4, r0
 8017f8a:	d158      	bne.n	801803e <_malloc_r+0xf6>
 8017f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8017f90:	4627      	mov	r7, r4
 8017f92:	2f00      	cmp	r7, #0
 8017f94:	d143      	bne.n	801801e <_malloc_r+0xd6>
 8017f96:	2c00      	cmp	r4, #0
 8017f98:	d04b      	beq.n	8018032 <_malloc_r+0xea>
 8017f9a:	6823      	ldr	r3, [r4, #0]
 8017f9c:	4639      	mov	r1, r7
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	eb04 0903 	add.w	r9, r4, r3
 8017fa4:	f000 fdfc 	bl	8018ba0 <_sbrk_r>
 8017fa8:	4581      	cmp	r9, r0
 8017faa:	d142      	bne.n	8018032 <_malloc_r+0xea>
 8017fac:	6821      	ldr	r1, [r4, #0]
 8017fae:	1a6d      	subs	r5, r5, r1
 8017fb0:	4629      	mov	r1, r5
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	f7ff ffa6 	bl	8017f04 <sbrk_aligned>
 8017fb8:	3001      	adds	r0, #1
 8017fba:	d03a      	beq.n	8018032 <_malloc_r+0xea>
 8017fbc:	6823      	ldr	r3, [r4, #0]
 8017fbe:	442b      	add	r3, r5
 8017fc0:	6023      	str	r3, [r4, #0]
 8017fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8017fc6:	685a      	ldr	r2, [r3, #4]
 8017fc8:	bb62      	cbnz	r2, 8018024 <_malloc_r+0xdc>
 8017fca:	f8c8 7000 	str.w	r7, [r8]
 8017fce:	e00f      	b.n	8017ff0 <_malloc_r+0xa8>
 8017fd0:	6822      	ldr	r2, [r4, #0]
 8017fd2:	1b52      	subs	r2, r2, r5
 8017fd4:	d420      	bmi.n	8018018 <_malloc_r+0xd0>
 8017fd6:	2a0b      	cmp	r2, #11
 8017fd8:	d917      	bls.n	801800a <_malloc_r+0xc2>
 8017fda:	1961      	adds	r1, r4, r5
 8017fdc:	42a3      	cmp	r3, r4
 8017fde:	6025      	str	r5, [r4, #0]
 8017fe0:	bf18      	it	ne
 8017fe2:	6059      	strne	r1, [r3, #4]
 8017fe4:	6863      	ldr	r3, [r4, #4]
 8017fe6:	bf08      	it	eq
 8017fe8:	f8c8 1000 	streq.w	r1, [r8]
 8017fec:	5162      	str	r2, [r4, r5]
 8017fee:	604b      	str	r3, [r1, #4]
 8017ff0:	4630      	mov	r0, r6
 8017ff2:	f000 f82f 	bl	8018054 <__malloc_unlock>
 8017ff6:	f104 000b 	add.w	r0, r4, #11
 8017ffa:	1d23      	adds	r3, r4, #4
 8017ffc:	f020 0007 	bic.w	r0, r0, #7
 8018000:	1ac2      	subs	r2, r0, r3
 8018002:	bf1c      	itt	ne
 8018004:	1a1b      	subne	r3, r3, r0
 8018006:	50a3      	strne	r3, [r4, r2]
 8018008:	e7af      	b.n	8017f6a <_malloc_r+0x22>
 801800a:	6862      	ldr	r2, [r4, #4]
 801800c:	42a3      	cmp	r3, r4
 801800e:	bf0c      	ite	eq
 8018010:	f8c8 2000 	streq.w	r2, [r8]
 8018014:	605a      	strne	r2, [r3, #4]
 8018016:	e7eb      	b.n	8017ff0 <_malloc_r+0xa8>
 8018018:	4623      	mov	r3, r4
 801801a:	6864      	ldr	r4, [r4, #4]
 801801c:	e7ae      	b.n	8017f7c <_malloc_r+0x34>
 801801e:	463c      	mov	r4, r7
 8018020:	687f      	ldr	r7, [r7, #4]
 8018022:	e7b6      	b.n	8017f92 <_malloc_r+0x4a>
 8018024:	461a      	mov	r2, r3
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	42a3      	cmp	r3, r4
 801802a:	d1fb      	bne.n	8018024 <_malloc_r+0xdc>
 801802c:	2300      	movs	r3, #0
 801802e:	6053      	str	r3, [r2, #4]
 8018030:	e7de      	b.n	8017ff0 <_malloc_r+0xa8>
 8018032:	230c      	movs	r3, #12
 8018034:	6033      	str	r3, [r6, #0]
 8018036:	4630      	mov	r0, r6
 8018038:	f000 f80c 	bl	8018054 <__malloc_unlock>
 801803c:	e794      	b.n	8017f68 <_malloc_r+0x20>
 801803e:	6005      	str	r5, [r0, #0]
 8018040:	e7d6      	b.n	8017ff0 <_malloc_r+0xa8>
 8018042:	bf00      	nop
 8018044:	20009550 	.word	0x20009550

08018048 <__malloc_lock>:
 8018048:	4801      	ldr	r0, [pc, #4]	@ (8018050 <__malloc_lock+0x8>)
 801804a:	f7ff b8a4 	b.w	8017196 <__retarget_lock_acquire_recursive>
 801804e:	bf00      	nop
 8018050:	20009548 	.word	0x20009548

08018054 <__malloc_unlock>:
 8018054:	4801      	ldr	r0, [pc, #4]	@ (801805c <__malloc_unlock+0x8>)
 8018056:	f7ff b89f 	b.w	8017198 <__retarget_lock_release_recursive>
 801805a:	bf00      	nop
 801805c:	20009548 	.word	0x20009548

08018060 <_Balloc>:
 8018060:	b570      	push	{r4, r5, r6, lr}
 8018062:	69c6      	ldr	r6, [r0, #28]
 8018064:	4604      	mov	r4, r0
 8018066:	460d      	mov	r5, r1
 8018068:	b976      	cbnz	r6, 8018088 <_Balloc+0x28>
 801806a:	2010      	movs	r0, #16
 801806c:	f7ff ff42 	bl	8017ef4 <malloc>
 8018070:	4602      	mov	r2, r0
 8018072:	61e0      	str	r0, [r4, #28]
 8018074:	b920      	cbnz	r0, 8018080 <_Balloc+0x20>
 8018076:	4b18      	ldr	r3, [pc, #96]	@ (80180d8 <_Balloc+0x78>)
 8018078:	4818      	ldr	r0, [pc, #96]	@ (80180dc <_Balloc+0x7c>)
 801807a:	216b      	movs	r1, #107	@ 0x6b
 801807c:	f000 fda0 	bl	8018bc0 <__assert_func>
 8018080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018084:	6006      	str	r6, [r0, #0]
 8018086:	60c6      	str	r6, [r0, #12]
 8018088:	69e6      	ldr	r6, [r4, #28]
 801808a:	68f3      	ldr	r3, [r6, #12]
 801808c:	b183      	cbz	r3, 80180b0 <_Balloc+0x50>
 801808e:	69e3      	ldr	r3, [r4, #28]
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018096:	b9b8      	cbnz	r0, 80180c8 <_Balloc+0x68>
 8018098:	2101      	movs	r1, #1
 801809a:	fa01 f605 	lsl.w	r6, r1, r5
 801809e:	1d72      	adds	r2, r6, #5
 80180a0:	0092      	lsls	r2, r2, #2
 80180a2:	4620      	mov	r0, r4
 80180a4:	f000 fdaa 	bl	8018bfc <_calloc_r>
 80180a8:	b160      	cbz	r0, 80180c4 <_Balloc+0x64>
 80180aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80180ae:	e00e      	b.n	80180ce <_Balloc+0x6e>
 80180b0:	2221      	movs	r2, #33	@ 0x21
 80180b2:	2104      	movs	r1, #4
 80180b4:	4620      	mov	r0, r4
 80180b6:	f000 fda1 	bl	8018bfc <_calloc_r>
 80180ba:	69e3      	ldr	r3, [r4, #28]
 80180bc:	60f0      	str	r0, [r6, #12]
 80180be:	68db      	ldr	r3, [r3, #12]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d1e4      	bne.n	801808e <_Balloc+0x2e>
 80180c4:	2000      	movs	r0, #0
 80180c6:	bd70      	pop	{r4, r5, r6, pc}
 80180c8:	6802      	ldr	r2, [r0, #0]
 80180ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80180ce:	2300      	movs	r3, #0
 80180d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80180d4:	e7f7      	b.n	80180c6 <_Balloc+0x66>
 80180d6:	bf00      	nop
 80180d8:	0801ad9a 	.word	0x0801ad9a
 80180dc:	0801ae1a 	.word	0x0801ae1a

080180e0 <_Bfree>:
 80180e0:	b570      	push	{r4, r5, r6, lr}
 80180e2:	69c6      	ldr	r6, [r0, #28]
 80180e4:	4605      	mov	r5, r0
 80180e6:	460c      	mov	r4, r1
 80180e8:	b976      	cbnz	r6, 8018108 <_Bfree+0x28>
 80180ea:	2010      	movs	r0, #16
 80180ec:	f7ff ff02 	bl	8017ef4 <malloc>
 80180f0:	4602      	mov	r2, r0
 80180f2:	61e8      	str	r0, [r5, #28]
 80180f4:	b920      	cbnz	r0, 8018100 <_Bfree+0x20>
 80180f6:	4b09      	ldr	r3, [pc, #36]	@ (801811c <_Bfree+0x3c>)
 80180f8:	4809      	ldr	r0, [pc, #36]	@ (8018120 <_Bfree+0x40>)
 80180fa:	218f      	movs	r1, #143	@ 0x8f
 80180fc:	f000 fd60 	bl	8018bc0 <__assert_func>
 8018100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018104:	6006      	str	r6, [r0, #0]
 8018106:	60c6      	str	r6, [r0, #12]
 8018108:	b13c      	cbz	r4, 801811a <_Bfree+0x3a>
 801810a:	69eb      	ldr	r3, [r5, #28]
 801810c:	6862      	ldr	r2, [r4, #4]
 801810e:	68db      	ldr	r3, [r3, #12]
 8018110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018114:	6021      	str	r1, [r4, #0]
 8018116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	0801ad9a 	.word	0x0801ad9a
 8018120:	0801ae1a 	.word	0x0801ae1a

08018124 <__multadd>:
 8018124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018128:	690d      	ldr	r5, [r1, #16]
 801812a:	4607      	mov	r7, r0
 801812c:	460c      	mov	r4, r1
 801812e:	461e      	mov	r6, r3
 8018130:	f101 0c14 	add.w	ip, r1, #20
 8018134:	2000      	movs	r0, #0
 8018136:	f8dc 3000 	ldr.w	r3, [ip]
 801813a:	b299      	uxth	r1, r3
 801813c:	fb02 6101 	mla	r1, r2, r1, r6
 8018140:	0c1e      	lsrs	r6, r3, #16
 8018142:	0c0b      	lsrs	r3, r1, #16
 8018144:	fb02 3306 	mla	r3, r2, r6, r3
 8018148:	b289      	uxth	r1, r1
 801814a:	3001      	adds	r0, #1
 801814c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018150:	4285      	cmp	r5, r0
 8018152:	f84c 1b04 	str.w	r1, [ip], #4
 8018156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801815a:	dcec      	bgt.n	8018136 <__multadd+0x12>
 801815c:	b30e      	cbz	r6, 80181a2 <__multadd+0x7e>
 801815e:	68a3      	ldr	r3, [r4, #8]
 8018160:	42ab      	cmp	r3, r5
 8018162:	dc19      	bgt.n	8018198 <__multadd+0x74>
 8018164:	6861      	ldr	r1, [r4, #4]
 8018166:	4638      	mov	r0, r7
 8018168:	3101      	adds	r1, #1
 801816a:	f7ff ff79 	bl	8018060 <_Balloc>
 801816e:	4680      	mov	r8, r0
 8018170:	b928      	cbnz	r0, 801817e <__multadd+0x5a>
 8018172:	4602      	mov	r2, r0
 8018174:	4b0c      	ldr	r3, [pc, #48]	@ (80181a8 <__multadd+0x84>)
 8018176:	480d      	ldr	r0, [pc, #52]	@ (80181ac <__multadd+0x88>)
 8018178:	21ba      	movs	r1, #186	@ 0xba
 801817a:	f000 fd21 	bl	8018bc0 <__assert_func>
 801817e:	6922      	ldr	r2, [r4, #16]
 8018180:	3202      	adds	r2, #2
 8018182:	f104 010c 	add.w	r1, r4, #12
 8018186:	0092      	lsls	r2, r2, #2
 8018188:	300c      	adds	r0, #12
 801818a:	f7ff f80e 	bl	80171aa <memcpy>
 801818e:	4621      	mov	r1, r4
 8018190:	4638      	mov	r0, r7
 8018192:	f7ff ffa5 	bl	80180e0 <_Bfree>
 8018196:	4644      	mov	r4, r8
 8018198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801819c:	3501      	adds	r5, #1
 801819e:	615e      	str	r6, [r3, #20]
 80181a0:	6125      	str	r5, [r4, #16]
 80181a2:	4620      	mov	r0, r4
 80181a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181a8:	0801ae09 	.word	0x0801ae09
 80181ac:	0801ae1a 	.word	0x0801ae1a

080181b0 <__hi0bits>:
 80181b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80181b4:	4603      	mov	r3, r0
 80181b6:	bf36      	itet	cc
 80181b8:	0403      	lslcc	r3, r0, #16
 80181ba:	2000      	movcs	r0, #0
 80181bc:	2010      	movcc	r0, #16
 80181be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80181c2:	bf3c      	itt	cc
 80181c4:	021b      	lslcc	r3, r3, #8
 80181c6:	3008      	addcc	r0, #8
 80181c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80181cc:	bf3c      	itt	cc
 80181ce:	011b      	lslcc	r3, r3, #4
 80181d0:	3004      	addcc	r0, #4
 80181d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80181d6:	bf3c      	itt	cc
 80181d8:	009b      	lslcc	r3, r3, #2
 80181da:	3002      	addcc	r0, #2
 80181dc:	2b00      	cmp	r3, #0
 80181de:	db05      	blt.n	80181ec <__hi0bits+0x3c>
 80181e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80181e4:	f100 0001 	add.w	r0, r0, #1
 80181e8:	bf08      	it	eq
 80181ea:	2020      	moveq	r0, #32
 80181ec:	4770      	bx	lr

080181ee <__lo0bits>:
 80181ee:	6803      	ldr	r3, [r0, #0]
 80181f0:	4602      	mov	r2, r0
 80181f2:	f013 0007 	ands.w	r0, r3, #7
 80181f6:	d00b      	beq.n	8018210 <__lo0bits+0x22>
 80181f8:	07d9      	lsls	r1, r3, #31
 80181fa:	d421      	bmi.n	8018240 <__lo0bits+0x52>
 80181fc:	0798      	lsls	r0, r3, #30
 80181fe:	bf49      	itett	mi
 8018200:	085b      	lsrmi	r3, r3, #1
 8018202:	089b      	lsrpl	r3, r3, #2
 8018204:	2001      	movmi	r0, #1
 8018206:	6013      	strmi	r3, [r2, #0]
 8018208:	bf5c      	itt	pl
 801820a:	6013      	strpl	r3, [r2, #0]
 801820c:	2002      	movpl	r0, #2
 801820e:	4770      	bx	lr
 8018210:	b299      	uxth	r1, r3
 8018212:	b909      	cbnz	r1, 8018218 <__lo0bits+0x2a>
 8018214:	0c1b      	lsrs	r3, r3, #16
 8018216:	2010      	movs	r0, #16
 8018218:	b2d9      	uxtb	r1, r3
 801821a:	b909      	cbnz	r1, 8018220 <__lo0bits+0x32>
 801821c:	3008      	adds	r0, #8
 801821e:	0a1b      	lsrs	r3, r3, #8
 8018220:	0719      	lsls	r1, r3, #28
 8018222:	bf04      	itt	eq
 8018224:	091b      	lsreq	r3, r3, #4
 8018226:	3004      	addeq	r0, #4
 8018228:	0799      	lsls	r1, r3, #30
 801822a:	bf04      	itt	eq
 801822c:	089b      	lsreq	r3, r3, #2
 801822e:	3002      	addeq	r0, #2
 8018230:	07d9      	lsls	r1, r3, #31
 8018232:	d403      	bmi.n	801823c <__lo0bits+0x4e>
 8018234:	085b      	lsrs	r3, r3, #1
 8018236:	f100 0001 	add.w	r0, r0, #1
 801823a:	d003      	beq.n	8018244 <__lo0bits+0x56>
 801823c:	6013      	str	r3, [r2, #0]
 801823e:	4770      	bx	lr
 8018240:	2000      	movs	r0, #0
 8018242:	4770      	bx	lr
 8018244:	2020      	movs	r0, #32
 8018246:	4770      	bx	lr

08018248 <__i2b>:
 8018248:	b510      	push	{r4, lr}
 801824a:	460c      	mov	r4, r1
 801824c:	2101      	movs	r1, #1
 801824e:	f7ff ff07 	bl	8018060 <_Balloc>
 8018252:	4602      	mov	r2, r0
 8018254:	b928      	cbnz	r0, 8018262 <__i2b+0x1a>
 8018256:	4b05      	ldr	r3, [pc, #20]	@ (801826c <__i2b+0x24>)
 8018258:	4805      	ldr	r0, [pc, #20]	@ (8018270 <__i2b+0x28>)
 801825a:	f240 1145 	movw	r1, #325	@ 0x145
 801825e:	f000 fcaf 	bl	8018bc0 <__assert_func>
 8018262:	2301      	movs	r3, #1
 8018264:	6144      	str	r4, [r0, #20]
 8018266:	6103      	str	r3, [r0, #16]
 8018268:	bd10      	pop	{r4, pc}
 801826a:	bf00      	nop
 801826c:	0801ae09 	.word	0x0801ae09
 8018270:	0801ae1a 	.word	0x0801ae1a

08018274 <__multiply>:
 8018274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018278:	4614      	mov	r4, r2
 801827a:	690a      	ldr	r2, [r1, #16]
 801827c:	6923      	ldr	r3, [r4, #16]
 801827e:	429a      	cmp	r2, r3
 8018280:	bfa8      	it	ge
 8018282:	4623      	movge	r3, r4
 8018284:	460f      	mov	r7, r1
 8018286:	bfa4      	itt	ge
 8018288:	460c      	movge	r4, r1
 801828a:	461f      	movge	r7, r3
 801828c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018290:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018294:	68a3      	ldr	r3, [r4, #8]
 8018296:	6861      	ldr	r1, [r4, #4]
 8018298:	eb0a 0609 	add.w	r6, sl, r9
 801829c:	42b3      	cmp	r3, r6
 801829e:	b085      	sub	sp, #20
 80182a0:	bfb8      	it	lt
 80182a2:	3101      	addlt	r1, #1
 80182a4:	f7ff fedc 	bl	8018060 <_Balloc>
 80182a8:	b930      	cbnz	r0, 80182b8 <__multiply+0x44>
 80182aa:	4602      	mov	r2, r0
 80182ac:	4b44      	ldr	r3, [pc, #272]	@ (80183c0 <__multiply+0x14c>)
 80182ae:	4845      	ldr	r0, [pc, #276]	@ (80183c4 <__multiply+0x150>)
 80182b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80182b4:	f000 fc84 	bl	8018bc0 <__assert_func>
 80182b8:	f100 0514 	add.w	r5, r0, #20
 80182bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80182c0:	462b      	mov	r3, r5
 80182c2:	2200      	movs	r2, #0
 80182c4:	4543      	cmp	r3, r8
 80182c6:	d321      	bcc.n	801830c <__multiply+0x98>
 80182c8:	f107 0114 	add.w	r1, r7, #20
 80182cc:	f104 0214 	add.w	r2, r4, #20
 80182d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80182d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80182d8:	9302      	str	r3, [sp, #8]
 80182da:	1b13      	subs	r3, r2, r4
 80182dc:	3b15      	subs	r3, #21
 80182de:	f023 0303 	bic.w	r3, r3, #3
 80182e2:	3304      	adds	r3, #4
 80182e4:	f104 0715 	add.w	r7, r4, #21
 80182e8:	42ba      	cmp	r2, r7
 80182ea:	bf38      	it	cc
 80182ec:	2304      	movcc	r3, #4
 80182ee:	9301      	str	r3, [sp, #4]
 80182f0:	9b02      	ldr	r3, [sp, #8]
 80182f2:	9103      	str	r1, [sp, #12]
 80182f4:	428b      	cmp	r3, r1
 80182f6:	d80c      	bhi.n	8018312 <__multiply+0x9e>
 80182f8:	2e00      	cmp	r6, #0
 80182fa:	dd03      	ble.n	8018304 <__multiply+0x90>
 80182fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018300:	2b00      	cmp	r3, #0
 8018302:	d05b      	beq.n	80183bc <__multiply+0x148>
 8018304:	6106      	str	r6, [r0, #16]
 8018306:	b005      	add	sp, #20
 8018308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801830c:	f843 2b04 	str.w	r2, [r3], #4
 8018310:	e7d8      	b.n	80182c4 <__multiply+0x50>
 8018312:	f8b1 a000 	ldrh.w	sl, [r1]
 8018316:	f1ba 0f00 	cmp.w	sl, #0
 801831a:	d024      	beq.n	8018366 <__multiply+0xf2>
 801831c:	f104 0e14 	add.w	lr, r4, #20
 8018320:	46a9      	mov	r9, r5
 8018322:	f04f 0c00 	mov.w	ip, #0
 8018326:	f85e 7b04 	ldr.w	r7, [lr], #4
 801832a:	f8d9 3000 	ldr.w	r3, [r9]
 801832e:	fa1f fb87 	uxth.w	fp, r7
 8018332:	b29b      	uxth	r3, r3
 8018334:	fb0a 330b 	mla	r3, sl, fp, r3
 8018338:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801833c:	f8d9 7000 	ldr.w	r7, [r9]
 8018340:	4463      	add	r3, ip
 8018342:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018346:	fb0a c70b 	mla	r7, sl, fp, ip
 801834a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801834e:	b29b      	uxth	r3, r3
 8018350:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018354:	4572      	cmp	r2, lr
 8018356:	f849 3b04 	str.w	r3, [r9], #4
 801835a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801835e:	d8e2      	bhi.n	8018326 <__multiply+0xb2>
 8018360:	9b01      	ldr	r3, [sp, #4]
 8018362:	f845 c003 	str.w	ip, [r5, r3]
 8018366:	9b03      	ldr	r3, [sp, #12]
 8018368:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801836c:	3104      	adds	r1, #4
 801836e:	f1b9 0f00 	cmp.w	r9, #0
 8018372:	d021      	beq.n	80183b8 <__multiply+0x144>
 8018374:	682b      	ldr	r3, [r5, #0]
 8018376:	f104 0c14 	add.w	ip, r4, #20
 801837a:	46ae      	mov	lr, r5
 801837c:	f04f 0a00 	mov.w	sl, #0
 8018380:	f8bc b000 	ldrh.w	fp, [ip]
 8018384:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018388:	fb09 770b 	mla	r7, r9, fp, r7
 801838c:	4457      	add	r7, sl
 801838e:	b29b      	uxth	r3, r3
 8018390:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018394:	f84e 3b04 	str.w	r3, [lr], #4
 8018398:	f85c 3b04 	ldr.w	r3, [ip], #4
 801839c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80183a0:	f8be 3000 	ldrh.w	r3, [lr]
 80183a4:	fb09 330a 	mla	r3, r9, sl, r3
 80183a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80183ac:	4562      	cmp	r2, ip
 80183ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80183b2:	d8e5      	bhi.n	8018380 <__multiply+0x10c>
 80183b4:	9f01      	ldr	r7, [sp, #4]
 80183b6:	51eb      	str	r3, [r5, r7]
 80183b8:	3504      	adds	r5, #4
 80183ba:	e799      	b.n	80182f0 <__multiply+0x7c>
 80183bc:	3e01      	subs	r6, #1
 80183be:	e79b      	b.n	80182f8 <__multiply+0x84>
 80183c0:	0801ae09 	.word	0x0801ae09
 80183c4:	0801ae1a 	.word	0x0801ae1a

080183c8 <__pow5mult>:
 80183c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183cc:	4615      	mov	r5, r2
 80183ce:	f012 0203 	ands.w	r2, r2, #3
 80183d2:	4607      	mov	r7, r0
 80183d4:	460e      	mov	r6, r1
 80183d6:	d007      	beq.n	80183e8 <__pow5mult+0x20>
 80183d8:	4c25      	ldr	r4, [pc, #148]	@ (8018470 <__pow5mult+0xa8>)
 80183da:	3a01      	subs	r2, #1
 80183dc:	2300      	movs	r3, #0
 80183de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80183e2:	f7ff fe9f 	bl	8018124 <__multadd>
 80183e6:	4606      	mov	r6, r0
 80183e8:	10ad      	asrs	r5, r5, #2
 80183ea:	d03d      	beq.n	8018468 <__pow5mult+0xa0>
 80183ec:	69fc      	ldr	r4, [r7, #28]
 80183ee:	b97c      	cbnz	r4, 8018410 <__pow5mult+0x48>
 80183f0:	2010      	movs	r0, #16
 80183f2:	f7ff fd7f 	bl	8017ef4 <malloc>
 80183f6:	4602      	mov	r2, r0
 80183f8:	61f8      	str	r0, [r7, #28]
 80183fa:	b928      	cbnz	r0, 8018408 <__pow5mult+0x40>
 80183fc:	4b1d      	ldr	r3, [pc, #116]	@ (8018474 <__pow5mult+0xac>)
 80183fe:	481e      	ldr	r0, [pc, #120]	@ (8018478 <__pow5mult+0xb0>)
 8018400:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018404:	f000 fbdc 	bl	8018bc0 <__assert_func>
 8018408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801840c:	6004      	str	r4, [r0, #0]
 801840e:	60c4      	str	r4, [r0, #12]
 8018410:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018418:	b94c      	cbnz	r4, 801842e <__pow5mult+0x66>
 801841a:	f240 2171 	movw	r1, #625	@ 0x271
 801841e:	4638      	mov	r0, r7
 8018420:	f7ff ff12 	bl	8018248 <__i2b>
 8018424:	2300      	movs	r3, #0
 8018426:	f8c8 0008 	str.w	r0, [r8, #8]
 801842a:	4604      	mov	r4, r0
 801842c:	6003      	str	r3, [r0, #0]
 801842e:	f04f 0900 	mov.w	r9, #0
 8018432:	07eb      	lsls	r3, r5, #31
 8018434:	d50a      	bpl.n	801844c <__pow5mult+0x84>
 8018436:	4631      	mov	r1, r6
 8018438:	4622      	mov	r2, r4
 801843a:	4638      	mov	r0, r7
 801843c:	f7ff ff1a 	bl	8018274 <__multiply>
 8018440:	4631      	mov	r1, r6
 8018442:	4680      	mov	r8, r0
 8018444:	4638      	mov	r0, r7
 8018446:	f7ff fe4b 	bl	80180e0 <_Bfree>
 801844a:	4646      	mov	r6, r8
 801844c:	106d      	asrs	r5, r5, #1
 801844e:	d00b      	beq.n	8018468 <__pow5mult+0xa0>
 8018450:	6820      	ldr	r0, [r4, #0]
 8018452:	b938      	cbnz	r0, 8018464 <__pow5mult+0x9c>
 8018454:	4622      	mov	r2, r4
 8018456:	4621      	mov	r1, r4
 8018458:	4638      	mov	r0, r7
 801845a:	f7ff ff0b 	bl	8018274 <__multiply>
 801845e:	6020      	str	r0, [r4, #0]
 8018460:	f8c0 9000 	str.w	r9, [r0]
 8018464:	4604      	mov	r4, r0
 8018466:	e7e4      	b.n	8018432 <__pow5mult+0x6a>
 8018468:	4630      	mov	r0, r6
 801846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801846e:	bf00      	nop
 8018470:	0801ae74 	.word	0x0801ae74
 8018474:	0801ad9a 	.word	0x0801ad9a
 8018478:	0801ae1a 	.word	0x0801ae1a

0801847c <__lshift>:
 801847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018480:	460c      	mov	r4, r1
 8018482:	6849      	ldr	r1, [r1, #4]
 8018484:	6923      	ldr	r3, [r4, #16]
 8018486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801848a:	68a3      	ldr	r3, [r4, #8]
 801848c:	4607      	mov	r7, r0
 801848e:	4691      	mov	r9, r2
 8018490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018494:	f108 0601 	add.w	r6, r8, #1
 8018498:	42b3      	cmp	r3, r6
 801849a:	db0b      	blt.n	80184b4 <__lshift+0x38>
 801849c:	4638      	mov	r0, r7
 801849e:	f7ff fddf 	bl	8018060 <_Balloc>
 80184a2:	4605      	mov	r5, r0
 80184a4:	b948      	cbnz	r0, 80184ba <__lshift+0x3e>
 80184a6:	4602      	mov	r2, r0
 80184a8:	4b28      	ldr	r3, [pc, #160]	@ (801854c <__lshift+0xd0>)
 80184aa:	4829      	ldr	r0, [pc, #164]	@ (8018550 <__lshift+0xd4>)
 80184ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80184b0:	f000 fb86 	bl	8018bc0 <__assert_func>
 80184b4:	3101      	adds	r1, #1
 80184b6:	005b      	lsls	r3, r3, #1
 80184b8:	e7ee      	b.n	8018498 <__lshift+0x1c>
 80184ba:	2300      	movs	r3, #0
 80184bc:	f100 0114 	add.w	r1, r0, #20
 80184c0:	f100 0210 	add.w	r2, r0, #16
 80184c4:	4618      	mov	r0, r3
 80184c6:	4553      	cmp	r3, sl
 80184c8:	db33      	blt.n	8018532 <__lshift+0xb6>
 80184ca:	6920      	ldr	r0, [r4, #16]
 80184cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80184d0:	f104 0314 	add.w	r3, r4, #20
 80184d4:	f019 091f 	ands.w	r9, r9, #31
 80184d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80184dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80184e0:	d02b      	beq.n	801853a <__lshift+0xbe>
 80184e2:	f1c9 0e20 	rsb	lr, r9, #32
 80184e6:	468a      	mov	sl, r1
 80184e8:	2200      	movs	r2, #0
 80184ea:	6818      	ldr	r0, [r3, #0]
 80184ec:	fa00 f009 	lsl.w	r0, r0, r9
 80184f0:	4310      	orrs	r0, r2
 80184f2:	f84a 0b04 	str.w	r0, [sl], #4
 80184f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80184fa:	459c      	cmp	ip, r3
 80184fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8018500:	d8f3      	bhi.n	80184ea <__lshift+0x6e>
 8018502:	ebac 0304 	sub.w	r3, ip, r4
 8018506:	3b15      	subs	r3, #21
 8018508:	f023 0303 	bic.w	r3, r3, #3
 801850c:	3304      	adds	r3, #4
 801850e:	f104 0015 	add.w	r0, r4, #21
 8018512:	4584      	cmp	ip, r0
 8018514:	bf38      	it	cc
 8018516:	2304      	movcc	r3, #4
 8018518:	50ca      	str	r2, [r1, r3]
 801851a:	b10a      	cbz	r2, 8018520 <__lshift+0xa4>
 801851c:	f108 0602 	add.w	r6, r8, #2
 8018520:	3e01      	subs	r6, #1
 8018522:	4638      	mov	r0, r7
 8018524:	612e      	str	r6, [r5, #16]
 8018526:	4621      	mov	r1, r4
 8018528:	f7ff fdda 	bl	80180e0 <_Bfree>
 801852c:	4628      	mov	r0, r5
 801852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018532:	f842 0f04 	str.w	r0, [r2, #4]!
 8018536:	3301      	adds	r3, #1
 8018538:	e7c5      	b.n	80184c6 <__lshift+0x4a>
 801853a:	3904      	subs	r1, #4
 801853c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018540:	f841 2f04 	str.w	r2, [r1, #4]!
 8018544:	459c      	cmp	ip, r3
 8018546:	d8f9      	bhi.n	801853c <__lshift+0xc0>
 8018548:	e7ea      	b.n	8018520 <__lshift+0xa4>
 801854a:	bf00      	nop
 801854c:	0801ae09 	.word	0x0801ae09
 8018550:	0801ae1a 	.word	0x0801ae1a

08018554 <__mcmp>:
 8018554:	690a      	ldr	r2, [r1, #16]
 8018556:	4603      	mov	r3, r0
 8018558:	6900      	ldr	r0, [r0, #16]
 801855a:	1a80      	subs	r0, r0, r2
 801855c:	b530      	push	{r4, r5, lr}
 801855e:	d10e      	bne.n	801857e <__mcmp+0x2a>
 8018560:	3314      	adds	r3, #20
 8018562:	3114      	adds	r1, #20
 8018564:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018568:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801856c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018570:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018574:	4295      	cmp	r5, r2
 8018576:	d003      	beq.n	8018580 <__mcmp+0x2c>
 8018578:	d205      	bcs.n	8018586 <__mcmp+0x32>
 801857a:	f04f 30ff 	mov.w	r0, #4294967295
 801857e:	bd30      	pop	{r4, r5, pc}
 8018580:	42a3      	cmp	r3, r4
 8018582:	d3f3      	bcc.n	801856c <__mcmp+0x18>
 8018584:	e7fb      	b.n	801857e <__mcmp+0x2a>
 8018586:	2001      	movs	r0, #1
 8018588:	e7f9      	b.n	801857e <__mcmp+0x2a>
	...

0801858c <__mdiff>:
 801858c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018590:	4689      	mov	r9, r1
 8018592:	4606      	mov	r6, r0
 8018594:	4611      	mov	r1, r2
 8018596:	4648      	mov	r0, r9
 8018598:	4614      	mov	r4, r2
 801859a:	f7ff ffdb 	bl	8018554 <__mcmp>
 801859e:	1e05      	subs	r5, r0, #0
 80185a0:	d112      	bne.n	80185c8 <__mdiff+0x3c>
 80185a2:	4629      	mov	r1, r5
 80185a4:	4630      	mov	r0, r6
 80185a6:	f7ff fd5b 	bl	8018060 <_Balloc>
 80185aa:	4602      	mov	r2, r0
 80185ac:	b928      	cbnz	r0, 80185ba <__mdiff+0x2e>
 80185ae:	4b3f      	ldr	r3, [pc, #252]	@ (80186ac <__mdiff+0x120>)
 80185b0:	f240 2137 	movw	r1, #567	@ 0x237
 80185b4:	483e      	ldr	r0, [pc, #248]	@ (80186b0 <__mdiff+0x124>)
 80185b6:	f000 fb03 	bl	8018bc0 <__assert_func>
 80185ba:	2301      	movs	r3, #1
 80185bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80185c0:	4610      	mov	r0, r2
 80185c2:	b003      	add	sp, #12
 80185c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c8:	bfbc      	itt	lt
 80185ca:	464b      	movlt	r3, r9
 80185cc:	46a1      	movlt	r9, r4
 80185ce:	4630      	mov	r0, r6
 80185d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80185d4:	bfba      	itte	lt
 80185d6:	461c      	movlt	r4, r3
 80185d8:	2501      	movlt	r5, #1
 80185da:	2500      	movge	r5, #0
 80185dc:	f7ff fd40 	bl	8018060 <_Balloc>
 80185e0:	4602      	mov	r2, r0
 80185e2:	b918      	cbnz	r0, 80185ec <__mdiff+0x60>
 80185e4:	4b31      	ldr	r3, [pc, #196]	@ (80186ac <__mdiff+0x120>)
 80185e6:	f240 2145 	movw	r1, #581	@ 0x245
 80185ea:	e7e3      	b.n	80185b4 <__mdiff+0x28>
 80185ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80185f0:	6926      	ldr	r6, [r4, #16]
 80185f2:	60c5      	str	r5, [r0, #12]
 80185f4:	f109 0310 	add.w	r3, r9, #16
 80185f8:	f109 0514 	add.w	r5, r9, #20
 80185fc:	f104 0e14 	add.w	lr, r4, #20
 8018600:	f100 0b14 	add.w	fp, r0, #20
 8018604:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018608:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801860c:	9301      	str	r3, [sp, #4]
 801860e:	46d9      	mov	r9, fp
 8018610:	f04f 0c00 	mov.w	ip, #0
 8018614:	9b01      	ldr	r3, [sp, #4]
 8018616:	f85e 0b04 	ldr.w	r0, [lr], #4
 801861a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801861e:	9301      	str	r3, [sp, #4]
 8018620:	fa1f f38a 	uxth.w	r3, sl
 8018624:	4619      	mov	r1, r3
 8018626:	b283      	uxth	r3, r0
 8018628:	1acb      	subs	r3, r1, r3
 801862a:	0c00      	lsrs	r0, r0, #16
 801862c:	4463      	add	r3, ip
 801862e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018632:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018636:	b29b      	uxth	r3, r3
 8018638:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801863c:	4576      	cmp	r6, lr
 801863e:	f849 3b04 	str.w	r3, [r9], #4
 8018642:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018646:	d8e5      	bhi.n	8018614 <__mdiff+0x88>
 8018648:	1b33      	subs	r3, r6, r4
 801864a:	3b15      	subs	r3, #21
 801864c:	f023 0303 	bic.w	r3, r3, #3
 8018650:	3415      	adds	r4, #21
 8018652:	3304      	adds	r3, #4
 8018654:	42a6      	cmp	r6, r4
 8018656:	bf38      	it	cc
 8018658:	2304      	movcc	r3, #4
 801865a:	441d      	add	r5, r3
 801865c:	445b      	add	r3, fp
 801865e:	461e      	mov	r6, r3
 8018660:	462c      	mov	r4, r5
 8018662:	4544      	cmp	r4, r8
 8018664:	d30e      	bcc.n	8018684 <__mdiff+0xf8>
 8018666:	f108 0103 	add.w	r1, r8, #3
 801866a:	1b49      	subs	r1, r1, r5
 801866c:	f021 0103 	bic.w	r1, r1, #3
 8018670:	3d03      	subs	r5, #3
 8018672:	45a8      	cmp	r8, r5
 8018674:	bf38      	it	cc
 8018676:	2100      	movcc	r1, #0
 8018678:	440b      	add	r3, r1
 801867a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801867e:	b191      	cbz	r1, 80186a6 <__mdiff+0x11a>
 8018680:	6117      	str	r7, [r2, #16]
 8018682:	e79d      	b.n	80185c0 <__mdiff+0x34>
 8018684:	f854 1b04 	ldr.w	r1, [r4], #4
 8018688:	46e6      	mov	lr, ip
 801868a:	0c08      	lsrs	r0, r1, #16
 801868c:	fa1c fc81 	uxtah	ip, ip, r1
 8018690:	4471      	add	r1, lr
 8018692:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018696:	b289      	uxth	r1, r1
 8018698:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801869c:	f846 1b04 	str.w	r1, [r6], #4
 80186a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80186a4:	e7dd      	b.n	8018662 <__mdiff+0xd6>
 80186a6:	3f01      	subs	r7, #1
 80186a8:	e7e7      	b.n	801867a <__mdiff+0xee>
 80186aa:	bf00      	nop
 80186ac:	0801ae09 	.word	0x0801ae09
 80186b0:	0801ae1a 	.word	0x0801ae1a

080186b4 <__d2b>:
 80186b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186b8:	460f      	mov	r7, r1
 80186ba:	2101      	movs	r1, #1
 80186bc:	ec59 8b10 	vmov	r8, r9, d0
 80186c0:	4616      	mov	r6, r2
 80186c2:	f7ff fccd 	bl	8018060 <_Balloc>
 80186c6:	4604      	mov	r4, r0
 80186c8:	b930      	cbnz	r0, 80186d8 <__d2b+0x24>
 80186ca:	4602      	mov	r2, r0
 80186cc:	4b23      	ldr	r3, [pc, #140]	@ (801875c <__d2b+0xa8>)
 80186ce:	4824      	ldr	r0, [pc, #144]	@ (8018760 <__d2b+0xac>)
 80186d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80186d4:	f000 fa74 	bl	8018bc0 <__assert_func>
 80186d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80186e0:	b10d      	cbz	r5, 80186e6 <__d2b+0x32>
 80186e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80186e6:	9301      	str	r3, [sp, #4]
 80186e8:	f1b8 0300 	subs.w	r3, r8, #0
 80186ec:	d023      	beq.n	8018736 <__d2b+0x82>
 80186ee:	4668      	mov	r0, sp
 80186f0:	9300      	str	r3, [sp, #0]
 80186f2:	f7ff fd7c 	bl	80181ee <__lo0bits>
 80186f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80186fa:	b1d0      	cbz	r0, 8018732 <__d2b+0x7e>
 80186fc:	f1c0 0320 	rsb	r3, r0, #32
 8018700:	fa02 f303 	lsl.w	r3, r2, r3
 8018704:	430b      	orrs	r3, r1
 8018706:	40c2      	lsrs	r2, r0
 8018708:	6163      	str	r3, [r4, #20]
 801870a:	9201      	str	r2, [sp, #4]
 801870c:	9b01      	ldr	r3, [sp, #4]
 801870e:	61a3      	str	r3, [r4, #24]
 8018710:	2b00      	cmp	r3, #0
 8018712:	bf0c      	ite	eq
 8018714:	2201      	moveq	r2, #1
 8018716:	2202      	movne	r2, #2
 8018718:	6122      	str	r2, [r4, #16]
 801871a:	b1a5      	cbz	r5, 8018746 <__d2b+0x92>
 801871c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018720:	4405      	add	r5, r0
 8018722:	603d      	str	r5, [r7, #0]
 8018724:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018728:	6030      	str	r0, [r6, #0]
 801872a:	4620      	mov	r0, r4
 801872c:	b003      	add	sp, #12
 801872e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018732:	6161      	str	r1, [r4, #20]
 8018734:	e7ea      	b.n	801870c <__d2b+0x58>
 8018736:	a801      	add	r0, sp, #4
 8018738:	f7ff fd59 	bl	80181ee <__lo0bits>
 801873c:	9b01      	ldr	r3, [sp, #4]
 801873e:	6163      	str	r3, [r4, #20]
 8018740:	3020      	adds	r0, #32
 8018742:	2201      	movs	r2, #1
 8018744:	e7e8      	b.n	8018718 <__d2b+0x64>
 8018746:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801874a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801874e:	6038      	str	r0, [r7, #0]
 8018750:	6918      	ldr	r0, [r3, #16]
 8018752:	f7ff fd2d 	bl	80181b0 <__hi0bits>
 8018756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801875a:	e7e5      	b.n	8018728 <__d2b+0x74>
 801875c:	0801ae09 	.word	0x0801ae09
 8018760:	0801ae1a 	.word	0x0801ae1a

08018764 <__ssputs_r>:
 8018764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018768:	688e      	ldr	r6, [r1, #8]
 801876a:	461f      	mov	r7, r3
 801876c:	42be      	cmp	r6, r7
 801876e:	680b      	ldr	r3, [r1, #0]
 8018770:	4682      	mov	sl, r0
 8018772:	460c      	mov	r4, r1
 8018774:	4690      	mov	r8, r2
 8018776:	d82d      	bhi.n	80187d4 <__ssputs_r+0x70>
 8018778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801877c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018780:	d026      	beq.n	80187d0 <__ssputs_r+0x6c>
 8018782:	6965      	ldr	r5, [r4, #20]
 8018784:	6909      	ldr	r1, [r1, #16]
 8018786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801878a:	eba3 0901 	sub.w	r9, r3, r1
 801878e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018792:	1c7b      	adds	r3, r7, #1
 8018794:	444b      	add	r3, r9
 8018796:	106d      	asrs	r5, r5, #1
 8018798:	429d      	cmp	r5, r3
 801879a:	bf38      	it	cc
 801879c:	461d      	movcc	r5, r3
 801879e:	0553      	lsls	r3, r2, #21
 80187a0:	d527      	bpl.n	80187f2 <__ssputs_r+0x8e>
 80187a2:	4629      	mov	r1, r5
 80187a4:	f7ff fbd0 	bl	8017f48 <_malloc_r>
 80187a8:	4606      	mov	r6, r0
 80187aa:	b360      	cbz	r0, 8018806 <__ssputs_r+0xa2>
 80187ac:	6921      	ldr	r1, [r4, #16]
 80187ae:	464a      	mov	r2, r9
 80187b0:	f7fe fcfb 	bl	80171aa <memcpy>
 80187b4:	89a3      	ldrh	r3, [r4, #12]
 80187b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80187ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80187be:	81a3      	strh	r3, [r4, #12]
 80187c0:	6126      	str	r6, [r4, #16]
 80187c2:	6165      	str	r5, [r4, #20]
 80187c4:	444e      	add	r6, r9
 80187c6:	eba5 0509 	sub.w	r5, r5, r9
 80187ca:	6026      	str	r6, [r4, #0]
 80187cc:	60a5      	str	r5, [r4, #8]
 80187ce:	463e      	mov	r6, r7
 80187d0:	42be      	cmp	r6, r7
 80187d2:	d900      	bls.n	80187d6 <__ssputs_r+0x72>
 80187d4:	463e      	mov	r6, r7
 80187d6:	6820      	ldr	r0, [r4, #0]
 80187d8:	4632      	mov	r2, r6
 80187da:	4641      	mov	r1, r8
 80187dc:	f000 f9c6 	bl	8018b6c <memmove>
 80187e0:	68a3      	ldr	r3, [r4, #8]
 80187e2:	1b9b      	subs	r3, r3, r6
 80187e4:	60a3      	str	r3, [r4, #8]
 80187e6:	6823      	ldr	r3, [r4, #0]
 80187e8:	4433      	add	r3, r6
 80187ea:	6023      	str	r3, [r4, #0]
 80187ec:	2000      	movs	r0, #0
 80187ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187f2:	462a      	mov	r2, r5
 80187f4:	f000 fa28 	bl	8018c48 <_realloc_r>
 80187f8:	4606      	mov	r6, r0
 80187fa:	2800      	cmp	r0, #0
 80187fc:	d1e0      	bne.n	80187c0 <__ssputs_r+0x5c>
 80187fe:	6921      	ldr	r1, [r4, #16]
 8018800:	4650      	mov	r0, sl
 8018802:	f7ff fb2d 	bl	8017e60 <_free_r>
 8018806:	230c      	movs	r3, #12
 8018808:	f8ca 3000 	str.w	r3, [sl]
 801880c:	89a3      	ldrh	r3, [r4, #12]
 801880e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018812:	81a3      	strh	r3, [r4, #12]
 8018814:	f04f 30ff 	mov.w	r0, #4294967295
 8018818:	e7e9      	b.n	80187ee <__ssputs_r+0x8a>
	...

0801881c <_svfiprintf_r>:
 801881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018820:	4698      	mov	r8, r3
 8018822:	898b      	ldrh	r3, [r1, #12]
 8018824:	061b      	lsls	r3, r3, #24
 8018826:	b09d      	sub	sp, #116	@ 0x74
 8018828:	4607      	mov	r7, r0
 801882a:	460d      	mov	r5, r1
 801882c:	4614      	mov	r4, r2
 801882e:	d510      	bpl.n	8018852 <_svfiprintf_r+0x36>
 8018830:	690b      	ldr	r3, [r1, #16]
 8018832:	b973      	cbnz	r3, 8018852 <_svfiprintf_r+0x36>
 8018834:	2140      	movs	r1, #64	@ 0x40
 8018836:	f7ff fb87 	bl	8017f48 <_malloc_r>
 801883a:	6028      	str	r0, [r5, #0]
 801883c:	6128      	str	r0, [r5, #16]
 801883e:	b930      	cbnz	r0, 801884e <_svfiprintf_r+0x32>
 8018840:	230c      	movs	r3, #12
 8018842:	603b      	str	r3, [r7, #0]
 8018844:	f04f 30ff 	mov.w	r0, #4294967295
 8018848:	b01d      	add	sp, #116	@ 0x74
 801884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801884e:	2340      	movs	r3, #64	@ 0x40
 8018850:	616b      	str	r3, [r5, #20]
 8018852:	2300      	movs	r3, #0
 8018854:	9309      	str	r3, [sp, #36]	@ 0x24
 8018856:	2320      	movs	r3, #32
 8018858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801885c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018860:	2330      	movs	r3, #48	@ 0x30
 8018862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018a00 <_svfiprintf_r+0x1e4>
 8018866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801886a:	f04f 0901 	mov.w	r9, #1
 801886e:	4623      	mov	r3, r4
 8018870:	469a      	mov	sl, r3
 8018872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018876:	b10a      	cbz	r2, 801887c <_svfiprintf_r+0x60>
 8018878:	2a25      	cmp	r2, #37	@ 0x25
 801887a:	d1f9      	bne.n	8018870 <_svfiprintf_r+0x54>
 801887c:	ebba 0b04 	subs.w	fp, sl, r4
 8018880:	d00b      	beq.n	801889a <_svfiprintf_r+0x7e>
 8018882:	465b      	mov	r3, fp
 8018884:	4622      	mov	r2, r4
 8018886:	4629      	mov	r1, r5
 8018888:	4638      	mov	r0, r7
 801888a:	f7ff ff6b 	bl	8018764 <__ssputs_r>
 801888e:	3001      	adds	r0, #1
 8018890:	f000 80a7 	beq.w	80189e2 <_svfiprintf_r+0x1c6>
 8018894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018896:	445a      	add	r2, fp
 8018898:	9209      	str	r2, [sp, #36]	@ 0x24
 801889a:	f89a 3000 	ldrb.w	r3, [sl]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	f000 809f 	beq.w	80189e2 <_svfiprintf_r+0x1c6>
 80188a4:	2300      	movs	r3, #0
 80188a6:	f04f 32ff 	mov.w	r2, #4294967295
 80188aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188ae:	f10a 0a01 	add.w	sl, sl, #1
 80188b2:	9304      	str	r3, [sp, #16]
 80188b4:	9307      	str	r3, [sp, #28]
 80188b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80188ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80188bc:	4654      	mov	r4, sl
 80188be:	2205      	movs	r2, #5
 80188c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188c4:	484e      	ldr	r0, [pc, #312]	@ (8018a00 <_svfiprintf_r+0x1e4>)
 80188c6:	f7e7 fca3 	bl	8000210 <memchr>
 80188ca:	9a04      	ldr	r2, [sp, #16]
 80188cc:	b9d8      	cbnz	r0, 8018906 <_svfiprintf_r+0xea>
 80188ce:	06d0      	lsls	r0, r2, #27
 80188d0:	bf44      	itt	mi
 80188d2:	2320      	movmi	r3, #32
 80188d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80188d8:	0711      	lsls	r1, r2, #28
 80188da:	bf44      	itt	mi
 80188dc:	232b      	movmi	r3, #43	@ 0x2b
 80188de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80188e2:	f89a 3000 	ldrb.w	r3, [sl]
 80188e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80188e8:	d015      	beq.n	8018916 <_svfiprintf_r+0xfa>
 80188ea:	9a07      	ldr	r2, [sp, #28]
 80188ec:	4654      	mov	r4, sl
 80188ee:	2000      	movs	r0, #0
 80188f0:	f04f 0c0a 	mov.w	ip, #10
 80188f4:	4621      	mov	r1, r4
 80188f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188fa:	3b30      	subs	r3, #48	@ 0x30
 80188fc:	2b09      	cmp	r3, #9
 80188fe:	d94b      	bls.n	8018998 <_svfiprintf_r+0x17c>
 8018900:	b1b0      	cbz	r0, 8018930 <_svfiprintf_r+0x114>
 8018902:	9207      	str	r2, [sp, #28]
 8018904:	e014      	b.n	8018930 <_svfiprintf_r+0x114>
 8018906:	eba0 0308 	sub.w	r3, r0, r8
 801890a:	fa09 f303 	lsl.w	r3, r9, r3
 801890e:	4313      	orrs	r3, r2
 8018910:	9304      	str	r3, [sp, #16]
 8018912:	46a2      	mov	sl, r4
 8018914:	e7d2      	b.n	80188bc <_svfiprintf_r+0xa0>
 8018916:	9b03      	ldr	r3, [sp, #12]
 8018918:	1d19      	adds	r1, r3, #4
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	9103      	str	r1, [sp, #12]
 801891e:	2b00      	cmp	r3, #0
 8018920:	bfbb      	ittet	lt
 8018922:	425b      	neglt	r3, r3
 8018924:	f042 0202 	orrlt.w	r2, r2, #2
 8018928:	9307      	strge	r3, [sp, #28]
 801892a:	9307      	strlt	r3, [sp, #28]
 801892c:	bfb8      	it	lt
 801892e:	9204      	strlt	r2, [sp, #16]
 8018930:	7823      	ldrb	r3, [r4, #0]
 8018932:	2b2e      	cmp	r3, #46	@ 0x2e
 8018934:	d10a      	bne.n	801894c <_svfiprintf_r+0x130>
 8018936:	7863      	ldrb	r3, [r4, #1]
 8018938:	2b2a      	cmp	r3, #42	@ 0x2a
 801893a:	d132      	bne.n	80189a2 <_svfiprintf_r+0x186>
 801893c:	9b03      	ldr	r3, [sp, #12]
 801893e:	1d1a      	adds	r2, r3, #4
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	9203      	str	r2, [sp, #12]
 8018944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018948:	3402      	adds	r4, #2
 801894a:	9305      	str	r3, [sp, #20]
 801894c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018a10 <_svfiprintf_r+0x1f4>
 8018950:	7821      	ldrb	r1, [r4, #0]
 8018952:	2203      	movs	r2, #3
 8018954:	4650      	mov	r0, sl
 8018956:	f7e7 fc5b 	bl	8000210 <memchr>
 801895a:	b138      	cbz	r0, 801896c <_svfiprintf_r+0x150>
 801895c:	9b04      	ldr	r3, [sp, #16]
 801895e:	eba0 000a 	sub.w	r0, r0, sl
 8018962:	2240      	movs	r2, #64	@ 0x40
 8018964:	4082      	lsls	r2, r0
 8018966:	4313      	orrs	r3, r2
 8018968:	3401      	adds	r4, #1
 801896a:	9304      	str	r3, [sp, #16]
 801896c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018970:	4824      	ldr	r0, [pc, #144]	@ (8018a04 <_svfiprintf_r+0x1e8>)
 8018972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018976:	2206      	movs	r2, #6
 8018978:	f7e7 fc4a 	bl	8000210 <memchr>
 801897c:	2800      	cmp	r0, #0
 801897e:	d036      	beq.n	80189ee <_svfiprintf_r+0x1d2>
 8018980:	4b21      	ldr	r3, [pc, #132]	@ (8018a08 <_svfiprintf_r+0x1ec>)
 8018982:	bb1b      	cbnz	r3, 80189cc <_svfiprintf_r+0x1b0>
 8018984:	9b03      	ldr	r3, [sp, #12]
 8018986:	3307      	adds	r3, #7
 8018988:	f023 0307 	bic.w	r3, r3, #7
 801898c:	3308      	adds	r3, #8
 801898e:	9303      	str	r3, [sp, #12]
 8018990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018992:	4433      	add	r3, r6
 8018994:	9309      	str	r3, [sp, #36]	@ 0x24
 8018996:	e76a      	b.n	801886e <_svfiprintf_r+0x52>
 8018998:	fb0c 3202 	mla	r2, ip, r2, r3
 801899c:	460c      	mov	r4, r1
 801899e:	2001      	movs	r0, #1
 80189a0:	e7a8      	b.n	80188f4 <_svfiprintf_r+0xd8>
 80189a2:	2300      	movs	r3, #0
 80189a4:	3401      	adds	r4, #1
 80189a6:	9305      	str	r3, [sp, #20]
 80189a8:	4619      	mov	r1, r3
 80189aa:	f04f 0c0a 	mov.w	ip, #10
 80189ae:	4620      	mov	r0, r4
 80189b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189b4:	3a30      	subs	r2, #48	@ 0x30
 80189b6:	2a09      	cmp	r2, #9
 80189b8:	d903      	bls.n	80189c2 <_svfiprintf_r+0x1a6>
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d0c6      	beq.n	801894c <_svfiprintf_r+0x130>
 80189be:	9105      	str	r1, [sp, #20]
 80189c0:	e7c4      	b.n	801894c <_svfiprintf_r+0x130>
 80189c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80189c6:	4604      	mov	r4, r0
 80189c8:	2301      	movs	r3, #1
 80189ca:	e7f0      	b.n	80189ae <_svfiprintf_r+0x192>
 80189cc:	ab03      	add	r3, sp, #12
 80189ce:	9300      	str	r3, [sp, #0]
 80189d0:	462a      	mov	r2, r5
 80189d2:	4b0e      	ldr	r3, [pc, #56]	@ (8018a0c <_svfiprintf_r+0x1f0>)
 80189d4:	a904      	add	r1, sp, #16
 80189d6:	4638      	mov	r0, r7
 80189d8:	f7fd fe52 	bl	8016680 <_printf_float>
 80189dc:	1c42      	adds	r2, r0, #1
 80189de:	4606      	mov	r6, r0
 80189e0:	d1d6      	bne.n	8018990 <_svfiprintf_r+0x174>
 80189e2:	89ab      	ldrh	r3, [r5, #12]
 80189e4:	065b      	lsls	r3, r3, #25
 80189e6:	f53f af2d 	bmi.w	8018844 <_svfiprintf_r+0x28>
 80189ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80189ec:	e72c      	b.n	8018848 <_svfiprintf_r+0x2c>
 80189ee:	ab03      	add	r3, sp, #12
 80189f0:	9300      	str	r3, [sp, #0]
 80189f2:	462a      	mov	r2, r5
 80189f4:	4b05      	ldr	r3, [pc, #20]	@ (8018a0c <_svfiprintf_r+0x1f0>)
 80189f6:	a904      	add	r1, sp, #16
 80189f8:	4638      	mov	r0, r7
 80189fa:	f7fe f8d9 	bl	8016bb0 <_printf_i>
 80189fe:	e7ed      	b.n	80189dc <_svfiprintf_r+0x1c0>
 8018a00:	0801af70 	.word	0x0801af70
 8018a04:	0801af7a 	.word	0x0801af7a
 8018a08:	08016681 	.word	0x08016681
 8018a0c:	08018765 	.word	0x08018765
 8018a10:	0801af76 	.word	0x0801af76

08018a14 <__sflush_r>:
 8018a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1c:	0716      	lsls	r6, r2, #28
 8018a1e:	4605      	mov	r5, r0
 8018a20:	460c      	mov	r4, r1
 8018a22:	d454      	bmi.n	8018ace <__sflush_r+0xba>
 8018a24:	684b      	ldr	r3, [r1, #4]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	dc02      	bgt.n	8018a30 <__sflush_r+0x1c>
 8018a2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	dd48      	ble.n	8018ac2 <__sflush_r+0xae>
 8018a30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018a32:	2e00      	cmp	r6, #0
 8018a34:	d045      	beq.n	8018ac2 <__sflush_r+0xae>
 8018a36:	2300      	movs	r3, #0
 8018a38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018a3c:	682f      	ldr	r7, [r5, #0]
 8018a3e:	6a21      	ldr	r1, [r4, #32]
 8018a40:	602b      	str	r3, [r5, #0]
 8018a42:	d030      	beq.n	8018aa6 <__sflush_r+0x92>
 8018a44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018a46:	89a3      	ldrh	r3, [r4, #12]
 8018a48:	0759      	lsls	r1, r3, #29
 8018a4a:	d505      	bpl.n	8018a58 <__sflush_r+0x44>
 8018a4c:	6863      	ldr	r3, [r4, #4]
 8018a4e:	1ad2      	subs	r2, r2, r3
 8018a50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018a52:	b10b      	cbz	r3, 8018a58 <__sflush_r+0x44>
 8018a54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018a56:	1ad2      	subs	r2, r2, r3
 8018a58:	2300      	movs	r3, #0
 8018a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018a5c:	6a21      	ldr	r1, [r4, #32]
 8018a5e:	4628      	mov	r0, r5
 8018a60:	47b0      	blx	r6
 8018a62:	1c43      	adds	r3, r0, #1
 8018a64:	89a3      	ldrh	r3, [r4, #12]
 8018a66:	d106      	bne.n	8018a76 <__sflush_r+0x62>
 8018a68:	6829      	ldr	r1, [r5, #0]
 8018a6a:	291d      	cmp	r1, #29
 8018a6c:	d82b      	bhi.n	8018ac6 <__sflush_r+0xb2>
 8018a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8018b18 <__sflush_r+0x104>)
 8018a70:	410a      	asrs	r2, r1
 8018a72:	07d6      	lsls	r6, r2, #31
 8018a74:	d427      	bmi.n	8018ac6 <__sflush_r+0xb2>
 8018a76:	2200      	movs	r2, #0
 8018a78:	6062      	str	r2, [r4, #4]
 8018a7a:	04d9      	lsls	r1, r3, #19
 8018a7c:	6922      	ldr	r2, [r4, #16]
 8018a7e:	6022      	str	r2, [r4, #0]
 8018a80:	d504      	bpl.n	8018a8c <__sflush_r+0x78>
 8018a82:	1c42      	adds	r2, r0, #1
 8018a84:	d101      	bne.n	8018a8a <__sflush_r+0x76>
 8018a86:	682b      	ldr	r3, [r5, #0]
 8018a88:	b903      	cbnz	r3, 8018a8c <__sflush_r+0x78>
 8018a8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8018a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a8e:	602f      	str	r7, [r5, #0]
 8018a90:	b1b9      	cbz	r1, 8018ac2 <__sflush_r+0xae>
 8018a92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018a96:	4299      	cmp	r1, r3
 8018a98:	d002      	beq.n	8018aa0 <__sflush_r+0x8c>
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	f7ff f9e0 	bl	8017e60 <_free_r>
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8018aa4:	e00d      	b.n	8018ac2 <__sflush_r+0xae>
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	4628      	mov	r0, r5
 8018aaa:	47b0      	blx	r6
 8018aac:	4602      	mov	r2, r0
 8018aae:	1c50      	adds	r0, r2, #1
 8018ab0:	d1c9      	bne.n	8018a46 <__sflush_r+0x32>
 8018ab2:	682b      	ldr	r3, [r5, #0]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d0c6      	beq.n	8018a46 <__sflush_r+0x32>
 8018ab8:	2b1d      	cmp	r3, #29
 8018aba:	d001      	beq.n	8018ac0 <__sflush_r+0xac>
 8018abc:	2b16      	cmp	r3, #22
 8018abe:	d11e      	bne.n	8018afe <__sflush_r+0xea>
 8018ac0:	602f      	str	r7, [r5, #0]
 8018ac2:	2000      	movs	r0, #0
 8018ac4:	e022      	b.n	8018b0c <__sflush_r+0xf8>
 8018ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018aca:	b21b      	sxth	r3, r3
 8018acc:	e01b      	b.n	8018b06 <__sflush_r+0xf2>
 8018ace:	690f      	ldr	r7, [r1, #16]
 8018ad0:	2f00      	cmp	r7, #0
 8018ad2:	d0f6      	beq.n	8018ac2 <__sflush_r+0xae>
 8018ad4:	0793      	lsls	r3, r2, #30
 8018ad6:	680e      	ldr	r6, [r1, #0]
 8018ad8:	bf08      	it	eq
 8018ada:	694b      	ldreq	r3, [r1, #20]
 8018adc:	600f      	str	r7, [r1, #0]
 8018ade:	bf18      	it	ne
 8018ae0:	2300      	movne	r3, #0
 8018ae2:	eba6 0807 	sub.w	r8, r6, r7
 8018ae6:	608b      	str	r3, [r1, #8]
 8018ae8:	f1b8 0f00 	cmp.w	r8, #0
 8018aec:	dde9      	ble.n	8018ac2 <__sflush_r+0xae>
 8018aee:	6a21      	ldr	r1, [r4, #32]
 8018af0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018af2:	4643      	mov	r3, r8
 8018af4:	463a      	mov	r2, r7
 8018af6:	4628      	mov	r0, r5
 8018af8:	47b0      	blx	r6
 8018afa:	2800      	cmp	r0, #0
 8018afc:	dc08      	bgt.n	8018b10 <__sflush_r+0xfc>
 8018afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b06:	81a3      	strh	r3, [r4, #12]
 8018b08:	f04f 30ff 	mov.w	r0, #4294967295
 8018b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b10:	4407      	add	r7, r0
 8018b12:	eba8 0800 	sub.w	r8, r8, r0
 8018b16:	e7e7      	b.n	8018ae8 <__sflush_r+0xd4>
 8018b18:	dfbffffe 	.word	0xdfbffffe

08018b1c <_fflush_r>:
 8018b1c:	b538      	push	{r3, r4, r5, lr}
 8018b1e:	690b      	ldr	r3, [r1, #16]
 8018b20:	4605      	mov	r5, r0
 8018b22:	460c      	mov	r4, r1
 8018b24:	b913      	cbnz	r3, 8018b2c <_fflush_r+0x10>
 8018b26:	2500      	movs	r5, #0
 8018b28:	4628      	mov	r0, r5
 8018b2a:	bd38      	pop	{r3, r4, r5, pc}
 8018b2c:	b118      	cbz	r0, 8018b36 <_fflush_r+0x1a>
 8018b2e:	6a03      	ldr	r3, [r0, #32]
 8018b30:	b90b      	cbnz	r3, 8018b36 <_fflush_r+0x1a>
 8018b32:	f7fe f9e9 	bl	8016f08 <__sinit>
 8018b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d0f3      	beq.n	8018b26 <_fflush_r+0xa>
 8018b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018b40:	07d0      	lsls	r0, r2, #31
 8018b42:	d404      	bmi.n	8018b4e <_fflush_r+0x32>
 8018b44:	0599      	lsls	r1, r3, #22
 8018b46:	d402      	bmi.n	8018b4e <_fflush_r+0x32>
 8018b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b4a:	f7fe fb24 	bl	8017196 <__retarget_lock_acquire_recursive>
 8018b4e:	4628      	mov	r0, r5
 8018b50:	4621      	mov	r1, r4
 8018b52:	f7ff ff5f 	bl	8018a14 <__sflush_r>
 8018b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018b58:	07da      	lsls	r2, r3, #31
 8018b5a:	4605      	mov	r5, r0
 8018b5c:	d4e4      	bmi.n	8018b28 <_fflush_r+0xc>
 8018b5e:	89a3      	ldrh	r3, [r4, #12]
 8018b60:	059b      	lsls	r3, r3, #22
 8018b62:	d4e1      	bmi.n	8018b28 <_fflush_r+0xc>
 8018b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b66:	f7fe fb17 	bl	8017198 <__retarget_lock_release_recursive>
 8018b6a:	e7dd      	b.n	8018b28 <_fflush_r+0xc>

08018b6c <memmove>:
 8018b6c:	4288      	cmp	r0, r1
 8018b6e:	b510      	push	{r4, lr}
 8018b70:	eb01 0402 	add.w	r4, r1, r2
 8018b74:	d902      	bls.n	8018b7c <memmove+0x10>
 8018b76:	4284      	cmp	r4, r0
 8018b78:	4623      	mov	r3, r4
 8018b7a:	d807      	bhi.n	8018b8c <memmove+0x20>
 8018b7c:	1e43      	subs	r3, r0, #1
 8018b7e:	42a1      	cmp	r1, r4
 8018b80:	d008      	beq.n	8018b94 <memmove+0x28>
 8018b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018b8a:	e7f8      	b.n	8018b7e <memmove+0x12>
 8018b8c:	4402      	add	r2, r0
 8018b8e:	4601      	mov	r1, r0
 8018b90:	428a      	cmp	r2, r1
 8018b92:	d100      	bne.n	8018b96 <memmove+0x2a>
 8018b94:	bd10      	pop	{r4, pc}
 8018b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018b9e:	e7f7      	b.n	8018b90 <memmove+0x24>

08018ba0 <_sbrk_r>:
 8018ba0:	b538      	push	{r3, r4, r5, lr}
 8018ba2:	4d06      	ldr	r5, [pc, #24]	@ (8018bbc <_sbrk_r+0x1c>)
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	4608      	mov	r0, r1
 8018baa:	602b      	str	r3, [r5, #0]
 8018bac:	f7e8 fc64 	bl	8001478 <_sbrk>
 8018bb0:	1c43      	adds	r3, r0, #1
 8018bb2:	d102      	bne.n	8018bba <_sbrk_r+0x1a>
 8018bb4:	682b      	ldr	r3, [r5, #0]
 8018bb6:	b103      	cbz	r3, 8018bba <_sbrk_r+0x1a>
 8018bb8:	6023      	str	r3, [r4, #0]
 8018bba:	bd38      	pop	{r3, r4, r5, pc}
 8018bbc:	20009544 	.word	0x20009544

08018bc0 <__assert_func>:
 8018bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018bc2:	4614      	mov	r4, r2
 8018bc4:	461a      	mov	r2, r3
 8018bc6:	4b09      	ldr	r3, [pc, #36]	@ (8018bec <__assert_func+0x2c>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	4605      	mov	r5, r0
 8018bcc:	68d8      	ldr	r0, [r3, #12]
 8018bce:	b954      	cbnz	r4, 8018be6 <__assert_func+0x26>
 8018bd0:	4b07      	ldr	r3, [pc, #28]	@ (8018bf0 <__assert_func+0x30>)
 8018bd2:	461c      	mov	r4, r3
 8018bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018bd8:	9100      	str	r1, [sp, #0]
 8018bda:	462b      	mov	r3, r5
 8018bdc:	4905      	ldr	r1, [pc, #20]	@ (8018bf4 <__assert_func+0x34>)
 8018bde:	f000 f86f 	bl	8018cc0 <fiprintf>
 8018be2:	f000 f87f 	bl	8018ce4 <abort>
 8018be6:	4b04      	ldr	r3, [pc, #16]	@ (8018bf8 <__assert_func+0x38>)
 8018be8:	e7f4      	b.n	8018bd4 <__assert_func+0x14>
 8018bea:	bf00      	nop
 8018bec:	20001204 	.word	0x20001204
 8018bf0:	0801afc6 	.word	0x0801afc6
 8018bf4:	0801af98 	.word	0x0801af98
 8018bf8:	0801af8b 	.word	0x0801af8b

08018bfc <_calloc_r>:
 8018bfc:	b570      	push	{r4, r5, r6, lr}
 8018bfe:	fba1 5402 	umull	r5, r4, r1, r2
 8018c02:	b93c      	cbnz	r4, 8018c14 <_calloc_r+0x18>
 8018c04:	4629      	mov	r1, r5
 8018c06:	f7ff f99f 	bl	8017f48 <_malloc_r>
 8018c0a:	4606      	mov	r6, r0
 8018c0c:	b928      	cbnz	r0, 8018c1a <_calloc_r+0x1e>
 8018c0e:	2600      	movs	r6, #0
 8018c10:	4630      	mov	r0, r6
 8018c12:	bd70      	pop	{r4, r5, r6, pc}
 8018c14:	220c      	movs	r2, #12
 8018c16:	6002      	str	r2, [r0, #0]
 8018c18:	e7f9      	b.n	8018c0e <_calloc_r+0x12>
 8018c1a:	462a      	mov	r2, r5
 8018c1c:	4621      	mov	r1, r4
 8018c1e:	f7fe fa2d 	bl	801707c <memset>
 8018c22:	e7f5      	b.n	8018c10 <_calloc_r+0x14>

08018c24 <__ascii_mbtowc>:
 8018c24:	b082      	sub	sp, #8
 8018c26:	b901      	cbnz	r1, 8018c2a <__ascii_mbtowc+0x6>
 8018c28:	a901      	add	r1, sp, #4
 8018c2a:	b142      	cbz	r2, 8018c3e <__ascii_mbtowc+0x1a>
 8018c2c:	b14b      	cbz	r3, 8018c42 <__ascii_mbtowc+0x1e>
 8018c2e:	7813      	ldrb	r3, [r2, #0]
 8018c30:	600b      	str	r3, [r1, #0]
 8018c32:	7812      	ldrb	r2, [r2, #0]
 8018c34:	1e10      	subs	r0, r2, #0
 8018c36:	bf18      	it	ne
 8018c38:	2001      	movne	r0, #1
 8018c3a:	b002      	add	sp, #8
 8018c3c:	4770      	bx	lr
 8018c3e:	4610      	mov	r0, r2
 8018c40:	e7fb      	b.n	8018c3a <__ascii_mbtowc+0x16>
 8018c42:	f06f 0001 	mvn.w	r0, #1
 8018c46:	e7f8      	b.n	8018c3a <__ascii_mbtowc+0x16>

08018c48 <_realloc_r>:
 8018c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c4c:	4680      	mov	r8, r0
 8018c4e:	4615      	mov	r5, r2
 8018c50:	460c      	mov	r4, r1
 8018c52:	b921      	cbnz	r1, 8018c5e <_realloc_r+0x16>
 8018c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c58:	4611      	mov	r1, r2
 8018c5a:	f7ff b975 	b.w	8017f48 <_malloc_r>
 8018c5e:	b92a      	cbnz	r2, 8018c6c <_realloc_r+0x24>
 8018c60:	f7ff f8fe 	bl	8017e60 <_free_r>
 8018c64:	2400      	movs	r4, #0
 8018c66:	4620      	mov	r0, r4
 8018c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c6c:	f000 f841 	bl	8018cf2 <_malloc_usable_size_r>
 8018c70:	4285      	cmp	r5, r0
 8018c72:	4606      	mov	r6, r0
 8018c74:	d802      	bhi.n	8018c7c <_realloc_r+0x34>
 8018c76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018c7a:	d8f4      	bhi.n	8018c66 <_realloc_r+0x1e>
 8018c7c:	4629      	mov	r1, r5
 8018c7e:	4640      	mov	r0, r8
 8018c80:	f7ff f962 	bl	8017f48 <_malloc_r>
 8018c84:	4607      	mov	r7, r0
 8018c86:	2800      	cmp	r0, #0
 8018c88:	d0ec      	beq.n	8018c64 <_realloc_r+0x1c>
 8018c8a:	42b5      	cmp	r5, r6
 8018c8c:	462a      	mov	r2, r5
 8018c8e:	4621      	mov	r1, r4
 8018c90:	bf28      	it	cs
 8018c92:	4632      	movcs	r2, r6
 8018c94:	f7fe fa89 	bl	80171aa <memcpy>
 8018c98:	4621      	mov	r1, r4
 8018c9a:	4640      	mov	r0, r8
 8018c9c:	f7ff f8e0 	bl	8017e60 <_free_r>
 8018ca0:	463c      	mov	r4, r7
 8018ca2:	e7e0      	b.n	8018c66 <_realloc_r+0x1e>

08018ca4 <__ascii_wctomb>:
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	4608      	mov	r0, r1
 8018ca8:	b141      	cbz	r1, 8018cbc <__ascii_wctomb+0x18>
 8018caa:	2aff      	cmp	r2, #255	@ 0xff
 8018cac:	d904      	bls.n	8018cb8 <__ascii_wctomb+0x14>
 8018cae:	228a      	movs	r2, #138	@ 0x8a
 8018cb0:	601a      	str	r2, [r3, #0]
 8018cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb6:	4770      	bx	lr
 8018cb8:	700a      	strb	r2, [r1, #0]
 8018cba:	2001      	movs	r0, #1
 8018cbc:	4770      	bx	lr
	...

08018cc0 <fiprintf>:
 8018cc0:	b40e      	push	{r1, r2, r3}
 8018cc2:	b503      	push	{r0, r1, lr}
 8018cc4:	4601      	mov	r1, r0
 8018cc6:	ab03      	add	r3, sp, #12
 8018cc8:	4805      	ldr	r0, [pc, #20]	@ (8018ce0 <fiprintf+0x20>)
 8018cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cce:	6800      	ldr	r0, [r0, #0]
 8018cd0:	9301      	str	r3, [sp, #4]
 8018cd2:	f000 f83f 	bl	8018d54 <_vfiprintf_r>
 8018cd6:	b002      	add	sp, #8
 8018cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cdc:	b003      	add	sp, #12
 8018cde:	4770      	bx	lr
 8018ce0:	20001204 	.word	0x20001204

08018ce4 <abort>:
 8018ce4:	b508      	push	{r3, lr}
 8018ce6:	2006      	movs	r0, #6
 8018ce8:	f000 fa08 	bl	80190fc <raise>
 8018cec:	2001      	movs	r0, #1
 8018cee:	f7e8 fb4b 	bl	8001388 <_exit>

08018cf2 <_malloc_usable_size_r>:
 8018cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cf6:	1f18      	subs	r0, r3, #4
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	bfbc      	itt	lt
 8018cfc:	580b      	ldrlt	r3, [r1, r0]
 8018cfe:	18c0      	addlt	r0, r0, r3
 8018d00:	4770      	bx	lr

08018d02 <__sfputc_r>:
 8018d02:	6893      	ldr	r3, [r2, #8]
 8018d04:	3b01      	subs	r3, #1
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	b410      	push	{r4}
 8018d0a:	6093      	str	r3, [r2, #8]
 8018d0c:	da08      	bge.n	8018d20 <__sfputc_r+0x1e>
 8018d0e:	6994      	ldr	r4, [r2, #24]
 8018d10:	42a3      	cmp	r3, r4
 8018d12:	db01      	blt.n	8018d18 <__sfputc_r+0x16>
 8018d14:	290a      	cmp	r1, #10
 8018d16:	d103      	bne.n	8018d20 <__sfputc_r+0x1e>
 8018d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d1c:	f000 b932 	b.w	8018f84 <__swbuf_r>
 8018d20:	6813      	ldr	r3, [r2, #0]
 8018d22:	1c58      	adds	r0, r3, #1
 8018d24:	6010      	str	r0, [r2, #0]
 8018d26:	7019      	strb	r1, [r3, #0]
 8018d28:	4608      	mov	r0, r1
 8018d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d2e:	4770      	bx	lr

08018d30 <__sfputs_r>:
 8018d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d32:	4606      	mov	r6, r0
 8018d34:	460f      	mov	r7, r1
 8018d36:	4614      	mov	r4, r2
 8018d38:	18d5      	adds	r5, r2, r3
 8018d3a:	42ac      	cmp	r4, r5
 8018d3c:	d101      	bne.n	8018d42 <__sfputs_r+0x12>
 8018d3e:	2000      	movs	r0, #0
 8018d40:	e007      	b.n	8018d52 <__sfputs_r+0x22>
 8018d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d46:	463a      	mov	r2, r7
 8018d48:	4630      	mov	r0, r6
 8018d4a:	f7ff ffda 	bl	8018d02 <__sfputc_r>
 8018d4e:	1c43      	adds	r3, r0, #1
 8018d50:	d1f3      	bne.n	8018d3a <__sfputs_r+0xa>
 8018d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018d54 <_vfiprintf_r>:
 8018d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d58:	460d      	mov	r5, r1
 8018d5a:	b09d      	sub	sp, #116	@ 0x74
 8018d5c:	4614      	mov	r4, r2
 8018d5e:	4698      	mov	r8, r3
 8018d60:	4606      	mov	r6, r0
 8018d62:	b118      	cbz	r0, 8018d6c <_vfiprintf_r+0x18>
 8018d64:	6a03      	ldr	r3, [r0, #32]
 8018d66:	b90b      	cbnz	r3, 8018d6c <_vfiprintf_r+0x18>
 8018d68:	f7fe f8ce 	bl	8016f08 <__sinit>
 8018d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d6e:	07d9      	lsls	r1, r3, #31
 8018d70:	d405      	bmi.n	8018d7e <_vfiprintf_r+0x2a>
 8018d72:	89ab      	ldrh	r3, [r5, #12]
 8018d74:	059a      	lsls	r2, r3, #22
 8018d76:	d402      	bmi.n	8018d7e <_vfiprintf_r+0x2a>
 8018d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d7a:	f7fe fa0c 	bl	8017196 <__retarget_lock_acquire_recursive>
 8018d7e:	89ab      	ldrh	r3, [r5, #12]
 8018d80:	071b      	lsls	r3, r3, #28
 8018d82:	d501      	bpl.n	8018d88 <_vfiprintf_r+0x34>
 8018d84:	692b      	ldr	r3, [r5, #16]
 8018d86:	b99b      	cbnz	r3, 8018db0 <_vfiprintf_r+0x5c>
 8018d88:	4629      	mov	r1, r5
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f000 f938 	bl	8019000 <__swsetup_r>
 8018d90:	b170      	cbz	r0, 8018db0 <_vfiprintf_r+0x5c>
 8018d92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d94:	07dc      	lsls	r4, r3, #31
 8018d96:	d504      	bpl.n	8018da2 <_vfiprintf_r+0x4e>
 8018d98:	f04f 30ff 	mov.w	r0, #4294967295
 8018d9c:	b01d      	add	sp, #116	@ 0x74
 8018d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da2:	89ab      	ldrh	r3, [r5, #12]
 8018da4:	0598      	lsls	r0, r3, #22
 8018da6:	d4f7      	bmi.n	8018d98 <_vfiprintf_r+0x44>
 8018da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018daa:	f7fe f9f5 	bl	8017198 <__retarget_lock_release_recursive>
 8018dae:	e7f3      	b.n	8018d98 <_vfiprintf_r+0x44>
 8018db0:	2300      	movs	r3, #0
 8018db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018db4:	2320      	movs	r3, #32
 8018db6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8018dbe:	2330      	movs	r3, #48	@ 0x30
 8018dc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018f70 <_vfiprintf_r+0x21c>
 8018dc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018dc8:	f04f 0901 	mov.w	r9, #1
 8018dcc:	4623      	mov	r3, r4
 8018dce:	469a      	mov	sl, r3
 8018dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018dd4:	b10a      	cbz	r2, 8018dda <_vfiprintf_r+0x86>
 8018dd6:	2a25      	cmp	r2, #37	@ 0x25
 8018dd8:	d1f9      	bne.n	8018dce <_vfiprintf_r+0x7a>
 8018dda:	ebba 0b04 	subs.w	fp, sl, r4
 8018dde:	d00b      	beq.n	8018df8 <_vfiprintf_r+0xa4>
 8018de0:	465b      	mov	r3, fp
 8018de2:	4622      	mov	r2, r4
 8018de4:	4629      	mov	r1, r5
 8018de6:	4630      	mov	r0, r6
 8018de8:	f7ff ffa2 	bl	8018d30 <__sfputs_r>
 8018dec:	3001      	adds	r0, #1
 8018dee:	f000 80a7 	beq.w	8018f40 <_vfiprintf_r+0x1ec>
 8018df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018df4:	445a      	add	r2, fp
 8018df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8018df8:	f89a 3000 	ldrb.w	r3, [sl]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f000 809f 	beq.w	8018f40 <_vfiprintf_r+0x1ec>
 8018e02:	2300      	movs	r3, #0
 8018e04:	f04f 32ff 	mov.w	r2, #4294967295
 8018e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e0c:	f10a 0a01 	add.w	sl, sl, #1
 8018e10:	9304      	str	r3, [sp, #16]
 8018e12:	9307      	str	r3, [sp, #28]
 8018e14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018e18:	931a      	str	r3, [sp, #104]	@ 0x68
 8018e1a:	4654      	mov	r4, sl
 8018e1c:	2205      	movs	r2, #5
 8018e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e22:	4853      	ldr	r0, [pc, #332]	@ (8018f70 <_vfiprintf_r+0x21c>)
 8018e24:	f7e7 f9f4 	bl	8000210 <memchr>
 8018e28:	9a04      	ldr	r2, [sp, #16]
 8018e2a:	b9d8      	cbnz	r0, 8018e64 <_vfiprintf_r+0x110>
 8018e2c:	06d1      	lsls	r1, r2, #27
 8018e2e:	bf44      	itt	mi
 8018e30:	2320      	movmi	r3, #32
 8018e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018e36:	0713      	lsls	r3, r2, #28
 8018e38:	bf44      	itt	mi
 8018e3a:	232b      	movmi	r3, #43	@ 0x2b
 8018e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018e40:	f89a 3000 	ldrb.w	r3, [sl]
 8018e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e46:	d015      	beq.n	8018e74 <_vfiprintf_r+0x120>
 8018e48:	9a07      	ldr	r2, [sp, #28]
 8018e4a:	4654      	mov	r4, sl
 8018e4c:	2000      	movs	r0, #0
 8018e4e:	f04f 0c0a 	mov.w	ip, #10
 8018e52:	4621      	mov	r1, r4
 8018e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e58:	3b30      	subs	r3, #48	@ 0x30
 8018e5a:	2b09      	cmp	r3, #9
 8018e5c:	d94b      	bls.n	8018ef6 <_vfiprintf_r+0x1a2>
 8018e5e:	b1b0      	cbz	r0, 8018e8e <_vfiprintf_r+0x13a>
 8018e60:	9207      	str	r2, [sp, #28]
 8018e62:	e014      	b.n	8018e8e <_vfiprintf_r+0x13a>
 8018e64:	eba0 0308 	sub.w	r3, r0, r8
 8018e68:	fa09 f303 	lsl.w	r3, r9, r3
 8018e6c:	4313      	orrs	r3, r2
 8018e6e:	9304      	str	r3, [sp, #16]
 8018e70:	46a2      	mov	sl, r4
 8018e72:	e7d2      	b.n	8018e1a <_vfiprintf_r+0xc6>
 8018e74:	9b03      	ldr	r3, [sp, #12]
 8018e76:	1d19      	adds	r1, r3, #4
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	9103      	str	r1, [sp, #12]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	bfbb      	ittet	lt
 8018e80:	425b      	neglt	r3, r3
 8018e82:	f042 0202 	orrlt.w	r2, r2, #2
 8018e86:	9307      	strge	r3, [sp, #28]
 8018e88:	9307      	strlt	r3, [sp, #28]
 8018e8a:	bfb8      	it	lt
 8018e8c:	9204      	strlt	r2, [sp, #16]
 8018e8e:	7823      	ldrb	r3, [r4, #0]
 8018e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8018e92:	d10a      	bne.n	8018eaa <_vfiprintf_r+0x156>
 8018e94:	7863      	ldrb	r3, [r4, #1]
 8018e96:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e98:	d132      	bne.n	8018f00 <_vfiprintf_r+0x1ac>
 8018e9a:	9b03      	ldr	r3, [sp, #12]
 8018e9c:	1d1a      	adds	r2, r3, #4
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	9203      	str	r2, [sp, #12]
 8018ea2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018ea6:	3402      	adds	r4, #2
 8018ea8:	9305      	str	r3, [sp, #20]
 8018eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018f80 <_vfiprintf_r+0x22c>
 8018eae:	7821      	ldrb	r1, [r4, #0]
 8018eb0:	2203      	movs	r2, #3
 8018eb2:	4650      	mov	r0, sl
 8018eb4:	f7e7 f9ac 	bl	8000210 <memchr>
 8018eb8:	b138      	cbz	r0, 8018eca <_vfiprintf_r+0x176>
 8018eba:	9b04      	ldr	r3, [sp, #16]
 8018ebc:	eba0 000a 	sub.w	r0, r0, sl
 8018ec0:	2240      	movs	r2, #64	@ 0x40
 8018ec2:	4082      	lsls	r2, r0
 8018ec4:	4313      	orrs	r3, r2
 8018ec6:	3401      	adds	r4, #1
 8018ec8:	9304      	str	r3, [sp, #16]
 8018eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ece:	4829      	ldr	r0, [pc, #164]	@ (8018f74 <_vfiprintf_r+0x220>)
 8018ed0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018ed4:	2206      	movs	r2, #6
 8018ed6:	f7e7 f99b 	bl	8000210 <memchr>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	d03f      	beq.n	8018f5e <_vfiprintf_r+0x20a>
 8018ede:	4b26      	ldr	r3, [pc, #152]	@ (8018f78 <_vfiprintf_r+0x224>)
 8018ee0:	bb1b      	cbnz	r3, 8018f2a <_vfiprintf_r+0x1d6>
 8018ee2:	9b03      	ldr	r3, [sp, #12]
 8018ee4:	3307      	adds	r3, #7
 8018ee6:	f023 0307 	bic.w	r3, r3, #7
 8018eea:	3308      	adds	r3, #8
 8018eec:	9303      	str	r3, [sp, #12]
 8018eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ef0:	443b      	add	r3, r7
 8018ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ef4:	e76a      	b.n	8018dcc <_vfiprintf_r+0x78>
 8018ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018efa:	460c      	mov	r4, r1
 8018efc:	2001      	movs	r0, #1
 8018efe:	e7a8      	b.n	8018e52 <_vfiprintf_r+0xfe>
 8018f00:	2300      	movs	r3, #0
 8018f02:	3401      	adds	r4, #1
 8018f04:	9305      	str	r3, [sp, #20]
 8018f06:	4619      	mov	r1, r3
 8018f08:	f04f 0c0a 	mov.w	ip, #10
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f12:	3a30      	subs	r2, #48	@ 0x30
 8018f14:	2a09      	cmp	r2, #9
 8018f16:	d903      	bls.n	8018f20 <_vfiprintf_r+0x1cc>
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d0c6      	beq.n	8018eaa <_vfiprintf_r+0x156>
 8018f1c:	9105      	str	r1, [sp, #20]
 8018f1e:	e7c4      	b.n	8018eaa <_vfiprintf_r+0x156>
 8018f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f24:	4604      	mov	r4, r0
 8018f26:	2301      	movs	r3, #1
 8018f28:	e7f0      	b.n	8018f0c <_vfiprintf_r+0x1b8>
 8018f2a:	ab03      	add	r3, sp, #12
 8018f2c:	9300      	str	r3, [sp, #0]
 8018f2e:	462a      	mov	r2, r5
 8018f30:	4b12      	ldr	r3, [pc, #72]	@ (8018f7c <_vfiprintf_r+0x228>)
 8018f32:	a904      	add	r1, sp, #16
 8018f34:	4630      	mov	r0, r6
 8018f36:	f7fd fba3 	bl	8016680 <_printf_float>
 8018f3a:	4607      	mov	r7, r0
 8018f3c:	1c78      	adds	r0, r7, #1
 8018f3e:	d1d6      	bne.n	8018eee <_vfiprintf_r+0x19a>
 8018f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018f42:	07d9      	lsls	r1, r3, #31
 8018f44:	d405      	bmi.n	8018f52 <_vfiprintf_r+0x1fe>
 8018f46:	89ab      	ldrh	r3, [r5, #12]
 8018f48:	059a      	lsls	r2, r3, #22
 8018f4a:	d402      	bmi.n	8018f52 <_vfiprintf_r+0x1fe>
 8018f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018f4e:	f7fe f923 	bl	8017198 <__retarget_lock_release_recursive>
 8018f52:	89ab      	ldrh	r3, [r5, #12]
 8018f54:	065b      	lsls	r3, r3, #25
 8018f56:	f53f af1f 	bmi.w	8018d98 <_vfiprintf_r+0x44>
 8018f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018f5c:	e71e      	b.n	8018d9c <_vfiprintf_r+0x48>
 8018f5e:	ab03      	add	r3, sp, #12
 8018f60:	9300      	str	r3, [sp, #0]
 8018f62:	462a      	mov	r2, r5
 8018f64:	4b05      	ldr	r3, [pc, #20]	@ (8018f7c <_vfiprintf_r+0x228>)
 8018f66:	a904      	add	r1, sp, #16
 8018f68:	4630      	mov	r0, r6
 8018f6a:	f7fd fe21 	bl	8016bb0 <_printf_i>
 8018f6e:	e7e4      	b.n	8018f3a <_vfiprintf_r+0x1e6>
 8018f70:	0801af70 	.word	0x0801af70
 8018f74:	0801af7a 	.word	0x0801af7a
 8018f78:	08016681 	.word	0x08016681
 8018f7c:	08018d31 	.word	0x08018d31
 8018f80:	0801af76 	.word	0x0801af76

08018f84 <__swbuf_r>:
 8018f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f86:	460e      	mov	r6, r1
 8018f88:	4614      	mov	r4, r2
 8018f8a:	4605      	mov	r5, r0
 8018f8c:	b118      	cbz	r0, 8018f96 <__swbuf_r+0x12>
 8018f8e:	6a03      	ldr	r3, [r0, #32]
 8018f90:	b90b      	cbnz	r3, 8018f96 <__swbuf_r+0x12>
 8018f92:	f7fd ffb9 	bl	8016f08 <__sinit>
 8018f96:	69a3      	ldr	r3, [r4, #24]
 8018f98:	60a3      	str	r3, [r4, #8]
 8018f9a:	89a3      	ldrh	r3, [r4, #12]
 8018f9c:	071a      	lsls	r2, r3, #28
 8018f9e:	d501      	bpl.n	8018fa4 <__swbuf_r+0x20>
 8018fa0:	6923      	ldr	r3, [r4, #16]
 8018fa2:	b943      	cbnz	r3, 8018fb6 <__swbuf_r+0x32>
 8018fa4:	4621      	mov	r1, r4
 8018fa6:	4628      	mov	r0, r5
 8018fa8:	f000 f82a 	bl	8019000 <__swsetup_r>
 8018fac:	b118      	cbz	r0, 8018fb6 <__swbuf_r+0x32>
 8018fae:	f04f 37ff 	mov.w	r7, #4294967295
 8018fb2:	4638      	mov	r0, r7
 8018fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fb6:	6823      	ldr	r3, [r4, #0]
 8018fb8:	6922      	ldr	r2, [r4, #16]
 8018fba:	1a98      	subs	r0, r3, r2
 8018fbc:	6963      	ldr	r3, [r4, #20]
 8018fbe:	b2f6      	uxtb	r6, r6
 8018fc0:	4283      	cmp	r3, r0
 8018fc2:	4637      	mov	r7, r6
 8018fc4:	dc05      	bgt.n	8018fd2 <__swbuf_r+0x4e>
 8018fc6:	4621      	mov	r1, r4
 8018fc8:	4628      	mov	r0, r5
 8018fca:	f7ff fda7 	bl	8018b1c <_fflush_r>
 8018fce:	2800      	cmp	r0, #0
 8018fd0:	d1ed      	bne.n	8018fae <__swbuf_r+0x2a>
 8018fd2:	68a3      	ldr	r3, [r4, #8]
 8018fd4:	3b01      	subs	r3, #1
 8018fd6:	60a3      	str	r3, [r4, #8]
 8018fd8:	6823      	ldr	r3, [r4, #0]
 8018fda:	1c5a      	adds	r2, r3, #1
 8018fdc:	6022      	str	r2, [r4, #0]
 8018fde:	701e      	strb	r6, [r3, #0]
 8018fe0:	6962      	ldr	r2, [r4, #20]
 8018fe2:	1c43      	adds	r3, r0, #1
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d004      	beq.n	8018ff2 <__swbuf_r+0x6e>
 8018fe8:	89a3      	ldrh	r3, [r4, #12]
 8018fea:	07db      	lsls	r3, r3, #31
 8018fec:	d5e1      	bpl.n	8018fb2 <__swbuf_r+0x2e>
 8018fee:	2e0a      	cmp	r6, #10
 8018ff0:	d1df      	bne.n	8018fb2 <__swbuf_r+0x2e>
 8018ff2:	4621      	mov	r1, r4
 8018ff4:	4628      	mov	r0, r5
 8018ff6:	f7ff fd91 	bl	8018b1c <_fflush_r>
 8018ffa:	2800      	cmp	r0, #0
 8018ffc:	d0d9      	beq.n	8018fb2 <__swbuf_r+0x2e>
 8018ffe:	e7d6      	b.n	8018fae <__swbuf_r+0x2a>

08019000 <__swsetup_r>:
 8019000:	b538      	push	{r3, r4, r5, lr}
 8019002:	4b29      	ldr	r3, [pc, #164]	@ (80190a8 <__swsetup_r+0xa8>)
 8019004:	4605      	mov	r5, r0
 8019006:	6818      	ldr	r0, [r3, #0]
 8019008:	460c      	mov	r4, r1
 801900a:	b118      	cbz	r0, 8019014 <__swsetup_r+0x14>
 801900c:	6a03      	ldr	r3, [r0, #32]
 801900e:	b90b      	cbnz	r3, 8019014 <__swsetup_r+0x14>
 8019010:	f7fd ff7a 	bl	8016f08 <__sinit>
 8019014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019018:	0719      	lsls	r1, r3, #28
 801901a:	d422      	bmi.n	8019062 <__swsetup_r+0x62>
 801901c:	06da      	lsls	r2, r3, #27
 801901e:	d407      	bmi.n	8019030 <__swsetup_r+0x30>
 8019020:	2209      	movs	r2, #9
 8019022:	602a      	str	r2, [r5, #0]
 8019024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019028:	81a3      	strh	r3, [r4, #12]
 801902a:	f04f 30ff 	mov.w	r0, #4294967295
 801902e:	e033      	b.n	8019098 <__swsetup_r+0x98>
 8019030:	0758      	lsls	r0, r3, #29
 8019032:	d512      	bpl.n	801905a <__swsetup_r+0x5a>
 8019034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019036:	b141      	cbz	r1, 801904a <__swsetup_r+0x4a>
 8019038:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801903c:	4299      	cmp	r1, r3
 801903e:	d002      	beq.n	8019046 <__swsetup_r+0x46>
 8019040:	4628      	mov	r0, r5
 8019042:	f7fe ff0d 	bl	8017e60 <_free_r>
 8019046:	2300      	movs	r3, #0
 8019048:	6363      	str	r3, [r4, #52]	@ 0x34
 801904a:	89a3      	ldrh	r3, [r4, #12]
 801904c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019050:	81a3      	strh	r3, [r4, #12]
 8019052:	2300      	movs	r3, #0
 8019054:	6063      	str	r3, [r4, #4]
 8019056:	6923      	ldr	r3, [r4, #16]
 8019058:	6023      	str	r3, [r4, #0]
 801905a:	89a3      	ldrh	r3, [r4, #12]
 801905c:	f043 0308 	orr.w	r3, r3, #8
 8019060:	81a3      	strh	r3, [r4, #12]
 8019062:	6923      	ldr	r3, [r4, #16]
 8019064:	b94b      	cbnz	r3, 801907a <__swsetup_r+0x7a>
 8019066:	89a3      	ldrh	r3, [r4, #12]
 8019068:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801906c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019070:	d003      	beq.n	801907a <__swsetup_r+0x7a>
 8019072:	4621      	mov	r1, r4
 8019074:	4628      	mov	r0, r5
 8019076:	f000 f883 	bl	8019180 <__smakebuf_r>
 801907a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801907e:	f013 0201 	ands.w	r2, r3, #1
 8019082:	d00a      	beq.n	801909a <__swsetup_r+0x9a>
 8019084:	2200      	movs	r2, #0
 8019086:	60a2      	str	r2, [r4, #8]
 8019088:	6962      	ldr	r2, [r4, #20]
 801908a:	4252      	negs	r2, r2
 801908c:	61a2      	str	r2, [r4, #24]
 801908e:	6922      	ldr	r2, [r4, #16]
 8019090:	b942      	cbnz	r2, 80190a4 <__swsetup_r+0xa4>
 8019092:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019096:	d1c5      	bne.n	8019024 <__swsetup_r+0x24>
 8019098:	bd38      	pop	{r3, r4, r5, pc}
 801909a:	0799      	lsls	r1, r3, #30
 801909c:	bf58      	it	pl
 801909e:	6962      	ldrpl	r2, [r4, #20]
 80190a0:	60a2      	str	r2, [r4, #8]
 80190a2:	e7f4      	b.n	801908e <__swsetup_r+0x8e>
 80190a4:	2000      	movs	r0, #0
 80190a6:	e7f7      	b.n	8019098 <__swsetup_r+0x98>
 80190a8:	20001204 	.word	0x20001204

080190ac <_raise_r>:
 80190ac:	291f      	cmp	r1, #31
 80190ae:	b538      	push	{r3, r4, r5, lr}
 80190b0:	4605      	mov	r5, r0
 80190b2:	460c      	mov	r4, r1
 80190b4:	d904      	bls.n	80190c0 <_raise_r+0x14>
 80190b6:	2316      	movs	r3, #22
 80190b8:	6003      	str	r3, [r0, #0]
 80190ba:	f04f 30ff 	mov.w	r0, #4294967295
 80190be:	bd38      	pop	{r3, r4, r5, pc}
 80190c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80190c2:	b112      	cbz	r2, 80190ca <_raise_r+0x1e>
 80190c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80190c8:	b94b      	cbnz	r3, 80190de <_raise_r+0x32>
 80190ca:	4628      	mov	r0, r5
 80190cc:	f000 f830 	bl	8019130 <_getpid_r>
 80190d0:	4622      	mov	r2, r4
 80190d2:	4601      	mov	r1, r0
 80190d4:	4628      	mov	r0, r5
 80190d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190da:	f000 b817 	b.w	801910c <_kill_r>
 80190de:	2b01      	cmp	r3, #1
 80190e0:	d00a      	beq.n	80190f8 <_raise_r+0x4c>
 80190e2:	1c59      	adds	r1, r3, #1
 80190e4:	d103      	bne.n	80190ee <_raise_r+0x42>
 80190e6:	2316      	movs	r3, #22
 80190e8:	6003      	str	r3, [r0, #0]
 80190ea:	2001      	movs	r0, #1
 80190ec:	e7e7      	b.n	80190be <_raise_r+0x12>
 80190ee:	2100      	movs	r1, #0
 80190f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80190f4:	4620      	mov	r0, r4
 80190f6:	4798      	blx	r3
 80190f8:	2000      	movs	r0, #0
 80190fa:	e7e0      	b.n	80190be <_raise_r+0x12>

080190fc <raise>:
 80190fc:	4b02      	ldr	r3, [pc, #8]	@ (8019108 <raise+0xc>)
 80190fe:	4601      	mov	r1, r0
 8019100:	6818      	ldr	r0, [r3, #0]
 8019102:	f7ff bfd3 	b.w	80190ac <_raise_r>
 8019106:	bf00      	nop
 8019108:	20001204 	.word	0x20001204

0801910c <_kill_r>:
 801910c:	b538      	push	{r3, r4, r5, lr}
 801910e:	4d07      	ldr	r5, [pc, #28]	@ (801912c <_kill_r+0x20>)
 8019110:	2300      	movs	r3, #0
 8019112:	4604      	mov	r4, r0
 8019114:	4608      	mov	r0, r1
 8019116:	4611      	mov	r1, r2
 8019118:	602b      	str	r3, [r5, #0]
 801911a:	f7e8 f925 	bl	8001368 <_kill>
 801911e:	1c43      	adds	r3, r0, #1
 8019120:	d102      	bne.n	8019128 <_kill_r+0x1c>
 8019122:	682b      	ldr	r3, [r5, #0]
 8019124:	b103      	cbz	r3, 8019128 <_kill_r+0x1c>
 8019126:	6023      	str	r3, [r4, #0]
 8019128:	bd38      	pop	{r3, r4, r5, pc}
 801912a:	bf00      	nop
 801912c:	20009544 	.word	0x20009544

08019130 <_getpid_r>:
 8019130:	f7e8 b912 	b.w	8001358 <_getpid>

08019134 <__swhatbuf_r>:
 8019134:	b570      	push	{r4, r5, r6, lr}
 8019136:	460c      	mov	r4, r1
 8019138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801913c:	2900      	cmp	r1, #0
 801913e:	b096      	sub	sp, #88	@ 0x58
 8019140:	4615      	mov	r5, r2
 8019142:	461e      	mov	r6, r3
 8019144:	da0d      	bge.n	8019162 <__swhatbuf_r+0x2e>
 8019146:	89a3      	ldrh	r3, [r4, #12]
 8019148:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801914c:	f04f 0100 	mov.w	r1, #0
 8019150:	bf14      	ite	ne
 8019152:	2340      	movne	r3, #64	@ 0x40
 8019154:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019158:	2000      	movs	r0, #0
 801915a:	6031      	str	r1, [r6, #0]
 801915c:	602b      	str	r3, [r5, #0]
 801915e:	b016      	add	sp, #88	@ 0x58
 8019160:	bd70      	pop	{r4, r5, r6, pc}
 8019162:	466a      	mov	r2, sp
 8019164:	f000 f848 	bl	80191f8 <_fstat_r>
 8019168:	2800      	cmp	r0, #0
 801916a:	dbec      	blt.n	8019146 <__swhatbuf_r+0x12>
 801916c:	9901      	ldr	r1, [sp, #4]
 801916e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019172:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019176:	4259      	negs	r1, r3
 8019178:	4159      	adcs	r1, r3
 801917a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801917e:	e7eb      	b.n	8019158 <__swhatbuf_r+0x24>

08019180 <__smakebuf_r>:
 8019180:	898b      	ldrh	r3, [r1, #12]
 8019182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019184:	079d      	lsls	r5, r3, #30
 8019186:	4606      	mov	r6, r0
 8019188:	460c      	mov	r4, r1
 801918a:	d507      	bpl.n	801919c <__smakebuf_r+0x1c>
 801918c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019190:	6023      	str	r3, [r4, #0]
 8019192:	6123      	str	r3, [r4, #16]
 8019194:	2301      	movs	r3, #1
 8019196:	6163      	str	r3, [r4, #20]
 8019198:	b003      	add	sp, #12
 801919a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801919c:	ab01      	add	r3, sp, #4
 801919e:	466a      	mov	r2, sp
 80191a0:	f7ff ffc8 	bl	8019134 <__swhatbuf_r>
 80191a4:	9f00      	ldr	r7, [sp, #0]
 80191a6:	4605      	mov	r5, r0
 80191a8:	4639      	mov	r1, r7
 80191aa:	4630      	mov	r0, r6
 80191ac:	f7fe fecc 	bl	8017f48 <_malloc_r>
 80191b0:	b948      	cbnz	r0, 80191c6 <__smakebuf_r+0x46>
 80191b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191b6:	059a      	lsls	r2, r3, #22
 80191b8:	d4ee      	bmi.n	8019198 <__smakebuf_r+0x18>
 80191ba:	f023 0303 	bic.w	r3, r3, #3
 80191be:	f043 0302 	orr.w	r3, r3, #2
 80191c2:	81a3      	strh	r3, [r4, #12]
 80191c4:	e7e2      	b.n	801918c <__smakebuf_r+0xc>
 80191c6:	89a3      	ldrh	r3, [r4, #12]
 80191c8:	6020      	str	r0, [r4, #0]
 80191ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80191ce:	81a3      	strh	r3, [r4, #12]
 80191d0:	9b01      	ldr	r3, [sp, #4]
 80191d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80191d6:	b15b      	cbz	r3, 80191f0 <__smakebuf_r+0x70>
 80191d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191dc:	4630      	mov	r0, r6
 80191de:	f000 f81d 	bl	801921c <_isatty_r>
 80191e2:	b128      	cbz	r0, 80191f0 <__smakebuf_r+0x70>
 80191e4:	89a3      	ldrh	r3, [r4, #12]
 80191e6:	f023 0303 	bic.w	r3, r3, #3
 80191ea:	f043 0301 	orr.w	r3, r3, #1
 80191ee:	81a3      	strh	r3, [r4, #12]
 80191f0:	89a3      	ldrh	r3, [r4, #12]
 80191f2:	431d      	orrs	r5, r3
 80191f4:	81a5      	strh	r5, [r4, #12]
 80191f6:	e7cf      	b.n	8019198 <__smakebuf_r+0x18>

080191f8 <_fstat_r>:
 80191f8:	b538      	push	{r3, r4, r5, lr}
 80191fa:	4d07      	ldr	r5, [pc, #28]	@ (8019218 <_fstat_r+0x20>)
 80191fc:	2300      	movs	r3, #0
 80191fe:	4604      	mov	r4, r0
 8019200:	4608      	mov	r0, r1
 8019202:	4611      	mov	r1, r2
 8019204:	602b      	str	r3, [r5, #0]
 8019206:	f7e8 f90f 	bl	8001428 <_fstat>
 801920a:	1c43      	adds	r3, r0, #1
 801920c:	d102      	bne.n	8019214 <_fstat_r+0x1c>
 801920e:	682b      	ldr	r3, [r5, #0]
 8019210:	b103      	cbz	r3, 8019214 <_fstat_r+0x1c>
 8019212:	6023      	str	r3, [r4, #0]
 8019214:	bd38      	pop	{r3, r4, r5, pc}
 8019216:	bf00      	nop
 8019218:	20009544 	.word	0x20009544

0801921c <_isatty_r>:
 801921c:	b538      	push	{r3, r4, r5, lr}
 801921e:	4d06      	ldr	r5, [pc, #24]	@ (8019238 <_isatty_r+0x1c>)
 8019220:	2300      	movs	r3, #0
 8019222:	4604      	mov	r4, r0
 8019224:	4608      	mov	r0, r1
 8019226:	602b      	str	r3, [r5, #0]
 8019228:	f7e8 f90e 	bl	8001448 <_isatty>
 801922c:	1c43      	adds	r3, r0, #1
 801922e:	d102      	bne.n	8019236 <_isatty_r+0x1a>
 8019230:	682b      	ldr	r3, [r5, #0]
 8019232:	b103      	cbz	r3, 8019236 <_isatty_r+0x1a>
 8019234:	6023      	str	r3, [r4, #0]
 8019236:	bd38      	pop	{r3, r4, r5, pc}
 8019238:	20009544 	.word	0x20009544

0801923c <_init>:
 801923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923e:	bf00      	nop
 8019240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019242:	bc08      	pop	{r3}
 8019244:	469e      	mov	lr, r3
 8019246:	4770      	bx	lr

08019248 <_fini>:
 8019248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924a:	bf00      	nop
 801924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801924e:	bc08      	pop	{r3}
 8019250:	469e      	mov	lr, r3
 8019252:	4770      	bx	lr
