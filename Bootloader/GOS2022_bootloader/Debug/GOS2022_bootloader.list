
GOS2022_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018bac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e88  08018d80  08018d80  00019d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac08  0801ac08  0001d3f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac08  0801ac08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac10  0801ac10  0001d3f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac10  0801ac10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac14  0801ac14  0001bc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013f0  20000000  0801ac18  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000758c  200013f0  0801c008  0001d3f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000897c  0801c008  0001d97c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d3f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b1ee  00000000  00000000  0001d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000088c9  00000000  00000000  0004860e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f8  00000000  00000000  00050ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ab3  00000000  00000000  000532d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004e999  00000000  00000000  00054d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041152  00000000  00000000  000a371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0d23  00000000  00000000  000e486e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d5591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cfc  00000000  00000000  001d55d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  001df2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200013f0 	.word	0x200013f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018d64 	.word	0x08018d64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200013f4 	.word	0x200013f4
 800020c:	08018d64 	.word	0x08018d64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <svl_dsmPlatformInit>:

/*
 * Function: svl_dsmPlatformInit
 */
gos_result_t svl_dsmPlatformInit (void_t)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8000ede:	2355      	movs	r3, #85	@ 0x55
 8000ee0:	71fb      	strb	r3, [r7, #7]
	 * Function code.
	 */
	// Driver init.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
    		"HAL library initialization",
			HAL_Init() == HAL_OK ? GOS_SUCCESS : GOS_ERROR
 8000ee2:	f000 fdb7 	bl	8001a54 <HAL_Init>
 8000ee6:	4603      	mov	r3, r0
    platformDriverInitResult &= trace_driverEnqueueTraceMessage(
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <svl_dsmPlatformInit+0x18>
 8000eec:	2355      	movs	r3, #85	@ 0x55
 8000eee:	e000      	b.n	8000ef2 <svl_dsmPlatformInit+0x1a>
 8000ef0:	23ae      	movs	r3, #174	@ 0xae
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4820      	ldr	r0, [pc, #128]	@ (8000f78 <svl_dsmPlatformInit+0xa0>)
 8000ef6:	f000 fd49 	bl	800198c <trace_driverEnqueueTraceMessage>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4013      	ands	r3, r2
 8000f02:	71fb      	strb	r3, [r7, #7]
    );

    platformDriverInitResult &= driver_init();
 8000f04:	f000 fac2 	bl	800148c <driver_init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	71fb      	strb	r3, [r7, #7]

	// Register kernel drivers.
	platformDriverInitResult &= gos_driverInit(&driverFunctions);
 8000f12:	481a      	ldr	r0, [pc, #104]	@ (8000f7c <svl_dsmPlatformInit+0xa4>)
 8000f14:	f007 ff1e 	bl	8008d54 <gos_driverInit>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	71fb      	strb	r3, [r7, #7]

    GOS_CONVERT_RESULT(platformDriverInitResult);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b55      	cmp	r3, #85	@ 0x55
 8000f26:	d001      	beq.n	8000f2c <svl_dsmPlatformInit+0x54>
 8000f28:	23ae      	movs	r3, #174	@ 0xae
 8000f2a:	71fb      	strb	r3, [r7, #7]

    SysTick->VAL = 0;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <svl_dsmPlatformInit+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <svl_dsmPlatformInit+0xa8>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f38:	b662      	cpsie	i
}
 8000f3a:	bf00      	nop

    __enable_irq();

    // Initialize bootloader.
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("PDH board-specific initialization", app_pdhBdSpecInit());
 8000f3c:	f000 f8f8 	bl	8001130 <app_pdhBdSpecInit>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4619      	mov	r1, r3
 8000f44:	480f      	ldr	r0, [pc, #60]	@ (8000f84 <svl_dsmPlatformInit+0xac>)
 8000f46:	f000 fd21 	bl	800198c <trace_driverEnqueueTraceMessage>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4013      	ands	r3, r2
 8000f52:	71fb      	strb	r3, [r7, #7]
    platformDriverInitResult &= trace_driverEnqueueTraceMessage("APP bootloader initialization", app_bld_init());
 8000f54:	f000 f830 	bl	8000fb8 <app_bld_init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480a      	ldr	r0, [pc, #40]	@ (8000f88 <svl_dsmPlatformInit+0xb0>)
 8000f5e:	f000 fd15 	bl	800198c <trace_driverEnqueueTraceMessage>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	71fb      	strb	r3, [r7, #7]

	return platformDriverInitResult;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	08018d80 	.word	0x08018d80
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	e000e010 	.word	0xe000e010
 8000f84:	08018d9c 	.word	0x08018d9c
 8000f88:	08018dc0 	.word	0x08018dc0

08000f8c <svl_dsmApplicationInit>:

/*
 * Function: svl_dsmApplicationInit
 */
gos_result_t svl_dsmApplicationInit (void_t)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t appInitResult = GOS_SUCCESS;
 8000f92:	2355      	movs	r3, #85	@ 0x55
 8000f94:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Flush trace entries.
    trace_driverFlushTraceEntries();
 8000f96:	f000 fd2d 	bl	80019f4 <trace_driverFlushTraceEntries>

	// Enable WiFi module.
	(void_t) drv_gpioWritePin(IO_WEMOS_RST, GPIO_STATE_HIGH);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2010      	movs	r0, #16
 8000f9e:	f00f fa0f 	bl	80103c0 <drv_gpioWritePin>

	if (appInitResult != GOS_SUCCESS)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b55      	cmp	r3, #85	@ 0x55
 8000fa6:	d001      	beq.n	8000fac <svl_dsmApplicationInit+0x20>
	{
		appInitResult = GOS_ERROR;
 8000fa8:	23ae      	movs	r3, #174	@ 0xae
 8000faa:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <app_bld_init>:

/*
 * Function: app_bld_init
 */
gos_result_t app_bld_init (void_t)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8000fbe:	2355      	movs	r3, #85	@ 0x55
 8000fc0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Update build date.
	gos_libGetBuildDate(&bldVerInfo.date.years, &bldVerInfo.date.months, &bldVerInfo.date.days);
 8000fc2:	4a25      	ldr	r2, [pc, #148]	@ (8001058 <app_bld_init+0xa0>)
 8000fc4:	4925      	ldr	r1, [pc, #148]	@ (800105c <app_bld_init+0xa4>)
 8000fc6:	4826      	ldr	r0, [pc, #152]	@ (8001060 <app_bld_init+0xa8>)
 8000fc8:	f00d fbb0 	bl	800e72c <gos_libGetBuildDate>

	if (bld_initData(&bldVerInfo) == GOS_SUCCESS)
 8000fcc:	4825      	ldr	r0, [pc, #148]	@ (8001064 <app_bld_init+0xac>)
 8000fce:	f00d ff0f 	bl	800edf0 <bld_initData>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b55      	cmp	r3, #85	@ 0x55
 8000fd6:	d137      	bne.n	8001048 <app_bld_init+0x90>
	{
		(void_t) bld_initConfig();
 8000fd8:	f00d ffcc 	bl	800ef74 <bld_initConfig>
		(void_t) svl_pdhGetBldCfg(&bldCfg);
 8000fdc:	4822      	ldr	r0, [pc, #136]	@ (8001068 <app_bld_init+0xb0>)
 8000fde:	f013 f85b 	bl	8014098 <svl_pdhGetBldCfg>
		(void_t) svl_pdhGetSwInfo(&swInfo);
 8000fe2:	4822      	ldr	r0, [pc, #136]	@ (800106c <app_bld_init+0xb4>)
 8000fe4:	f012 ffe8 	bl	8013fb8 <svl_pdhGetSwInfo>
		(void_t) bld_printConfig();
 8000fe8:	f00e f816 	bl	800f018 <bld_printConfig>

		if ((bldCfg.updateMode == GOS_TRUE) || (bldCfg.installRequested == GOS_TRUE))
 8000fec:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <app_bld_init+0xb0>)
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	2b36      	cmp	r3, #54	@ 0x36
 8000ff2:	d003      	beq.n	8000ffc <app_bld_init+0x44>
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <app_bld_init+0xb0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b36      	cmp	r3, #54	@ 0x36
 8000ffa:	d109      	bne.n	8001010 <app_bld_init+0x58>
		{
			// Increase startup counter (so next startup will skip boot mode enter).
			bldCfg.startupCounter++;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <app_bld_init+0xb0>)
 8000ffe:	795b      	ldrb	r3, [r3, #5]
 8001000:	3301      	adds	r3, #1
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <app_bld_init+0xb0>)
 8001006:	715a      	strb	r2, [r3, #5]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001008:	4817      	ldr	r0, [pc, #92]	@ (8001068 <app_bld_init+0xb0>)
 800100a:	f013 f925 	bl	8014258 <svl_pdhSetBldCfg>
 800100e:	e01d      	b.n	800104c <app_bld_init+0x94>
		}
		else
		{
			// Reset startup counter so next startup will enter boot mode if startup connection wait
			// flag is set.
			bldCfg.startupCounter = 0u;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <app_bld_init+0xb0>)
 8001012:	2200      	movs	r2, #0
 8001014:	715a      	strb	r2, [r3, #5]
			(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001016:	4814      	ldr	r0, [pc, #80]	@ (8001068 <app_bld_init+0xb0>)
 8001018:	f013 f91e 	bl	8014258 <svl_pdhSetBldCfg>

			// Check and jump to application.
			if (bld_checkApplication(&swInfo.appBinaryInfo, GOS_FALSE) == GOS_SUCCESS)
 800101c:	2149      	movs	r1, #73	@ 0x49
 800101e:	4814      	ldr	r0, [pc, #80]	@ (8001070 <app_bld_init+0xb8>)
 8001020:	f00d fdf2 	bl	800ec08 <bld_checkApplication>
 8001024:	4603      	mov	r3, r0
 8001026:	2b55      	cmp	r3, #85	@ 0x55
 8001028:	d104      	bne.n	8001034 <app_bld_init+0x7c>
			{
				initResult = bld_jumpToApplication();
 800102a:	f00d fe2f 	bl	800ec8c <bld_jumpToApplication>
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e00b      	b.n	800104c <app_bld_init+0x94>
			}
			else
			{
				// Application is corrupted or missing.
				// Switch to boot update mode.
				(void_t) gos_traceTraceFormattedUnsafe("Switching to update mode...\r\n\r\n");
 8001034:	480f      	ldr	r0, [pc, #60]	@ (8001074 <app_bld_init+0xbc>)
 8001036:	f00d f8c5 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
				bldCfg.updateMode = GOS_TRUE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <app_bld_init+0xb0>)
 800103c:	2236      	movs	r2, #54	@ 0x36
 800103e:	711a      	strb	r2, [r3, #4]
				(void_t) svl_pdhSetBldCfg(&bldCfg);
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <app_bld_init+0xb0>)
 8001042:	f013 f909 	bl	8014258 <svl_pdhSetBldCfg>
 8001046:	e001      	b.n	800104c <app_bld_init+0x94>
		}
	}
	else
	{
		// Flash read error.
		initResult = GOS_ERROR;
 8001048:	23ae      	movs	r3, #174	@ 0xae
 800104a:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 800104c:	79fb      	ldrb	r3, [r7, #7]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000001f 	.word	0x2000001f
 800105c:	20000021 	.word	0x20000021
 8001060:	20000022 	.word	0x20000022
 8001064:	20000014 	.word	0x20000014
 8001068:	2000140c 	.word	0x2000140c
 800106c:	2000141c 	.word	0x2000141c
 8001070:	200016b0 	.word	0x200016b0
 8001074:	08018de0 	.word	0x08018de0

08001078 <app_bldTaskInit>:

/*
 * Function: app_bldTaskInit
 */
gos_result_t app_bldTaskInit (void_t)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t bldTaskInitResult = GOS_SUCCESS;
 800107e:	2355      	movs	r3, #85	@ 0x55
 8001080:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	bldTaskInitResult &= gos_taskRegister(&bldTaskDesc, NULL);
 8001082:	2100      	movs	r1, #0
 8001084:	4808      	ldr	r0, [pc, #32]	@ (80010a8 <app_bldTaskInit+0x30>)
 8001086:	f009 f823 	bl	800a0d0 <gos_taskRegister>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4013      	ands	r3, r2
 8001092:	71fb      	strb	r3, [r7, #7]

	if (bldTaskInitResult != GOS_SUCCESS)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b55      	cmp	r3, #85	@ 0x55
 8001098:	d001      	beq.n	800109e <app_bldTaskInit+0x26>
	{
		bldTaskInitResult = GOS_ERROR;
 800109a:	23ae      	movs	r3, #174	@ 0xae
 800109c:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Initialization OK.
	}

	return bldTaskInitResult;
 800109e:	79fb      	ldrb	r3, [r7, #7]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b4 	.word	0x200000b4

080010ac <app_bldTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t app_bldTask (void_t)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	bld_state_t bldState;
	u32_t       sysTicks = gos_kernelGetSysTicks();
 80010b2:	f007 ffe9 	bl	8009088 <gos_kernelGetSysTicks>
 80010b6:	6078      	str	r0, [r7, #4]

	// Initial setting.
	drv_rtcTimeGet(&time, NULL);
 80010b8:	2100      	movs	r1, #0
 80010ba:	481c      	ldr	r0, [pc, #112]	@ (800112c <app_bldTask+0x80>)
 80010bc:	f000 fa3c 	bl	8001538 <drv_rtcTimeGet>
	gos_timeSet(&time);
 80010c0:	481a      	ldr	r0, [pc, #104]	@ (800112c <app_bldTask+0x80>)
 80010c2:	f00c fac3 	bl	800d64c <gos_timeSet>
    /*
     * Function code.
     */
    for (;;)
    {
    	(void_t) bld_stateMachineGetState(&bldState);
 80010c6:	1cfb      	adds	r3, r7, #3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00d fb81 	bl	800e7d0 <bld_stateMachineGetState>

    	switch (bldState)
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d009      	beq.n	80010e8 <app_bldTask+0x3c>
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10e      	bne.n	80010f6 <app_bldTask+0x4a>
    	{
    		case BLD_STATE_WAIT:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 80010d8:	2000      	movs	r0, #0
 80010da:	f00f f9a9 	bl	8010430 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(500);
 80010de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010e2:	f009 f987 	bl	800a3f4 <gos_taskSleep>
    			break;
 80010e6:	e00d      	b.n	8001104 <app_bldTask+0x58>
    		}
    		case BLD_STATE_INSTALL:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f00f f9a1 	bl	8010430 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(250);
 80010ee:	20fa      	movs	r0, #250	@ 0xfa
 80010f0:	f009 f980 	bl	800a3f4 <gos_taskSleep>
    	        break;
 80010f4:	e006      	b.n	8001104 <app_bldTask+0x58>
    		}
    		default:
    		{
    	        (void_t) drv_gpioTgglePin(IO_USER_LED);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f00f f99a 	bl	8010430 <drv_gpioTgglePin>
    	        (void_t) gos_taskSleep(100);
 80010fc:	2064      	movs	r0, #100	@ 0x64
 80010fe:	f009 f979 	bl	800a3f4 <gos_taskSleep>
    	        break;
 8001102:	bf00      	nop
    		}
    	}

    	if ((gos_kernelGetSysTicks() - sysTicks) > 1000)
 8001104:	f007 ffc0 	bl	8009088 <gos_kernelGetSysTicks>
 8001108:	4602      	mov	r2, r0
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001112:	d9d8      	bls.n	80010c6 <app_bldTask+0x1a>
    	{
    		sysTicks = gos_kernelGetSysTicks();
 8001114:	f007 ffb8 	bl	8009088 <gos_kernelGetSysTicks>
 8001118:	6078      	str	r0, [r7, #4]
    		drv_rtcTimeGet(&time, NULL);
 800111a:	2100      	movs	r1, #0
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <app_bldTask+0x80>)
 800111e:	f000 fa0b 	bl	8001538 <drv_rtcTimeGet>
    		gos_timeSet(&time);
 8001122:	4802      	ldr	r0, [pc, #8]	@ (800112c <app_bldTask+0x80>)
 8001124:	f00c fa92 	bl	800d64c <gos_timeSet>
    	(void_t) bld_stateMachineGetState(&bldState);
 8001128:	e7cd      	b.n	80010c6 <app_bldTask+0x1a>
 800112a:	bf00      	nop
 800112c:	200016bc 	.word	0x200016bc

08001130 <app_pdhBdSpecInit>:
	.readFunction  = app_pdhBdSpecRead,
	.writeFunction = app_pdhBdSpecWrite
};

gos_result_t app_pdhBdSpecInit (void_t)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	gos_result_t pdhBdSpecInitRes = GOS_SUCCESS;
 8001136:	2355      	movs	r3, #85	@ 0x55
 8001138:	71fb      	strb	r3, [r7, #7]

	pdhBdSpecInitRes &= drv_25lc640Init((void_t*)&mem01a1_eeprom2);
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <app_pdhBdSpecInit+0x40>)
 800113c:	f00d ff8e 	bl	800f05c <drv_25lc640Init>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4013      	ands	r3, r2
 8001148:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= svl_pdhConfigure(&pdhCfg);
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <app_pdhBdSpecInit+0x44>)
 800114c:	f012 fe86 	bl	8013e5c <svl_pdhConfigure>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4013      	ands	r3, r2
 8001158:	71fb      	strb	r3, [r7, #7]

	if (pdhBdSpecInitRes != GOS_SUCCESS)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b55      	cmp	r3, #85	@ 0x55
 800115e:	d001      	beq.n	8001164 <app_pdhBdSpecInit+0x34>
		pdhBdSpecInitRes = GOS_ERROR;
 8001160:	23ae      	movs	r3, #174	@ 0xae
 8001162:	71fb      	strb	r3, [r7, #7]

	return pdhBdSpecInitRes;
 8001164:	79fb      	ldrb	r3, [r7, #7]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000120 	.word	0x20000120
 8001174:	2000013c 	.word	0x2000013c

08001178 <app_pdhBdSpecRead>:

GOS_STATIC gos_result_t app_pdhBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	4613      	mov	r3, r2
 8001184:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Read((void_t*)&mem01a1_eeprom2, address, pData, size);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	b299      	uxth	r1, r3
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <app_pdhBdSpecRead+0x28>)
 8001190:	f00d ff92 	bl	800f0b8 <drv_25lc640Read>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000120 	.word	0x20000120

080011a4 <app_pdhBdSpecWrite>:

GOS_STATIC gos_result_t app_pdhBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	4613      	mov	r3, r2
 80011b0:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Write((void_t*)&mem01a1_eeprom2, address, pData, size);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	4804      	ldr	r0, [pc, #16]	@ (80011cc <app_pdhBdSpecWrite+0x28>)
 80011bc:	f00e f8a4 	bl	800f308 <drv_25lc640Write>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000120 	.word	0x20000120

080011d0 <app_sdhBdSpecInit>:
	.readFunction  = app_sdhBdSpecRead,
	.writeFunction = app_sdhBdSpecWrite
};

gos_result_t app_sdhBdSpecInit (void_t)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	gos_result_t sdhBdSpecInitRes = GOS_SUCCESS;
 80011d6:	2355      	movs	r3, #85	@ 0x55
 80011d8:	71fb      	strb	r3, [r7, #7]

	sdhBdSpecInitRes &= drv_w25q64Init((void_t*)&mem01a1flash);
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <app_sdhBdSpecInit+0x40>)
 80011dc:	f011 fc06 	bl	80129ec <drv_w25q64Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4013      	ands	r3, r2
 80011e8:	71fb      	strb	r3, [r7, #7]
	sdhBdSpecInitRes &= svl_sdhConfigure(&sdhCfg);
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <app_sdhBdSpecInit+0x44>)
 80011ec:	f013 fb7e 	bl	80148ec <svl_sdhConfigure>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4013      	ands	r3, r2
 80011f8:	71fb      	strb	r3, [r7, #7]

	if (sdhBdSpecInitRes != GOS_SUCCESS)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b55      	cmp	r3, #85	@ 0x55
 80011fe:	d001      	beq.n	8001204 <app_sdhBdSpecInit+0x34>
		sdhBdSpecInitRes = GOS_ERROR;
 8001200:	23ae      	movs	r3, #174	@ 0xae
 8001202:	71fb      	strb	r3, [r7, #7]

	return sdhBdSpecInitRes;
 8001204:	79fb      	ldrb	r3, [r7, #7]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000144 	.word	0x20000144
 8001214:	20000160 	.word	0x20000160

08001218 <app_sdhBdSpecRead>:

GOS_STATIC gos_result_t app_sdhBdSpecRead (u32_t address, u8_t* pData, u32_t size)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	drv_w25q64ReadData((void_t*)&mem01a1flash, address, pData, size);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4808      	ldr	r0, [pc, #32]	@ (800124c <app_sdhBdSpecRead+0x34>)
 800122c:	f011 fc0c 	bl	8012a48 <drv_w25q64ReadData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_READ) == 0u)
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <app_sdhBdSpecRead+0x34>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <app_sdhBdSpecRead+0x28>
	{
		return GOS_SUCCESS;
 800123c:	2355      	movs	r3, #85	@ 0x55
 800123e:	e000      	b.n	8001242 <app_sdhBdSpecRead+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001240:	23ae      	movs	r3, #174	@ 0xae
	}
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000144 	.word	0x20000144

08001250 <app_sdhBdSpecWrite>:

GOS_STATIC gos_result_t app_sdhBdSpecWrite (u32_t address, u8_t* pData, u32_t size)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	drv_w25q64WriteData((void_t*)&mem01a1flash, address, pData, size);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	4808      	ldr	r0, [pc, #32]	@ (8001284 <app_sdhBdSpecWrite+0x34>)
 8001264:	f011 fc46 	bl	8012af4 <drv_w25q64WriteData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_WRITE) == 0u)
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <app_sdhBdSpecWrite+0x34>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <app_sdhBdSpecWrite+0x28>
	{
		return GOS_SUCCESS;
 8001274:	2355      	movs	r3, #85	@ 0x55
 8001276:	e000      	b.n	800127a <app_sdhBdSpecWrite+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001278:	23ae      	movs	r3, #174	@ 0xae
	}
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000144 	.word	0x20000144

08001288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	return 1;
 800128c:	2301      	movs	r3, #1
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <_kill>:

int _kill(int pid, int sig)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012a2:	f015 fcdf 	bl	8016c64 <__errno>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2216      	movs	r2, #22
 80012aa:	601a      	str	r2, [r3, #0]
	return -1;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_exit>:

void _exit (int status)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffe7 	bl	8001298 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ca:	bf00      	nop
 80012cc:	e7fd      	b.n	80012ca <_exit+0x12>

080012ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e00a      	b.n	80012f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012e0:	f3af 8000 	nop.w
 80012e4:	4601      	mov	r1, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf0      	blt.n	80012e0 <_read+0x12>
	}

return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e009      	b.n	800132e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf1      	blt.n	800131a <_write+0x12>
	}
	return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_close>:

int _close(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001368:	605a      	str	r2, [r3, #4]
	return 0;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_isatty>:

int _isatty(int file)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	@ (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f015 fc44 	bl	8016c64 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20020000 	.word	0x20020000
 8001408:	00000400 	.word	0x00000400
 800140c:	200016c8 	.word	0x200016c8
 8001410:	20008980 	.word	0x20008980

08001414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800143c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	@ (8001478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
  ldr  r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001462:	f7ff ffd7 	bl	8001414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f015 fc03 	bl	8016c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f00a fb85 	bl	800bb78 <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001474:	0801ac18 	.word	0x0801ac18
  ldr  r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800147c:	200013f0 	.word	0x200013f0
  ldr  r2, =_sbss
 8001480:	200013f0 	.word	0x200013f0
  ldr  r3, = _ebss
 8001484:	2000897c 	.word	0x2000897c

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>
	...

0800148c <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8001492:	2355      	movs	r3, #85	@ 0x55
 8001494:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 8001496:	f000 f8cb 	bl	8001630 <rcc_driver_init>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4013      	ands	r3, r2
 80014a2:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 80014a4:	f010 f94c 	bl	8011740 <drv_tmrInit>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4013      	ands	r3, r2
 80014b0:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 80014b2:	f010 f907 	bl	80116c4 <drv_systimerStart>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4013      	ands	r3, r2
 80014be:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 80014c0:	f00e feba 	bl	8010238 <drv_gpioInit>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4013      	ands	r3, r2
 80014cc:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_i2cInit();
 80014ce:	f00f f8c7 	bl	8010660 <drv_i2cInit>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b25a      	sxtb	r2, r3
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	4013      	ands	r3, r2
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_spiInit();
 80014e0:	f00f fc24 	bl	8010d2c <drv_spiInit>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4013      	ands	r3, r2
 80014ec:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_dmaInit();
 80014ee:	f00e f8c3 	bl	800f678 <drv_dmaInit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4013      	ands	r3, r2
 80014fa:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 80014fc:	f010 fd18 	bl	8011f30 <drv_uartInit>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4013      	ands	r3, r2
 8001508:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 800150a:	f00f fbc1 	bl	8010c90 <drv_itInit>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4013      	ands	r3, r2
 8001516:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <driver_init+0x9c>)
 800151a:	f007 fd61 	bl	8008fe0 <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 800151e:	79fb      	ldrb	r3, [r7, #7]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	0800152d 	.word	0x0800152d

0800152c <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001530:	f000 fb1c 	bl	8001b6c <HAL_IncTick>
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <drv_rtcTimeGet>:

/*
 * Function: drv_rtcTimeGet
 */
gos_result_t drv_rtcTimeGet (gos_time_t* pTime, u8_t* dow)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t getTimeResult = GOS_ERROR;
 8001542:	23ae      	movs	r3, #174	@ 0xae
 8001544:	73fb      	strb	r3, [r7, #15]
	u8_t         time [7];

	/*
	 * Function code.
	 */
	if (pTime != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d053      	beq.n	80015f4 <drv_rtcTimeGet+0xbc>
	{
		getTimeResult = drv_i2cMemRead(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 100);
 800154c:	2364      	movs	r3, #100	@ 0x64
 800154e:	9303      	str	r3, [sp, #12]
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2307      	movs	r3, #7
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	2200      	movs	r2, #0
 8001564:	21d0      	movs	r1, #208	@ 0xd0
 8001566:	2000      	movs	r0, #0
 8001568:	f00f f9b2 	bl	80108d0 <drv_i2cMemRead>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]

		if (getTimeResult == GOS_SUCCESS)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b55      	cmp	r3, #85	@ 0x55
 8001574:	d13e      	bne.n	80015f4 <drv_rtcTimeGet+0xbc>
		{
			pTime->seconds = drv_rtcBcd2dec(time[0]);
 8001576:	7a3b      	ldrb	r3, [r7, #8]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f840 	bl	80015fe <drv_rtcBcd2dec>
 800157e:	4603      	mov	r3, r0
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	709a      	strb	r2, [r3, #2]
			pTime->minutes = drv_rtcBcd2dec(time[1]);
 8001586:	7a7b      	ldrb	r3, [r7, #9]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f838 	bl	80015fe <drv_rtcBcd2dec>
 800158e:	4603      	mov	r3, r0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	70da      	strb	r2, [r3, #3]
			pTime->hours   = drv_rtcBcd2dec(time[2]);
 8001596:	7abb      	ldrb	r3, [r7, #10]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f830 	bl	80015fe <drv_rtcBcd2dec>
 800159e:	4603      	mov	r3, r0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	711a      	strb	r2, [r3, #4]
			if (dow != NULL)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <drv_rtcTimeGet+0x84>
			{
				*dow = drv_rtcBcd2dec(time[3]);
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f825 	bl	80015fe <drv_rtcBcd2dec>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	701a      	strb	r2, [r3, #0]
			}
			pTime->days    = drv_rtcBcd2dec(time[4]);
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f81d 	bl	80015fe <drv_rtcBcd2dec>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8a3 2005 	strh.w	r2, [r3, #5]
			pTime->months  = drv_rtcBcd2dec(time[5]);
 80015ce:	7b7b      	ldrb	r3, [r7, #13]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f814 	bl	80015fe <drv_rtcBcd2dec>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	71da      	strb	r2, [r3, #7]
			pTime->years   = 2000 + drv_rtcBcd2dec(time[6]);
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f80c 	bl	80015fe <drv_rtcBcd2dec>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	811a      	strh	r2, [r3, #8]
	else
	{
		// NULL pointer.
	}

	return getTimeResult;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <drv_rtcBcd2dec>:
	return (u8_t)((dec / 10 * 16) + (dec % 10));
}

// TODO
GOS_STATIC u32_t drv_rtcBcd2dec (u8_t bcd)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	return (u32_t)((bcd / 16 * 10) + (bcd % 16));
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	461a      	mov	r2, r3
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	4413      	add	r3, r2
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0ac      	sub	sp, #176	@ 0xb0
 8001634:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8001636:	23ae      	movs	r3, #174	@ 0xae
 8001638:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001640:	2234      	movs	r2, #52	@ 0x34
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f015 faab 	bl	8016ba0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	663b      	str	r3, [r7, #96]	@ 0x60
 800165e:	4ba3      	ldr	r3, [pc, #652]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4aa2      	ldr	r2, [pc, #648]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4ba0      	ldr	r3, [pc, #640]	@ (80018ec <rcc_driver_init+0x2bc>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	663b      	str	r3, [r7, #96]	@ 0x60
 8001674:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001676:	2300      	movs	r3, #0
 8001678:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800167a:	4b9d      	ldr	r3, [pc, #628]	@ (80018f0 <rcc_driver_init+0x2c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001682:	4a9b      	ldr	r2, [pc, #620]	@ (80018f0 <rcc_driver_init+0x2c0>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b99      	ldr	r3, [pc, #612]	@ (80018f0 <rcc_driver_init+0x2c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001692:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001696:	2301      	movs	r3, #1
 8001698:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800169a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800169e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_OscInitStruct.PLL.PLLM = 4;
 80016ae:	2304      	movs	r3, #4
 80016b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	RCC_OscInitStruct.PLL.PLLN = 50;
 80016b4:	2332      	movs	r3, #50	@ 0x32
 80016b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	RCC_OscInitStruct.PLL.PLLR = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 80016cc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 fe85 	bl	80053e0 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d116      	bne.n	800170a <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	667b      	str	r3, [r7, #100]	@ 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2302      	movs	r3, #2
 80016e2:	66bb      	str	r3, [r7, #104]	@ 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	673b      	str	r3, [r7, #112]	@ 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	677b      	str	r3, [r7, #116]	@ 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 80016f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016f6:	2101      	movs	r1, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fa2f 	bl	8004b5c <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 8001704:	2355      	movs	r3, #85	@ 0x55
 8001706:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800170e:	4b77      	ldr	r3, [pc, #476]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a76      	ldr	r2, [pc, #472]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b74      	ldr	r3, [pc, #464]	@ (80018ec <rcc_driver_init+0x2bc>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	657b      	str	r3, [r7, #84]	@ 0x54
 800172a:	4b70      	ldr	r3, [pc, #448]	@ (80018ec <rcc_driver_init+0x2bc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a6f      	ldr	r2, [pc, #444]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b6d      	ldr	r3, [pc, #436]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	653b      	str	r3, [r7, #80]	@ 0x50
 8001746:	4b69      	ldr	r3, [pc, #420]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a68      	ldr	r2, [pc, #416]	@ (80018ec <rcc_driver_init+0x2bc>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b66      	ldr	r3, [pc, #408]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	653b      	str	r3, [r7, #80]	@ 0x50
 800175c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001762:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a61      	ldr	r2, [pc, #388]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b5f      	ldr	r3, [pc, #380]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800177e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a5a      	ldr	r2, [pc, #360]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <rcc_driver_init+0x2bc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	647b      	str	r3, [r7, #68]	@ 0x44
 800179a:	4b54      	ldr	r3, [pc, #336]	@ (80018ec <rcc_driver_init+0x2bc>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a53      	ldr	r2, [pc, #332]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b51      	ldr	r3, [pc, #324]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80017b6:	4b4d      	ldr	r3, [pc, #308]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a4c      	ldr	r2, [pc, #304]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b4a      	ldr	r3, [pc, #296]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80017cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017d2:	4b46      	ldr	r3, [pc, #280]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a45      	ldr	r2, [pc, #276]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017ee:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	4a3e      	ldr	r2, [pc, #248]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fa:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <rcc_driver_init+0x2bc>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	@ 0x34
 800180a:	4b38      	ldr	r3, [pc, #224]	@ (80018ec <rcc_driver_init+0x2bc>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	4a37      	ldr	r2, [pc, #220]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001810:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001814:	6413      	str	r3, [r2, #64]	@ 0x40
 8001816:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800181e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a30      	ldr	r2, [pc, #192]	@ (80018ec <rcc_driver_init+0x2bc>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
 800183c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001842:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a29      	ldr	r2, [pc, #164]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <rcc_driver_init+0x2bc>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <rcc_driver_init+0x2bc>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <rcc_driver_init+0x2bc>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <rcc_driver_init+0x2bc>)
 800189c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	4a06      	ldr	r2, [pc, #24]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <rcc_driver_init+0x2bc>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e003      	b.n	80018f4 <rcc_driver_init+0x2c4>
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <rcc_driver_init+0x358>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	4a23      	ldr	r2, [pc, #140]	@ (8001988 <rcc_driver_init+0x358>)
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <rcc_driver_init+0x358>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <rcc_driver_init+0x358>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	4a1c      	ldr	r2, [pc, #112]	@ (8001988 <rcc_driver_init+0x358>)
 8001916:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800191a:	6413      	str	r3, [r2, #64]	@ 0x40
 800191c:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <rcc_driver_init+0x358>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <rcc_driver_init+0x358>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <rcc_driver_init+0x358>)
 8001932:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001936:	6413      	str	r3, [r2, #64]	@ 0x40
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <rcc_driver_init+0x358>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <rcc_driver_init+0x358>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <rcc_driver_init+0x358>)
 800194e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <rcc_driver_init+0x358>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <rcc_driver_init+0x358>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <rcc_driver_init+0x358>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <rcc_driver_init+0x358>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

	return initResult;
 800197c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
}
 8001980:	4618      	mov	r0, r3
 8001982:	37b0      	adds	r7, #176	@ 0xb0
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800

0800198c <trace_driverEnqueueTraceMessage>:

GOS_STATIC trace_entry_t traceEntries [TRACE_ENTRY_MAX_NUM];
GOS_STATIC u8_t          nextEntryIndex = 0u;

gos_result_t trace_driverEnqueueTraceMessage (const char_t* message, gos_result_t result)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
	if (nextEntryIndex < TRACE_ENTRY_MAX_NUM)
 8001998:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <trace_driverEnqueueTraceMessage+0x60>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b0b      	cmp	r3, #11
 800199e:	d820      	bhi.n	80019e2 <trace_driverEnqueueTraceMessage+0x56>
	{
		(void_t) strcpy(traceEntries[nextEntryIndex].message, message);
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <trace_driverEnqueueTraceMessage+0x60>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	00da      	lsls	r2, r3, #3
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <trace_driverEnqueueTraceMessage+0x64>)
 80019b2:	4413      	add	r3, r2
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f015 f981 	bl	8016cbe <strcpy>
		traceEntries[nextEntryIndex].result = result;
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <trace_driverEnqueueTraceMessage+0x60>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	490b      	ldr	r1, [pc, #44]	@ (80019f0 <trace_driverEnqueueTraceMessage+0x64>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	00da      	lsls	r2, r3, #3
 80019cc:	1ad2      	subs	r2, r2, r3
 80019ce:	188b      	adds	r3, r1, r2
 80019d0:	3330      	adds	r3, #48	@ 0x30
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	701a      	strb	r2, [r3, #0]
		nextEntryIndex++;
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <trace_driverEnqueueTraceMessage+0x60>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <trace_driverEnqueueTraceMessage+0x60>)
 80019e0:	701a      	strb	r2, [r3, #0]
	else
	{
		// Trace queue full.
	}

	return result;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20001924 	.word	0x20001924
 80019f0:	200016d8 	.word	0x200016d8

080019f4 <trace_driverFlushTraceEntries>:

void_t trace_driverFlushTraceEntries (void_t)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	u8_t traceIndex = 0u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]

	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	e017      	b.n	8001a34 <trace_driverFlushTraceEntries+0x40>
	{
		(void_t) gos_errorTraceInit(traceEntries[traceIndex].message, traceEntries[traceIndex].result);
 8001a04:	79fa      	ldrb	r2, [r7, #7]
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	00da      	lsls	r2, r3, #3
 8001a0e:	1ad2      	subs	r2, r2, r3
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <trace_driverFlushTraceEntries+0x58>)
 8001a12:	18d0      	adds	r0, r2, r3
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <trace_driverFlushTraceEntries+0x58>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	00da      	lsls	r2, r3, #3
 8001a20:	1ad2      	subs	r2, r2, r3
 8001a22:	188b      	adds	r3, r1, r2
 8001a24:	3330      	adds	r3, #48	@ 0x30
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f00a fa51 	bl	800bed0 <gos_errorTraceInit>
	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	3301      	adds	r3, #1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <trace_driverFlushTraceEntries+0x5c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	79fa      	ldrb	r2, [r7, #7]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3e2      	bcc.n	8001a04 <trace_driverFlushTraceEntries+0x10>
	}

	nextEntryIndex = 0u;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <trace_driverFlushTraceEntries+0x5c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200016d8 	.word	0x200016d8
 8001a50:	20001924 	.word	0x20001924

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a94 <HAL_Init+0x40>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <HAL_Init+0x40>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <HAL_Init+0x40>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f965 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f842 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f000 f832 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_DeInit+0x54>)
 8001a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_DeInit+0x54>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_DeInit+0x54>)
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_DeInit+0x54>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_DeInit+0x54>)
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295
 8001abe:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_DeInit+0x54>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_DeInit+0x54>)
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <HAL_DeInit+0x54>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_DeInit+0x54>)
 8001ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8001ada:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_DeInit+0x54>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001ae2:	f000 f80c 	bl	8001afe <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_InitTick+0x54>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_InitTick+0x58>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f943 	bl	8001db6 <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f90b 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <HAL_InitTick+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000168 	.word	0x20000168
 8001b64:	200003fc 	.word	0x200003fc
 8001b68:	200003f8 	.word	0x200003f8

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200003fc 	.word	0x200003fc
 8001b90:	20001928 	.word	0x20001928

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20001928 	.word	0x20001928

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	@ (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	@ (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff feda 	bl	8001b94 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e099      	b.n	8001f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0e:	f7ff fec1 	bl	8001b94 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d908      	bls.n	8001e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e078      	b.n	8001f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e8      	bne.n	8001e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <HAL_DMA_Init+0x158>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	4313      	orrs	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d117      	bne.n	8001ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb1b 	bl	8002510 <DMA_CheckFifoParam>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fad2 	bl	80024a4 <DMA_CalcBaseAndBitshift>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f08:	223f      	movs	r2, #63	@ 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	f010803f 	.word	0xf010803f

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Start_IT+0x26>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e040      	b.n	8001fd4 <HAL_DMA_Start_IT+0xa8>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d12f      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fa64 	bl	8002448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	223f      	movs	r2, #63	@ 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0216 	orr.w	r2, r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fea:	f7ff fdd3 	bl	8001b94 <HAL_GetTick>
 8001fee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d008      	beq.n	800200e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e052      	b.n	80020b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0216 	bic.w	r2, r2, #22
 800201c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800202c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_DMA_Abort+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0208 	bic.w	r2, r2, #8
 800204c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0201 	bic.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205e:	e013      	b.n	8002088 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002060:	f7ff fd98 	bl	8001b94 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b05      	cmp	r3, #5
 800206c:	d90c      	bls.n	8002088 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e015      	b.n	80020b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1e4      	bne.n	8002060 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	223f      	movs	r2, #63	@ 0x3f
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d004      	beq.n	80020da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2280      	movs	r2, #128	@ 0x80
 80020d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00c      	b.n	80020f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2205      	movs	r2, #5
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800210c:	4b8e      	ldr	r3, [pc, #568]	@ (8002348 <HAL_DMA_IRQHandler+0x248>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a8e      	ldr	r2, [pc, #568]	@ (800234c <HAL_DMA_IRQHandler+0x24c>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0a9b      	lsrs	r3, r3, #10
 8002118:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212a:	2208      	movs	r2, #8
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01a      	beq.n	800216c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0204 	bic.w	r2, r2, #4
 8002152:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	2208      	movs	r2, #8
 800215a:	409a      	lsls	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	2201      	movs	r2, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d012      	beq.n	80021a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218e:	2201      	movs	r2, #1
 8002190:	409a      	lsls	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219a:	f043 0202 	orr.w	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	2204      	movs	r2, #4
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d012      	beq.n	80021d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00b      	beq.n	80021d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	2204      	movs	r2, #4
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d0:	f043 0204 	orr.w	r2, r3, #4
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	2210      	movs	r2, #16
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d043      	beq.n	8002270 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d03c      	beq.n	8002270 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fa:	2210      	movs	r2, #16
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d018      	beq.n	8002242 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d024      	beq.n	8002270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	4798      	blx	r3
 800222e:	e01f      	b.n	8002270 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
 8002240:	e016      	b.n	8002270 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0208 	bic.w	r2, r2, #8
 800225e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	2220      	movs	r2, #32
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 808f 	beq.w	80023a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8087 	beq.w	80023a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	2220      	movs	r2, #32
 8002298:	409a      	lsls	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d136      	bne.n	8002318 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0216 	bic.w	r2, r2, #22
 80022b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <HAL_DMA_IRQHandler+0x1da>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0208 	bic.w	r2, r2, #8
 80022e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	223f      	movs	r2, #63	@ 0x3f
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800230a:	2b00      	cmp	r3, #0
 800230c:	d07e      	beq.n	800240c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
        }
        return;
 8002316:	e079      	b.n	800240c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d01d      	beq.n	8002362 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10d      	bne.n	8002350 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002338:	2b00      	cmp	r3, #0
 800233a:	d031      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	4798      	blx	r3
 8002344:	e02c      	b.n	80023a0 <HAL_DMA_IRQHandler+0x2a0>
 8002346:	bf00      	nop
 8002348:	20000168 	.word	0x20000168
 800234c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d023      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
 8002360:	e01e      	b.n	80023a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0210 	bic.w	r2, r2, #16
 800237e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d032      	beq.n	800240e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d022      	beq.n	80023fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2205      	movs	r2, #5
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	3301      	adds	r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d307      	bcc.n	80023e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f2      	bne.n	80023cc <HAL_DMA_IRQHandler+0x2cc>
 80023e6:	e000      	b.n	80023ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023e8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
 800240a:	e000      	b.n	800240e <HAL_DMA_IRQHandler+0x30e>
        return;
 800240c:	bf00      	nop
    }
  }
}
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002422:	b2db      	uxtb	r3, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b40      	cmp	r3, #64	@ 0x40
 8002474:	d108      	bne.n	8002488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002486:	e007      	b.n	8002498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3b10      	subs	r3, #16
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <DMA_CalcBaseAndBitshift+0x64>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024be:	4a13      	ldr	r2, [pc, #76]	@ (800250c <DMA_CalcBaseAndBitshift+0x68>)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d909      	bls.n	80024e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024e4:	e007      	b.n	80024f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	aaaaaaab 	.word	0xaaaaaaab
 800250c:	0801a6c8 	.word	0x0801a6c8

08002510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d856      	bhi.n	80025de <DMA_CheckFifoParam+0xce>
 8002530:	a201      	add	r2, pc, #4	@ (adr r2, 8002538 <DMA_CheckFifoParam+0x28>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800255b 	.word	0x0800255b
 8002540:	08002549 	.word	0x08002549
 8002544:	080025df 	.word	0x080025df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d046      	beq.n	80025e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e043      	b.n	80025e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002562:	d140      	bne.n	80025e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e03d      	b.n	80025e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002572:	d121      	bne.n	80025b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d837      	bhi.n	80025ea <DMA_CheckFifoParam+0xda>
 800257a:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <DMA_CheckFifoParam+0x70>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002597 	.word	0x08002597
 8002588:	08002591 	.word	0x08002591
 800258c:	080025a9 	.word	0x080025a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e030      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d025      	beq.n	80025ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e022      	b.n	80025ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025b0:	d11f      	bne.n	80025f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b6:	e01c      	b.n	80025f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d903      	bls.n	80025c6 <DMA_CheckFifoParam+0xb6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c4:	e018      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ca:	e015      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e00b      	b.n	80025f6 <DMA_CheckFifoParam+0xe6>
      break;
 80025de:	bf00      	nop
 80025e0:	e00a      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e008      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e006      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e004      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
    }
  } 
  
  return status; 
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800261a:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <HAL_FLASH_Program+0xa0>)
 800261c:	7e1b      	ldrb	r3, [r3, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_FLASH_Program+0x1e>
 8002622:	2302      	movs	r3, #2
 8002624:	e03b      	b.n	800269e <HAL_FLASH_Program+0x96>
 8002626:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_FLASH_Program+0xa0>)
 8002628:	2201      	movs	r2, #1
 800262a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800262c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002630:	f000 f870 	bl	8002714 <FLASH_WaitForLastOperation>
 8002634:	4603      	mov	r3, r0
 8002636:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d12b      	bne.n	8002696 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002644:	783b      	ldrb	r3, [r7, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	68b8      	ldr	r0, [r7, #8]
 800264a:	f000 f91b 	bl	8002884 <FLASH_Program_Byte>
 800264e:	e016      	b.n	800267e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d105      	bne.n	8002662 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002656:	883b      	ldrh	r3, [r7, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	68b8      	ldr	r0, [r7, #8]
 800265c:	f000 f8ee 	bl	800283c <FLASH_Program_HalfWord>
 8002660:	e00d      	b.n	800267e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d105      	bne.n	8002674 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4619      	mov	r1, r3
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	f000 f8c3 	bl	80027f8 <FLASH_Program_Word>
 8002672:	e004      	b.n	800267e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002678:	68b8      	ldr	r0, [r7, #8]
 800267a:	f000 f88b 	bl	8002794 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800267e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002682:	f000 f847 	bl	8002714 <FLASH_WaitForLastOperation>
 8002686:	4603      	mov	r3, r0
 8002688:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_FLASH_Program+0xa4>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4a07      	ldr	r2, [pc, #28]	@ (80026ac <HAL_FLASH_Program+0xa4>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002696:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <HAL_FLASH_Program+0xa0>)
 8002698:	2200      	movs	r2, #0
 800269a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800269c:	7dfb      	ldrb	r3, [r7, #23]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000192c 	.word	0x2000192c
 80026ac:	40023c00 	.word	0x40023c00

080026b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_FLASH_Unlock+0x38>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	da0b      	bge.n	80026da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_FLASH_Unlock+0x38>)
 80026c4:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_FLASH_Unlock+0x3c>)
 80026c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_FLASH_Unlock+0x38>)
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_FLASH_Unlock+0x40>)
 80026cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_FLASH_Unlock+0x38>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da01      	bge.n	80026da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80026da:	79fb      	ldrb	r3, [r7, #7]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	45670123 	.word	0x45670123
 80026f0:	cdef89ab 	.word	0xcdef89ab

080026f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_FLASH_Lock+0x1c>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <HAL_FLASH_Lock+0x1c>)
 80026fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002702:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40023c00 	.word	0x40023c00

08002714 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002720:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <FLASH_WaitForLastOperation+0x78>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002726:	f7ff fa35 	bl	8001b94 <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800272c:	e010      	b.n	8002750 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d00c      	beq.n	8002750 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <FLASH_WaitForLastOperation+0x38>
 800273c:	f7ff fa2a 	bl	8001b94 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d201      	bcs.n	8002750 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e019      	b.n	8002784 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <FLASH_WaitForLastOperation+0x7c>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e8      	bne.n	800272e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <FLASH_WaitForLastOperation+0x7c>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002768:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <FLASH_WaitForLastOperation+0x7c>)
 800276a:	2201      	movs	r2, #1
 800276c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <FLASH_WaitForLastOperation+0x7c>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800277a:	f000 f8a5 	bl	80028c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
  
}  
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000192c 	.word	0x2000192c
 8002790:	40023c00 	.word	0x40023c00

08002794 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <FLASH_Program_DoubleWord+0x60>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <FLASH_Program_DoubleWord+0x60>)
 80027a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <FLASH_Program_DoubleWord+0x60>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	4a10      	ldr	r2, [pc, #64]	@ (80027f4 <FLASH_Program_DoubleWord+0x60>)
 80027b2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80027b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	@ (80027f4 <FLASH_Program_DoubleWord+0x60>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	4a0d      	ldr	r2, [pc, #52]	@ (80027f4 <FLASH_Program_DoubleWord+0x60>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80027ca:	f3bf 8f6f 	isb	sy
}
 80027ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80027d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	000a      	movs	r2, r1
 80027de:	2300      	movs	r3, #0
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	3104      	adds	r1, #4
 80027e4:	4613      	mov	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40023c00 	.word	0x40023c00

080027f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002802:	4b0d      	ldr	r3, [pc, #52]	@ (8002838 <FLASH_Program_Word+0x40>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	4a0c      	ldr	r2, [pc, #48]	@ (8002838 <FLASH_Program_Word+0x40>)
 8002808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <FLASH_Program_Word+0x40>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	4a09      	ldr	r2, [pc, #36]	@ (8002838 <FLASH_Program_Word+0x40>)
 8002814:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002818:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800281a:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <FLASH_Program_Word+0x40>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	4a06      	ldr	r2, [pc, #24]	@ (8002838 <FLASH_Program_Word+0x40>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40023c00 	.word	0x40023c00

0800283c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002848:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <FLASH_Program_HalfWord+0x44>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	4a0c      	ldr	r2, [pc, #48]	@ (8002880 <FLASH_Program_HalfWord+0x44>)
 800284e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002854:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <FLASH_Program_HalfWord+0x44>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <FLASH_Program_HalfWord+0x44>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800285e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002860:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <FLASH_Program_HalfWord+0x44>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <FLASH_Program_HalfWord+0x44>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	801a      	strh	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023c00 	.word	0x40023c00

08002884 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <FLASH_Program_Byte+0x40>)
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4a0b      	ldr	r2, [pc, #44]	@ (80028c4 <FLASH_Program_Byte+0x40>)
 8002896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800289a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <FLASH_Program_Byte+0x40>)
 800289e:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <FLASH_Program_Byte+0x40>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <FLASH_Program_Byte+0x40>)
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	4a06      	ldr	r2, [pc, #24]	@ (80028c4 <FLASH_Program_Byte+0x40>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	701a      	strb	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80028cc:	4b2f      	ldr	r3, [pc, #188]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f043 0310 	orr.w	r3, r3, #16
 80028e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 80028e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 80028e6:	2210      	movs	r2, #16
 80028e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80028ea:	4b28      	ldr	r3, [pc, #160]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80028f6:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 8002900:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002902:	4b22      	ldr	r3, [pc, #136]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 8002904:	2220      	movs	r2, #32
 8002906:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002908:	4b20      	ldr	r3, [pc, #128]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002914:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 800291e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002920:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 8002922:	2240      	movs	r2, #64	@ 0x40
 8002924:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002926:	4b19      	ldr	r3, [pc, #100]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002932:	4b17      	ldr	r3, [pc, #92]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	4a15      	ldr	r2, [pc, #84]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 800293c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800293e:	4b13      	ldr	r3, [pc, #76]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 8002940:	2280      	movs	r2, #128	@ 0x80
 8002942:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002950:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	4a0d      	ldr	r2, [pc, #52]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 800295a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 800295e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002962:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002970:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f043 0320 	orr.w	r3, r3, #32
 8002978:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <FLASH_SetErrorCode+0xc8>)
 800297a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <FLASH_SetErrorCode+0xc4>)
 800297e:	2202      	movs	r2, #2
 8002980:	60da      	str	r2, [r3, #12]
  }
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40023c00 	.word	0x40023c00
 8002990:	2000192c 	.word	0x2000192c

08002994 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029a6:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_FLASHEx_Erase+0xd8>)
 80029a8:	7e1b      	ldrb	r3, [r3, #24]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_FLASHEx_Erase+0x1e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e058      	b.n	8002a64 <HAL_FLASHEx_Erase+0xd0>
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_FLASHEx_Erase+0xd8>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029bc:	f7ff feaa 	bl	8002714 <FLASH_WaitForLastOperation>
 80029c0:	4603      	mov	r3, r0
 80029c2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d148      	bne.n	8002a5c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d115      	bne.n	8002a06 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 f844 	bl	8002a74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80029f0:	f7ff fe90 	bl	8002714 <FLASH_WaitForLastOperation>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 80029fe:	f023 0304 	bic.w	r3, r3, #4
 8002a02:	6113      	str	r3, [r2, #16]
 8002a04:	e028      	b.n	8002a58 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	e01c      	b.n	8002a48 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	4619      	mov	r1, r3
 8002a16:	68b8      	ldr	r0, [r7, #8]
 8002a18:	f000 f850 	bl	8002abc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a20:	f7ff fe78 	bl	8002714 <FLASH_WaitForLastOperation>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	4a10      	ldr	r2, [pc, #64]	@ (8002a70 <HAL_FLASHEx_Erase+0xdc>)
 8002a2e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002a32:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	601a      	str	r2, [r3, #0]
          break;
 8002a40:	e00a      	b.n	8002a58 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4413      	add	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d3da      	bcc.n	8002a0e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002a58:	f000 f878 	bl	8002b4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <HAL_FLASHEx_Erase+0xd8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	761a      	strb	r2, [r3, #24]

  return status;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000192c 	.word	0x2000192c
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a80:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <FLASH_MassErase+0x44>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <FLASH_MassErase+0x44>)
 8002a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <FLASH_MassErase+0x44>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <FLASH_MassErase+0x44>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <FLASH_MassErase+0x44>)
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <FLASH_MassErase+0x44>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6113      	str	r3, [r2, #16]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e010      	b.n	8002afa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d103      	bne.n	8002ae6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e009      	b.n	8002afa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d103      	bne.n	8002af4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e002      	b.n	8002afa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002af4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002afa:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	4a12      	ldr	r2, [pc, #72]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002b06:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	490f      	ldr	r1, [pc, #60]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b18:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002b1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a07      	ldr	r2, [pc, #28]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <FLASH_Erase_Sector+0x8c>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3a:	6113      	str	r3, [r2, #16]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002b50:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d017      	beq.n	8002b8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b62:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b68:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b6e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b17      	ldr	r3, [pc, #92]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b80:	4b14      	ldr	r3, [pc, #80]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b8a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d017      	beq.n	8002bc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b98:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002b9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002baa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <FLASH_FlushCaches+0x88>)
 8002bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc6:	6013      	str	r3, [r2, #0]
  }
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e165      	b.n	8002ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 8154 	bne.w	8002eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00b      	beq.n	8002c32 <HAL_GPIO_Init+0x5a>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0xfc>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80ae 	beq.w	8002eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7a:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <HAL_GPIO_Init+0x304>)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <HAL_GPIO_Init+0x308>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d025      	beq.n	8002df2 <HAL_GPIO_Init+0x21a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01f      	beq.n	8002dee <HAL_GPIO_Init+0x216>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee8 <HAL_GPIO_Init+0x310>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_GPIO_Init+0x212>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	@ (8002eec <HAL_GPIO_Init+0x314>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef0 <HAL_GPIO_Init+0x318>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x20a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <HAL_GPIO_Init+0x31c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x206>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	@ (8002ef8 <HAL_GPIO_Init+0x320>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x202>
 8002dd6:	2306      	movs	r3, #6
 8002dd8:	e00c      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dda:	2307      	movs	r3, #7
 8002ddc:	e00a      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dde:	2305      	movs	r3, #5
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_GPIO_Init+0x304>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e12:	4b3a      	ldr	r3, [pc, #232]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e36:	4a31      	ldr	r2, [pc, #196]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e60:	4a26      	ldr	r2, [pc, #152]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f ae96 	bls.w	8002bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f10:	787b      	ldrb	r3, [r7, #1]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f1c:	e003      	b.n	8002f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	401a      	ands	r2, r3
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d104      	bne.n	8002f56 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	041a      	lsls	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	619a      	str	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f72:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f7e:	4a05      	ldr	r2, [pc, #20]	@ (8002f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f00d fb0e 	bl	80105a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40013c00 	.word	0x40013c00

08002f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e12b      	b.n	8003202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f00d fde6 	bl	8010b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f001 fea0 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a81      	ldr	r2, [pc, #516]	@ (800320c <HAL_I2C_Init+0x274>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d807      	bhi.n	800301c <HAL_I2C_Init+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a80      	ldr	r2, [pc, #512]	@ (8003210 <HAL_I2C_Init+0x278>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e006      	b.n	800302a <HAL_I2C_Init+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a7d      	ldr	r2, [pc, #500]	@ (8003214 <HAL_I2C_Init+0x27c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0e7      	b.n	8003202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4a78      	ldr	r2, [pc, #480]	@ (8003218 <HAL_I2C_Init+0x280>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0c9b      	lsrs	r3, r3, #18
 800303c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_I2C_Init+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d802      	bhi.n	800306c <HAL_I2C_Init+0xd4>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3301      	adds	r3, #1
 800306a:	e009      	b.n	8003080 <HAL_I2C_Init+0xe8>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a69      	ldr	r2, [pc, #420]	@ (800321c <HAL_I2C_Init+0x284>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	3301      	adds	r3, #1
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	430b      	orrs	r3, r1
 8003086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003092:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	495c      	ldr	r1, [pc, #368]	@ (800320c <HAL_I2C_Init+0x274>)
 800309c:	428b      	cmp	r3, r1
 800309e:	d819      	bhi.n	80030d4 <HAL_I2C_Init+0x13c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1e59      	subs	r1, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030b4:	400b      	ands	r3, r1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_I2C_Init+0x138>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1e59      	subs	r1, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	e051      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d0:	2304      	movs	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x168>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x18e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x196>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1bc>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1dc>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e021      	b.n	8003276 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2224      	movs	r2, #36	@ 0x24
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f817 	bl	800327e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	f040 809a 	bne.w	80033f4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032c0:	4b50      	ldr	r3, [pc, #320]	@ (8003404 <HAL_I2C_Mem_Read_IT+0x170>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	4a50      	ldr	r2, [pc, #320]	@ (8003408 <HAL_I2C_Mem_Read_IT+0x174>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0a1a      	lsrs	r2, r3, #8
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009a      	lsls	r2, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3b01      	subs	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e070      	b.n	80033f6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d0db      	beq.n	80032da <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_I2C_Mem_Read_IT+0x9c>
 800332c:	2302      	movs	r3, #2
 800332e:	e062      	b.n	80033f6 <HAL_I2C_Mem_Read_IT+0x162>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d007      	beq.n	8003356 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003364:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2222      	movs	r2, #34	@ 0x22
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2240      	movs	r2, #64	@ 0x40
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a1d      	ldr	r2, [pc, #116]	@ (800340c <HAL_I2C_Mem_Read_IT+0x178>)
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003398:	897a      	ldrh	r2, [r7, #10]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800339e:	893a      	ldrh	r2, [r7, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033be:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ce:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80033ee:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000168 	.word	0x20000168
 8003408:	14f8b589 	.word	0x14f8b589
 800340c:	ffff0000 	.word	0xffff0000

08003410 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003422:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d138      	bne.n	80034a4 <HAL_I2C_Master_Abort_IT+0x94>
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b10      	cmp	r3, #16
 8003436:	d135      	bne.n	80034a4 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Master_Abort_IT+0x36>
 8003442:	2302      	movs	r3, #2
 8003444:	e02f      	b.n	80034a6 <HAL_I2C_Master_Abort_IT+0x96>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2260      	movs	r2, #96	@ 0x60
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346a:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003490:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 f936 	bl	800470c <I2C_ITError>

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
  }
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b088      	sub	sp, #32
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d003      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x38>
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b40      	cmp	r3, #64	@ 0x40
 80034e2:	f040 80ad 	bne.w	8003640 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_I2C_EV_IRQHandler+0x6e>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003506:	d003      	beq.n	8003510 <HAL_I2C_EV_IRQHandler+0x62>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800350e:	d101      	bne.n	8003514 <HAL_I2C_EV_IRQHandler+0x66>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_I2C_EV_IRQHandler+0x68>
 8003514:	2300      	movs	r3, #0
 8003516:	2b01      	cmp	r3, #1
 8003518:	f000 8110 	beq.w	800373c <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x90>
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f001 faf7 	bl	8004b24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fc76 	bl	8003e28 <I2C_Master_SB>
 800353c:	e07f      	b.n	800363e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_I2C_EV_IRQHandler+0xac>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fcee 	bl	8003f34 <I2C_Master_ADD10>
 8003558:	e071      	b.n	800363e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_I2C_EV_IRQHandler+0xc8>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fd0a 	bl	8003f88 <I2C_Master_ADDR>
 8003574:	e063      	b.n	800363e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d032      	beq.n	80035e6 <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358e:	f000 80d7 	beq.w	8003740 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x10a>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x10a>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d103      	bne.n	80035b8 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f90b 	bl	80037cc <I2C_MasterTransmit_TXE>
 80035b6:	e042      	b.n	800363e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80be 	beq.w	8003740 <HAL_I2C_EV_IRQHandler+0x292>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80b8 	beq.w	8003740 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d103      	bne.n	80035de <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f994 	bl	8003904 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035dc:	e0b0      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9f8 	bl	80039d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e4:	e0ac      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f4:	f000 80a4 	beq.w	8003740 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <HAL_I2C_EV_IRQHandler+0x170>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_I2C_EV_IRQHandler+0x170>
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa6b 	bl	8003af2 <I2C_MasterReceive_RXNE>
 800361c:	e00f      	b.n	800363e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 808b 	beq.w	8003740 <HAL_I2C_EV_IRQHandler+0x292>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8085 	beq.w	8003740 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fb0c 	bl	8003c54 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800363c:	e080      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x292>
 800363e:	e07f      	b.n	8003740 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e007      	b.n	8003662 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d011      	beq.n	8003690 <HAL_I2C_EV_IRQHandler+0x1e2>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00c      	beq.n	8003690 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003686:	69b9      	ldr	r1, [r7, #24]
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fecc 	bl	8004426 <I2C_Slave_ADDR>
 800368e:	e05a      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_I2C_EV_IRQHandler+0x1fe>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 ff01 	bl	80044ac <I2C_Slave_STOPF>
 80036aa:	e04c      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	2b21      	cmp	r3, #33	@ 0x21
 80036b0:	d002      	beq.n	80036b8 <HAL_I2C_EV_IRQHandler+0x20a>
 80036b2:	7bbb      	ldrb	r3, [r7, #14]
 80036b4:	2b29      	cmp	r3, #41	@ 0x29
 80036b6:	d120      	bne.n	80036fa <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <HAL_I2C_EV_IRQHandler+0x230>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_I2C_EV_IRQHandler+0x230>
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fde7 	bl	80042aa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036dc:	e032      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02d      	beq.n	8003744 <HAL_I2C_EV_IRQHandler+0x296>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fe16 	bl	8004324 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f8:	e024      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <HAL_I2C_EV_IRQHandler+0x272>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_I2C_EV_IRQHandler+0x272>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d103      	bne.n	8003720 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fe24 	bl	8004366 <I2C_SlaveReceive_RXNE>
 800371e:	e012      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fe54 	bl	80043e2 <I2C_SlaveReceive_BTF>
 800373a:	e004      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
      return;
 800373c:	bf00      	nop
 800373e:	e002      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003744:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
 8003780:	4613      	mov	r3, r2
 8003782:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d150      	bne.n	8003894 <I2C_MasterTransmit_TXE+0xc8>
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b21      	cmp	r3, #33	@ 0x21
 80037f6:	d14d      	bne.n	8003894 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d01d      	beq.n	800383a <I2C_MasterTransmit_TXE+0x6e>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b20      	cmp	r3, #32
 8003802:	d01a      	beq.n	800383a <I2C_MasterTransmit_TXE+0x6e>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800380a:	d016      	beq.n	800383a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800381a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2211      	movs	r2, #17
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f00d f8b8 	bl	80109a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003838:	e060      	b.n	80038fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003848:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003858:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b40      	cmp	r3, #64	@ 0x40
 8003872:	d107      	bne.n	8003884 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f00d f8b5 	bl	80109ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003882:	e03b      	b.n	80038fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f00d f88b 	bl	80109a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003892:	e033      	b.n	80038fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b21      	cmp	r3, #33	@ 0x21
 8003898:	d005      	beq.n	80038a6 <I2C_MasterTransmit_TXE+0xda>
 800389a:	7bbb      	ldrb	r3, [r7, #14]
 800389c:	2b40      	cmp	r3, #64	@ 0x40
 800389e:	d12d      	bne.n	80038fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b22      	cmp	r3, #34	@ 0x22
 80038a4:	d12a      	bne.n	80038fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d108      	bne.n	80038c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038c0:	e01c      	b.n	80038fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d103      	bne.n	80038d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f880 	bl	80039d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80038d4:	e012      	b.n	80038fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038fa:	e7ff      	b.n	80038fc <I2C_MasterTransmit_TXE+0x130>
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b21      	cmp	r3, #33	@ 0x21
 800391c:	d156      	bne.n	80039cc <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d012      	beq.n	800394e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800394c:	e03e      	b.n	80039cc <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d01d      	beq.n	8003990 <I2C_MasterTransmit_BTF+0x8c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b20      	cmp	r3, #32
 8003958:	d01a      	beq.n	8003990 <I2C_MasterTransmit_BTF+0x8c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003960:	d016      	beq.n	8003990 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003970:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2211      	movs	r2, #17
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f00d f80d 	bl	80109a8 <HAL_I2C_MasterTxCpltCallback>
}
 800398e:	e01d      	b.n	80039cc <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800399e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f00c ffee 	bl	80109a8 <HAL_I2C_MasterTxCpltCallback>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11d      	bne.n	8003a28 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10b      	bne.n	8003a0c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a0a:	e06e      	b.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	121b      	asrs	r3, r3, #8
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a26:	e060      	b.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10b      	bne.n	8003a48 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a46:	e050      	b.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d14c      	bne.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b22      	cmp	r3, #34	@ 0x22
 8003a54:	d108      	bne.n	8003a68 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	e040      	b.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b21      	cmp	r3, #33	@ 0x21
 8003a76:	d112      	bne.n	8003a9e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	781a      	ldrb	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a9c:	e025      	b.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d120      	bne.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b21      	cmp	r3, #33	@ 0x21
 8003aac:	d11d      	bne.n	8003aea <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003abc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003acc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f00c ff81 	bl	80109ec <HAL_I2C_MemTxCpltCallback>
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b22      	cmp	r3, #34	@ 0x22
 8003b04:	f040 80a2 	bne.w	8003c4c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d921      	bls.n	8003b5a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	f040 8082 	bne.w	8003c4c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b56:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b58:	e078      	b.n	8003c4c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d074      	beq.n	8003c4c <I2C_MasterReceive_RXNE+0x15a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d002      	beq.n	8003b6e <I2C_MasterReceive_RXNE+0x7c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d16e      	bne.n	8003c4c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 ffa6 	bl	8004ac0 <I2C_WaitOnSTOPRequestThroughIT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d142      	bne.n	8003c00 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b88:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d10a      	bne.n	8003bea <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f00c ff46 	bl	8010a74 <HAL_I2C_MemRxCpltCallback>
}
 8003be8:	e030      	b.n	8003c4c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2212      	movs	r2, #18
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f00c ff19 	bl	8010a30 <HAL_I2C_MasterRxCpltCallback>
}
 8003bfe:	e025      	b.n	8003c4c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fdac 	bl	80037a4 <HAL_I2C_ErrorCallback>
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ca2:	e0bd      	b.n	8003e20 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d129      	bne.n	8003d02 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d00a      	beq.n	8003cda <I2C_MasterReceive_BTF+0x86>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d007      	beq.n	8003cda <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d00:	e08e      	b.n	8003e20 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d176      	bne.n	8003dfa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d002      	beq.n	8003d18 <I2C_MasterReceive_BTF+0xc4>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b10      	cmp	r3, #16
 8003d16:	d108      	bne.n	8003d2a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e019      	b.n	8003d5e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d002      	beq.n	8003d36 <I2C_MasterReceive_BTF+0xe2>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d108      	bne.n	8003d48 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e00a      	b.n	8003d5e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d007      	beq.n	8003d5e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003db8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b40      	cmp	r3, #64	@ 0x40
 8003dcc:	d10a      	bne.n	8003de4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f00c fe49 	bl	8010a74 <HAL_I2C_MemRxCpltCallback>
}
 8003de2:	e01d      	b.n	8003e20 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2212      	movs	r2, #18
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f00c fe1c 	bl	8010a30 <HAL_I2C_MasterRxCpltCallback>
}
 8003df8:	e012      	b.n	8003e20 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b40      	cmp	r3, #64	@ 0x40
 8003e3a:	d117      	bne.n	8003e6c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e54:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e56:	e067      	b.n	8003f28 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]
}
 8003e6a:	e05d      	b.n	8003f28 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e74:	d133      	bne.n	8003ede <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b21      	cmp	r3, #33	@ 0x21
 8003e80:	d109      	bne.n	8003e96 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e92:	611a      	str	r2, [r3, #16]
 8003e94:	e008      	b.n	8003ea8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <I2C_Master_SB+0x92>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d032      	beq.n	8003f28 <I2C_Master_SB+0x100>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02d      	beq.n	8003f28 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eda:	605a      	str	r2, [r3, #4]
}
 8003edc:	e024      	b.n	8003f28 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	11db      	asrs	r3, r3, #7
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f003 0306 	and.w	r3, r3, #6
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f063 030f 	orn	r3, r3, #15
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]
}
 8003f02:	e011      	b.n	8003f28 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10d      	bne.n	8003f28 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	11db      	asrs	r3, r3, #7
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0306 	and.w	r3, r3, #6
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f063 030e 	orn	r3, r3, #14
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d103      	bne.n	8003f58 <I2C_Master_ADD10+0x24>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <I2C_Master_ADD10+0x38>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f7a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b091      	sub	sp, #68	@ 0x44
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b22      	cmp	r3, #34	@ 0x22
 8003fb0:	f040 8169 	bne.w	8004286 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <I2C_Master_ADDR+0x54>
 8003fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	d10b      	bne.n	8003fdc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	e160      	b.n	800429e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11d      	bne.n	8004020 <I2C_Master_ADDR+0x98>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fec:	d118      	bne.n	8004020 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004012:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	651a      	str	r2, [r3, #80]	@ 0x50
 800401e:	e13e      	b.n	800429e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d113      	bne.n	8004052 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402a:	2300      	movs	r3, #0
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e115      	b.n	800427e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	f040 808a 	bne.w	8004172 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004064:	d137      	bne.n	80040d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004074:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004084:	d113      	bne.n	80040ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004094:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	e0e7      	b.n	800427e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	623b      	str	r3, [r7, #32]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	e0d3      	b.n	800427e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d02e      	beq.n	800413a <I2C_Master_ADDR+0x1b2>
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d02b      	beq.n	800413a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	2b12      	cmp	r3, #18
 80040e6:	d102      	bne.n	80040ee <I2C_Master_ADDR+0x166>
 80040e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d125      	bne.n	800413a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d00e      	beq.n	8004112 <I2C_Master_ADDR+0x18a>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d00b      	beq.n	8004112 <I2C_Master_ADDR+0x18a>
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d008      	beq.n	8004112 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e007      	b.n	8004122 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004120:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	e0a1      	b.n	800427e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004148:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e085      	b.n	800427e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d14d      	bne.n	8004218 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800417c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417e:	2b04      	cmp	r3, #4
 8004180:	d016      	beq.n	80041b0 <I2C_Master_ADDR+0x228>
 8004182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004184:	2b02      	cmp	r3, #2
 8004186:	d013      	beq.n	80041b0 <I2C_Master_ADDR+0x228>
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	2b10      	cmp	r3, #16
 800418c:	d010      	beq.n	80041b0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e007      	b.n	80041c0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041be:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ce:	d117      	bne.n	8004200 <I2C_Master_ADDR+0x278>
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d6:	d00b      	beq.n	80041f0 <I2C_Master_ADDR+0x268>
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d008      	beq.n	80041f0 <I2C_Master_ADDR+0x268>
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d005      	beq.n	80041f0 <I2C_Master_ADDR+0x268>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d002      	beq.n	80041f0 <I2C_Master_ADDR+0x268>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d107      	bne.n	8004200 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	e032      	b.n	800427e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004226:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004236:	d117      	bne.n	8004268 <I2C_Master_ADDR+0x2e0>
 8004238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800423e:	d00b      	beq.n	8004258 <I2C_Master_ADDR+0x2d0>
 8004240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004242:	2b01      	cmp	r3, #1
 8004244:	d008      	beq.n	8004258 <I2C_Master_ADDR+0x2d0>
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	2b08      	cmp	r3, #8
 800424a:	d005      	beq.n	8004258 <I2C_Master_ADDR+0x2d0>
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	2b10      	cmp	r3, #16
 8004250:	d002      	beq.n	8004258 <I2C_Master_ADDR+0x2d0>
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	2b20      	cmp	r3, #32
 8004256:	d107      	bne.n	8004268 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004266:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004284:	e00b      	b.n	800429e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	e7ff      	b.n	800429e <I2C_Master_ADDR+0x316>
 800429e:	bf00      	nop
 80042a0:	3744      	adds	r7, #68	@ 0x44
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d02b      	beq.n	800431c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d114      	bne.n	800431c <I2C_SlaveTransmit_TXE+0x72>
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b29      	cmp	r3, #41	@ 0x29
 80042f6:	d111      	bne.n	800431c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004306:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2221      	movs	r2, #33	@ 0x21
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2228      	movs	r2, #40	@ 0x28
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fa18 	bl	800374c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d011      	beq.n	800435a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004374:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02c      	beq.n	80043da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d114      	bne.n	80043da <I2C_SlaveReceive_RXNE+0x74>
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b4:	d111      	bne.n	80043da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2222      	movs	r2, #34	@ 0x22
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2228      	movs	r2, #40	@ 0x28
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff f9c3 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d012      	beq.n	800441a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004440:	2b28      	cmp	r3, #40	@ 0x28
 8004442:	d125      	bne.n	8004490 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004452:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	81bb      	strh	r3, [r7, #12]
 8004472:	e002      	b.n	800447a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004482:	89ba      	ldrh	r2, [r7, #12]
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff f973 	bl	8003774 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800448e:	e008      	b.n	80044a2 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0202 	mvn.w	r2, #2
 8004498:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044cc:	2300      	movs	r3, #0
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004508:	d172      	bne.n	80045f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b22      	cmp	r3, #34	@ 0x22
 800450e:	d002      	beq.n	8004516 <I2C_Slave_STOPF+0x6a>
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b2a      	cmp	r3, #42	@ 0x2a
 8004514:	d135      	bne.n	8004582 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004548:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd ff60 	bl	8002414 <HAL_DMA_GetState>
 8004554:	4603      	mov	r3, r0
 8004556:	2b01      	cmp	r3, #1
 8004558:	d049      	beq.n	80045ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	4a69      	ldr	r2, [pc, #420]	@ (8004704 <I2C_Slave_STOPF+0x258>)
 8004560:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fda8 	bl	80020bc <HAL_DMA_Abort_IT>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03d      	beq.n	80045ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004580:	e035      	b.n	80045ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f043 0204 	orr.w	r2, r3, #4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd ff2a 	bl	8002414 <HAL_DMA_GetState>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d014      	beq.n	80045f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004704 <I2C_Slave_STOPF+0x258>)
 80045cc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fd72 	bl	80020bc <HAL_DMA_Abort_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045e8:	4610      	mov	r0, r2
 80045ea:	4798      	blx	r3
 80045ec:	e000      	b.n	80045f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03e      	beq.n	8004678 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d112      	bne.n	800462e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d112      	bne.n	8004662 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f843 	bl	800470c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004686:	e039      	b.n	80046fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b2a      	cmp	r3, #42	@ 0x2a
 800468c:	d109      	bne.n	80046a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2228      	movs	r2, #40	@ 0x28
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff f85f 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b28      	cmp	r3, #40	@ 0x28
 80046ac:	d111      	bne.n	80046d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <I2C_Slave_STOPF+0x25c>)
 80046b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff f860 	bl	8003790 <HAL_I2C_ListenCpltCallback>
}
 80046d0:	e014      	b.n	80046fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	2b22      	cmp	r3, #34	@ 0x22
 80046d8:	d002      	beq.n	80046e0 <I2C_Slave_STOPF+0x234>
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b22      	cmp	r3, #34	@ 0x22
 80046de:	d10d      	bne.n	80046fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff f832 	bl	8003760 <HAL_I2C_SlaveRxCpltCallback>
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08004971 	.word	0x08004971
 8004708:	ffff0000 	.word	0xffff0000

0800470c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004722:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	2b10      	cmp	r3, #16
 8004728:	d002      	beq.n	8004730 <I2C_ITError+0x24>
 800472a:	7bbb      	ldrb	r3, [r7, #14]
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d10a      	bne.n	8004746 <I2C_ITError+0x3a>
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b22      	cmp	r3, #34	@ 0x22
 8004734:	d107      	bne.n	8004746 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004744:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800474c:	2b28      	cmp	r3, #40	@ 0x28
 800474e:	d107      	bne.n	8004760 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2228      	movs	r2, #40	@ 0x28
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800475e:	e015      	b.n	800478c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476e:	d00a      	beq.n	8004786 <I2C_ITError+0x7a>
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b60      	cmp	r3, #96	@ 0x60
 8004774:	d007      	beq.n	8004786 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479a:	d162      	bne.n	8004862 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d020      	beq.n	80047fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047be:	4a6a      	ldr	r2, [pc, #424]	@ (8004968 <I2C_ITError+0x25c>)
 80047c0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd fc78 	bl	80020bc <HAL_DMA_Abort_IT>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8089 	beq.w	80048e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047f6:	4610      	mov	r0, r2
 80047f8:	4798      	blx	r3
 80047fa:	e074      	b.n	80048e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	4a59      	ldr	r2, [pc, #356]	@ (8004968 <I2C_ITError+0x25c>)
 8004802:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd fc57 	bl	80020bc <HAL_DMA_Abort_IT>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d068      	beq.n	80048e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d10b      	bne.n	800483a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800485c:	4610      	mov	r0, r2
 800485e:	4798      	blx	r3
 8004860:	e041      	b.n	80048e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b60      	cmp	r3, #96	@ 0x60
 800486c:	d125      	bne.n	80048ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	d10b      	bne.n	80048a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fe ff80 	bl	80037b8 <HAL_I2C_AbortCpltCallback>
 80048b8:	e015      	b.n	80048e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b40      	cmp	r3, #64	@ 0x40
 80048c6:	d10b      	bne.n	80048e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fe ff5f 	bl	80037a4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10e      	bne.n	8004914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d113      	bne.n	8004960 <I2C_ITError+0x254>
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b28      	cmp	r3, #40	@ 0x28
 800493c:	d110      	bne.n	8004960 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0a      	ldr	r2, [pc, #40]	@ (800496c <I2C_ITError+0x260>)
 8004942:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fe ff18 	bl	8003790 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	08004971 	.word	0x08004971
 800496c:	ffff0000 	.word	0xffff0000

08004970 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004988:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800498a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ab8 <I2C_DMAAbort+0x148>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	08db      	lsrs	r3, r3, #3
 8004990:	4a4a      	ldr	r2, [pc, #296]	@ (8004abc <I2C_DMAAbort+0x14c>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0a1a      	lsrs	r2, r3, #8
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	00da      	lsls	r2, r3, #3
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	f043 0220 	orr.w	r2, r3, #32
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80049b6:	e00a      	b.n	80049ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049cc:	d0ea      	beq.n	80049a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049da:	2200      	movs	r2, #0
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	2200      	movs	r2, #0
 80049ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a10:	2200      	movs	r2, #0
 8004a12:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	2200      	movs	r2, #0
 8004a22:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b60      	cmp	r3, #96	@ 0x60
 8004a3e:	d10e      	bne.n	8004a5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a56:	6978      	ldr	r0, [r7, #20]
 8004a58:	f7fe feae 	bl	80037b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a5c:	e027      	b.n	8004aae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a64:	2b28      	cmp	r3, #40	@ 0x28
 8004a66:	d117      	bne.n	8004a98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2228      	movs	r2, #40	@ 0x28
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a96:	e007      	b.n	8004aa8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	f7fe fe7b 	bl	80037a4 <HAL_I2C_ErrorCallback>
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000168 	.word	0x20000168
 8004abc:	14f8b589 	.word	0x14f8b589

08004ac0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004acc:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	08db      	lsrs	r3, r3, #3
 8004ad2:	4a13      	ldr	r2, [pc, #76]	@ (8004b20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0a1a      	lsrs	r2, r3, #8
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e008      	b.n	8004b10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0c:	d0e9      	beq.n	8004ae2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000168 	.word	0x20000168
 8004b20:	14f8b589 	.word	0x14f8b589

08004b24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004b34:	d103      	bne.n	8004b3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b3c:	e007      	b.n	8004b4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b42:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004b46:	d102      	bne.n	8004b4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0cc      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b68      	ldr	r3, [pc, #416]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d90c      	bls.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b65      	ldr	r3, [pc, #404]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b63      	ldr	r3, [pc, #396]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0b8      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb0:	4b59      	ldr	r3, [pc, #356]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc8:	4b53      	ldr	r3, [pc, #332]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a52      	ldr	r2, [pc, #328]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b50      	ldr	r3, [pc, #320]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	494d      	ldr	r1, [pc, #308]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d044      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d119      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e07f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d003      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e067      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b37      	ldr	r3, [pc, #220]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4934      	ldr	r1, [pc, #208]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fc ffa2 	bl	8001b94 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fc ff9e 	bl	8001b94 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e04f      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b25      	ldr	r3, [pc, #148]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d20c      	bcs.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b22      	ldr	r3, [pc, #136]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b20      	ldr	r3, [pc, #128]	@ (8004d14 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e032      	b.n	8004d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4916      	ldr	r1, [pc, #88]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	490e      	ldr	r1, [pc, #56]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce2:	f000 f855 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	490a      	ldr	r1, [pc, #40]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	5ccb      	ldrb	r3, [r1, r3]
 8004cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfa:	4a09      	ldr	r2, [pc, #36]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc ff02 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40023c00 	.word	0x40023c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	0801a264 	.word	0x0801a264
 8004d20:	20000168 	.word	0x20000168
 8004d24:	200003f8 	.word	0x200003f8

08004d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	@ (8004d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000168 	.word	0x20000168

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d44:	f7ff fff0 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0a9b      	lsrs	r3, r3, #10
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	@ (8004d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	0801a274 	.word	0x0801a274

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d6c:	f7ff ffdc 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0b5b      	lsrs	r3, r3, #13
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0801a274 	.word	0x0801a274

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d94:	b0ae      	sub	sp, #184	@ 0xb8
 8004d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004db6:	4bcb      	ldr	r3, [pc, #812]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b0c      	cmp	r3, #12
 8004dc0:	f200 8206 	bhi.w	80051d0 <HAL_RCC_GetSysClockFreq+0x440>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e01 	.word	0x08004e01
 8004dd0:	080051d1 	.word	0x080051d1
 8004dd4:	080051d1 	.word	0x080051d1
 8004dd8:	080051d1 	.word	0x080051d1
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	080051d1 	.word	0x080051d1
 8004de4:	080051d1 	.word	0x080051d1
 8004de8:	080051d1 	.word	0x080051d1
 8004dec:	08004e11 	.word	0x08004e11
 8004df0:	080051d1 	.word	0x080051d1
 8004df4:	080051d1 	.word	0x080051d1
 8004df8:	080051d1 	.word	0x080051d1
 8004dfc:	08005001 	.word	0x08005001
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e00:	4bb9      	ldr	r3, [pc, #740]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004e06:	e1e7      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e08:	4bb8      	ldr	r3, [pc, #736]	@ (80050ec <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e0e:	e1e3      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e10:	4bb4      	ldr	r3, [pc, #720]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1c:	4bb1      	ldr	r3, [pc, #708]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d071      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e28:	4bae      	ldr	r3, [pc, #696]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	099b      	lsrs	r3, r3, #6
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e34:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e4e:	4622      	mov	r2, r4
 8004e50:	462b      	mov	r3, r5
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	0159      	lsls	r1, r3, #5
 8004e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e60:	0150      	lsls	r0, r2, #5
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4621      	mov	r1, r4
 8004e68:	1a51      	subs	r1, r2, r1
 8004e6a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004e80:	4649      	mov	r1, r9
 8004e82:	018b      	lsls	r3, r1, #6
 8004e84:	4641      	mov	r1, r8
 8004e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	018a      	lsls	r2, r1, #6
 8004e8e:	4641      	mov	r1, r8
 8004e90:	1a51      	subs	r1, r2, r1
 8004e92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e94:	4649      	mov	r1, r9
 8004e96:	eb63 0301 	sbc.w	r3, r3, r1
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	00cb      	lsls	r3, r1, #3
 8004eac:	4641      	mov	r1, r8
 8004eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	00ca      	lsls	r2, r1, #3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	eb42 0303 	adc.w	r3, r2, r3
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ed8:	4629      	mov	r1, r5
 8004eda:	024b      	lsls	r3, r1, #9
 8004edc:	4621      	mov	r1, r4
 8004ede:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	024a      	lsls	r2, r1, #9
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ef4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ef8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004efc:	f7fb fe74 	bl	8000be8 <__aeabi_uldivmod>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4613      	mov	r3, r2
 8004f06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f0a:	e067      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f0c:	4b75      	ldr	r3, [pc, #468]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	099b      	lsrs	r3, r3, #6
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f18:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f26:	2300      	movs	r3, #0
 8004f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004f2e:	4622      	mov	r2, r4
 8004f30:	462b      	mov	r3, r5
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	0159      	lsls	r1, r3, #5
 8004f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f40:	0150      	lsls	r0, r2, #5
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4621      	mov	r1, r4
 8004f48:	1a51      	subs	r1, r2, r1
 8004f4a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004f60:	4649      	mov	r1, r9
 8004f62:	018b      	lsls	r3, r1, #6
 8004f64:	4641      	mov	r1, r8
 8004f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f6a:	4641      	mov	r1, r8
 8004f6c:	018a      	lsls	r2, r1, #6
 8004f6e:	4641      	mov	r1, r8
 8004f70:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f74:	4649      	mov	r1, r9
 8004f76:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8e:	4692      	mov	sl, r2
 8004f90:	469b      	mov	fp, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	eb1a 0303 	adds.w	r3, sl, r3
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004fae:	4629      	mov	r1, r5
 8004fb0:	028b      	lsls	r3, r1, #10
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fb8:	4621      	mov	r1, r4
 8004fba:	028a      	lsls	r2, r1, #10
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fc8:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004fce:	f7fb fe0b 	bl	8000be8 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fdc:	4b41      	ldr	r3, [pc, #260]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ffe:	e0eb      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005000:	4b38      	ldr	r3, [pc, #224]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800500c:	4b35      	ldr	r3, [pc, #212]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d06b      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005018:	4b32      	ldr	r3, [pc, #200]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	099b      	lsrs	r3, r3, #6
 800501e:	2200      	movs	r2, #0
 8005020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005022:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	663b      	str	r3, [r7, #96]	@ 0x60
 800502c:	2300      	movs	r3, #0
 800502e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005030:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	f04f 0000 	mov.w	r0, #0
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	0159      	lsls	r1, r3, #5
 8005042:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005046:	0150      	lsls	r0, r2, #5
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4621      	mov	r1, r4
 800504e:	1a51      	subs	r1, r2, r1
 8005050:	61b9      	str	r1, [r7, #24]
 8005052:	4629      	mov	r1, r5
 8005054:	eb63 0301 	sbc.w	r3, r3, r1
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005066:	4659      	mov	r1, fp
 8005068:	018b      	lsls	r3, r1, #6
 800506a:	4651      	mov	r1, sl
 800506c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005070:	4651      	mov	r1, sl
 8005072:	018a      	lsls	r2, r1, #6
 8005074:	4651      	mov	r1, sl
 8005076:	ebb2 0801 	subs.w	r8, r2, r1
 800507a:	4659      	mov	r1, fp
 800507c:	eb63 0901 	sbc.w	r9, r3, r1
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005090:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005094:	4690      	mov	r8, r2
 8005096:	4699      	mov	r9, r3
 8005098:	4623      	mov	r3, r4
 800509a:	eb18 0303 	adds.w	r3, r8, r3
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	462b      	mov	r3, r5
 80050a2:	eb49 0303 	adc.w	r3, r9, r3
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80050b4:	4629      	mov	r1, r5
 80050b6:	024b      	lsls	r3, r1, #9
 80050b8:	4621      	mov	r1, r4
 80050ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050be:	4621      	mov	r1, r4
 80050c0:	024a      	lsls	r2, r1, #9
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ca:	2200      	movs	r2, #0
 80050cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80050d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050d4:	f7fb fd88 	bl	8000be8 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4613      	mov	r3, r2
 80050de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e2:	e065      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0x420>
 80050e4:	40023800 	.word	0x40023800
 80050e8:	00f42400 	.word	0x00f42400
 80050ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f0:	4b3d      	ldr	r3, [pc, #244]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	2200      	movs	r2, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	4611      	mov	r1, r2
 80050fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005100:	653b      	str	r3, [r7, #80]	@ 0x50
 8005102:	2300      	movs	r3, #0
 8005104:	657b      	str	r3, [r7, #84]	@ 0x54
 8005106:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800510a:	4642      	mov	r2, r8
 800510c:	464b      	mov	r3, r9
 800510e:	f04f 0000 	mov.w	r0, #0
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	0159      	lsls	r1, r3, #5
 8005118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800511c:	0150      	lsls	r0, r2, #5
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4641      	mov	r1, r8
 8005124:	1a51      	subs	r1, r2, r1
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	4649      	mov	r1, r9
 800512a:	eb63 0301 	sbc.w	r3, r3, r1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800513c:	4659      	mov	r1, fp
 800513e:	018b      	lsls	r3, r1, #6
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005146:	4651      	mov	r1, sl
 8005148:	018a      	lsls	r2, r1, #6
 800514a:	4651      	mov	r1, sl
 800514c:	1a54      	subs	r4, r2, r1
 800514e:	4659      	mov	r1, fp
 8005150:	eb63 0501 	sbc.w	r5, r3, r1
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	00eb      	lsls	r3, r5, #3
 800515e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005162:	00e2      	lsls	r2, r4, #3
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	4643      	mov	r3, r8
 800516a:	18e3      	adds	r3, r4, r3
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	464b      	mov	r3, r9
 8005170:	eb45 0303 	adc.w	r3, r5, r3
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005182:	4629      	mov	r1, r5
 8005184:	028b      	lsls	r3, r1, #10
 8005186:	4621      	mov	r1, r4
 8005188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800518c:	4621      	mov	r1, r4
 800518e:	028a      	lsls	r2, r1, #10
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005198:	2200      	movs	r2, #0
 800519a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800519c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800519e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051a2:	f7fb fd21 	bl	8000be8 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4613      	mov	r3, r2
 80051ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051b0:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	0f1b      	lsrs	r3, r3, #28
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80051be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051ce:	e003      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051d0:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80051d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80051d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	37b8      	adds	r7, #184	@ 0xb8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	00f42400 	.word	0x00f42400

080051f0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80051f6:	f7fc fccd 	bl	8001b94 <HAL_GetTick>
 80051fa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051fc:	4b72      	ldr	r3, [pc, #456]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a71      	ldr	r2, [pc, #452]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520a:	f7fc fcc3 	bl	8001b94 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0d0      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800521c:	4b6a      	ldr	r3, [pc, #424]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005228:	4b67      	ldr	r3, [pc, #412]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a66      	ldr	r2, [pc, #408]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800522e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005232:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005234:	f7fc fcae 	bl	8001b94 <HAL_GetTick>
 8005238:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800523a:	4b63      	ldr	r3, [pc, #396]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800523c:	2200      	movs	r2, #0
 800523e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005240:	e00a      	b.n	8005258 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005242:	f7fc fca7 	bl	8001b94 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005250:	4293      	cmp	r3, r2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0b2      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005258:	4b5b      	ldr	r3, [pc, #364]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ee      	bne.n	8005242 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005264:	f7fc fc96 	bl	8001b94 <HAL_GetTick>
 8005268:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800526a:	4b57      	ldr	r3, [pc, #348]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a56      	ldr	r2, [pc, #344]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005270:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8005274:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005278:	f7fc fc8c 	bl	8001b94 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	@ 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e099      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800528a:	4b4f      	ldr	r3, [pc, #316]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005296:	f7fc fc7d 	bl	8001b94 <HAL_GetTick>
 800529a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800529c:	4b4a      	ldr	r3, [pc, #296]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a49      	ldr	r2, [pc, #292]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fc fc73 	bl	8001b94 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e080      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80052bc:	4b42      	ldr	r3, [pc, #264]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80052c8:	f7fc fc64 	bl	8001b94 <HAL_GetTick>
 80052cc:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80052ce:	4b3e      	ldr	r3, [pc, #248]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a3d      	ldr	r2, [pc, #244]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 80052d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052d8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052dc:	f7fc fc5a 	bl	8001b94 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e067      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80052ee:	4b36      	ldr	r3, [pc, #216]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80052fa:	f7fc fc4b 	bl	8001b94 <HAL_GetTick>
 80052fe:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8005300:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a30      	ldr	r2, [pc, #192]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800530e:	f7fc fc41 	bl	8001b94 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e04e      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8005320:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f0      	bne.n	800530e <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 800532c:	4b26      	ldr	r3, [pc, #152]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800532e:	4a27      	ldr	r2, [pc, #156]	@ (80053cc <HAL_RCC_DeInit+0x1dc>)
 8005330:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005332:	4b25      	ldr	r3, [pc, #148]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005334:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_RCC_DeInit+0x1dc>)
 8005336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 800533a:	4b23      	ldr	r3, [pc, #140]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800533c:	4a24      	ldr	r2, [pc, #144]	@ (80053d0 <HAL_RCC_DeInit+0x1e0>)
 800533e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005342:	4b21      	ldr	r3, [pc, #132]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	4a20      	ldr	r2, [pc, #128]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005348:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800534c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800534e:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4a1d      	ldr	r2, [pc, #116]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005358:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800535a:	4b1b      	ldr	r3, [pc, #108]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	4a1a      	ldr	r2, [pc, #104]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005360:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005364:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005366:	4b18      	ldr	r3, [pc, #96]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	4a17      	ldr	r2, [pc, #92]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800536c:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8005370:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8005372:	4b15      	ldr	r3, [pc, #84]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005378:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800537c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800537e:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005384:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005388:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800538c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538e:	4a0e      	ldr	r2, [pc, #56]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005396:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 8005398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539a:	4a0b      	ldr	r2, [pc, #44]	@ (80053c8 <HAL_RCC_DeInit+0x1d8>)
 800539c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053a0:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80053a2:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <HAL_RCC_DeInit+0x1e4>)
 80053a4:	4a0c      	ldr	r2, [pc, #48]	@ (80053d8 <HAL_RCC_DeInit+0x1e8>)
 80053a6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <HAL_RCC_DeInit+0x1ec>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fc fbad 	bl	8001b0c <HAL_InitTick>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	24003010 	.word	0x24003010
 80053d0:	04003010 	.word	0x04003010
 80053d4:	20000168 	.word	0x20000168
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	200003f8 	.word	0x200003f8

080053e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8083 	beq.w	8005500 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053fa:	4b95      	ldr	r3, [pc, #596]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b04      	cmp	r3, #4
 8005404:	d019      	beq.n	800543a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005406:	4b92      	ldr	r3, [pc, #584]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800540e:	2b08      	cmp	r3, #8
 8005410:	d106      	bne.n	8005420 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005412:	4b8f      	ldr	r3, [pc, #572]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800541a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800541e:	d00c      	beq.n	800543a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005420:	4b8b      	ldr	r3, [pc, #556]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d112      	bne.n	8005452 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542c:	4b88      	ldr	r3, [pc, #544]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005438:	d10b      	bne.n	8005452 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543a:	4b85      	ldr	r3, [pc, #532]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d05b      	beq.n	80054fe <HAL_RCC_OscConfig+0x11e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d157      	bne.n	80054fe <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e216      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545a:	d106      	bne.n	800546a <HAL_RCC_OscConfig+0x8a>
 800545c:	4b7c      	ldr	r3, [pc, #496]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a7b      	ldr	r2, [pc, #492]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e01d      	b.n	80054a6 <HAL_RCC_OscConfig+0xc6>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005472:	d10c      	bne.n	800548e <HAL_RCC_OscConfig+0xae>
 8005474:	4b76      	ldr	r3, [pc, #472]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a75      	ldr	r2, [pc, #468]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800547a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b73      	ldr	r3, [pc, #460]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a72      	ldr	r2, [pc, #456]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e00b      	b.n	80054a6 <HAL_RCC_OscConfig+0xc6>
 800548e:	4b70      	ldr	r3, [pc, #448]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6f      	ldr	r2, [pc, #444]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b6d      	ldr	r3, [pc, #436]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a6c      	ldr	r2, [pc, #432]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80054a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d013      	beq.n	80054d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fc fb71 	bl	8001b94 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b6:	f7fc fb6d 	bl	8001b94 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b64      	cmp	r3, #100	@ 0x64
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e1db      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c8:	4b61      	ldr	r3, [pc, #388]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0xd6>
 80054d4:	e014      	b.n	8005500 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fc fb5d 	bl	8001b94 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054de:	f7fc fb59 	bl	8001b94 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b64      	cmp	r3, #100	@ 0x64
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e1c7      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f0:	4b57      	ldr	r3, [pc, #348]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0xfe>
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d06f      	beq.n	80055ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800550c:	4b50      	ldr	r3, [pc, #320]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 030c 	and.w	r3, r3, #12
 8005514:	2b00      	cmp	r3, #0
 8005516:	d017      	beq.n	8005548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005518:	4b4d      	ldr	r3, [pc, #308]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005520:	2b08      	cmp	r3, #8
 8005522:	d105      	bne.n	8005530 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005524:	4b4a      	ldr	r3, [pc, #296]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005530:	4b47      	ldr	r3, [pc, #284]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005538:	2b0c      	cmp	r3, #12
 800553a:	d11c      	bne.n	8005576 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553c:	4b44      	ldr	r3, [pc, #272]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005548:	4b41      	ldr	r3, [pc, #260]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_OscConfig+0x180>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d001      	beq.n	8005560 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e18f      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	4b3b      	ldr	r3, [pc, #236]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4938      	ldr	r1, [pc, #224]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005574:	e03a      	b.n	80055ec <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d020      	beq.n	80055c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800557e:	4b35      	ldr	r3, [pc, #212]	@ (8005654 <HAL_RCC_OscConfig+0x274>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc fb06 	bl	8001b94 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558c:	f7fc fb02 	bl	8001b94 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e170      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559e:	4b2c      	ldr	r3, [pc, #176]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	4b29      	ldr	r3, [pc, #164]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4925      	ldr	r1, [pc, #148]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
 80055be:	e015      	b.n	80055ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c0:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <HAL_RCC_OscConfig+0x274>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fc fae5 	bl	8001b94 <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ce:	f7fc fae1 	bl	8001b94 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e14f      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f0      	bne.n	80055ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d037      	beq.n	8005668 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d016      	beq.n	800562e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005600:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <HAL_RCC_OscConfig+0x278>)
 8005602:	2201      	movs	r2, #1
 8005604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005606:	f7fc fac5 	bl	8001b94 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560e:	f7fc fac1 	bl	8001b94 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e12f      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005620:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <HAL_RCC_OscConfig+0x270>)
 8005622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x22e>
 800562c:	e01c      	b.n	8005668 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800562e:	4b0a      	ldr	r3, [pc, #40]	@ (8005658 <HAL_RCC_OscConfig+0x278>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005634:	f7fc faae 	bl	8001b94 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563a:	e00f      	b.n	800565c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800563c:	f7fc faaa 	bl	8001b94 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d908      	bls.n	800565c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e118      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800
 8005654:	42470000 	.word	0x42470000
 8005658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565c:	4b8a      	ldr	r3, [pc, #552]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800565e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e9      	bne.n	800563c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8097 	beq.w	80057a4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567a:	4b83      	ldr	r3, [pc, #524]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	4b7f      	ldr	r3, [pc, #508]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568e:	4a7e      	ldr	r2, [pc, #504]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005694:	6413      	str	r3, [r2, #64]	@ 0x40
 8005696:	4b7c      	ldr	r3, [pc, #496]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b79      	ldr	r3, [pc, #484]	@ (800588c <HAL_RCC_OscConfig+0x4ac>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d118      	bne.n	80056e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b2:	4b76      	ldr	r3, [pc, #472]	@ (800588c <HAL_RCC_OscConfig+0x4ac>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a75      	ldr	r2, [pc, #468]	@ (800588c <HAL_RCC_OscConfig+0x4ac>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056be:	f7fc fa69 	bl	8001b94 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7fc fa65 	bl	8001b94 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e0d3      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	4b6c      	ldr	r3, [pc, #432]	@ (800588c <HAL_RCC_OscConfig+0x4ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d106      	bne.n	80056fa <HAL_RCC_OscConfig+0x31a>
 80056ec:	4b66      	ldr	r3, [pc, #408]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	4a65      	ldr	r2, [pc, #404]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056f8:	e01c      	b.n	8005734 <HAL_RCC_OscConfig+0x354>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x33c>
 8005702:	4b61      	ldr	r3, [pc, #388]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005706:	4a60      	ldr	r2, [pc, #384]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005708:	f043 0304 	orr.w	r3, r3, #4
 800570c:	6713      	str	r3, [r2, #112]	@ 0x70
 800570e:	4b5e      	ldr	r3, [pc, #376]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	4a5d      	ldr	r2, [pc, #372]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6713      	str	r3, [r2, #112]	@ 0x70
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0x354>
 800571c:	4b5a      	ldr	r3, [pc, #360]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005720:	4a59      	ldr	r2, [pc, #356]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	6713      	str	r3, [r2, #112]	@ 0x70
 8005728:	4b57      	ldr	r3, [pc, #348]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572c:	4a56      	ldr	r2, [pc, #344]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800572e:	f023 0304 	bic.w	r3, r3, #4
 8005732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fc fa2a 	bl	8001b94 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005742:	e00a      	b.n	800575a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005744:	f7fc fa26 	bl	8001b94 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e092      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575a:	4b4b      	ldr	r3, [pc, #300]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ee      	beq.n	8005744 <HAL_RCC_OscConfig+0x364>
 8005766:	e014      	b.n	8005792 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fc fa14 	bl	8001b94 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fc fa10 	bl	8001b94 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e07c      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005786:	4b40      	ldr	r3, [pc, #256]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ee      	bne.n	8005770 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d105      	bne.n	80057a4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005798:	4b3b      	ldr	r3, [pc, #236]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	4a3a      	ldr	r2, [pc, #232]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800579e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d068      	beq.n	800587e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057ac:	4b36      	ldr	r3, [pc, #216]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d060      	beq.n	800587a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d145      	bne.n	800584c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c0:	4b33      	ldr	r3, [pc, #204]	@ (8005890 <HAL_RCC_OscConfig+0x4b0>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c6:	f7fc f9e5 	bl	8001b94 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ce:	f7fc f9e1 	bl	8001b94 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e04f      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e0:	4b29      	ldr	r3, [pc, #164]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f0      	bne.n	80057ce <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	019b      	lsls	r3, r3, #6
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	3b01      	subs	r3, #1
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	061b      	lsls	r3, r3, #24
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	071b      	lsls	r3, r3, #28
 8005818:	491b      	ldr	r1, [pc, #108]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800581a:	4313      	orrs	r3, r2
 800581c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800581e:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <HAL_RCC_OscConfig+0x4b0>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fc f9b6 	bl	8001b94 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582c:	f7fc f9b2 	bl	8001b94 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e020      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583e:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x44c>
 800584a:	e018      	b.n	800587e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584c:	4b10      	ldr	r3, [pc, #64]	@ (8005890 <HAL_RCC_OscConfig+0x4b0>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fc f99f 	bl	8001b94 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585a:	f7fc f99b 	bl	8001b94 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e009      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <HAL_RCC_OscConfig+0x4a8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x47a>
 8005878:	e001      	b.n	800587e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
 8005890:	42470060 	.word	0x42470060

08005894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e056      	b.n	8005954 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f00b fde9 	bl	8011498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	0c1b      	lsrs	r3, r3, #16
 8005924:	f003 0104 	and.w	r1, r3, #4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69da      	ldr	r2, [r3, #28]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005942:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_SPI_Transmit_IT+0x20>
 8005978:	2302      	movs	r3, #2
 800597a:	e067      	b.n	8005a4c <HAL_SPI_Transmit_IT+0xf0>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Transmit_IT+0x34>
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005994:	e055      	b.n	8005a42 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80059a2:	2302      	movs	r3, #2
 80059a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a6:	e04c      	b.n	8005a42 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2203      	movs	r2, #3
 80059ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_SPI_Transmit_IT+0xfc>)
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80059ee:	e002      	b.n	80059f6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a5c <HAL_SPI_Transmit_IT+0x100>)
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059fe:	d107      	bne.n	8005a10 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8005a1e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b40      	cmp	r3, #64	@ 0x40
 8005a2c:	d008      	beq.n	8005a40 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e000      	b.n	8005a42 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8005a40:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	080064cd 	.word	0x080064cd
 8005a5c:	08006487 	.word	0x08006487

08005a60 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d110      	bne.n	8005a9c <HAL_SPI_Receive_IT+0x3c>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a82:	d10b      	bne.n	8005a9c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2204      	movs	r2, #4
 8005a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f87a 	bl	8005b8c <HAL_SPI_TransmitReceive_IT>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	e06e      	b.n	8005b7a <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_SPI_Receive_IT+0x4a>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e067      	b.n	8005b7a <HAL_SPI_Receive_IT+0x11a>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ac2:	e055      	b.n	8005b70 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_SPI_Receive_IT+0x70>
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ad4:	e04c      	b.n	8005b70 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	88fa      	ldrh	r2, [r7, #6]
 8005aee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a1a      	ldr	r2, [pc, #104]	@ (8005b84 <HAL_SPI_Receive_IT+0x124>)
 8005b1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b1c:	e002      	b.n	8005b24 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a19      	ldr	r2, [pc, #100]	@ (8005b88 <HAL_SPI_Receive_IT+0x128>)
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b2c:	d107      	bne.n	8005b3e <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005b4c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d008      	beq.n	8005b6e <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e000      	b.n	8005b70 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8005b6e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	08006441 	.word	0x08006441
 8005b88:	080063f7 	.word	0x080063f7

08005b8c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_SPI_TransmitReceive_IT+0x20>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e075      	b.n	8005c98 <HAL_SPI_TransmitReceive_IT+0x10c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bc2:	7dbb      	ldrb	r3, [r7, #22]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d00d      	beq.n	8005be4 <HAL_SPI_TransmitReceive_IT+0x58>
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bce:	d106      	bne.n	8005bde <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_TransmitReceive_IT+0x52>
 8005bd8:	7dbb      	ldrb	r3, [r7, #22]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d002      	beq.n	8005be4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
 8005be0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005be2:	e054      	b.n	8005c8e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8005bf0:	887b      	ldrh	r3, [r7, #2]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bfa:	e048      	b.n	8005c8e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d003      	beq.n	8005c10 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	887a      	ldrh	r2, [r7, #2]
 8005c26:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	887a      	ldrh	r2, [r7, #2]
 8005c32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d006      	beq.n	8005c50 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005c4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c4e:	e005      	b.n	8005c5c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a16      	ldr	r2, [pc, #88]	@ (8005cac <HAL_SPI_TransmitReceive_IT+0x120>)
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c76:	2b40      	cmp	r3, #64	@ 0x40
 8005c78:	d008      	beq.n	8005c8c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e000      	b.n	8005c8e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005c8c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	08006339 	.word	0x08006339
 8005ca8:	08006399 	.word	0x08006399
 8005cac:	08006275 	.word	0x08006275
 8005cb0:	080062d9 	.word	0x080062d9

08005cb4 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005cc4:	4b72      	ldr	r3, [pc, #456]	@ (8005e90 <HAL_SPI_Abort_IT+0x1dc>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a72      	ldr	r2, [pc, #456]	@ (8005e94 <HAL_SPI_Abort_IT+0x1e0>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	0a5b      	lsrs	r3, r3, #9
 8005cd0:	2264      	movs	r2, #100	@ 0x64
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
 8005cd6:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0220 	bic.w	r2, r2, #32
 8005cea:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf6:	2b80      	cmp	r3, #128	@ 0x80
 8005cf8:	d117      	bne.n	8005d2a <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a66      	ldr	r2, [pc, #408]	@ (8005e98 <HAL_SPI_Abort_IT+0x1e4>)
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005d12:	e008      	b.n	8005d26 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b07      	cmp	r3, #7
 8005d24:	d1ec      	bne.n	8005d00 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d117      	bne.n	8005d68 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a58      	ldr	r2, [pc, #352]	@ (8005e9c <HAL_SPI_Abort_IT+0x1e8>)
 8005d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8005d50:	e008      	b.n	8005d64 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b07      	cmp	r3, #7
 8005d62:	d1ec      	bne.n	8005d3e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00f      	beq.n	8005d90 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d104      	bne.n	8005d88 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d82:	4a47      	ldr	r2, [pc, #284]	@ (8005ea0 <HAL_SPI_Abort_IT+0x1ec>)
 8005d84:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d86:	e003      	b.n	8005d90 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00f      	beq.n	8005db8 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d104      	bne.n	8005db0 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ea4 <HAL_SPI_Abort_IT+0x1f0>)
 8005dac:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dae:	e003      	b.n	8005db8 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db4:	2200      	movs	r2, #0
 8005db6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d115      	bne.n	8005df2 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d011      	beq.n	8005df2 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fc f972 	bl	80020bc <HAL_DMA_Abort_IT>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de2:	2200      	movs	r2, #0
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2240      	movs	r2, #64	@ 0x40
 8005dea:	655a      	str	r2, [r3, #84]	@ 0x54
 8005dec:	e001      	b.n	8005df2 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d115      	bne.n	8005e2c <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d011      	beq.n	8005e2c <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fc f955 	bl	80020bc <HAL_DMA_Abort_IT>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2240      	movs	r2, #64	@ 0x40
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e26:	e001      	b.n	8005e2c <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d128      	bne.n	8005e84 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->TxXferCount = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	2b40      	cmp	r3, #64	@ 0x40
 8005e44:	d102      	bne.n	8005e4c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e002      	b.n	8005e52 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f910 	bl	80060a4 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000168 	.word	0x20000168
 8005e94:	057619f1 	.word	0x057619f1
 8005e98:	080069e9 	.word	0x080069e9
 8005e9c:	08006961 	.word	0x08006961
 8005ea0:	080060e1 	.word	0x080060e1
 8005ea4:	080061b5 	.word	0x080061b5

08005ea8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b088      	sub	sp, #32
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d004      	beq.n	8005ee8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
    return;
 8005ee6:	e0ce      	b.n	8006086 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <HAL_SPI_IRQHandler+0x5e>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    return;
 8005f04:	e0bf      	b.n	8006086 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	f003 0320 	and.w	r3, r3, #32
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <HAL_SPI_IRQHandler+0x7e>
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d105      	bne.n	8005f26 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80b0 	beq.w	8006086 <HAL_SPI_IRQHandler+0x1de>
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80aa 	beq.w	8006086 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d023      	beq.n	8005f84 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d011      	beq.n	8005f6c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4c:	f043 0204 	orr.w	r2, r3, #4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	e00b      	b.n	8005f84 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
        return;
 8005f82:	e080      	b.n	8006086 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	f043 0208 	orr.w	r2, r3, #8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d04f      	beq.n	8006084 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ff2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <HAL_SPI_IRQHandler+0x168>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d034      	beq.n	800607a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0203 	bic.w	r2, r2, #3
 800601e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d011      	beq.n	800604c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602c:	4a17      	ldr	r2, [pc, #92]	@ (800608c <HAL_SPI_IRQHandler+0x1e4>)
 800602e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006034:	4618      	mov	r0, r3
 8006036:	f7fc f841 	bl	80020bc <HAL_DMA_Abort_IT>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006044:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006050:	2b00      	cmp	r3, #0
 8006052:	d016      	beq.n	8006082 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006058:	4a0c      	ldr	r2, [pc, #48]	@ (800608c <HAL_SPI_IRQHandler+0x1e4>)
 800605a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006060:	4618      	mov	r0, r3
 8006062:	f7fc f82b 	bl	80020bc <HAL_DMA_Abort_IT>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006070:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006078:	e003      	b.n	8006082 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f808 	bl	8006090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006080:	e000      	b.n	8006084 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006082:	bf00      	nop
    return;
 8006084:	bf00      	nop
  }
}
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	080060b9 	.word	0x080060b9

08006090 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff ffdc 	bl	8006090 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060d8:	bf00      	nop
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060f2:	2200      	movs	r2, #0
 80060f4:	651a      	str	r2, [r3, #80]	@ 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80060f6:	4b2d      	ldr	r3, [pc, #180]	@ (80061ac <SPI_DMATxAbortCallback+0xcc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2d      	ldr	r2, [pc, #180]	@ (80061b0 <SPI_DMATxAbortCallback+0xd0>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	0a5b      	lsrs	r3, r3, #9
 8006102:	2264      	movs	r2, #100	@ 0x64
 8006104:	fb02 f303 	mul.w	r3, r2, r3
 8006108:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0202 	bic.w	r2, r2, #2
 8006118:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800612c:	e009      	b.n	8006142 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	3b01      	subs	r3, #1
 8006132:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0eb      	beq.n	800611a <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800614e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006150:	2b00      	cmp	r3, #0
 8006152:	d126      	bne.n	80061a2 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2200      	movs	r2, #0
 800615e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	2b40      	cmp	r3, #64	@ 0x40
 8006166:	d002      	beq.n	800616e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff ff82 	bl	80060a4 <HAL_SPI_AbortCpltCallback>
 80061a0:	e000      	b.n	80061a4 <SPI_DMATxAbortCallback+0xc4>
      return;
 80061a2:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000168 	.word	0x20000168
 80061b0:	057619f1 	.word	0x057619f1

080061b4 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c0:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d6:	2200      	movs	r2, #0
 80061d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80061ea:	f7fb fcd3 	bl	8001b94 <HAL_GetTick>
 80061ee:	4603      	mov	r3, r0
 80061f0:	461a      	mov	r2, r3
 80061f2:	2164      	movs	r1, #100	@ 0x64
 80061f4:	6978      	ldr	r0, [r7, #20]
 80061f6:	f000 fa5b 	bl	80066b0 <SPI_EndRxTxTransaction>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006204:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006210:	2b00      	cmp	r3, #0
 8006212:	d004      	beq.n	800621e <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800621a:	2b00      	cmp	r3, #0
 800621c:	d126      	bne.n	800626c <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2200      	movs	r2, #0
 8006222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622e:	2b40      	cmp	r3, #64	@ 0x40
 8006230:	d002      	beq.n	8006238 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8006264:	6978      	ldr	r0, [r7, #20]
 8006266:	f7ff ff1d 	bl	80060a4 <HAL_SPI_AbortCpltCallback>
 800626a:	e000      	b.n	800626e <SPI_DMARxAbortCallback+0xba>
      return;
 800626c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f103 020c 	add.w	r2, r3, #12
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10f      	bne.n	80062d0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fa32 	bl	8006734 <SPI_CloseRxTx_ISR>
    }
  }
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	7812      	ldrb	r2, [r2, #0]
 80062ec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10f      	bne.n	8006330 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800631e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d102      	bne.n	8006330 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa02 	bl	8006734 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634a:	b292      	uxth	r2, r2
 800634c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10f      	bne.n	8006390 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800637e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f9d2 	bl	8006734 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a4:	881a      	ldrh	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b0:	1c9a      	adds	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063dc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f9a3 	bl	8006734 <SPI_CloseRxTx_ISR>
    }
  }
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f103 020c 	add.w	r2, r3, #12
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	7812      	ldrb	r2, [r2, #0]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9f2 	bl	800681c <SPI_CloseRx_ISR>
  }
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	b292      	uxth	r2, r2
 8006454:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	1c9a      	adds	r2, r3, #2
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f9cf 	bl	800681c <SPI_CloseRx_ISR>
  }
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9ec 	bl	800689c <SPI_CloseTx_ISR>
  }
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e4:	1c9a      	adds	r2, r3, #2
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9ca 	bl	800689c <SPI_CloseTx_ISR>
  }
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006520:	e04c      	b.n	80065bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d048      	beq.n	80065bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800652a:	f7fb fb33 	bl	8001b94 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d902      	bls.n	8006540 <SPI_WaitFlagStateUntilTimeout+0x30>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d13d      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800654e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006558:	d111      	bne.n	800657e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006562:	d004      	beq.n	800656e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656c:	d107      	bne.n	800657e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800657c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006586:	d10f      	bne.n	80065a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e00f      	b.n	80065dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	bf0c      	ite	eq
 80065cc:	2301      	moveq	r3, #1
 80065ce:	2300      	movne	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d1a3      	bne.n	8006522 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065f8:	d111      	bne.n	800661e <SPI_EndRxTransaction+0x3a>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006602:	d004      	beq.n	800660e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660c:	d107      	bne.n	800661e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800661c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006626:	d12a      	bne.n	800667e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006630:	d012      	beq.n	8006658 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2200      	movs	r2, #0
 800663a:	2180      	movs	r1, #128	@ 0x80
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f7ff ff67 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d02d      	beq.n	80066a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e026      	b.n	80066a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	2101      	movs	r1, #1
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff ff54 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01a      	beq.n	80066a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006672:	f043 0220 	orr.w	r2, r3, #32
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e013      	b.n	80066a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	2101      	movs	r1, #1
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff ff41 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006698:	f043 0220 	orr.w	r2, r3, #32
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e000      	b.n	80066a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066bc:	4b1b      	ldr	r3, [pc, #108]	@ (800672c <SPI_EndRxTxTransaction+0x7c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006730 <SPI_EndRxTxTransaction+0x80>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	0d5b      	lsrs	r3, r3, #21
 80066c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066da:	d112      	bne.n	8006702 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	2180      	movs	r1, #128	@ 0x80
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff ff12 	bl	8006510 <SPI_WaitFlagStateUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d016      	beq.n	8006720 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	f043 0220 	orr.w	r2, r3, #32
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e00f      	b.n	8006722 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	3b01      	subs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006718:	2b80      	cmp	r3, #128	@ 0x80
 800671a:	d0f2      	beq.n	8006702 <SPI_EndRxTxTransaction+0x52>
 800671c:	e000      	b.n	8006720 <SPI_EndRxTxTransaction+0x70>
        break;
 800671e:	bf00      	nop
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000168 	.word	0x20000168
 8006730:	165e9f81 	.word	0x165e9f81

08006734 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800673c:	4b35      	ldr	r3, [pc, #212]	@ (8006814 <SPI_CloseRxTx_ISR+0xe0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a35      	ldr	r2, [pc, #212]	@ (8006818 <SPI_CloseRxTx_ISR+0xe4>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0a5b      	lsrs	r3, r3, #9
 8006748:	2264      	movs	r2, #100	@ 0x64
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006750:	f7fb fa20 	bl	8001b94 <HAL_GetTick>
 8006754:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0220 	bic.w	r2, r2, #32
 8006764:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d106      	bne.n	800677a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006778:	e009      	b.n	800678e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3b01      	subs	r3, #1
 800677e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0eb      	beq.n	8006766 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	2164      	movs	r1, #100	@ 0x64
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ff8c 	bl	80066b0 <SPI_EndRxTxTransaction>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d115      	bne.n	80067fc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d107      	bne.n	80067ec <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f00a fd23 	bl	8011230 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80067ea:	e00e      	b.n	800680a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f00a fd49 	bl	801128c <HAL_SPI_TxRxCpltCallback>
}
 80067fa:	e006      	b.n	800680a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fc43 	bl	8006090 <HAL_SPI_ErrorCallback>
}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000168 	.word	0x20000168
 8006818:	057619f1 	.word	0x057619f1

0800681c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006832:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006834:	f7fb f9ae 	bl	8001b94 <HAL_GetTick>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	2164      	movs	r1, #100	@ 0x64
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fed0 	bl	80065e4 <SPI_EndRxTransaction>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f00a fcd3 	bl	8011230 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800688a:	e002      	b.n	8006892 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fbff 	bl	8006090 <HAL_SPI_ErrorCallback>
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80068a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006958 <SPI_CloseTx_ISR+0xbc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <SPI_CloseTx_ISR+0xc0>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	0a5b      	lsrs	r3, r3, #9
 80068b0:	2264      	movs	r2, #100	@ 0x64
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068b8:	f7fb f96c 	bl	8001b94 <HAL_GetTick>
 80068bc:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c8:	f043 0220 	orr.w	r2, r3, #32
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80068d0:	e009      	b.n	80068e6 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0eb      	beq.n	80068be <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068f4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	2164      	movs	r1, #100	@ 0x64
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fed8 	bl	80066b0 <SPI_EndRxTxTransaction>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fba5 	bl	8006090 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006946:	e002      	b.n	800694e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f00a fc43 	bl	80111d4 <HAL_SPI_TxCpltCallback>
}
 800694e:	bf00      	nop
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000168 	.word	0x20000168
 800695c:	057619f1 	.word	0x057619f1

08006960 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006968:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <SPI_AbortRx_ISR+0x80>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1d      	ldr	r2, [pc, #116]	@ (80069e4 <SPI_AbortRx_ISR+0x84>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	0a5b      	lsrs	r3, r3, #9
 8006974:	2264      	movs	r2, #100	@ 0x64
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006986:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800698e:	e009      	b.n	80069a4 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3b01      	subs	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0eb      	beq.n	800697c <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b2:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069c2:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2207      	movs	r2, #7
 80069ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000168 	.word	0x20000168
 80069e4:	057619f1 	.word	0x057619f1

080069e8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069fe:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a0e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2207      	movs	r2, #7
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e01d      	b.n	8006a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f815 	bl	8006a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f000 fa2c 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b06      	cmp	r3, #6
 8006aae:	d007      	beq.n	8006ac0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d122      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d11b      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f06f 0202 	mvn.w	r2, #2
 8006b02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d003      	beq.n	8006b20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9b2 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006b1e:	e005      	b.n	8006b2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9a4 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9b5 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d122      	bne.n	8006b86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d11b      	bne.n	8006b86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f06f 0204 	mvn.w	r2, #4
 8006b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f988 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006b72:	e005      	b.n	8006b80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f97a 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f98b 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d122      	bne.n	8006bda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d11b      	bne.n	8006bda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f06f 0208 	mvn.w	r2, #8
 8006baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2204      	movs	r2, #4
 8006bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f95e 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006bc6:	e005      	b.n	8006bd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f950 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f961 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d122      	bne.n	8006c2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d11b      	bne.n	8006c2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f06f 0210 	mvn.w	r2, #16
 8006bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2208      	movs	r2, #8
 8006c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f934 	bl	8006e82 <HAL_TIM_IC_CaptureCallback>
 8006c1a:	e005      	b.n	8006c28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f926 	bl	8006e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f937 	bl	8006e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d10e      	bne.n	8006c5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f06f 0201 	mvn.w	r2, #1
 8006c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f00a ff3b 	bl	8011ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c64:	2b80      	cmp	r3, #128	@ 0x80
 8006c66:	d10e      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c72:	2b80      	cmp	r3, #128	@ 0x80
 8006c74:	d107      	bne.n	8006c86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fadd 	bl	8007240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c90:	2b40      	cmp	r3, #64	@ 0x40
 8006c92:	d10e      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ca0:	d107      	bne.n	8006cb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8fc 	bl	8006eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d10e      	bne.n	8006cde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d107      	bne.n	8006cde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f06f 0220 	mvn.w	r2, #32
 8006cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 faa7 	bl	800722c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_TIM_ConfigClockSource+0x18>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e0b3      	b.n	8006e66 <HAL_TIM_ConfigClockSource+0x180>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d24:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d36:	d03e      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0xd0>
 8006d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3c:	f200 8087 	bhi.w	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d44:	f000 8085 	beq.w	8006e52 <HAL_TIM_ConfigClockSource+0x16c>
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d4c:	d87f      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d4e:	2b70      	cmp	r3, #112	@ 0x70
 8006d50:	d01a      	beq.n	8006d88 <HAL_TIM_ConfigClockSource+0xa2>
 8006d52:	2b70      	cmp	r3, #112	@ 0x70
 8006d54:	d87b      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d56:	2b60      	cmp	r3, #96	@ 0x60
 8006d58:	d050      	beq.n	8006dfc <HAL_TIM_ConfigClockSource+0x116>
 8006d5a:	2b60      	cmp	r3, #96	@ 0x60
 8006d5c:	d877      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d5e:	2b50      	cmp	r3, #80	@ 0x50
 8006d60:	d03c      	beq.n	8006ddc <HAL_TIM_ConfigClockSource+0xf6>
 8006d62:	2b50      	cmp	r3, #80	@ 0x50
 8006d64:	d873      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d66:	2b40      	cmp	r3, #64	@ 0x40
 8006d68:	d058      	beq.n	8006e1c <HAL_TIM_ConfigClockSource+0x136>
 8006d6a:	2b40      	cmp	r3, #64	@ 0x40
 8006d6c:	d86f      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d6e:	2b30      	cmp	r3, #48	@ 0x30
 8006d70:	d064      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x156>
 8006d72:	2b30      	cmp	r3, #48	@ 0x30
 8006d74:	d86b      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d060      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x156>
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d867      	bhi.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d05c      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x156>
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d05a      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d86:	e062      	b.n	8006e4e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6899      	ldr	r1, [r3, #8]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f000 f9ac 	bl	80070f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006daa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	609a      	str	r2, [r3, #8]
      break;
 8006db4:	e04e      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6899      	ldr	r1, [r3, #8]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f000 f995 	bl	80070f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dd8:	609a      	str	r2, [r3, #8]
      break;
 8006dda:	e03b      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	6859      	ldr	r1, [r3, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	461a      	mov	r2, r3
 8006dea:	f000 f909 	bl	8007000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2150      	movs	r1, #80	@ 0x50
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f962 	bl	80070be <TIM_ITRx_SetConfig>
      break;
 8006dfa:	e02b      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f000 f928 	bl	800705e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2160      	movs	r1, #96	@ 0x60
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 f952 	bl	80070be <TIM_ITRx_SetConfig>
      break;
 8006e1a:	e01b      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6859      	ldr	r1, [r3, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f000 f8e9 	bl	8007000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2140      	movs	r1, #64	@ 0x40
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 f942 	bl	80070be <TIM_ITRx_SetConfig>
      break;
 8006e3a:	e00b      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f000 f939 	bl	80070be <TIM_ITRx_SetConfig>
      break;
 8006e4c:	e002      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
	...

08006ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a40      	ldr	r2, [pc, #256]	@ (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd8 <TIM_Base_SetConfig+0x118>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3c      	ldr	r2, [pc, #240]	@ (8006fdc <TIM_Base_SetConfig+0x11c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe0 <TIM_Base_SetConfig+0x120>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3a      	ldr	r2, [pc, #232]	@ (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2f      	ldr	r2, [pc, #188]	@ (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f20:	d027      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd8 <TIM_Base_SetConfig+0x118>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d023      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fdc <TIM_Base_SetConfig+0x11c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe0 <TIM_Base_SetConfig+0x120>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a29      	ldr	r2, [pc, #164]	@ (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d017      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a28      	ldr	r2, [pc, #160]	@ (8006fe8 <TIM_Base_SetConfig+0x128>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a27      	ldr	r2, [pc, #156]	@ (8006fec <TIM_Base_SetConfig+0x12c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a26      	ldr	r2, [pc, #152]	@ (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	@ (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a24      	ldr	r2, [pc, #144]	@ (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a23      	ldr	r2, [pc, #140]	@ (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40010400 	.word	0x40010400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800
 8006ff4:	40001800 	.word	0x40001800
 8006ff8:	40001c00 	.word	0x40001c00
 8006ffc:	40002000 	.word	0x40002000

08007000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f023 0201 	bic.w	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800702a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f023 030a 	bic.w	r3, r3, #10
 800703c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	621a      	str	r2, [r3, #32]
}
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800705e:	b480      	push	{r7}
 8007060:	b087      	sub	sp, #28
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f023 0210 	bic.w	r2, r3, #16
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	031b      	lsls	r3, r3, #12
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800709a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	f043 0307 	orr.w	r3, r3, #7
 80070e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	609a      	str	r2, [r3, #8]
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800710e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	021a      	lsls	r2, r3, #8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	431a      	orrs	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4313      	orrs	r3, r2
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	609a      	str	r2, [r3, #8]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007148:	2302      	movs	r3, #2
 800714a:	e05a      	b.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a21      	ldr	r2, [pc, #132]	@ (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d022      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007198:	d01d      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d018      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1a      	ldr	r2, [pc, #104]	@ (800721c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a18      	ldr	r2, [pc, #96]	@ (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a17      	ldr	r2, [pc, #92]	@ (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a15      	ldr	r2, [pc, #84]	@ (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d10c      	bne.n	80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40010400 	.word	0x40010400
 8007224:	40014000 	.word	0x40014000
 8007228:	40001800 	.word	0x40001800

0800722c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e03f      	b.n	80072e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f00b fae0 	bl	8012840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2224      	movs	r2, #36	@ 0x24
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fae7 	bl	800886c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	695a      	ldr	r2, [r3, #20]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b08a      	sub	sp, #40	@ 0x28
 80072f2:	af02      	add	r7, sp, #8
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b20      	cmp	r3, #32
 800730c:	d17c      	bne.n	8007408 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_UART_Transmit+0x2c>
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e075      	b.n	800740a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_UART_Transmit+0x3e>
 8007328:	2302      	movs	r3, #2
 800732a:	e06e      	b.n	800740a <HAL_UART_Transmit+0x11c>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2221      	movs	r2, #33	@ 0x21
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007342:	f7fa fc27 	bl	8001b94 <HAL_GetTick>
 8007346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	88fa      	ldrh	r2, [r7, #6]
 800734c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	88fa      	ldrh	r2, [r7, #6]
 8007352:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735c:	d108      	bne.n	8007370 <HAL_UART_Transmit+0x82>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	e003      	b.n	8007378 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007380:	e02a      	b.n	80073d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2200      	movs	r2, #0
 800738a:	2180      	movs	r1, #128	@ 0x80
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 ff3e 	bl	800820e <UART_WaitOnFlagUntilTimeout>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e036      	b.n	800740a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10b      	bne.n	80073ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	3302      	adds	r3, #2
 80073b6:	61bb      	str	r3, [r7, #24]
 80073b8:	e007      	b.n	80073ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	781a      	ldrb	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1cf      	bne.n	8007382 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2200      	movs	r2, #0
 80073ea:	2140      	movs	r1, #64	@ 0x40
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 ff0e 	bl	800820e <UART_WaitOnFlagUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e006      	b.n	800740a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e000      	b.n	800740a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	4613      	mov	r3, r2
 800741e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b20      	cmp	r3, #32
 800742a:	d130      	bne.n	800748e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_UART_Transmit_IT+0x26>
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e029      	b.n	8007490 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_UART_Transmit_IT+0x38>
 8007446:	2302      	movs	r3, #2
 8007448:	e022      	b.n	8007490 <HAL_UART_Transmit_IT+0x7e>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	88fa      	ldrh	r2, [r7, #6]
 8007462:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2221      	movs	r2, #33	@ 0x21
 800746e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007488:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	e000      	b.n	8007490 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800748e:	2302      	movs	r3, #2
  }
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08c      	sub	sp, #48	@ 0x30
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d165      	bne.n	8007582 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <HAL_UART_Transmit_DMA+0x26>
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e05e      	b.n	8007584 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_UART_Transmit_DMA+0x38>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e057      	b.n	8007584 <HAL_UART_Transmit_DMA+0xe8>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	88fa      	ldrh	r2, [r7, #6]
 80074e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2221      	movs	r2, #33	@ 0x21
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007500:	4a22      	ldr	r2, [pc, #136]	@ (800758c <HAL_UART_Transmit_DMA+0xf0>)
 8007502:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007508:	4a21      	ldr	r2, [pc, #132]	@ (8007590 <HAL_UART_Transmit_DMA+0xf4>)
 800750a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007510:	4a20      	ldr	r2, [pc, #128]	@ (8007594 <HAL_UART_Transmit_DMA+0xf8>)
 8007512:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007518:	2200      	movs	r2, #0
 800751a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800751c:	f107 0308 	add.w	r3, r7, #8
 8007520:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3304      	adds	r3, #4
 8007530:	461a      	mov	r2, r3
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	f7fa fcfa 	bl	8001f2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007540:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3314      	adds	r3, #20
 8007550:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	617b      	str	r3, [r7, #20]
   return(result);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3314      	adds	r3, #20
 8007568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800756a:	627a      	str	r2, [r7, #36]	@ 0x24
 800756c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6a39      	ldr	r1, [r7, #32]
 8007570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	61fb      	str	r3, [r7, #28]
   return(result);
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007582:	2302      	movs	r3, #2
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3730      	adds	r7, #48	@ 0x30
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	08007f69 	.word	0x08007f69
 8007590:	08008003 	.word	0x08008003
 8007594:	0800817b 	.word	0x0800817b

08007598 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d11d      	bne.n	80075ee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_UART_Receive_DMA+0x26>
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e016      	b.n	80075f0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_UART_Receive_DMA+0x38>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e00f      	b.n	80075f0 <HAL_UART_Receive_DMA+0x58>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	461a      	mov	r2, r3
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fe81 	bl	80082ec <UART_Start_Receive_DMA>
 80075ea:	4603      	mov	r3, r0
 80075ec:	e000      	b.n	80075f0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
  }
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b0a0      	sub	sp, #128	@ 0x80
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007612:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007616:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	330c      	adds	r3, #12
 800761e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007620:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007622:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007626:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800762e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3314      	adds	r3, #20
 800763a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3314      	adds	r3, #20
 8007652:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007654:	657a      	str	r2, [r7, #84]	@ 0x54
 8007656:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800765a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e5      	bne.n	8007634 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766c:	2b01      	cmp	r3, #1
 800766e:	d119      	bne.n	80076a4 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	f023 0310 	bic.w	r3, r3, #16
 8007686:	677b      	str	r3, [r7, #116]	@ 0x74
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007690:	643a      	str	r2, [r7, #64]	@ 0x40
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007696:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e5      	bne.n	8007670 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ae:	2b80      	cmp	r3, #128	@ 0x80
 80076b0:	d136      	bne.n	8007720 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80076d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e5      	bne.n	80076b2 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f2:	2200      	movs	r2, #0
 80076f4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fa fc6e 	bl	8001fdc <HAL_DMA_Abort>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770a:	4618      	mov	r0, r3
 800770c:	f7fa fe90 	bl	8002430 <HAL_DMA_GetError>
 8007710:	4603      	mov	r3, r0
 8007712:	2b20      	cmp	r3, #32
 8007714:	d104      	bne.n	8007720 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2210      	movs	r2, #16
 800771a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e052      	b.n	80077c6 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b40      	cmp	r3, #64	@ 0x40
 800772c:	d136      	bne.n	800779c <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3314      	adds	r3, #20
 8007734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	60bb      	str	r3, [r7, #8]
   return(result);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007744:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3314      	adds	r3, #20
 800774c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800774e:	61ba      	str	r2, [r7, #24]
 8007750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6979      	ldr	r1, [r7, #20]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	613b      	str	r3, [r7, #16]
   return(result);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d018      	beq.n	800779c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776e:	2200      	movs	r2, #0
 8007770:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa fc30 	bl	8001fdc <HAL_DMA_Abort>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00c      	beq.n	800779c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	4618      	mov	r0, r3
 8007788:	f7fa fe52 	bl	8002430 <HAL_DMA_GetError>
 800778c:	4603      	mov	r3, r0
 800778e:	2b20      	cmp	r3, #32
 8007790:	d104      	bne.n	800779c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2210      	movs	r2, #16
 8007796:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e014      	b.n	80077c6 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3780      	adds	r7, #128	@ 0x80
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b0a2      	sub	sp, #136	@ 0x88
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80077d8:	2301      	movs	r3, #1
 80077da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077f0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80077f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007802:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007804:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007808:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e3      	bne.n	80077de <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3314      	adds	r3, #20
 800781c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007828:	f023 0301 	bic.w	r3, r3, #1
 800782c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3314      	adds	r3, #20
 8007834:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007836:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007838:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800783c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e5      	bne.n	8007816 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784e:	2b01      	cmp	r3, #1
 8007850:	d119      	bne.n	8007886 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	330c      	adds	r3, #12
 8007858:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007864:	f023 0310 	bic.w	r3, r3, #16
 8007868:	67bb      	str	r3, [r7, #120]	@ 0x78
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007872:	647a      	str	r2, [r7, #68]	@ 0x44
 8007874:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007878:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e5      	bne.n	8007852 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007898:	2b80      	cmp	r3, #128	@ 0x80
 800789a:	d104      	bne.n	80078a6 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a0:	4a53      	ldr	r2, [pc, #332]	@ (80079f0 <HAL_UART_Abort_IT+0x220>)
 80078a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80078a4:	e003      	b.n	80078ae <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078aa:	2200      	movs	r2, #0
 80078ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00f      	beq.n	80078d6 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c0:	2b40      	cmp	r3, #64	@ 0x40
 80078c2:	d104      	bne.n	80078ce <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	4a4a      	ldr	r2, [pc, #296]	@ (80079f4 <HAL_UART_Abort_IT+0x224>)
 80078ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80078cc:	e003      	b.n	80078d6 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d2:	2200      	movs	r2, #0
 80078d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e0:	2b80      	cmp	r3, #128	@ 0x80
 80078e2:	d12d      	bne.n	8007940 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3314      	adds	r3, #20
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	623b      	str	r3, [r7, #32]
   return(result);
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3314      	adds	r3, #20
 8007902:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007904:	633a      	str	r2, [r7, #48]	@ 0x30
 8007906:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800790a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e5      	bne.n	80078e4 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00f      	beq.n	8007940 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007924:	4618      	mov	r0, r3
 8007926:	f7fa fbc9 	bl	80020bc <HAL_DMA_Abort_IT>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007934:	2200      	movs	r2, #0
 8007936:	651a      	str	r2, [r3, #80]	@ 0x50
 8007938:	e002      	b.n	8007940 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800793a:	2300      	movs	r3, #0
 800793c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b40      	cmp	r3, #64	@ 0x40
 800794c:	d130      	bne.n	80079b0 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3314      	adds	r3, #20
 8007954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	60fb      	str	r3, [r7, #12]
   return(result);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007964:	673b      	str	r3, [r7, #112]	@ 0x70
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800796e:	61fa      	str	r2, [r7, #28]
 8007970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	69b9      	ldr	r1, [r7, #24]
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	617b      	str	r3, [r7, #20]
   return(result);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e5      	bne.n	800794e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007986:	2b00      	cmp	r3, #0
 8007988:	d012      	beq.n	80079b0 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	4618      	mov	r0, r3
 8007990:	f7fa fb94 	bl	80020bc <HAL_DMA_Abort_IT>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799e:	2200      	movs	r2, #0
 80079a0:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a8:	e002      	b.n	80079b0 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80079b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d116      	bne.n	80079e6 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 faab 	bl	8007f3c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3788      	adds	r7, #136	@ 0x88
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	08008567 	.word	0x08008567
 80079f4:	080085c7 	.word	0x080085c7

080079f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0ba      	sub	sp, #232	@ 0xe8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <HAL_UART_IRQHandler+0x66>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fe4d 	bl	80086f6 <UART_Receive_IT>
      return;
 8007a5c:	e256      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80de 	beq.w	8007c24 <HAL_UART_IRQHandler+0x22c>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80d1 	beq.w	8007c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_UART_IRQHandler+0xae>
 8007a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	f043 0201 	orr.w	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_UART_IRQHandler+0xd2>
 8007ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac2:	f043 0202 	orr.w	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xf6>
 8007ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae6:	f043 0204 	orr.w	r2, r3, #4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d011      	beq.n	8007b1e <HAL_UART_IRQHandler+0x126>
 8007afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 81ed 	beq.w	8007f02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_UART_IRQHandler+0x14e>
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fdd8 	bl	80086f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b50:	2b40      	cmp	r3, #64	@ 0x40
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <HAL_UART_IRQHandler+0x17a>
 8007b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d04f      	beq.n	8007c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fc80 	bl	8008478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b82:	2b40      	cmp	r3, #64	@ 0x40
 8007b84:	d141      	bne.n	8007c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d9      	bne.n	8007b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d013      	beq.n	8007c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bde:	4a7d      	ldr	r2, [pc, #500]	@ (8007dd4 <HAL_UART_IRQHandler+0x3dc>)
 8007be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fa fa68 	bl	80020bc <HAL_DMA_Abort_IT>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d016      	beq.n	8007c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e00e      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f00a fea4 	bl	8012950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e00a      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f00a fea0 	bl	8012950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e006      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f00a fe9c 	bl	8012950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007c1e:	e170      	b.n	8007f02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	bf00      	nop
    return;
 8007c22:	e16e      	b.n	8007f02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 814a 	bne.w	8007ec2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8143 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 813c 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6a:	2b40      	cmp	r3, #64	@ 0x40
 8007c6c:	f040 80b4 	bne.w	8007dd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8140 	beq.w	8007f06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	f080 8139 	bcs.w	8007f06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ca6:	f000 8088 	beq.w	8007dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1d9      	bne.n	8007caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3314      	adds	r3, #20
 8007cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3314      	adds	r3, #20
 8007d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e1      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3314      	adds	r3, #20
 8007d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e3      	bne.n	8007d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fa f911 	bl	8001fdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f8c0 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dd0:	e099      	b.n	8007f06 <HAL_UART_IRQHandler+0x50e>
 8007dd2:	bf00      	nop
 8007dd4:	0800853f 	.word	0x0800853f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 808b 	beq.w	8007f0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8086 	beq.w	8007f0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330c      	adds	r3, #12
 8007e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e22:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e3      	bne.n	8007dfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	623b      	str	r3, [r7, #32]
   return(result);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3314      	adds	r3, #20
 8007e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0310 	bic.w	r3, r3, #16
 8007e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ea0:	61fa      	str	r2, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	69b9      	ldr	r1, [r7, #24]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	617b      	str	r3, [r7, #20]
   return(result);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e3      	bne.n	8007e7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f848 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ec0:	e023      	b.n	8007f0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x4ea>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fba3 	bl	8008626 <UART_Transmit_IT>
    return;
 8007ee0:	e014      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00e      	beq.n	8007f0c <HAL_UART_IRQHandler+0x514>
 8007eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fbe3 	bl	80086c6 <UART_EndTransmit_IT>
    return;
 8007f00:	e004      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
    return;
 8007f02:	bf00      	nop
 8007f04:	e002      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
      return;
 8007f06:	bf00      	nop
 8007f08:	e000      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
      return;
 8007f0a:	bf00      	nop
  }
}
 8007f0c:	37e8      	adds	r7, #232	@ 0xe8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b090      	sub	sp, #64	@ 0x40
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d137      	bne.n	8007ff4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f86:	2200      	movs	r2, #0
 8007f88:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3314      	adds	r3, #20
 8007f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e5      	bne.n	8007f8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fde:	61fa      	str	r2, [r7, #28]
 8007fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	69b9      	ldr	r1, [r7, #24]
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	e841 2300 	strex	r3, r2, [r1]
 8007fea:	617b      	str	r3, [r7, #20]
   return(result);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e5      	bne.n	8007fbe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ff2:	e002      	b.n	8007ffa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007ff4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007ff6:	f00a fbcb 	bl	8012790 <HAL_UART_TxCpltCallback>
}
 8007ffa:	bf00      	nop
 8007ffc:	3740      	adds	r7, #64	@ 0x40
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff ff7f 	bl	8007f14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008016:	bf00      	nop
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b09c      	sub	sp, #112	@ 0x70
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d172      	bne.n	8008120 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800803a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800803c:	2200      	movs	r2, #0
 800803e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008056:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008060:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008062:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008066:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800806e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3314      	adds	r3, #20
 800807a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	667b      	str	r3, [r7, #100]	@ 0x64
 800808c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3314      	adds	r3, #20
 8008092:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008094:	647a      	str	r2, [r7, #68]	@ 0x44
 8008096:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800809a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3314      	adds	r3, #20
 80080ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	623b      	str	r3, [r7, #32]
   return(result);
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080be:	663b      	str	r3, [r7, #96]	@ 0x60
 80080c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3314      	adds	r3, #20
 80080c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80080c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80080ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e5      	bne.n	80080a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d119      	bne.n	8008120 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0310 	bic.w	r3, r3, #16
 8008102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800810c:	61fa      	str	r2, [r7, #28]
 800810e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	69b9      	ldr	r1, [r7, #24]
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	617b      	str	r3, [r7, #20]
   return(result);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e5      	bne.n	80080ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008120:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008124:	2b01      	cmp	r3, #1
 8008126:	d106      	bne.n	8008136 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800812a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800812c:	4619      	mov	r1, r3
 800812e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008130:	f7ff ff0e 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008134:	e002      	b.n	800813c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008136:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008138:	f00a fb56 	bl	80127e8 <HAL_UART_RxCpltCallback>
}
 800813c:	bf00      	nop
 800813e:	3770      	adds	r7, #112	@ 0x70
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008156:	2b01      	cmp	r3, #1
 8008158:	d108      	bne.n	800816c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	4619      	mov	r1, r3
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff fef3 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800816a:	e002      	b.n	8008172 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fedb 	bl	8007f28 <HAL_UART_RxHalfCpltCallback>
}
 8008172:	bf00      	nop
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008196:	2b80      	cmp	r3, #128	@ 0x80
 8008198:	bf0c      	ite	eq
 800819a:	2301      	moveq	r3, #1
 800819c:	2300      	movne	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b21      	cmp	r3, #33	@ 0x21
 80081ac:	d108      	bne.n	80081c0 <UART_DMAError+0x46>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80081ba:	68b8      	ldr	r0, [r7, #8]
 80081bc:	f000 f934 	bl	8008428 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ca:	2b40      	cmp	r3, #64	@ 0x40
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b22      	cmp	r3, #34	@ 0x22
 80081e0:	d108      	bne.n	80081f4 <UART_DMAError+0x7a>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80081ee:	68b8      	ldr	r0, [r7, #8]
 80081f0:	f000 f942 	bl	8008478 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f8:	f043 0210 	orr.w	r2, r3, #16
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008200:	68b8      	ldr	r0, [r7, #8]
 8008202:	f00a fba5 	bl	8012950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b090      	sub	sp, #64	@ 0x40
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	4613      	mov	r3, r2
 800821c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800821e:	e050      	b.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008220:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008226:	d04c      	beq.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0x30>
 800822e:	f7f9 fcb1 	bl	8001b94 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800823a:	429a      	cmp	r2, r3
 800823c:	d241      	bcs.n	80082c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	330c      	adds	r3, #12
 8008244:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	330c      	adds	r3, #12
 800825c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800825e:	637a      	str	r2, [r7, #52]	@ 0x34
 8008260:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e5      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	613b      	str	r3, [r7, #16]
   return(result);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f023 0301 	bic.w	r3, r3, #1
 8008288:	63bb      	str	r3, [r7, #56]	@ 0x38
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3314      	adds	r3, #20
 8008290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008292:	623a      	str	r2, [r7, #32]
 8008294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	69f9      	ldr	r1, [r7, #28]
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	61bb      	str	r3, [r7, #24]
   return(result);
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e5      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e00f      	b.n	80082e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4013      	ands	r3, r2
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	bf0c      	ite	eq
 80082d2:	2301      	moveq	r3, #1
 80082d4:	2300      	movne	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d09f      	beq.n	8008220 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3740      	adds	r7, #64	@ 0x40
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b098      	sub	sp, #96	@ 0x60
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	88fa      	ldrh	r2, [r7, #6]
 8008304:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2222      	movs	r2, #34	@ 0x22
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008318:	4a40      	ldr	r2, [pc, #256]	@ (800841c <UART_Start_Receive_DMA+0x130>)
 800831a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008320:	4a3f      	ldr	r2, [pc, #252]	@ (8008420 <UART_Start_Receive_DMA+0x134>)
 8008322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008328:	4a3e      	ldr	r2, [pc, #248]	@ (8008424 <UART_Start_Receive_DMA+0x138>)
 800832a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008330:	2200      	movs	r2, #0
 8008332:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3304      	adds	r3, #4
 8008344:	4619      	mov	r1, r3
 8008346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	f7f9 fdee 	bl	8001f2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d019      	beq.n	80083aa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	330c      	adds	r3, #12
 800837c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800838c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008396:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008398:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800839c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80083a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e5      	bne.n	8008376 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3314      	adds	r3, #20
 80083b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3314      	adds	r3, #20
 80083c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083ca:	63ba      	str	r2, [r7, #56]	@ 0x38
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80083d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e5      	bne.n	80083aa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3314      	adds	r3, #20
 80083e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	617b      	str	r3, [r7, #20]
   return(result);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3314      	adds	r3, #20
 80083fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8008400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6a39      	ldr	r1, [r7, #32]
 8008404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	61fb      	str	r3, [r7, #28]
   return(result);
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3760      	adds	r7, #96	@ 0x60
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	0800801f 	.word	0x0800801f
 8008420:	08008145 	.word	0x08008145
 8008424:	0800817b 	.word	0x0800817b

08008428 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b089      	sub	sp, #36	@ 0x24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	61ba      	str	r2, [r7, #24]
 8008452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6979      	ldr	r1, [r7, #20]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	613b      	str	r3, [r7, #16]
   return(result);
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e5      	bne.n	8008430 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800846c:	bf00      	nop
 800846e:	3724      	adds	r7, #36	@ 0x24
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008478:	b480      	push	{r7}
 800847a:	b095      	sub	sp, #84	@ 0x54
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	f023 0301 	bic.w	r3, r3, #1
 80084ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e5      	bne.n	80084b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d119      	bne.n	8008524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f023 0310 	bic.w	r3, r3, #16
 8008506:	647b      	str	r3, [r7, #68]	@ 0x44
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	330c      	adds	r3, #12
 800850e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008510:	61ba      	str	r2, [r7, #24]
 8008512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6979      	ldr	r1, [r7, #20]
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	613b      	str	r3, [r7, #16]
   return(result);
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e5      	bne.n	80084f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008532:	bf00      	nop
 8008534:	3754      	adds	r7, #84	@ 0x54
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f00a f9f9 	bl	8012950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008572:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008578:	2200      	movs	r2, #0
 800857a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858a:	2b00      	cmp	r3, #0
 800858c:	d117      	bne.n	80085be <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff fcc0 	bl	8007f3c <HAL_UART_AbortCpltCallback>
 80085bc:	e000      	b.n	80085c0 <UART_DMATxAbortCallback+0x5a>
      return;
 80085be:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d8:	2200      	movs	r2, #0
 80085da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d117      	bne.n	800861e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2220      	movs	r2, #32
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff fc90 	bl	8007f3c <HAL_UART_AbortCpltCallback>
 800861c:	e000      	b.n	8008620 <UART_DMARxAbortCallback+0x5a>
      return;
 800861e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b21      	cmp	r3, #33	@ 0x21
 8008638:	d13e      	bne.n	80086b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008642:	d114      	bne.n	800866e <UART_Transmit_IT+0x48>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d110      	bne.n	800866e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	1c9a      	adds	r2, r3, #2
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	621a      	str	r2, [r3, #32]
 800866c:	e008      	b.n	8008680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	1c59      	adds	r1, r3, #1
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6211      	str	r1, [r2, #32]
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008684:	b29b      	uxth	r3, r3
 8008686:	3b01      	subs	r3, #1
 8008688:	b29b      	uxth	r3, r3
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	4619      	mov	r1, r3
 800868e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10f      	bne.n	80086b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e000      	b.n	80086ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086b8:	2302      	movs	r3, #2
  }
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f00a f852 	bl	8012790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b08c      	sub	sp, #48	@ 0x30
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b22      	cmp	r3, #34	@ 0x22
 8008708:	f040 80ab 	bne.w	8008862 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008714:	d117      	bne.n	8008746 <UART_Receive_IT+0x50>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d113      	bne.n	8008746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800871e:	2300      	movs	r3, #0
 8008720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008726:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b29b      	uxth	r3, r3
 8008730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008734:	b29a      	uxth	r2, r3
 8008736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873e:	1c9a      	adds	r2, r3, #2
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	629a      	str	r2, [r3, #40]	@ 0x28
 8008744:	e026      	b.n	8008794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008758:	d007      	beq.n	800876a <UART_Receive_IT+0x74>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <UART_Receive_IT+0x82>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e008      	b.n	800878a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008784:	b2da      	uxtb	r2, r3
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b01      	subs	r3, #1
 800879c:	b29b      	uxth	r3, r3
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	4619      	mov	r1, r3
 80087a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d15a      	bne.n	800885e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0220 	bic.w	r2, r2, #32
 80087b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695a      	ldr	r2, [r3, #20]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0201 	bic.w	r2, r2, #1
 80087d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d135      	bne.n	8008854 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	613b      	str	r3, [r7, #16]
   return(result);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f023 0310 	bic.w	r3, r3, #16
 8008804:	627b      	str	r3, [r7, #36]	@ 0x24
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	330c      	adds	r3, #12
 800880c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800880e:	623a      	str	r2, [r7, #32]
 8008810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	69f9      	ldr	r1, [r7, #28]
 8008814:	6a3a      	ldr	r2, [r7, #32]
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	61bb      	str	r3, [r7, #24]
   return(result);
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e5      	bne.n	80087ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b10      	cmp	r3, #16
 800882e:	d10a      	bne.n	8008846 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fb7f 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
 8008852:	e002      	b.n	800885a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f009 ffc7 	bl	80127e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	e002      	b.n	8008864 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e000      	b.n	8008864 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008862:	2302      	movs	r3, #2
  }
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	@ 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800886c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008870:	b0c0      	sub	sp, #256	@ 0x100
 8008872:	af00      	add	r7, sp, #0
 8008874:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008888:	68d9      	ldr	r1, [r3, #12]
 800888a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	ea40 0301 	orr.w	r3, r0, r1
 8008894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088c4:	f021 010c 	bic.w	r1, r1, #12
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088d2:	430b      	orrs	r3, r1
 80088d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e6:	6999      	ldr	r1, [r3, #24]
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	ea40 0301 	orr.w	r3, r0, r1
 80088f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b8f      	ldr	r3, [pc, #572]	@ (8008b38 <UART_SetConfig+0x2cc>)
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d005      	beq.n	800890c <UART_SetConfig+0xa0>
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	4b8d      	ldr	r3, [pc, #564]	@ (8008b3c <UART_SetConfig+0x2d0>)
 8008908:	429a      	cmp	r2, r3
 800890a:	d104      	bne.n	8008916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fc fa2c 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8008910:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008914:	e003      	b.n	800891e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008916:	f7fc fa13 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 800891a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800891e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008928:	f040 810c 	bne.w	8008b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800892c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008930:	2200      	movs	r2, #0
 8008932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008936:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800893a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800893e:	4622      	mov	r2, r4
 8008940:	462b      	mov	r3, r5
 8008942:	1891      	adds	r1, r2, r2
 8008944:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008946:	415b      	adcs	r3, r3
 8008948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800894a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800894e:	4621      	mov	r1, r4
 8008950:	eb12 0801 	adds.w	r8, r2, r1
 8008954:	4629      	mov	r1, r5
 8008956:	eb43 0901 	adc.w	r9, r3, r1
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800896a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800896e:	4690      	mov	r8, r2
 8008970:	4699      	mov	r9, r3
 8008972:	4623      	mov	r3, r4
 8008974:	eb18 0303 	adds.w	r3, r8, r3
 8008978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800897c:	462b      	mov	r3, r5
 800897e:	eb49 0303 	adc.w	r3, r9, r3
 8008982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008992:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800899a:	460b      	mov	r3, r1
 800899c:	18db      	adds	r3, r3, r3
 800899e:	653b      	str	r3, [r7, #80]	@ 0x50
 80089a0:	4613      	mov	r3, r2
 80089a2:	eb42 0303 	adc.w	r3, r2, r3
 80089a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80089a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089b0:	f7f8 f91a 	bl	8000be8 <__aeabi_uldivmod>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4b61      	ldr	r3, [pc, #388]	@ (8008b40 <UART_SetConfig+0x2d4>)
 80089ba:	fba3 2302 	umull	r2, r3, r3, r2
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	011c      	lsls	r4, r3, #4
 80089c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	1891      	adds	r1, r2, r2
 80089da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089dc:	415b      	adcs	r3, r3
 80089de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089e4:	4641      	mov	r1, r8
 80089e6:	eb12 0a01 	adds.w	sl, r2, r1
 80089ea:	4649      	mov	r1, r9
 80089ec:	eb43 0b01 	adc.w	fp, r3, r1
 80089f0:	f04f 0200 	mov.w	r2, #0
 80089f4:	f04f 0300 	mov.w	r3, #0
 80089f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a04:	4692      	mov	sl, r2
 8008a06:	469b      	mov	fp, r3
 8008a08:	4643      	mov	r3, r8
 8008a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8008a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a12:	464b      	mov	r3, r9
 8008a14:	eb4b 0303 	adc.w	r3, fp, r3
 8008a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a30:	460b      	mov	r3, r1
 8008a32:	18db      	adds	r3, r3, r3
 8008a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a36:	4613      	mov	r3, r2
 8008a38:	eb42 0303 	adc.w	r3, r2, r3
 8008a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a46:	f7f8 f8cf 	bl	8000be8 <__aeabi_uldivmod>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4b3b      	ldr	r3, [pc, #236]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008a52:	fba3 2301 	umull	r2, r3, r3, r1
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	2264      	movs	r2, #100	@ 0x64
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
 8008a5e:	1acb      	subs	r3, r1, r3
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a66:	4b36      	ldr	r3, [pc, #216]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008a68:	fba3 2302 	umull	r2, r3, r3, r2
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a74:	441c      	add	r4, r3
 8008a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	1891      	adds	r1, r2, r2
 8008a8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a90:	415b      	adcs	r3, r3
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a98:	4641      	mov	r1, r8
 8008a9a:	1851      	adds	r1, r2, r1
 8008a9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	414b      	adcs	r3, r1
 8008aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ab0:	4659      	mov	r1, fp
 8008ab2:	00cb      	lsls	r3, r1, #3
 8008ab4:	4651      	mov	r1, sl
 8008ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aba:	4651      	mov	r1, sl
 8008abc:	00ca      	lsls	r2, r1, #3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	189b      	adds	r3, r3, r2
 8008ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008acc:	464b      	mov	r3, r9
 8008ace:	460a      	mov	r2, r1
 8008ad0:	eb42 0303 	adc.w	r3, r2, r3
 8008ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008aec:	460b      	mov	r3, r1
 8008aee:	18db      	adds	r3, r3, r3
 8008af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008af2:	4613      	mov	r3, r2
 8008af4:	eb42 0303 	adc.w	r3, r2, r3
 8008af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b02:	f7f8 f871 	bl	8000be8 <__aeabi_uldivmod>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b10:	095b      	lsrs	r3, r3, #5
 8008b12:	2164      	movs	r1, #100	@ 0x64
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	3332      	adds	r3, #50	@ 0x32
 8008b1e:	4a08      	ldr	r2, [pc, #32]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008b20:	fba2 2303 	umull	r2, r3, r2, r3
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	f003 0207 	and.w	r2, r3, #7
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4422      	add	r2, r4
 8008b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b34:	e106      	b.n	8008d44 <UART_SetConfig+0x4d8>
 8008b36:	bf00      	nop
 8008b38:	40011000 	.word	0x40011000
 8008b3c:	40011400 	.word	0x40011400
 8008b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b56:	4642      	mov	r2, r8
 8008b58:	464b      	mov	r3, r9
 8008b5a:	1891      	adds	r1, r2, r2
 8008b5c:	6239      	str	r1, [r7, #32]
 8008b5e:	415b      	adcs	r3, r3
 8008b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b66:	4641      	mov	r1, r8
 8008b68:	1854      	adds	r4, r2, r1
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	eb43 0501 	adc.w	r5, r3, r1
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	00eb      	lsls	r3, r5, #3
 8008b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b7e:	00e2      	lsls	r2, r4, #3
 8008b80:	4614      	mov	r4, r2
 8008b82:	461d      	mov	r5, r3
 8008b84:	4643      	mov	r3, r8
 8008b86:	18e3      	adds	r3, r4, r3
 8008b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	eb45 0303 	adc.w	r3, r5, r3
 8008b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	008b      	lsls	r3, r1, #2
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	008a      	lsls	r2, r1, #2
 8008bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bc4:	f7f8 f810 	bl	8000be8 <__aeabi_uldivmod>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4b60      	ldr	r3, [pc, #384]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008bce:	fba3 2302 	umull	r2, r3, r3, r2
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	011c      	lsls	r4, r3, #4
 8008bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	1891      	adds	r1, r2, r2
 8008bee:	61b9      	str	r1, [r7, #24]
 8008bf0:	415b      	adcs	r3, r3
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	1851      	adds	r1, r2, r1
 8008bfc:	6139      	str	r1, [r7, #16]
 8008bfe:	4649      	mov	r1, r9
 8008c00:	414b      	adcs	r3, r1
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c10:	4659      	mov	r1, fp
 8008c12:	00cb      	lsls	r3, r1, #3
 8008c14:	4651      	mov	r1, sl
 8008c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1a:	4651      	mov	r1, sl
 8008c1c:	00ca      	lsls	r2, r1, #3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	4642      	mov	r2, r8
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	460a      	mov	r2, r1
 8008c30:	eb42 0303 	adc.w	r3, r2, r3
 8008c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c50:	4649      	mov	r1, r9
 8008c52:	008b      	lsls	r3, r1, #2
 8008c54:	4641      	mov	r1, r8
 8008c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	008a      	lsls	r2, r1, #2
 8008c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c62:	f7f7 ffc1 	bl	8000be8 <__aeabi_uldivmod>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4b38      	ldr	r3, [pc, #224]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	2264      	movs	r2, #100	@ 0x64
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	1acb      	subs	r3, r1, r3
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	3332      	adds	r3, #50	@ 0x32
 8008c80:	4a33      	ldr	r2, [pc, #204]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c8c:	441c      	add	r4, r3
 8008c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c92:	2200      	movs	r2, #0
 8008c94:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c96:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	1891      	adds	r1, r2, r2
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	415b      	adcs	r3, r3
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cac:	4641      	mov	r1, r8
 8008cae:	1851      	adds	r1, r2, r1
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	414b      	adcs	r3, r1
 8008cb6:	607b      	str	r3, [r7, #4]
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	00cb      	lsls	r3, r1, #3
 8008cc8:	4651      	mov	r1, sl
 8008cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cce:	4651      	mov	r1, sl
 8008cd0:	00ca      	lsls	r2, r1, #3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4642      	mov	r2, r8
 8008cda:	189b      	adds	r3, r3, r2
 8008cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cde:	464b      	mov	r3, r9
 8008ce0:	460a      	mov	r2, r1
 8008ce2:	eb42 0303 	adc.w	r3, r2, r3
 8008ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d00:	4649      	mov	r1, r9
 8008d02:	008b      	lsls	r3, r1, #2
 8008d04:	4641      	mov	r1, r8
 8008d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	008a      	lsls	r2, r1, #2
 8008d0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d12:	f7f7 ff69 	bl	8000be8 <__aeabi_uldivmod>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	2164      	movs	r1, #100	@ 0x64
 8008d24:	fb01 f303 	mul.w	r3, r1, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	3332      	adds	r3, #50	@ 0x32
 8008d2e:	4a08      	ldr	r2, [pc, #32]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008d30:	fba2 2303 	umull	r2, r3, r2, r3
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	f003 020f 	and.w	r2, r3, #15
 8008d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4422      	add	r2, r4
 8008d42:	609a      	str	r2, [r3, #8]
}
 8008d44:	bf00      	nop
 8008d46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d50:	51eb851f 	.word	0x51eb851f

08008d54 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 8008d5c:	23ae      	movs	r3, #174	@ 0xae
 8008d5e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d006      	beq.n	8008d74 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 8008d66:	2214      	movs	r2, #20
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4805      	ldr	r0, [pc, #20]	@ (8008d80 <gos_driverInit+0x2c>)
 8008d6c:	f00d ffaf 	bl	8016cce <memcpy>
        driverInitResult = GOS_SUCCESS;
 8008d70:	2355      	movs	r3, #85	@ 0x55
 8008d72:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	2000194c 	.word	0x2000194c

08008d84 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 8008d8a:	23ae      	movs	r3, #174	@ 0xae
 8008d8c:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8008d92:	2301      	movs	r3, #1
 8008d94:	80fb      	strh	r3, [r7, #6]
 8008d96:	e038      	b.n	8008e0a <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 8008d98:	88fb      	ldrh	r3, [r7, #6]
 8008d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008d9c:	216a      	movs	r1, #106	@ 0x6a
 8008d9e:	fb01 f303 	mul.w	r3, r1, r3
 8008da2:	4413      	add	r3, r2
 8008da4:	2200      	movs	r2, #0
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	2200      	movs	r2, #0
 8008daa:	705a      	strb	r2, [r3, #1]
 8008dac:	2200      	movs	r2, #0
 8008dae:	709a      	strb	r2, [r3, #2]
 8008db0:	2200      	movs	r2, #0
 8008db2:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	4a64      	ldr	r2, [pc, #400]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008db8:	216a      	movs	r1, #106	@ 0x6a
 8008dba:	fb01 f303 	mul.w	r3, r1, r3
 8008dbe:	4413      	add	r3, r2
 8008dc0:	3306      	adds	r3, #6
 8008dc2:	22ff      	movs	r2, #255	@ 0xff
 8008dc4:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 8008dc6:	88fb      	ldrh	r3, [r7, #6]
 8008dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008dca:	216a      	movs	r1, #106	@ 0x6a
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	3307      	adds	r3, #7
 8008dd4:	22ff      	movs	r2, #255	@ 0xff
 8008dd6:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 8008dd8:	88fb      	ldrh	r3, [r7, #6]
 8008dda:	4a5b      	ldr	r2, [pc, #364]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008ddc:	216a      	movs	r1, #106	@ 0x6a
 8008dde:	fb01 f303 	mul.w	r3, r1, r3
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	2205      	movs	r2, #5
 8008de8:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 8008dea:	88fb      	ldrh	r3, [r7, #6]
 8008dec:	4a56      	ldr	r2, [pc, #344]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008dee:	216a      	movs	r1, #106	@ 0x6a
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	4413      	add	r3, r2
 8008df6:	3328      	adds	r3, #40	@ 0x28
 8008df8:	2200      	movs	r2, #0
 8008dfa:	709a      	strb	r2, [r3, #2]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	3301      	adds	r3, #1
 8008e08:	80fb      	strh	r3, [r7, #6]
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	2b0f      	cmp	r3, #15
 8008e0e:	d9c3      	bls.n	8008d98 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 8008e10:	4b4e      	ldr	r3, [pc, #312]	@ (8008f4c <gos_kernelInit+0x1c8>)
 8008e12:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	3b04      	subs	r3, #4
 8008e18:	603b      	str	r3, [r7, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e20:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	3b04      	subs	r3, #4
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	4a49      	ldr	r2, [pc, #292]	@ (8008f50 <gos_kernelInit+0x1cc>)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	3b04      	subs	r3, #4
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f06f 0202 	mvn.w	r2, #2
 8008e3a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3b04      	subs	r3, #4
 8008e40:	603b      	str	r3, [r7, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8008e48:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008e56:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	3b04      	subs	r3, #4
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8008e64:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8008e72:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3b04      	subs	r3, #4
 8008e78:	603b      	str	r3, [r7, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	3b04      	subs	r3, #4
 8008e84:	603b      	str	r3, [r7, #0]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8008e8c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	3b04      	subs	r3, #4
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8008e9a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	3b04      	subs	r3, #4
 8008ea0:	603b      	str	r3, [r7, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8008ea8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	3b04      	subs	r3, #4
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8008eb6:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	3b04      	subs	r3, #4
 8008ebc:	603b      	str	r3, [r7, #0]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8008ec4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	3b04      	subs	r3, #4
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 8008ed2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	3b04      	subs	r3, #4
 8008ed8:	603b      	str	r3, [r7, #0]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8008ee0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8008eee:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	4a15      	ldr	r2, [pc, #84]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008ef4:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 8008ef6:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efa:	4a13      	ldr	r2, [pc, #76]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008efc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8008f00:	b292      	uxth	r2, r2
 8008f02:	1a9b      	subs	r3, r3, r2
 8008f04:	3340      	adds	r3, #64	@ 0x40
 8008f06:	4a10      	ldr	r2, [pc, #64]	@ (8008f48 <gos_kernelInit+0x1c4>)
 8008f08:	f8c2 3066 	str.w	r3, [r2, #102]	@ 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 8008f0c:	4b11      	ldr	r3, [pc, #68]	@ (8008f54 <gos_kernelInit+0x1d0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a10      	ldr	r2, [pc, #64]	@ (8008f54 <gos_kernelInit+0x1d0>)
 8008f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <gos_kernelInit+0x1d0>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8008f54 <gos_kernelInit+0x1d0>)
 8008f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <gos_kernelInit+0x1d0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a0a      	ldr	r2, [pc, #40]	@ (8008f54 <gos_kernelInit+0x1d0>)
 8008f2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f2e:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 8008f30:	4b09      	ldr	r3, [pc, #36]	@ (8008f58 <gos_kernelInit+0x1d4>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 8008f36:	2355      	movs	r3, #85	@ 0x55
 8008f38:	717b      	strb	r3, [r7, #5]

    return initResult;
 8008f3a:	797b      	ldrb	r3, [r7, #5]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20000404 	.word	0x20000404
 8008f4c:	2001ee00 	.word	0x2001ee00
 8008f50:	0800bb31 	.word	0x0800bb31
 8008f54:	e000ed24 	.word	0xe000ed24
 8008f58:	20001961 	.word	0x20001961

08008f5c <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 8008f62:	23ae      	movs	r3, #174	@ 0xae
 8008f64:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 8008f66:	4b19      	ldr	r3, [pc, #100]	@ (8008fcc <gos_kernelStart+0x70>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 8008f6c:	f000 fea2 	bl	8009cb4 <gos_kernelGetCurrentPsp>
 8008f70:	f380 8809 	msr	PSP, r0
 8008f74:	f3ef 8014 	mrs	r0, CONTROL
 8008f78:	f040 0002 	orr.w	r0, r0, #2
 8008f7c:	f380 8814 	msr	CONTROL, r0
 8008f80:	f3ef 8014 	mrs	r0, CONTROL
 8008f84:	f040 0001 	orr.w	r0, r0, #1
 8008f88:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 8008f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008fcc <gos_kernelStart+0x70>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a0f      	ldr	r2, [pc, #60]	@ (8008fd0 <gos_kernelStart+0x74>)
 8008f92:	216a      	movs	r1, #106	@ 0x6a
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	4413      	add	r3, r2
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8008f9e:	480d      	ldr	r0, [pc, #52]	@ (8008fd4 <gos_kernelStart+0x78>)
 8008fa0:	f005 fb7c 	bl	800e69c <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd8 <gos_kernelStart+0x7c>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <gos_kernelStart+0x5c>
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <gos_kernelStart+0x7c>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	4b08      	ldr	r3, [pc, #32]	@ (8008fd8 <gos_kernelStart+0x7c>)
 8008fb6:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 8008fb8:	4b08      	ldr	r3, [pc, #32]	@ (8008fdc <gos_kernelStart+0x80>)
 8008fba:	2236      	movs	r2, #54	@ 0x36
 8008fbc:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20001968 	.word	0x20001968
 8008fd0:	20000404 	.word	0x20000404
 8008fd4:	20001970 	.word	0x20001970
 8008fd8:	20001961 	.word	0x20001961
 8008fdc:	20000400 	.word	0x20000400

08008fe0 <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 8008fe8:	23ae      	movs	r3, #174	@ 0xae
 8008fea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d008      	beq.n	8009004 <gos_kernelRegisterSysTickHook+0x24>
 8008ff2:	4b08      	ldr	r3, [pc, #32]	@ (8009014 <gos_kernelRegisterSysTickHook+0x34>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d104      	bne.n	8009004 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 8008ffa:	4a06      	ldr	r2, [pc, #24]	@ (8009014 <gos_kernelRegisterSysTickHook+0x34>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 8009000:	2355      	movs	r3, #85	@ 0x55
 8009002:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20001984 	.word	0x20001984

08009018 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 800901e:	4b15      	ldr	r3, [pc, #84]	@ (8009074 <SysTick_Handler+0x5c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3301      	adds	r3, #1
 8009024:	4a13      	ldr	r2, [pc, #76]	@ (8009074 <SysTick_Handler+0x5c>)
 8009026:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 8009028:	2001      	movs	r0, #1
 800902a:	f004 fdd1 	bl	800dbd0 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 800902e:	4b12      	ldr	r3, [pc, #72]	@ (8009078 <SysTick_Handler+0x60>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b36      	cmp	r3, #54	@ 0x36
 8009034:	d113      	bne.n	800905e <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 8009036:	f000 fdad 	bl	8009b94 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 800903a:	4b10      	ldr	r3, [pc, #64]	@ (800907c <SysTick_Handler+0x64>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10d      	bne.n	800905e <SysTick_Handler+0x46>
 8009042:	2316      	movs	r3, #22
 8009044:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	2b16      	cmp	r3, #22
 800904a:	d106      	bne.n	800905a <SysTick_Handler+0x42>
 800904c:	4b0c      	ldr	r3, [pc, #48]	@ (8009080 <SysTick_Handler+0x68>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a0b      	ldr	r2, [pc, #44]	@ (8009080 <SysTick_Handler+0x68>)
 8009052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009056:	6013      	str	r3, [r2, #0]
}
 8009058:	e000      	b.n	800905c <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 800905a:	dfff      	svc	255	@ 0xff
}
 800905c:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 800905e:	4b09      	ldr	r3, [pc, #36]	@ (8009084 <SysTick_Handler+0x6c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 8009066:	4b07      	ldr	r3, [pc, #28]	@ (8009084 <SysTick_Handler+0x6c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4798      	blx	r3
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	2000196c 	.word	0x2000196c
 8009078:	20000400 	.word	0x20000400
 800907c:	20001961 	.word	0x20001961
 8009080:	e000ed04 	.word	0xe000ed04
 8009084:	20001984 	.word	0x20001984

08009088 <gos_kernelGetSysTicks>:
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
    return sysTicks;
 800908c:	4b03      	ldr	r3, [pc, #12]	@ (800909c <gos_kernelGetSysTicks+0x14>)
 800908e:	681b      	ldr	r3, [r3, #0]
}
 8009090:	4618      	mov	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	2000196c 	.word	0x2000196c

080090a0 <gos_kernelGetCpuUsage>:
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 80090a4:	4b06      	ldr	r3, [pc, #24]	@ (80090c0 <gos_kernelGetCpuUsage+0x20>)
 80090a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 80090b0:	3310      	adds	r3, #16
 80090b2:	b29b      	uxth	r3, r3
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	20000404 	.word	0x20000404

080090c4 <gos_kernelReset>:
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
	if (kernelPreResetHookFunction != NULL)
 80090ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <gos_kernelReset+0x40>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <gos_kernelReset+0x14>
		kernelPreResetHookFunction();
 80090d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <gos_kernelReset+0x40>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4798      	blx	r3
    resetRequired = GOS_TRUE;
 80090d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009108 <gos_kernelReset+0x44>)
 80090da:	2236      	movs	r2, #54	@ 0x36
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	2309      	movs	r3, #9
 80090e0:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	2b16      	cmp	r3, #22
 80090e6:	d106      	bne.n	80090f6 <gos_kernelReset+0x32>
 80090e8:	4b08      	ldr	r3, [pc, #32]	@ (800910c <gos_kernelReset+0x48>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a07      	ldr	r2, [pc, #28]	@ (800910c <gos_kernelReset+0x48>)
 80090ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090f2:	6013      	str	r3, [r2, #0]
}
 80090f4:	e000      	b.n	80090f8 <gos_kernelReset+0x34>
    gos_ported_reschedule(privilege);
 80090f6:	dfff      	svc	255	@ 0xff
}
 80090f8:	bf00      	nop
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20001988 	.word	0x20001988
 8009108:	20000401 	.word	0x20000401
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <gos_kernelDelayMs>:
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 800911a:	4b0a      	ldr	r3, [pc, #40]	@ (8009144 <gos_kernelDelayMs+0x34>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 8009120:	bf00      	nop
 8009122:	4b08      	ldr	r3, [pc, #32]	@ (8009144 <gos_kernelDelayMs+0x34>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	b29a      	uxth	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	b29b      	uxth	r3, r3
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	b29b      	uxth	r3, r3
 8009130:	88fa      	ldrh	r2, [r7, #6]
 8009132:	429a      	cmp	r2, r3
 8009134:	d8f5      	bhi.n	8009122 <gos_kernelDelayMs+0x12>
}
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	2000196c 	.word	0x2000196c

08009148 <gos_kernelCalculateTaskCpuUsages>:
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 8009152:	2300      	movs	r3, #0
 8009154:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800915e:	4ba8      	ldr	r3, [pc, #672]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8009160:	795b      	ldrb	r3, [r3, #5]
 8009162:	461a      	mov	r2, r3
 8009164:	4ba7      	ldr	r3, [pc, #668]	@ (8009404 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8009166:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 800916a:	4ba5      	ldr	r3, [pc, #660]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 800916c:	791b      	ldrb	r3, [r3, #4]
 800916e:	4619      	mov	r1, r3
 8009170:	4ba5      	ldr	r3, [pc, #660]	@ (8009408 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 8009172:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8009176:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8009178:	4ba1      	ldr	r3, [pc, #644]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 800917a:	885b      	ldrh	r3, [r3, #2]
 800917c:	4619      	mov	r1, r3
 800917e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009182:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 8009186:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8009188:	4a9d      	ldr	r2, [pc, #628]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 800918a:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 800918c:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800918e:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009190:	2300      	movs	r3, #0
 8009192:	82fb      	strh	r3, [r7, #22]
 8009194:	e10f      	b.n	80093b6 <gos_kernelCalculateTaskCpuUsages+0x26e>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009196:	8afb      	ldrh	r3, [r7, #22]
 8009198:	4a9c      	ldr	r2, [pc, #624]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800919a:	216a      	movs	r1, #106	@ 0x6a
 800919c:	fb01 f303 	mul.w	r3, r1, r3
 80091a0:	4413      	add	r3, r2
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 810b 	beq.w	80093c0 <gos_kernelCalculateTaskCpuUsages+0x278>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80091aa:	8afb      	ldrh	r3, [r7, #22]
 80091ac:	4a97      	ldr	r2, [pc, #604]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80091ae:	216a      	movs	r1, #106	@ 0x6a
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	335a      	adds	r3, #90	@ 0x5a
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	4b91      	ldr	r3, [pc, #580]	@ (8009404 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80091be:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80091c2:	8afb      	ldrh	r3, [r7, #22]
 80091c4:	4991      	ldr	r1, [pc, #580]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80091c6:	206a      	movs	r0, #106	@ 0x6a
 80091c8:	fb00 f303 	mul.w	r3, r0, r3
 80091cc:	440b      	add	r3, r1
 80091ce:	3359      	adds	r3, #89	@ 0x59
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	4619      	mov	r1, r3
 80091d4:	4b8c      	ldr	r3, [pc, #560]	@ (8009408 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 80091d6:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80091da:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80091dc:	8afb      	ldrh	r3, [r7, #22]
 80091de:	498b      	ldr	r1, [pc, #556]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80091e0:	206a      	movs	r0, #106	@ 0x6a
 80091e2:	fb00 f303 	mul.w	r3, r0, r3
 80091e6:	440b      	add	r3, r1
 80091e8:	3350      	adds	r3, #80	@ 0x50
 80091ea:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80091f6:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80091fa:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 80091fc:	8afa      	ldrh	r2, [r7, #22]
 80091fe:	4983      	ldr	r1, [pc, #524]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009200:	206a      	movs	r0, #106	@ 0x6a
 8009202:	fb00 f202 	mul.w	r2, r0, r2
 8009206:	440a      	add	r2, r1
 8009208:	3250      	adds	r2, #80	@ 0x50
 800920a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 800920e:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8009210:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8009212:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 80ca 	beq.w	80093b0 <gos_kernelCalculateTaskCpuUsages+0x268>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009222:	fb03 f202 	mul.w	r2, r3, r2
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	fbb2 f2f3 	udiv	r2, r2, r3
 800922c:	8afb      	ldrh	r3, [r7, #22]
 800922e:	b290      	uxth	r0, r2
 8009230:	4a76      	ldr	r2, [pc, #472]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009232:	216a      	movs	r1, #106	@ 0x6a
 8009234:	fb01 f303 	mul.w	r3, r1, r3
 8009238:	4413      	add	r3, r2
 800923a:	3360      	adds	r3, #96	@ 0x60
 800923c:	4602      	mov	r2, r0
 800923e:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b36      	cmp	r3, #54	@ 0x36
 8009244:	d004      	beq.n	8009250 <gos_kernelCalculateTaskCpuUsages+0x108>
 8009246:	4b6e      	ldr	r3, [pc, #440]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80b0 	beq.w	80093b0 <gos_kernelCalculateTaskCpuUsages+0x268>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009256:	fb03 f202 	mul.w	r2, r3, r2
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009260:	8afb      	ldrh	r3, [r7, #22]
 8009262:	b290      	uxth	r0, r2
 8009264:	4a69      	ldr	r2, [pc, #420]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009266:	216a      	movs	r1, #106	@ 0x6a
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	4413      	add	r3, r2
 800926e:	3360      	adds	r3, #96	@ 0x60
 8009270:	4602      	mov	r2, r0
 8009272:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 8009274:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 8009276:	226a      	movs	r2, #106	@ 0x6a
 8009278:	fb02 f303 	mul.w	r3, r2, r3
 800927c:	3348      	adds	r3, #72	@ 0x48
 800927e:	4a63      	ldr	r2, [pc, #396]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009280:	4413      	add	r3, r2
 8009282:	1d18      	adds	r0, r3, #4
 8009284:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 8009286:	4a61      	ldr	r2, [pc, #388]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009288:	216a      	movs	r1, #106	@ 0x6a
 800928a:	fb01 f303 	mul.w	r3, r1, r3
 800928e:	4413      	add	r3, r2
 8009290:	3350      	adds	r3, #80	@ 0x50
 8009292:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009296:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 8009298:	461a      	mov	r2, r3
 800929a:	2100      	movs	r1, #0
 800929c:	f004 fb10 	bl	800d8c0 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 80092a0:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 80092a2:	226a      	movs	r2, #106	@ 0x6a
 80092a4:	fb02 f303 	mul.w	r3, r2, r3
 80092a8:	3348      	adds	r3, #72	@ 0x48
 80092aa:	4a58      	ldr	r2, [pc, #352]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80092ac:	4413      	add	r3, r2
 80092ae:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 80092b0:	8afb      	ldrh	r3, [r7, #22]
 80092b2:	4a56      	ldr	r2, [pc, #344]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80092b4:	216a      	movs	r1, #106	@ 0x6a
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	4413      	add	r3, r2
 80092bc:	3350      	adds	r3, #80	@ 0x50
 80092be:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80092c2:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 80092c4:	8afb      	ldrh	r3, [r7, #22]
 80092c6:	4951      	ldr	r1, [pc, #324]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80092c8:	246a      	movs	r4, #106	@ 0x6a
 80092ca:	fb04 f303 	mul.w	r3, r4, r3
 80092ce:	440b      	add	r3, r1
 80092d0:	3359      	adds	r3, #89	@ 0x59
 80092d2:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 80092d4:	4619      	mov	r1, r3
 80092d6:	0149      	lsls	r1, r1, #5
 80092d8:	1ac9      	subs	r1, r1, r3
 80092da:	0089      	lsls	r1, r1, #2
 80092dc:	440b      	add	r3, r1
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4413      	add	r3, r2
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	f004 fbca 	bl	800da80 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 80092ec:	8afb      	ldrh	r3, [r7, #22]
 80092ee:	4a47      	ldr	r2, [pc, #284]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80092f0:	216a      	movs	r1, #106	@ 0x6a
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	4413      	add	r3, r2
 80092f8:	3350      	adds	r3, #80	@ 0x50
 80092fa:	2200      	movs	r2, #0
 80092fc:	731a      	strb	r2, [r3, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8009302:	8afb      	ldrh	r3, [r7, #22]
 8009304:	4a41      	ldr	r2, [pc, #260]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009306:	216a      	movs	r1, #106	@ 0x6a
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	4413      	add	r3, r2
 800930e:	335b      	adds	r3, #91	@ 0x5b
 8009310:	2200      	movs	r2, #0
 8009312:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8009314:	8afb      	ldrh	r3, [r7, #22]
 8009316:	4a3d      	ldr	r2, [pc, #244]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009318:	216a      	movs	r1, #106	@ 0x6a
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	4413      	add	r3, r2
 8009320:	335a      	adds	r3, #90	@ 0x5a
 8009322:	2200      	movs	r2, #0
 8009324:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8009326:	8afb      	ldrh	r3, [r7, #22]
 8009328:	4a38      	ldr	r2, [pc, #224]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800932a:	216a      	movs	r1, #106	@ 0x6a
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	4413      	add	r3, r2
 8009332:	3359      	adds	r3, #89	@ 0x59
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8009338:	8afb      	ldrh	r3, [r7, #22]
 800933a:	4a34      	ldr	r2, [pc, #208]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800933c:	216a      	movs	r1, #106	@ 0x6a
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	4413      	add	r3, r2
 8009344:	3350      	adds	r3, #80	@ 0x50
 8009346:	2200      	movs	r2, #0
 8009348:	71da      	strb	r2, [r3, #7]
 800934a:	2200      	movs	r2, #0
 800934c:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 800934e:	8afb      	ldrh	r3, [r7, #22]
 8009350:	4a2e      	ldr	r2, [pc, #184]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009352:	216a      	movs	r1, #106	@ 0x6a
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	4413      	add	r3, r2
 800935a:	3350      	adds	r3, #80	@ 0x50
 800935c:	2200      	movs	r2, #0
 800935e:	715a      	strb	r2, [r3, #5]
 8009360:	2200      	movs	r2, #0
 8009362:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 8009364:	8afb      	ldrh	r3, [r7, #22]
 8009366:	4a29      	ldr	r2, [pc, #164]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009368:	216a      	movs	r1, #106	@ 0x6a
 800936a:	fb01 f303 	mul.w	r3, r1, r3
 800936e:	4413      	add	r3, r2
 8009370:	3360      	adds	r3, #96	@ 0x60
 8009372:	885b      	ldrh	r3, [r3, #2]
 8009374:	b29a      	uxth	r2, r3
 8009376:	8afb      	ldrh	r3, [r7, #22]
 8009378:	4924      	ldr	r1, [pc, #144]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800937a:	206a      	movs	r0, #106	@ 0x6a
 800937c:	fb00 f303 	mul.w	r3, r0, r3
 8009380:	440b      	add	r3, r1
 8009382:	3360      	adds	r3, #96	@ 0x60
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	b29b      	uxth	r3, r3
 8009388:	429a      	cmp	r2, r3
 800938a:	d911      	bls.n	80093b0 <gos_kernelCalculateTaskCpuUsages+0x268>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 800938c:	8afa      	ldrh	r2, [r7, #22]
 800938e:	8afb      	ldrh	r3, [r7, #22]
 8009390:	491e      	ldr	r1, [pc, #120]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009392:	206a      	movs	r0, #106	@ 0x6a
 8009394:	fb00 f202 	mul.w	r2, r0, r2
 8009398:	440a      	add	r2, r1
 800939a:	3260      	adds	r2, #96	@ 0x60
 800939c:	8852      	ldrh	r2, [r2, #2]
 800939e:	b290      	uxth	r0, r2
 80093a0:	4a1a      	ldr	r2, [pc, #104]	@ (800940c <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80093a2:	216a      	movs	r1, #106	@ 0x6a
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	4413      	add	r3, r2
 80093aa:	3360      	adds	r3, #96	@ 0x60
 80093ac:	4602      	mov	r2, r0
 80093ae:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80093b0:	8afb      	ldrh	r3, [r7, #22]
 80093b2:	3301      	adds	r3, #1
 80093b4:	82fb      	strh	r3, [r7, #22]
 80093b6:	8afb      	ldrh	r3, [r7, #22]
 80093b8:	2b0f      	cmp	r3, #15
 80093ba:	f67f aeec 	bls.w	8009196 <gos_kernelCalculateTaskCpuUsages+0x4e>
 80093be:	e000      	b.n	80093c2 <gos_kernelCalculateTaskCpuUsages+0x27a>
            break;
 80093c0:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	2b36      	cmp	r3, #54	@ 0x36
 80093c6:	d003      	beq.n	80093d0 <gos_kernelCalculateTaskCpuUsages+0x288>
 80093c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093ca:	791b      	ldrb	r3, [r3, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d013      	beq.n	80093f8 <gos_kernelCalculateTaskCpuUsages+0x2b0>
        monitoringTime.days         = 0u;
 80093d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	71da      	strb	r2, [r3, #7]
 80093d6:	2200      	movs	r2, #0
 80093d8:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 80093da:	4b09      	ldr	r3, [pc, #36]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093dc:	2200      	movs	r2, #0
 80093de:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 80093e0:	4b07      	ldr	r3, [pc, #28]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 80093e6:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 80093ec:	4b04      	ldr	r3, [pc, #16]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 80093f2:	4b03      	ldr	r3, [pc, #12]	@ (8009400 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	801a      	strh	r2, [r3, #0]
}
 80093f8:	bf00      	nop
 80093fa:	371c      	adds	r7, #28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd90      	pop	{r4, r7, pc}
 8009400:	20001974 	.word	0x20001974
 8009404:	03938700 	.word	0x03938700
 8009408:	000f4240 	.word	0x000f4240
 800940c:	20000404 	.word	0x20000404

08009410 <gos_kernelDump>:
{
 8009410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	b0a6      	sub	sp, #152	@ 0x98
 8009416:	af14      	add	r7, sp, #80	@ 0x50
    u16_t taskIndex = 0u;
 8009418:	2300      	movs	r3, #0
 800941a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 800941e:	48ae      	ldr	r0, [pc, #696]	@ (80096d8 <gos_kernelDump+0x2c8>)
 8009420:	f005 f918 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8009424:	48ad      	ldr	r0, [pc, #692]	@ (80096dc <gos_kernelDump+0x2cc>)
 8009426:	f005 f915 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800942a:	4bad      	ldr	r3, [pc, #692]	@ (80096e0 <gos_kernelDump+0x2d0>)
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	4bad      	ldr	r3, [pc, #692]	@ (80096e4 <gos_kernelDump+0x2d4>)
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	4bad      	ldr	r3, [pc, #692]	@ (80096e8 <gos_kernelDump+0x2d8>)
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	4bad      	ldr	r3, [pc, #692]	@ (80096ec <gos_kernelDump+0x2dc>)
 8009438:	4aad      	ldr	r2, [pc, #692]	@ (80096f0 <gos_kernelDump+0x2e0>)
 800943a:	49ae      	ldr	r1, [pc, #696]	@ (80096f4 <gos_kernelDump+0x2e4>)
 800943c:	48ae      	ldr	r0, [pc, #696]	@ (80096f8 <gos_kernelDump+0x2e8>)
 800943e:	f005 f909 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8009442:	48a6      	ldr	r0, [pc, #664]	@ (80096dc <gos_kernelDump+0x2cc>)
 8009444:	f005 f906 	bl	800e654 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009448:	2300      	movs	r3, #0
 800944a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800944e:	e1cc      	b.n	80097ea <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009454:	4aa9      	ldr	r2, [pc, #676]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009456:	216a      	movs	r1, #106	@ 0x6a
 8009458:	fb01 f303 	mul.w	r3, r1, r3
 800945c:	4413      	add	r3, r2
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 81c8 	beq.w	80097f6 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 8009466:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800946a:	4aa4      	ldr	r2, [pc, #656]	@ (80096fc <gos_kernelDump+0x2ec>)
 800946c:	216a      	movs	r1, #106	@ 0x6a
 800946e:	fb01 f303 	mul.w	r3, r1, r3
 8009472:	4413      	add	r3, r2
 8009474:	3328      	adds	r3, #40	@ 0x28
 8009476:	885b      	ldrh	r3, [r3, #2]
 8009478:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800947a:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 800947c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009480:	226a      	movs	r2, #106	@ 0x6a
 8009482:	fb02 f303 	mul.w	r3, r2, r3
 8009486:	3308      	adds	r3, #8
 8009488:	4a9c      	ldr	r2, [pc, #624]	@ (80096fc <gos_kernelDump+0x2ec>)
 800948a:	4413      	add	r3, r2
 800948c:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8009490:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009494:	4a99      	ldr	r2, [pc, #612]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009496:	216a      	movs	r1, #106	@ 0x6a
 8009498:	fb01 f303 	mul.w	r3, r1, r3
 800949c:	4413      	add	r3, r2
 800949e:	3306      	adds	r3, #6
 80094a0:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80094a2:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80094a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80094a8:	4a94      	ldr	r2, [pc, #592]	@ (80096fc <gos_kernelDump+0x2ec>)
 80094aa:	216a      	movs	r1, #106	@ 0x6a
 80094ac:	fb01 f303 	mul.w	r3, r1, r3
 80094b0:	4413      	add	r3, r2
 80094b2:	3308      	adds	r3, #8
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da02      	bge.n	80094c4 <gos_kernelDump+0xb4>
 80094be:	4b90      	ldr	r3, [pc, #576]	@ (8009700 <gos_kernelDump+0x2f0>)
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c2:	e001      	b.n	80094c8 <gos_kernelDump+0xb8>
 80094c4:	4b8f      	ldr	r3, [pc, #572]	@ (8009704 <gos_kernelDump+0x2f4>)
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80094c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80094cc:	4a8b      	ldr	r2, [pc, #556]	@ (80096fc <gos_kernelDump+0x2ec>)
 80094ce:	216a      	movs	r1, #106	@ 0x6a
 80094d0:	fb01 f303 	mul.w	r3, r1, r3
 80094d4:	4413      	add	r3, r2
 80094d6:	3308      	adds	r3, #8
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            (void_t) gos_shellDriverTransmitString(
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <gos_kernelDump+0xda>
 80094e4:	4b86      	ldr	r3, [pc, #536]	@ (8009700 <gos_kernelDump+0x2f0>)
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094e8:	e001      	b.n	80094ee <gos_kernelDump+0xde>
 80094ea:	4b86      	ldr	r3, [pc, #536]	@ (8009704 <gos_kernelDump+0x2f4>)
 80094ec:	63bb      	str	r3, [r7, #56]	@ 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80094ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80094f2:	4a82      	ldr	r2, [pc, #520]	@ (80096fc <gos_kernelDump+0x2ec>)
 80094f4:	216a      	movs	r1, #106	@ 0x6a
 80094f6:	fb01 f303 	mul.w	r3, r1, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	3308      	adds	r3, #8
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            (void_t) gos_shellDriverTransmitString(
 8009506:	2b00      	cmp	r3, #0
 8009508:	d002      	beq.n	8009510 <gos_kernelDump+0x100>
 800950a:	4b7d      	ldr	r3, [pc, #500]	@ (8009700 <gos_kernelDump+0x2f0>)
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
 800950e:	e001      	b.n	8009514 <gos_kernelDump+0x104>
 8009510:	4b7c      	ldr	r3, [pc, #496]	@ (8009704 <gos_kernelDump+0x2f4>)
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009518:	4a78      	ldr	r2, [pc, #480]	@ (80096fc <gos_kernelDump+0x2ec>)
 800951a:	216a      	movs	r1, #106	@ 0x6a
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	4413      	add	r3, r2
 8009522:	3308      	adds	r3, #8
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29b      	uxth	r3, r3
 8009528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
            (void_t) gos_shellDriverTransmitString(
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <gos_kernelDump+0x126>
 8009530:	4b73      	ldr	r3, [pc, #460]	@ (8009700 <gos_kernelDump+0x2f0>)
 8009532:	633b      	str	r3, [r7, #48]	@ 0x30
 8009534:	e001      	b.n	800953a <gos_kernelDump+0x12a>
 8009536:	4b73      	ldr	r3, [pc, #460]	@ (8009704 <gos_kernelDump+0x2f4>)
 8009538:	633b      	str	r3, [r7, #48]	@ 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800953a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800953e:	4a6f      	ldr	r2, [pc, #444]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009540:	216a      	movs	r1, #106	@ 0x6a
 8009542:	fb01 f303 	mul.w	r3, r1, r3
 8009546:	4413      	add	r3, r2
 8009548:	3308      	adds	r3, #8
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	b29b      	uxth	r3, r3
 800954e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            (void_t) gos_shellDriverTransmitString(
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <gos_kernelDump+0x14c>
 8009556:	4b6a      	ldr	r3, [pc, #424]	@ (8009700 <gos_kernelDump+0x2f0>)
 8009558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800955a:	e001      	b.n	8009560 <gos_kernelDump+0x150>
 800955c:	4b69      	ldr	r3, [pc, #420]	@ (8009704 <gos_kernelDump+0x2f4>)
 800955e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009560:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009564:	4a65      	ldr	r2, [pc, #404]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009566:	216a      	movs	r1, #106	@ 0x6a
 8009568:	fb01 f303 	mul.w	r3, r1, r3
 800956c:	4413      	add	r3, r2
 800956e:	3308      	adds	r3, #8
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
            (void_t) gos_shellDriverTransmitString(
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <gos_kernelDump+0x172>
 800957c:	4b60      	ldr	r3, [pc, #384]	@ (8009700 <gos_kernelDump+0x2f0>)
 800957e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009580:	e001      	b.n	8009586 <gos_kernelDump+0x176>
 8009582:	4b60      	ldr	r3, [pc, #384]	@ (8009704 <gos_kernelDump+0x2f4>)
 8009584:	62bb      	str	r3, [r7, #40]	@ 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009586:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800958a:	4a5c      	ldr	r2, [pc, #368]	@ (80096fc <gos_kernelDump+0x2ec>)
 800958c:	216a      	movs	r1, #106	@ 0x6a
 800958e:	fb01 f303 	mul.w	r3, r1, r3
 8009592:	4413      	add	r3, r2
 8009594:	3308      	adds	r3, #8
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
            (void_t) gos_shellDriverTransmitString(
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d002      	beq.n	80095a8 <gos_kernelDump+0x198>
 80095a2:	4b57      	ldr	r3, [pc, #348]	@ (8009700 <gos_kernelDump+0x2f0>)
 80095a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a6:	e001      	b.n	80095ac <gos_kernelDump+0x19c>
 80095a8:	4b56      	ldr	r3, [pc, #344]	@ (8009704 <gos_kernelDump+0x2f4>)
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80095ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80095b0:	4a52      	ldr	r2, [pc, #328]	@ (80096fc <gos_kernelDump+0x2ec>)
 80095b2:	216a      	movs	r1, #106	@ 0x6a
 80095b4:	fb01 f303 	mul.w	r3, r1, r3
 80095b8:	4413      	add	r3, r2
 80095ba:	3308      	adds	r3, #8
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
            (void_t) gos_shellDriverTransmitString(
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <gos_kernelDump+0x1be>
 80095c8:	4b4d      	ldr	r3, [pc, #308]	@ (8009700 <gos_kernelDump+0x2f0>)
 80095ca:	623b      	str	r3, [r7, #32]
 80095cc:	e001      	b.n	80095d2 <gos_kernelDump+0x1c2>
 80095ce:	4b4d      	ldr	r3, [pc, #308]	@ (8009704 <gos_kernelDump+0x2f4>)
 80095d0:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80095d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80095d6:	4a49      	ldr	r2, [pc, #292]	@ (80096fc <gos_kernelDump+0x2ec>)
 80095d8:	216a      	movs	r1, #106	@ 0x6a
 80095da:	fb01 f303 	mul.w	r3, r1, r3
 80095de:	4413      	add	r3, r2
 80095e0:	3308      	adds	r3, #8
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
            (void_t) gos_shellDriverTransmitString(
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <gos_kernelDump+0x1e4>
 80095ee:	4b44      	ldr	r3, [pc, #272]	@ (8009700 <gos_kernelDump+0x2f0>)
 80095f0:	61fb      	str	r3, [r7, #28]
 80095f2:	e001      	b.n	80095f8 <gos_kernelDump+0x1e8>
 80095f4:	4b43      	ldr	r3, [pc, #268]	@ (8009704 <gos_kernelDump+0x2f4>)
 80095f6:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80095f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80095fc:	493f      	ldr	r1, [pc, #252]	@ (80096fc <gos_kernelDump+0x2ec>)
 80095fe:	236a      	movs	r3, #106	@ 0x6a
 8009600:	fb02 f303 	mul.w	r3, r2, r3
 8009604:	440b      	add	r3, r1
 8009606:	3308      	adds	r3, #8
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
            (void_t) gos_shellDriverTransmitString(
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <gos_kernelDump+0x20a>
 8009614:	4b3a      	ldr	r3, [pc, #232]	@ (8009700 <gos_kernelDump+0x2f0>)
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	e001      	b.n	800961e <gos_kernelDump+0x20e>
 800961a:	4b3a      	ldr	r3, [pc, #232]	@ (8009704 <gos_kernelDump+0x2f4>)
 800961c:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800961e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009622:	4936      	ldr	r1, [pc, #216]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009624:	236a      	movs	r3, #106	@ 0x6a
 8009626:	fb02 f303 	mul.w	r3, r2, r3
 800962a:	440b      	add	r3, r1
 800962c:	3308      	adds	r3, #8
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <gos_kernelDump+0x230>
 800963a:	4b31      	ldr	r3, [pc, #196]	@ (8009700 <gos_kernelDump+0x2f0>)
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	e001      	b.n	8009644 <gos_kernelDump+0x234>
 8009640:	4b30      	ldr	r3, [pc, #192]	@ (8009704 <gos_kernelDump+0x2f4>)
 8009642:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009644:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009648:	492c      	ldr	r1, [pc, #176]	@ (80096fc <gos_kernelDump+0x2ec>)
 800964a:	236a      	movs	r3, #106	@ 0x6a
 800964c:	fb02 f303 	mul.w	r3, r2, r3
 8009650:	440b      	add	r3, r1
 8009652:	3308      	adds	r3, #8
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <gos_kernelDump+0x256>
 8009660:	4b27      	ldr	r3, [pc, #156]	@ (8009700 <gos_kernelDump+0x2f0>)
 8009662:	613b      	str	r3, [r7, #16]
 8009664:	e001      	b.n	800966a <gos_kernelDump+0x25a>
 8009666:	4b27      	ldr	r3, [pc, #156]	@ (8009704 <gos_kernelDump+0x2f4>)
 8009668:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800966a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800966e:	4923      	ldr	r1, [pc, #140]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009670:	236a      	movs	r3, #106	@ 0x6a
 8009672:	fb02 f303 	mul.w	r3, r2, r3
 8009676:	440b      	add	r3, r1
 8009678:	3308      	adds	r3, #8
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	b29b      	uxth	r3, r3
 800967e:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <gos_kernelDump+0x27c>
 8009686:	4b1e      	ldr	r3, [pc, #120]	@ (8009700 <gos_kernelDump+0x2f0>)
 8009688:	60fb      	str	r3, [r7, #12]
 800968a:	e001      	b.n	8009690 <gos_kernelDump+0x280>
 800968c:	4b1d      	ldr	r3, [pc, #116]	@ (8009704 <gos_kernelDump+0x2f4>)
 800968e:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009690:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009694:	4919      	ldr	r1, [pc, #100]	@ (80096fc <gos_kernelDump+0x2ec>)
 8009696:	236a      	movs	r3, #106	@ 0x6a
 8009698:	fb02 f303 	mul.w	r3, r2, r3
 800969c:	440b      	add	r3, r1
 800969e:	3308      	adds	r3, #8
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <gos_kernelDump+0x2a2>
 80096ac:	4b14      	ldr	r3, [pc, #80]	@ (8009700 <gos_kernelDump+0x2f0>)
 80096ae:	60bb      	str	r3, [r7, #8]
 80096b0:	e001      	b.n	80096b6 <gos_kernelDump+0x2a6>
 80096b2:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <gos_kernelDump+0x2f4>)
 80096b4:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80096b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80096ba:	4910      	ldr	r1, [pc, #64]	@ (80096fc <gos_kernelDump+0x2ec>)
 80096bc:	236a      	movs	r3, #106	@ 0x6a
 80096be:	fb02 f303 	mul.w	r3, r2, r3
 80096c2:	440b      	add	r3, r1
 80096c4:	3308      	adds	r3, #8
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01a      	beq.n	8009708 <gos_kernelDump+0x2f8>
 80096d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009700 <gos_kernelDump+0x2f0>)
 80096d4:	607b      	str	r3, [r7, #4]
 80096d6:	e019      	b.n	800970c <gos_kernelDump+0x2fc>
 80096d8:	08018ed4 	.word	0x08018ed4
 80096dc:	08018ee4 	.word	0x08018ee4
 80096e0:	08018f80 	.word	0x08018f80
 80096e4:	08018f88 	.word	0x08018f88
 80096e8:	08018f90 	.word	0x08018f90
 80096ec:	08018f40 	.word	0x08018f40
 80096f0:	08018f48 	.word	0x08018f48
 80096f4:	08018f50 	.word	0x08018f50
 80096f8:	08018f54 	.word	0x08018f54
 80096fc:	20000404 	.word	0x20000404
 8009700:	08018f9c 	.word	0x08018f9c
 8009704:	08018fa4 	.word	0x08018fa4
 8009708:	4b7d      	ldr	r3, [pc, #500]	@ (8009900 <gos_kernelDump+0x4f0>)
 800970a:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800970c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009710:	497c      	ldr	r1, [pc, #496]	@ (8009904 <gos_kernelDump+0x4f4>)
 8009712:	236a      	movs	r3, #106	@ 0x6a
 8009714:	fb02 f303 	mul.w	r3, r2, r3
 8009718:	440b      	add	r3, r1
 800971a:	3308      	adds	r3, #8
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <gos_kernelDump+0x31c>
 8009728:	4d77      	ldr	r5, [pc, #476]	@ (8009908 <gos_kernelDump+0x4f8>)
 800972a:	e000      	b.n	800972e <gos_kernelDump+0x31e>
 800972c:	4d74      	ldr	r5, [pc, #464]	@ (8009900 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 800972e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009732:	4974      	ldr	r1, [pc, #464]	@ (8009904 <gos_kernelDump+0x4f4>)
 8009734:	236a      	movs	r3, #106	@ 0x6a
 8009736:	fb02 f303 	mul.w	r3, r2, r3
 800973a:	440b      	add	r3, r1
 800973c:	3360      	adds	r3, #96	@ 0x60
 800973e:	885b      	ldrh	r3, [r3, #2]
 8009740:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8009742:	4b72      	ldr	r3, [pc, #456]	@ (800990c <gos_kernelDump+0x4fc>)
 8009744:	fba3 2302 	umull	r2, r3, r3, r2
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	b29b      	uxth	r3, r3
 800974c:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 800974e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009752:	496c      	ldr	r1, [pc, #432]	@ (8009904 <gos_kernelDump+0x4f4>)
 8009754:	236a      	movs	r3, #106	@ 0x6a
 8009756:	fb02 f303 	mul.w	r3, r2, r3
 800975a:	440b      	add	r3, r1
 800975c:	3360      	adds	r3, #96	@ 0x60
 800975e:	885b      	ldrh	r3, [r3, #2]
 8009760:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8009762:	4b6a      	ldr	r3, [pc, #424]	@ (800990c <gos_kernelDump+0x4fc>)
 8009764:	fba3 2301 	umull	r2, r3, r3, r1
 8009768:	095a      	lsrs	r2, r3, #5
 800976a:	2364      	movs	r3, #100	@ 0x64
 800976c:	fb02 f303 	mul.w	r3, r2, r3
 8009770:	1acb      	subs	r3, r1, r3
 8009772:	b29b      	uxth	r3, r3
 8009774:	461c      	mov	r4, r3
 8009776:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800977a:	4962      	ldr	r1, [pc, #392]	@ (8009904 <gos_kernelDump+0x4f4>)
 800977c:	236a      	movs	r3, #106	@ 0x6a
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	440b      	add	r3, r1
 8009784:	3304      	adds	r3, #4
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fc25 	bl	8009fd8 <gos_kernelGetTaskStateString>
 800978e:	4603      	mov	r3, r0
 8009790:	9312      	str	r3, [sp, #72]	@ 0x48
 8009792:	9411      	str	r4, [sp, #68]	@ 0x44
 8009794:	9610      	str	r6, [sp, #64]	@ 0x40
 8009796:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	930e      	str	r3, [sp, #56]	@ 0x38
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	930d      	str	r3, [sp, #52]	@ 0x34
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	9308      	str	r3, [sp, #32]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	9307      	str	r3, [sp, #28]
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	9306      	str	r3, [sp, #24]
 80097bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ca:	9302      	str	r3, [sp, #8]
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	4653      	mov	r3, sl
 80097d6:	4642      	mov	r2, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	484d      	ldr	r0, [pc, #308]	@ (8009910 <gos_kernelDump+0x500>)
 80097dc:	f004 ff3a 	bl	800e654 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80097e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80097e4:	3301      	adds	r3, #1
 80097e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80097ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80097ee:	2b0f      	cmp	r3, #15
 80097f0:	f67f ae2e 	bls.w	8009450 <gos_kernelDump+0x40>
 80097f4:	e000      	b.n	80097f8 <gos_kernelDump+0x3e8>
            break;
 80097f6:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 80097f8:	4846      	ldr	r0, [pc, #280]	@ (8009914 <gos_kernelDump+0x504>)
 80097fa:	f004 ff2b 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 80097fe:	4846      	ldr	r0, [pc, #280]	@ (8009918 <gos_kernelDump+0x508>)
 8009800:	f004 ff28 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8009804:	4845      	ldr	r0, [pc, #276]	@ (800991c <gos_kernelDump+0x50c>)
 8009806:	f004 ff25 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800980a:	4b45      	ldr	r3, [pc, #276]	@ (8009920 <gos_kernelDump+0x510>)
 800980c:	4a45      	ldr	r2, [pc, #276]	@ (8009924 <gos_kernelDump+0x514>)
 800980e:	4946      	ldr	r1, [pc, #280]	@ (8009928 <gos_kernelDump+0x518>)
 8009810:	4846      	ldr	r0, [pc, #280]	@ (800992c <gos_kernelDump+0x51c>)
 8009812:	f004 ff1f 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8009816:	4841      	ldr	r0, [pc, #260]	@ (800991c <gos_kernelDump+0x50c>)
 8009818:	f004 ff1c 	bl	800e654 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800981c:	2300      	movs	r3, #0
 800981e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009822:	e04c      	b.n	80098be <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009824:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009828:	4a36      	ldr	r2, [pc, #216]	@ (8009904 <gos_kernelDump+0x4f4>)
 800982a:	216a      	movs	r1, #106	@ 0x6a
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d047      	beq.n	80098c8 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8009838:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800983c:	4a31      	ldr	r2, [pc, #196]	@ (8009904 <gos_kernelDump+0x4f4>)
 800983e:	216a      	movs	r1, #106	@ 0x6a
 8009840:	fb01 f303 	mul.w	r3, r1, r3
 8009844:	4413      	add	r3, r2
 8009846:	3328      	adds	r3, #40	@ 0x28
 8009848:	885b      	ldrh	r3, [r3, #2]
 800984a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800984c:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 800984e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009852:	226a      	movs	r2, #106	@ 0x6a
 8009854:	fb02 f303 	mul.w	r3, r2, r3
 8009858:	3308      	adds	r3, #8
 800985a:	4a2a      	ldr	r2, [pc, #168]	@ (8009904 <gos_kernelDump+0x4f4>)
 800985c:	4413      	add	r3, r2
 800985e:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8009860:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009864:	4a27      	ldr	r2, [pc, #156]	@ (8009904 <gos_kernelDump+0x4f4>)
 8009866:	206a      	movs	r0, #106	@ 0x6a
 8009868:	fb00 f303 	mul.w	r3, r0, r3
 800986c:	4413      	add	r3, r2
 800986e:	3360      	adds	r3, #96	@ 0x60
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009874:	4a25      	ldr	r2, [pc, #148]	@ (800990c <gos_kernelDump+0x4fc>)
 8009876:	fba2 2303 	umull	r2, r3, r2, r3
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	b29b      	uxth	r3, r3
 800987e:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8009880:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009884:	4a1f      	ldr	r2, [pc, #124]	@ (8009904 <gos_kernelDump+0x4f4>)
 8009886:	206a      	movs	r0, #106	@ 0x6a
 8009888:	fb00 f303 	mul.w	r3, r0, r3
 800988c:	4413      	add	r3, r2
 800988e:	3360      	adds	r3, #96	@ 0x60
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009894:	4a1d      	ldr	r2, [pc, #116]	@ (800990c <gos_kernelDump+0x4fc>)
 8009896:	fba2 0203 	umull	r0, r2, r2, r3
 800989a:	0952      	lsrs	r2, r2, #5
 800989c:	2064      	movs	r0, #100	@ 0x64
 800989e:	fb00 f202 	mul.w	r2, r0, r2
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462b      	mov	r3, r5
 80098aa:	460a      	mov	r2, r1
 80098ac:	4621      	mov	r1, r4
 80098ae:	4820      	ldr	r0, [pc, #128]	@ (8009930 <gos_kernelDump+0x520>)
 80098b0:	f004 fed0 	bl	800e654 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80098b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80098b8:	3301      	adds	r3, #1
 80098ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80098be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80098c2:	2b0f      	cmp	r3, #15
 80098c4:	d9ae      	bls.n	8009824 <gos_kernelDump+0x414>
 80098c6:	e000      	b.n	80098ca <gos_kernelDump+0x4ba>
            break;
 80098c8:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 80098ca:	481a      	ldr	r0, [pc, #104]	@ (8009934 <gos_kernelDump+0x524>)
 80098cc:	f004 fec2 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 80098d0:	4819      	ldr	r0, [pc, #100]	@ (8009938 <gos_kernelDump+0x528>)
 80098d2:	f004 febf 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 80098d6:	4819      	ldr	r0, [pc, #100]	@ (800993c <gos_kernelDump+0x52c>)
 80098d8:	f004 febc 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 80098dc:	4b18      	ldr	r3, [pc, #96]	@ (8009940 <gos_kernelDump+0x530>)
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	4b18      	ldr	r3, [pc, #96]	@ (8009944 <gos_kernelDump+0x534>)
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	4b18      	ldr	r3, [pc, #96]	@ (8009948 <gos_kernelDump+0x538>)
 80098e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009924 <gos_kernelDump+0x514>)
 80098e8:	490f      	ldr	r1, [pc, #60]	@ (8009928 <gos_kernelDump+0x518>)
 80098ea:	4818      	ldr	r0, [pc, #96]	@ (800994c <gos_kernelDump+0x53c>)
 80098ec:	f004 feb2 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 80098f0:	4812      	ldr	r0, [pc, #72]	@ (800993c <gos_kernelDump+0x52c>)
 80098f2:	f004 feaf 	bl	800e654 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80098f6:	2300      	movs	r3, #0
 80098f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80098fc:	e0b1      	b.n	8009a62 <gos_kernelDump+0x652>
 80098fe:	bf00      	nop
 8009900:	08018fa4 	.word	0x08018fa4
 8009904:	20000404 	.word	0x20000404
 8009908:	08018f9c 	.word	0x08018f9c
 800990c:	51eb851f 	.word	0x51eb851f
 8009910:	08018fac 	.word	0x08018fac
 8009914:	08019000 	.word	0x08019000
 8009918:	08019060 	.word	0x08019060
 800991c:	08019074 	.word	0x08019074
 8009920:	080190b0 	.word	0x080190b0
 8009924:	08018f48 	.word	0x08018f48
 8009928:	08018f50 	.word	0x08018f50
 800992c:	080190bc 	.word	0x080190bc
 8009930:	080190d4 	.word	0x080190d4
 8009934:	080190f4 	.word	0x080190f4
 8009938:	08019130 	.word	0x08019130
 800993c:	08019144 	.word	0x08019144
 8009940:	080191c4 	.word	0x080191c4
 8009944:	080191d0 	.word	0x080191d0
 8009948:	08019198 	.word	0x08019198
 800994c:	080191a0 	.word	0x080191a0
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009950:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009954:	4a4a      	ldr	r2, [pc, #296]	@ (8009a80 <gos_kernelDump+0x670>)
 8009956:	216a      	movs	r1, #106	@ 0x6a
 8009958:	fb01 f303 	mul.w	r3, r1, r3
 800995c:	4413      	add	r3, r2
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 8084 	beq.w	8009a6e <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8009966:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800996a:	4a45      	ldr	r2, [pc, #276]	@ (8009a80 <gos_kernelDump+0x670>)
 800996c:	216a      	movs	r1, #106	@ 0x6a
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	4413      	add	r3, r2
 8009974:	3328      	adds	r3, #40	@ 0x28
 8009976:	885b      	ldrh	r3, [r3, #2]
 8009978:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800997a:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 800997c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009980:	226a      	movs	r2, #106	@ 0x6a
 8009982:	fb02 f303 	mul.w	r3, r2, r3
 8009986:	3308      	adds	r3, #8
 8009988:	4a3d      	ldr	r2, [pc, #244]	@ (8009a80 <gos_kernelDump+0x670>)
 800998a:	4413      	add	r3, r2
 800998c:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 800998e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009992:	4a3b      	ldr	r2, [pc, #236]	@ (8009a80 <gos_kernelDump+0x670>)
 8009994:	216a      	movs	r1, #106	@ 0x6a
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3348      	adds	r3, #72	@ 0x48
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80099a2:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 80099a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80099a8:	4a35      	ldr	r2, [pc, #212]	@ (8009a80 <gos_kernelDump+0x670>)
 80099aa:	216a      	movs	r1, #106	@ 0x6a
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	3348      	adds	r3, #72	@ 0x48
 80099b4:	885b      	ldrh	r3, [r3, #2]
 80099b6:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80099b8:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 80099ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80099be:	4a30      	ldr	r2, [pc, #192]	@ (8009a80 <gos_kernelDump+0x670>)
 80099c0:	216a      	movs	r1, #106	@ 0x6a
 80099c2:	fb01 f303 	mul.w	r3, r1, r3
 80099c6:	4413      	add	r3, r2
 80099c8:	3348      	adds	r3, #72	@ 0x48
 80099ca:	885b      	ldrh	r3, [r3, #2]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	461a      	mov	r2, r3
 80099d0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80099d4:	fb02 f303 	mul.w	r3, r2, r3
 80099d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80099dc:	4928      	ldr	r1, [pc, #160]	@ (8009a80 <gos_kernelDump+0x670>)
 80099de:	206a      	movs	r0, #106	@ 0x6a
 80099e0:	fb00 f202 	mul.w	r2, r0, r2
 80099e4:	440a      	add	r2, r1
 80099e6:	3248      	adds	r2, #72	@ 0x48
 80099e8:	8812      	ldrh	r2, [r2, #0]
 80099ea:	b292      	uxth	r2, r2
 80099ec:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 80099f0:	4a24      	ldr	r2, [pc, #144]	@ (8009a84 <gos_kernelDump+0x674>)
 80099f2:	fb82 1203 	smull	r1, r2, r2, r3
 80099f6:	1152      	asrs	r2, r2, #5
 80099f8:	17db      	asrs	r3, r3, #31
 80099fa:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 80099fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009a00:	4a1f      	ldr	r2, [pc, #124]	@ (8009a80 <gos_kernelDump+0x670>)
 8009a02:	206a      	movs	r0, #106	@ 0x6a
 8009a04:	fb00 f303 	mul.w	r3, r0, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	3348      	adds	r3, #72	@ 0x48
 8009a0c:	885b      	ldrh	r3, [r3, #2]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	461a      	mov	r2, r3
 8009a12:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009a16:	fb02 f303 	mul.w	r3, r2, r3
 8009a1a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009a1e:	4818      	ldr	r0, [pc, #96]	@ (8009a80 <gos_kernelDump+0x670>)
 8009a20:	256a      	movs	r5, #106	@ 0x6a
 8009a22:	fb05 f202 	mul.w	r2, r5, r2
 8009a26:	4402      	add	r2, r0
 8009a28:	3248      	adds	r2, #72	@ 0x48
 8009a2a:	8812      	ldrh	r2, [r2, #0]
 8009a2c:	b292      	uxth	r2, r2
 8009a2e:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <gos_kernelDump+0x674>)
 8009a34:	fb83 0302 	smull	r0, r3, r3, r2
 8009a38:	1158      	asrs	r0, r3, #5
 8009a3a:	17d3      	asrs	r3, r2, #31
 8009a3c:	1ac3      	subs	r3, r0, r3
 8009a3e:	2064      	movs	r0, #100	@ 0x64
 8009a40:	fb00 f303 	mul.w	r3, r0, r3
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	9302      	str	r3, [sp, #8]
 8009a48:	9101      	str	r1, [sp, #4]
 8009a4a:	9600      	str	r6, [sp, #0]
 8009a4c:	4673      	mov	r3, lr
 8009a4e:	4622      	mov	r2, r4
 8009a50:	4661      	mov	r1, ip
 8009a52:	480d      	ldr	r0, [pc, #52]	@ (8009a88 <gos_kernelDump+0x678>)
 8009a54:	f004 fdfe 	bl	800e654 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009a58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009a62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009a66:	2b0f      	cmp	r3, #15
 8009a68:	f67f af72 	bls.w	8009950 <gos_kernelDump+0x540>
 8009a6c:	e000      	b.n	8009a70 <gos_kernelDump+0x660>
            break;
 8009a6e:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 8009a70:	4806      	ldr	r0, [pc, #24]	@ (8009a8c <gos_kernelDump+0x67c>)
 8009a72:	f004 fdef 	bl	800e654 <gos_shellDriverTransmitString>
}
 8009a76:	bf00      	nop
 8009a78:	3748      	adds	r7, #72	@ 0x48
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a80:	20000404 	.word	0x20000404
 8009a84:	51eb851f 	.word	0x51eb851f
 8009a88:	080191e0 	.word	0x080191e0
 8009a8c:	08019214 	.word	0x08019214

08009a90 <gos_kernelIsCallerIsr>:
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 8009a94:	4b05      	ldr	r3, [pc, #20]	@ (8009aac <gos_kernelIsCallerIsr+0x1c>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <gos_kernelIsCallerIsr+0x10>
 8009a9c:	2336      	movs	r3, #54	@ 0x36
 8009a9e:	e000      	b.n	8009aa2 <gos_kernelIsCallerIsr+0x12>
 8009aa0:	2349      	movs	r3, #73	@ 0x49
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	20001962 	.word	0x20001962

08009ab0 <SVC_Handler>:
    gos_ported_handleSVC();
 8009ab0:	f01e 0f04 	tst.w	lr, #4
 8009ab4:	bf0c      	ite	eq
 8009ab6:	f3ef 8008 	mrseq	r0, MSP
 8009aba:	f3ef 8009 	mrsne	r0, PSP
 8009abe:	4b06      	ldr	r3, [pc, #24]	@ (8009ad8 <SVC_Handler+0x28>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b36      	cmp	r3, #54	@ 0x36
 8009ac4:	d104      	bne.n	8009ad0 <SVC_Handler+0x20>
 8009ac6:	4b04      	ldr	r3, [pc, #16]	@ (8009ad8 <SVC_Handler+0x28>)
 8009ac8:	2249      	movs	r2, #73	@ 0x49
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	f000 fad8 	bl	800a080 <gos_kernelProcessorReset>
 8009ad0:	f000 b804 	b.w	8009adc <gos_kernelSVC_HandlerMain>
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop
 8009ad8:	20000401 	.word	0x20000401

08009adc <gos_kernelSVC_HandlerMain>:
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3318      	adds	r3, #24
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3b02      	subs	r3, #2
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	72fb      	strb	r3, [r7, #11]
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	2bff      	cmp	r3, #255	@ 0xff
 8009afc:	d105      	bne.n	8009b0a <gos_kernelSVC_HandlerMain+0x2e>
 8009afe:	4b06      	ldr	r3, [pc, #24]	@ (8009b18 <gos_kernelSVC_HandlerMain+0x3c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a05      	ldr	r2, [pc, #20]	@ (8009b18 <gos_kernelSVC_HandlerMain+0x3c>)
 8009b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b08:	6013      	str	r3, [r2, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 8009b1c:	4b10      	ldr	r3, [pc, #64]	@ (8009b60 <PendSV_Handler+0x44>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b36      	cmp	r3, #54	@ 0x36
 8009b22:	d109      	bne.n	8009b38 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 8009b24:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8009b28:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 8009b2c:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 8009b30:	4b0b      	ldr	r3, [pc, #44]	@ (8009b60 <PendSV_Handler+0x44>)
 8009b32:	2249      	movs	r2, #73	@ 0x49
 8009b34:	701a      	strb	r2, [r3, #0]
}
 8009b36:	e011      	b.n	8009b5c <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8009b38:	b500      	push	{lr}
 8009b3a:	f3ef 8009 	mrs	r0, PSP
 8009b3e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b42:	f000 f8cb 	bl	8009cdc <gos_kernelSaveCurrentPsp>
 8009b46:	f000 f8e1 	bl	8009d0c <gos_kernelSelectNextTask>
 8009b4a:	f000 f8b3 	bl	8009cb4 <gos_kernelGetCurrentPsp>
 8009b4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b52:	f380 8809 	msr	PSP, r0
 8009b56:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b5a:	4770      	bx	lr
}
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	20000402 	.word	0x20000402

08009b64 <gos_kernelReschedule>:
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	2b16      	cmp	r3, #22
 8009b72:	d106      	bne.n	8009b82 <gos_kernelReschedule+0x1e>
 8009b74:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <gos_kernelReschedule+0x2c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a05      	ldr	r2, [pc, #20]	@ (8009b90 <gos_kernelReschedule+0x2c>)
 8009b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b7e:	6013      	str	r3, [r2, #0]
}
 8009b80:	e000      	b.n	8009b84 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 8009b82:	dfff      	svc	255	@ 0xff
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 8009b9e:	f3ef 8309 	mrs	r3, PSP
 8009ba2:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d02b      	beq.n	8009c02 <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 8009baa:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a3f      	ldr	r2, [pc, #252]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009bb0:	216a      	movs	r1, #106	@ 0x6a
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	3360      	adds	r3, #96	@ 0x60
 8009bba:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d21e      	bcs.n	8009c02 <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 8009bc4:	4b38      	ldr	r3, [pc, #224]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	226a      	movs	r2, #106	@ 0x6a
 8009bca:	fb02 f303 	mul.w	r3, r2, r3
 8009bce:	3308      	adds	r3, #8
 8009bd0:	4a36      	ldr	r2, [pc, #216]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 8009bd6:	4a34      	ldr	r2, [pc, #208]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	4934      	ldr	r1, [pc, #208]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009bdc:	206a      	movs	r0, #106	@ 0x6a
 8009bde:	fb00 f202 	mul.w	r2, r0, r2
 8009be2:	440a      	add	r2, r1
 8009be4:	3260      	adds	r2, #96	@ 0x60
 8009be6:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	1a8a      	subs	r2, r1, r2
 8009bee:	9202      	str	r2, [sp, #8]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	9201      	str	r2, [sp, #4]
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8009cb0 <gos_kernelCheckTaskStack+0x11c>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	2034      	movs	r0, #52	@ 0x34
 8009bfe:	f002 f8cf 	bl	800bda0 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d04a      	beq.n	8009c9e <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 8009c08:	4b27      	ldr	r3, [pc, #156]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a27      	ldr	r2, [pc, #156]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009c0e:	216a      	movs	r1, #106	@ 0x6a
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	3360      	adds	r3, #96	@ 0x60
 8009c18:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009c1c:	4a22      	ldr	r2, [pc, #136]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009c1e:	6812      	ldr	r2, [r2, #0]
 8009c20:	4922      	ldr	r1, [pc, #136]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009c22:	206a      	movs	r0, #106	@ 0x6a
 8009c24:	fb00 f202 	mul.w	r2, r0, r2
 8009c28:	440a      	add	r2, r1
 8009c2a:	3248      	adds	r2, #72	@ 0x48
 8009c2c:	8812      	ldrh	r2, [r2, #0]
 8009c2e:	b292      	uxth	r2, r2
 8009c30:	441a      	add	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	3b40      	subs	r3, #64	@ 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 8009c38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009c3a:	6812      	ldr	r2, [r2, #0]
 8009c3c:	491b      	ldr	r1, [pc, #108]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009c3e:	206a      	movs	r0, #106	@ 0x6a
 8009c40:	fb00 f202 	mul.w	r2, r0, r2
 8009c44:	440a      	add	r2, r1
 8009c46:	3248      	adds	r2, #72	@ 0x48
 8009c48:	8852      	ldrh	r2, [r2, #2]
 8009c4a:	b292      	uxth	r2, r2
    if (sp != 0 &&
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d926      	bls.n	8009c9e <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8009c50:	4b15      	ldr	r3, [pc, #84]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a15      	ldr	r2, [pc, #84]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009c56:	216a      	movs	r1, #106	@ 0x6a
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	3360      	adds	r3, #96	@ 0x60
 8009c60:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	4b10      	ldr	r3, [pc, #64]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4910      	ldr	r1, [pc, #64]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009c6c:	206a      	movs	r0, #106	@ 0x6a
 8009c6e:	fb00 f303 	mul.w	r3, r0, r3
 8009c72:	440b      	add	r3, r1
 8009c74:	3348      	adds	r3, #72	@ 0x48
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	4b08      	ldr	r3, [pc, #32]	@ (8009ca8 <gos_kernelCheckTaskStack+0x114>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3a20      	subs	r2, #32
 8009c8c:	b290      	uxth	r0, r2
 8009c8e:	4a07      	ldr	r2, [pc, #28]	@ (8009cac <gos_kernelCheckTaskStack+0x118>)
 8009c90:	216a      	movs	r1, #106	@ 0x6a
 8009c92:	fb01 f303 	mul.w	r3, r1, r3
 8009c96:	4413      	add	r3, r2
 8009c98:	3348      	adds	r3, #72	@ 0x48
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20001968 	.word	0x20001968
 8009cac:	20000404 	.word	0x20000404
 8009cb0:	08019268 	.word	0x08019268

08009cb4 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 8009cb8:	4b06      	ldr	r3, [pc, #24]	@ (8009cd4 <gos_kernelGetCurrentPsp+0x20>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a06      	ldr	r2, [pc, #24]	@ (8009cd8 <gos_kernelGetCurrentPsp+0x24>)
 8009cbe:	216a      	movs	r1, #106	@ 0x6a
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3338      	adds	r3, #56	@ 0x38
 8009cc8:	685b      	ldr	r3, [r3, #4]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	20001968 	.word	0x20001968
 8009cd8:	20000404 	.word	0x20000404

08009cdc <gos_kernelSaveCurrentPsp>:
 * @param[in] psp Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 8009ce4:	4b07      	ldr	r3, [pc, #28]	@ (8009d04 <gos_kernelSaveCurrentPsp+0x28>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a07      	ldr	r2, [pc, #28]	@ (8009d08 <gos_kernelSaveCurrentPsp+0x2c>)
 8009cea:	216a      	movs	r1, #106	@ 0x6a
 8009cec:	fb01 f303 	mul.w	r3, r1, r3
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3338      	adds	r3, #56	@ 0x38
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	605a      	str	r2, [r3, #4]
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	20001968 	.word	0x20001968
 8009d08:	20000404 	.word	0x20000404

08009d0c <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 8009d12:	2300      	movs	r3, #0
 8009d14:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 8009d16:	23ff      	movs	r3, #255	@ 0xff
 8009d18:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 8009d22:	2300      	movs	r3, #0
 8009d24:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 8009d26:	4ba3      	ldr	r3, [pc, #652]	@ (8009fb4 <gos_kernelSelectNextTask+0x2a8>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	4ba3      	ldr	r3, [pc, #652]	@ (8009fb8 <gos_kernelSelectNextTask+0x2ac>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 8009d32:	f7ff ff2f 	bl	8009b94 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 8009d36:	4ba1      	ldr	r3, [pc, #644]	@ (8009fbc <gos_kernelSelectNextTask+0x2b0>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f040 8136 	bne.w	8009fac <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009d40:	2300      	movs	r3, #0
 8009d42:	81fb      	strh	r3, [r7, #14]
 8009d44:	e0d0      	b.n	8009ee8 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8009d46:	89fb      	ldrh	r3, [r7, #14]
 8009d48:	4a9d      	ldr	r2, [pc, #628]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009d4a:	216a      	movs	r1, #106	@ 0x6a
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	4413      	add	r3, r2
 8009d52:	3304      	adds	r3, #4
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b16      	cmp	r3, #22
 8009d58:	d12c      	bne.n	8009db4 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 8009d5a:	89fb      	ldrh	r3, [r7, #14]
 8009d5c:	4a98      	ldr	r2, [pc, #608]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009d5e:	216a      	movs	r1, #106	@ 0x6a
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	4413      	add	r3, r2
 8009d66:	3330      	adds	r3, #48	@ 0x30
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	89fb      	ldrh	r3, [r7, #14]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	4411      	add	r1, r2
 8009d70:	4893      	ldr	r0, [pc, #588]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009d72:	226a      	movs	r2, #106	@ 0x6a
 8009d74:	fb03 f202 	mul.w	r2, r3, r2
 8009d78:	4402      	add	r2, r0
 8009d7a:	3230      	adds	r2, #48	@ 0x30
 8009d7c:	6011      	str	r1, [r2, #0]
 8009d7e:	4a90      	ldr	r2, [pc, #576]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009d80:	216a      	movs	r1, #106	@ 0x6a
 8009d82:	fb01 f303 	mul.w	r3, r1, r3
 8009d86:	4413      	add	r3, r2
 8009d88:	3330      	adds	r3, #48	@ 0x30
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	498c      	ldr	r1, [pc, #560]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009d90:	206a      	movs	r0, #106	@ 0x6a
 8009d92:	fb00 f303 	mul.w	r3, r0, r3
 8009d96:	440b      	add	r3, r1
 8009d98:	3328      	adds	r3, #40	@ 0x28
 8009d9a:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d309      	bcc.n	8009db4 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8009da0:	89fb      	ldrh	r3, [r7, #14]
 8009da2:	4a87      	ldr	r2, [pc, #540]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009da4:	216a      	movs	r1, #106	@ 0x6a
 8009da6:	fb01 f303 	mul.w	r3, r1, r3
 8009daa:	4413      	add	r3, r2
 8009dac:	3304      	adds	r3, #4
 8009dae:	220a      	movs	r2, #10
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e040      	b.n	8009e36 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8009db4:	89fb      	ldrh	r3, [r7, #14]
 8009db6:	4a82      	ldr	r2, [pc, #520]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009db8:	216a      	movs	r1, #106	@ 0x6a
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	4413      	add	r3, r2
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b19      	cmp	r3, #25
 8009dc6:	d136      	bne.n	8009e36 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
 8009dca:	4a7d      	ldr	r2, [pc, #500]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009dcc:	216a      	movs	r1, #106	@ 0x6a
 8009dce:	fb01 f303 	mul.w	r3, r1, r3
 8009dd2:	4413      	add	r3, r2
 8009dd4:	3330      	adds	r3, #48	@ 0x30
 8009dd6:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8009dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ddc:	d02b      	beq.n	8009e36 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 8009dde:	89fb      	ldrh	r3, [r7, #14]
 8009de0:	4a77      	ldr	r2, [pc, #476]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009de2:	216a      	movs	r1, #106	@ 0x6a
 8009de4:	fb01 f303 	mul.w	r3, r1, r3
 8009de8:	4413      	add	r3, r2
 8009dea:	3338      	adds	r3, #56	@ 0x38
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	89fb      	ldrh	r3, [r7, #14]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	4411      	add	r1, r2
 8009df4:	4872      	ldr	r0, [pc, #456]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009df6:	226a      	movs	r2, #106	@ 0x6a
 8009df8:	fb03 f202 	mul.w	r2, r3, r2
 8009dfc:	4402      	add	r2, r0
 8009dfe:	3238      	adds	r2, #56	@ 0x38
 8009e00:	6011      	str	r1, [r2, #0]
 8009e02:	4a6f      	ldr	r2, [pc, #444]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e04:	216a      	movs	r1, #106	@ 0x6a
 8009e06:	fb01 f303 	mul.w	r3, r1, r3
 8009e0a:	4413      	add	r3, r2
 8009e0c:	3338      	adds	r3, #56	@ 0x38
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	89fb      	ldrh	r3, [r7, #14]
 8009e12:	496b      	ldr	r1, [pc, #428]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e14:	206a      	movs	r0, #106	@ 0x6a
 8009e16:	fb00 f303 	mul.w	r3, r0, r3
 8009e1a:	440b      	add	r3, r1
 8009e1c:	3330      	adds	r3, #48	@ 0x30
 8009e1e:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d308      	bcc.n	8009e36 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8009e24:	89fb      	ldrh	r3, [r7, #14]
 8009e26:	4a66      	ldr	r2, [pc, #408]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e28:	216a      	movs	r1, #106	@ 0x6a
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	3304      	adds	r3, #4
 8009e32:	220a      	movs	r2, #10
 8009e34:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 8009e36:	89fa      	ldrh	r2, [r7, #14]
 8009e38:	4b62      	ldr	r3, [pc, #392]	@ (8009fc4 <gos_kernelSelectNextTask+0x2b8>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d047      	beq.n	8009ed0 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8009e40:	89fb      	ldrh	r3, [r7, #14]
 8009e42:	4a5f      	ldr	r2, [pc, #380]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e44:	216a      	movs	r1, #106	@ 0x6a
 8009e46:	fb01 f303 	mul.w	r3, r1, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 8009e50:	2b0a      	cmp	r3, #10
 8009e52:	d13d      	bne.n	8009ed0 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8009e54:	89fb      	ldrh	r3, [r7, #14]
 8009e56:	4a5a      	ldr	r2, [pc, #360]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e58:	216a      	movs	r1, #106	@ 0x6a
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	4413      	add	r3, r2
 8009e60:	3306      	adds	r3, #6
 8009e62:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8009e64:	7b7a      	ldrb	r2, [r7, #13]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d932      	bls.n	8009ed0 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8009e6a:	89fb      	ldrh	r3, [r7, #14]
 8009e6c:	4a54      	ldr	r2, [pc, #336]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e6e:	216a      	movs	r1, #106	@ 0x6a
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	4413      	add	r3, r2
 8009e76:	3360      	adds	r3, #96	@ 0x60
 8009e78:	889b      	ldrh	r3, [r3, #4]
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	89fb      	ldrh	r3, [r7, #14]
 8009e7e:	4950      	ldr	r1, [pc, #320]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e80:	206a      	movs	r0, #106	@ 0x6a
 8009e82:	fb00 f303 	mul.w	r3, r0, r3
 8009e86:	440b      	add	r3, r1
 8009e88:	3358      	adds	r3, #88	@ 0x58
 8009e8a:	88db      	ldrh	r3, [r3, #6]
 8009e8c:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d21e      	bcs.n	8009ed0 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 8009e92:	89fb      	ldrh	r3, [r7, #14]
 8009e94:	4a4a      	ldr	r2, [pc, #296]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009e96:	216a      	movs	r1, #106	@ 0x6a
 8009e98:	fb01 f303 	mul.w	r3, r1, r3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	3360      	adds	r3, #96	@ 0x60
 8009ea0:	885b      	ldrh	r3, [r3, #2]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	89fb      	ldrh	r3, [r7, #14]
 8009ea6:	4946      	ldr	r1, [pc, #280]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009ea8:	206a      	movs	r0, #106	@ 0x6a
 8009eaa:	fb00 f303 	mul.w	r3, r0, r3
 8009eae:	440b      	add	r3, r1
 8009eb0:	3358      	adds	r3, #88	@ 0x58
 8009eb2:	88db      	ldrh	r3, [r3, #6]
 8009eb4:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d20a      	bcs.n	8009ed0 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 8009eba:	89fb      	ldrh	r3, [r7, #14]
 8009ebc:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 8009ebe:	89fb      	ldrh	r3, [r7, #14]
 8009ec0:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009ec2:	216a      	movs	r1, #106	@ 0x6a
 8009ec4:	fb01 f303 	mul.w	r3, r1, r3
 8009ec8:	4413      	add	r3, r2
 8009eca:	3306      	adds	r3, #6
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009ed0:	89fb      	ldrh	r3, [r7, #14]
 8009ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009ed4:	216a      	movs	r1, #106	@ 0x6a
 8009ed6:	fb01 f303 	mul.w	r3, r1, r3
 8009eda:	4413      	add	r3, r2
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009ee2:	89fb      	ldrh	r3, [r7, #14]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	81fb      	strh	r3, [r7, #14]
 8009ee8:	89fb      	ldrh	r3, [r7, #14]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	f67f af2b 	bls.w	8009d46 <gos_kernelSelectNextTask+0x3a>
 8009ef0:	e000      	b.n	8009ef4 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 8009ef2:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 8009ef4:	f7ff f8d4 	bl	80090a0 <gos_kernelGetCpuUsage>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	4b32      	ldr	r3, [pc, #200]	@ (8009fc8 <gos_kernelSelectNextTask+0x2bc>)
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d901      	bls.n	8009f08 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 8009f04:	2300      	movs	r3, #0
 8009f06:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 8009f08:	897a      	ldrh	r2, [r7, #10]
 8009f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8009fc4 <gos_kernelSelectNextTask+0x2b8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d02b      	beq.n	8009f6a <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 8009f12:	4b2e      	ldr	r3, [pc, #184]	@ (8009fcc <gos_kernelSelectNextTask+0x2c0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d016      	beq.n	8009f48 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 8009f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fcc <gos_kernelSelectNextTask+0x2c0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a29      	ldr	r2, [pc, #164]	@ (8009fc4 <gos_kernelSelectNextTask+0x2b8>)
 8009f20:	6812      	ldr	r2, [r2, #0]
 8009f22:	4927      	ldr	r1, [pc, #156]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009f24:	206a      	movs	r0, #106	@ 0x6a
 8009f26:	fb00 f202 	mul.w	r2, r0, r2
 8009f2a:	440a      	add	r2, r1
 8009f2c:	3228      	adds	r2, #40	@ 0x28
 8009f2e:	8852      	ldrh	r2, [r2, #2]
 8009f30:	b290      	uxth	r0, r2
 8009f32:	897a      	ldrh	r2, [r7, #10]
 8009f34:	4922      	ldr	r1, [pc, #136]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009f36:	246a      	movs	r4, #106	@ 0x6a
 8009f38:	fb04 f202 	mul.w	r2, r4, r2
 8009f3c:	440a      	add	r2, r1
 8009f3e:	3228      	adds	r2, #40	@ 0x28
 8009f40:	8852      	ldrh	r2, [r2, #2]
 8009f42:	b292      	uxth	r2, r2
 8009f44:	4611      	mov	r1, r2
 8009f46:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8009f48:	4b1e      	ldr	r3, [pc, #120]	@ (8009fc4 <gos_kernelSelectNextTask+0x2b8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	491c      	ldr	r1, [pc, #112]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009f4e:	226a      	movs	r2, #106	@ 0x6a
 8009f50:	fb03 f202 	mul.w	r2, r3, r2
 8009f54:	440a      	add	r2, r1
 8009f56:	3240      	adds	r2, #64	@ 0x40
 8009f58:	6852      	ldr	r2, [r2, #4]
 8009f5a:	3201      	adds	r2, #1
 8009f5c:	4918      	ldr	r1, [pc, #96]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009f5e:	206a      	movs	r0, #106	@ 0x6a
 8009f60:	fb00 f303 	mul.w	r3, r0, r3
 8009f64:	440b      	add	r3, r1
 8009f66:	3340      	adds	r3, #64	@ 0x40
 8009f68:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 8009f6a:	1cbb      	adds	r3, r7, #2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f004 fb95 	bl	800e69c <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 8009f72:	887a      	ldrh	r2, [r7, #2]
 8009f74:	4b16      	ldr	r3, [pc, #88]	@ (8009fd0 <gos_kernelSelectNextTask+0x2c4>)
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 8009f7c:	4b11      	ldr	r3, [pc, #68]	@ (8009fc4 <gos_kernelSelectNextTask+0x2b8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	226a      	movs	r2, #106	@ 0x6a
 8009f82:	fb02 f303 	mul.w	r3, r2, r3
 8009f86:	3350      	adds	r3, #80	@ 0x50
 8009f88:	4a0d      	ldr	r2, [pc, #52]	@ (8009fc0 <gos_kernelSelectNextTask+0x2b4>)
 8009f8a:	4413      	add	r3, r2
 8009f8c:	3305      	adds	r3, #5
 8009f8e:	893a      	ldrh	r2, [r7, #8]
 8009f90:	4619      	mov	r1, r3
 8009f92:	4810      	ldr	r0, [pc, #64]	@ (8009fd4 <gos_kernelSelectNextTask+0x2c8>)
 8009f94:	f003 fc94 	bl	800d8c0 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8009f98:	480d      	ldr	r0, [pc, #52]	@ (8009fd0 <gos_kernelSelectNextTask+0x2c4>)
 8009f9a:	f004 fb7f 	bl	800e69c <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 8009f9e:	897b      	ldrh	r3, [r7, #10]
 8009fa0:	4a08      	ldr	r2, [pc, #32]	@ (8009fc4 <gos_kernelSelectNextTask+0x2b8>)
 8009fa2:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 8009fa4:	4b03      	ldr	r3, [pc, #12]	@ (8009fb4 <gos_kernelSelectNextTask+0x2a8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a03      	ldr	r2, [pc, #12]	@ (8009fb8 <gos_kernelSelectNextTask+0x2ac>)
 8009faa:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd90      	pop	{r4, r7, pc}
 8009fb4:	2000196c 	.word	0x2000196c
 8009fb8:	2000198c 	.word	0x2000198c
 8009fbc:	20001961 	.word	0x20001961
 8009fc0:	20000404 	.word	0x20000404
 8009fc4:	20001968 	.word	0x20001968
 8009fc8:	200003fe 	.word	0x200003fe
 8009fcc:	20001980 	.word	0x20001980
 8009fd0:	20001970 	.word	0x20001970
 8009fd4:	20001974 	.word	0x20001974

08009fd8 <gos_kernelGetTaskStateString>:
 * @param[in] taskState The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 8009fe2:	79fb      	ldrb	r3, [r7, #7]
 8009fe4:	3b05      	subs	r3, #5
 8009fe6:	2b14      	cmp	r3, #20
 8009fe8:	d836      	bhi.n	800a058 <gos_kernelGetTaskStateString+0x80>
 8009fea:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff0 <gos_kernelGetTaskStateString+0x18>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a04d 	.word	0x0800a04d
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a045 	.word	0x0800a045
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a055 	.word	0x0800a055
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a059 	.word	0x0800a059
 800a028:	0800a059 	.word	0x0800a059
 800a02c:	0800a059 	.word	0x0800a059
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a049 	.word	0x0800a049
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a059 	.word	0x0800a059
 800a040:	0800a051 	.word	0x0800a051
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 800a044:	4b08      	ldr	r3, [pc, #32]	@ (800a068 <gos_kernelGetTaskStateString+0x90>)
 800a046:	e008      	b.n	800a05a <gos_kernelGetTaskStateString+0x82>
        }
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 800a048:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <gos_kernelGetTaskStateString+0x94>)
 800a04a:	e006      	b.n	800a05a <gos_kernelGetTaskStateString+0x82>
        }
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 800a04c:	4b08      	ldr	r3, [pc, #32]	@ (800a070 <gos_kernelGetTaskStateString+0x98>)
 800a04e:	e004      	b.n	800a05a <gos_kernelGetTaskStateString+0x82>
        }
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 800a050:	4b08      	ldr	r3, [pc, #32]	@ (800a074 <gos_kernelGetTaskStateString+0x9c>)
 800a052:	e002      	b.n	800a05a <gos_kernelGetTaskStateString+0x82>
        }
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 800a054:	4b08      	ldr	r3, [pc, #32]	@ (800a078 <gos_kernelGetTaskStateString+0xa0>)
 800a056:	e000      	b.n	800a05a <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 800a058:	4b08      	ldr	r3, [pc, #32]	@ (800a07c <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	080192ac 	.word	0x080192ac
 800a06c:	080192bc 	.word	0x080192bc
 800a070:	080192d0 	.word	0x080192d0
 800a074:	080192e4 	.word	0x080192e4
 800a078:	080192f8 	.word	0x080192f8
 800a07c:	08019308 	.word	0x08019308

0800a080 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 800a080:	b480      	push	{r7}
 800a082:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	4b05      	ldr	r3, [pc, #20]	@ (800a0a0 <gos_kernelProcessorReset+0x20>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a090:	4903      	ldr	r1, [pc, #12]	@ (800a0a0 <gos_kernelProcessorReset+0x20>)
 800a092:	4b04      	ldr	r3, [pc, #16]	@ (800a0a4 <gos_kernelProcessorReset+0x24>)
 800a094:	4313      	orrs	r3, r2
 800a096:	600b      	str	r3, [r1, #0]
 800a098:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 800a09c:	bf00      	nop
 800a09e:	e7fd      	b.n	800a09c <gos_kernelProcessorReset+0x1c>
 800a0a0:	e000ed0c 	.word	0xe000ed0c
 800a0a4:	05fa0004 	.word	0x05fa0004

0800a0a8 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800a0ac:	bf00      	nop
 800a0ae:	e7fd      	b.n	800a0ac <NMI_Handler+0x4>

0800a0b0 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <HardFault_Handler+0x4>

0800a0b8 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800a0bc:	bf00      	nop
 800a0be:	e7fd      	b.n	800a0bc <MemManage_Handler+0x4>

0800a0c0 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800a0c4:	bf00      	nop
 800a0c6:	e7fd      	b.n	800a0c4 <BusFault_Handler+0x4>

0800a0c8 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <UsageFault_Handler+0x4>

0800a0d0 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 800a0da:	2355      	movs	r3, #85	@ 0x55
 800a0dc:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 800a0e2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a0e6:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 fce9 	bl	800bac4 <gos_taskCheckDescriptor>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2bae      	cmp	r3, #174	@ 0xae
 800a0f6:	d102      	bne.n	800a0fe <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 800a0f8:	23ae      	movs	r3, #174	@ 0xae
 800a0fa:	75fb      	strb	r3, [r7, #23]
 800a0fc:	e173      	b.n	800a3e6 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 800a0fe:	23ae      	movs	r3, #174	@ 0xae
 800a100:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a102:	2300      	movs	r3, #0
 800a104:	82bb      	strh	r3, [r7, #20]
 800a106:	e01a      	b.n	800a13e <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 800a108:	8abb      	ldrh	r3, [r7, #20]
 800a10a:	4a89      	ldr	r2, [pc, #548]	@ (800a330 <gos_taskRegister+0x260>)
 800a10c:	216a      	movs	r1, #106	@ 0x6a
 800a10e:	fb01 f303 	mul.w	r3, r1, r3
 800a112:	4413      	add	r3, r2
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d102      	bne.n	800a120 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 800a11a:	2355      	movs	r3, #85	@ 0x55
 800a11c:	75fb      	strb	r3, [r7, #23]
                break;
 800a11e:	e011      	b.n	800a144 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 800a120:	8abb      	ldrh	r3, [r7, #20]
 800a122:	4a83      	ldr	r2, [pc, #524]	@ (800a330 <gos_taskRegister+0x260>)
 800a124:	216a      	movs	r1, #106	@ 0x6a
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	3348      	adds	r3, #72	@ 0x48
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	4413      	add	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a138:	8abb      	ldrh	r3, [r7, #20]
 800a13a:	3301      	adds	r3, #1
 800a13c:	82bb      	strh	r3, [r7, #20]
 800a13e:	8abb      	ldrh	r3, [r7, #20]
 800a140:	2b0f      	cmp	r3, #15
 800a142:	d9e1      	bls.n	800a108 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 800a144:	8abb      	ldrh	r3, [r7, #20]
 800a146:	2b0f      	cmp	r3, #15
 800a148:	d902      	bls.n	800a150 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 800a14a:	23ae      	movs	r3, #174	@ 0xae
 800a14c:	75fb      	strb	r3, [r7, #23]
 800a14e:	e14a      	b.n	800a3e6 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 800a156:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800a15a:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3b04      	subs	r3, #4
 800a160:	60fb      	str	r3, [r7, #12]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a168:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3b04      	subs	r3, #4
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3b04      	subs	r3, #4
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f06f 0202 	mvn.w	r2, #2
 800a184:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3b04      	subs	r3, #4
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800a192:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3b04      	subs	r3, #4
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800a1a0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3b04      	subs	r3, #4
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800a1ae:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3b04      	subs	r3, #4
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800a1bc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3b04      	subs	r3, #4
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3b04      	subs	r3, #4
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800a1d6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3b04      	subs	r3, #4
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800a1e4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800a1f2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3b04      	subs	r3, #4
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800a200:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3b04      	subs	r3, #4
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800a20e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	3b04      	subs	r3, #4
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800a21c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3b04      	subs	r3, #4
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800a22a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3b04      	subs	r3, #4
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800a238:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 800a23a:	8abb      	ldrh	r3, [r7, #20]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	493c      	ldr	r1, [pc, #240]	@ (800a330 <gos_taskRegister+0x260>)
 800a240:	206a      	movs	r0, #106	@ 0x6a
 800a242:	fb00 f303 	mul.w	r3, r0, r3
 800a246:	440b      	add	r3, r1
 800a248:	333c      	adds	r3, #60	@ 0x3c
 800a24a:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 800a24c:	8abb      	ldrh	r3, [r7, #20]
 800a24e:	4a38      	ldr	r2, [pc, #224]	@ (800a330 <gos_taskRegister+0x260>)
 800a250:	216a      	movs	r1, #106	@ 0x6a
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3304      	adds	r3, #4
 800a25a:	220a      	movs	r2, #10
 800a25c:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 800a25e:	8abb      	ldrh	r3, [r7, #20]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6812      	ldr	r2, [r2, #0]
 800a264:	4932      	ldr	r1, [pc, #200]	@ (800a330 <gos_taskRegister+0x260>)
 800a266:	206a      	movs	r0, #106	@ 0x6a
 800a268:	fb00 f303 	mul.w	r3, r0, r3
 800a26c:	440b      	add	r3, r1
 800a26e:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 800a270:	8abb      	ldrh	r3, [r7, #20]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	7990      	ldrb	r0, [r2, #6]
 800a276:	4a2e      	ldr	r2, [pc, #184]	@ (800a330 <gos_taskRegister+0x260>)
 800a278:	216a      	movs	r1, #106	@ 0x6a
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	3306      	adds	r3, #6
 800a282:	4602      	mov	r2, r0
 800a284:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 800a286:	8abb      	ldrh	r3, [r7, #20]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7990      	ldrb	r0, [r2, #6]
 800a28c:	4a28      	ldr	r2, [pc, #160]	@ (800a330 <gos_taskRegister+0x260>)
 800a28e:	216a      	movs	r1, #106	@ 0x6a
 800a290:	fb01 f303 	mul.w	r3, r1, r3
 800a294:	4413      	add	r3, r2
 800a296:	3307      	adds	r3, #7
 800a298:	4602      	mov	r2, r0
 800a29a:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 800a29c:	8abb      	ldrh	r3, [r7, #20]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 800a2a4:	b290      	uxth	r0, r2
 800a2a6:	4a22      	ldr	r2, [pc, #136]	@ (800a330 <gos_taskRegister+0x260>)
 800a2a8:	216a      	movs	r1, #106	@ 0x6a
 800a2aa:	fb01 f303 	mul.w	r3, r1, r3
 800a2ae:	4413      	add	r3, r2
 800a2b0:	3348      	adds	r3, #72	@ 0x48
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 800a2b6:	8abb      	ldrh	r3, [r7, #20]
 800a2b8:	8aba      	ldrh	r2, [r7, #20]
 800a2ba:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 800a2be:	b290      	uxth	r0, r2
 800a2c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a330 <gos_taskRegister+0x260>)
 800a2c2:	216a      	movs	r1, #106	@ 0x6a
 800a2c4:	fb01 f303 	mul.w	r3, r1, r3
 800a2c8:	4413      	add	r3, r2
 800a2ca:	332a      	adds	r3, #42	@ 0x2a
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 800a2d0:	8abb      	ldrh	r3, [r7, #20]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	8912      	ldrh	r2, [r2, #8]
 800a2d6:	b290      	uxth	r0, r2
 800a2d8:	4a15      	ldr	r2, [pc, #84]	@ (800a330 <gos_taskRegister+0x260>)
 800a2da:	216a      	movs	r1, #106	@ 0x6a
 800a2dc:	fb01 f303 	mul.w	r3, r1, r3
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800a2f4:	8abb      	ldrh	r3, [r7, #20]
 800a2f6:	4a0e      	ldr	r2, [pc, #56]	@ (800a330 <gos_taskRegister+0x260>)
 800a2f8:	216a      	movs	r1, #106	@ 0x6a
 800a2fa:	fb01 f303 	mul.w	r3, r1, r3
 800a2fe:	4413      	add	r3, r2
 800a300:	335e      	adds	r3, #94	@ 0x5e
 800a302:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a306:	801a      	strh	r2, [r3, #0]
 800a308:	e021      	b.n	800a34e <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a310:	b29b      	uxth	r3, r3
 800a312:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a316:	4293      	cmp	r3, r2
 800a318:	d90c      	bls.n	800a334 <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800a31a:	8abb      	ldrh	r3, [r7, #20]
 800a31c:	4a04      	ldr	r2, [pc, #16]	@ (800a330 <gos_taskRegister+0x260>)
 800a31e:	216a      	movs	r1, #106	@ 0x6a
 800a320:	fb01 f303 	mul.w	r3, r1, r3
 800a324:	4413      	add	r3, r2
 800a326:	335e      	adds	r3, #94	@ 0x5e
 800a328:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a32c:	801a      	strh	r2, [r3, #0]
 800a32e:	e00e      	b.n	800a34e <gos_taskRegister+0x27e>
 800a330:	20000404 	.word	0x20000404
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 800a334:	8abb      	ldrh	r3, [r7, #20]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a33c:	b290      	uxth	r0, r2
 800a33e:	4a2c      	ldr	r2, [pc, #176]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a340:	216a      	movs	r1, #106	@ 0x6a
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	4413      	add	r3, r2
 800a348:	335e      	adds	r3, #94	@ 0x5e
 800a34a:	4602      	mov	r2, r0
 800a34c:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	330a      	adds	r3, #10
 800a352:	2b00      	cmp	r3, #0
 800a354:	d015      	beq.n	800a382 <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	330a      	adds	r3, #10
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f5 ffa8 	bl	80002b0 <strlen>
 800a360:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 800a362:	2b20      	cmp	r3, #32
 800a364:	d80d      	bhi.n	800a382 <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 800a366:	8abb      	ldrh	r3, [r7, #20]
 800a368:	226a      	movs	r2, #106	@ 0x6a
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	3308      	adds	r3, #8
 800a370:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a372:	4413      	add	r3, r2
 800a374:	1c9a      	adds	r2, r3, #2
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	330a      	adds	r3, #10
 800a37a:	4619      	mov	r1, r3
 800a37c:	4610      	mov	r0, r2
 800a37e:	f00c fc9e 	bl	8016cbe <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 800a382:	8abb      	ldrh	r3, [r7, #20]
 800a384:	4a1a      	ldr	r2, [pc, #104]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a386:	216a      	movs	r1, #106	@ 0x6a
 800a388:	fb01 f303 	mul.w	r3, r1, r3
 800a38c:	4413      	add	r3, r2
 800a38e:	332a      	adds	r3, #42	@ 0x2a
 800a390:	881a      	ldrh	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	855a      	strh	r2, [r3, #42]	@ 0x2a
            if (taskId != NULL)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d009      	beq.n	800a3b0 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 800a39c:	8abb      	ldrh	r3, [r7, #20]
 800a39e:	4a14      	ldr	r2, [pc, #80]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a3a0:	216a      	movs	r1, #106	@ 0x6a
 800a3a2:	fb01 f303 	mul.w	r3, r1, r3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	332a      	adds	r3, #42	@ 0x2a
 800a3aa:	881a      	ldrh	r2, [r3, #0]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 800a3b0:	8abb      	ldrh	r3, [r7, #20]
 800a3b2:	4a0f      	ldr	r2, [pc, #60]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a3b4:	216a      	movs	r1, #106	@ 0x6a
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	333c      	adds	r3, #60	@ 0x3c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	8aba      	ldrh	r2, [r7, #20]
 800a3c2:	490b      	ldr	r1, [pc, #44]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a3c4:	206a      	movs	r0, #106	@ 0x6a
 800a3c6:	fb00 f202 	mul.w	r2, r0, r2
 800a3ca:	440a      	add	r2, r1
 800a3cc:	3248      	adds	r2, #72	@ 0x48
 800a3ce:	8812      	ldrh	r2, [r2, #0]
 800a3d0:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 800a3d2:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 800a3d4:	3240      	adds	r2, #64	@ 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 800a3d6:	4906      	ldr	r1, [pc, #24]	@ (800a3f0 <gos_taskRegister+0x320>)
 800a3d8:	206a      	movs	r0, #106	@ 0x6a
 800a3da:	fb00 f303 	mul.w	r3, r0, r3
 800a3de:	440b      	add	r3, r1
 800a3e0:	3360      	adds	r3, #96	@ 0x60
 800a3e2:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000404 	.word	0x20000404

0800a3f4 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 800a3fc:	23ae      	movs	r3, #174	@ 0xae
 800a3fe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (isKernelRunning == GOS_FALSE)
 800a400:	4b3f      	ldr	r3, [pc, #252]	@ (800a500 <gos_taskSleep+0x10c>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b49      	cmp	r3, #73	@ 0x49
 800a406:	d105      	bne.n	800a414 <gos_taskSleep+0x20>
    {
    	gos_kernelDelayMs(sleepTicks);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe fe7f 	bl	8009110 <gos_kernelDelayMs>
 800a412:	e070      	b.n	800a4f6 <gos_taskSleep+0x102>
    }
    else
    {
        if (currentTaskIndex > 0u)
 800a414:	4b3b      	ldr	r3, [pc, #236]	@ (800a504 <gos_taskSleep+0x110>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d06c      	beq.n	800a4f6 <gos_taskSleep+0x102>
        {
            GOS_ATOMIC_ENTER
 800a41c:	4b3a      	ldr	r3, [pc, #232]	@ (800a508 <gos_taskSleep+0x114>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d108      	bne.n	800a436 <gos_taskSleep+0x42>
 800a424:	b672      	cpsid	i
 800a426:	f3ef 8310 	mrs	r3, PRIMASK
 800a42a:	4a38      	ldr	r2, [pc, #224]	@ (800a50c <gos_taskSleep+0x118>)
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	4b34      	ldr	r3, [pc, #208]	@ (800a508 <gos_taskSleep+0x114>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	3301      	adds	r3, #1
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	4b32      	ldr	r3, [pc, #200]	@ (800a508 <gos_taskSleep+0x114>)
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	4b33      	ldr	r3, [pc, #204]	@ (800a510 <gos_taskSleep+0x11c>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	4b31      	ldr	r3, [pc, #196]	@ (800a510 <gos_taskSleep+0x11c>)
 800a44c:	701a      	strb	r2, [r3, #0]
            {
                if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 800a44e:	4b2d      	ldr	r3, [pc, #180]	@ (800a504 <gos_taskSleep+0x110>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a30      	ldr	r2, [pc, #192]	@ (800a514 <gos_taskSleep+0x120>)
 800a454:	216a      	movs	r1, #106	@ 0x6a
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	3304      	adds	r3, #4
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b0a      	cmp	r3, #10
 800a462:	d121      	bne.n	800a4a8 <gos_taskSleep+0xb4>
                {
                    taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 800a464:	4b27      	ldr	r3, [pc, #156]	@ (800a504 <gos_taskSleep+0x110>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a2a      	ldr	r2, [pc, #168]	@ (800a514 <gos_taskSleep+0x120>)
 800a46a:	216a      	movs	r1, #106	@ 0x6a
 800a46c:	fb01 f303 	mul.w	r3, r1, r3
 800a470:	4413      	add	r3, r2
 800a472:	3304      	adds	r3, #4
 800a474:	2216      	movs	r2, #22
 800a476:	701a      	strb	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 800a478:	4b22      	ldr	r3, [pc, #136]	@ (800a504 <gos_taskSleep+0x110>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a25      	ldr	r2, [pc, #148]	@ (800a514 <gos_taskSleep+0x120>)
 800a47e:	216a      	movs	r1, #106	@ 0x6a
 800a480:	fb01 f303 	mul.w	r3, r1, r3
 800a484:	4413      	add	r3, r2
 800a486:	332c      	adds	r3, #44	@ 0x2c
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	601a      	str	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 800a48c:	4b1d      	ldr	r3, [pc, #116]	@ (800a504 <gos_taskSleep+0x110>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a20      	ldr	r2, [pc, #128]	@ (800a514 <gos_taskSleep+0x120>)
 800a492:	216a      	movs	r1, #106	@ 0x6a
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	4413      	add	r3, r2
 800a49a:	3330      	adds	r3, #48	@ 0x30
 800a49c:	2200      	movs	r2, #0
 800a49e:	801a      	strh	r2, [r3, #0]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	805a      	strh	r2, [r3, #2]
                    taskSleepResult = GOS_SUCCESS;
 800a4a4:	2355      	movs	r3, #85	@ 0x55
 800a4a6:	73fb      	strb	r3, [r7, #15]
                else
                {
                    // Nothing to do.
                }
            }
            GOS_ATOMIC_EXIT
 800a4a8:	4b17      	ldr	r3, [pc, #92]	@ (800a508 <gos_taskSleep+0x114>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <gos_taskSleep+0xc8>
 800a4b0:	4b15      	ldr	r3, [pc, #84]	@ (800a508 <gos_taskSleep+0x114>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	4b13      	ldr	r3, [pc, #76]	@ (800a508 <gos_taskSleep+0x114>)
 800a4ba:	701a      	strb	r2, [r3, #0]
 800a4bc:	4b12      	ldr	r3, [pc, #72]	@ (800a508 <gos_taskSleep+0x114>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d108      	bne.n	800a4d6 <gos_taskSleep+0xe2>
 800a4c4:	4b11      	ldr	r3, [pc, #68]	@ (800a50c <gos_taskSleep+0x118>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f383 8810 	msr	PRIMASK, r3
 800a4cc:	b662      	cpsie	i
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a510 <gos_taskSleep+0x11c>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <gos_taskSleep+0xf6>
 800a4de:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <gos_taskSleep+0x11c>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a510 <gos_taskSleep+0x11c>)
 800a4e8:	701a      	strb	r2, [r3, #0]

            if (taskSleepResult == GOS_SUCCESS)
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	2b55      	cmp	r3, #85	@ 0x55
 800a4ee:	d102      	bne.n	800a4f6 <gos_taskSleep+0x102>
            {
                // Unprivileged.
                gos_kernelReschedule(GOS_UNPRIVILEGED);
 800a4f0:	2009      	movs	r0, #9
 800a4f2:	f7ff fb37 	bl	8009b64 <gos_kernelReschedule>
        {
            // Idle task cannot sleep.
        }
    }

    return taskSleepResult;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20000400 	.word	0x20000400
 800a504:	20001968 	.word	0x20001968
 800a508:	20001963 	.word	0x20001963
 800a50c:	20001964 	.word	0x20001964
 800a510:	20001961 	.word	0x20001961
 800a514:	20000404 	.word	0x20000404

0800a518 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	4603      	mov	r3, r0
 800a520:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 800a522:	23ae      	movs	r3, #174	@ 0xae
 800a524:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800a526:	2300      	movs	r3, #0
 800a528:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800a52a:	4b56      	ldr	r3, [pc, #344]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d108      	bne.n	800a544 <gos_taskWakeup+0x2c>
 800a532:	b672      	cpsid	i
 800a534:	f3ef 8310 	mrs	r3, PRIMASK
 800a538:	4a53      	ldr	r2, [pc, #332]	@ (800a688 <gos_taskWakeup+0x170>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	4b4f      	ldr	r3, [pc, #316]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	4b4d      	ldr	r3, [pc, #308]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	4b4e      	ldr	r3, [pc, #312]	@ (800a68c <gos_taskWakeup+0x174>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	4b4c      	ldr	r3, [pc, #304]	@ (800a68c <gos_taskWakeup+0x174>)
 800a55a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800a55c:	88fb      	ldrh	r3, [r7, #6]
 800a55e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a562:	d969      	bls.n	800a638 <gos_taskWakeup+0x120>
 800a564:	88fb      	ldrh	r3, [r7, #6]
 800a566:	f248 020f 	movw	r2, #32783	@ 0x800f
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d864      	bhi.n	800a638 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800a574:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a576:	4b46      	ldr	r3, [pc, #280]	@ (800a690 <gos_taskWakeup+0x178>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a46      	ldr	r2, [pc, #280]	@ (800a694 <gos_taskWakeup+0x17c>)
 800a57c:	216a      	movs	r1, #106	@ 0x6a
 800a57e:	fb01 f303 	mul.w	r3, r1, r3
 800a582:	4413      	add	r3, r2
 800a584:	3308      	adds	r3, #8
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	b21b      	sxth	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	db03      	blt.n	800a596 <gos_taskWakeup+0x7e>
            inIsr > 0)
 800a58e:	4b42      	ldr	r3, [pc, #264]	@ (800a698 <gos_taskWakeup+0x180>)
 800a590:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a592:	2b00      	cmp	r3, #0
 800a594:	d015      	beq.n	800a5c2 <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 800a596:	4a3f      	ldr	r2, [pc, #252]	@ (800a694 <gos_taskWakeup+0x17c>)
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	216a      	movs	r1, #106	@ 0x6a
 800a59c:	fb01 f303 	mul.w	r3, r1, r3
 800a5a0:	4413      	add	r3, r2
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b16      	cmp	r3, #22
 800a5a8:	d146      	bne.n	800a638 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800a5aa:	4a3a      	ldr	r2, [pc, #232]	@ (800a694 <gos_taskWakeup+0x17c>)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	216a      	movs	r1, #106	@ 0x6a
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 800a5bc:	2355      	movs	r3, #85	@ 0x55
 800a5be:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 800a5c0:	e03a      	b.n	800a638 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800a5c2:	4b30      	ldr	r3, [pc, #192]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <gos_taskWakeup+0xbe>
 800a5ca:	4b2e      	ldr	r3, [pc, #184]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	4b2b      	ldr	r3, [pc, #172]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d108      	bne.n	800a5f0 <gos_taskWakeup+0xd8>
 800a5de:	4b2a      	ldr	r3, [pc, #168]	@ (800a688 <gos_taskWakeup+0x170>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f383 8810 	msr	PRIMASK, r3
 800a5e6:	b662      	cpsie	i
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	4b26      	ldr	r3, [pc, #152]	@ (800a68c <gos_taskWakeup+0x174>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <gos_taskWakeup+0xec>
 800a5f8:	4b24      	ldr	r3, [pc, #144]	@ (800a68c <gos_taskWakeup+0x174>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	4b22      	ldr	r3, [pc, #136]	@ (800a68c <gos_taskWakeup+0x174>)
 800a602:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800a604:	4b22      	ldr	r3, [pc, #136]	@ (800a690 <gos_taskWakeup+0x178>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	226a      	movs	r2, #106	@ 0x6a
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	3308      	adds	r3, #8
 800a610:	4a20      	ldr	r2, [pc, #128]	@ (800a694 <gos_taskWakeup+0x17c>)
 800a612:	4413      	add	r3, r2
 800a614:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	216a      	movs	r1, #106	@ 0x6a
 800a61a:	fb01 f202 	mul.w	r2, r1, r2
 800a61e:	3208      	adds	r2, #8
 800a620:	491c      	ldr	r1, [pc, #112]	@ (800a694 <gos_taskWakeup+0x17c>)
 800a622:	440a      	add	r2, r1
 800a624:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 800a626:	9201      	str	r2, [sp, #4]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4b1c      	ldr	r3, [pc, #112]	@ (800a69c <gos_taskWakeup+0x184>)
 800a62c:	f240 1277 	movw	r2, #375	@ 0x177
 800a630:	491b      	ldr	r1, [pc, #108]	@ (800a6a0 <gos_taskWakeup+0x188>)
 800a632:	2034      	movs	r0, #52	@ 0x34
 800a634:	f001 fbb4 	bl	800bda0 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800a638:	4b12      	ldr	r3, [pc, #72]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <gos_taskWakeup+0x134>
 800a640:	4b10      	ldr	r3, [pc, #64]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	3b01      	subs	r3, #1
 800a646:	b2da      	uxtb	r2, r3
 800a648:	4b0e      	ldr	r3, [pc, #56]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	4b0d      	ldr	r3, [pc, #52]	@ (800a684 <gos_taskWakeup+0x16c>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d108      	bne.n	800a666 <gos_taskWakeup+0x14e>
 800a654:	4b0c      	ldr	r3, [pc, #48]	@ (800a688 <gos_taskWakeup+0x170>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f383 8810 	msr	PRIMASK, r3
 800a65c:	b662      	cpsie	i
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	4b09      	ldr	r3, [pc, #36]	@ (800a68c <gos_taskWakeup+0x174>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d005      	beq.n	800a67a <gos_taskWakeup+0x162>
 800a66e:	4b07      	ldr	r3, [pc, #28]	@ (800a68c <gos_taskWakeup+0x174>)
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	3b01      	subs	r3, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <gos_taskWakeup+0x174>)
 800a678:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20001963 	.word	0x20001963
 800a688:	20001964 	.word	0x20001964
 800a68c:	20001961 	.word	0x20001961
 800a690:	20001968 	.word	0x20001968
 800a694:	20000404 	.word	0x20000404
 800a698:	20001962 	.word	0x20001962
 800a69c:	0801930c 	.word	0x0801930c
 800a6a0:	0801a6d0 	.word	0x0801a6d0

0800a6a4 <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 800a6ae:	23ae      	movs	r3, #174	@ 0xae
 800a6b0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800a6b6:	4b84      	ldr	r3, [pc, #528]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d108      	bne.n	800a6d0 <gos_taskSuspend+0x2c>
 800a6be:	b672      	cpsid	i
 800a6c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c4:	4a81      	ldr	r2, [pc, #516]	@ (800a8cc <gos_taskSuspend+0x228>)
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	4b7d      	ldr	r3, [pc, #500]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	4b7b      	ldr	r3, [pc, #492]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a6da:	701a      	strb	r2, [r3, #0]
 800a6dc:	4b7c      	ldr	r3, [pc, #496]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	4b7a      	ldr	r3, [pc, #488]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a6e6:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800a6e8:	88fb      	ldrh	r3, [r7, #6]
 800a6ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6ee:	f240 80c1 	bls.w	800a874 <gos_taskSuspend+0x1d0>
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	f248 020f 	movw	r2, #32783	@ 0x800f
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f200 80bb 	bhi.w	800a874 <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800a6fe:	88fb      	ldrh	r3, [r7, #6]
 800a700:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800a704:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a706:	4b73      	ldr	r3, [pc, #460]	@ (800a8d4 <gos_taskSuspend+0x230>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a73      	ldr	r2, [pc, #460]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a70c:	216a      	movs	r1, #106	@ 0x6a
 800a70e:	fb01 f303 	mul.w	r3, r1, r3
 800a712:	4413      	add	r3, r2
 800a714:	3308      	adds	r3, #8
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b21b      	sxth	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	db08      	blt.n	800a730 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800a71e:	4b6d      	ldr	r3, [pc, #436]	@ (800a8d4 <gos_taskSuspend+0x230>)
 800a720:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d003      	beq.n	800a730 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800a728:	4b6c      	ldr	r3, [pc, #432]	@ (800a8dc <gos_taskSuspend+0x238>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d064      	beq.n	800a7fa <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800a730:	4a69      	ldr	r2, [pc, #420]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	216a      	movs	r1, #106	@ 0x6a
 800a736:	fb01 f303 	mul.w	r3, r1, r3
 800a73a:	4413      	add	r3, r2
 800a73c:	3304      	adds	r3, #4
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b0a      	cmp	r3, #10
 800a742:	d014      	beq.n	800a76e <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 800a744:	4a64      	ldr	r2, [pc, #400]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	216a      	movs	r1, #106	@ 0x6a
 800a74a:	fb01 f303 	mul.w	r3, r1, r3
 800a74e:	4413      	add	r3, r2
 800a750:	3304      	adds	r3, #4
 800a752:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800a754:	2b16      	cmp	r3, #22
 800a756:	d00a      	beq.n	800a76e <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800a758:	4a5f      	ldr	r2, [pc, #380]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	216a      	movs	r1, #106	@ 0x6a
 800a75e:	fb01 f303 	mul.w	r3, r1, r3
 800a762:	4413      	add	r3, r2
 800a764:	3304      	adds	r3, #4
 800a766:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 800a768:	2b19      	cmp	r3, #25
 800a76a:	f040 8082 	bne.w	800a872 <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 800a76e:	4a5a      	ldr	r2, [pc, #360]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	216a      	movs	r1, #106	@ 0x6a
 800a774:	fb01 f303 	mul.w	r3, r1, r3
 800a778:	4413      	add	r3, r2
 800a77a:	3304      	adds	r3, #4
 800a77c:	7818      	ldrb	r0, [r3, #0]
 800a77e:	4a56      	ldr	r2, [pc, #344]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	216a      	movs	r1, #106	@ 0x6a
 800a784:	fb01 f303 	mul.w	r3, r1, r3
 800a788:	4413      	add	r3, r2
 800a78a:	3305      	adds	r3, #5
 800a78c:	4602      	mov	r2, r0
 800a78e:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 800a790:	4a51      	ldr	r2, [pc, #324]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	216a      	movs	r1, #106	@ 0x6a
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	3304      	adds	r3, #4
 800a79e:	2205      	movs	r2, #5
 800a7a0:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 800a7a2:	2355      	movs	r3, #85	@ 0x55
 800a7a4:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 800a7a6:	4b48      	ldr	r3, [pc, #288]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d005      	beq.n	800a7ba <gos_taskSuspend+0x116>
 800a7ae:	4b46      	ldr	r3, [pc, #280]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	4b44      	ldr	r3, [pc, #272]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	4b43      	ldr	r3, [pc, #268]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d108      	bne.n	800a7d4 <gos_taskSuspend+0x130>
 800a7c2:	4b42      	ldr	r3, [pc, #264]	@ (800a8cc <gos_taskSuspend+0x228>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f383 8810 	msr	PRIMASK, r3
 800a7ca:	b662      	cpsie	i
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	4b3e      	ldr	r3, [pc, #248]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <gos_taskSuspend+0x144>
 800a7dc:	4b3c      	ldr	r3, [pc, #240]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	4b3a      	ldr	r3, [pc, #232]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a7e6:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 800a7e8:	4b3a      	ldr	r3, [pc, #232]	@ (800a8d4 <gos_taskSuspend+0x230>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d13f      	bne.n	800a872 <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800a7f2:	2009      	movs	r0, #9
 800a7f4:	f7ff f9b6 	bl	8009b64 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800a7f8:	e03b      	b.n	800a872 <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800a7fa:	4b33      	ldr	r3, [pc, #204]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d005      	beq.n	800a80e <gos_taskSuspend+0x16a>
 800a802:	4b31      	ldr	r3, [pc, #196]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	3b01      	subs	r3, #1
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	4b2e      	ldr	r3, [pc, #184]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d108      	bne.n	800a828 <gos_taskSuspend+0x184>
 800a816:	4b2d      	ldr	r3, [pc, #180]	@ (800a8cc <gos_taskSuspend+0x228>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f383 8810 	msr	PRIMASK, r3
 800a81e:	b662      	cpsie	i
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	4b29      	ldr	r3, [pc, #164]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <gos_taskSuspend+0x198>
 800a830:	4b27      	ldr	r3, [pc, #156]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	3b01      	subs	r3, #1
 800a836:	b2da      	uxtb	r2, r3
 800a838:	4b25      	ldr	r3, [pc, #148]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a83a:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800a83c:	4b25      	ldr	r3, [pc, #148]	@ (800a8d4 <gos_taskSuspend+0x230>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	226a      	movs	r2, #106	@ 0x6a
 800a842:	fb02 f303 	mul.w	r3, r2, r3
 800a846:	3308      	adds	r3, #8
 800a848:	4a23      	ldr	r2, [pc, #140]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a84a:	4413      	add	r3, r2
 800a84c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	216a      	movs	r1, #106	@ 0x6a
 800a852:	fb01 f202 	mul.w	r2, r1, r2
 800a856:	3208      	adds	r2, #8
 800a858:	491f      	ldr	r1, [pc, #124]	@ (800a8d8 <gos_taskSuspend+0x234>)
 800a85a:	440a      	add	r2, r1
 800a85c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 800a85e:	9201      	str	r2, [sp, #4]
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e0 <gos_taskSuspend+0x23c>)
 800a864:	f240 12b9 	movw	r2, #441	@ 0x1b9
 800a868:	491e      	ldr	r1, [pc, #120]	@ (800a8e4 <gos_taskSuspend+0x240>)
 800a86a:	2034      	movs	r0, #52	@ 0x34
 800a86c:	f001 fa98 	bl	800bda0 <gos_errorHandler>
 800a870:	e000      	b.n	800a874 <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800a872:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	2b55      	cmp	r3, #85	@ 0x55
 800a878:	d020      	beq.n	800a8bc <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 800a87a:	4b13      	ldr	r3, [pc, #76]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <gos_taskSuspend+0x1ea>
 800a882:	4b11      	ldr	r3, [pc, #68]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	3b01      	subs	r3, #1
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c8 <gos_taskSuspend+0x224>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d108      	bne.n	800a8a8 <gos_taskSuspend+0x204>
 800a896:	4b0d      	ldr	r3, [pc, #52]	@ (800a8cc <gos_taskSuspend+0x228>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f383 8810 	msr	PRIMASK, r3
 800a89e:	b662      	cpsie	i
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b09      	ldr	r3, [pc, #36]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <gos_taskSuspend+0x218>
 800a8b0:	4b07      	ldr	r3, [pc, #28]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	4b05      	ldr	r3, [pc, #20]	@ (800a8d0 <gos_taskSuspend+0x22c>)
 800a8ba:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20001963 	.word	0x20001963
 800a8cc:	20001964 	.word	0x20001964
 800a8d0:	20001961 	.word	0x20001961
 800a8d4:	20001968 	.word	0x20001968
 800a8d8:	20000404 	.word	0x20000404
 800a8dc:	20001962 	.word	0x20001962
 800a8e0:	08019334 	.word	0x08019334
 800a8e4:	0801a6e0 	.word	0x0801a6e0

0800a8e8 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 800a8f2:	23ae      	movs	r3, #174	@ 0xae
 800a8f4:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800a8fa:	4b4a      	ldr	r3, [pc, #296]	@ (800aa24 <gos_taskResume+0x13c>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d108      	bne.n	800a914 <gos_taskResume+0x2c>
 800a902:	b672      	cpsid	i
 800a904:	f3ef 8310 	mrs	r3, PRIMASK
 800a908:	4a47      	ldr	r2, [pc, #284]	@ (800aa28 <gos_taskResume+0x140>)
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	4b43      	ldr	r3, [pc, #268]	@ (800aa24 <gos_taskResume+0x13c>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	3301      	adds	r3, #1
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	4b41      	ldr	r3, [pc, #260]	@ (800aa24 <gos_taskResume+0x13c>)
 800a91e:	701a      	strb	r2, [r3, #0]
 800a920:	4b42      	ldr	r3, [pc, #264]	@ (800aa2c <gos_taskResume+0x144>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	3301      	adds	r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	4b40      	ldr	r3, [pc, #256]	@ (800aa2c <gos_taskResume+0x144>)
 800a92a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800a92c:	88fb      	ldrh	r3, [r7, #6]
 800a92e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a932:	d950      	bls.n	800a9d6 <gos_taskResume+0xee>
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	f248 020f 	movw	r2, #32783	@ 0x800f
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d84b      	bhi.n	800a9d6 <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800a93e:	88fb      	ldrh	r3, [r7, #6]
 800a940:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800a944:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a946:	4b3a      	ldr	r3, [pc, #232]	@ (800aa30 <gos_taskResume+0x148>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a3a      	ldr	r2, [pc, #232]	@ (800aa34 <gos_taskResume+0x14c>)
 800a94c:	216a      	movs	r1, #106	@ 0x6a
 800a94e:	fb01 f303 	mul.w	r3, r1, r3
 800a952:	4413      	add	r3, r2
 800a954:	3308      	adds	r3, #8
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	b21b      	sxth	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	db03      	blt.n	800a966 <gos_taskResume+0x7e>
            inIsr > 0)
 800a95e:	4b36      	ldr	r3, [pc, #216]	@ (800aa38 <gos_taskResume+0x150>)
 800a960:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01d      	beq.n	800a9a2 <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 800a966:	4a33      	ldr	r2, [pc, #204]	@ (800aa34 <gos_taskResume+0x14c>)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	216a      	movs	r1, #106	@ 0x6a
 800a96c:	fb01 f303 	mul.w	r3, r1, r3
 800a970:	4413      	add	r3, r2
 800a972:	3304      	adds	r3, #4
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b05      	cmp	r3, #5
 800a978:	d12d      	bne.n	800a9d6 <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 800a97a:	4a2e      	ldr	r2, [pc, #184]	@ (800aa34 <gos_taskResume+0x14c>)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	216a      	movs	r1, #106	@ 0x6a
 800a980:	fb01 f303 	mul.w	r3, r1, r3
 800a984:	4413      	add	r3, r2
 800a986:	3305      	adds	r3, #5
 800a988:	7818      	ldrb	r0, [r3, #0]
 800a98a:	4a2a      	ldr	r2, [pc, #168]	@ (800aa34 <gos_taskResume+0x14c>)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	216a      	movs	r1, #106	@ 0x6a
 800a990:	fb01 f303 	mul.w	r3, r1, r3
 800a994:	4413      	add	r3, r2
 800a996:	3304      	adds	r3, #4
 800a998:	4602      	mov	r2, r0
 800a99a:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 800a99c:	2355      	movs	r3, #85	@ 0x55
 800a99e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 800a9a0:	e019      	b.n	800a9d6 <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800a9a2:	4b23      	ldr	r3, [pc, #140]	@ (800aa30 <gos_taskResume+0x148>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	226a      	movs	r2, #106	@ 0x6a
 800a9a8:	fb02 f303 	mul.w	r3, r2, r3
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	4a21      	ldr	r2, [pc, #132]	@ (800aa34 <gos_taskResume+0x14c>)
 800a9b0:	4413      	add	r3, r2
 800a9b2:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	216a      	movs	r1, #106	@ 0x6a
 800a9b8:	fb01 f202 	mul.w	r2, r1, r2
 800a9bc:	3208      	adds	r2, #8
 800a9be:	491d      	ldr	r1, [pc, #116]	@ (800aa34 <gos_taskResume+0x14c>)
 800a9c0:	440a      	add	r2, r1
 800a9c2:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 800a9c4:	9201      	str	r2, [sp, #4]
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	4b1c      	ldr	r3, [pc, #112]	@ (800aa3c <gos_taskResume+0x154>)
 800a9ca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800a9ce:	491c      	ldr	r1, [pc, #112]	@ (800aa40 <gos_taskResume+0x158>)
 800a9d0:	2034      	movs	r0, #52	@ 0x34
 800a9d2:	f001 f9e5 	bl	800bda0 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 800a9d6:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <gos_taskResume+0x13c>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <gos_taskResume+0x102>
 800a9de:	4b11      	ldr	r3, [pc, #68]	@ (800aa24 <gos_taskResume+0x13c>)
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa24 <gos_taskResume+0x13c>)
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800aa24 <gos_taskResume+0x13c>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d108      	bne.n	800aa04 <gos_taskResume+0x11c>
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <gos_taskResume+0x140>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f383 8810 	msr	PRIMASK, r3
 800a9fa:	b662      	cpsie	i
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <gos_taskResume+0x144>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d005      	beq.n	800aa18 <gos_taskResume+0x130>
 800aa0c:	4b07      	ldr	r3, [pc, #28]	@ (800aa2c <gos_taskResume+0x144>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	4b05      	ldr	r3, [pc, #20]	@ (800aa2c <gos_taskResume+0x144>)
 800aa16:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	20001963 	.word	0x20001963
 800aa28:	20001964 	.word	0x20001964
 800aa2c:	20001961 	.word	0x20001961
 800aa30:	20001968 	.word	0x20001968
 800aa34:	20000404 	.word	0x20000404
 800aa38:	20001962 	.word	0x20001962
 800aa3c:	0801935c 	.word	0x0801935c
 800aa40:	0801a6f0 	.word	0x0801a6f0

0800aa44 <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 800aa50:	23ae      	movs	r3, #174	@ 0xae
 800aa52:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800aa58:	4b7b      	ldr	r3, [pc, #492]	@ (800ac48 <gos_taskBlock+0x204>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d108      	bne.n	800aa72 <gos_taskBlock+0x2e>
 800aa60:	b672      	cpsid	i
 800aa62:	f3ef 8310 	mrs	r3, PRIMASK
 800aa66:	4a79      	ldr	r2, [pc, #484]	@ (800ac4c <gos_taskBlock+0x208>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	4b75      	ldr	r3, [pc, #468]	@ (800ac48 <gos_taskBlock+0x204>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	b2da      	uxtb	r2, r3
 800aa7a:	4b73      	ldr	r3, [pc, #460]	@ (800ac48 <gos_taskBlock+0x204>)
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	4b74      	ldr	r3, [pc, #464]	@ (800ac50 <gos_taskBlock+0x20c>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	4b72      	ldr	r3, [pc, #456]	@ (800ac50 <gos_taskBlock+0x20c>)
 800aa88:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800aa8a:	88fb      	ldrh	r3, [r7, #6]
 800aa8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa90:	f240 80b0 	bls.w	800abf4 <gos_taskBlock+0x1b0>
 800aa94:	88fb      	ldrh	r3, [r7, #6]
 800aa96:	f248 020f 	movw	r2, #32783	@ 0x800f
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	f200 80aa 	bhi.w	800abf4 <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800aaa0:	88fb      	ldrh	r3, [r7, #6]
 800aaa2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800aaa6:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800aaa8:	4b6a      	ldr	r3, [pc, #424]	@ (800ac54 <gos_taskBlock+0x210>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a6a      	ldr	r2, [pc, #424]	@ (800ac58 <gos_taskBlock+0x214>)
 800aaae:	216a      	movs	r1, #106	@ 0x6a
 800aab0:	fb01 f303 	mul.w	r3, r1, r3
 800aab4:	4413      	add	r3, r2
 800aab6:	3308      	adds	r3, #8
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b21b      	sxth	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	db08      	blt.n	800aad2 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 800aac0:	4b64      	ldr	r3, [pc, #400]	@ (800ac54 <gos_taskBlock+0x210>)
 800aac2:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d003      	beq.n	800aad2 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 800aaca:	4b64      	ldr	r3, [pc, #400]	@ (800ac5c <gos_taskBlock+0x218>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d053      	beq.n	800ab7a <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800aad2:	4a61      	ldr	r2, [pc, #388]	@ (800ac58 <gos_taskBlock+0x214>)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	216a      	movs	r1, #106	@ 0x6a
 800aad8:	fb01 f303 	mul.w	r3, r1, r3
 800aadc:	4413      	add	r3, r2
 800aade:	3304      	adds	r3, #4
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b0a      	cmp	r3, #10
 800aae4:	f040 8085 	bne.w	800abf2 <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 800aae8:	4a5b      	ldr	r2, [pc, #364]	@ (800ac58 <gos_taskBlock+0x214>)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	216a      	movs	r1, #106	@ 0x6a
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	2219      	movs	r2, #25
 800aaf8:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 800aafa:	4a57      	ldr	r2, [pc, #348]	@ (800ac58 <gos_taskBlock+0x214>)
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	216a      	movs	r1, #106	@ 0x6a
 800ab00:	fb01 f303 	mul.w	r3, r1, r3
 800ab04:	4413      	add	r3, r2
 800ab06:	3334      	adds	r3, #52	@ 0x34
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 800ab0c:	4a52      	ldr	r2, [pc, #328]	@ (800ac58 <gos_taskBlock+0x214>)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	216a      	movs	r1, #106	@ 0x6a
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	4413      	add	r3, r2
 800ab18:	3338      	adds	r3, #56	@ 0x38
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	801a      	strh	r2, [r3, #0]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 800ab22:	2355      	movs	r3, #85	@ 0x55
 800ab24:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 800ab26:	4b48      	ldr	r3, [pc, #288]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <gos_taskBlock+0xf6>
 800ab2e:	4b46      	ldr	r3, [pc, #280]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	4b44      	ldr	r3, [pc, #272]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	4b43      	ldr	r3, [pc, #268]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d108      	bne.n	800ab54 <gos_taskBlock+0x110>
 800ab42:	4b42      	ldr	r3, [pc, #264]	@ (800ac4c <gos_taskBlock+0x208>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f383 8810 	msr	PRIMASK, r3
 800ab4a:	b662      	cpsie	i
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	4b3e      	ldr	r3, [pc, #248]	@ (800ac50 <gos_taskBlock+0x20c>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d005      	beq.n	800ab68 <gos_taskBlock+0x124>
 800ab5c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac50 <gos_taskBlock+0x20c>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	4b3a      	ldr	r3, [pc, #232]	@ (800ac50 <gos_taskBlock+0x20c>)
 800ab66:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 800ab68:	4b3a      	ldr	r3, [pc, #232]	@ (800ac54 <gos_taskBlock+0x210>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d13f      	bne.n	800abf2 <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800ab72:	2009      	movs	r0, #9
 800ab74:	f7fe fff6 	bl	8009b64 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800ab78:	e03b      	b.n	800abf2 <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800ab7a:	4b33      	ldr	r3, [pc, #204]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <gos_taskBlock+0x14a>
 800ab82:	4b31      	ldr	r3, [pc, #196]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	4b2e      	ldr	r3, [pc, #184]	@ (800ac48 <gos_taskBlock+0x204>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d108      	bne.n	800aba8 <gos_taskBlock+0x164>
 800ab96:	4b2d      	ldr	r3, [pc, #180]	@ (800ac4c <gos_taskBlock+0x208>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f383 8810 	msr	PRIMASK, r3
 800ab9e:	b662      	cpsie	i
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	4b29      	ldr	r3, [pc, #164]	@ (800ac50 <gos_taskBlock+0x20c>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <gos_taskBlock+0x178>
 800abb0:	4b27      	ldr	r3, [pc, #156]	@ (800ac50 <gos_taskBlock+0x20c>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	b2da      	uxtb	r2, r3
 800abb8:	4b25      	ldr	r3, [pc, #148]	@ (800ac50 <gos_taskBlock+0x20c>)
 800abba:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800abbc:	4b25      	ldr	r3, [pc, #148]	@ (800ac54 <gos_taskBlock+0x210>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	226a      	movs	r2, #106	@ 0x6a
 800abc2:	fb02 f303 	mul.w	r3, r2, r3
 800abc6:	3308      	adds	r3, #8
 800abc8:	4a23      	ldr	r2, [pc, #140]	@ (800ac58 <gos_taskBlock+0x214>)
 800abca:	4413      	add	r3, r2
 800abcc:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	216a      	movs	r1, #106	@ 0x6a
 800abd2:	fb01 f202 	mul.w	r2, r1, r2
 800abd6:	3208      	adds	r2, #8
 800abd8:	491f      	ldr	r1, [pc, #124]	@ (800ac58 <gos_taskBlock+0x214>)
 800abda:	440a      	add	r2, r1
 800abdc:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 800abde:	9201      	str	r2, [sp, #4]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	4b1f      	ldr	r3, [pc, #124]	@ (800ac60 <gos_taskBlock+0x21c>)
 800abe4:	f240 2237 	movw	r2, #567	@ 0x237
 800abe8:	491e      	ldr	r1, [pc, #120]	@ (800ac64 <gos_taskBlock+0x220>)
 800abea:	2034      	movs	r0, #52	@ 0x34
 800abec:	f001 f8d8 	bl	800bda0 <gos_errorHandler>
 800abf0:	e000      	b.n	800abf4 <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800abf2:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	2b55      	cmp	r3, #85	@ 0x55
 800abf8:	d020      	beq.n	800ac3c <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 800abfa:	4b13      	ldr	r3, [pc, #76]	@ (800ac48 <gos_taskBlock+0x204>)
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <gos_taskBlock+0x1ca>
 800ac02:	4b11      	ldr	r3, [pc, #68]	@ (800ac48 <gos_taskBlock+0x204>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	b2da      	uxtb	r2, r3
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac48 <gos_taskBlock+0x204>)
 800ac0c:	701a      	strb	r2, [r3, #0]
 800ac0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac48 <gos_taskBlock+0x204>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d108      	bne.n	800ac28 <gos_taskBlock+0x1e4>
 800ac16:	4b0d      	ldr	r3, [pc, #52]	@ (800ac4c <gos_taskBlock+0x208>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f383 8810 	msr	PRIMASK, r3
 800ac1e:	b662      	cpsie	i
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <gos_taskBlock+0x20c>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <gos_taskBlock+0x1f8>
 800ac30:	4b07      	ldr	r3, [pc, #28]	@ (800ac50 <gos_taskBlock+0x20c>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	4b05      	ldr	r3, [pc, #20]	@ (800ac50 <gos_taskBlock+0x20c>)
 800ac3a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20001963 	.word	0x20001963
 800ac4c:	20001964 	.word	0x20001964
 800ac50:	20001961 	.word	0x20001961
 800ac54:	20001968 	.word	0x20001968
 800ac58:	20000404 	.word	0x20000404
 800ac5c:	20001962 	.word	0x20001962
 800ac60:	08019384 	.word	0x08019384
 800ac64:	0801a700 	.word	0x0801a700

0800ac68 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af02      	add	r7, sp, #8
 800ac6e:	4603      	mov	r3, r0
 800ac70:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 800ac72:	23ae      	movs	r3, #174	@ 0xae
 800ac74:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800ac7a:	4b68      	ldr	r3, [pc, #416]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d108      	bne.n	800ac94 <gos_taskUnblock+0x2c>
 800ac82:	b672      	cpsid	i
 800ac84:	f3ef 8310 	mrs	r3, PRIMASK
 800ac88:	4a65      	ldr	r2, [pc, #404]	@ (800ae20 <gos_taskUnblock+0x1b8>)
 800ac8a:	6013      	str	r3, [r2, #0]
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	4b61      	ldr	r3, [pc, #388]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	4b5f      	ldr	r3, [pc, #380]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ac9e:	701a      	strb	r2, [r3, #0]
 800aca0:	4b60      	ldr	r3, [pc, #384]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	4b5e      	ldr	r3, [pc, #376]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800acaa:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800acb2:	f240 808d 	bls.w	800add0 <gos_taskUnblock+0x168>
 800acb6:	88fb      	ldrh	r3, [r7, #6]
 800acb8:	f248 020f 	movw	r2, #32783	@ 0x800f
 800acbc:	4293      	cmp	r3, r2
 800acbe:	f200 8087 	bhi.w	800add0 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800acc2:	88fb      	ldrh	r3, [r7, #6]
 800acc4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800acc8:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800acca:	4b57      	ldr	r3, [pc, #348]	@ (800ae28 <gos_taskUnblock+0x1c0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a57      	ldr	r2, [pc, #348]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800acd0:	216a      	movs	r1, #106	@ 0x6a
 800acd2:	fb01 f303 	mul.w	r3, r1, r3
 800acd6:	4413      	add	r3, r2
 800acd8:	3308      	adds	r3, #8
 800acda:	881b      	ldrh	r3, [r3, #0]
 800acdc:	b21b      	sxth	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	db03      	blt.n	800acea <gos_taskUnblock+0x82>
            inIsr > 0)
 800ace2:	4b53      	ldr	r3, [pc, #332]	@ (800ae30 <gos_taskUnblock+0x1c8>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d035      	beq.n	800ad56 <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800acea:	4a50      	ldr	r2, [pc, #320]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	216a      	movs	r1, #106	@ 0x6a
 800acf0:	fb01 f303 	mul.w	r3, r1, r3
 800acf4:	4413      	add	r3, r2
 800acf6:	3304      	adds	r3, #4
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b19      	cmp	r3, #25
 800acfc:	d10b      	bne.n	800ad16 <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800acfe:	4a4b      	ldr	r2, [pc, #300]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	216a      	movs	r1, #106	@ 0x6a
 800ad04:	fb01 f303 	mul.w	r3, r1, r3
 800ad08:	4413      	add	r3, r2
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 800ad10:	2355      	movs	r3, #85	@ 0x55
 800ad12:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800ad14:	e05b      	b.n	800adce <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 800ad16:	4a45      	ldr	r2, [pc, #276]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	216a      	movs	r1, #106	@ 0x6a
 800ad1c:	fb01 f303 	mul.w	r3, r1, r3
 800ad20:	4413      	add	r3, r2
 800ad22:	3304      	adds	r3, #4
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b05      	cmp	r3, #5
 800ad28:	d151      	bne.n	800adce <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 800ad2a:	4a40      	ldr	r2, [pc, #256]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	216a      	movs	r1, #106	@ 0x6a
 800ad30:	fb01 f303 	mul.w	r3, r1, r3
 800ad34:	4413      	add	r3, r2
 800ad36:	3305      	adds	r3, #5
 800ad38:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 800ad3a:	2b19      	cmp	r3, #25
 800ad3c:	d147      	bne.n	800adce <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 800ad3e:	4a3b      	ldr	r2, [pc, #236]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	216a      	movs	r1, #106	@ 0x6a
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	4413      	add	r3, r2
 800ad4a:	3305      	adds	r3, #5
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 800ad50:	2355      	movs	r3, #85	@ 0x55
 800ad52:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800ad54:	e03b      	b.n	800adce <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800ad56:	4b31      	ldr	r3, [pc, #196]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <gos_taskUnblock+0x102>
 800ad5e:	4b2f      	ldr	r3, [pc, #188]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	4b2d      	ldr	r3, [pc, #180]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	4b2c      	ldr	r3, [pc, #176]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d108      	bne.n	800ad84 <gos_taskUnblock+0x11c>
 800ad72:	4b2b      	ldr	r3, [pc, #172]	@ (800ae20 <gos_taskUnblock+0x1b8>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f383 8810 	msr	PRIMASK, r3
 800ad7a:	b662      	cpsie	i
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	4b27      	ldr	r3, [pc, #156]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <gos_taskUnblock+0x130>
 800ad8c:	4b25      	ldr	r3, [pc, #148]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	4b23      	ldr	r3, [pc, #140]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800ad96:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800ad98:	4b23      	ldr	r3, [pc, #140]	@ (800ae28 <gos_taskUnblock+0x1c0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	226a      	movs	r2, #106	@ 0x6a
 800ad9e:	fb02 f303 	mul.w	r3, r2, r3
 800ada2:	3308      	adds	r3, #8
 800ada4:	4a21      	ldr	r2, [pc, #132]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800ada6:	4413      	add	r3, r2
 800ada8:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	216a      	movs	r1, #106	@ 0x6a
 800adae:	fb01 f202 	mul.w	r2, r1, r2
 800adb2:	3208      	adds	r2, #8
 800adb4:	491d      	ldr	r1, [pc, #116]	@ (800ae2c <gos_taskUnblock+0x1c4>)
 800adb6:	440a      	add	r2, r1
 800adb8:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 800adba:	9201      	str	r2, [sp, #4]
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ae34 <gos_taskUnblock+0x1cc>)
 800adc0:	f44f 721e 	mov.w	r2, #632	@ 0x278
 800adc4:	491c      	ldr	r1, [pc, #112]	@ (800ae38 <gos_taskUnblock+0x1d0>)
 800adc6:	2034      	movs	r0, #52	@ 0x34
 800adc8:	f000 ffea 	bl	800bda0 <gos_errorHandler>
 800adcc:	e000      	b.n	800add0 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800adce:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800add0:	4b12      	ldr	r3, [pc, #72]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <gos_taskUnblock+0x17c>
 800add8:	4b10      	ldr	r3, [pc, #64]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	3b01      	subs	r3, #1
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	4b0e      	ldr	r3, [pc, #56]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	4b0d      	ldr	r3, [pc, #52]	@ (800ae1c <gos_taskUnblock+0x1b4>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d108      	bne.n	800adfe <gos_taskUnblock+0x196>
 800adec:	4b0c      	ldr	r3, [pc, #48]	@ (800ae20 <gos_taskUnblock+0x1b8>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f383 8810 	msr	PRIMASK, r3
 800adf4:	b662      	cpsie	i
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	4b09      	ldr	r3, [pc, #36]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <gos_taskUnblock+0x1aa>
 800ae06:	4b07      	ldr	r3, [pc, #28]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	4b05      	ldr	r3, [pc, #20]	@ (800ae24 <gos_taskUnblock+0x1bc>)
 800ae10:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20001963 	.word	0x20001963
 800ae20:	20001964 	.word	0x20001964
 800ae24:	20001961 	.word	0x20001961
 800ae28:	20001968 	.word	0x20001968
 800ae2c:	20000404 	.word	0x20000404
 800ae30:	20001962 	.word	0x20001962
 800ae34:	080193ac 	.word	0x080193ac
 800ae38:	0801a710 	.word	0x0801a710

0800ae3c <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af02      	add	r7, sp, #8
 800ae42:	4603      	mov	r3, r0
 800ae44:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 800ae46:	23ae      	movs	r3, #174	@ 0xae
 800ae48:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800ae4e:	4b84      	ldr	r3, [pc, #528]	@ (800b060 <gos_taskDelete+0x224>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d108      	bne.n	800ae68 <gos_taskDelete+0x2c>
 800ae56:	b672      	cpsid	i
 800ae58:	f3ef 8310 	mrs	r3, PRIMASK
 800ae5c:	4a81      	ldr	r2, [pc, #516]	@ (800b064 <gos_taskDelete+0x228>)
 800ae5e:	6013      	str	r3, [r2, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	4b7d      	ldr	r3, [pc, #500]	@ (800b060 <gos_taskDelete+0x224>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	4b7b      	ldr	r3, [pc, #492]	@ (800b060 <gos_taskDelete+0x224>)
 800ae72:	701a      	strb	r2, [r3, #0]
 800ae74:	4b7c      	ldr	r3, [pc, #496]	@ (800b068 <gos_taskDelete+0x22c>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	4b7a      	ldr	r3, [pc, #488]	@ (800b068 <gos_taskDelete+0x22c>)
 800ae7e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800ae80:	88fb      	ldrh	r3, [r7, #6]
 800ae82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae86:	f240 80b9 	bls.w	800affc <gos_taskDelete+0x1c0>
 800ae8a:	88fb      	ldrh	r3, [r7, #6]
 800ae8c:	f248 020f 	movw	r2, #32783	@ 0x800f
 800ae90:	4293      	cmp	r3, r2
 800ae92:	f200 80b3 	bhi.w	800affc <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800ae96:	88fb      	ldrh	r3, [r7, #6]
 800ae98:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800ae9c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ae9e:	4b73      	ldr	r3, [pc, #460]	@ (800b06c <gos_taskDelete+0x230>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a73      	ldr	r2, [pc, #460]	@ (800b070 <gos_taskDelete+0x234>)
 800aea4:	216a      	movs	r1, #106	@ 0x6a
 800aea6:	fb01 f303 	mul.w	r3, r1, r3
 800aeaa:	4413      	add	r3, r2
 800aeac:	3308      	adds	r3, #8
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	b21b      	sxth	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	db08      	blt.n	800aec8 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800aeb6:	4b6d      	ldr	r3, [pc, #436]	@ (800b06c <gos_taskDelete+0x230>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d003      	beq.n	800aec8 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800aec0:	4b6c      	ldr	r3, [pc, #432]	@ (800b074 <gos_taskDelete+0x238>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d05e      	beq.n	800af86 <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800aec8:	4a69      	ldr	r2, [pc, #420]	@ (800b070 <gos_taskDelete+0x234>)
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	216a      	movs	r1, #106	@ 0x6a
 800aece:	fb01 f303 	mul.w	r3, r1, r3
 800aed2:	4413      	add	r3, r2
 800aed4:	3304      	adds	r3, #4
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	2b0d      	cmp	r3, #13
 800aeda:	f000 808f 	beq.w	800affc <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 800aede:	4a64      	ldr	r2, [pc, #400]	@ (800b070 <gos_taskDelete+0x234>)
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	216a      	movs	r1, #106	@ 0x6a
 800aee4:	fb01 f303 	mul.w	r3, r1, r3
 800aee8:	4413      	add	r3, r2
 800aeea:	3304      	adds	r3, #4
 800aeec:	220d      	movs	r2, #13
 800aeee:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 800aef0:	2355      	movs	r3, #85	@ 0x55
 800aef2:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 800aef4:	4b5d      	ldr	r3, [pc, #372]	@ (800b06c <gos_taskDelete+0x230>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a5d      	ldr	r2, [pc, #372]	@ (800b070 <gos_taskDelete+0x234>)
 800aefa:	216a      	movs	r1, #106	@ 0x6a
 800aefc:	fb01 f303 	mul.w	r3, r1, r3
 800af00:	4413      	add	r3, r2
 800af02:	3308      	adds	r3, #8
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d133      	bne.n	800af76 <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 800af0e:	4b57      	ldr	r3, [pc, #348]	@ (800b06c <gos_taskDelete+0x230>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a57      	ldr	r2, [pc, #348]	@ (800b070 <gos_taskDelete+0x234>)
 800af14:	216a      	movs	r1, #106	@ 0x6a
 800af16:	fb01 f303 	mul.w	r3, r1, r3
 800af1a:	4413      	add	r3, r2
 800af1c:	3308      	adds	r3, #8
 800af1e:	881a      	ldrh	r2, [r3, #0]
 800af20:	4b52      	ldr	r3, [pc, #328]	@ (800b06c <gos_taskDelete+0x230>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af28:	b290      	uxth	r0, r2
 800af2a:	4a51      	ldr	r2, [pc, #324]	@ (800b070 <gos_taskDelete+0x234>)
 800af2c:	216a      	movs	r1, #106	@ 0x6a
 800af2e:	fb01 f303 	mul.w	r3, r1, r3
 800af32:	4413      	add	r3, r2
 800af34:	3308      	adds	r3, #8
 800af36:	4602      	mov	r2, r0
 800af38:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 800af3a:	4b4f      	ldr	r3, [pc, #316]	@ (800b078 <gos_taskDelete+0x23c>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	4611      	mov	r1, r2
 800af42:	4618      	mov	r0, r3
 800af44:	f002 fa5e 	bl	800d404 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 800af48:	4b48      	ldr	r3, [pc, #288]	@ (800b06c <gos_taskDelete+0x230>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a48      	ldr	r2, [pc, #288]	@ (800b070 <gos_taskDelete+0x234>)
 800af4e:	216a      	movs	r1, #106	@ 0x6a
 800af50:	fb01 f303 	mul.w	r3, r1, r3
 800af54:	4413      	add	r3, r2
 800af56:	3308      	adds	r3, #8
 800af58:	881a      	ldrh	r2, [r3, #0]
 800af5a:	4b44      	ldr	r3, [pc, #272]	@ (800b06c <gos_taskDelete+0x230>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af62:	b290      	uxth	r0, r2
 800af64:	4a42      	ldr	r2, [pc, #264]	@ (800b070 <gos_taskDelete+0x234>)
 800af66:	216a      	movs	r1, #106	@ 0x6a
 800af68:	fb01 f303 	mul.w	r3, r1, r3
 800af6c:	4413      	add	r3, r2
 800af6e:	3308      	adds	r3, #8
 800af70:	4602      	mov	r2, r0
 800af72:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800af74:	e042      	b.n	800affc <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 800af76:	4b40      	ldr	r3, [pc, #256]	@ (800b078 <gos_taskDelete+0x23c>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	88fa      	ldrh	r2, [r7, #6]
 800af7c:	4611      	mov	r1, r2
 800af7e:	4618      	mov	r0, r3
 800af80:	f002 fa40 	bl	800d404 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800af84:	e03a      	b.n	800affc <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800af86:	4b36      	ldr	r3, [pc, #216]	@ (800b060 <gos_taskDelete+0x224>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d005      	beq.n	800af9a <gos_taskDelete+0x15e>
 800af8e:	4b34      	ldr	r3, [pc, #208]	@ (800b060 <gos_taskDelete+0x224>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	3b01      	subs	r3, #1
 800af94:	b2da      	uxtb	r2, r3
 800af96:	4b32      	ldr	r3, [pc, #200]	@ (800b060 <gos_taskDelete+0x224>)
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	4b31      	ldr	r3, [pc, #196]	@ (800b060 <gos_taskDelete+0x224>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d108      	bne.n	800afb4 <gos_taskDelete+0x178>
 800afa2:	4b30      	ldr	r3, [pc, #192]	@ (800b064 <gos_taskDelete+0x228>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f383 8810 	msr	PRIMASK, r3
 800afaa:	b662      	cpsie	i
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	4b2c      	ldr	r3, [pc, #176]	@ (800b068 <gos_taskDelete+0x22c>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d005      	beq.n	800afc8 <gos_taskDelete+0x18c>
 800afbc:	4b2a      	ldr	r3, [pc, #168]	@ (800b068 <gos_taskDelete+0x22c>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	4b28      	ldr	r3, [pc, #160]	@ (800b068 <gos_taskDelete+0x22c>)
 800afc6:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800afc8:	4b28      	ldr	r3, [pc, #160]	@ (800b06c <gos_taskDelete+0x230>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	226a      	movs	r2, #106	@ 0x6a
 800afce:	fb02 f303 	mul.w	r3, r2, r3
 800afd2:	3308      	adds	r3, #8
 800afd4:	4a26      	ldr	r2, [pc, #152]	@ (800b070 <gos_taskDelete+0x234>)
 800afd6:	4413      	add	r3, r2
 800afd8:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	216a      	movs	r1, #106	@ 0x6a
 800afde:	fb01 f202 	mul.w	r2, r1, r2
 800afe2:	3208      	adds	r2, #8
 800afe4:	4922      	ldr	r1, [pc, #136]	@ (800b070 <gos_taskDelete+0x234>)
 800afe6:	440a      	add	r2, r1
 800afe8:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 800afea:	9201      	str	r2, [sp, #4]
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4b23      	ldr	r3, [pc, #140]	@ (800b07c <gos_taskDelete+0x240>)
 800aff0:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 800aff4:	4922      	ldr	r1, [pc, #136]	@ (800b080 <gos_taskDelete+0x244>)
 800aff6:	2034      	movs	r0, #52	@ 0x34
 800aff8:	f000 fed2 	bl	800bda0 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800affc:	4b18      	ldr	r3, [pc, #96]	@ (800b060 <gos_taskDelete+0x224>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d005      	beq.n	800b010 <gos_taskDelete+0x1d4>
 800b004:	4b16      	ldr	r3, [pc, #88]	@ (800b060 <gos_taskDelete+0x224>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	3b01      	subs	r3, #1
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	4b14      	ldr	r3, [pc, #80]	@ (800b060 <gos_taskDelete+0x224>)
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	4b13      	ldr	r3, [pc, #76]	@ (800b060 <gos_taskDelete+0x224>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d108      	bne.n	800b02a <gos_taskDelete+0x1ee>
 800b018:	4b12      	ldr	r3, [pc, #72]	@ (800b064 <gos_taskDelete+0x228>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f383 8810 	msr	PRIMASK, r3
 800b020:	b662      	cpsie	i
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	4b0f      	ldr	r3, [pc, #60]	@ (800b068 <gos_taskDelete+0x22c>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <gos_taskDelete+0x202>
 800b032:	4b0d      	ldr	r3, [pc, #52]	@ (800b068 <gos_taskDelete+0x22c>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	3b01      	subs	r3, #1
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <gos_taskDelete+0x22c>)
 800b03c:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	2b55      	cmp	r3, #85	@ 0x55
 800b042:	d107      	bne.n	800b054 <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 800b044:	4b09      	ldr	r3, [pc, #36]	@ (800b06c <gos_taskDelete+0x230>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d102      	bne.n	800b054 <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 800b04e:	2009      	movs	r0, #9
 800b050:	f7fe fd88 	bl	8009b64 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 800b054:	7bfb      	ldrb	r3, [r7, #15]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20001963 	.word	0x20001963
 800b064:	20001964 	.word	0x20001964
 800b068:	20001961 	.word	0x20001961
 800b06c:	20001968 	.word	0x20001968
 800b070:	20000404 	.word	0x20000404
 800b074:	20001962 	.word	0x20001962
 800b078:	20001990 	.word	0x20001990
 800b07c:	080193d4 	.word	0x080193d4
 800b080:	0801a720 	.word	0x0801a720

0800b084 <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af02      	add	r7, sp, #8
 800b08a:	4603      	mov	r3, r0
 800b08c:	460a      	mov	r2, r1
 800b08e:	80fb      	strh	r3, [r7, #6]
 800b090:	4613      	mov	r3, r2
 800b092:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 800b094:	23ae      	movs	r3, #174	@ 0xae
 800b096:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 800b098:	2300      	movs	r3, #0
 800b09a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b09c:	4b53      	ldr	r3, [pc, #332]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d108      	bne.n	800b0b6 <gos_taskSetPriority+0x32>
 800b0a4:	b672      	cpsid	i
 800b0a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b0aa:	4a51      	ldr	r2, [pc, #324]	@ (800b1f0 <gos_taskSetPriority+0x16c>)
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	4b4d      	ldr	r3, [pc, #308]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	4b4b      	ldr	r3, [pc, #300]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	4b4c      	ldr	r3, [pc, #304]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	4b4a      	ldr	r3, [pc, #296]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b0cc:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0d4:	d963      	bls.n	800b19e <gos_taskSetPriority+0x11a>
 800b0d6:	88fb      	ldrh	r3, [r7, #6]
 800b0d8:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d85e      	bhi.n	800b19e <gos_taskSetPriority+0x11a>
 800b0e0:	797b      	ldrb	r3, [r7, #5]
 800b0e2:	2bff      	cmp	r3, #255	@ 0xff
 800b0e4:	d05b      	beq.n	800b19e <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b0ec:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b0ee:	4b42      	ldr	r3, [pc, #264]	@ (800b1f8 <gos_taskSetPriority+0x174>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a42      	ldr	r2, [pc, #264]	@ (800b1fc <gos_taskSetPriority+0x178>)
 800b0f4:	216a      	movs	r1, #106	@ 0x6a
 800b0f6:	fb01 f303 	mul.w	r3, r1, r3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d103      	bne.n	800b110 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 800b108:	4b3d      	ldr	r3, [pc, #244]	@ (800b200 <gos_taskSetPriority+0x17c>)
 800b10a:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00b      	beq.n	800b128 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 800b110:	4a3a      	ldr	r2, [pc, #232]	@ (800b1fc <gos_taskSetPriority+0x178>)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	216a      	movs	r1, #106	@ 0x6a
 800b116:	fb01 f303 	mul.w	r3, r1, r3
 800b11a:	4413      	add	r3, r2
 800b11c:	3306      	adds	r3, #6
 800b11e:	797a      	ldrb	r2, [r7, #5]
 800b120:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800b122:	2355      	movs	r3, #85	@ 0x55
 800b124:	73fb      	strb	r3, [r7, #15]
 800b126:	e03a      	b.n	800b19e <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 800b128:	4b30      	ldr	r3, [pc, #192]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <gos_taskSetPriority+0xb8>
 800b130:	4b2e      	ldr	r3, [pc, #184]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	3b01      	subs	r3, #1
 800b136:	b2da      	uxtb	r2, r3
 800b138:	4b2c      	ldr	r3, [pc, #176]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b13a:	701a      	strb	r2, [r3, #0]
 800b13c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d108      	bne.n	800b156 <gos_taskSetPriority+0xd2>
 800b144:	4b2a      	ldr	r3, [pc, #168]	@ (800b1f0 <gos_taskSetPriority+0x16c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f383 8810 	msr	PRIMASK, r3
 800b14c:	b662      	cpsie	i
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	4b27      	ldr	r3, [pc, #156]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d005      	beq.n	800b16a <gos_taskSetPriority+0xe6>
 800b15e:	4b25      	ldr	r3, [pc, #148]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	3b01      	subs	r3, #1
 800b164:	b2da      	uxtb	r2, r3
 800b166:	4b23      	ldr	r3, [pc, #140]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b168:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800b16a:	4b23      	ldr	r3, [pc, #140]	@ (800b1f8 <gos_taskSetPriority+0x174>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	226a      	movs	r2, #106	@ 0x6a
 800b170:	fb02 f303 	mul.w	r3, r2, r3
 800b174:	3308      	adds	r3, #8
 800b176:	4a21      	ldr	r2, [pc, #132]	@ (800b1fc <gos_taskSetPriority+0x178>)
 800b178:	4413      	add	r3, r2
 800b17a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	216a      	movs	r1, #106	@ 0x6a
 800b180:	fb01 f202 	mul.w	r2, r1, r2
 800b184:	3208      	adds	r2, #8
 800b186:	491d      	ldr	r1, [pc, #116]	@ (800b1fc <gos_taskSetPriority+0x178>)
 800b188:	440a      	add	r2, r1
 800b18a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800b18c:	9201      	str	r2, [sp, #4]
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4b1c      	ldr	r3, [pc, #112]	@ (800b204 <gos_taskSetPriority+0x180>)
 800b192:	f240 22f6 	movw	r2, #758	@ 0x2f6
 800b196:	491c      	ldr	r1, [pc, #112]	@ (800b208 <gos_taskSetPriority+0x184>)
 800b198:	2034      	movs	r0, #52	@ 0x34
 800b19a:	f000 fe01 	bl	800bda0 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 800b19e:	4b13      	ldr	r3, [pc, #76]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d005      	beq.n	800b1b2 <gos_taskSetPriority+0x12e>
 800b1a6:	4b11      	ldr	r3, [pc, #68]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b1b0:	701a      	strb	r2, [r3, #0]
 800b1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b1ec <gos_taskSetPriority+0x168>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d108      	bne.n	800b1cc <gos_taskSetPriority+0x148>
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <gos_taskSetPriority+0x16c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f383 8810 	msr	PRIMASK, r3
 800b1c2:	b662      	cpsie	i
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	4b09      	ldr	r3, [pc, #36]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <gos_taskSetPriority+0x15c>
 800b1d4:	4b07      	ldr	r3, [pc, #28]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	4b05      	ldr	r3, [pc, #20]	@ (800b1f4 <gos_taskSetPriority+0x170>)
 800b1de:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20001963 	.word	0x20001963
 800b1f0:	20001964 	.word	0x20001964
 800b1f4:	20001961 	.word	0x20001961
 800b1f8:	20001968 	.word	0x20001968
 800b1fc:	20000404 	.word	0x20000404
 800b200:	20001962 	.word	0x20001962
 800b204:	080193fc 	.word	0x080193fc
 800b208:	0801a730 	.word	0x0801a730

0800b20c <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af02      	add	r7, sp, #8
 800b212:	4603      	mov	r3, r0
 800b214:	460a      	mov	r2, r1
 800b216:	80fb      	strh	r3, [r7, #6]
 800b218:	4613      	mov	r3, r2
 800b21a:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 800b21c:	23ae      	movs	r3, #174	@ 0xae
 800b21e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 800b220:	2300      	movs	r3, #0
 800b222:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b224:	4b53      	ldr	r3, [pc, #332]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <gos_taskSetOriginalPriority+0x32>
 800b22c:	b672      	cpsid	i
 800b22e:	f3ef 8310 	mrs	r3, PRIMASK
 800b232:	4a51      	ldr	r2, [pc, #324]	@ (800b378 <gos_taskSetOriginalPriority+0x16c>)
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	4b4d      	ldr	r3, [pc, #308]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	b2da      	uxtb	r2, r3
 800b246:	4b4b      	ldr	r3, [pc, #300]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	4b4c      	ldr	r3, [pc, #304]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	3301      	adds	r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	4b4a      	ldr	r3, [pc, #296]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b254:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b256:	88fb      	ldrh	r3, [r7, #6]
 800b258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b25c:	d963      	bls.n	800b326 <gos_taskSetOriginalPriority+0x11a>
 800b25e:	88fb      	ldrh	r3, [r7, #6]
 800b260:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b264:	4293      	cmp	r3, r2
 800b266:	d85e      	bhi.n	800b326 <gos_taskSetOriginalPriority+0x11a>
 800b268:	797b      	ldrb	r3, [r7, #5]
 800b26a:	2bff      	cmp	r3, #255	@ 0xff
 800b26c:	d05b      	beq.n	800b326 <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b26e:	88fb      	ldrh	r3, [r7, #6]
 800b270:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b274:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b276:	4b42      	ldr	r3, [pc, #264]	@ (800b380 <gos_taskSetOriginalPriority+0x174>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a42      	ldr	r2, [pc, #264]	@ (800b384 <gos_taskSetOriginalPriority+0x178>)
 800b27c:	216a      	movs	r1, #106	@ 0x6a
 800b27e:	fb01 f303 	mul.w	r3, r1, r3
 800b282:	4413      	add	r3, r2
 800b284:	3308      	adds	r3, #8
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d103      	bne.n	800b298 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 800b290:	4b3d      	ldr	r3, [pc, #244]	@ (800b388 <gos_taskSetOriginalPriority+0x17c>)
 800b292:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 800b298:	4a3a      	ldr	r2, [pc, #232]	@ (800b384 <gos_taskSetOriginalPriority+0x178>)
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	216a      	movs	r1, #106	@ 0x6a
 800b29e:	fb01 f303 	mul.w	r3, r1, r3
 800b2a2:	4413      	add	r3, r2
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	797a      	ldrb	r2, [r7, #5]
 800b2a8:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800b2aa:	2355      	movs	r3, #85	@ 0x55
 800b2ac:	73fb      	strb	r3, [r7, #15]
 800b2ae:	e03a      	b.n	800b326 <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 800b2b0:	4b30      	ldr	r3, [pc, #192]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <gos_taskSetOriginalPriority+0xb8>
 800b2b8:	4b2e      	ldr	r3, [pc, #184]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	4b2c      	ldr	r3, [pc, #176]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b2c2:	701a      	strb	r2, [r3, #0]
 800b2c4:	4b2b      	ldr	r3, [pc, #172]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d108      	bne.n	800b2de <gos_taskSetOriginalPriority+0xd2>
 800b2cc:	4b2a      	ldr	r3, [pc, #168]	@ (800b378 <gos_taskSetOriginalPriority+0x16c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f383 8810 	msr	PRIMASK, r3
 800b2d4:	b662      	cpsie	i
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	4b27      	ldr	r3, [pc, #156]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d005      	beq.n	800b2f2 <gos_taskSetOriginalPriority+0xe6>
 800b2e6:	4b25      	ldr	r3, [pc, #148]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	4b23      	ldr	r3, [pc, #140]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b2f0:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800b2f2:	4b23      	ldr	r3, [pc, #140]	@ (800b380 <gos_taskSetOriginalPriority+0x174>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	226a      	movs	r2, #106	@ 0x6a
 800b2f8:	fb02 f303 	mul.w	r3, r2, r3
 800b2fc:	3308      	adds	r3, #8
 800b2fe:	4a21      	ldr	r2, [pc, #132]	@ (800b384 <gos_taskSetOriginalPriority+0x178>)
 800b300:	4413      	add	r3, r2
 800b302:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	216a      	movs	r1, #106	@ 0x6a
 800b308:	fb01 f202 	mul.w	r2, r1, r2
 800b30c:	3208      	adds	r2, #8
 800b30e:	491d      	ldr	r1, [pc, #116]	@ (800b384 <gos_taskSetOriginalPriority+0x178>)
 800b310:	440a      	add	r2, r1
 800b312:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800b314:	9201      	str	r2, [sp, #4]
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	4b1c      	ldr	r3, [pc, #112]	@ (800b38c <gos_taskSetOriginalPriority+0x180>)
 800b31a:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800b31e:	491c      	ldr	r1, [pc, #112]	@ (800b390 <gos_taskSetOriginalPriority+0x184>)
 800b320:	2034      	movs	r0, #52	@ 0x34
 800b322:	f000 fd3d 	bl	800bda0 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 800b326:	4b13      	ldr	r3, [pc, #76]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <gos_taskSetOriginalPriority+0x12e>
 800b32e:	4b11      	ldr	r3, [pc, #68]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	3b01      	subs	r3, #1
 800b334:	b2da      	uxtb	r2, r3
 800b336:	4b0f      	ldr	r3, [pc, #60]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b338:	701a      	strb	r2, [r3, #0]
 800b33a:	4b0e      	ldr	r3, [pc, #56]	@ (800b374 <gos_taskSetOriginalPriority+0x168>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d108      	bne.n	800b354 <gos_taskSetOriginalPriority+0x148>
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <gos_taskSetOriginalPriority+0x16c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f383 8810 	msr	PRIMASK, r3
 800b34a:	b662      	cpsie	i
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	4b09      	ldr	r3, [pc, #36]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d005      	beq.n	800b368 <gos_taskSetOriginalPriority+0x15c>
 800b35c:	4b07      	ldr	r3, [pc, #28]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	3b01      	subs	r3, #1
 800b362:	b2da      	uxtb	r2, r3
 800b364:	4b05      	ldr	r3, [pc, #20]	@ (800b37c <gos_taskSetOriginalPriority+0x170>)
 800b366:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20001963 	.word	0x20001963
 800b378:	20001964 	.word	0x20001964
 800b37c:	20001961 	.word	0x20001961
 800b380:	20001968 	.word	0x20001968
 800b384:	20000404 	.word	0x20000404
 800b388:	20001962 	.word	0x20001962
 800b38c:	080193fc 	.word	0x080193fc
 800b390:	0801a744 	.word	0x0801a744

0800b394 <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 800b3a0:	23ae      	movs	r3, #174	@ 0xae
 800b3a2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b3a8:	4b2e      	ldr	r3, [pc, #184]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d108      	bne.n	800b3c2 <gos_taskGetPriority+0x2e>
 800b3b0:	b672      	cpsid	i
 800b3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b6:	4a2c      	ldr	r2, [pc, #176]	@ (800b468 <gos_taskGetPriority+0xd4>)
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	4b28      	ldr	r3, [pc, #160]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	4b26      	ldr	r3, [pc, #152]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b3cc:	701a      	strb	r2, [r3, #0]
 800b3ce:	4b27      	ldr	r3, [pc, #156]	@ (800b46c <gos_taskGetPriority+0xd8>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	4b25      	ldr	r3, [pc, #148]	@ (800b46c <gos_taskGetPriority+0xd8>)
 800b3d8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b3da:	88fb      	ldrh	r3, [r7, #6]
 800b3dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3e0:	d917      	bls.n	800b412 <gos_taskGetPriority+0x7e>
 800b3e2:	88fb      	ldrh	r3, [r7, #6]
 800b3e4:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d812      	bhi.n	800b412 <gos_taskGetPriority+0x7e>
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00f      	beq.n	800b412 <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b3f2:	88fb      	ldrh	r3, [r7, #6]
 800b3f4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b3f8:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 800b3fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b470 <gos_taskGetPriority+0xdc>)
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	216a      	movs	r1, #106	@ 0x6a
 800b400:	fb01 f303 	mul.w	r3, r1, r3
 800b404:	4413      	add	r3, r2
 800b406:	3306      	adds	r3, #6
 800b408:	781a      	ldrb	r2, [r3, #0]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 800b40e:	2355      	movs	r3, #85	@ 0x55
 800b410:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 800b412:	4b14      	ldr	r3, [pc, #80]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <gos_taskGetPriority+0x92>
 800b41a:	4b12      	ldr	r3, [pc, #72]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	3b01      	subs	r3, #1
 800b420:	b2da      	uxtb	r2, r3
 800b422:	4b10      	ldr	r3, [pc, #64]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	4b0f      	ldr	r3, [pc, #60]	@ (800b464 <gos_taskGetPriority+0xd0>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d108      	bne.n	800b440 <gos_taskGetPriority+0xac>
 800b42e:	4b0e      	ldr	r3, [pc, #56]	@ (800b468 <gos_taskGetPriority+0xd4>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f383 8810 	msr	PRIMASK, r3
 800b436:	b662      	cpsie	i
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <gos_taskGetPriority+0xd8>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d005      	beq.n	800b454 <gos_taskGetPriority+0xc0>
 800b448:	4b08      	ldr	r3, [pc, #32]	@ (800b46c <gos_taskGetPriority+0xd8>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	4b06      	ldr	r3, [pc, #24]	@ (800b46c <gos_taskGetPriority+0xd8>)
 800b452:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20001963 	.word	0x20001963
 800b468:	20001964 	.word	0x20001964
 800b46c:	20001961 	.word	0x20001961
 800b470:	20000404 	.word	0x20000404

0800b474 <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 800b474:	b480      	push	{r7}
 800b476:	b085      	sub	sp, #20
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	460a      	mov	r2, r1
 800b47e:	80fb      	strh	r3, [r7, #6]
 800b480:	4613      	mov	r3, r2
 800b482:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 800b484:	23ae      	movs	r3, #174	@ 0xae
 800b486:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 800b488:	2300      	movs	r3, #0
 800b48a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b48c:	4b31      	ldr	r3, [pc, #196]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d108      	bne.n	800b4a6 <gos_taskAddPrivilege+0x32>
 800b494:	b672      	cpsid	i
 800b496:	f3ef 8310 	mrs	r3, PRIMASK
 800b49a:	4a2f      	ldr	r2, [pc, #188]	@ (800b558 <gos_taskAddPrivilege+0xe4>)
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	4b29      	ldr	r3, [pc, #164]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800b55c <gos_taskAddPrivilege+0xe8>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	4b28      	ldr	r3, [pc, #160]	@ (800b55c <gos_taskAddPrivilege+0xe8>)
 800b4bc:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4c4:	d91e      	bls.n	800b504 <gos_taskAddPrivilege+0x90>
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d819      	bhi.n	800b504 <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b4d0:	88fb      	ldrh	r3, [r7, #6]
 800b4d2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b4d6:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 800b4d8:	4a21      	ldr	r2, [pc, #132]	@ (800b560 <gos_taskAddPrivilege+0xec>)
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	216a      	movs	r1, #106	@ 0x6a
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	881a      	ldrh	r2, [r3, #0]
 800b4e8:	88bb      	ldrh	r3, [r7, #4]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	b298      	uxth	r0, r3
 800b4ee:	4a1c      	ldr	r2, [pc, #112]	@ (800b560 <gos_taskAddPrivilege+0xec>)
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	216a      	movs	r1, #106	@ 0x6a
 800b4f4:	fb01 f303 	mul.w	r3, r1, r3
 800b4f8:	4413      	add	r3, r2
 800b4fa:	3308      	adds	r3, #8
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 800b500:	2355      	movs	r3, #85	@ 0x55
 800b502:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b504:	4b13      	ldr	r3, [pc, #76]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d005      	beq.n	800b518 <gos_taskAddPrivilege+0xa4>
 800b50c:	4b11      	ldr	r3, [pc, #68]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	3b01      	subs	r3, #1
 800b512:	b2da      	uxtb	r2, r3
 800b514:	4b0f      	ldr	r3, [pc, #60]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	4b0e      	ldr	r3, [pc, #56]	@ (800b554 <gos_taskAddPrivilege+0xe0>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d108      	bne.n	800b532 <gos_taskAddPrivilege+0xbe>
 800b520:	4b0d      	ldr	r3, [pc, #52]	@ (800b558 <gos_taskAddPrivilege+0xe4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f383 8810 	msr	PRIMASK, r3
 800b528:	b662      	cpsie	i
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	4b0a      	ldr	r3, [pc, #40]	@ (800b55c <gos_taskAddPrivilege+0xe8>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d005      	beq.n	800b546 <gos_taskAddPrivilege+0xd2>
 800b53a:	4b08      	ldr	r3, [pc, #32]	@ (800b55c <gos_taskAddPrivilege+0xe8>)
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	3b01      	subs	r3, #1
 800b540:	b2da      	uxtb	r2, r3
 800b542:	4b06      	ldr	r3, [pc, #24]	@ (800b55c <gos_taskAddPrivilege+0xe8>)
 800b544:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 800b546:	7bfb      	ldrb	r3, [r7, #15]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	20001963 	.word	0x20001963
 800b558:	20001964 	.word	0x20001964
 800b55c:	20001961 	.word	0x20001961
 800b560:	20000404 	.word	0x20000404

0800b564 <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	460a      	mov	r2, r1
 800b56e:	80fb      	strh	r3, [r7, #6]
 800b570:	4613      	mov	r3, r2
 800b572:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 800b574:	23ae      	movs	r3, #174	@ 0xae
 800b576:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 800b578:	2300      	movs	r3, #0
 800b57a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b57c:	4b34      	ldr	r3, [pc, #208]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d108      	bne.n	800b596 <gos_taskRemovePrivilege+0x32>
 800b584:	b672      	cpsid	i
 800b586:	f3ef 8310 	mrs	r3, PRIMASK
 800b58a:	4a32      	ldr	r2, [pc, #200]	@ (800b654 <gos_taskRemovePrivilege+0xf0>)
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	4b2e      	ldr	r3, [pc, #184]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	4b2c      	ldr	r3, [pc, #176]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b658 <gos_taskRemovePrivilege+0xf4>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b658 <gos_taskRemovePrivilege+0xf4>)
 800b5ac:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b5ae:	88fb      	ldrh	r3, [r7, #6]
 800b5b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5b4:	d923      	bls.n	800b5fe <gos_taskRemovePrivilege+0x9a>
 800b5b6:	88fb      	ldrh	r3, [r7, #6]
 800b5b8:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d81e      	bhi.n	800b5fe <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b5c6:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 800b5c8:	4a24      	ldr	r2, [pc, #144]	@ (800b65c <gos_taskRemovePrivilege+0xf8>)
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	216a      	movs	r1, #106	@ 0x6a
 800b5ce:	fb01 f303 	mul.w	r3, r1, r3
 800b5d2:	4413      	add	r3, r2
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	b21a      	sxth	r2, r3
 800b5da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b5de:	43db      	mvns	r3, r3
 800b5e0:	b21b      	sxth	r3, r3
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	b21b      	sxth	r3, r3
 800b5e6:	b298      	uxth	r0, r3
 800b5e8:	4a1c      	ldr	r2, [pc, #112]	@ (800b65c <gos_taskRemovePrivilege+0xf8>)
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	216a      	movs	r1, #106	@ 0x6a
 800b5ee:	fb01 f303 	mul.w	r3, r1, r3
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 800b5fa:	2355      	movs	r3, #85	@ 0x55
 800b5fc:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b5fe:	4b14      	ldr	r3, [pc, #80]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <gos_taskRemovePrivilege+0xae>
 800b606:	4b12      	ldr	r3, [pc, #72]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	4b10      	ldr	r3, [pc, #64]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	4b0f      	ldr	r3, [pc, #60]	@ (800b650 <gos_taskRemovePrivilege+0xec>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d108      	bne.n	800b62c <gos_taskRemovePrivilege+0xc8>
 800b61a:	4b0e      	ldr	r3, [pc, #56]	@ (800b654 <gos_taskRemovePrivilege+0xf0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f383 8810 	msr	PRIMASK, r3
 800b622:	b662      	cpsie	i
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	4b0a      	ldr	r3, [pc, #40]	@ (800b658 <gos_taskRemovePrivilege+0xf4>)
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d005      	beq.n	800b640 <gos_taskRemovePrivilege+0xdc>
 800b634:	4b08      	ldr	r3, [pc, #32]	@ (800b658 <gos_taskRemovePrivilege+0xf4>)
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	3b01      	subs	r3, #1
 800b63a:	b2da      	uxtb	r2, r3
 800b63c:	4b06      	ldr	r3, [pc, #24]	@ (800b658 <gos_taskRemovePrivilege+0xf4>)
 800b63e:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	20001963 	.word	0x20001963
 800b654:	20001964 	.word	0x20001964
 800b658:	20001961 	.word	0x20001961
 800b65c:	20000404 	.word	0x20000404

0800b660 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	460a      	mov	r2, r1
 800b66a:	80fb      	strh	r3, [r7, #6]
 800b66c:	4613      	mov	r3, r2
 800b66e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 800b670:	23ae      	movs	r3, #174	@ 0xae
 800b672:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 800b674:	2300      	movs	r3, #0
 800b676:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b678:	4b2c      	ldr	r3, [pc, #176]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d108      	bne.n	800b692 <gos_taskSetPrivileges+0x32>
 800b680:	b672      	cpsid	i
 800b682:	f3ef 8310 	mrs	r3, PRIMASK
 800b686:	4a2a      	ldr	r2, [pc, #168]	@ (800b730 <gos_taskSetPrivileges+0xd0>)
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	4b26      	ldr	r3, [pc, #152]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	3301      	adds	r3, #1
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	4b24      	ldr	r3, [pc, #144]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	4b25      	ldr	r3, [pc, #148]	@ (800b734 <gos_taskSetPrivileges+0xd4>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	4b23      	ldr	r3, [pc, #140]	@ (800b734 <gos_taskSetPrivileges+0xd4>)
 800b6a8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b6aa:	88fb      	ldrh	r3, [r7, #6]
 800b6ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6b0:	d913      	bls.n	800b6da <gos_taskSetPrivileges+0x7a>
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d80e      	bhi.n	800b6da <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b6c2:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 800b6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b738 <gos_taskSetPrivileges+0xd8>)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	216a      	movs	r1, #106	@ 0x6a
 800b6ca:	fb01 f303 	mul.w	r3, r1, r3
 800b6ce:	4413      	add	r3, r2
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	88ba      	ldrh	r2, [r7, #4]
 800b6d4:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 800b6d6:	2355      	movs	r3, #85	@ 0x55
 800b6d8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b6da:	4b14      	ldr	r3, [pc, #80]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <gos_taskSetPrivileges+0x8e>
 800b6e2:	4b12      	ldr	r3, [pc, #72]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	4b10      	ldr	r3, [pc, #64]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b72c <gos_taskSetPrivileges+0xcc>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d108      	bne.n	800b708 <gos_taskSetPrivileges+0xa8>
 800b6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b730 <gos_taskSetPrivileges+0xd0>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f383 8810 	msr	PRIMASK, r3
 800b6fe:	b662      	cpsie	i
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <gos_taskSetPrivileges+0xd4>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <gos_taskSetPrivileges+0xbc>
 800b710:	4b08      	ldr	r3, [pc, #32]	@ (800b734 <gos_taskSetPrivileges+0xd4>)
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	3b01      	subs	r3, #1
 800b716:	b2da      	uxtb	r2, r3
 800b718:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <gos_taskSetPrivileges+0xd4>)
 800b71a:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20001963 	.word	0x20001963
 800b730:	20001964 	.word	0x20001964
 800b734:	20001961 	.word	0x20001961
 800b738:	20000404 	.word	0x20000404

0800b73c <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* pPrivileges)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	6039      	str	r1, [r7, #0]
 800b746:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 800b748:	23ae      	movs	r3, #174	@ 0xae
 800b74a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b750:	4b2e      	ldr	r3, [pc, #184]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d108      	bne.n	800b76a <gos_taskGetPrivileges+0x2e>
 800b758:	b672      	cpsid	i
 800b75a:	f3ef 8310 	mrs	r3, PRIMASK
 800b75e:	4a2c      	ldr	r2, [pc, #176]	@ (800b810 <gos_taskGetPrivileges+0xd4>)
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	4b28      	ldr	r3, [pc, #160]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	3301      	adds	r3, #1
 800b770:	b2da      	uxtb	r2, r3
 800b772:	4b26      	ldr	r3, [pc, #152]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	4b27      	ldr	r3, [pc, #156]	@ (800b814 <gos_taskGetPrivileges+0xd8>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	3301      	adds	r3, #1
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	4b25      	ldr	r3, [pc, #148]	@ (800b814 <gos_taskGetPrivileges+0xd8>)
 800b780:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b788:	d917      	bls.n	800b7ba <gos_taskGetPrivileges+0x7e>
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b790:	4293      	cmp	r3, r2
 800b792:	d812      	bhi.n	800b7ba <gos_taskGetPrivileges+0x7e>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00f      	beq.n	800b7ba <gos_taskGetPrivileges+0x7e>
    		pPrivileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b79a:	88fb      	ldrh	r3, [r7, #6]
 800b79c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b7a0:	60bb      	str	r3, [r7, #8]

        *pPrivileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 800b7a2:	4a1d      	ldr	r2, [pc, #116]	@ (800b818 <gos_taskGetPrivileges+0xdc>)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	216a      	movs	r1, #106	@ 0x6a
 800b7a8:	fb01 f303 	mul.w	r3, r1, r3
 800b7ac:	4413      	add	r3, r2
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	881a      	ldrh	r2, [r3, #0]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 800b7b6:	2355      	movs	r3, #85	@ 0x55
 800b7b8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 800b7ba:	4b14      	ldr	r3, [pc, #80]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d005      	beq.n	800b7ce <gos_taskGetPrivileges+0x92>
 800b7c2:	4b12      	ldr	r3, [pc, #72]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b7cc:	701a      	strb	r2, [r3, #0]
 800b7ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b80c <gos_taskGetPrivileges+0xd0>)
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d108      	bne.n	800b7e8 <gos_taskGetPrivileges+0xac>
 800b7d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b810 <gos_taskGetPrivileges+0xd4>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f383 8810 	msr	PRIMASK, r3
 800b7de:	b662      	cpsie	i
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <gos_taskGetPrivileges+0xd8>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d005      	beq.n	800b7fc <gos_taskGetPrivileges+0xc0>
 800b7f0:	4b08      	ldr	r3, [pc, #32]	@ (800b814 <gos_taskGetPrivileges+0xd8>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	4b06      	ldr	r3, [pc, #24]	@ (800b814 <gos_taskGetPrivileges+0xd8>)
 800b7fa:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	20001963 	.word	0x20001963
 800b810:	20001964 	.word	0x20001964
 800b814:	20001961 	.word	0x20001961
 800b818:	20000404 	.word	0x20000404

0800b81c <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* pTaskId)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 800b824:	23ae      	movs	r3, #174	@ 0xae
 800b826:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b828:	4b26      	ldr	r3, [pc, #152]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d108      	bne.n	800b842 <gos_taskGetCurrentId+0x26>
 800b830:	b672      	cpsid	i
 800b832:	f3ef 8310 	mrs	r3, PRIMASK
 800b836:	4a24      	ldr	r2, [pc, #144]	@ (800b8c8 <gos_taskGetCurrentId+0xac>)
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	4b20      	ldr	r3, [pc, #128]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	3301      	adds	r3, #1
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	4b1f      	ldr	r3, [pc, #124]	@ (800b8cc <gos_taskGetCurrentId+0xb0>)
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	3301      	adds	r3, #1
 800b854:	b2da      	uxtb	r2, r3
 800b856:	4b1d      	ldr	r3, [pc, #116]	@ (800b8cc <gos_taskGetCurrentId+0xb0>)
 800b858:	701a      	strb	r2, [r3, #0]
    if (pTaskId != NULL)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d009      	beq.n	800b874 <gos_taskGetCurrentId+0x58>
    {
        *pTaskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 800b860:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d0 <gos_taskGetCurrentId+0xb4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	b29b      	uxth	r3, r3
 800b866:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 800b870:	2355      	movs	r3, #85	@ 0x55
 800b872:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 800b874:	4b13      	ldr	r3, [pc, #76]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d005      	beq.n	800b888 <gos_taskGetCurrentId+0x6c>
 800b87c:	4b11      	ldr	r3, [pc, #68]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	3b01      	subs	r3, #1
 800b882:	b2da      	uxtb	r2, r3
 800b884:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b886:	701a      	strb	r2, [r3, #0]
 800b888:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c4 <gos_taskGetCurrentId+0xa8>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d108      	bne.n	800b8a2 <gos_taskGetCurrentId+0x86>
 800b890:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c8 <gos_taskGetCurrentId+0xac>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f383 8810 	msr	PRIMASK, r3
 800b898:	b662      	cpsie	i
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8cc <gos_taskGetCurrentId+0xb0>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <gos_taskGetCurrentId+0x9a>
 800b8aa:	4b08      	ldr	r3, [pc, #32]	@ (800b8cc <gos_taskGetCurrentId+0xb0>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	4b06      	ldr	r3, [pc, #24]	@ (800b8cc <gos_taskGetCurrentId+0xb0>)
 800b8b4:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	20001963 	.word	0x20001963
 800b8c8:	20001964 	.word	0x20001964
 800b8cc:	20001961 	.word	0x20001961
 800b8d0:	20001968 	.word	0x20001968

0800b8d4 <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* pTaskData)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	6039      	str	r1, [r7, #0]
 800b8de:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 800b8e0:	23ae      	movs	r3, #174	@ 0xae
 800b8e2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b8e8:	4b33      	ldr	r3, [pc, #204]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d108      	bne.n	800b902 <gos_taskGetData+0x2e>
 800b8f0:	b672      	cpsid	i
 800b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f6:	4a31      	ldr	r2, [pc, #196]	@ (800b9bc <gos_taskGetData+0xe8>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	4b2d      	ldr	r3, [pc, #180]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	4b2b      	ldr	r3, [pc, #172]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b90c:	701a      	strb	r2, [r3, #0]
 800b90e:	4b2c      	ldr	r3, [pc, #176]	@ (800b9c0 <gos_taskGetData+0xec>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	b2da      	uxtb	r2, r3
 800b916:	4b2a      	ldr	r3, [pc, #168]	@ (800b9c0 <gos_taskGetData+0xec>)
 800b918:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b91a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	da23      	bge.n	800b96a <gos_taskGetData+0x96>
 800b922:	88fb      	ldrh	r3, [r7, #6]
 800b924:	f248 020f 	movw	r2, #32783	@ 0x800f
 800b928:	4293      	cmp	r3, r2
 800b92a:	d81e      	bhi.n	800b96a <gos_taskGetData+0x96>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01b      	beq.n	800b96a <gos_taskGetData+0x96>
    	pTaskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b932:	88fb      	ldrh	r3, [r7, #6]
 800b934:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800b938:	60bb      	str	r3, [r7, #8]

        if (taskDescriptors[taskIndex].taskId != GOS_INVALID_TASK_ID)
 800b93a:	4a22      	ldr	r2, [pc, #136]	@ (800b9c4 <gos_taskGetData+0xf0>)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	216a      	movs	r1, #106	@ 0x6a
 800b940:	fb01 f303 	mul.w	r3, r1, r3
 800b944:	4413      	add	r3, r2
 800b946:	332a      	adds	r3, #42	@ 0x2a
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b94e:	d00c      	beq.n	800b96a <gos_taskGetData+0x96>
        {
            (void_t) memcpy((void*)pTaskData, (void*)&taskDescriptors[taskIndex], sizeof(*pTaskData));
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	226a      	movs	r2, #106	@ 0x6a
 800b954:	fb02 f303 	mul.w	r3, r2, r3
 800b958:	4a1a      	ldr	r2, [pc, #104]	@ (800b9c4 <gos_taskGetData+0xf0>)
 800b95a:	4413      	add	r3, r2
 800b95c:	226a      	movs	r2, #106	@ 0x6a
 800b95e:	4619      	mov	r1, r3
 800b960:	6838      	ldr	r0, [r7, #0]
 800b962:	f00b f9b4 	bl	8016cce <memcpy>

            taskGetDataResult = GOS_SUCCESS;
 800b966:	2355      	movs	r3, #85	@ 0x55
 800b968:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 800b96a:	4b13      	ldr	r3, [pc, #76]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d005      	beq.n	800b97e <gos_taskGetData+0xaa>
 800b972:	4b11      	ldr	r3, [pc, #68]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	3b01      	subs	r3, #1
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b8 <gos_taskGetData+0xe4>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d108      	bne.n	800b998 <gos_taskGetData+0xc4>
 800b986:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <gos_taskGetData+0xe8>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f383 8810 	msr	PRIMASK, r3
 800b98e:	b662      	cpsie	i
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	4b09      	ldr	r3, [pc, #36]	@ (800b9c0 <gos_taskGetData+0xec>)
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <gos_taskGetData+0xd8>
 800b9a0:	4b07      	ldr	r3, [pc, #28]	@ (800b9c0 <gos_taskGetData+0xec>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	4b05      	ldr	r3, [pc, #20]	@ (800b9c0 <gos_taskGetData+0xec>)
 800b9aa:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20001963 	.word	0x20001963
 800b9bc:	20001964 	.word	0x20001964
 800b9c0:	20001961 	.word	0x20001961
 800b9c4:	20000404 	.word	0x20000404

0800b9c8 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* pTaskData)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	6039      	str	r1, [r7, #0]
 800b9d2:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 800b9d4:	23ae      	movs	r3, #174	@ 0xae
 800b9d6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b9d8:	4b35      	ldr	r3, [pc, #212]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d108      	bne.n	800b9f2 <gos_taskGetDataByIndex+0x2a>
 800b9e0:	b672      	cpsid	i
 800b9e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9e6:	4a33      	ldr	r2, [pc, #204]	@ (800bab4 <gos_taskGetDataByIndex+0xec>)
 800b9e8:	6013      	str	r3, [r2, #0]
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	4b2f      	ldr	r3, [pc, #188]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800b9fc:	701a      	strb	r2, [r3, #0]
 800b9fe:	4b2e      	ldr	r3, [pc, #184]	@ (800bab8 <gos_taskGetDataByIndex+0xf0>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	4b2c      	ldr	r3, [pc, #176]	@ (800bab8 <gos_taskGetDataByIndex+0xf0>)
 800ba08:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 800ba0a:	88fb      	ldrh	r3, [r7, #6]
 800ba0c:	2b0f      	cmp	r3, #15
 800ba0e:	d828      	bhi.n	800ba62 <gos_taskGetDataByIndex+0x9a>
    	taskDescriptors[taskIndex].taskId != GOS_INVALID_TASK_ID &&
 800ba10:	88fb      	ldrh	r3, [r7, #6]
 800ba12:	4a2a      	ldr	r2, [pc, #168]	@ (800babc <gos_taskGetDataByIndex+0xf4>)
 800ba14:	216a      	movs	r1, #106	@ 0x6a
 800ba16:	fb01 f303 	mul.w	r3, r1, r3
 800ba1a:	4413      	add	r3, r2
 800ba1c:	332a      	adds	r3, #42	@ 0x2a
 800ba1e:	881b      	ldrh	r3, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 800ba20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba24:	d01d      	beq.n	800ba62 <gos_taskGetDataByIndex+0x9a>
    	taskDescriptors[taskIndex].taskId != GOS_INVALID_TASK_ID &&
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01a      	beq.n	800ba62 <gos_taskGetDataByIndex+0x9a>
    	pTaskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 800ba2c:	4b24      	ldr	r3, [pc, #144]	@ (800bac0 <gos_taskGetDataByIndex+0xf8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a22      	ldr	r2, [pc, #136]	@ (800babc <gos_taskGetDataByIndex+0xf4>)
 800ba32:	216a      	movs	r1, #106	@ 0x6a
 800ba34:	fb01 f303 	mul.w	r3, r1, r3
 800ba38:	4413      	add	r3, r2
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    	pTaskData != NULL &&
 800ba42:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800ba46:	d10c      	bne.n	800ba62 <gos_taskGetDataByIndex+0x9a>
    {
        (void_t) memcpy((void*)pTaskData, (void*)&taskDescriptors[taskIndex], sizeof(*pTaskData));
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	226a      	movs	r2, #106	@ 0x6a
 800ba4c:	fb02 f303 	mul.w	r3, r2, r3
 800ba50:	4a1a      	ldr	r2, [pc, #104]	@ (800babc <gos_taskGetDataByIndex+0xf4>)
 800ba52:	4413      	add	r3, r2
 800ba54:	226a      	movs	r2, #106	@ 0x6a
 800ba56:	4619      	mov	r1, r3
 800ba58:	6838      	ldr	r0, [r7, #0]
 800ba5a:	f00b f938 	bl	8016cce <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 800ba5e:	2355      	movs	r3, #85	@ 0x55
 800ba60:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 800ba62:	4b13      	ldr	r3, [pc, #76]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <gos_taskGetDataByIndex+0xae>
 800ba6a:	4b11      	ldr	r3, [pc, #68]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	b2da      	uxtb	r2, r3
 800ba72:	4b0f      	ldr	r3, [pc, #60]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	4b0e      	ldr	r3, [pc, #56]	@ (800bab0 <gos_taskGetDataByIndex+0xe8>)
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d108      	bne.n	800ba90 <gos_taskGetDataByIndex+0xc8>
 800ba7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bab4 <gos_taskGetDataByIndex+0xec>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f383 8810 	msr	PRIMASK, r3
 800ba86:	b662      	cpsie	i
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	4b09      	ldr	r3, [pc, #36]	@ (800bab8 <gos_taskGetDataByIndex+0xf0>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <gos_taskGetDataByIndex+0xdc>
 800ba98:	4b07      	ldr	r3, [pc, #28]	@ (800bab8 <gos_taskGetDataByIndex+0xf0>)
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	4b05      	ldr	r3, [pc, #20]	@ (800bab8 <gos_taskGetDataByIndex+0xf0>)
 800baa2:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	20001963 	.word	0x20001963
 800bab4:	20001964 	.word	0x20001964
 800bab8:	20001961 	.word	0x20001961
 800babc:	20000404 	.word	0x20000404
 800bac0:	20001968 	.word	0x20001968

0800bac4 <gos_taskCheckDescriptor>:
 *                       - Stack size is smaller than the minimum allowed
 *                       - Stack size is greater than the maximum allowed
 *                       - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_ERROR;
 800bacc:	23ae      	movs	r3, #174	@ 0xae
 800bace:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction != NULL                     &&
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d022      	beq.n	800bb1e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPrivilegeLevel != 0                  &&
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	891b      	ldrh	r3, [r3, #8]
 800badc:	b29b      	uxth	r3, r3
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01d      	beq.n	800bb1e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
        taskDescriptor->taskFunction != gos_idleTask             &&
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority <= GOS_TASK_MAX_PRIO_LEVELS &&
 800bae6:	4a11      	ldr	r2, [pc, #68]	@ (800bb2c <gos_taskCheckDescriptor+0x68>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d018      	beq.n	800bb1e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800baf2:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction != gos_idleTask             &&
 800baf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800baf8:	d811      	bhi.n	800bb1e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb00:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize <= CFG_TASK_MAX_STACK_SIZE &&
 800bb02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb06:	d30a      	bcc.n	800bb1e <gos_taskCheckDescriptor+0x5a>
        taskDescriptor->taskStackSize % 4 == 0u)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	f003 0303 	and.w	r3, r3, #3
 800bb14:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize >= CFG_TASK_MIN_STACK_SIZE  &&
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_SUCCESS;
 800bb1a:	2355      	movs	r3, #85	@ 0x55
 800bb1c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	0800bb31 	.word	0x0800bb31

0800bb30 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 800bb36:	2155      	movs	r1, #85	@ 0x55
 800bb38:	480c      	ldr	r0, [pc, #48]	@ (800bb6c <gos_idleTask+0x3c>)
 800bb3a:	f000 f9c9 	bl	800bed0 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 800bb3e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb70 <gos_idleTask+0x40>)
 800bb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb42:	3301      	adds	r3, #1
 800bb44:	4a0a      	ldr	r2, [pc, #40]	@ (800bb70 <gos_idleTask+0x40>)
 800bb46:	6413      	str	r3, [r2, #64]	@ 0x40

        if (kernelIdleHookFunction != NULL)
 800bb48:	4b0a      	ldr	r3, [pc, #40]	@ (800bb74 <gos_idleTask+0x44>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 800bb50:	4b08      	ldr	r3, [pc, #32]	@ (800bb74 <gos_idleTask+0x44>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 800bb56:	2049      	movs	r0, #73	@ 0x49
 800bb58:	f7fd faf6 	bl	8009148 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 800bb5c:	2355      	movs	r3, #85	@ 0x55
 800bb5e:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800bb60:	2009      	movs	r0, #9
 800bb62:	f7fd ffff 	bl	8009b64 <gos_kernelReschedule>
    return taskYieldResult;
 800bb66:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 800bb68:	e7e9      	b.n	800bb3e <gos_idleTask+0xe>
 800bb6a:	bf00      	nop
 800bb6c:	08019430 	.word	0x08019430
 800bb70:	20000404 	.word	0x20000404
 800bb74:	20001994 	.word	0x20001994

0800bb78 <main>:

/*
 * Main
 */
int main (void_t)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800bb7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf4 <main+0x7c>)
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	3301      	adds	r3, #1
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf4 <main+0x7c>)
 800bb88:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 800bb8a:	f007 ffb7 	bl	8013afc <gos_platformDriverInit>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 800bb92:	f000 f8cb 	bl	800bd2c <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 800bb96:	79fb      	ldrb	r3, [r7, #7]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4817      	ldr	r0, [pc, #92]	@ (800bbf8 <main+0x80>)
 800bb9c:	f000 f998 	bl	800bed0 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 800bba0:	f7fd f8f0 	bl	8008d84 <gos_kernelInit>
 800bba4:	4603      	mov	r3, r0
 800bba6:	4619      	mov	r1, r3
 800bba8:	4814      	ldr	r0, [pc, #80]	@ (800bbfc <main+0x84>)
 800bbaa:	f000 f991 	bl	800bed0 <gos_errorTraceInit>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b55      	cmp	r3, #85	@ 0x55
 800bbb2:	d109      	bne.n	800bbc8 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 800bbb4:	4912      	ldr	r1, [pc, #72]	@ (800bc00 <main+0x88>)
 800bbb6:	4813      	ldr	r0, [pc, #76]	@ (800bc04 <main+0x8c>)
 800bbb8:	f7fe fa8a 	bl	800a0d0 <gos_taskRegister>
 800bbbc:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 800bbbe:	2b55      	cmp	r3, #85	@ 0x55
 800bbc0:	d102      	bne.n	800bbc8 <main+0x50>
    {
        initError = GOS_FALSE;
 800bbc2:	4b11      	ldr	r3, [pc, #68]	@ (800bc08 <main+0x90>)
 800bbc4:	2249      	movs	r2, #73	@ 0x49
 800bbc6:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 800bbc8:	f000 f826 	bl	800bc18 <gos_Start>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2bae      	cmp	r3, #174	@ 0xae
 800bbd0:	d106      	bne.n	800bbe0 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 800bbd2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc0c <main+0x94>)
 800bbd4:	22c2      	movs	r2, #194	@ 0xc2
 800bbd6:	490e      	ldr	r1, [pc, #56]	@ (800bc10 <main+0x98>)
 800bbd8:	2034      	movs	r0, #52	@ 0x34
 800bbda:	f000 f8e1 	bl	800bda0 <gos_errorHandler>
 800bbde:	e006      	b.n	800bbee <main+0x76>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 800bbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800bc14 <main+0x9c>)
 800bbe2:	22c6      	movs	r2, #198	@ 0xc6
 800bbe4:	490a      	ldr	r1, [pc, #40]	@ (800bc10 <main+0x98>)
 800bbe6:	2034      	movs	r0, #52	@ 0x34
 800bbe8:	f000 f8da 	bl	800bda0 <gos_errorHandler>
    }

    for (;;);
 800bbec:	bf00      	nop
 800bbee:	bf00      	nop
 800bbf0:	e7fd      	b.n	800bbee <main+0x76>
 800bbf2:	bf00      	nop
 800bbf4:	20001961 	.word	0x20001961
 800bbf8:	08019440 	.word	0x08019440
 800bbfc:	08019460 	.word	0x08019460
 800bc00:	2000199a 	.word	0x2000199a
 800bc04:	20000ba0 	.word	0x20000ba0
 800bc08:	20001998 	.word	0x20001998
 800bc0c:	08019478 	.word	0x08019478
 800bc10:	0801a760 	.word	0x0801a760
 800bc14:	08019498 	.word	0x08019498

0800bc18 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 800bc1e:	23b1      	movs	r3, #177	@ 0xb1
 800bc20:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 800bc22:	4b06      	ldr	r3, [pc, #24]	@ (800bc3c <gos_Start+0x24>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	2b49      	cmp	r3, #73	@ 0x49
 800bc28:	d103      	bne.n	800bc32 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 800bc2a:	f7fd f997 	bl	8008f5c <gos_kernelStart>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 800bc32:	79fb      	ldrb	r3, [r7, #7]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	20001998 	.word	0x20001998

0800bc40 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 800bc40:	b590      	push	{r4, r7, lr}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 800bc46:	2355      	movs	r3, #85	@ 0x55
 800bc48:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800bc4e:	4b31      	ldr	r3, [pc, #196]	@ (800bd14 <gos_systemTask+0xd4>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	3301      	adds	r3, #1
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	4b2f      	ldr	r3, [pc, #188]	@ (800bd14 <gos_systemTask+0xd4>)
 800bc58:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	71bb      	strb	r3, [r7, #6]
 800bc5e:	e020      	b.n	800bca2 <gos_systemTask+0x62>
    {
    	GOS_CONCAT_RESULT(sysInitResult, gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc()));
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	2b55      	cmp	r3, #85	@ 0x55
 800bc64:	d118      	bne.n	800bc98 <gos_systemTask+0x58>
 800bc66:	79ba      	ldrb	r2, [r7, #6]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4a29      	ldr	r2, [pc, #164]	@ (800bd18 <gos_systemTask+0xd8>)
 800bc72:	189c      	adds	r4, r3, r2
 800bc74:	79ba      	ldrb	r2, [r7, #6]
 800bc76:	4928      	ldr	r1, [pc, #160]	@ (800bd18 <gos_systemTask+0xd8>)
 800bc78:	4613      	mov	r3, r2
 800bc7a:	00db      	lsls	r3, r3, #3
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	440b      	add	r3, r1
 800bc82:	3320      	adds	r3, #32
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4798      	blx	r3
 800bc88:	4603      	mov	r3, r0
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f000 f91f 	bl	800bed0 <gos_errorTraceInit>
 800bc92:	4603      	mov	r3, r0
 800bc94:	71fb      	strb	r3, [r7, #7]
 800bc96:	e001      	b.n	800bc9c <gos_systemTask+0x5c>
 800bc98:	23ae      	movs	r3, #174	@ 0xae
 800bc9a:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800bc9c:	79bb      	ldrb	r3, [r7, #6]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	71bb      	strb	r3, [r7, #6]
 800bca2:	79bb      	ldrb	r3, [r7, #6]
 800bca4:	2b06      	cmp	r3, #6
 800bca6:	d9db      	bls.n	800bc60 <gos_systemTask+0x20>
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	481b      	ldr	r0, [pc, #108]	@ (800bd1c <gos_systemTask+0xdc>)
 800bcae:	f000 f90f 	bl	800bed0 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 800bcb2:	4b18      	ldr	r3, [pc, #96]	@ (800bd14 <gos_systemTask+0xd4>)
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d005      	beq.n	800bcc6 <gos_systemTask+0x86>
 800bcba:	4b16      	ldr	r3, [pc, #88]	@ (800bd14 <gos_systemTask+0xd4>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	4b14      	ldr	r3, [pc, #80]	@ (800bd14 <gos_systemTask+0xd4>)
 800bcc4:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 800bcc6:	4b16      	ldr	r3, [pc, #88]	@ (800bd20 <gos_systemTask+0xe0>)
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	21c3      	movs	r1, #195	@ 0xc3
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fa9d 	bl	800b20c <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 800bcd2:	4b13      	ldr	r3, [pc, #76]	@ (800bd20 <gos_systemTask+0xe0>)
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	21c3      	movs	r1, #195	@ 0xc3
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff f9d3 	bl	800b084 <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 800bcde:	2036      	movs	r0, #54	@ 0x36
 800bce0:	f7fd fa32 	bl	8009148 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 800bce4:	4b0f      	ldr	r3, [pc, #60]	@ (800bd24 <gos_systemTask+0xe4>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b36      	cmp	r3, #54	@ 0x36
 800bcea:	d10e      	bne.n	800bd0a <gos_systemTask+0xca>
        {
            gos_kernelDump();
 800bcec:	f7fd fb90 	bl	8009410 <gos_kernelDump>
            gos_queueDump();
 800bcf0:	f001 fa90 	bl	800d214 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 800bcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd28 <gos_systemTask+0xe8>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 fb82 	bl	800d404 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 800bd00:	4b08      	ldr	r3, [pc, #32]	@ (800bd24 <gos_systemTask+0xe4>)
 800bd02:	2249      	movs	r2, #73	@ 0x49
 800bd04:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 800bd06:	f001 fae9 	bl	800d2dc <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 800bd0a:	2064      	movs	r0, #100	@ 0x64
 800bd0c:	f7fe fb72 	bl	800a3f4 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 800bd10:	e7e5      	b.n	800bcde <gos_systemTask+0x9e>
 800bd12:	bf00      	nop
 800bd14:	20001961 	.word	0x20001961
 800bd18:	20000aa4 	.word	0x20000aa4
 800bd1c:	080194c4 	.word	0x080194c4
 800bd20:	2000199a 	.word	0x2000199a
 800bd24:	20001999 	.word	0x20001999
 800bd28:	20001960 	.word	0x20001960

0800bd2c <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 800bd30:	4811      	ldr	r0, [pc, #68]	@ (800bd78 <gos_printStartupLogo+0x4c>)
 800bd32:	f002 fa47 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 800bd36:	4811      	ldr	r0, [pc, #68]	@ (800bd7c <gos_printStartupLogo+0x50>)
 800bd38:	f002 fa44 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 800bd3c:	4810      	ldr	r0, [pc, #64]	@ (800bd80 <gos_printStartupLogo+0x54>)
 800bd3e:	f002 fa41 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 800bd42:	4810      	ldr	r0, [pc, #64]	@ (800bd84 <gos_printStartupLogo+0x58>)
 800bd44:	f002 fa3e 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 800bd48:	480f      	ldr	r0, [pc, #60]	@ (800bd88 <gos_printStartupLogo+0x5c>)
 800bd4a:	f002 fa3b 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 800bd4e:	480f      	ldr	r0, [pc, #60]	@ (800bd8c <gos_printStartupLogo+0x60>)
 800bd50:	f002 fa38 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 800bd54:	480e      	ldr	r0, [pc, #56]	@ (800bd90 <gos_printStartupLogo+0x64>)
 800bd56:	f002 fa35 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 800bd5a:	4809      	ldr	r0, [pc, #36]	@ (800bd80 <gos_printStartupLogo+0x54>)
 800bd5c:	f002 fa32 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 800bd60:	480c      	ldr	r0, [pc, #48]	@ (800bd94 <gos_printStartupLogo+0x68>)
 800bd62:	f002 fa2f 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2025                        \r\n\r\n");
 800bd66:	480c      	ldr	r0, [pc, #48]	@ (800bd98 <gos_printStartupLogo+0x6c>)
 800bd68:	f002 fa2c 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 800bd6c:	480b      	ldr	r0, [pc, #44]	@ (800bd9c <gos_printStartupLogo+0x70>)
 800bd6e:	f002 fa29 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
}
 800bd72:	bf00      	nop
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	080194dc 	.word	0x080194dc
 800bd7c:	0801952c 	.word	0x0801952c
 800bd80:	0801957c 	.word	0x0801957c
 800bd84:	080195cc 	.word	0x080195cc
 800bd88:	0801961c 	.word	0x0801961c
 800bd8c:	0801966c 	.word	0x0801966c
 800bd90:	080196bc 	.word	0x080196bc
 800bd94:	0801970c 	.word	0x0801970c
 800bd98:	0801975c 	.word	0x0801975c
 800bd9c:	080197ac 	.word	0x080197ac

0800bda0 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 800bda0:	b408      	push	{r3}
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b087      	sub	sp, #28
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	4603      	mov	r3, r0
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 800bdb0:	483a      	ldr	r0, [pc, #232]	@ (800be9c <gos_errorHandler+0xfc>)
 800bdb2:	f002 fa07 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
 800bdb8:	2b34      	cmp	r3, #52	@ 0x34
 800bdba:	d103      	bne.n	800bdc4 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800bdbc:	4838      	ldr	r0, [pc, #224]	@ (800bea0 <gos_errorHandler+0x100>)
 800bdbe:	f002 fa01 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
 800bdc2:	e013      	b.n	800bdec <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdc8:	d103      	bne.n	800bdd2 <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800bdca:	4836      	ldr	r0, [pc, #216]	@ (800bea4 <gos_errorHandler+0x104>)
 800bdcc:	f002 f9fa 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
 800bdd0:	e00c      	b.n	800bdec <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	2b1a      	cmp	r3, #26
 800bdd6:	d103      	bne.n	800bde0 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800bdd8:	4833      	ldr	r0, [pc, #204]	@ (800bea8 <gos_errorHandler+0x108>)
 800bdda:	f002 f9f3 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
 800bdde:	e005      	b.n	800bdec <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	2b3a      	cmp	r3, #58	@ 0x3a
 800bde4:	d102      	bne.n	800bdec <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800bde6:	4831      	ldr	r0, [pc, #196]	@ (800beac <gos_errorHandler+0x10c>)
 800bde8:	f002 f9ec 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d005      	beq.n	800bdfe <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	68b9      	ldr	r1, [r7, #8]
 800bdf6:	482e      	ldr	r0, [pc, #184]	@ (800beb0 <gos_errorHandler+0x110>)
 800bdf8:	f002 f9e4 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
 800bdfc:	e006      	b.n	800be0c <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d003      	beq.n	800be0c <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 800be04:	6879      	ldr	r1, [r7, #4]
 800be06:	482b      	ldr	r0, [pc, #172]	@ (800beb4 <gos_errorHandler+0x114>)
 800be08:	f002 f9dc 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 800be0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00b      	beq.n	800be2a <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 800be12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800be16:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be1c:	4826      	ldr	r0, [pc, #152]	@ (800beb8 <gos_errorHandler+0x118>)
 800be1e:	f00a feb5 	bl	8016b8c <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 800be22:	4925      	ldr	r1, [pc, #148]	@ (800beb8 <gos_errorHandler+0x118>)
 800be24:	4825      	ldr	r0, [pc, #148]	@ (800bebc <gos_errorHandler+0x11c>)
 800be26:	f002 f9cd 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 800be2a:	4825      	ldr	r0, [pc, #148]	@ (800bec0 <gos_errorHandler+0x120>)
 800be2c:	f002 f9ca 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	2b34      	cmp	r3, #52	@ 0x34
 800be34:	d002      	beq.n	800be3c <gos_errorHandler+0x9c>
 800be36:	7bfb      	ldrb	r3, [r7, #15]
 800be38:	2b1a      	cmp	r3, #26
 800be3a:	d127      	bne.n	800be8c <gos_errorHandler+0xec>
    {
        GOS_DISABLE_SCHED
 800be3c:	4b21      	ldr	r3, [pc, #132]	@ (800bec4 <gos_errorHandler+0x124>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	b2da      	uxtb	r2, r3
 800be44:	4b1f      	ldr	r3, [pc, #124]	@ (800bec4 <gos_errorHandler+0x124>)
 800be46:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 800be48:	4b1f      	ldr	r3, [pc, #124]	@ (800bec8 <gos_errorHandler+0x128>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d108      	bne.n	800be62 <gos_errorHandler+0xc2>
 800be50:	b672      	cpsid	i
 800be52:	f3ef 8310 	mrs	r3, PRIMASK
 800be56:	4a1d      	ldr	r2, [pc, #116]	@ (800becc <gos_errorHandler+0x12c>)
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	4b19      	ldr	r3, [pc, #100]	@ (800bec8 <gos_errorHandler+0x128>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	4b17      	ldr	r3, [pc, #92]	@ (800bec8 <gos_errorHandler+0x128>)
 800be6c:	701a      	strb	r2, [r3, #0]
 800be6e:	4b15      	ldr	r3, [pc, #84]	@ (800bec4 <gos_errorHandler+0x124>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	3301      	adds	r3, #1
 800be74:	b2da      	uxtb	r2, r3
 800be76:	4b13      	ldr	r3, [pc, #76]	@ (800bec4 <gos_errorHandler+0x124>)
 800be78:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 800be7a:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 800be7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800be80:	f7fd f946 	bl	8009110 <gos_kernelDelayMs>
            gos_kernelReset();
 800be84:	f7fd f91e 	bl	80090c4 <gos_kernelReset>
            GOS_NOP;
 800be88:	bf00      	nop
 800be8a:	e7f6      	b.n	800be7a <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 800be8c:	bf00      	nop
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be96:	b001      	add	sp, #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	080197fc 	.word	0x080197fc
 800bea0:	08019850 	.word	0x08019850
 800bea4:	0801987c 	.word	0x0801987c
 800bea8:	0801989c 	.word	0x0801989c
 800beac:	080198cc 	.word	0x080198cc
 800beb0:	080198ec 	.word	0x080198ec
 800beb4:	08019910 	.word	0x08019910
 800beb8:	2000199c 	.word	0x2000199c
 800bebc:	0801993c 	.word	0x0801993c
 800bec0:	08019944 	.word	0x08019944
 800bec4:	20001961 	.word	0x20001961
 800bec8:	20001963 	.word	0x20001963
 800becc:	20001964 	.word	0x20001964

0800bed0 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 800bedc:	f7fd f8d4 	bl	8009088 <gos_kernelGetSysTicks>
 800bee0:	4604      	mov	r4, r0
 800bee2:	1cfb      	adds	r3, r7, #3
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 f80d 	bl	800bf04 <gos_traceResultToString>
 800beea:	4603      	mov	r3, r0
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	4621      	mov	r1, r4
 800bef0:	4803      	ldr	r0, [pc, #12]	@ (800bf00 <gos_errorTraceInit+0x30>)
 800bef2:	f002 f967 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 800bef6:	78fb      	ldrb	r3, [r7, #3]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}
 800bf00:	08019994 	.word	0x08019994

0800bf04 <gos_traceResultToString>:
 * @param[out] pResult Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b55      	cmp	r3, #85	@ 0x55
 800bf12:	d002      	beq.n	800bf1a <gos_traceResultToString+0x16>
 800bf14:	2bae      	cmp	r3, #174	@ 0xae
 800bf16:	d002      	beq.n	800bf1e <gos_traceResultToString+0x1a>
 800bf18:	e003      	b.n	800bf22 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 800bf1a:	4b05      	ldr	r3, [pc, #20]	@ (800bf30 <gos_traceResultToString+0x2c>)
 800bf1c:	e002      	b.n	800bf24 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 800bf1e:	4b05      	ldr	r3, [pc, #20]	@ (800bf34 <gos_traceResultToString+0x30>)
 800bf20:	e000      	b.n	800bf24 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 800bf22:	4b05      	ldr	r3, [pc, #20]	@ (800bf38 <gos_traceResultToString+0x34>)
        }
    }
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	080199b0 	.word	0x080199b0
 800bf34:	080199c4 	.word	0x080199c4
 800bf38:	080199d8 	.word	0x080199d8

0800bf3c <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 800bf42:	2355      	movs	r3, #85	@ 0x55
 800bf44:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 800bf46:	2300      	movs	r3, #0
 800bf48:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	80bb      	strh	r3, [r7, #4]
 800bf4e:	e020      	b.n	800bf92 <gos_gcpInit+0x56>
    {
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpRxMutexes[mutexIdx]));
 800bf50:	79fb      	ldrb	r3, [r7, #7]
 800bf52:	2b55      	cmp	r3, #85	@ 0x55
 800bf54:	d109      	bne.n	800bf6a <gos_gcpInit+0x2e>
 800bf56:	88bb      	ldrh	r3, [r7, #4]
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4a12      	ldr	r2, [pc, #72]	@ (800bfa4 <gos_gcpInit+0x68>)
 800bf5c:	4413      	add	r3, r2
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 fd6e 	bl	800ca40 <gos_mutexInit>
 800bf64:	4603      	mov	r3, r0
 800bf66:	71fb      	strb	r3, [r7, #7]
 800bf68:	e001      	b.n	800bf6e <gos_gcpInit+0x32>
 800bf6a:	23ae      	movs	r3, #174	@ 0xae
 800bf6c:	71fb      	strb	r3, [r7, #7]
        GOS_CONCAT_RESULT(gcpInitResult, gos_mutexInit(&gcpTxMutexes[mutexIdx]));
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
 800bf70:	2b55      	cmp	r3, #85	@ 0x55
 800bf72:	d109      	bne.n	800bf88 <gos_gcpInit+0x4c>
 800bf74:	88bb      	ldrh	r3, [r7, #4]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4a0b      	ldr	r2, [pc, #44]	@ (800bfa8 <gos_gcpInit+0x6c>)
 800bf7a:	4413      	add	r3, r2
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 fd5f 	bl	800ca40 <gos_mutexInit>
 800bf82:	4603      	mov	r3, r0
 800bf84:	71fb      	strb	r3, [r7, #7]
 800bf86:	e001      	b.n	800bf8c <gos_gcpInit+0x50>
 800bf88:	23ae      	movs	r3, #174	@ 0xae
 800bf8a:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 800bf8c:	88bb      	ldrh	r3, [r7, #4]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	80bb      	strh	r3, [r7, #4]
 800bf92:	88bb      	ldrh	r3, [r7, #4]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d9db      	bls.n	800bf50 <gos_gcpInit+0x14>
    }

    return gcpInitResult;
 800bf98:	79fb      	ldrb	r3, [r7, #7]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	200019fc 	.word	0x200019fc
 800bfa8:	20001a04 	.word	0x20001a04

0800bfac <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 800bfba:	23ae      	movs	r3, #174	@ 0xae
 800bfbc:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d812      	bhi.n	800bfea <gos_gcpRegisterPhysicalDriver+0x3e>
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00f      	beq.n	800bfea <gos_gcpRegisterPhysicalDriver+0x3e>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00c      	beq.n	800bfea <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	4a09      	ldr	r2, [pc, #36]	@ (800bff8 <gos_gcpRegisterPhysicalDriver+0x4c>)
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	4413      	add	r3, r2
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	4906      	ldr	r1, [pc, #24]	@ (800bff8 <gos_gcpRegisterPhysicalDriver+0x4c>)
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 800bfe6:	2355      	movs	r3, #85	@ 0x55
 800bfe8:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	371c      	adds	r7, #28
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	200019ec 	.word	0x200019ec

0800bffc <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b092      	sub	sp, #72	@ 0x48
 800c000:	af00      	add	r7, sp, #0
 800c002:	60ba      	str	r2, [r7, #8]
 800c004:	461a      	mov	r2, r3
 800c006:	4603      	mov	r3, r0
 800c008:	73fb      	strb	r3, [r7, #15]
 800c00a:	460b      	mov	r3, r1
 800c00c:	81bb      	strh	r3, [r7, #12]
 800c00e:	4613      	mov	r3, r2
 800c010:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 800c012:	23ae      	movs	r3, #174	@ 0xae
 800c014:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4a8e      	ldr	r2, [pc, #568]	@ (800c258 <gos_gcpTransmitMessage+0x25c>)
 800c01e:	4413      	add	r3, r2
 800c020:	f04f 31ff 	mov.w	r1, #4294967295
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fd25 	bl	800ca74 <gos_mutexLock>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b55      	cmp	r3, #85	@ 0x55
 800c02e:	f040 8105 	bne.w	800c23c <gos_gcpTransmitMessage+0x240>
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800c038:	89bb      	ldrh	r3, [r7, #12]
 800c03a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	643b      	str	r3, [r7, #64]	@ 0x40
 800c042:	88fb      	ldrh	r3, [r7, #6]
 800c044:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c046:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800c04a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 800c04c:	23ae      	movs	r3, #174	@ 0xae
 800c04e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 800c052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	605a      	str	r2, [r3, #4]
 800c05c:	609a      	str	r2, [r3, #8]
 800c05e:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 800c060:	f107 0314 	add.w	r3, r7, #20
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	605a      	str	r2, [r3, #4]
 800c06a:	609a      	str	r2, [r3, #8]
 800c06c:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 800c06e:	2300      	movs	r3, #0
 800c070:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 800c072:	2300      	movs	r3, #0
 800c074:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    u8_t                 chunkIndex            = 0u;
 800c078:	2300      	movs	r3, #0
 800c07a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    u16_t                tempSize              = 0u;
 800c07e:	2300      	movs	r3, #0
 800c080:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 800c082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d107      	bne.n	800c098 <gos_gcpTransmitMessage+0x9c>
 800c088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 80d2 	bne.w	800c234 <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 800c090:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c092:	2b00      	cmp	r3, #0
 800c094:	f040 80ce 	bne.w	800c234 <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 800c098:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	f200 80c9 	bhi.w	800c234 <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 800c0a2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0a6:	4a6d      	ldr	r2, [pc, #436]	@ (800c25c <gos_gcpTransmitMessage+0x260>)
 800c0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 80c1 	beq.w	800c234 <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 800c0c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c0c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
        requestHeaderFrame.messageId     = messageId;
 800c0c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c0cc:	853b      	strh	r3, [r7, #40]	@ 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 800c0ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c0d4:	f002 fa80 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 800c0dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0e0:	210c      	movs	r1, #12
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f002 fa78 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 800c0ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c0f0:	4a5a      	ldr	r2, [pc, #360]	@ (800c25c <gos_gcpTransmitMessage+0x260>)
 800c0f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800c0fa:	2110      	movs	r1, #16
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	4798      	blx	r3
 800c100:	4603      	mov	r3, r0
 800c102:	2b55      	cmp	r3, #85	@ 0x55
 800c104:	f040 8096 	bne.w	800c234 <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 800c108:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d120      	bne.n	800c150 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c10e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c112:	4a52      	ldr	r2, [pc, #328]	@ (800c25c <gos_gcpTransmitMessage+0x260>)
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	4413      	add	r3, r2
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f107 0214 	add.w	r2, r7, #20
 800c11e:	2110      	movs	r1, #16
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
 800c124:	4603      	mov	r3, r0
 800c126:	2b55      	cmp	r3, #85	@ 0x55
 800c128:	f040 8084 	bne.w	800c234 <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c12c:	f107 0213 	add.w	r2, r7, #19
 800c130:	f107 0314 	add.w	r3, r7, #20
 800c134:	4611      	mov	r1, r2
 800c136:	4618      	mov	r0, r3
 800c138:	f000 f9e0 	bl	800c4fc <gos_gcpValidateHeader>
 800c13c:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c13e:	2b55      	cmp	r3, #85	@ 0x55
 800c140:	d178      	bne.n	800c234 <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 800c142:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c144:	2b01      	cmp	r3, #1
 800c146:	d175      	bne.n	800c234 <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 800c148:	2355      	movs	r3, #85	@ 0x55
 800c14a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800c14e:	e071      	b.n	800c234 <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 800c150:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800c152:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c154:	fbb2 f3f3 	udiv	r3, r2, r3
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 800c15e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c160:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800c162:	fbb3 f1f2 	udiv	r1, r3, r2
 800c166:	fb01 f202 	mul.w	r2, r1, r2
 800c16a:	1a9b      	subs	r3, r3, r2
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 800c172:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800c176:	3301      	adds	r3, #1
 800c178:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c17c:	2300      	movs	r3, #0
 800c17e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c182:	e051      	b.n	800c228 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 800c184:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c188:	3301      	adds	r3, #1
 800c18a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800c18c:	fb02 f303 	mul.w	r3, r2, r3
 800c190:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800c192:	4293      	cmp	r3, r2
 800c194:	dd0a      	ble.n	800c1ac <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 800c196:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800c198:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800c1a0:	fb11 f303 	smulbb	r3, r1, r3
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c1aa:	e001      	b.n	800c1b0 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 800c1ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c1ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 800c1b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c1b4:	4a29      	ldr	r2, [pc, #164]	@ (800c25c <gos_gcpTransmitMessage+0x260>)
 800c1b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c1ba:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800c1be:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800c1c0:	fb01 f202 	mul.w	r2, r1, r2
 800c1c4:	4611      	mov	r1, r2
 800c1c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1c8:	440a      	add	r2, r1
 800c1ca:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4798      	blx	r3
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b55      	cmp	r3, #85	@ 0x55
 800c1d4:	d124      	bne.n	800c220 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c1d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c1da:	4a20      	ldr	r2, [pc, #128]	@ (800c25c <gos_gcpTransmitMessage+0x260>)
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	4413      	add	r3, r2
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f107 0214 	add.w	r2, r7, #20
 800c1e6:	2110      	movs	r1, #16
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4798      	blx	r3
 800c1ec:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 800c1ee:	2b55      	cmp	r3, #85	@ 0x55
 800c1f0:	d116      	bne.n	800c220 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c1f2:	f107 0213 	add.w	r2, r7, #19
 800c1f6:	f107 0314 	add.w	r3, r7, #20
 800c1fa:	4611      	mov	r1, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 f97d 	bl	800c4fc <gos_gcpValidateHeader>
 800c202:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c204:	2b55      	cmp	r3, #85	@ 0x55
 800c206:	d10b      	bne.n	800c220 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 800c208:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d108      	bne.n	800c220 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 800c20e:	2355      	movs	r3, #85	@ 0x55
 800c210:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c214:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800c218:	3301      	adds	r3, #1
 800c21a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800c21e:	e003      	b.n	800c228 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 800c220:	23ae      	movs	r3, #174	@ 0xae
 800c222:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            			break;
 800c226:	e005      	b.n	800c234 <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c228:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800c22c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800c230:	429a      	cmp	r2, r3
 800c232:	d3a7      	bcc.n	800c184 <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 800c234:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 800c238:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4a05      	ldr	r2, [pc, #20]	@ (800c258 <gos_gcpTransmitMessage+0x25c>)
 800c242:	4413      	add	r3, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f000 fd1b 	bl	800cc80 <gos_mutexUnlock>
    return transmitMessageResult;
 800c24a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3748      	adds	r7, #72	@ 0x48
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	20001a04 	.word	0x20001a04
 800c25c:	200019ec 	.word	0x200019ec

0800c260 <gos_gcpReceiveMessage>:
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b094      	sub	sp, #80	@ 0x50
 800c264:	af00      	add	r7, sp, #0
 800c266:	60b9      	str	r1, [r7, #8]
 800c268:	607a      	str	r2, [r7, #4]
 800c26a:	461a      	mov	r2, r3
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
 800c270:	4613      	mov	r3, r2
 800c272:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 800c274:	23ae      	movs	r3, #174	@ 0xae
 800c276:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4a9d      	ldr	r2, [pc, #628]	@ (800c4f4 <gos_gcpReceiveMessage+0x294>)
 800c280:	4413      	add	r3, r2
 800c282:	f04f 31ff 	mov.w	r1, #4294967295
 800c286:	4618      	mov	r0, r3
 800c288:	f000 fbf4 	bl	800ca74 <gos_mutexLock>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b55      	cmp	r3, #85	@ 0x55
 800c290:	f040 8123 	bne.w	800c4da <gos_gcpReceiveMessage+0x27a>
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2a2:	89bb      	ldrh	r3, [r7, #12]
 800c2a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c2a8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800c2ac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 800c2b0:	23ae      	movs	r3, #174	@ 0xae
 800c2b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 800c2b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	605a      	str	r2, [r3, #4]
 800c2c0:	609a      	str	r2, [r3, #8]
 800c2c2:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 800c2c4:	f107 0318 	add.w	r3, r7, #24
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]
 800c2cc:	605a      	str	r2, [r3, #4]
 800c2ce:	609a      	str	r2, [r3, #8]
 800c2d0:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    u8_t                 chunkIndex            = 0u;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    u16_t                tempSize              = 0u;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 800c2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 80f2 	beq.w	800c4d2 <gos_gcpReceiveMessage+0x272>
 800c2ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80ee 	beq.w	800c4d2 <gos_gcpReceiveMessage+0x272>
        pPayloadTarget                               != NULL                        &&
 800c2f6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	f200 80e9 	bhi.w	800c4d2 <gos_gcpReceiveMessage+0x272>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 800c300:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c304:	4a7c      	ldr	r2, [pc, #496]	@ (800c4f8 <gos_gcpReceiveMessage+0x298>)
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	4413      	add	r3, r2
 800c30a:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 80e0 	beq.w	800c4d2 <gos_gcpReceiveMessage+0x272>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 800c312:	2300      	movs	r3, #0
 800c314:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 800c316:	2300      	movs	r3, #0
 800c318:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 800c31a:	2302      	movs	r3, #2
 800c31c:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 800c31e:	2300      	movs	r3, #0
 800c320:	767b      	strb	r3, [r7, #25]

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 800c322:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c326:	4a74      	ldr	r2, [pc, #464]	@ (800c4f8 <gos_gcpReceiveMessage+0x298>)
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	4413      	add	r3, r2
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c332:	2110      	movs	r1, #16
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
 800c338:	4603      	mov	r3, r0
 800c33a:	2b55      	cmp	r3, #85	@ 0x55
 800c33c:	f040 80b0 	bne.w	800c4a0 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 800c340:	f107 0217 	add.w	r2, r7, #23
 800c344:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c348:	4611      	mov	r1, r2
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 f8d6 	bl	800c4fc <gos_gcpValidateHeader>
 800c350:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 800c352:	2b55      	cmp	r3, #85	@ 0x55
 800c354:	f040 80a4 	bne.w	800c4a0 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 800c358:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d11e      	bne.n	800c39c <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 800c35e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c362:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 800c364:	2301      	movs	r3, #1
 800c366:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 800c368:	f107 0318 	add.w	r3, r7, #24
 800c36c:	210c      	movs	r1, #12
 800c36e:	4618      	mov	r0, r3
 800c370:	f002 f932 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c374:	4603      	mov	r3, r0
 800c376:	627b      	str	r3, [r7, #36]	@ 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 800c378:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c37c:	4a5e      	ldr	r2, [pc, #376]	@ (800c4f8 <gos_gcpReceiveMessage+0x298>)
 800c37e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c382:	f107 0218 	add.w	r2, r7, #24
 800c386:	2110      	movs	r1, #16
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b55      	cmp	r3, #85	@ 0x55
 800c390:	f040 809e 	bne.w	800c4d0 <gos_gcpReceiveMessage+0x270>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 800c394:	2355      	movs	r3, #85	@ 0x55
 800c396:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 800c39a:	e099      	b.n	800c4d0 <gos_gcpReceiveMessage+0x270>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 800c39c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c39e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 800c3ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c3ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c3b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3b6:	fb01 f202 	mul.w	r2, r1, r2
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d004      	beq.n	800c3cc <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 800c3c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800c3d2:	e04c      	b.n	800c46e <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 800c3d4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c3d8:	3301      	adds	r3, #1
 800c3da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c3de:	fb02 f303 	mul.w	r3, r2, r3
 800c3e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	dd0b      	ble.n	800c400 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 800c3e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c3ea:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800c3f4:	fb11 f303 	smulbb	r3, r1, r3
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c3fe:	e002      	b.n	800c406 <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 800c400:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c404:	877b      	strh	r3, [r7, #58]	@ 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 800c406:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c40a:	4a3b      	ldr	r2, [pc, #236]	@ (800c4f8 <gos_gcpReceiveMessage+0x298>)
 800c40c:	00db      	lsls	r3, r3, #3
 800c40e:	4413      	add	r3, r2
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800c416:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800c41a:	fb01 f202 	mul.w	r2, r1, r2
 800c41e:	4611      	mov	r1, r2
 800c420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c422:	440a      	add	r2, r1
 800c424:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800c426:	4610      	mov	r0, r2
 800c428:	4798      	blx	r3
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b55      	cmp	r3, #85	@ 0x55
 800c42e:	d125      	bne.n	800c47c <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 800c430:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800c432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c434:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 800c436:	2301      	movs	r3, #1
 800c438:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 800c43a:	f107 0318 	add.w	r3, r7, #24
 800c43e:	210c      	movs	r1, #12
 800c440:	4618      	mov	r0, r3
 800c442:	f002 f8c9 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c446:	4603      	mov	r3, r0
 800c448:	627b      	str	r3, [r7, #36]	@ 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 800c44a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c44e:	4a2a      	ldr	r2, [pc, #168]	@ (800c4f8 <gos_gcpReceiveMessage+0x298>)
 800c450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c454:	f107 0218 	add.w	r2, r7, #24
 800c458:	2110      	movs	r1, #16
 800c45a:	4610      	mov	r0, r2
 800c45c:	4798      	blx	r3
 800c45e:	4603      	mov	r3, r0
 800c460:	2b55      	cmp	r3, #85	@ 0x55
 800c462:	d10d      	bne.n	800c480 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c464:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c468:	3301      	adds	r3, #1
 800c46a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800c46e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800c472:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c476:	429a      	cmp	r2, r3
 800c478:	d3ac      	bcc.n	800c3d4 <gos_gcpReceiveMessage+0x174>
 800c47a:	e002      	b.n	800c482 <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 800c47c:	bf00      	nop
 800c47e:	e000      	b.n	800c482 <gos_gcpReceiveMessage+0x222>
                        	break;
 800c480:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 800c482:	f107 0217 	add.w	r2, r7, #23
 800c486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c48a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 f862 	bl	800c556 <gos_gcpValidateData>
 800c492:	4603      	mov	r3, r0
 800c494:	2b55      	cmp	r3, #85	@ 0x55
 800c496:	d11b      	bne.n	800c4d0 <gos_gcpReceiveMessage+0x270>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 800c498:	2355      	movs	r3, #85	@ 0x55
 800c49a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 800c49e:	e017      	b.n	800c4d0 <gos_gcpReceiveMessage+0x270>
        	}
        }
        else
        {
            // Send response.
        	if (requestHeaderFrame.messageId != 0u)
 800c4a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d015      	beq.n	800c4d2 <gos_gcpReceiveMessage+0x272>
        	{
        		responseHeaderFrame.ackType   = (u8_t)headerAck;
 800c4a6:	7dfb      	ldrb	r3, [r7, #23]
 800c4a8:	76bb      	strb	r3, [r7, #26]
        		responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 800c4aa:	f107 0318 	add.w	r3, r7, #24
 800c4ae:	210c      	movs	r1, #12
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f002 f891 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
        		(void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 800c4ba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800c4be:	4a0e      	ldr	r2, [pc, #56]	@ (800c4f8 <gos_gcpReceiveMessage+0x298>)
 800c4c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c4c4:	f107 0218 	add.w	r2, r7, #24
 800c4c8:	2110      	movs	r1, #16
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	4798      	blx	r3
 800c4ce:	e000      	b.n	800c4d2 <gos_gcpReceiveMessage+0x272>
        	if (requestHeaderFrame.dataSize == 0)
 800c4d0:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 800c4d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 800c4d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4a05      	ldr	r2, [pc, #20]	@ (800c4f4 <gos_gcpReceiveMessage+0x294>)
 800c4e0:	4413      	add	r3, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 fbcc 	bl	800cc80 <gos_mutexUnlock>
    return receiveMessageResult;
 800c4e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3750      	adds	r7, #80	@ 0x50
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	200019fc 	.word	0x200019fc
 800c4f8:	200019ec 	.word	0x200019ec

0800c4fc <gos_gcpValidateHeader>:
 *
 * @retval  #GOS_SUCCESS Validation successful.
 * @retval  #GOS_ERROR   CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 800c506:	23ae      	movs	r3, #174	@ 0xae
 800c508:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d01d      	beq.n	800c54c <gos_gcpValidateHeader+0x50>
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d01a      	beq.n	800c54c <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 800c516:	210c      	movs	r1, #12
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f002 f85d 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c51e:	4602      	mov	r2, r0
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	429a      	cmp	r2, r3
 800c526:	d10e      	bne.n	800c546 <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d106      	bne.n	800c53e <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 800c538:	2355      	movs	r3, #85	@ 0x55
 800c53a:	73fb      	strb	r3, [r7, #15]
 800c53c:	e006      	b.n	800c54c <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2205      	movs	r2, #5
 800c542:	701a      	strb	r2, [r3, #0]
 800c544:	e002      	b.n	800c54c <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2202      	movs	r2, #2
 800c54a:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <gos_gcpValidateData>:
 *
 * @retval  #GOS_SUCCESS Validation successful.
 * @retval  #GOS_ERROR   CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b086      	sub	sp, #24
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	60f8      	str	r0, [r7, #12]
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 800c562:	23ae      	movs	r3, #174	@ 0xae
 800c564:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d016      	beq.n	800c59a <gos_gcpValidateData+0x44>
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d013      	beq.n	800c59a <gos_gcpValidateData+0x44>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d010      	beq.n	800c59a <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	88db      	ldrh	r3, [r3, #6]
 800c57c:	4619      	mov	r1, r3
 800c57e:	68b8      	ldr	r0, [r7, #8]
 800c580:	f002 f82a 	bl	800e5d8 <gos_crcDriverGetCrc>
 800c584:	4602      	mov	r2, r0
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d102      	bne.n	800c594 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 800c58e:	2355      	movs	r3, #85	@ 0x55
 800c590:	75fb      	strb	r3, [r7, #23]
 800c592:	e002      	b.n	800c59a <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2202      	movs	r2, #2
 800c598:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_ERROR;
 800c5aa:	23ae      	movs	r3, #174	@ 0xae
 800c5ac:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 800c5b6:	4b22      	ldr	r3, [pc, #136]	@ (800c640 <gos_messageInit+0x9c>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 800c5bc:	4b21      	ldr	r3, [pc, #132]	@ (800c644 <gos_messageInit+0xa0>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	71bb      	strb	r3, [r7, #6]
 800c5c6:	e014      	b.n	800c5f2 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 800c5c8:	79bb      	ldrb	r3, [r7, #6]
 800c5ca:	4a1f      	ldr	r2, [pc, #124]	@ (800c648 <gos_messageInit+0xa4>)
 800c5cc:	2154      	movs	r1, #84	@ 0x54
 800c5ce:	fb01 f303 	mul.w	r3, r1, r3
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5d8:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 800c5da:	79bb      	ldrb	r3, [r7, #6]
 800c5dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c648 <gos_messageInit+0xa4>)
 800c5de:	2154      	movs	r1, #84	@ 0x54
 800c5e0:	fb01 f303 	mul.w	r3, r1, r3
 800c5e4:	4413      	add	r3, r2
 800c5e6:	3302      	adds	r3, #2
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800c5ec:	79bb      	ldrb	r3, [r7, #6]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	71bb      	strb	r3, [r7, #6]
 800c5f2:	79bb      	ldrb	r3, [r7, #6]
 800c5f4:	2b0f      	cmp	r3, #15
 800c5f6:	d9e7      	bls.n	800c5c8 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	717b      	strb	r3, [r7, #5]
 800c5fc:	e009      	b.n	800c612 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800c5fe:	797b      	ldrb	r3, [r7, #5]
 800c600:	4a12      	ldr	r2, [pc, #72]	@ (800c64c <gos_messageInit+0xa8>)
 800c602:	015b      	lsls	r3, r3, #5
 800c604:	4413      	add	r3, r2
 800c606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c60a:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800c60c:	797b      	ldrb	r3, [r7, #5]
 800c60e:	3301      	adds	r3, #1
 800c610:	717b      	strb	r3, [r7, #5]
 800c612:	797b      	ldrb	r3, [r7, #5]
 800c614:	2b0f      	cmp	r3, #15
 800c616:	d9f2      	bls.n	800c5fe <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 800c618:	480d      	ldr	r0, [pc, #52]	@ (800c650 <gos_messageInit+0xac>)
 800c61a:	f000 fa11 	bl	800ca40 <gos_mutexInit>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b55      	cmp	r3, #85	@ 0x55
 800c622:	d108      	bne.n	800c636 <gos_messageInit+0x92>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) == GOS_SUCCESS)
 800c624:	490b      	ldr	r1, [pc, #44]	@ (800c654 <gos_messageInit+0xb0>)
 800c626:	480c      	ldr	r0, [pc, #48]	@ (800c658 <gos_messageInit+0xb4>)
 800c628:	f7fd fd52 	bl	800a0d0 <gos_taskRegister>
 800c62c:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) == GOS_SUCCESS &&
 800c62e:	2b55      	cmp	r3, #85	@ 0x55
 800c630:	d101      	bne.n	800c636 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_SUCCESS;
 800c632:	2355      	movs	r3, #85	@ 0x55
 800c634:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 800c636:	79fb      	ldrb	r3, [r7, #7]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	2000214e 	.word	0x2000214e
 800c644:	2000214f 	.word	0x2000214f
 800c648:	20001a0c 	.word	0x20001a0c
 800c64c:	20001f4c 	.word	0x20001f4c
 800c650:	20002150 	.word	0x20002150
 800c654:	2000214c 	.word	0x2000214c
 800c658:	20000c0c 	.word	0x20000c0c

0800c65c <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 800c65c:	b590      	push	{r4, r7, lr}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	4613      	mov	r3, r2
 800c668:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 800c66a:	23ae      	movs	r3, #174	@ 0xae
 800c66c:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 800c66e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c672:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800c674:	2300      	movs	r3, #0
 800c676:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 800c678:	2300      	movs	r3, #0
 800c67a:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 800c67c:	2300      	movs	r3, #0
 800c67e:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 800c680:	2300      	movs	r3, #0
 800c682:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 80d9 	beq.w	800c83e <gos_messageRx+0x1e2>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 80d5 	beq.w	800c83e <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800c694:	f04f 31ff 	mov.w	r1, #4294967295
 800c698:	486d      	ldr	r0, [pc, #436]	@ (800c850 <gos_messageRx+0x1f4>)
 800c69a:	f000 f9eb 	bl	800ca74 <gos_mutexLock>
 800c69e:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 800c6a0:	2b55      	cmp	r3, #85	@ 0x55
 800c6a2:	f040 80cc 	bne.w	800c83e <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 800c6a6:	4b6b      	ldr	r3, [pc, #428]	@ (800c854 <gos_messageRx+0x1f8>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	4a6b      	ldr	r2, [pc, #428]	@ (800c858 <gos_messageRx+0x1fc>)
 800c6ac:	015b      	lsls	r3, r3, #5
 800c6ae:	4413      	add	r3, r2
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6b6:	f040 80c2 	bne.w	800c83e <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 800c6ba:	f107 0312 	add.w	r3, r7, #18
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7ff f8ac 	bl	800b81c <gos_taskGetCurrentId>
 800c6c4:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 800c6c6:	2b55      	cmp	r3, #85	@ 0x55
 800c6c8:	f040 80b9 	bne.w	800c83e <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 800c6cc:	4b61      	ldr	r3, [pc, #388]	@ (800c854 <gos_messageRx+0x1f8>)
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	8a79      	ldrh	r1, [r7, #18]
 800c6d2:	4a61      	ldr	r2, [pc, #388]	@ (800c858 <gos_messageRx+0x1fc>)
 800c6d4:	015b      	lsls	r3, r3, #5
 800c6d6:	4413      	add	r3, r2
 800c6d8:	460a      	mov	r2, r1
 800c6da:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 800c6dc:	4b5d      	ldr	r3, [pc, #372]	@ (800c854 <gos_messageRx+0x1f8>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	4a5d      	ldr	r2, [pc, #372]	@ (800c858 <gos_messageRx+0x1fc>)
 800c6e2:	015b      	lsls	r3, r3, #5
 800c6e4:	4413      	add	r3, r2
 800c6e6:	3302      	adds	r3, #2
 800c6e8:	88fa      	ldrh	r2, [r7, #6]
 800c6ea:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 800c6ec:	4b59      	ldr	r3, [pc, #356]	@ (800c854 <gos_messageRx+0x1f8>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	4a59      	ldr	r2, [pc, #356]	@ (800c858 <gos_messageRx+0x1fc>)
 800c6f2:	015b      	lsls	r3, r3, #5
 800c6f4:	4413      	add	r3, r2
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 800c6fc:	4b55      	ldr	r3, [pc, #340]	@ (800c854 <gos_messageRx+0x1f8>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	4a55      	ldr	r2, [pc, #340]	@ (800c858 <gos_messageRx+0x1fc>)
 800c702:	015b      	lsls	r3, r3, #5
 800c704:	4413      	add	r3, r2
 800c706:	3318      	adds	r3, #24
 800c708:	68ba      	ldr	r2, [r7, #8]
 800c70a:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 800c70c:	4b51      	ldr	r3, [pc, #324]	@ (800c854 <gos_messageRx+0x1f8>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	4a51      	ldr	r2, [pc, #324]	@ (800c858 <gos_messageRx+0x1fc>)
 800c712:	015b      	lsls	r3, r3, #5
 800c714:	4413      	add	r3, r2
 800c716:	331c      	adds	r3, #28
 800c718:	2249      	movs	r2, #73	@ 0x49
 800c71a:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 800c71c:	4b4d      	ldr	r3, [pc, #308]	@ (800c854 <gos_messageRx+0x1f8>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	015b      	lsls	r3, r3, #5
 800c722:	4a4d      	ldr	r2, [pc, #308]	@ (800c858 <gos_messageRx+0x1fc>)
 800c724:	4413      	add	r3, r2
 800c726:	3306      	adds	r3, #6
 800c728:	2210      	movs	r2, #16
 800c72a:	2100      	movs	r1, #0
 800c72c:	4618      	mov	r0, r3
 800c72e:	f00a fa37 	bl	8016ba0 <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800c732:	2300      	movs	r3, #0
 800c734:	757b      	strb	r3, [r7, #21]
 800c736:	e019      	b.n	800c76c <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 800c738:	7d7b      	ldrb	r3, [r7, #21]
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	881b      	ldrh	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d016      	beq.n	800c774 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 800c746:	7d7b      	ldrb	r3, [r7, #21]
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	441a      	add	r2, r3
 800c74e:	4b41      	ldr	r3, [pc, #260]	@ (800c854 <gos_messageRx+0x1f8>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	461c      	mov	r4, r3
 800c754:	7d7b      	ldrb	r3, [r7, #21]
 800c756:	8810      	ldrh	r0, [r2, #0]
 800c758:	493f      	ldr	r1, [pc, #252]	@ (800c858 <gos_messageRx+0x1fc>)
 800c75a:	0122      	lsls	r2, r4, #4
 800c75c:	4413      	add	r3, r2
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	440b      	add	r3, r1
 800c762:	4602      	mov	r2, r0
 800c764:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800c766:	7d7b      	ldrb	r3, [r7, #21]
 800c768:	3301      	adds	r3, #1
 800c76a:	757b      	strb	r3, [r7, #21]
 800c76c:	7d7b      	ldrb	r3, [r7, #21]
 800c76e:	2b07      	cmp	r3, #7
 800c770:	d9e2      	bls.n	800c738 <gos_messageRx+0xdc>
 800c772:	e000      	b.n	800c776 <gos_messageRx+0x11a>
                    break;
 800c774:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 800c776:	4b37      	ldr	r3, [pc, #220]	@ (800c854 <gos_messageRx+0x1f8>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 800c77c:	2300      	movs	r3, #0
 800c77e:	75bb      	strb	r3, [r7, #22]
 800c780:	e018      	b.n	800c7b4 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 800c782:	4b34      	ldr	r3, [pc, #208]	@ (800c854 <gos_messageRx+0x1f8>)
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	3301      	adds	r3, #1
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	4b32      	ldr	r3, [pc, #200]	@ (800c854 <gos_messageRx+0x1f8>)
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	4b31      	ldr	r3, [pc, #196]	@ (800c854 <gos_messageRx+0x1f8>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b10      	cmp	r3, #16
 800c794:	d102      	bne.n	800c79c <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 800c796:	4b2f      	ldr	r3, [pc, #188]	@ (800c854 <gos_messageRx+0x1f8>)
 800c798:	2200      	movs	r2, #0
 800c79a:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 800c79c:	4b2d      	ldr	r3, [pc, #180]	@ (800c854 <gos_messageRx+0x1f8>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c858 <gos_messageRx+0x1fc>)
 800c7a2:	015b      	lsls	r3, r3, #5
 800c7a4:	4413      	add	r3, r2
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7ac:	d006      	beq.n	800c7bc <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 800c7ae:	7dbb      	ldrb	r3, [r7, #22]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	75bb      	strb	r3, [r7, #22]
 800c7b4:	7dbb      	ldrb	r3, [r7, #22]
 800c7b6:	2b0f      	cmp	r3, #15
 800c7b8:	d9e3      	bls.n	800c782 <gos_messageRx+0x126>
 800c7ba:	e000      	b.n	800c7be <gos_messageRx+0x162>
                {
                    break;
 800c7bc:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 800c7be:	4824      	ldr	r0, [pc, #144]	@ (800c850 <gos_messageRx+0x1f4>)
 800c7c0:	f000 fa5e 	bl	800cc80 <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 800c7c4:	8a7b      	ldrh	r3, [r7, #18]
 800c7c6:	f107 0210 	add.w	r2, r7, #16
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe ffb5 	bl	800b73c <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800c7d2:	8a3b      	ldrh	r3, [r7, #16]
 800c7d4:	b21b      	sxth	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	db12      	blt.n	800c800 <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 800c7da:	8a7b      	ldrh	r3, [r7, #18]
 800c7dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fe47 	bl	800b474 <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 800c7e6:	8a7b      	ldrh	r3, [r7, #18]
 800c7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe f929 	bl	800aa44 <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 800c7f2:	8a7b      	ldrh	r3, [r7, #18]
 800c7f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fe feb3 	bl	800b564 <gos_taskRemovePrivilege>
 800c7fe:	e005      	b.n	800c80c <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 800c800:	8a7b      	ldrh	r3, [r7, #18]
 800c802:	f04f 31ff 	mov.w	r1, #4294967295
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe f91c 	bl	800aa44 <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 800c80c:	7d3b      	ldrb	r3, [r7, #20]
 800c80e:	4a12      	ldr	r2, [pc, #72]	@ (800c858 <gos_messageRx+0x1fc>)
 800c810:	015b      	lsls	r3, r3, #5
 800c812:	4413      	add	r3, r2
 800c814:	331c      	adds	r3, #28
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b36      	cmp	r3, #54	@ 0x36
 800c81a:	d102      	bne.n	800c822 <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 800c81c:	2355      	movs	r3, #85	@ 0x55
 800c81e:	75fb      	strb	r3, [r7, #23]
 800c820:	e006      	b.n	800c830 <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800c822:	7d3b      	ldrb	r3, [r7, #20]
 800c824:	4a0c      	ldr	r2, [pc, #48]	@ (800c858 <gos_messageRx+0x1fc>)
 800c826:	015b      	lsls	r3, r3, #5
 800c828:	4413      	add	r3, r2
 800c82a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c82e:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 800c830:	7d3b      	ldrb	r3, [r7, #20]
 800c832:	4a09      	ldr	r2, [pc, #36]	@ (800c858 <gos_messageRx+0x1fc>)
 800c834:	015b      	lsls	r3, r3, #5
 800c836:	4413      	add	r3, r2
 800c838:	331c      	adds	r3, #28
 800c83a:	2249      	movs	r2, #73	@ 0x49
 800c83c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 800c83e:	4804      	ldr	r0, [pc, #16]	@ (800c850 <gos_messageRx+0x1f4>)
 800c840:	f000 fa1e 	bl	800cc80 <gos_mutexUnlock>

    return messageRxResult;
 800c844:	7dfb      	ldrb	r3, [r7, #23]
}
 800c846:	4618      	mov	r0, r3
 800c848:	371c      	adds	r7, #28
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd90      	pop	{r4, r7, pc}
 800c84e:	bf00      	nop
 800c850:	20002150 	.word	0x20002150
 800c854:	2000214f 	.word	0x2000214f
 800c858:	20001f4c 	.word	0x20001f4c

0800c85c <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 800c85c:	b590      	push	{r4, r7, lr}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 800c862:	2300      	movs	r3, #0
 800c864:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800c866:	2300      	movs	r3, #0
 800c868:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 800c86a:	2300      	movs	r3, #0
 800c86c:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800c86e:	f04f 31ff 	mov.w	r1, #4294967295
 800c872:	4870      	ldr	r0, [pc, #448]	@ (800ca34 <gos_messageDaemonTask+0x1d8>)
 800c874:	f000 f8fe 	bl	800ca74 <gos_mutexLock>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b55      	cmp	r3, #85	@ 0x55
 800c87c:	f040 80d5 	bne.w	800ca2a <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800c880:	2300      	movs	r3, #0
 800c882:	71bb      	strb	r3, [r7, #6]
 800c884:	e0ca      	b.n	800ca1c <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 800c886:	79bb      	ldrb	r3, [r7, #6]
 800c888:	4a6b      	ldr	r2, [pc, #428]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c88a:	015b      	lsls	r3, r3, #5
 800c88c:	4413      	add	r3, r2
 800c88e:	881b      	ldrh	r3, [r3, #0]
 800c890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c894:	f000 80bf 	beq.w	800ca16 <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800c898:	2300      	movs	r3, #0
 800c89a:	717b      	strb	r3, [r7, #5]
 800c89c:	e077      	b.n	800c98e <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800c89e:	2300      	movs	r3, #0
 800c8a0:	71fb      	strb	r3, [r7, #7]
 800c8a2:	e06e      	b.n	800c982 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 800c8a4:	79ba      	ldrb	r2, [r7, #6]
 800c8a6:	797b      	ldrb	r3, [r7, #5]
 800c8a8:	4963      	ldr	r1, [pc, #396]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c8aa:	0112      	lsls	r2, r2, #4
 800c8ac:	4413      	add	r3, r2
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	440b      	add	r3, r1
 800c8b2:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 800c8b4:	79fb      	ldrb	r3, [r7, #7]
 800c8b6:	4961      	ldr	r1, [pc, #388]	@ (800ca3c <gos_messageDaemonTask+0x1e0>)
 800c8b8:	2054      	movs	r0, #84	@ 0x54
 800c8ba:	fb00 f303 	mul.w	r3, r0, r3
 800c8be:	440b      	add	r3, r1
 800c8c0:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d15a      	bne.n	800c97c <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 800c8c6:	79bb      	ldrb	r3, [r7, #6]
 800c8c8:	4a5b      	ldr	r2, [pc, #364]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c8ca:	015b      	lsls	r3, r3, #5
 800c8cc:	4413      	add	r3, r2
 800c8ce:	3318      	adds	r3, #24
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	2254      	movs	r2, #84	@ 0x54
 800c8d8:	fb02 f303 	mul.w	r3, r2, r3
 800c8dc:	4a57      	ldr	r2, [pc, #348]	@ (800ca3c <gos_messageDaemonTask+0x1e0>)
 800c8de:	4413      	add	r3, r2
 800c8e0:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	4a55      	ldr	r2, [pc, #340]	@ (800ca3c <gos_messageDaemonTask+0x1e0>)
 800c8e6:	2454      	movs	r4, #84	@ 0x54
 800c8e8:	fb04 f303 	mul.w	r3, r4, r3
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3302      	adds	r3, #2
 800c8f0:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f00a f9eb 	bl	8016cce <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 800c8f8:	79fa      	ldrb	r2, [r7, #7]
 800c8fa:	79bb      	ldrb	r3, [r7, #6]
 800c8fc:	494e      	ldr	r1, [pc, #312]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c8fe:	015b      	lsls	r3, r3, #5
 800c900:	440b      	add	r3, r1
 800c902:	3318      	adds	r3, #24
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	494d      	ldr	r1, [pc, #308]	@ (800ca3c <gos_messageDaemonTask+0x1e0>)
 800c908:	2054      	movs	r0, #84	@ 0x54
 800c90a:	fb00 f202 	mul.w	r2, r0, r2
 800c90e:	440a      	add	r2, r1
 800c910:	3202      	adds	r2, #2
 800c912:	7812      	ldrb	r2, [r2, #0]
 800c914:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 800c916:	79fa      	ldrb	r2, [r7, #7]
 800c918:	79bb      	ldrb	r3, [r7, #6]
 800c91a:	4947      	ldr	r1, [pc, #284]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c91c:	015b      	lsls	r3, r3, #5
 800c91e:	440b      	add	r3, r1
 800c920:	3318      	adds	r3, #24
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4945      	ldr	r1, [pc, #276]	@ (800ca3c <gos_messageDaemonTask+0x1e0>)
 800c926:	2054      	movs	r0, #84	@ 0x54
 800c928:	fb00 f202 	mul.w	r2, r0, r2
 800c92c:	440a      	add	r2, r1
 800c92e:	8812      	ldrh	r2, [r2, #0]
 800c930:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 800c932:	79bb      	ldrb	r3, [r7, #6]
 800c934:	4a40      	ldr	r2, [pc, #256]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c936:	015b      	lsls	r3, r3, #5
 800c938:	4413      	add	r3, r2
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fe f993 	bl	800ac68 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 800c942:	79fb      	ldrb	r3, [r7, #7]
 800c944:	4a3d      	ldr	r2, [pc, #244]	@ (800ca3c <gos_messageDaemonTask+0x1e0>)
 800c946:	2154      	movs	r1, #84	@ 0x54
 800c948:	fb01 f303 	mul.w	r3, r1, r3
 800c94c:	4413      	add	r3, r2
 800c94e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c952:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800c954:	79bb      	ldrb	r3, [r7, #6]
 800c956:	4a38      	ldr	r2, [pc, #224]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c958:	015b      	lsls	r3, r3, #5
 800c95a:	4413      	add	r3, r2
 800c95c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c960:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 800c962:	79bb      	ldrb	r3, [r7, #6]
 800c964:	4a34      	ldr	r2, [pc, #208]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c966:	015b      	lsls	r3, r3, #5
 800c968:	4413      	add	r3, r2
 800c96a:	331c      	adds	r3, #28
 800c96c:	2236      	movs	r2, #54	@ 0x36
 800c96e:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 800c970:	2310      	movs	r3, #16
 800c972:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 800c974:	2308      	movs	r3, #8
 800c976:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 800c978:	2310      	movs	r3, #16
 800c97a:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800c97c:	79fb      	ldrb	r3, [r7, #7]
 800c97e:	3301      	adds	r3, #1
 800c980:	71fb      	strb	r3, [r7, #7]
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	2b0f      	cmp	r3, #15
 800c986:	d98d      	bls.n	800c8a4 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800c988:	797b      	ldrb	r3, [r7, #5]
 800c98a:	3301      	adds	r3, #1
 800c98c:	717b      	strb	r3, [r7, #5]
 800c98e:	797b      	ldrb	r3, [r7, #5]
 800c990:	2b07      	cmp	r3, #7
 800c992:	d984      	bls.n	800c89e <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 800c994:	79bb      	ldrb	r3, [r7, #6]
 800c996:	4a28      	ldr	r2, [pc, #160]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c998:	015b      	lsls	r3, r3, #5
 800c99a:	4413      	add	r3, r2
 800c99c:	331c      	adds	r3, #28
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	2b49      	cmp	r3, #73	@ 0x49
 800c9a2:	d138      	bne.n	800ca16 <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 800c9a4:	79bb      	ldrb	r3, [r7, #6]
 800c9a6:	4a24      	ldr	r2, [pc, #144]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c9a8:	015b      	lsls	r3, r3, #5
 800c9aa:	4413      	add	r3, r2
 800c9ac:	3302      	adds	r3, #2
 800c9ae:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 800c9b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d02e      	beq.n	800ca16 <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 800c9b8:	79bb      	ldrb	r3, [r7, #6]
 800c9ba:	491f      	ldr	r1, [pc, #124]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	440a      	add	r2, r1
 800c9c0:	3204      	adds	r2, #4
 800c9c2:	8812      	ldrh	r2, [r2, #0]
 800c9c4:	3201      	adds	r2, #1
 800c9c6:	b291      	uxth	r1, r2
 800c9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c9ca:	015b      	lsls	r3, r3, #5
 800c9cc:	4413      	add	r3, r2
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	460a      	mov	r2, r1
 800c9d2:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 800c9d4:	79bb      	ldrb	r3, [r7, #6]
 800c9d6:	4a18      	ldr	r2, [pc, #96]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c9d8:	015b      	lsls	r3, r3, #5
 800c9da:	4413      	add	r3, r2
 800c9dc:	3304      	adds	r3, #4
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	2332      	movs	r3, #50	@ 0x32
 800c9e4:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 800c9e8:	79ba      	ldrb	r2, [r7, #6]
 800c9ea:	4913      	ldr	r1, [pc, #76]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c9ec:	0152      	lsls	r2, r2, #5
 800c9ee:	440a      	add	r2, r1
 800c9f0:	3202      	adds	r2, #2
 800c9f2:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d90e      	bls.n	800ca16 <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 800c9f8:	79bb      	ldrb	r3, [r7, #6]
 800c9fa:	4a0f      	ldr	r2, [pc, #60]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800c9fc:	015b      	lsls	r3, r3, #5
 800c9fe:	4413      	add	r3, r2
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe f930 	bl	800ac68 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800ca08:	79bb      	ldrb	r3, [r7, #6]
 800ca0a:	4a0b      	ldr	r2, [pc, #44]	@ (800ca38 <gos_messageDaemonTask+0x1dc>)
 800ca0c:	015b      	lsls	r3, r3, #5
 800ca0e:	4413      	add	r3, r2
 800ca10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca14:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800ca16:	79bb      	ldrb	r3, [r7, #6]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	71bb      	strb	r3, [r7, #6]
 800ca1c:	79bb      	ldrb	r3, [r7, #6]
 800ca1e:	2b0f      	cmp	r3, #15
 800ca20:	f67f af31 	bls.w	800c886 <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 800ca24:	4803      	ldr	r0, [pc, #12]	@ (800ca34 <gos_messageDaemonTask+0x1d8>)
 800ca26:	f000 f92b 	bl	800cc80 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 800ca2a:	2032      	movs	r0, #50	@ 0x32
 800ca2c:	f7fd fce2 	bl	800a3f4 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800ca30:	e71d      	b.n	800c86e <gos_messageDaemonTask+0x12>
 800ca32:	bf00      	nop
 800ca34:	20002150 	.word	0x20002150
 800ca38:	20001f4c 	.word	0x20001f4c
 800ca3c:	20001a0c 	.word	0x20001a0c

0800ca40 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 800ca48:	23ae      	movs	r3, #174	@ 0xae
 800ca4a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d008      	beq.n	800ca64 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	22d2      	movs	r2, #210	@ 0xd2
 800ca56:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca5e:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 800ca60:	2355      	movs	r3, #85	@ 0x55
 800ca62:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
	...

0800ca74 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 800ca7e:	23ae      	movs	r3, #174	@ 0xae
 800ca80:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 800ca82:	f7fc fb01 	bl	8009088 <gos_kernelGetSysTicks>
 800ca86:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 800ca88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca8c:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 800ca8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca92:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 800ca94:	23ff      	movs	r3, #255	@ 0xff
 800ca96:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 800ca98:	23ff      	movs	r3, #255	@ 0xff
 800ca9a:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 800ca9c:	2349      	movs	r3, #73	@ 0x49
 800ca9e:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 800caa0:	e0ce      	b.n	800cc40 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 800caa2:	4b73      	ldr	r3, [pc, #460]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d108      	bne.n	800cabc <gos_mutexLock+0x48>
 800caaa:	b672      	cpsid	i
 800caac:	f3ef 8310 	mrs	r3, PRIMASK
 800cab0:	4a70      	ldr	r2, [pc, #448]	@ (800cc74 <gos_mutexLock+0x200>)
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	4b6c      	ldr	r3, [pc, #432]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	4b6a      	ldr	r3, [pc, #424]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	4b6b      	ldr	r3, [pc, #428]	@ (800cc78 <gos_mutexLock+0x204>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	3301      	adds	r3, #1
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	4b69      	ldr	r3, [pc, #420]	@ (800cc78 <gos_mutexLock+0x204>)
 800cad2:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2bd2      	cmp	r3, #210	@ 0xd2
 800cada:	d13b      	bne.n	800cb54 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 800cadc:	7cfb      	ldrb	r3, [r7, #19]
 800cade:	2b36      	cmp	r3, #54	@ 0x36
 800cae0:	d12d      	bne.n	800cb3e <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 800cae2:	4b66      	ldr	r3, [pc, #408]	@ (800cc7c <gos_mutexLock+0x208>)
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d105      	bne.n	800caf6 <gos_mutexLock+0x82>
 800caea:	4b63      	ldr	r3, [pc, #396]	@ (800cc78 <gos_mutexLock+0x204>)
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	3301      	adds	r3, #1
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	4b61      	ldr	r3, [pc, #388]	@ (800cc78 <gos_mutexLock+0x204>)
 800caf4:	701a      	strb	r2, [r3, #0]
 800caf6:	4b61      	ldr	r3, [pc, #388]	@ (800cc7c <gos_mutexLock+0x208>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	3301      	adds	r3, #1
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	4b5f      	ldr	r3, [pc, #380]	@ (800cc7c <gos_mutexLock+0x208>)
 800cb00:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 800cb02:	7a7a      	ldrb	r2, [r7, #9]
 800cb04:	8abb      	ldrh	r3, [r7, #20]
 800cb06:	4611      	mov	r1, r2
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fe fabb 	bl	800b084 <gos_taskSetPriority>
                GOS_ISR_EXIT
 800cb0e:	4b5b      	ldr	r3, [pc, #364]	@ (800cc7c <gos_mutexLock+0x208>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d005      	beq.n	800cb22 <gos_mutexLock+0xae>
 800cb16:	4b59      	ldr	r3, [pc, #356]	@ (800cc7c <gos_mutexLock+0x208>)
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	4b57      	ldr	r3, [pc, #348]	@ (800cc7c <gos_mutexLock+0x208>)
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	4b56      	ldr	r3, [pc, #344]	@ (800cc7c <gos_mutexLock+0x208>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d109      	bne.n	800cb3e <gos_mutexLock+0xca>
 800cb2a:	4b53      	ldr	r3, [pc, #332]	@ (800cc78 <gos_mutexLock+0x204>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d005      	beq.n	800cb3e <gos_mutexLock+0xca>
 800cb32:	4b51      	ldr	r3, [pc, #324]	@ (800cc78 <gos_mutexLock+0x204>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b2da      	uxtb	r2, r3
 800cb3a:	4b4f      	ldr	r3, [pc, #316]	@ (800cc78 <gos_mutexLock+0x204>)
 800cb3c:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	226b      	movs	r2, #107	@ 0x6b
 800cb42:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3302      	adds	r3, #2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fe fe67 	bl	800b81c <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 800cb4e:	2355      	movs	r3, #85	@ 0x55
 800cb50:	75fb      	strb	r3, [r7, #23]
 800cb52:	e04b      	b.n	800cbec <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	885b      	ldrh	r3, [r3, #2]
 800cb58:	f107 0209 	add.w	r2, r7, #9
 800cb5c:	4611      	mov	r1, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fc18 	bl	800b394 <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 800cb64:	f107 030a 	add.w	r3, r7, #10
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fe fe57 	bl	800b81c <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 800cb6e:	897b      	ldrh	r3, [r7, #10]
 800cb70:	f107 0208 	add.w	r2, r7, #8
 800cb74:	4611      	mov	r1, r2
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe fc0c 	bl	800b394 <gos_taskGetPriority>
            ownerId = pMutex->owner;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	885b      	ldrh	r3, [r3, #2]
 800cb80:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 800cb82:	7a3a      	ldrb	r2, [r7, #8]
 800cb84:	7a7b      	ldrb	r3, [r7, #9]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d230      	bcs.n	800cbec <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 800cb8a:	4b3c      	ldr	r3, [pc, #240]	@ (800cc7c <gos_mutexLock+0x208>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d105      	bne.n	800cb9e <gos_mutexLock+0x12a>
 800cb92:	4b39      	ldr	r3, [pc, #228]	@ (800cc78 <gos_mutexLock+0x204>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	3301      	adds	r3, #1
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	4b37      	ldr	r3, [pc, #220]	@ (800cc78 <gos_mutexLock+0x204>)
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	4b37      	ldr	r3, [pc, #220]	@ (800cc7c <gos_mutexLock+0x208>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	3301      	adds	r3, #1
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	4b35      	ldr	r3, [pc, #212]	@ (800cc7c <gos_mutexLock+0x208>)
 800cba8:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	885b      	ldrh	r3, [r3, #2]
 800cbae:	7a3a      	ldrb	r2, [r7, #8]
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fa66 	bl	800b084 <gos_taskSetPriority>
                GOS_ISR_EXIT
 800cbb8:	4b30      	ldr	r3, [pc, #192]	@ (800cc7c <gos_mutexLock+0x208>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d005      	beq.n	800cbcc <gos_mutexLock+0x158>
 800cbc0:	4b2e      	ldr	r3, [pc, #184]	@ (800cc7c <gos_mutexLock+0x208>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	4b2c      	ldr	r3, [pc, #176]	@ (800cc7c <gos_mutexLock+0x208>)
 800cbca:	701a      	strb	r2, [r3, #0]
 800cbcc:	4b2b      	ldr	r3, [pc, #172]	@ (800cc7c <gos_mutexLock+0x208>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d109      	bne.n	800cbe8 <gos_mutexLock+0x174>
 800cbd4:	4b28      	ldr	r3, [pc, #160]	@ (800cc78 <gos_mutexLock+0x204>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d005      	beq.n	800cbe8 <gos_mutexLock+0x174>
 800cbdc:	4b26      	ldr	r3, [pc, #152]	@ (800cc78 <gos_mutexLock+0x204>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	4b24      	ldr	r3, [pc, #144]	@ (800cc78 <gos_mutexLock+0x204>)
 800cbe6:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 800cbe8:	2336      	movs	r3, #54	@ 0x36
 800cbea:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 800cbec:	4b20      	ldr	r3, [pc, #128]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d005      	beq.n	800cc00 <gos_mutexLock+0x18c>
 800cbf4:	4b1e      	ldr	r3, [pc, #120]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	4b1c      	ldr	r3, [pc, #112]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	4b1b      	ldr	r3, [pc, #108]	@ (800cc70 <gos_mutexLock+0x1fc>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d108      	bne.n	800cc1a <gos_mutexLock+0x1a6>
 800cc08:	4b1a      	ldr	r3, [pc, #104]	@ (800cc74 <gos_mutexLock+0x200>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f383 8810 	msr	PRIMASK, r3
 800cc10:	b662      	cpsie	i
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	4b17      	ldr	r3, [pc, #92]	@ (800cc78 <gos_mutexLock+0x204>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d005      	beq.n	800cc2e <gos_mutexLock+0x1ba>
 800cc22:	4b15      	ldr	r3, [pc, #84]	@ (800cc78 <gos_mutexLock+0x204>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	4b13      	ldr	r3, [pc, #76]	@ (800cc78 <gos_mutexLock+0x204>)
 800cc2c:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	2b55      	cmp	r3, #85	@ 0x55
 800cc32:	d017      	beq.n	800cc64 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 800cc3a:	2002      	movs	r0, #2
 800cc3c:	f7fd fbda 	bl	800a3f4 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00f      	beq.n	800cc66 <gos_mutexLock+0x1f2>
 800cc46:	f7fc fa1f 	bl	8009088 <gos_kernelGetSysTicks>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	f4bf af25 	bcs.w	800caa2 <gos_mutexLock+0x2e>
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5e:	f43f af20 	beq.w	800caa2 <gos_mutexLock+0x2e>
 800cc62:	e000      	b.n	800cc66 <gos_mutexLock+0x1f2>
            break;
 800cc64:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20001963 	.word	0x20001963
 800cc74:	20001964 	.word	0x20001964
 800cc78:	20001961 	.word	0x20001961
 800cc7c:	20001962 	.word	0x20001962

0800cc80 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 800cc88:	23ae      	movs	r3, #174	@ 0xae
 800cc8a:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 800cc8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc90:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d04c      	beq.n	800cd32 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 800cc98:	4b28      	ldr	r3, [pc, #160]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d108      	bne.n	800ccb2 <gos_mutexUnlock+0x32>
 800cca0:	b672      	cpsid	i
 800cca2:	f3ef 8310 	mrs	r3, PRIMASK
 800cca6:	4a26      	ldr	r2, [pc, #152]	@ (800cd40 <gos_mutexUnlock+0xc0>)
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	4b22      	ldr	r3, [pc, #136]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	4b20      	ldr	r3, [pc, #128]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	4b21      	ldr	r3, [pc, #132]	@ (800cd44 <gos_mutexUnlock+0xc4>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	4b1f      	ldr	r3, [pc, #124]	@ (800cd44 <gos_mutexUnlock+0xc4>)
 800ccc8:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 800ccca:	f107 030c 	add.w	r3, r7, #12
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fda4 	bl	800b81c <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	885a      	ldrh	r2, [r3, #2]
 800ccd8:	89bb      	ldrh	r3, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d108      	bne.n	800ccf0 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	22d2      	movs	r2, #210	@ 0xd2
 800cce2:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ccea:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 800ccec:	2355      	movs	r3, #85	@ 0x55
 800ccee:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 800ccf0:	4b12      	ldr	r3, [pc, #72]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d005      	beq.n	800cd04 <gos_mutexUnlock+0x84>
 800ccf8:	4b10      	ldr	r3, [pc, #64]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	4b0e      	ldr	r3, [pc, #56]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	4b0d      	ldr	r3, [pc, #52]	@ (800cd3c <gos_mutexUnlock+0xbc>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d108      	bne.n	800cd1e <gos_mutexUnlock+0x9e>
 800cd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <gos_mutexUnlock+0xc0>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f383 8810 	msr	PRIMASK, r3
 800cd14:	b662      	cpsie	i
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	4b09      	ldr	r3, [pc, #36]	@ (800cd44 <gos_mutexUnlock+0xc4>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d005      	beq.n	800cd32 <gos_mutexUnlock+0xb2>
 800cd26:	4b07      	ldr	r3, [pc, #28]	@ (800cd44 <gos_mutexUnlock+0xc4>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	4b05      	ldr	r3, [pc, #20]	@ (800cd44 <gos_mutexUnlock+0xc4>)
 800cd30:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	20001963 	.word	0x20001963
 800cd40:	20001964 	.word	0x20001964
 800cd44:	20001961 	.word	0x20001961

0800cd48 <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_ERROR;
 800cd4e:	23ae      	movs	r3, #174	@ 0xae
 800cd50:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 800cd52:	2300      	movs	r3, #0
 800cd54:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 800cd56:	2300      	movs	r3, #0
 800cd58:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	71fb      	strb	r3, [r7, #7]
 800cd5e:	e038      	b.n	800cdd2 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 800cd60:	79fb      	ldrb	r3, [r7, #7]
 800cd62:	4a22      	ldr	r2, [pc, #136]	@ (800cdec <gos_queueInit+0xa4>)
 800cd64:	2100      	movs	r1, #0
 800cd66:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 800cd68:	79fb      	ldrb	r3, [r7, #7]
 800cd6a:	4a21      	ldr	r2, [pc, #132]	@ (800cdf0 <gos_queueInit+0xa8>)
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	4a20      	ldr	r2, [pc, #128]	@ (800cdf4 <gos_queueInit+0xac>)
 800cd74:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800cd78:	fb01 f303 	mul.w	r3, r1, r3
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800cd82:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	4a1b      	ldr	r2, [pc, #108]	@ (800cdf4 <gos_queueInit+0xac>)
 800cd88:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800cd8c:	fb01 f303 	mul.w	r3, r1, r3
 800cd90:	4413      	add	r3, r2
 800cd92:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800cd96:	3308      	adds	r3, #8
 800cd98:	2200      	movs	r2, #0
 800cd9a:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	71bb      	strb	r3, [r7, #6]
 800cda0:	e011      	b.n	800cdc6 <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	79ba      	ldrb	r2, [r7, #6]
 800cda6:	4913      	ldr	r1, [pc, #76]	@ (800cdf4 <gos_queueInit+0xac>)
 800cda8:	20c9      	movs	r0, #201	@ 0xc9
 800cdaa:	fb00 f202 	mul.w	r2, r0, r2
 800cdae:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 800cdb2:	fb00 f303 	mul.w	r3, r0, r3
 800cdb6:	4413      	add	r3, r2
 800cdb8:	440b      	add	r3, r1
 800cdba:	33e2      	adds	r3, #226	@ 0xe2
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 800cdc0:	79bb      	ldrb	r3, [r7, #6]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	71bb      	strb	r3, [r7, #6]
 800cdc6:	79bb      	ldrb	r3, [r7, #6]
 800cdc8:	2b1d      	cmp	r3, #29
 800cdca:	d9ea      	bls.n	800cda2 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	71fb      	strb	r3, [r7, #7]
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d0c3      	beq.n	800cd60 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 800cdd8:	4807      	ldr	r0, [pc, #28]	@ (800cdf8 <gos_queueInit+0xb0>)
 800cdda:	f7ff fe31 	bl	800ca40 <gos_mutexInit>
 800cdde:	4603      	mov	r3, r0
 800cde0:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 800cde2:	797b      	ldrb	r3, [r7, #5]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20003900 	.word	0x20003900
 800cdf0:	20003904 	.word	0x20003904
 800cdf4:	20002154 	.word	0x20002154
 800cdf8:	20003908 	.word	0x20003908

0800cdfc <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 800ce04:	23ae      	movs	r3, #174	@ 0xae
 800ce06:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d048      	beq.n	800cea4 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800ce12:	2300      	movs	r3, #0
 800ce14:	73bb      	strb	r3, [r7, #14]
 800ce16:	e042      	b.n	800ce9e <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
 800ce1a:	4a25      	ldr	r2, [pc, #148]	@ (800ceb0 <gos_queueCreate+0xb4>)
 800ce1c:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800ce20:	fb01 f303 	mul.w	r3, r1, r3
 800ce24:	4413      	add	r3, r2
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce2c:	d134      	bne.n	800ce98 <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 800ce2e:	7bbb      	ldrb	r3, [r7, #14]
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	7bbb      	ldrb	r3, [r7, #14]
 800ce34:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 800ce38:	b290      	uxth	r0, r2
 800ce3a:	4a1d      	ldr	r2, [pc, #116]	@ (800ceb0 <gos_queueCreate+0xb4>)
 800ce3c:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800ce40:	fb01 f303 	mul.w	r3, r1, r3
 800ce44:	4413      	add	r3, r2
 800ce46:	4602      	mov	r2, r0
 800ce48:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 800ce4a:	7bbb      	ldrb	r3, [r7, #14]
 800ce4c:	4a18      	ldr	r2, [pc, #96]	@ (800ceb0 <gos_queueCreate+0xb4>)
 800ce4e:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800ce52:	fb01 f303 	mul.w	r3, r1, r3
 800ce56:	4413      	add	r3, r2
 800ce58:	881a      	ldrh	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3302      	adds	r3, #2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d015      	beq.n	800ce92 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3302      	adds	r3, #2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7f3 fa20 	bl	80002b0 <strlen>
 800ce70:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 800ce72:	2b18      	cmp	r3, #24
 800ce74:	d80d      	bhi.n	800ce92 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	f241 72aa 	movw	r2, #6058	@ 0x17aa
 800ce7c:	fb02 f303 	mul.w	r3, r2, r3
 800ce80:	4a0b      	ldr	r2, [pc, #44]	@ (800ceb0 <gos_queueCreate+0xb4>)
 800ce82:	4413      	add	r3, r2
 800ce84:	1c9a      	adds	r2, r3, #2
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	3302      	adds	r3, #2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	f009 ff16 	bl	8016cbe <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 800ce92:	2355      	movs	r3, #85	@ 0x55
 800ce94:	73fb      	strb	r3, [r7, #15]
                break;
 800ce96:	e005      	b.n	800cea4 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800ce98:	7bbb      	ldrb	r3, [r7, #14]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	73bb      	strb	r3, [r7, #14]
 800ce9e:	7bbb      	ldrb	r3, [r7, #14]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0b9      	beq.n	800ce18 <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20002154 	.word	0x20002154

0800ceb4 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607b      	str	r3, [r7, #4]
 800cebe:	4603      	mov	r3, r0
 800cec0:	81fb      	strh	r3, [r7, #14]
 800cec2:	4613      	mov	r3, r2
 800cec4:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 800cec6:	23ae      	movs	r3, #174	@ 0xae
 800cec8:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 800ceca:	2300      	movs	r3, #0
 800cecc:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 800cece:	6879      	ldr	r1, [r7, #4]
 800ced0:	485a      	ldr	r0, [pc, #360]	@ (800d03c <gos_queuePut+0x188>)
 800ced2:	f7ff fdcf 	bl	800ca74 <gos_mutexLock>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b55      	cmp	r3, #85	@ 0x55
 800ceda:	f040 80a6 	bne.w	800d02a <gos_queuePut+0x176>
 800cede:	89fb      	ldrh	r3, [r7, #14]
 800cee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cee4:	f0c0 80a1 	bcc.w	800d02a <gos_queuePut+0x176>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 800cee8:	89fb      	ldrh	r3, [r7, #14]
 800ceea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ceee:	f200 809c 	bhi.w	800d02a <gos_queuePut+0x176>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 8098 	beq.w	800d02a <gos_queuePut+0x176>
        element                                          != NULL                 &&
 800cefa:	7b7b      	ldrb	r3, [r7, #13]
 800cefc:	2bc8      	cmp	r3, #200	@ 0xc8
 800cefe:	f200 8094 	bhi.w	800d02a <gos_queuePut+0x176>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 800cf02:	89fb      	ldrh	r3, [r7, #14]
 800cf04:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 800cf08:	4a4d      	ldr	r2, [pc, #308]	@ (800d040 <gos_queuePut+0x18c>)
 800cf0a:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800cf0e:	fb01 f303 	mul.w	r3, r1, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 800cf16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf1a:	f000 8086 	beq.w	800d02a <gos_queuePut+0x176>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 800cf1e:	89fb      	ldrh	r3, [r7, #14]
 800cf20:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 800cf22:	7dbb      	ldrb	r3, [r7, #22]
 800cf24:	4a47      	ldr	r2, [pc, #284]	@ (800d044 <gos_queuePut+0x190>)
 800cf26:	5cd3      	ldrb	r3, [r2, r3]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d009      	beq.n	800cf40 <gos_queuePut+0x8c>
 800cf2c:	7dbb      	ldrb	r3, [r7, #22]
 800cf2e:	4a46      	ldr	r2, [pc, #280]	@ (800d048 <gos_queuePut+0x194>)
 800cf30:	5cd3      	ldrb	r3, [r2, r3]
 800cf32:	4619      	mov	r1, r3
 800cf34:	7dbb      	ldrb	r3, [r7, #22]
 800cf36:	4a43      	ldr	r2, [pc, #268]	@ (800d044 <gos_queuePut+0x190>)
 800cf38:	5cd3      	ldrb	r3, [r2, r3]
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	4299      	cmp	r1, r3
 800cf3e:	d109      	bne.n	800cf54 <gos_queuePut+0xa0>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 800cf40:	7dbb      	ldrb	r3, [r7, #22]
 800cf42:	4a40      	ldr	r2, [pc, #256]	@ (800d044 <gos_queuePut+0x190>)
 800cf44:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d16f      	bne.n	800d02a <gos_queuePut+0x176>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 800cf4a:	7dbb      	ldrb	r3, [r7, #22]
 800cf4c:	4a3e      	ldr	r2, [pc, #248]	@ (800d048 <gos_queuePut+0x194>)
 800cf4e:	5cd3      	ldrb	r3, [r2, r3]
 800cf50:	2b1d      	cmp	r3, #29
 800cf52:	d06a      	beq.n	800d02a <gos_queuePut+0x176>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 800cf54:	7dbb      	ldrb	r3, [r7, #22]
 800cf56:	7dba      	ldrb	r2, [r7, #22]
 800cf58:	493b      	ldr	r1, [pc, #236]	@ (800d048 <gos_queuePut+0x194>)
 800cf5a:	5c8a      	ldrb	r2, [r1, r2]
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	22c9      	movs	r2, #201	@ 0xc9
 800cf60:	fb01 f202 	mul.w	r2, r1, r2
 800cf64:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800cf68:	fb01 f303 	mul.w	r3, r1, r3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	3318      	adds	r3, #24
 800cf70:	4a33      	ldr	r2, [pc, #204]	@ (800d040 <gos_queuePut+0x18c>)
 800cf72:	4413      	add	r3, r2
 800cf74:	3302      	adds	r3, #2
            (void_t) memcpy(
 800cf76:	7b7a      	ldrb	r2, [r7, #13]
 800cf78:	68b9      	ldr	r1, [r7, #8]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f009 fea7 	bl	8016cce <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 800cf80:	7dbb      	ldrb	r3, [r7, #22]
 800cf82:	7dba      	ldrb	r2, [r7, #22]
 800cf84:	4930      	ldr	r1, [pc, #192]	@ (800d048 <gos_queuePut+0x194>)
 800cf86:	5c8a      	ldrb	r2, [r1, r2]
 800cf88:	4610      	mov	r0, r2
 800cf8a:	492d      	ldr	r1, [pc, #180]	@ (800d040 <gos_queuePut+0x18c>)
 800cf8c:	22c9      	movs	r2, #201	@ 0xc9
 800cf8e:	fb00 f202 	mul.w	r2, r0, r2
 800cf92:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 800cf96:	fb00 f303 	mul.w	r3, r0, r3
 800cf9a:	4413      	add	r3, r2
 800cf9c:	440b      	add	r3, r1
 800cf9e:	33e2      	adds	r3, #226	@ 0xe2
 800cfa0:	7b7a      	ldrb	r2, [r7, #13]
 800cfa2:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 800cfa4:	7dbb      	ldrb	r3, [r7, #22]
 800cfa6:	4a28      	ldr	r2, [pc, #160]	@ (800d048 <gos_queuePut+0x194>)
 800cfa8:	5cd2      	ldrb	r2, [r2, r3]
 800cfaa:	3201      	adds	r2, #1
 800cfac:	b2d1      	uxtb	r1, r2
 800cfae:	4a26      	ldr	r2, [pc, #152]	@ (800d048 <gos_queuePut+0x194>)
 800cfb0:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 800cfb2:	7dba      	ldrb	r2, [r7, #22]
 800cfb4:	4922      	ldr	r1, [pc, #136]	@ (800d040 <gos_queuePut+0x18c>)
 800cfb6:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 800cfba:	fb02 f303 	mul.w	r3, r2, r3
 800cfbe:	440b      	add	r3, r1
 800cfc0:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800cfc4:	3308      	adds	r3, #8
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	b2d8      	uxtb	r0, r3
 800cfcc:	491c      	ldr	r1, [pc, #112]	@ (800d040 <gos_queuePut+0x18c>)
 800cfce:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 800cfd2:	fb02 f303 	mul.w	r3, r2, r3
 800cfd6:	440b      	add	r3, r1
 800cfd8:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800cfdc:	3308      	adds	r3, #8
 800cfde:	4602      	mov	r2, r0
 800cfe0:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 800cfe2:	7dbb      	ldrb	r3, [r7, #22]
 800cfe4:	4a18      	ldr	r2, [pc, #96]	@ (800d048 <gos_queuePut+0x194>)
 800cfe6:	5cd3      	ldrb	r3, [r2, r3]
 800cfe8:	2b1d      	cmp	r3, #29
 800cfea:	d903      	bls.n	800cff4 <gos_queuePut+0x140>
            {
                writeCounters[queueIndex] = 0u;
 800cfec:	7dbb      	ldrb	r3, [r7, #22]
 800cfee:	4a16      	ldr	r2, [pc, #88]	@ (800d048 <gos_queuePut+0x194>)
 800cff0:	2100      	movs	r1, #0
 800cff2:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 800cff4:	7dbb      	ldrb	r3, [r7, #22]
 800cff6:	4a12      	ldr	r2, [pc, #72]	@ (800d040 <gos_queuePut+0x18c>)
 800cff8:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800cffc:	fb01 f303 	mul.w	r3, r1, r3
 800d000:	4413      	add	r3, r2
 800d002:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800d006:	3308      	adds	r3, #8
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b1d      	cmp	r3, #29
 800d00c:	d10b      	bne.n	800d026 <gos_queuePut+0x172>
                queueFullHook != NULL)
 800d00e:	4b0f      	ldr	r3, [pc, #60]	@ (800d04c <gos_queuePut+0x198>)
 800d010:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 800d012:	2b00      	cmp	r3, #0
 800d014:	d007      	beq.n	800d026 <gos_queuePut+0x172>
            {
                gos_mutexUnlock(&queueMutex);
 800d016:	4809      	ldr	r0, [pc, #36]	@ (800d03c <gos_queuePut+0x188>)
 800d018:	f7ff fe32 	bl	800cc80 <gos_mutexUnlock>
                queueFullHook(queueId);
 800d01c:	4b0b      	ldr	r3, [pc, #44]	@ (800d04c <gos_queuePut+0x198>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	89fa      	ldrh	r2, [r7, #14]
 800d022:	4610      	mov	r0, r2
 800d024:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 800d026:	2355      	movs	r3, #85	@ 0x55
 800d028:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 800d02a:	4804      	ldr	r0, [pc, #16]	@ (800d03c <gos_queuePut+0x188>)
 800d02c:	f7ff fe28 	bl	800cc80 <gos_mutexUnlock>

    return queuePutResult;
 800d030:	7dfb      	ldrb	r3, [r7, #23]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20003908 	.word	0x20003908
 800d040:	20002154 	.word	0x20002154
 800d044:	20003900 	.word	0x20003900
 800d048:	20003904 	.word	0x20003904
 800d04c:	2000390c 	.word	0x2000390c

0800d050 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 800d050:	b590      	push	{r4, r7, lr}
 800d052:	b087      	sub	sp, #28
 800d054:	af00      	add	r7, sp, #0
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607b      	str	r3, [r7, #4]
 800d05a:	4603      	mov	r3, r0
 800d05c:	81fb      	strh	r3, [r7, #14]
 800d05e:	4613      	mov	r3, r2
 800d060:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 800d062:	23ae      	movs	r3, #174	@ 0xae
 800d064:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 800d066:	2300      	movs	r3, #0
 800d068:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	4864      	ldr	r0, [pc, #400]	@ (800d200 <gos_queueGet+0x1b0>)
 800d06e:	f7ff fd01 	bl	800ca74 <gos_mutexLock>
 800d072:	4603      	mov	r3, r0
 800d074:	2b55      	cmp	r3, #85	@ 0x55
 800d076:	f040 80ba 	bne.w	800d1ee <gos_queueGet+0x19e>
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 80b6 	beq.w	800d1ee <gos_queueGet+0x19e>
        target                                           != NULL                 &&
 800d082:	89fb      	ldrh	r3, [r7, #14]
 800d084:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d088:	f0c0 80b1 	bcc.w	800d1ee <gos_queueGet+0x19e>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 800d08c:	89fb      	ldrh	r3, [r7, #14]
 800d08e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d092:	f200 80ac 	bhi.w	800d1ee <gos_queueGet+0x19e>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 800d096:	89fb      	ldrh	r3, [r7, #14]
 800d098:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 800d09c:	4a59      	ldr	r2, [pc, #356]	@ (800d204 <gos_queueGet+0x1b4>)
 800d09e:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800d0a2:	fb01 f303 	mul.w	r3, r1, r3
 800d0a6:	4413      	add	r3, r2
 800d0a8:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 800d0aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0ae:	f000 809e 	beq.w	800d1ee <gos_queueGet+0x19e>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 800d0b2:	89fb      	ldrh	r3, [r7, #14]
 800d0b4:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 800d0b8:	89fa      	ldrh	r2, [r7, #14]
 800d0ba:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800d0be:	4952      	ldr	r1, [pc, #328]	@ (800d208 <gos_queueGet+0x1b8>)
 800d0c0:	5c8a      	ldrb	r2, [r1, r2]
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	494f      	ldr	r1, [pc, #316]	@ (800d204 <gos_queueGet+0x1b4>)
 800d0c6:	22c9      	movs	r2, #201	@ 0xc9
 800d0c8:	fb00 f202 	mul.w	r2, r0, r2
 800d0cc:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 800d0d0:	fb00 f303 	mul.w	r3, r0, r3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	440b      	add	r3, r1
 800d0d8:	33e2      	adds	r3, #226	@ 0xe2
 800d0da:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 800d0dc:	7b7a      	ldrb	r2, [r7, #13]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	f0c0 8085 	bcc.w	800d1ee <gos_queueGet+0x19e>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 800d0e4:	89fb      	ldrh	r3, [r7, #14]
 800d0e6:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 800d0e8:	7dbb      	ldrb	r3, [r7, #22]
 800d0ea:	4a47      	ldr	r2, [pc, #284]	@ (800d208 <gos_queueGet+0x1b8>)
 800d0ec:	5cd2      	ldrb	r2, [r2, r3]
 800d0ee:	7dbb      	ldrb	r3, [r7, #22]
 800d0f0:	4946      	ldr	r1, [pc, #280]	@ (800d20c <gos_queueGet+0x1bc>)
 800d0f2:	5ccb      	ldrb	r3, [r1, r3]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d07a      	beq.n	800d1ee <gos_queueGet+0x19e>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 800d0f8:	7dbb      	ldrb	r3, [r7, #22]
 800d0fa:	7dba      	ldrb	r2, [r7, #22]
 800d0fc:	4942      	ldr	r1, [pc, #264]	@ (800d208 <gos_queueGet+0x1b8>)
 800d0fe:	5c8a      	ldrb	r2, [r1, r2]
 800d100:	4611      	mov	r1, r2
 800d102:	22c9      	movs	r2, #201	@ 0xc9
 800d104:	fb01 f202 	mul.w	r2, r1, r2
 800d108:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800d10c:	fb01 f303 	mul.w	r3, r1, r3
 800d110:	4413      	add	r3, r2
 800d112:	3318      	adds	r3, #24
 800d114:	4a3b      	ldr	r2, [pc, #236]	@ (800d204 <gos_queueGet+0x1b4>)
 800d116:	4413      	add	r3, r2
 800d118:	1c99      	adds	r1, r3, #2
 800d11a:	7dbb      	ldrb	r3, [r7, #22]
 800d11c:	7dba      	ldrb	r2, [r7, #22]
 800d11e:	483a      	ldr	r0, [pc, #232]	@ (800d208 <gos_queueGet+0x1b8>)
 800d120:	5c82      	ldrb	r2, [r0, r2]
 800d122:	4614      	mov	r4, r2
 800d124:	4837      	ldr	r0, [pc, #220]	@ (800d204 <gos_queueGet+0x1b4>)
 800d126:	22c9      	movs	r2, #201	@ 0xc9
 800d128:	fb04 f202 	mul.w	r2, r4, r2
 800d12c:	f241 74aa 	movw	r4, #6058	@ 0x17aa
 800d130:	fb04 f303 	mul.w	r3, r4, r3
 800d134:	4413      	add	r3, r2
 800d136:	4403      	add	r3, r0
 800d138:	33e2      	adds	r3, #226	@ 0xe2
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	461a      	mov	r2, r3
 800d13e:	68b8      	ldr	r0, [r7, #8]
 800d140:	f009 fdc5 	bl	8016cce <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 800d144:	7dbb      	ldrb	r3, [r7, #22]
 800d146:	7dba      	ldrb	r2, [r7, #22]
 800d148:	492f      	ldr	r1, [pc, #188]	@ (800d208 <gos_queueGet+0x1b8>)
 800d14a:	5c8a      	ldrb	r2, [r1, r2]
 800d14c:	4610      	mov	r0, r2
 800d14e:	492d      	ldr	r1, [pc, #180]	@ (800d204 <gos_queueGet+0x1b4>)
 800d150:	22c9      	movs	r2, #201	@ 0xc9
 800d152:	fb00 f202 	mul.w	r2, r0, r2
 800d156:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 800d15a:	fb00 f303 	mul.w	r3, r0, r3
 800d15e:	4413      	add	r3, r2
 800d160:	440b      	add	r3, r1
 800d162:	33e2      	adds	r3, #226	@ 0xe2
 800d164:	2200      	movs	r2, #0
 800d166:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 800d168:	7dbb      	ldrb	r3, [r7, #22]
 800d16a:	4a27      	ldr	r2, [pc, #156]	@ (800d208 <gos_queueGet+0x1b8>)
 800d16c:	5cd2      	ldrb	r2, [r2, r3]
 800d16e:	3201      	adds	r2, #1
 800d170:	b2d1      	uxtb	r1, r2
 800d172:	4a25      	ldr	r2, [pc, #148]	@ (800d208 <gos_queueGet+0x1b8>)
 800d174:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 800d176:	7dba      	ldrb	r2, [r7, #22]
 800d178:	4922      	ldr	r1, [pc, #136]	@ (800d204 <gos_queueGet+0x1b4>)
 800d17a:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 800d17e:	fb02 f303 	mul.w	r3, r2, r3
 800d182:	440b      	add	r3, r1
 800d184:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800d188:	3308      	adds	r3, #8
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	b2d8      	uxtb	r0, r3
 800d190:	491c      	ldr	r1, [pc, #112]	@ (800d204 <gos_queueGet+0x1b4>)
 800d192:	f241 73aa 	movw	r3, #6058	@ 0x17aa
 800d196:	fb02 f303 	mul.w	r3, r2, r3
 800d19a:	440b      	add	r3, r1
 800d19c:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 800d1a6:	7dbb      	ldrb	r3, [r7, #22]
 800d1a8:	4a17      	ldr	r2, [pc, #92]	@ (800d208 <gos_queueGet+0x1b8>)
 800d1aa:	5cd3      	ldrb	r3, [r2, r3]
 800d1ac:	2b1d      	cmp	r3, #29
 800d1ae:	d903      	bls.n	800d1b8 <gos_queueGet+0x168>
            {
                readCounters[queueIndex] = 0u;
 800d1b0:	7dbb      	ldrb	r3, [r7, #22]
 800d1b2:	4a15      	ldr	r2, [pc, #84]	@ (800d208 <gos_queueGet+0x1b8>)
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 800d1b8:	7dbb      	ldrb	r3, [r7, #22]
 800d1ba:	4a12      	ldr	r2, [pc, #72]	@ (800d204 <gos_queueGet+0x1b4>)
 800d1bc:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800d1c0:	fb01 f303 	mul.w	r3, r1, r3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10b      	bne.n	800d1ea <gos_queueGet+0x19a>
                queueEmptyHook != NULL)
 800d1d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d210 <gos_queueGet+0x1c0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d007      	beq.n	800d1ea <gos_queueGet+0x19a>
            {
                gos_mutexUnlock(&queueMutex);
 800d1da:	4809      	ldr	r0, [pc, #36]	@ (800d200 <gos_queueGet+0x1b0>)
 800d1dc:	f7ff fd50 	bl	800cc80 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 800d1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d210 <gos_queueGet+0x1c0>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	89fa      	ldrh	r2, [r7, #14]
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 800d1ea:	2355      	movs	r3, #85	@ 0x55
 800d1ec:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 800d1ee:	4804      	ldr	r0, [pc, #16]	@ (800d200 <gos_queueGet+0x1b0>)
 800d1f0:	f7ff fd46 	bl	800cc80 <gos_mutexUnlock>

    return queueGetResult;
 800d1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd90      	pop	{r4, r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20003908 	.word	0x20003908
 800d204:	20002154 	.word	0x20002154
 800d208:	20003900 	.word	0x20003900
 800d20c:	20003904 	.word	0x20003904
 800d210:	20003910 	.word	0x20003910

0800d214 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 800d214:	b590      	push	{r4, r7, lr}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 800d21a:	2300      	movs	r3, #0
 800d21c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 800d21e:	4826      	ldr	r0, [pc, #152]	@ (800d2b8 <gos_queueDump+0xa4>)
 800d220:	f001 fa18 	bl	800e654 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 800d224:	4825      	ldr	r0, [pc, #148]	@ (800d2bc <gos_queueDump+0xa8>)
 800d226:	f001 fa15 	bl	800e654 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 800d22a:	4b25      	ldr	r3, [pc, #148]	@ (800d2c0 <gos_queueDump+0xac>)
 800d22c:	4a25      	ldr	r2, [pc, #148]	@ (800d2c4 <gos_queueDump+0xb0>)
 800d22e:	4926      	ldr	r1, [pc, #152]	@ (800d2c8 <gos_queueDump+0xb4>)
 800d230:	4826      	ldr	r0, [pc, #152]	@ (800d2cc <gos_queueDump+0xb8>)
 800d232:	f001 fa0f 	bl	800e654 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 800d236:	4821      	ldr	r0, [pc, #132]	@ (800d2bc <gos_queueDump+0xa8>)
 800d238:	f001 fa0c 	bl	800e654 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d23c:	2300      	movs	r3, #0
 800d23e:	71fb      	strb	r3, [r7, #7]
 800d240:	e02d      	b.n	800d29e <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800d242:	79fb      	ldrb	r3, [r7, #7]
 800d244:	4a22      	ldr	r2, [pc, #136]	@ (800d2d0 <gos_queueDump+0xbc>)
 800d246:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800d24a:	fb01 f303 	mul.w	r3, r1, r3
 800d24e:	4413      	add	r3, r2
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d256:	d026      	beq.n	800d2a6 <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	4a1d      	ldr	r2, [pc, #116]	@ (800d2d0 <gos_queueDump+0xbc>)
 800d25c:	f241 71aa 	movw	r1, #6058	@ 0x17aa
 800d260:	fb01 f303 	mul.w	r3, r1, r3
 800d264:	4413      	add	r3, r2
 800d266:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800d268:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	f241 72aa 	movw	r2, #6058	@ 0x17aa
 800d270:	fb02 f303 	mul.w	r3, r2, r3
 800d274:	4a16      	ldr	r2, [pc, #88]	@ (800d2d0 <gos_queueDump+0xbc>)
 800d276:	4413      	add	r3, r2
 800d278:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	4914      	ldr	r1, [pc, #80]	@ (800d2d0 <gos_queueDump+0xbc>)
 800d27e:	f241 70aa 	movw	r0, #6058	@ 0x17aa
 800d282:	fb00 f303 	mul.w	r3, r0, r3
 800d286:	440b      	add	r3, r1
 800d288:	f503 53bd 	add.w	r3, r3, #6048	@ 0x17a0
 800d28c:	3308      	adds	r3, #8
 800d28e:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800d290:	4621      	mov	r1, r4
 800d292:	4810      	ldr	r0, [pc, #64]	@ (800d2d4 <gos_queueDump+0xc0>)
 800d294:	f001 f9de 	bl	800e654 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d298:	79fb      	ldrb	r3, [r7, #7]
 800d29a:	3301      	adds	r3, #1
 800d29c:	71fb      	strb	r3, [r7, #7]
 800d29e:	79fb      	ldrb	r3, [r7, #7]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0ce      	beq.n	800d242 <gos_queueDump+0x2e>
 800d2a4:	e000      	b.n	800d2a8 <gos_queueDump+0x94>
            break;
 800d2a6:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 800d2a8:	480b      	ldr	r0, [pc, #44]	@ (800d2d8 <gos_queueDump+0xc4>)
 800d2aa:	f001 f9d3 	bl	800e654 <gos_shellDriverTransmitString>
}
 800d2ae:	bf00      	nop
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd90      	pop	{r4, r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	080199ec 	.word	0x080199ec
 800d2bc:	080199fc 	.word	0x080199fc
 800d2c0:	08019a38 	.word	0x08019a38
 800d2c4:	08019a44 	.word	0x08019a44
 800d2c8:	08019a4c 	.word	0x08019a4c
 800d2cc:	08019a50 	.word	0x08019a50
 800d2d0:	20002154 	.word	0x20002154
 800d2d4:	08019a68 	.word	0x08019a68
 800d2d8:	08019a84 	.word	0x08019a84

0800d2dc <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 800d2e2:	23ae      	movs	r3, #174	@ 0xae
 800d2e4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 800d2e6:	4b06      	ldr	r3, [pc, #24]	@ (800d300 <gos_shellResume+0x24>)
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fd fafc 	bl	800a8e8 <gos_taskResume>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20003914 	.word	0x20003914

0800d304 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_ERROR;
 800d30a:	23ae      	movs	r3, #174	@ 0xae
 800d30c:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 800d30e:	2300      	movs	r3, #0
 800d310:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800d312:	2300      	movs	r3, #0
 800d314:	71bb      	strb	r3, [r7, #6]
 800d316:	e00a      	b.n	800d32e <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 800d318:	79bb      	ldrb	r3, [r7, #6]
 800d31a:	4a16      	ldr	r2, [pc, #88]	@ (800d374 <gos_signalInit+0x70>)
 800d31c:	212c      	movs	r1, #44	@ 0x2c
 800d31e:	fb01 f303 	mul.w	r3, r1, r3
 800d322:	4413      	add	r3, r2
 800d324:	2249      	movs	r2, #73	@ 0x49
 800d326:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800d328:	79bb      	ldrb	r3, [r7, #6]
 800d32a:	3301      	adds	r3, #1
 800d32c:	71bb      	strb	r3, [r7, #6]
 800d32e:	79bb      	ldrb	r3, [r7, #6]
 800d330:	2b02      	cmp	r3, #2
 800d332:	d9f1      	bls.n	800d318 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 800d334:	2100      	movs	r1, #0
 800d336:	4810      	ldr	r0, [pc, #64]	@ (800d378 <gos_signalInit+0x74>)
 800d338:	f7fc feca 	bl	800a0d0 <gos_taskRegister>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b55      	cmp	r3, #85	@ 0x55
 800d340:	d113      	bne.n	800d36a <gos_signalInit+0x66>
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 800d342:	480e      	ldr	r0, [pc, #56]	@ (800d37c <gos_signalInit+0x78>)
 800d344:	f000 f820 	bl	800d388 <gos_signalCreate>
 800d348:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) == GOS_SUCCESS &&
 800d34a:	2b55      	cmp	r3, #85	@ 0x55
 800d34c:	d10d      	bne.n	800d36a <gos_signalInit+0x66>
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 800d34e:	480c      	ldr	r0, [pc, #48]	@ (800d380 <gos_signalInit+0x7c>)
 800d350:	f000 f81a 	bl	800d388 <gos_signalCreate>
 800d354:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           == GOS_SUCCESS &&
 800d356:	2b55      	cmp	r3, #85	@ 0x55
 800d358:	d107      	bne.n	800d36a <gos_signalInit+0x66>
        gos_triggerInit(&signalInvokeTrigger)               == GOS_SUCCESS
 800d35a:	480a      	ldr	r0, [pc, #40]	@ (800d384 <gos_signalInit+0x80>)
 800d35c:	f000 ff8e 	bl	800e27c <gos_triggerInit>
 800d360:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            == GOS_SUCCESS &&
 800d362:	2b55      	cmp	r3, #85	@ 0x55
 800d364:	d101      	bne.n	800d36a <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_SUCCESS;
 800d366:	2355      	movs	r3, #85	@ 0x55
 800d368:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 800d36a:	79fb      	ldrb	r3, [r7, #7]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20003918 	.word	0x20003918
 800d378:	20000c78 	.word	0x20000c78
 800d37c:	20001990 	.word	0x20001990
 800d380:	20001960 	.word	0x20001960
 800d384:	2000399c 	.word	0x2000399c

0800d388 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 800d390:	23ae      	movs	r3, #174	@ 0xae
 800d392:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 800d394:	2300      	movs	r3, #0
 800d396:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800d398:	2300      	movs	r3, #0
 800d39a:	73bb      	strb	r3, [r7, #14]
 800d39c:	e025      	b.n	800d3ea <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 800d39e:	7bbb      	ldrb	r3, [r7, #14]
 800d3a0:	4a17      	ldr	r2, [pc, #92]	@ (800d400 <gos_signalCreate+0x78>)
 800d3a2:	212c      	movs	r1, #44	@ 0x2c
 800d3a4:	fb01 f303 	mul.w	r3, r1, r3
 800d3a8:	4413      	add	r3, r2
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2b49      	cmp	r3, #73	@ 0x49
 800d3ae:	d119      	bne.n	800d3e4 <gos_signalCreate+0x5c>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d016      	beq.n	800d3e4 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	7bba      	ldrb	r2, [r7, #14]
 800d3ba:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	4a10      	ldr	r2, [pc, #64]	@ (800d400 <gos_signalCreate+0x78>)
 800d3c0:	212c      	movs	r1, #44	@ 0x2c
 800d3c2:	fb01 f303 	mul.w	r3, r1, r3
 800d3c6:	4413      	add	r3, r2
 800d3c8:	2236      	movs	r2, #54	@ 0x36
 800d3ca:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800d3cc:	7bbb      	ldrb	r3, [r7, #14]
 800d3ce:	4a0c      	ldr	r2, [pc, #48]	@ (800d400 <gos_signalCreate+0x78>)
 800d3d0:	212c      	movs	r1, #44	@ 0x2c
 800d3d2:	fb01 f303 	mul.w	r3, r1, r3
 800d3d6:	4413      	add	r3, r2
 800d3d8:	3328      	adds	r3, #40	@ 0x28
 800d3da:	2249      	movs	r2, #73	@ 0x49
 800d3dc:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 800d3de:	2355      	movs	r3, #85	@ 0x55
 800d3e0:	73fb      	strb	r3, [r7, #15]
            break;
 800d3e2:	e005      	b.n	800d3f0 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	73bb      	strb	r3, [r7, #14]
 800d3ea:	7bbb      	ldrb	r3, [r7, #14]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d9d6      	bls.n	800d39e <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3714      	adds	r7, #20
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	20003918 	.word	0x20003918

0800d404 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af02      	add	r7, sp, #8
 800d40a:	4603      	mov	r3, r0
 800d40c:	460a      	mov	r2, r1
 800d40e:	71fb      	strb	r3, [r7, #7]
 800d410:	4613      	mov	r3, r2
 800d412:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 800d414:	23ae      	movs	r3, #174	@ 0xae
 800d416:	73fb      	strb	r3, [r7, #15]
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 800d418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d41c:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 800d41e:	79fb      	ldrb	r3, [r7, #7]
 800d420:	2b02      	cmp	r3, #2
 800d422:	d844      	bhi.n	800d4ae <gos_signalInvoke+0xaa>
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	4a24      	ldr	r2, [pc, #144]	@ (800d4b8 <gos_signalInvoke+0xb4>)
 800d428:	212c      	movs	r1, #44	@ 0x2c
 800d42a:	fb01 f303 	mul.w	r3, r1, r3
 800d42e:	4413      	add	r3, r2
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	2b36      	cmp	r3, #54	@ 0x36
 800d434:	d13b      	bne.n	800d4ae <gos_signalInvoke+0xaa>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800d436:	f7fc fb2b 	bl	8009a90 <gos_kernelIsCallerIsr>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b36      	cmp	r3, #54	@ 0x36
 800d43e:	d015      	beq.n	800d46c <gos_signalInvoke+0x68>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800d440:	f107 030c 	add.w	r3, r7, #12
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe f9e9 	bl	800b81c <gos_taskGetCurrentId>
 800d44a:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800d44c:	2b55      	cmp	r3, #85	@ 0x55
 800d44e:	d125      	bne.n	800d49c <gos_signalInvoke+0x98>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800d450:	89bb      	ldrh	r3, [r7, #12]
 800d452:	491a      	ldr	r1, [pc, #104]	@ (800d4bc <gos_signalInvoke+0xb8>)
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe fa3d 	bl	800b8d4 <gos_taskGetData>
 800d45a:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800d45c:	2b55      	cmp	r3, #85	@ 0x55
 800d45e:	d11d      	bne.n	800d49c <gos_signalInvoke+0x98>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 800d460:	4b16      	ldr	r3, [pc, #88]	@ (800d4bc <gos_signalInvoke+0xb8>)
 800d462:	891b      	ldrh	r3, [r3, #8]
 800d464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d017      	beq.n	800d49c <gos_signalInvoke+0x98>
            )
        {
            signalArray[signalId].senderId       = senderId;
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	4a12      	ldr	r2, [pc, #72]	@ (800d4b8 <gos_signalInvoke+0xb4>)
 800d470:	212c      	movs	r1, #44	@ 0x2c
 800d472:	fb01 f303 	mul.w	r3, r1, r3
 800d476:	4413      	add	r3, r2
 800d478:	332a      	adds	r3, #42	@ 0x2a
 800d47a:	88ba      	ldrh	r2, [r7, #4]
 800d47c:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 800d47e:	79fb      	ldrb	r3, [r7, #7]
 800d480:	4a0d      	ldr	r2, [pc, #52]	@ (800d4b8 <gos_signalInvoke+0xb4>)
 800d482:	212c      	movs	r1, #44	@ 0x2c
 800d484:	fb01 f303 	mul.w	r3, r1, r3
 800d488:	4413      	add	r3, r2
 800d48a:	3328      	adds	r3, #40	@ 0x28
 800d48c:	2236      	movs	r2, #54	@ 0x36
 800d48e:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 800d490:	2355      	movs	r3, #85	@ 0x55
 800d492:	73fb      	strb	r3, [r7, #15]

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 800d494:	480a      	ldr	r0, [pc, #40]	@ (800d4c0 <gos_signalInvoke+0xbc>)
 800d496:	f001 f815 	bl	800e4c4 <gos_triggerIncrement>
 800d49a:	e008      	b.n	800d4ae <gos_signalInvoke+0xaa>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 800d49c:	4b09      	ldr	r3, [pc, #36]	@ (800d4c4 <gos_signalInvoke+0xc0>)
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	4b09      	ldr	r3, [pc, #36]	@ (800d4c8 <gos_signalInvoke+0xc4>)
 800d4a2:	f240 1221 	movw	r2, #289	@ 0x121
 800d4a6:	4909      	ldr	r1, [pc, #36]	@ (800d4cc <gos_signalInvoke+0xc8>)
 800d4a8:	202e      	movs	r0, #46	@ 0x2e
 800d4aa:	f7fe fc79 	bl	800bda0 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	20003918 	.word	0x20003918
 800d4bc:	200039a8 	.word	0x200039a8
 800d4c0:	2000399c 	.word	0x2000399c
 800d4c4:	200039b2 	.word	0x200039b2
 800d4c8:	08019ac4 	.word	0x08019ac4
 800d4cc:	0801a768 	.word	0x0801a768

0800d4d0 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800d4de:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	4837      	ldr	r0, [pc, #220]	@ (800d5c4 <gos_signalDaemonTask+0xf4>)
 800d4e6:	f000 ff3d 	bl	800e364 <gos_triggerWait>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b55      	cmp	r3, #85	@ 0x55
 800d4ee:	d164      	bne.n	800d5ba <gos_signalDaemonTask+0xea>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 800d4f0:	4834      	ldr	r0, [pc, #208]	@ (800d5c4 <gos_signalDaemonTask+0xf4>)
 800d4f2:	f000 fedf 	bl	800e2b4 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	71bb      	strb	r3, [r7, #6]
 800d4fa:	e05b      	b.n	800d5b4 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 800d4fc:	79bb      	ldrb	r3, [r7, #6]
 800d4fe:	4a32      	ldr	r2, [pc, #200]	@ (800d5c8 <gos_signalDaemonTask+0xf8>)
 800d500:	212c      	movs	r1, #44	@ 0x2c
 800d502:	fb01 f303 	mul.w	r3, r1, r3
 800d506:	4413      	add	r3, r2
 800d508:	3328      	adds	r3, #40	@ 0x28
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2b36      	cmp	r3, #54	@ 0x36
 800d50e:	d14e      	bne.n	800d5ae <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800d510:	2300      	movs	r3, #0
 800d512:	71fb      	strb	r3, [r7, #7]
 800d514:	e03d      	b.n	800d592 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 800d516:	79ba      	ldrb	r2, [r7, #6]
 800d518:	79f9      	ldrb	r1, [r7, #7]
 800d51a:	482b      	ldr	r0, [pc, #172]	@ (800d5c8 <gos_signalDaemonTask+0xf8>)
 800d51c:	4613      	mov	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4413      	add	r3, r2
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	4413      	add	r3, r2
 800d526:	440b      	add	r3, r1
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4403      	add	r3, r0
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d033      	beq.n	800d59a <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 800d532:	4b26      	ldr	r3, [pc, #152]	@ (800d5cc <gos_signalDaemonTask+0xfc>)
 800d534:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 800d536:	79ba      	ldrb	r2, [r7, #6]
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	4923      	ldr	r1, [pc, #140]	@ (800d5c8 <gos_signalDaemonTask+0xf8>)
 800d53c:	2416      	movs	r4, #22
 800d53e:	fb04 f202 	mul.w	r2, r4, r2
 800d542:	4413      	add	r3, r2
 800d544:	330c      	adds	r3, #12
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	440b      	add	r3, r1
 800d54a:	889b      	ldrh	r3, [r3, #4]
 800d54c:	4619      	mov	r1, r3
 800d54e:	f7fe f887 	bl	800b660 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 800d552:	79ba      	ldrb	r2, [r7, #6]
 800d554:	79f9      	ldrb	r1, [r7, #7]
 800d556:	481c      	ldr	r0, [pc, #112]	@ (800d5c8 <gos_signalDaemonTask+0xf8>)
 800d558:	4613      	mov	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4413      	add	r3, r2
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	4413      	add	r3, r2
 800d562:	440b      	add	r3, r1
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	4403      	add	r3, r0
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	79ba      	ldrb	r2, [r7, #6]
 800d56c:	4916      	ldr	r1, [pc, #88]	@ (800d5c8 <gos_signalDaemonTask+0xf8>)
 800d56e:	202c      	movs	r0, #44	@ 0x2c
 800d570:	fb00 f202 	mul.w	r2, r0, r2
 800d574:	440a      	add	r2, r1
 800d576:	322a      	adds	r2, #42	@ 0x2a
 800d578:	8812      	ldrh	r2, [r2, #0]
 800d57a:	4610      	mov	r0, r2
 800d57c:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 800d57e:	4b13      	ldr	r3, [pc, #76]	@ (800d5cc <gos_signalDaemonTask+0xfc>)
 800d580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d582:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe f86a 	bl	800b660 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	3301      	adds	r3, #1
 800d590:	71fb      	strb	r3, [r7, #7]
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	2b05      	cmp	r3, #5
 800d596:	d9be      	bls.n	800d516 <gos_signalDaemonTask+0x46>
 800d598:	e000      	b.n	800d59c <gos_signalDaemonTask+0xcc>
                            break;
 800d59a:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800d59c:	79bb      	ldrb	r3, [r7, #6]
 800d59e:	4a0a      	ldr	r2, [pc, #40]	@ (800d5c8 <gos_signalDaemonTask+0xf8>)
 800d5a0:	212c      	movs	r1, #44	@ 0x2c
 800d5a2:	fb01 f303 	mul.w	r3, r1, r3
 800d5a6:	4413      	add	r3, r2
 800d5a8:	3328      	adds	r3, #40	@ 0x28
 800d5aa:	2249      	movs	r2, #73	@ 0x49
 800d5ac:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800d5ae:	79bb      	ldrb	r3, [r7, #6]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	71bb      	strb	r3, [r7, #6]
 800d5b4:	79bb      	ldrb	r3, [r7, #6]
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d9a0      	bls.n	800d4fc <gos_signalDaemonTask+0x2c>
        else
        {
            // Unexpected error.
        }

        (void_t) gos_taskSleep(GOS_SIGNAL_DAEMON_POLL_TIME_MS);
 800d5ba:	2032      	movs	r0, #50	@ 0x32
 800d5bc:	f7fc ff1a 	bl	800a3f4 <gos_taskSleep>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800d5c0:	e78d      	b.n	800d4de <gos_signalDaemonTask+0xe>
 800d5c2:	bf00      	nop
 800d5c4:	2000399c 	.word	0x2000399c
 800d5c8:	20003918 	.word	0x20003918
 800d5cc:	20000c78 	.word	0x20000c78

0800d5d0 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_ERROR;
 800d5d6:	23ae      	movs	r3, #174	@ 0xae
 800d5d8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 800d5da:	480a      	ldr	r0, [pc, #40]	@ (800d604 <gos_timeInit+0x34>)
 800d5dc:	f7ff fed4 	bl	800d388 <gos_signalCreate>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b55      	cmp	r3, #85	@ 0x55
 800d5e4:	d108      	bne.n	800d5f8 <gos_timeInit+0x28>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) == GOS_SUCCESS
 800d5e6:	4908      	ldr	r1, [pc, #32]	@ (800d608 <gos_timeInit+0x38>)
 800d5e8:	4808      	ldr	r0, [pc, #32]	@ (800d60c <gos_timeInit+0x3c>)
 800d5ea:	f7fc fd71 	bl	800a0d0 <gos_taskRegister>
 800d5ee:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          == GOS_SUCCESS &&
 800d5f0:	2b55      	cmp	r3, #85	@ 0x55
 800d5f2:	d101      	bne.n	800d5f8 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_SUCCESS;
 800d5f4:	2355      	movs	r3, #85	@ 0x55
 800d5f6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 800d5f8:	79fb      	ldrb	r3, [r7, #7]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20003a20 	.word	0x20003a20
 800d608:	20003a1e 	.word	0x20003a1e
 800d60c:	20000cf0 	.word	0x20000cf0

0800d610 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 800d618:	23ae      	movs	r3, #174	@ 0xae
 800d61a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00a      	beq.n	800d638 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4908      	ldr	r1, [pc, #32]	@ (800d648 <gos_timeGet+0x38>)
 800d626:	461a      	mov	r2, r3
 800d628:	460b      	mov	r3, r1
 800d62a:	cb03      	ldmia	r3!, {r0, r1}
 800d62c:	6010      	str	r0, [r2, #0]
 800d62e:	6051      	str	r1, [r2, #4]
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 800d634:	2355      	movs	r3, #85	@ 0x55
 800d636:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	20000ce4 	.word	0x20000ce4

0800d64c <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 800d654:	23ae      	movs	r3, #174	@ 0xae
 800d656:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d008      	beq.n	800d670 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 800d65e:	4b08      	ldr	r3, [pc, #32]	@ (800d680 <gos_timeSet+0x34>)
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	6810      	ldr	r0, [r2, #0]
 800d664:	6851      	ldr	r1, [r2, #4]
 800d666:	c303      	stmia	r3!, {r0, r1}
 800d668:	8912      	ldrh	r2, [r2, #8]
 800d66a:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 800d66c:	2355      	movs	r3, #85	@ 0x55
 800d66e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 800d670:	7bfb      	ldrb	r3, [r7, #15]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	20000ce4 	.word	0x20000ce4

0800d684 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 800d68c:	23ae      	movs	r3, #174	@ 0xae
 800d68e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4908      	ldr	r1, [pc, #32]	@ (800d6bc <gos_runTimeGet+0x38>)
 800d69a:	461a      	mov	r2, r3
 800d69c:	460b      	mov	r3, r1
 800d69e:	cb03      	ldmia	r3!, {r0, r1}
 800d6a0:	6010      	str	r0, [r2, #0]
 800d6a2:	6051      	str	r1, [r2, #4]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 800d6a8:	2355      	movs	r3, #85	@ 0x55
 800d6aa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	20003a14 	.word	0x20003a14

0800d6c0 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 800d6cc:	23ae      	movs	r3, #174	@ 0xae
 800d6ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80e4 	beq.w	800d8a0 <gos_timeAddMilliseconds+0x1e0>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	b29a      	uxth	r2, r3
 800d6de:	887b      	ldrh	r3, [r7, #2]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6f2:	f0c0 80d3 	bcc.w	800d89c <gos_timeAddMilliseconds+0x1dc>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	789a      	ldrb	r2, [r3, #2]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	496b      	ldr	r1, [pc, #428]	@ (800d8b0 <gos_timeAddMilliseconds+0x1f0>)
 800d702:	fba1 1303 	umull	r1, r3, r1, r3
 800d706:	099b      	lsrs	r3, r3, #6
 800d708:	b29b      	uxth	r3, r3
 800d70a:	b2db      	uxtb	r3, r3
 800d70c:	4413      	add	r3, r2
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	b29b      	uxth	r3, r3
 800d71a:	4a65      	ldr	r2, [pc, #404]	@ (800d8b0 <gos_timeAddMilliseconds+0x1f0>)
 800d71c:	fba2 1203 	umull	r1, r2, r2, r3
 800d720:	0992      	lsrs	r2, r2, #6
 800d722:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d726:	fb01 f202 	mul.w	r2, r1, r2
 800d72a:	1a9b      	subs	r3, r3, r2
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	789b      	ldrb	r3, [r3, #2]
 800d736:	2b3b      	cmp	r3, #59	@ 0x3b
 800d738:	f240 80b0 	bls.w	800d89c <gos_timeAddMilliseconds+0x1dc>
            {
                pTime->minutes += pTime->seconds / 60u;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	78da      	ldrb	r2, [r3, #3]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	789b      	ldrb	r3, [r3, #2]
 800d744:	495b      	ldr	r1, [pc, #364]	@ (800d8b4 <gos_timeAddMilliseconds+0x1f4>)
 800d746:	fba1 1303 	umull	r1, r3, r1, r3
 800d74a:	095b      	lsrs	r3, r3, #5
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	4413      	add	r3, r2
 800d750:	b2da      	uxtb	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	789a      	ldrb	r2, [r3, #2]
 800d75a:	4b56      	ldr	r3, [pc, #344]	@ (800d8b4 <gos_timeAddMilliseconds+0x1f4>)
 800d75c:	fba3 1302 	umull	r1, r3, r3, r2
 800d760:	0959      	lsrs	r1, r3, #5
 800d762:	460b      	mov	r3, r1
 800d764:	011b      	lsls	r3, r3, #4
 800d766:	1a5b      	subs	r3, r3, r1
 800d768:	009b      	lsls	r3, r3, #2
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	78db      	ldrb	r3, [r3, #3]
 800d776:	2b3b      	cmp	r3, #59	@ 0x3b
 800d778:	f240 8090 	bls.w	800d89c <gos_timeAddMilliseconds+0x1dc>
                {
                    pTime->hours += pTime->minutes / 60u;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	791a      	ldrb	r2, [r3, #4]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	78db      	ldrb	r3, [r3, #3]
 800d784:	494b      	ldr	r1, [pc, #300]	@ (800d8b4 <gos_timeAddMilliseconds+0x1f4>)
 800d786:	fba1 1303 	umull	r1, r3, r1, r3
 800d78a:	095b      	lsrs	r3, r3, #5
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	4413      	add	r3, r2
 800d790:	b2da      	uxtb	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	78da      	ldrb	r2, [r3, #3]
 800d79a:	4b46      	ldr	r3, [pc, #280]	@ (800d8b4 <gos_timeAddMilliseconds+0x1f4>)
 800d79c:	fba3 1302 	umull	r1, r3, r3, r2
 800d7a0:	0959      	lsrs	r1, r3, #5
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	011b      	lsls	r3, r3, #4
 800d7a6:	1a5b      	subs	r3, r3, r1
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	791b      	ldrb	r3, [r3, #4]
 800d7b6:	2b17      	cmp	r3, #23
 800d7b8:	d970      	bls.n	800d89c <gos_timeAddMilliseconds+0x1dc>
                    {
                        pTime->days += pTime->hours / 24u;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	7912      	ldrb	r2, [r2, #4]
 800d7c6:	493c      	ldr	r1, [pc, #240]	@ (800d8b8 <gos_timeAddMilliseconds+0x1f8>)
 800d7c8:	fba1 1202 	umull	r1, r2, r1, r2
 800d7cc:	0912      	lsrs	r2, r2, #4
 800d7ce:	b2d2      	uxtb	r2, r2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	791a      	ldrb	r2, [r3, #4]
 800d7de:	4b36      	ldr	r3, [pc, #216]	@ (800d8b8 <gos_timeAddMilliseconds+0x1f8>)
 800d7e0:	fba3 1302 	umull	r1, r3, r3, r2
 800d7e4:	0919      	lsrs	r1, r3, #4
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	005b      	lsls	r3, r3, #1
 800d7ea:	440b      	add	r3, r1
 800d7ec:	00db      	lsls	r3, r3, #3
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	891b      	ldrh	r3, [r3, #8]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	f003 0303 	and.w	r3, r3, #3
 800d800:	b29b      	uxth	r3, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	d117      	bne.n	800d836 <gos_timeAddMilliseconds+0x176>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	79db      	ldrb	r3, [r3, #7]
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d113      	bne.n	800d836 <gos_timeAddMilliseconds+0x176>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d814:	b29b      	uxth	r3, r3
 800d816:	2b1d      	cmp	r3, #29
 800d818:	d90d      	bls.n	800d836 <gos_timeAddMilliseconds+0x176>
                        {
                            pTime->days = 1u;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f042 0201 	orr.w	r2, r2, #1
 800d822:	715a      	strb	r2, [r3, #5]
 800d824:	2200      	movs	r2, #0
 800d826:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	79db      	ldrb	r3, [r3, #7]
 800d82c:	3301      	adds	r3, #1
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	71da      	strb	r2, [r3, #7]
 800d834:	e024      	b.n	800d880 <gos_timeAddMilliseconds+0x1c0>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	891b      	ldrh	r3, [r3, #8]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	f003 0303 	and.w	r3, r3, #3
 800d840:	b29b      	uxth	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d103      	bne.n	800d84e <gos_timeAddMilliseconds+0x18e>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	79db      	ldrb	r3, [r3, #7]
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	d018      	beq.n	800d880 <gos_timeAddMilliseconds+0x1c0>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	79db      	ldrb	r3, [r3, #7]
 800d852:	3b01      	subs	r3, #1
 800d854:	4a19      	ldr	r2, [pc, #100]	@ (800d8bc <gos_timeAddMilliseconds+0x1fc>)
 800d856:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d860:	b29b      	uxth	r3, r3
 800d862:	429a      	cmp	r2, r3
 800d864:	d20c      	bcs.n	800d880 <gos_timeAddMilliseconds+0x1c0>
                        {
                            pTime->days = 1u;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f042 0201 	orr.w	r2, r2, #1
 800d86e:	715a      	strb	r2, [r3, #5]
 800d870:	2200      	movs	r2, #0
 800d872:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	79db      	ldrb	r3, [r3, #7]
 800d878:	3301      	adds	r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	79db      	ldrb	r3, [r3, #7]
 800d884:	2b0d      	cmp	r3, #13
 800d886:	d109      	bne.n	800d89c <gos_timeAddMilliseconds+0x1dc>
                        {
                            pTime->months = 1;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	891b      	ldrh	r3, [r3, #8]
 800d892:	b29b      	uxth	r3, r3
 800d894:	3301      	adds	r3, #1
 800d896:	b29a      	uxth	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 800d89c:	2355      	movs	r3, #85	@ 0x55
 800d89e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 800d8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	10624dd3 	.word	0x10624dd3
 800d8b4:	88888889 	.word	0x88888889
 800d8b8:	aaaaaaab 	.word	0xaaaaaaab
 800d8bc:	0801a77c 	.word	0x0801a77c

0800d8c0 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b087      	sub	sp, #28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 800d8ce:	23ae      	movs	r3, #174	@ 0xae
 800d8d0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d063      	beq.n	800d9a0 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	881b      	ldrh	r3, [r3, #0]
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	88fb      	ldrh	r3, [r7, #6]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8f2:	d355      	bcc.n	800d9a0 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	885b      	ldrh	r3, [r3, #2]
 800d908:	b29b      	uxth	r3, r3
 800d90a:	3301      	adds	r3, #1
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	885b      	ldrh	r3, [r3, #2]
 800d916:	b29b      	uxth	r3, r3
 800d918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d91c:	d340      	bcc.n	800d9a0 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	885b      	ldrh	r3, [r3, #2]
 800d922:	b29b      	uxth	r3, r3
 800d924:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800d928:	b29a      	uxth	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	791b      	ldrb	r3, [r3, #4]
 800d932:	3301      	adds	r3, #1
 800d934:	b2da      	uxtb	r2, r3
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	791b      	ldrb	r3, [r3, #4]
 800d93e:	2b3b      	cmp	r3, #59	@ 0x3b
 800d940:	d92e      	bls.n	800d9a0 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	791b      	ldrb	r3, [r3, #4]
 800d946:	3b3c      	subs	r3, #60	@ 0x3c
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	795b      	ldrb	r3, [r3, #5]
 800d952:	3301      	adds	r3, #1
 800d954:	b2da      	uxtb	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	795b      	ldrb	r3, [r3, #5]
 800d95e:	2b3b      	cmp	r3, #59	@ 0x3b
 800d960:	d91e      	bls.n	800d9a0 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	795b      	ldrb	r3, [r3, #5]
 800d966:	3b3c      	subs	r3, #60	@ 0x3c
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	799b      	ldrb	r3, [r3, #6]
 800d972:	3301      	adds	r3, #1
 800d974:	b2da      	uxtb	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	799b      	ldrb	r3, [r3, #6]
 800d97e:	2b17      	cmp	r3, #23
 800d980:	d90e      	bls.n	800d9a0 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	799b      	ldrb	r3, [r3, #6]
 800d986:	3b18      	subs	r3, #24
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d994:	b29b      	uxth	r3, r3
 800d996:	3301      	adds	r3, #1
 800d998:	b29a      	uxth	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d063      	beq.n	800da6e <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	88fb      	ldrh	r3, [r7, #6]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	881b      	ldrh	r3, [r3, #0]
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9c0:	d355      	bcc.n	800da6e <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	885b      	ldrh	r3, [r3, #2]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	3301      	adds	r3, #1
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	885b      	ldrh	r3, [r3, #2]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9ea:	d340      	bcc.n	800da6e <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	885b      	ldrh	r3, [r3, #2]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	791b      	ldrb	r3, [r3, #4]
 800da00:	3301      	adds	r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	791b      	ldrb	r3, [r3, #4]
 800da0c:	2b3b      	cmp	r3, #59	@ 0x3b
 800da0e:	d92e      	bls.n	800da6e <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	791b      	ldrb	r3, [r3, #4]
 800da14:	3b3c      	subs	r3, #60	@ 0x3c
 800da16:	b2da      	uxtb	r2, r3
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	795b      	ldrb	r3, [r3, #5]
 800da20:	3301      	adds	r3, #1
 800da22:	b2da      	uxtb	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	795b      	ldrb	r3, [r3, #5]
 800da2c:	2b3b      	cmp	r3, #59	@ 0x3b
 800da2e:	d91e      	bls.n	800da6e <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	795b      	ldrb	r3, [r3, #5]
 800da34:	3b3c      	subs	r3, #60	@ 0x3c
 800da36:	b2da      	uxtb	r2, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	799b      	ldrb	r3, [r3, #6]
 800da40:	3301      	adds	r3, #1
 800da42:	b2da      	uxtb	r2, r3
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	799b      	ldrb	r3, [r3, #6]
 800da4c:	2b17      	cmp	r3, #23
 800da4e:	d90e      	bls.n	800da6e <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	799b      	ldrb	r3, [r3, #6]
 800da54:	3b18      	subs	r3, #24
 800da56:	b2da      	uxtb	r2, r3
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800da62:	b29b      	uxth	r3, r3
 800da64:	3301      	adds	r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 800da6e:	2355      	movs	r3, #85	@ 0x55
 800da70:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 800da72:	7dfb      	ldrb	r3, [r7, #23]
}
 800da74:	4618      	mov	r0, r3
 800da76:	371c      	adds	r7, #28
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 800da8c:	23ae      	movs	r3, #174	@ 0xae
 800da8e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	f000 808e 	beq.w	800dbb4 <gos_runTimeAddMilliseconds+0x134>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	885b      	ldrh	r3, [r3, #2]
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	887b      	ldrh	r3, [r7, #2]
 800daa0:	4413      	add	r3, r2
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	885b      	ldrh	r3, [r3, #2]
 800daac:	b29b      	uxth	r3, r3
 800daae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dab2:	d37d      	bcc.n	800dbb0 <gos_runTimeAddMilliseconds+0x130>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	791a      	ldrb	r2, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	885b      	ldrh	r3, [r3, #2]
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4941      	ldr	r1, [pc, #260]	@ (800dbc4 <gos_runTimeAddMilliseconds+0x144>)
 800dac0:	fba1 1303 	umull	r1, r3, r1, r3
 800dac4:	099b      	lsrs	r3, r3, #6
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	4413      	add	r3, r2
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	4a3a      	ldr	r2, [pc, #232]	@ (800dbc4 <gos_runTimeAddMilliseconds+0x144>)
 800dada:	fba2 1203 	umull	r1, r2, r2, r3
 800dade:	0992      	lsrs	r2, r2, #6
 800dae0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dae4:	fb01 f202 	mul.w	r2, r1, r2
 800dae8:	1a9b      	subs	r3, r3, r2
 800daea:	b29a      	uxth	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	791b      	ldrb	r3, [r3, #4]
 800daf4:	2b3b      	cmp	r3, #59	@ 0x3b
 800daf6:	d95b      	bls.n	800dbb0 <gos_runTimeAddMilliseconds+0x130>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	795a      	ldrb	r2, [r3, #5]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	791b      	ldrb	r3, [r3, #4]
 800db00:	4931      	ldr	r1, [pc, #196]	@ (800dbc8 <gos_runTimeAddMilliseconds+0x148>)
 800db02:	fba1 1303 	umull	r1, r3, r1, r3
 800db06:	095b      	lsrs	r3, r3, #5
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	4413      	add	r3, r2
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	791a      	ldrb	r2, [r3, #4]
 800db16:	4b2c      	ldr	r3, [pc, #176]	@ (800dbc8 <gos_runTimeAddMilliseconds+0x148>)
 800db18:	fba3 1302 	umull	r1, r3, r3, r2
 800db1c:	0959      	lsrs	r1, r3, #5
 800db1e:	460b      	mov	r3, r1
 800db20:	011b      	lsls	r3, r3, #4
 800db22:	1a5b      	subs	r3, r3, r1
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	1ad3      	subs	r3, r2, r3
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	795b      	ldrb	r3, [r3, #5]
 800db32:	2b3b      	cmp	r3, #59	@ 0x3b
 800db34:	d93c      	bls.n	800dbb0 <gos_runTimeAddMilliseconds+0x130>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	799a      	ldrb	r2, [r3, #6]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	795b      	ldrb	r3, [r3, #5]
 800db3e:	4922      	ldr	r1, [pc, #136]	@ (800dbc8 <gos_runTimeAddMilliseconds+0x148>)
 800db40:	fba1 1303 	umull	r1, r3, r1, r3
 800db44:	095b      	lsrs	r3, r3, #5
 800db46:	b2db      	uxtb	r3, r3
 800db48:	4413      	add	r3, r2
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	795a      	ldrb	r2, [r3, #5]
 800db54:	4b1c      	ldr	r3, [pc, #112]	@ (800dbc8 <gos_runTimeAddMilliseconds+0x148>)
 800db56:	fba3 1302 	umull	r1, r3, r3, r2
 800db5a:	0959      	lsrs	r1, r3, #5
 800db5c:	460b      	mov	r3, r1
 800db5e:	011b      	lsls	r3, r3, #4
 800db60:	1a5b      	subs	r3, r3, r1
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	b2da      	uxtb	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	799b      	ldrb	r3, [r3, #6]
 800db70:	2b17      	cmp	r3, #23
 800db72:	d91d      	bls.n	800dbb0 <gos_runTimeAddMilliseconds+0x130>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	7992      	ldrb	r2, [r2, #6]
 800db80:	4912      	ldr	r1, [pc, #72]	@ (800dbcc <gos_runTimeAddMilliseconds+0x14c>)
 800db82:	fba1 1202 	umull	r1, r2, r1, r2
 800db86:	0912      	lsrs	r2, r2, #4
 800db88:	b2d2      	uxtb	r2, r2
 800db8a:	4413      	add	r3, r2
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	799a      	ldrb	r2, [r3, #6]
 800db98:	4b0c      	ldr	r3, [pc, #48]	@ (800dbcc <gos_runTimeAddMilliseconds+0x14c>)
 800db9a:	fba3 1302 	umull	r1, r3, r3, r2
 800db9e:	0919      	lsrs	r1, r3, #4
 800dba0:	460b      	mov	r3, r1
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	440b      	add	r3, r1
 800dba6:	00db      	lsls	r3, r3, #3
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 800dbb0:	2355      	movs	r3, #85	@ 0x55
 800dbb2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	10624dd3 	.word	0x10624dd3
 800dbc8:	88888889 	.word	0x88888889
 800dbcc:	aaaaaaab 	.word	0xaaaaaaab

0800dbd0 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 800dbda:	23ae      	movs	r3, #174	@ 0xae
 800dbdc:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800dbde:	88fb      	ldrh	r3, [r7, #6]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	480a      	ldr	r0, [pc, #40]	@ (800dc0c <gos_timeIncreaseSystemTime+0x3c>)
 800dbe4:	f7ff ff4c 	bl	800da80 <gos_runTimeAddMilliseconds>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b55      	cmp	r3, #85	@ 0x55
 800dbec:	d109      	bne.n	800dc02 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 800dbee:	88fb      	ldrh	r3, [r7, #6]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4807      	ldr	r0, [pc, #28]	@ (800dc10 <gos_timeIncreaseSystemTime+0x40>)
 800dbf4:	f7ff fd64 	bl	800d6c0 <gos_timeAddMilliseconds>
 800dbf8:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800dbfa:	2b55      	cmp	r3, #85	@ 0x55
 800dbfc:	d101      	bne.n	800dc02 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 800dbfe:	2355      	movs	r3, #85	@ 0x55
 800dc00:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20003a14 	.word	0x20003a14
 800dc10:	20000ce4 	.word	0x20000ce4

0800dc14 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 800dc1a:	1d3b      	adds	r3, r7, #4
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 800dc24:	4b27      	ldr	r3, [pc, #156]	@ (800dcc4 <gos_timeDaemonTask+0xb0>)
 800dc26:	789a      	ldrb	r2, [r3, #2]
 800dc28:	79bb      	ldrb	r3, [r7, #6]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d905      	bls.n	800dc3a <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 800dc2e:	4b26      	ldr	r3, [pc, #152]	@ (800dcc8 <gos_timeDaemonTask+0xb4>)
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2100      	movs	r1, #0
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff fbe5 	bl	800d404 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 800dc3a:	4b22      	ldr	r3, [pc, #136]	@ (800dcc4 <gos_timeDaemonTask+0xb0>)
 800dc3c:	78da      	ldrb	r2, [r3, #3]
 800dc3e:	79fb      	ldrb	r3, [r7, #7]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d905      	bls.n	800dc50 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 800dc44:	4b20      	ldr	r3, [pc, #128]	@ (800dcc8 <gos_timeDaemonTask+0xb4>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2101      	movs	r1, #1
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7ff fbda 	bl	800d404 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 800dc50:	4b1c      	ldr	r3, [pc, #112]	@ (800dcc4 <gos_timeDaemonTask+0xb0>)
 800dc52:	791a      	ldrb	r2, [r3, #4]
 800dc54:	7a3b      	ldrb	r3, [r7, #8]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d905      	bls.n	800dc66 <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 800dc5a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc8 <gos_timeDaemonTask+0xb4>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2102      	movs	r1, #2
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff fbcf 	bl	800d404 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 800dc66:	4b17      	ldr	r3, [pc, #92]	@ (800dcc4 <gos_timeDaemonTask+0xb0>)
 800dc68:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d905      	bls.n	800dc84 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 800dc78:	4b13      	ldr	r3, [pc, #76]	@ (800dcc8 <gos_timeDaemonTask+0xb4>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2103      	movs	r1, #3
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff fbc0 	bl	800d404 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 800dc84:	4b0f      	ldr	r3, [pc, #60]	@ (800dcc4 <gos_timeDaemonTask+0xb0>)
 800dc86:	79da      	ldrb	r2, [r3, #7]
 800dc88:	7afb      	ldrb	r3, [r7, #11]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d905      	bls.n	800dc9a <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 800dc8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcc8 <gos_timeDaemonTask+0xb4>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	2104      	movs	r1, #4
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7ff fbb5 	bl	800d404 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 800dc9a:	4b0a      	ldr	r3, [pc, #40]	@ (800dcc4 <gos_timeDaemonTask+0xb0>)
 800dc9c:	891a      	ldrh	r2, [r3, #8]
 800dc9e:	89bb      	ldrh	r3, [r7, #12]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d905      	bls.n	800dcb0 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 800dca4:	4b08      	ldr	r3, [pc, #32]	@ (800dcc8 <gos_timeDaemonTask+0xb4>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2105      	movs	r1, #5
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff fbaa 	bl	800d404 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 800dcb0:	1d3b      	adds	r3, r7, #4
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff fcac 	bl	800d610 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 800dcb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800dcbc:	f7fc fb9a 	bl	800a3f4 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 800dcc0:	e7b0      	b.n	800dc24 <gos_timeDaemonTask+0x10>
 800dcc2:	bf00      	nop
 800dcc4:	20000ce4 	.word	0x20000ce4
 800dcc8:	20003a20 	.word	0x20003a20

0800dccc <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_ERROR;
 800dcd2:	23ae      	movs	r3, #174	@ 0xae
 800dcd4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 800dcd6:	480d      	ldr	r0, [pc, #52]	@ (800dd0c <gos_traceInit+0x40>)
 800dcd8:	f7ff f890 	bl	800cdfc <gos_queueCreate>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b55      	cmp	r3, #85	@ 0x55
 800dce0:	d10e      	bne.n	800dd00 <gos_traceInit+0x34>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 800dce2:	2100      	movs	r1, #0
 800dce4:	480a      	ldr	r0, [pc, #40]	@ (800dd10 <gos_traceInit+0x44>)
 800dce6:	f7fc f9f3 	bl	800a0d0 <gos_taskRegister>
 800dcea:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 == GOS_SUCCESS &&
 800dcec:	2b55      	cmp	r3, #85	@ 0x55
 800dcee:	d107      	bne.n	800dd00 <gos_traceInit+0x34>
        gos_mutexInit(&traceMutex) == GOS_SUCCESS
 800dcf0:	4808      	ldr	r0, [pc, #32]	@ (800dd14 <gos_traceInit+0x48>)
 800dcf2:	f7fe fea5 	bl	800ca40 <gos_mutexInit>
 800dcf6:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) == GOS_SUCCESS &&
 800dcf8:	2b55      	cmp	r3, #85	@ 0x55
 800dcfa:	d101      	bne.n	800dd00 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_SUCCESS;
 800dcfc:	2355      	movs	r3, #85	@ 0x55
 800dcfe:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 800dd00:	79fb      	ldrb	r3, [r7, #7]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	20000d5c 	.word	0x20000d5c
 800dd10:	20000d78 	.word	0x20000d78
 800dd14:	20003be4 	.word	0x20003be4

0800dd18 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 800dd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd1a:	b0a9      	sub	sp, #164	@ 0xa4
 800dd1c:	af06      	add	r7, sp, #24
 800dd1e:	4603      	mov	r3, r0
 800dd20:	6039      	str	r1, [r7, #0]
 800dd22:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 800dd24:	23ae      	movs	r3, #174	@ 0xae
 800dd26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800dd2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd2e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800dd32:	2300      	movs	r3, #0
 800dd34:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800dd38:	f107 0318 	add.w	r3, r7, #24
 800dd3c:	226a      	movs	r2, #106	@ 0x6a
 800dd3e:	2100      	movs	r1, #0
 800dd40:	4618      	mov	r0, r3
 800dd42:	f008 ff2d 	bl	8016ba0 <memset>
    gos_time_t               sysTime        = {0};
 800dd46:	f107 030c 	add.w	r3, r7, #12
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	605a      	str	r2, [r3, #4]
 800dd50:	811a      	strh	r2, [r3, #8]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 80ec 	beq.w	800df32 <gos_traceTrace+0x21a>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800dd5a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fd fd5c 	bl	800b81c <gos_taskGetCurrentId>
 800dd64:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 800dd66:	2b55      	cmp	r3, #85	@ 0x55
 800dd68:	f040 80e3 	bne.w	800df32 <gos_traceTrace+0x21a>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800dd6c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800dd70:	f107 0218 	add.w	r2, r7, #24
 800dd74:	4611      	mov	r1, r2
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fd fdac 	bl	800b8d4 <gos_taskGetData>
 800dd7c:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800dd7e:	2b55      	cmp	r3, #85	@ 0x55
 800dd80:	f040 80d7 	bne.w	800df32 <gos_traceTrace+0x21a>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800dd84:	8c3b      	ldrh	r3, [r7, #32]
 800dd86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d105      	bne.n	800dd9a <gos_traceTrace+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800dd8e:	f7fb fe7f 	bl	8009a90 <gos_kernelIsCallerIsr>
 800dd92:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800dd94:	2b36      	cmp	r3, #54	@ 0x36
 800dd96:	f040 80cc 	bne.w	800df32 <gos_traceTrace+0x21a>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800dd9a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dd9e:	4868      	ldr	r0, [pc, #416]	@ (800df40 <gos_traceTrace+0x228>)
 800dda0:	f7fe fe68 	bl	800ca74 <gos_mutexLock>
 800dda4:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800dda6:	2b55      	cmp	r3, #85	@ 0x55
 800dda8:	f040 80c3 	bne.w	800df32 <gos_traceTrace+0x21a>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 800ddac:	2355      	movs	r3, #85	@ 0x55
 800ddae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        if (addTimeStamp == GOS_TRUE)
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	2b36      	cmp	r3, #54	@ 0x36
 800ddb6:	d13f      	bne.n	800de38 <gos_traceTrace+0x120>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 800ddb8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ddbc:	2b55      	cmp	r3, #85	@ 0x55
 800ddbe:	d108      	bne.n	800ddd2 <gos_traceTrace+0xba>
 800ddc0:	f107 030c 	add.w	r3, r7, #12
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7ff fc23 	bl	800d610 <gos_timeGet>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800ddd0:	e002      	b.n	800ddd8 <gos_traceTrace+0xc0>
 800ddd2:	23ae      	movs	r3, #174	@ 0xae
 800ddd4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800ddd8:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800ddda:	461d      	mov	r5, r3
                    sysTime.months,
 800dddc:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800ddde:	461e      	mov	r6, r3
                    sysTime.days,
 800dde0:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800dde4:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800dde6:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 800dde8:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 800ddea:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 800ddec:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800ddee:	9404      	str	r4, [sp, #16]
 800ddf0:	9003      	str	r0, [sp, #12]
 800ddf2:	9102      	str	r1, [sp, #8]
 800ddf4:	9201      	str	r2, [sp, #4]
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	4633      	mov	r3, r6
 800ddfa:	462a      	mov	r2, r5
 800ddfc:	4951      	ldr	r1, [pc, #324]	@ (800df44 <gos_traceTrace+0x22c>)
 800ddfe:	4852      	ldr	r0, [pc, #328]	@ (800df48 <gos_traceTrace+0x230>)
 800de00:	f008 fe4a 	bl	8016a98 <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 800de04:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800de08:	2b55      	cmp	r3, #85	@ 0x55
 800de0a:	d112      	bne.n	800de32 <gos_traceTrace+0x11a>
 800de0c:	4b4f      	ldr	r3, [pc, #316]	@ (800df4c <gos_traceTrace+0x234>)
 800de0e:	881c      	ldrh	r4, [r3, #0]
 800de10:	484d      	ldr	r0, [pc, #308]	@ (800df48 <gos_traceTrace+0x230>)
 800de12:	f7f2 fa4d 	bl	80002b0 <strlen>
 800de16:	4603      	mov	r3, r0
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	3301      	adds	r3, #1
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800de22:	4949      	ldr	r1, [pc, #292]	@ (800df48 <gos_traceTrace+0x230>)
 800de24:	4620      	mov	r0, r4
 800de26:	f7ff f845 	bl	800ceb4 <gos_queuePut>
 800de2a:	4603      	mov	r3, r0
 800de2c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800de30:	e002      	b.n	800de38 <gos_traceTrace+0x120>
 800de32:	23ae      	movs	r3, #174	@ 0xae
 800de34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 800de38:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800de3c:	2b55      	cmp	r3, #85	@ 0x55
 800de3e:	d112      	bne.n	800de66 <gos_traceTrace+0x14e>
 800de40:	4b42      	ldr	r3, [pc, #264]	@ (800df4c <gos_traceTrace+0x234>)
 800de42:	881c      	ldrh	r4, [r3, #0]
 800de44:	6838      	ldr	r0, [r7, #0]
 800de46:	f7f2 fa33 	bl	80002b0 <strlen>
 800de4a:	4603      	mov	r3, r0
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	3301      	adds	r3, #1
 800de50:	b2da      	uxtb	r2, r3
 800de52:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	4620      	mov	r0, r4
 800de5a:	f7ff f82b 	bl	800ceb4 <gos_queuePut>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800de64:	e002      	b.n	800de6c <gos_traceTrace+0x154>
 800de66:	23ae      	movs	r3, #174	@ 0xae
 800de68:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 800de6c:	4b38      	ldr	r3, [pc, #224]	@ (800df50 <gos_traceTrace+0x238>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d108      	bne.n	800de86 <gos_traceTrace+0x16e>
 800de74:	b672      	cpsid	i
 800de76:	f3ef 8310 	mrs	r3, PRIMASK
 800de7a:	4a36      	ldr	r2, [pc, #216]	@ (800df54 <gos_traceTrace+0x23c>)
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	4b32      	ldr	r3, [pc, #200]	@ (800df50 <gos_traceTrace+0x238>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	4b30      	ldr	r3, [pc, #192]	@ (800df50 <gos_traceTrace+0x238>)
 800de90:	701a      	strb	r2, [r3, #0]
 800de92:	4b31      	ldr	r3, [pc, #196]	@ (800df58 <gos_traceTrace+0x240>)
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	3301      	adds	r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	4b2f      	ldr	r3, [pc, #188]	@ (800df58 <gos_traceTrace+0x240>)
 800de9c:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800de9e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800dea2:	f107 0282 	add.w	r2, r7, #130	@ 0x82
 800dea6:	4611      	mov	r1, r2
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fd fc47 	bl	800b73c <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800deae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800deb2:	b21b      	sxth	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	db13      	blt.n	800dee0 <gos_traceTrace+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800deb8:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800debc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fd fad7 	bl	800b474 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800dec6:	4b25      	ldr	r3, [pc, #148]	@ (800df5c <gos_traceTrace+0x244>)
 800dec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800deca:	4618      	mov	r0, r3
 800decc:	f7fc fd0c 	bl	800a8e8 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800ded0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800ded4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fd fb43 	bl	800b564 <gos_taskRemovePrivilege>
 800dede:	e004      	b.n	800deea <gos_traceTrace+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800dee0:	4b1e      	ldr	r3, [pc, #120]	@ (800df5c <gos_traceTrace+0x244>)
 800dee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fc fcff 	bl	800a8e8 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800deea:	4b19      	ldr	r3, [pc, #100]	@ (800df50 <gos_traceTrace+0x238>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d005      	beq.n	800defe <gos_traceTrace+0x1e6>
 800def2:	4b17      	ldr	r3, [pc, #92]	@ (800df50 <gos_traceTrace+0x238>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	3b01      	subs	r3, #1
 800def8:	b2da      	uxtb	r2, r3
 800defa:	4b15      	ldr	r3, [pc, #84]	@ (800df50 <gos_traceTrace+0x238>)
 800defc:	701a      	strb	r2, [r3, #0]
 800defe:	4b14      	ldr	r3, [pc, #80]	@ (800df50 <gos_traceTrace+0x238>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d108      	bne.n	800df18 <gos_traceTrace+0x200>
 800df06:	4b13      	ldr	r3, [pc, #76]	@ (800df54 <gos_traceTrace+0x23c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f383 8810 	msr	PRIMASK, r3
 800df0e:	b662      	cpsie	i
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	4b0f      	ldr	r3, [pc, #60]	@ (800df58 <gos_traceTrace+0x240>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d005      	beq.n	800df2c <gos_traceTrace+0x214>
 800df20:	4b0d      	ldr	r3, [pc, #52]	@ (800df58 <gos_traceTrace+0x240>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	3b01      	subs	r3, #1
 800df26:	b2da      	uxtb	r2, r3
 800df28:	4b0b      	ldr	r3, [pc, #44]	@ (800df58 <gos_traceTrace+0x240>)
 800df2a:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800df2c:	4804      	ldr	r0, [pc, #16]	@ (800df40 <gos_traceTrace+0x228>)
 800df2e:	f7fe fea7 	bl	800cc80 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800df32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800df36:	4618      	mov	r0, r3
 800df38:	378c      	adds	r7, #140	@ 0x8c
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3e:	bf00      	nop
 800df40:	20003be4 	.word	0x20003be4
 800df44:	08019af0 	.word	0x08019af0
 800df48:	20003bb4 	.word	0x20003bb4
 800df4c:	20000d5c 	.word	0x20000d5c
 800df50:	20001963 	.word	0x20001963
 800df54:	20001964 	.word	0x20001964
 800df58:	20001961 	.word	0x20001961
 800df5c:	20000d78 	.word	0x20000d78

0800df60 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 800df60:	b40e      	push	{r1, r2, r3}
 800df62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df64:	b0aa      	sub	sp, #168	@ 0xa8
 800df66:	af06      	add	r7, sp, #24
 800df68:	4603      	mov	r3, r0
 800df6a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 800df6c:	2355      	movs	r3, #85	@ 0x55
 800df6e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800df72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800df76:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800df7a:	f107 0320 	add.w	r3, r7, #32
 800df7e:	226a      	movs	r2, #106	@ 0x6a
 800df80:	2100      	movs	r1, #0
 800df82:	4618      	mov	r0, r3
 800df84:	f008 fe0c 	bl	8016ba0 <memset>
    gos_time_t               sysTime        = {0};
 800df88:	f107 0314 	add.w	r3, r7, #20
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
 800df90:	605a      	str	r2, [r3, #4]
 800df92:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800df94:	2300      	movs	r3, #0
 800df96:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 800df98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f000 80f2 	beq.w	800e186 <gos_traceTraceFormatted+0x226>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800dfa2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fd fc38 	bl	800b81c <gos_taskGetCurrentId>
 800dfac:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 800dfae:	2b55      	cmp	r3, #85	@ 0x55
 800dfb0:	f040 80e9 	bne.w	800e186 <gos_traceTraceFormatted+0x226>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800dfb4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800dfb8:	f107 0220 	add.w	r2, r7, #32
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd fc88 	bl	800b8d4 <gos_taskGetData>
 800dfc4:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800dfc6:	2b55      	cmp	r3, #85	@ 0x55
 800dfc8:	f040 80dd 	bne.w	800e186 <gos_traceTraceFormatted+0x226>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800dfcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dfce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d105      	bne.n	800dfe2 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800dfd6:	f7fb fd5b 	bl	8009a90 <gos_kernelIsCallerIsr>
 800dfda:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800dfdc:	2b36      	cmp	r3, #54	@ 0x36
 800dfde:	f040 80d2 	bne.w	800e186 <gos_traceTraceFormatted+0x226>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800dfe2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800dfe6:	486e      	ldr	r0, [pc, #440]	@ (800e1a0 <gos_traceTraceFormatted+0x240>)
 800dfe8:	f7fe fd44 	bl	800ca74 <gos_mutexLock>
 800dfec:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800dfee:	2b55      	cmp	r3, #85	@ 0x55
 800dff0:	f040 80c9 	bne.w	800e186 <gos_traceTraceFormatted+0x226>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	2b36      	cmp	r3, #54	@ 0x36
 800dff8:	d13f      	bne.n	800e07a <gos_traceTraceFormatted+0x11a>
        {
        	GOS_CONCAT_RESULT(traceResult, gos_timeGet(&sysTime));
 800dffa:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dffe:	2b55      	cmp	r3, #85	@ 0x55
 800e000:	d108      	bne.n	800e014 <gos_traceTraceFormatted+0xb4>
 800e002:	f107 0314 	add.w	r3, r7, #20
 800e006:	4618      	mov	r0, r3
 800e008:	f7ff fb02 	bl	800d610 <gos_timeGet>
 800e00c:	4603      	mov	r3, r0
 800e00e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e012:	e002      	b.n	800e01a <gos_traceTraceFormatted+0xba>
 800e014:	23ae      	movs	r3, #174	@ 0xae
 800e016:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800e01a:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800e01c:	461d      	mov	r5, r3
                    sysTime.months,
 800e01e:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800e020:	461e      	mov	r6, r3
                    sysTime.days,
 800e022:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800e026:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800e028:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 800e02a:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 800e02c:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 800e02e:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800e030:	9404      	str	r4, [sp, #16]
 800e032:	9003      	str	r0, [sp, #12]
 800e034:	9102      	str	r1, [sp, #8]
 800e036:	9201      	str	r2, [sp, #4]
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	4633      	mov	r3, r6
 800e03c:	462a      	mov	r2, r5
 800e03e:	4959      	ldr	r1, [pc, #356]	@ (800e1a4 <gos_traceTraceFormatted+0x244>)
 800e040:	4859      	ldr	r0, [pc, #356]	@ (800e1a8 <gos_traceTraceFormatted+0x248>)
 800e042:	f008 fd29 	bl	8016a98 <siprintf>
                    );
            // Add timestamp to queue.
            GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 800e046:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e04a:	2b55      	cmp	r3, #85	@ 0x55
 800e04c:	d112      	bne.n	800e074 <gos_traceTraceFormatted+0x114>
 800e04e:	4b57      	ldr	r3, [pc, #348]	@ (800e1ac <gos_traceTraceFormatted+0x24c>)
 800e050:	881c      	ldrh	r4, [r3, #0]
 800e052:	4855      	ldr	r0, [pc, #340]	@ (800e1a8 <gos_traceTraceFormatted+0x248>)
 800e054:	f7f2 f92c 	bl	80002b0 <strlen>
 800e058:	4603      	mov	r3, r0
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	3301      	adds	r3, #1
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e064:	4950      	ldr	r1, [pc, #320]	@ (800e1a8 <gos_traceTraceFormatted+0x248>)
 800e066:	4620      	mov	r0, r4
 800e068:	f7fe ff24 	bl	800ceb4 <gos_queuePut>
 800e06c:	4603      	mov	r3, r0
 800e06e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e072:	e002      	b.n	800e07a <gos_traceTraceFormatted+0x11a>
 800e074:	23ae      	movs	r3, #174	@ 0xae
 800e076:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 800e07a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e07e:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e086:	484a      	ldr	r0, [pc, #296]	@ (800e1b0 <gos_traceTraceFormatted+0x250>)
 800e088:	f008 fd80 	bl	8016b8c <vsiprintf>
        va_end(args);
        GOS_CONCAT_RESULT(traceResult, gos_queuePut(
 800e08c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e090:	2b55      	cmp	r3, #85	@ 0x55
 800e092:	d112      	bne.n	800e0ba <gos_traceTraceFormatted+0x15a>
 800e094:	4b45      	ldr	r3, [pc, #276]	@ (800e1ac <gos_traceTraceFormatted+0x24c>)
 800e096:	881c      	ldrh	r4, [r3, #0]
 800e098:	4845      	ldr	r0, [pc, #276]	@ (800e1b0 <gos_traceTraceFormatted+0x250>)
 800e09a:	f7f2 f909 	bl	80002b0 <strlen>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e0aa:	4941      	ldr	r1, [pc, #260]	@ (800e1b0 <gos_traceTraceFormatted+0x250>)
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7fe ff01 	bl	800ceb4 <gos_queuePut>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800e0b8:	e002      	b.n	800e0c0 <gos_traceTraceFormatted+0x160>
 800e0ba:	23ae      	movs	r3, #174	@ 0xae
 800e0bc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
                GOS_TRACE_QUEUE_TMO_MS
                ));

        GOS_ATOMIC_ENTER
 800e0c0:	4b3c      	ldr	r3, [pc, #240]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d108      	bne.n	800e0da <gos_traceTraceFormatted+0x17a>
 800e0c8:	b672      	cpsid	i
 800e0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ce:	4a3a      	ldr	r2, [pc, #232]	@ (800e1b8 <gos_traceTraceFormatted+0x258>)
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	f3bf 8f6f 	isb	sy
 800e0da:	4b36      	ldr	r3, [pc, #216]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	4b34      	ldr	r3, [pc, #208]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e0e4:	701a      	strb	r2, [r3, #0]
 800e0e6:	4b35      	ldr	r3, [pc, #212]	@ (800e1bc <gos_traceTraceFormatted+0x25c>)
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	4b33      	ldr	r3, [pc, #204]	@ (800e1bc <gos_traceTraceFormatted+0x25c>)
 800e0f0:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800e0f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e0f6:	f107 020e 	add.w	r2, r7, #14
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fd fb1d 	bl	800b73c <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800e102:	89fb      	ldrh	r3, [r7, #14]
 800e104:	b21b      	sxth	r3, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	db13      	blt.n	800e132 <gos_traceTraceFormatted+0x1d2>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800e10a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e10e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e112:	4618      	mov	r0, r3
 800e114:	f7fd f9ae 	bl	800b474 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800e118:	4b29      	ldr	r3, [pc, #164]	@ (800e1c0 <gos_traceTraceFormatted+0x260>)
 800e11a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fc fbe3 	bl	800a8e8 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800e122:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800e126:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fd fa1a 	bl	800b564 <gos_taskRemovePrivilege>
 800e130:	e004      	b.n	800e13c <gos_traceTraceFormatted+0x1dc>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800e132:	4b23      	ldr	r3, [pc, #140]	@ (800e1c0 <gos_traceTraceFormatted+0x260>)
 800e134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e136:	4618      	mov	r0, r3
 800e138:	f7fc fbd6 	bl	800a8e8 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800e13c:	4b1d      	ldr	r3, [pc, #116]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d005      	beq.n	800e150 <gos_traceTraceFormatted+0x1f0>
 800e144:	4b1b      	ldr	r3, [pc, #108]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	3b01      	subs	r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	4b19      	ldr	r3, [pc, #100]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e14e:	701a      	strb	r2, [r3, #0]
 800e150:	4b18      	ldr	r3, [pc, #96]	@ (800e1b4 <gos_traceTraceFormatted+0x254>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d108      	bne.n	800e16a <gos_traceTraceFormatted+0x20a>
 800e158:	4b17      	ldr	r3, [pc, #92]	@ (800e1b8 <gos_traceTraceFormatted+0x258>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f383 8810 	msr	PRIMASK, r3
 800e160:	b662      	cpsie	i
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	4b14      	ldr	r3, [pc, #80]	@ (800e1bc <gos_traceTraceFormatted+0x25c>)
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d005      	beq.n	800e17e <gos_traceTraceFormatted+0x21e>
 800e172:	4b12      	ldr	r3, [pc, #72]	@ (800e1bc <gos_traceTraceFormatted+0x25c>)
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	3b01      	subs	r3, #1
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	4b10      	ldr	r3, [pc, #64]	@ (800e1bc <gos_traceTraceFormatted+0x25c>)
 800e17c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800e17e:	4808      	ldr	r0, [pc, #32]	@ (800e1a0 <gos_traceTraceFormatted+0x240>)
 800e180:	f7fe fd7e 	bl	800cc80 <gos_mutexUnlock>
 800e184:	e002      	b.n	800e18c <gos_traceTraceFormatted+0x22c>
    }
    else
    {
        traceResult = GOS_ERROR;
 800e186:	23ae      	movs	r3, #174	@ 0xae
 800e188:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return traceResult;
 800e18c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800e190:	4618      	mov	r0, r3
 800e192:	3790      	adds	r7, #144	@ 0x90
 800e194:	46bd      	mov	sp, r7
 800e196:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e19a:	b003      	add	sp, #12
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20003be4 	.word	0x20003be4
 800e1a4:	08019af0 	.word	0x08019af0
 800e1a8:	20003bb4 	.word	0x20003bb4
 800e1ac:	20000d5c 	.word	0x20000d5c
 800e1b0:	20003aec 	.word	0x20003aec
 800e1b4:	20001963 	.word	0x20001963
 800e1b8:	20001964 	.word	0x20001964
 800e1bc:	20001961 	.word	0x20001961
 800e1c0:	20000d78 	.word	0x20000d78

0800e1c4 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 800e1c4:	b40f      	push	{r0, r1, r2, r3}
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b082      	sub	sp, #8
 800e1ca:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 800e1cc:	23ae      	movs	r3, #174	@ 0xae
 800e1ce:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d01c      	beq.n	800e210 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 800e1d6:	4b12      	ldr	r3, [pc, #72]	@ (800e220 <gos_traceTraceFormattedUnsafe+0x5c>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	4b10      	ldr	r3, [pc, #64]	@ (800e220 <gos_traceTraceFormattedUnsafe+0x5c>)
 800e1e0:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 800e1e2:	f107 0314 	add.w	r3, r7, #20
 800e1e6:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	6939      	ldr	r1, [r7, #16]
 800e1ec:	480d      	ldr	r0, [pc, #52]	@ (800e224 <gos_traceTraceFormattedUnsafe+0x60>)
 800e1ee:	f008 fccd 	bl	8016b8c <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 800e1f2:	480c      	ldr	r0, [pc, #48]	@ (800e224 <gos_traceTraceFormattedUnsafe+0x60>)
 800e1f4:	f000 fa82 	bl	800e6fc <gos_traceDriverTransmitString_Unsafe>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 800e1fc:	4b08      	ldr	r3, [pc, #32]	@ (800e220 <gos_traceTraceFormattedUnsafe+0x5c>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d005      	beq.n	800e210 <gos_traceTraceFormattedUnsafe+0x4c>
 800e204:	4b06      	ldr	r3, [pc, #24]	@ (800e220 <gos_traceTraceFormattedUnsafe+0x5c>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	3b01      	subs	r3, #1
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	4b04      	ldr	r3, [pc, #16]	@ (800e220 <gos_traceTraceFormattedUnsafe+0x5c>)
 800e20e:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800e210:	79fb      	ldrb	r3, [r7, #7]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e21c:	b004      	add	sp, #16
 800e21e:	4770      	bx	lr
 800e220:	20001961 	.word	0x20001961
 800e224:	20003aec 	.word	0x20003aec

0800e228 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800e22c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800e230:	480e      	ldr	r0, [pc, #56]	@ (800e26c <gos_traceDaemonTask+0x44>)
 800e232:	f7fe fc1f 	bl	800ca74 <gos_mutexLock>
 800e236:	4603      	mov	r3, r0
 800e238:	2b55      	cmp	r3, #85	@ 0x55
 800e23a:	d10e      	bne.n	800e25a <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 800e23c:	e002      	b.n	800e244 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 800e23e:	480c      	ldr	r0, [pc, #48]	@ (800e270 <gos_traceDaemonTask+0x48>)
 800e240:	f000 fa44 	bl	800e6cc <gos_traceDriverTransmitString>
            while (gos_queueGet(
 800e244:	4b0b      	ldr	r3, [pc, #44]	@ (800e274 <gos_traceDaemonTask+0x4c>)
 800e246:	8818      	ldrh	r0, [r3, #0]
 800e248:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800e24c:	22c8      	movs	r2, #200	@ 0xc8
 800e24e:	4908      	ldr	r1, [pc, #32]	@ (800e270 <gos_traceDaemonTask+0x48>)
 800e250:	f7fe fefe 	bl	800d050 <gos_queueGet>
 800e254:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 800e256:	2b55      	cmp	r3, #85	@ 0x55
 800e258:	d0f1      	beq.n	800e23e <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 800e25a:	4804      	ldr	r0, [pc, #16]	@ (800e26c <gos_traceDaemonTask+0x44>)
 800e25c:	f7fe fd10 	bl	800cc80 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 800e260:	4b05      	ldr	r3, [pc, #20]	@ (800e278 <gos_traceDaemonTask+0x50>)
 800e262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e264:	4618      	mov	r0, r3
 800e266:	f7fc fa1d 	bl	800a6a4 <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800e26a:	e7df      	b.n	800e22c <gos_traceDaemonTask+0x4>
 800e26c:	20003be4 	.word	0x20003be4
 800e270:	20003a24 	.word	0x20003a24
 800e274:	20000d5c 	.word	0x20000d5c
 800e278:	20000d78 	.word	0x20000d78

0800e27c <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 800e284:	23ae      	movs	r3, #174	@ 0xae
 800e286:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00b      	beq.n	800e2a6 <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e2a0:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 800e2a2:	2355      	movs	r3, #85	@ 0x55
 800e2a4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3714      	adds	r7, #20
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b085      	sub	sp, #20
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 800e2bc:	23ae      	movs	r3, #174	@ 0xae
 800e2be:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d041      	beq.n	800e34a <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 800e2c6:	4b24      	ldr	r3, [pc, #144]	@ (800e358 <gos_triggerReset+0xa4>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d108      	bne.n	800e2e0 <gos_triggerReset+0x2c>
 800e2ce:	b672      	cpsid	i
 800e2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800e2d4:	4a21      	ldr	r2, [pc, #132]	@ (800e35c <gos_triggerReset+0xa8>)
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e358 <gos_triggerReset+0xa4>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e358 <gos_triggerReset+0xa4>)
 800e2ea:	701a      	strb	r2, [r3, #0]
 800e2ec:	4b1c      	ldr	r3, [pc, #112]	@ (800e360 <gos_triggerReset+0xac>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e360 <gos_triggerReset+0xac>)
 800e2f6:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 800e304:	2355      	movs	r3, #85	@ 0x55
 800e306:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800e308:	4b13      	ldr	r3, [pc, #76]	@ (800e358 <gos_triggerReset+0xa4>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d005      	beq.n	800e31c <gos_triggerReset+0x68>
 800e310:	4b11      	ldr	r3, [pc, #68]	@ (800e358 <gos_triggerReset+0xa4>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	3b01      	subs	r3, #1
 800e316:	b2da      	uxtb	r2, r3
 800e318:	4b0f      	ldr	r3, [pc, #60]	@ (800e358 <gos_triggerReset+0xa4>)
 800e31a:	701a      	strb	r2, [r3, #0]
 800e31c:	4b0e      	ldr	r3, [pc, #56]	@ (800e358 <gos_triggerReset+0xa4>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d108      	bne.n	800e336 <gos_triggerReset+0x82>
 800e324:	4b0d      	ldr	r3, [pc, #52]	@ (800e35c <gos_triggerReset+0xa8>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f383 8810 	msr	PRIMASK, r3
 800e32c:	b662      	cpsie	i
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	4b0a      	ldr	r3, [pc, #40]	@ (800e360 <gos_triggerReset+0xac>)
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d005      	beq.n	800e34a <gos_triggerReset+0x96>
 800e33e:	4b08      	ldr	r3, [pc, #32]	@ (800e360 <gos_triggerReset+0xac>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	3b01      	subs	r3, #1
 800e344:	b2da      	uxtb	r2, r3
 800e346:	4b06      	ldr	r3, [pc, #24]	@ (800e360 <gos_triggerReset+0xac>)
 800e348:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 800e34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr
 800e358:	20001963 	.word	0x20001963
 800e35c:	20001964 	.word	0x20001964
 800e360:	20001961 	.word	0x20001961

0800e364 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 800e370:	23ae      	movs	r3, #174	@ 0xae
 800e372:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 800e374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e378:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 8096 	beq.w	800e4ae <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 800e382:	4b4d      	ldr	r3, [pc, #308]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d108      	bne.n	800e39c <gos_triggerWait+0x38>
 800e38a:	b672      	cpsid	i
 800e38c:	f3ef 8310 	mrs	r3, PRIMASK
 800e390:	4a4a      	ldr	r2, [pc, #296]	@ (800e4bc <gos_triggerWait+0x158>)
 800e392:	6013      	str	r3, [r2, #0]
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	4b46      	ldr	r3, [pc, #280]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	4b44      	ldr	r3, [pc, #272]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e3a6:	701a      	strb	r2, [r3, #0]
 800e3a8:	4b45      	ldr	r3, [pc, #276]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	b2da      	uxtb	r2, r3
 800e3b0:	4b43      	ldr	r3, [pc, #268]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e3b2:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 800e3b4:	f107 0314 	add.w	r3, r7, #20
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fd fa2f 	bl	800b81c <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 800e3be:	8aba      	ldrh	r2, [r7, #20]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	68ba      	ldr	r2, [r7, #8]
 800e3c8:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 800e3ca:	4b3b      	ldr	r3, [pc, #236]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d005      	beq.n	800e3de <gos_triggerWait+0x7a>
 800e3d2:	4b39      	ldr	r3, [pc, #228]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	4b37      	ldr	r3, [pc, #220]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e3dc:	701a      	strb	r2, [r3, #0]
 800e3de:	4b36      	ldr	r3, [pc, #216]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d108      	bne.n	800e3f8 <gos_triggerWait+0x94>
 800e3e6:	4b35      	ldr	r3, [pc, #212]	@ (800e4bc <gos_triggerWait+0x158>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f383 8810 	msr	PRIMASK, r3
 800e3ee:	b662      	cpsie	i
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	4b31      	ldr	r3, [pc, #196]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d005      	beq.n	800e40c <gos_triggerWait+0xa8>
 800e400:	4b2f      	ldr	r3, [pc, #188]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	3b01      	subs	r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	4b2d      	ldr	r3, [pc, #180]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e40a:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	429a      	cmp	r2, r3
 800e416:	d204      	bcs.n	800e422 <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 800e418:	8abb      	ldrh	r3, [r7, #20]
 800e41a:	6879      	ldr	r1, [r7, #4]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fc fb11 	bl	800aa44 <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 800e422:	4b25      	ldr	r3, [pc, #148]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d108      	bne.n	800e43c <gos_triggerWait+0xd8>
 800e42a:	b672      	cpsid	i
 800e42c:	f3ef 8310 	mrs	r3, PRIMASK
 800e430:	4a22      	ldr	r2, [pc, #136]	@ (800e4bc <gos_triggerWait+0x158>)
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	4b1e      	ldr	r3, [pc, #120]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	3301      	adds	r3, #1
 800e442:	b2da      	uxtb	r2, r3
 800e444:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e446:	701a      	strb	r2, [r3, #0]
 800e448:	4b1d      	ldr	r3, [pc, #116]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	3301      	adds	r3, #1
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	4b1b      	ldr	r3, [pc, #108]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e452:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d105      	bne.n	800e46c <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 800e460:	2355      	movs	r3, #85	@ 0x55
 800e462:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e46a:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 800e46c:	4b12      	ldr	r3, [pc, #72]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d005      	beq.n	800e480 <gos_triggerWait+0x11c>
 800e474:	4b10      	ldr	r3, [pc, #64]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	3b01      	subs	r3, #1
 800e47a:	b2da      	uxtb	r2, r3
 800e47c:	4b0e      	ldr	r3, [pc, #56]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b8 <gos_triggerWait+0x154>)
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d108      	bne.n	800e49a <gos_triggerWait+0x136>
 800e488:	4b0c      	ldr	r3, [pc, #48]	@ (800e4bc <gos_triggerWait+0x158>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f383 8810 	msr	PRIMASK, r3
 800e490:	b662      	cpsie	i
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	4b09      	ldr	r3, [pc, #36]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d005      	beq.n	800e4ae <gos_triggerWait+0x14a>
 800e4a2:	4b07      	ldr	r3, [pc, #28]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	4b05      	ldr	r3, [pc, #20]	@ (800e4c0 <gos_triggerWait+0x15c>)
 800e4ac:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 800e4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20001963 	.word	0x20001963
 800e4bc:	20001964 	.word	0x20001964
 800e4c0:	20001961 	.word	0x20001961

0800e4c4 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 800e4cc:	23ae      	movs	r3, #174	@ 0xae
 800e4ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d073      	beq.n	800e5be <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 800e4d6:	4b3c      	ldr	r3, [pc, #240]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d108      	bne.n	800e4f0 <gos_triggerIncrement+0x2c>
 800e4de:	b672      	cpsid	i
 800e4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e4e4:	4a39      	ldr	r2, [pc, #228]	@ (800e5cc <gos_triggerIncrement+0x108>)
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	f3bf 8f6f 	isb	sy
 800e4f0:	4b35      	ldr	r3, [pc, #212]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	4b33      	ldr	r3, [pc, #204]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e4fa:	701a      	strb	r2, [r3, #0]
 800e4fc:	4b34      	ldr	r3, [pc, #208]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	3301      	adds	r3, #1
 800e502:	b2da      	uxtb	r2, r3
 800e504:	4b32      	ldr	r3, [pc, #200]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e506:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	1c5a      	adds	r2, r3, #1
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d12c      	bne.n	800e578 <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 800e51e:	4b2d      	ldr	r3, [pc, #180]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d105      	bne.n	800e532 <gos_triggerIncrement+0x6e>
 800e526:	4b2a      	ldr	r3, [pc, #168]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	4b28      	ldr	r3, [pc, #160]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e530:	701a      	strb	r2, [r3, #0]
 800e532:	4b28      	ldr	r3, [pc, #160]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	3301      	adds	r3, #1
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	4b26      	ldr	r3, [pc, #152]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e53c:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	891b      	ldrh	r3, [r3, #8]
 800e542:	4618      	mov	r0, r3
 800e544:	f7fc fb90 	bl	800ac68 <gos_taskUnblock>

            GOS_ISR_EXIT
 800e548:	4b22      	ldr	r3, [pc, #136]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d005      	beq.n	800e55c <gos_triggerIncrement+0x98>
 800e550:	4b20      	ldr	r3, [pc, #128]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	3b01      	subs	r3, #1
 800e556:	b2da      	uxtb	r2, r3
 800e558:	4b1e      	ldr	r3, [pc, #120]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e55a:	701a      	strb	r2, [r3, #0]
 800e55c:	4b1d      	ldr	r3, [pc, #116]	@ (800e5d4 <gos_triggerIncrement+0x110>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <gos_triggerIncrement+0xb4>
 800e564:	4b1a      	ldr	r3, [pc, #104]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d005      	beq.n	800e578 <gos_triggerIncrement+0xb4>
 800e56c:	4b18      	ldr	r3, [pc, #96]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	3b01      	subs	r3, #1
 800e572:	b2da      	uxtb	r2, r3
 800e574:	4b16      	ldr	r3, [pc, #88]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e576:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 800e578:	2355      	movs	r3, #85	@ 0x55
 800e57a:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800e57c:	4b12      	ldr	r3, [pc, #72]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d005      	beq.n	800e590 <gos_triggerIncrement+0xcc>
 800e584:	4b10      	ldr	r3, [pc, #64]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	3b01      	subs	r3, #1
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	4b0e      	ldr	r3, [pc, #56]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c8 <gos_triggerIncrement+0x104>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d108      	bne.n	800e5aa <gos_triggerIncrement+0xe6>
 800e598:	4b0c      	ldr	r3, [pc, #48]	@ (800e5cc <gos_triggerIncrement+0x108>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f383 8810 	msr	PRIMASK, r3
 800e5a0:	b662      	cpsie	i
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	4b09      	ldr	r3, [pc, #36]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <gos_triggerIncrement+0xfa>
 800e5b2:	4b07      	ldr	r3, [pc, #28]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	4b05      	ldr	r3, [pc, #20]	@ (800e5d0 <gos_triggerIncrement+0x10c>)
 800e5bc:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 800e5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20001963 	.word	0x20001963
 800e5cc:	20001964 	.word	0x20001964
 800e5d0:	20001961 	.word	0x20001961
 800e5d4:	20001962 	.word	0x20001962

0800e5d8 <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 800e5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e6:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	613b      	str	r3, [r7, #16]
 800e5f8:	e01e      	b.n	800e638 <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	4413      	add	r3, r2
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	461a      	mov	r2, r3
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	4053      	eors	r3, r2
 800e608:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 800e60a:	2308      	movs	r3, #8
 800e60c:	73fb      	strb	r3, [r7, #15]
 800e60e:	e00d      	b.n	800e62c <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	f003 0301 	and.w	r3, r3, #1
 800e616:	425b      	negs	r3, r3
 800e618:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	4b0c      	ldr	r3, [pc, #48]	@ (800e650 <gos_crcDriverGetCrc+0x78>)
 800e61e:	4013      	ands	r3, r2
 800e620:	697a      	ldr	r2, [r7, #20]
 800e622:	4053      	eors	r3, r2
 800e624:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 800e626:	7bfb      	ldrb	r3, [r7, #15]
 800e628:	3b01      	subs	r3, #1
 800e62a:	73fb      	strb	r3, [r7, #15]
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1ee      	bne.n	800e610 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	3301      	adds	r3, #1
 800e636:	613b      	str	r3, [r7, #16]
 800e638:	693a      	ldr	r2, [r7, #16]
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d3dc      	bcc.n	800e5fa <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	43db      	mvns	r3, r3
}
 800e644:	4618      	mov	r0, r3
 800e646:	371c      	adds	r7, #28
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	edb88320 	.word	0xedb88320

0800e654 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 800e654:	b40f      	push	{r0, r1, r2, r3}
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 800e65c:	23ae      	movs	r3, #174	@ 0xae
 800e65e:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 800e660:	f107 0314 	add.w	r3, r7, #20
 800e664:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 800e666:	683a      	ldr	r2, [r7, #0]
 800e668:	6939      	ldr	r1, [r7, #16]
 800e66a:	480a      	ldr	r0, [pc, #40]	@ (800e694 <gos_shellDriverTransmitString+0x40>)
 800e66c:	f008 fa8e 	bl	8016b8c <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 800e670:	4b09      	ldr	r3, [pc, #36]	@ (800e698 <gos_shellDriverTransmitString+0x44>)
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d005      	beq.n	800e684 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 800e678:	4b07      	ldr	r3, [pc, #28]	@ (800e698 <gos_shellDriverTransmitString+0x44>)
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	4805      	ldr	r0, [pc, #20]	@ (800e694 <gos_shellDriverTransmitString+0x40>)
 800e67e:	4798      	blx	r3
 800e680:	4603      	mov	r3, r0
 800e682:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 800e684:	79fb      	ldrb	r3, [r7, #7]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e690:	b004      	add	sp, #16
 800e692:	4770      	bx	lr
 800e694:	20003be8 	.word	0x20003be8
 800e698:	2000194c 	.word	0x2000194c

0800e69c <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 800e6a4:	23ae      	movs	r3, #174	@ 0xae
 800e6a6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 800e6a8:	4b07      	ldr	r3, [pc, #28]	@ (800e6c8 <gos_timerDriverSysTimerGet+0x2c>)
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d005      	beq.n	800e6bc <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 800e6b0:	4b05      	ldr	r3, [pc, #20]	@ (800e6c8 <gos_timerDriverSysTimerGet+0x2c>)
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	4798      	blx	r3
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	2000194c 	.word	0x2000194c

0800e6cc <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800e6d4:	23ae      	movs	r3, #174	@ 0xae
 800e6d6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 800e6d8:	4b07      	ldr	r3, [pc, #28]	@ (800e6f8 <gos_traceDriverTransmitString+0x2c>)
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 800e6e0:	4b05      	ldr	r3, [pc, #20]	@ (800e6f8 <gos_traceDriverTransmitString+0x2c>)
 800e6e2:	689b      	ldr	r3, [r3, #8]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	4798      	blx	r3
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	2000194c 	.word	0x2000194c

0800e6fc <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800e704:	23ae      	movs	r3, #174	@ 0xae
 800e706:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 800e708:	4b07      	ldr	r3, [pc, #28]	@ (800e728 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d005      	beq.n	800e71c <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 800e710:	4b05      	ldr	r3, [pc, #20]	@ (800e728 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	4798      	blx	r3
 800e718:	4603      	mov	r3, r0
 800e71a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	2000194c 	.word	0x2000194c

0800e72c <gos_libGetBuildDate>:
/**
 * TODO
 * @return
 */
void_t gos_libGetBuildDate (gos_year_t* pYear, gos_month_t* pMonth, gos_day_t* pDay)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
	/*
	 * Function code.
	 */
	*pYear = (gos_year_t)atoi(year_str);
 800e738:	480c      	ldr	r0, [pc, #48]	@ (800e76c <gos_libGetBuildDate+0x40>)
 800e73a:	f007 fc0b 	bl	8015f54 <atoi>
 800e73e:	4603      	mov	r3, r0
 800e740:	b29a      	uxth	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	801a      	strh	r2, [r3, #0]
	*pMonth = (gos_month_t)atoi(month_str);
 800e746:	480a      	ldr	r0, [pc, #40]	@ (800e770 <gos_libGetBuildDate+0x44>)
 800e748:	f007 fc04 	bl	8015f54 <atoi>
 800e74c:	4603      	mov	r3, r0
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	701a      	strb	r2, [r3, #0]
	*pDay = (gos_day_t)atoi(day_str);
 800e754:	4807      	ldr	r0, [pc, #28]	@ (800e774 <gos_libGetBuildDate+0x48>)
 800e756:	f007 fbfd 	bl	8015f54 <atoi>
 800e75a:	4603      	mov	r3, r0
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	801a      	strh	r2, [r3, #0]
}
 800e762:	bf00      	nop
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20000de4 	.word	0x20000de4
 800e770:	20000dec 	.word	0x20000dec
 800e774:	20000df0 	.word	0x20000df0

0800e778 <bld_init>:

/*
 * Function: bld_init
 */
gos_result_t bld_init (void_t)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 800e77e:	23ae      	movs	r3, #174	@ 0xae
 800e780:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800e782:	4810      	ldr	r0, [pc, #64]	@ (800e7c4 <bld_init+0x4c>)
 800e784:	f005 fc88 	bl	8014098 <svl_pdhGetBldCfg>

    if (bldConfig.installRequested == GOS_TRUE)
 800e788:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c4 <bld_init+0x4c>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b36      	cmp	r3, #54	@ 0x36
 800e78e:	d103      	bne.n	800e798 <bld_init+0x20>
    {
        bldState = BLD_STATE_INSTALL;
 800e790:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c8 <bld_init+0x50>)
 800e792:	2200      	movs	r2, #0
 800e794:	701a      	strb	r2, [r3, #0]
 800e796:	e00a      	b.n	800e7ae <bld_init+0x36>
    }
    else if (bldConfig.updateMode == GOS_TRUE)
 800e798:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c4 <bld_init+0x4c>)
 800e79a:	791b      	ldrb	r3, [r3, #4]
 800e79c:	2b36      	cmp	r3, #54	@ 0x36
 800e79e:	d103      	bne.n	800e7a8 <bld_init+0x30>
    {
        bldState = BLD_STATE_WAIT;
 800e7a0:	4b09      	ldr	r3, [pc, #36]	@ (800e7c8 <bld_init+0x50>)
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	e002      	b.n	800e7ae <bld_init+0x36>
    }
    else
    {
    	bldState = BLD_STATE_APP_CHECK;
 800e7a8:	4b07      	ldr	r3, [pc, #28]	@ (800e7c8 <bld_init+0x50>)
 800e7aa:	2202      	movs	r2, #2
 800e7ac:	701a      	strb	r2, [r3, #0]
    }

    initResult = gos_taskRegister(&bldTaskDesc, NULL);
 800e7ae:	2100      	movs	r1, #0
 800e7b0:	4806      	ldr	r0, [pc, #24]	@ (800e7cc <bld_init+0x54>)
 800e7b2:	f7fb fc8d 	bl	800a0d0 <gos_taskRegister>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800e7ba:	79fb      	ldrb	r3, [r7, #7]
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	20003cb0 	.word	0x20003cb0
 800e7c8:	20003f60 	.word	0x20003f60
 800e7cc:	20000df4 	.word	0x20000df4

0800e7d0 <bld_stateMachineGetState>:

/*
 * Function: bld_stateMachineGetState
 */
gos_result_t bld_stateMachineGetState (bld_state_t* pState)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t getStateResult = GOS_ERROR;
 800e7d8:	23ae      	movs	r3, #174	@ 0xae
 800e7da:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pState != NULL)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d005      	beq.n	800e7ee <bld_stateMachineGetState+0x1e>
    {
        *pState = bldState;
 800e7e2:	4b06      	ldr	r3, [pc, #24]	@ (800e7fc <bld_stateMachineGetState+0x2c>)
 800e7e4:	781a      	ldrb	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	701a      	strb	r2, [r3, #0]
        getStateResult = GOS_SUCCESS;
 800e7ea:	2355      	movs	r3, #85	@ 0x55
 800e7ec:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return getStateResult;
 800e7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20003f60 	.word	0x20003f60

0800e800 <bld_task>:

GOS_STATIC void_t bld_task (void_t)
{
 800e800:	b590      	push	{r4, r7, lr}
 800e802:	b08b      	sub	sp, #44	@ 0x2c
 800e804:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u32_t               installChunkNum  = 0u;
 800e806:	2300      	movs	r3, #0
 800e808:	613b      	str	r3, [r7, #16]
    u32_t               installChunkCntr = 0u;
 800e80a:	2300      	movs	r3, #0
 800e80c:	627b      	str	r3, [r7, #36]	@ 0x24
    u32_t               perc             = 0u;
 800e80e:	2300      	movs	r3, #0
 800e810:	60fb      	str	r3, [r7, #12]
    u32_t               startTick        = 0u;
 800e812:	2300      	movs	r3, #0
 800e814:	60bb      	str	r3, [r7, #8]
    bool_t              connectTmo       = GOS_FALSE;
 800e816:	2349      	movs	r3, #73	@ 0x49
 800e818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    gos_messageId_t     msgIds []        = { BLD_STATE_CONT_MSG_ID, 0 };
 800e81c:	f24b 43ed 	movw	r3, #46317	@ 0xb4ed
 800e820:	80bb      	strh	r3, [r7, #4]
 800e822:	2300      	movs	r3, #0
 800e824:	80fb      	strh	r3, [r7, #6]
    u32_t               byteCounter      = 0u;
 800e826:	2300      	movs	r3, #0
 800e828:	61fb      	str	r3, [r7, #28]

    /*
     * Function code.
     */
    // Startup delay (for printing).
    (void_t) gos_taskSleep(500);
 800e82a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e82e:	f7fb fde1 	bl	800a3f4 <gos_taskSleep>

    (void_t) svl_pdhGetSwInfo(&currentSwInfo);
 800e832:	48ab      	ldr	r0, [pc, #684]	@ (800eae0 <bld_task+0x2e0>)
 800e834:	f005 fbc0 	bl	8013fb8 <svl_pdhGetSwInfo>
    (void_t) memcpy((void_t*)&binaryDescriptor.binaryInfo, (void_t*)&currentSwInfo.appBinaryInfo, sizeof(svl_pdhBinaryInfo_t));
 800e838:	4aaa      	ldr	r2, [pc, #680]	@ (800eae4 <bld_task+0x2e4>)
 800e83a:	4ba9      	ldr	r3, [pc, #676]	@ (800eae0 <bld_task+0x2e0>)
 800e83c:	f102 042e 	add.w	r4, r2, #46	@ 0x2e
 800e840:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800e844:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e846:	6020      	str	r0, [r4, #0]
 800e848:	6061      	str	r1, [r4, #4]
 800e84a:	60a2      	str	r2, [r4, #8]

    for (;;)
    {
        switch (bldState)
 800e84c:	4ba6      	ldr	r3, [pc, #664]	@ (800eae8 <bld_task+0x2e8>)
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	2b02      	cmp	r3, #2
 800e852:	f000 8181 	beq.w	800eb58 <bld_task+0x358>
 800e856:	2b02      	cmp	r3, #2
 800e858:	f300 81c0 	bgt.w	800ebdc <bld_task+0x3dc>
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d003      	beq.n	800e868 <bld_task+0x68>
 800e860:	2b01      	cmp	r3, #1
 800e862:	f000 8115 	beq.w	800ea90 <bld_task+0x290>
 800e866:	e1b9      	b.n	800ebdc <bld_task+0x3dc>
        {
            case BLD_STATE_INSTALL:
            {
                // Install file is marked in configuration.
                // Try to copy it to application FLASH area.
                byteCounter = 0u;
 800e868:	2300      	movs	r3, #0
 800e86a:	61fb      	str	r3, [r7, #28]

                // Get data from external flash.
                (void_t) svl_sdhGetBinaryData(bldConfig.binaryIndex, &binaryDescriptor);
 800e86c:	4b9f      	ldr	r3, [pc, #636]	@ (800eaec <bld_task+0x2ec>)
 800e86e:	885b      	ldrh	r3, [r3, #2]
 800e870:	499c      	ldr	r1, [pc, #624]	@ (800eae4 <bld_task+0x2e4>)
 800e872:	4618      	mov	r0, r3
 800e874:	f006 f860 	bl	8014938 <svl_sdhGetBinaryData>

                // Check start address.
                if (binaryDescriptor.binaryInfo.startAddress < BLD_APP_ROM_START_ADDRESS)
 800e878:	4b9a      	ldr	r3, [pc, #616]	@ (800eae4 <bld_task+0x2e4>)
 800e87a:	f8d3 302e 	ldr.w	r3, [r3, #46]	@ 0x2e
 800e87e:	4a9c      	ldr	r2, [pc, #624]	@ (800eaf0 <bld_task+0x2f0>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d803      	bhi.n	800e88c <bld_task+0x8c>
                {
                    bldState = BLD_STATE_WAIT;
 800e884:	4b98      	ldr	r3, [pc, #608]	@ (800eae8 <bld_task+0x2e8>)
 800e886:	2201      	movs	r2, #1
 800e888:	701a      	strb	r2, [r3, #0]
                    break;
 800e88a:	e1a7      	b.n	800ebdc <bld_task+0x3dc>
                else
                {
                    // Start address OK.
                }

                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 800e88c:	4b95      	ldr	r3, [pc, #596]	@ (800eae4 <bld_task+0x2e4>)
 800e88e:	f8d3 3032 	ldr.w	r3, [r3, #50]	@ 0x32
 800e892:	0a5b      	lsrs	r3, r3, #9
                                  (binaryDescriptor.binaryInfo.size % BLD_INSTALL_CHUNK_SIZE == 0 ? 0 : 1);
 800e894:	4a93      	ldr	r2, [pc, #588]	@ (800eae4 <bld_task+0x2e4>)
 800e896:	f8d2 2032 	ldr.w	r2, [r2, #50]	@ 0x32
 800e89a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	bf14      	ite	ne
 800e8a2:	2201      	movne	r2, #1
 800e8a4:	2200      	moveq	r2, #0
 800e8a6:	b2d2      	uxtb	r2, r2
                installChunkNum = (binaryDescriptor.binaryInfo.size / BLD_INSTALL_CHUNK_SIZE) +
 800e8a8:	4413      	add	r3, r2
 800e8aa:	613b      	str	r3, [r7, #16]

                // Erase application area.
                (void_t) drv_flashErase(binaryDescriptor.binaryInfo.startAddress, binaryDescriptor.binaryInfo.size);
 800e8ac:	4b8d      	ldr	r3, [pc, #564]	@ (800eae4 <bld_task+0x2e4>)
 800e8ae:	f8d3 302e 	ldr.w	r3, [r3, #46]	@ 0x2e
 800e8b2:	4a8c      	ldr	r2, [pc, #560]	@ (800eae4 <bld_task+0x2e4>)
 800e8b4:	f8d2 2032 	ldr.w	r2, [r2, #50]	@ 0x32
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f001 fbac 	bl	8010018 <drv_flashErase>

                // Write to internal flash by chunks.
                (void_t) drv_flashUnlock();
 800e8c0:	f001 fc23 	bl	801010a <drv_flashUnlock>

                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8c8:	e0d3      	b.n	800ea72 <bld_task+0x272>
                {
                    // Read chunk from external flash.
                    (void_t) svl_sdhReadBytesFromMemory(
                            binaryDescriptor.binaryLocation + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE),
 800e8ca:	4b86      	ldr	r3, [pc, #536]	@ (800eae4 <bld_task+0x2e4>)
 800e8cc:	f8d3 202a 	ldr.w	r2, [r3, #42]	@ 0x2a
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d2:	025b      	lsls	r3, r3, #9
                    (void_t) svl_sdhReadBytesFromMemory(
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8da:	4986      	ldr	r1, [pc, #536]	@ (800eaf4 <bld_task+0x2f4>)
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f006 f899 	bl	8014a14 <svl_sdhReadBytesFromMemory>
                            bldInstallBuffer,
                            BLD_INSTALL_CHUNK_SIZE);

                    // Program chunk in internal flash.
                    if (((installChunkCntr + 1) * BLD_INSTALL_CHUNK_SIZE) < binaryDescriptor.binaryInfo.size)
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	025a      	lsls	r2, r3, #9
 800e8e8:	4b7e      	ldr	r3, [pc, #504]	@ (800eae4 <bld_task+0x2e4>)
 800e8ea:	f8d3 3032 	ldr.w	r3, [r3, #50]	@ 0x32
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d210      	bcs.n	800e914 <bld_task+0x114>
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800e8f2:	4b7c      	ldr	r3, [pc, #496]	@ (800eae4 <bld_task+0x2e4>)
 800e8f4:	f8d3 202e 	ldr.w	r2, [r3, #46]	@ 0x2e
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fa:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e902:	497c      	ldr	r1, [pc, #496]	@ (800eaf4 <bld_task+0x2f4>)
 800e904:	4618      	mov	r0, r3
 800e906:	f001 fbc9 	bl	801009c <drv_flashWriteWithoutLock>
                                 (void_t*)bldInstallBuffer,
                                 BLD_INSTALL_CHUNK_SIZE);

                        byteCounter += BLD_INSTALL_CHUNK_SIZE;
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e910:	61fb      	str	r3, [r7, #28]
 800e912:	e018      	b.n	800e946 <bld_task+0x146>
                    }
                    else
                    {
                        (void_t) drv_flashWriteWithoutLock(
                                 (binaryDescriptor.binaryInfo.startAddress + (installChunkCntr * BLD_INSTALL_CHUNK_SIZE)),
 800e914:	4b73      	ldr	r3, [pc, #460]	@ (800eae4 <bld_task+0x2e4>)
 800e916:	f8d3 202e 	ldr.w	r2, [r3, #46]	@ 0x2e
 800e91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91c:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800e91e:	18d0      	adds	r0, r2, r3
                                 (void_t*)bldInstallBuffer,
                                 binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE));
 800e920:	4b70      	ldr	r3, [pc, #448]	@ (800eae4 <bld_task+0x2e4>)
 800e922:	f8d3 2032 	ldr.w	r2, [r3, #50]	@ 0x32
 800e926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e928:	025b      	lsls	r3, r3, #9
                        (void_t) drv_flashWriteWithoutLock(
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	461a      	mov	r2, r3
 800e92e:	4971      	ldr	r1, [pc, #452]	@ (800eaf4 <bld_task+0x2f4>)
 800e930:	f001 fbb4 	bl	801009c <drv_flashWriteWithoutLock>

                        byteCounter += binaryDescriptor.binaryInfo.size - (installChunkCntr * BLD_INSTALL_CHUNK_SIZE);
 800e934:	4b6b      	ldr	r3, [pc, #428]	@ (800eae4 <bld_task+0x2e4>)
 800e936:	f8d3 2032 	ldr.w	r2, [r3, #50]	@ 0x32
 800e93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93c:	025b      	lsls	r3, r3, #9
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	69fa      	ldr	r2, [r7, #28]
 800e942:	4413      	add	r3, r2
 800e944:	61fb      	str	r3, [r7, #28]
                    }

                    // Display progress.
                    perc = 100 * 100 * byteCounter / binaryDescriptor.binaryInfo.size;
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e94c:	fb03 f202 	mul.w	r2, r3, r2
 800e950:	4b64      	ldr	r3, [pc, #400]	@ (800eae4 <bld_task+0x2e4>)
 800e952:	f8d3 3032 	ldr.w	r3, [r3, #50]	@ 0x32
 800e956:	fbb2 f3f3 	udiv	r3, r2, r3
 800e95a:	60fb      	str	r3, [r7, #12]

                    (void_t) sprintf(progressBuffer, "\rProgress: [ "TRACE_FG_YELLOW_START);
 800e95c:	4966      	ldr	r1, [pc, #408]	@ (800eaf8 <bld_task+0x2f8>)
 800e95e:	4867      	ldr	r0, [pc, #412]	@ (800eafc <bld_task+0x2fc>)
 800e960:	f008 f89a 	bl	8016a98 <siprintf>

                    for (int i = 1; i <= 25; i++)
 800e964:	2301      	movs	r3, #1
 800e966:	61bb      	str	r3, [r7, #24]
 800e968:	e025      	b.n	800e9b6 <bld_task+0x1b6>
                    {
                        if (i * 2 <= (perc / 100))
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	005b      	lsls	r3, r3, #1
 800e96e:	4619      	mov	r1, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4a63      	ldr	r2, [pc, #396]	@ (800eb00 <bld_task+0x300>)
 800e974:	fba2 2303 	umull	r2, r3, r2, r3
 800e978:	095b      	lsrs	r3, r3, #5
 800e97a:	4299      	cmp	r1, r3
 800e97c:	d80c      	bhi.n	800e998 <bld_task+0x198>
                        {
                            (void_t) strcat(progressBuffer, "=");
 800e97e:	485f      	ldr	r0, [pc, #380]	@ (800eafc <bld_task+0x2fc>)
 800e980:	f7f1 fc96 	bl	80002b0 <strlen>
 800e984:	4603      	mov	r3, r0
 800e986:	461a      	mov	r2, r3
 800e988:	4b5c      	ldr	r3, [pc, #368]	@ (800eafc <bld_task+0x2fc>)
 800e98a:	4413      	add	r3, r2
 800e98c:	495d      	ldr	r1, [pc, #372]	@ (800eb04 <bld_task+0x304>)
 800e98e:	461a      	mov	r2, r3
 800e990:	460b      	mov	r3, r1
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	8013      	strh	r3, [r2, #0]
 800e996:	e00b      	b.n	800e9b0 <bld_task+0x1b0>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 800e998:	4858      	ldr	r0, [pc, #352]	@ (800eafc <bld_task+0x2fc>)
 800e99a:	f7f1 fc89 	bl	80002b0 <strlen>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	4b56      	ldr	r3, [pc, #344]	@ (800eafc <bld_task+0x2fc>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	4958      	ldr	r1, [pc, #352]	@ (800eb08 <bld_task+0x308>)
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	8013      	strh	r3, [r2, #0]
                    for (int i = 1; i <= 25; i++)
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	61bb      	str	r3, [r7, #24]
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	2b19      	cmp	r3, #25
 800e9ba:	ddd6      	ble.n	800e96a <bld_task+0x16a>
                        }
                    }

                    (void_t) sprintf(percentageBuffer, "%3u.%02u%% ", (u8_t)(perc / 100), (u8_t)(perc % 100));
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4a50      	ldr	r2, [pc, #320]	@ (800eb00 <bld_task+0x300>)
 800e9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c4:	095b      	lsrs	r3, r3, #5
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	4b4c      	ldr	r3, [pc, #304]	@ (800eb00 <bld_task+0x300>)
 800e9ce:	fba3 1302 	umull	r1, r3, r3, r2
 800e9d2:	095b      	lsrs	r3, r3, #5
 800e9d4:	2164      	movs	r1, #100	@ 0x64
 800e9d6:	fb01 f303 	mul.w	r3, r1, r3
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	4602      	mov	r2, r0
 800e9e0:	494a      	ldr	r1, [pc, #296]	@ (800eb0c <bld_task+0x30c>)
 800e9e2:	484b      	ldr	r0, [pc, #300]	@ (800eb10 <bld_task+0x310>)
 800e9e4:	f008 f858 	bl	8016a98 <siprintf>
                    (void_t) strcat(progressBuffer, percentageBuffer);
 800e9e8:	4949      	ldr	r1, [pc, #292]	@ (800eb10 <bld_task+0x310>)
 800e9ea:	4844      	ldr	r0, [pc, #272]	@ (800eafc <bld_task+0x2fc>)
 800e9ec:	f008 f8e0 	bl	8016bb0 <strcat>

                    for (int i = 26; i <= 50; i++)
 800e9f0:	231a      	movs	r3, #26
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	e025      	b.n	800ea42 <bld_task+0x242>
                    {
                        if (i * 2 <= (perc / 100))
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	005b      	lsls	r3, r3, #1
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	4a40      	ldr	r2, [pc, #256]	@ (800eb00 <bld_task+0x300>)
 800ea00:	fba2 2303 	umull	r2, r3, r2, r3
 800ea04:	095b      	lsrs	r3, r3, #5
 800ea06:	4299      	cmp	r1, r3
 800ea08:	d80c      	bhi.n	800ea24 <bld_task+0x224>
                        {
                            (void_t) strcat(progressBuffer, "=");
 800ea0a:	483c      	ldr	r0, [pc, #240]	@ (800eafc <bld_task+0x2fc>)
 800ea0c:	f7f1 fc50 	bl	80002b0 <strlen>
 800ea10:	4603      	mov	r3, r0
 800ea12:	461a      	mov	r2, r3
 800ea14:	4b39      	ldr	r3, [pc, #228]	@ (800eafc <bld_task+0x2fc>)
 800ea16:	4413      	add	r3, r2
 800ea18:	493a      	ldr	r1, [pc, #232]	@ (800eb04 <bld_task+0x304>)
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	881b      	ldrh	r3, [r3, #0]
 800ea20:	8013      	strh	r3, [r2, #0]
 800ea22:	e00b      	b.n	800ea3c <bld_task+0x23c>
                        }
                        else
                        {
                            (void_t) strcat(progressBuffer, " ");
 800ea24:	4835      	ldr	r0, [pc, #212]	@ (800eafc <bld_task+0x2fc>)
 800ea26:	f7f1 fc43 	bl	80002b0 <strlen>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	4b33      	ldr	r3, [pc, #204]	@ (800eafc <bld_task+0x2fc>)
 800ea30:	4413      	add	r3, r2
 800ea32:	4935      	ldr	r1, [pc, #212]	@ (800eb08 <bld_task+0x308>)
 800ea34:	461a      	mov	r2, r3
 800ea36:	460b      	mov	r3, r1
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	8013      	strh	r3, [r2, #0]
                    for (int i = 26; i <= 50; i++)
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2b32      	cmp	r3, #50	@ 0x32
 800ea46:	ddd6      	ble.n	800e9f6 <bld_task+0x1f6>
                        }
                    }

                    (void_t) strcat(progressBuffer, TRACE_FORMAT_RESET" ]");
 800ea48:	482c      	ldr	r0, [pc, #176]	@ (800eafc <bld_task+0x2fc>)
 800ea4a:	f7f1 fc31 	bl	80002b0 <strlen>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	461a      	mov	r2, r3
 800ea52:	4b2a      	ldr	r3, [pc, #168]	@ (800eafc <bld_task+0x2fc>)
 800ea54:	4413      	add	r3, r2
 800ea56:	4a2f      	ldr	r2, [pc, #188]	@ (800eb14 <bld_task+0x314>)
 800ea58:	6810      	ldr	r0, [r2, #0]
 800ea5a:	6018      	str	r0, [r3, #0]
 800ea5c:	8891      	ldrh	r1, [r2, #4]
 800ea5e:	7992      	ldrb	r2, [r2, #6]
 800ea60:	8099      	strh	r1, [r3, #4]
 800ea62:	719a      	strb	r2, [r3, #6]
                    (void_t) gos_traceTrace(GOS_FALSE, progressBuffer);
 800ea64:	4925      	ldr	r1, [pc, #148]	@ (800eafc <bld_task+0x2fc>)
 800ea66:	2049      	movs	r0, #73	@ 0x49
 800ea68:	f7ff f956 	bl	800dd18 <gos_traceTrace>
                for (installChunkCntr = 0u; installChunkCntr < installChunkNum; installChunkCntr++)
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6e:	3301      	adds	r3, #1
 800ea70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	f4ff af27 	bcc.w	800e8ca <bld_task+0xca>
                }

                (void_t) drv_flashLock();
 800ea7c:	f001 fb56 	bl	801012c <drv_flashLock>

                (void_t) gos_traceTrace(GOS_FALSE, "\r\nInstall finished.\r\n");
 800ea80:	4925      	ldr	r1, [pc, #148]	@ (800eb18 <bld_task+0x318>)
 800ea82:	2049      	movs	r0, #73	@ 0x49
 800ea84:	f7ff f948 	bl	800dd18 <gos_traceTrace>

                // Check newly installed application integrity.
                bldState = BLD_STATE_APP_CHECK;
 800ea88:	4b17      	ldr	r3, [pc, #92]	@ (800eae8 <bld_task+0x2e8>)
 800ea8a:	2202      	movs	r2, #2
 800ea8c:	701a      	strb	r2, [r3, #0]

                break;
 800ea8e:	e0a5      	b.n	800ebdc <bld_task+0x3dc>
            }
            case BLD_STATE_WAIT:
            {
                // In this state, bootloader is waiting for a software install
                // request or other requests.
                (void_t) gos_traceTrace(GOS_TRUE, "Boot mode entered\r\n");
 800ea90:	4922      	ldr	r1, [pc, #136]	@ (800eb1c <bld_task+0x31c>)
 800ea92:	2036      	movs	r0, #54	@ 0x36
 800ea94:	f7ff f940 	bl	800dd18 <gos_traceTrace>

                connectTmo = GOS_TRUE;
 800ea98:	2336      	movs	r3, #54	@ 0x36
 800ea9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                startTick = gos_kernelGetSysTicks();
 800ea9e:	f7fa faf3 	bl	8009088 <gos_kernelGetSysTicks>
 800eaa2:	60b8      	str	r0, [r7, #8]

                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 800eaa4:	e03e      	b.n	800eb24 <bld_task+0x324>
                {
                    if (gos_messageRx(msgIds, &gosMsg, 1000u) == GOS_SUCCESS)
 800eaa6:	1d3b      	adds	r3, r7, #4
 800eaa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eaac:	491c      	ldr	r1, [pc, #112]	@ (800eb20 <bld_task+0x320>)
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fd fdd4 	bl	800c65c <gos_messageRx>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b55      	cmp	r3, #85	@ 0x55
 800eab8:	d103      	bne.n	800eac2 <bld_task+0x2c2>
                    {
                        // Update start tick to restart timeout.
                        startTick = gos_kernelGetSysTicks();
 800eaba:	f7fa fae5 	bl	8009088 <gos_kernelGetSysTicks>
 800eabe:	60b8      	str	r0, [r7, #8]
                        break;
 800eac0:	e03a      	b.n	800eb38 <bld_task+0x338>
                    }
                    else
                    {
                        // RX timeout.
                        // Check install request.
                        (void_t) svl_pdhGetBldCfg(&bldConfig);
 800eac2:	480a      	ldr	r0, [pc, #40]	@ (800eaec <bld_task+0x2ec>)
 800eac4:	f005 fae8 	bl	8014098 <svl_pdhGetBldCfg>

                        if (bldConfig.installRequested == GOS_TRUE)
 800eac8:	4b08      	ldr	r3, [pc, #32]	@ (800eaec <bld_task+0x2ec>)
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b36      	cmp	r3, #54	@ 0x36
 800eace:	d129      	bne.n	800eb24 <bld_task+0x324>
                        {
                            connectTmo = GOS_FALSE;
 800ead0:	2349      	movs	r3, #73	@ 0x49
 800ead2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                            bldState   = BLD_STATE_INSTALL;
 800ead6:	4b04      	ldr	r3, [pc, #16]	@ (800eae8 <bld_task+0x2e8>)
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
                            break;
 800eadc:	e02c      	b.n	800eb38 <bld_task+0x338>
 800eade:	bf00      	nop
 800eae0:	20003cc0 	.word	0x20003cc0
 800eae4:	200041c4 	.word	0x200041c4
 800eae8:	20003f60 	.word	0x20003f60
 800eaec:	20003cb0 	.word	0x20003cb0
 800eaf0:	0801ffff 	.word	0x0801ffff
 800eaf4:	20003f64 	.word	0x20003f64
 800eaf8:	08019b20 	.word	0x08019b20
 800eafc:	20004164 	.word	0x20004164
 800eb00:	51eb851f 	.word	0x51eb851f
 800eb04:	08019b34 	.word	0x08019b34
 800eb08:	08019b38 	.word	0x08019b38
 800eb0c:	08019b3c 	.word	0x08019b3c
 800eb10:	200041b4 	.word	0x200041b4
 800eb14:	08019b48 	.word	0x08019b48
 800eb18:	08019b50 	.word	0x08019b50
 800eb1c:	08019b68 	.word	0x08019b68
 800eb20:	20004200 	.word	0x20004200
                while ((gos_kernelGetSysTicks() - startTick) <= bldConfig.requestTimeout)
 800eb24:	f7fa fab0 	bl	8009088 <gos_kernelGetSysTicks>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	1ad2      	subs	r2, r2, r3
 800eb2e:	4b2d      	ldr	r3, [pc, #180]	@ (800ebe4 <bld_task+0x3e4>)
 800eb30:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d9b6      	bls.n	800eaa6 <bld_task+0x2a6>
                        	// Nothing to do.
                        }
                    }
                }

                (void_t) gos_traceTrace(GOS_FALSE, "\r\n");
 800eb38:	492b      	ldr	r1, [pc, #172]	@ (800ebe8 <bld_task+0x3e8>)
 800eb3a:	2049      	movs	r0, #73	@ 0x49
 800eb3c:	f7ff f8ec 	bl	800dd18 <gos_traceTrace>

                if (connectTmo == GOS_TRUE)
 800eb40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800eb44:	2b36      	cmp	r3, #54	@ 0x36
 800eb46:	d148      	bne.n	800ebda <bld_task+0x3da>
                {
                    (void_t) gos_traceTrace(GOS_TRUE, "Request timed out.\r\n");
 800eb48:	4928      	ldr	r1, [pc, #160]	@ (800ebec <bld_task+0x3ec>)
 800eb4a:	2036      	movs	r0, #54	@ 0x36
 800eb4c:	f7ff f8e4 	bl	800dd18 <gos_traceTrace>
                    bldState = BLD_STATE_APP_CHECK;
 800eb50:	4b27      	ldr	r3, [pc, #156]	@ (800ebf0 <bld_task+0x3f0>)
 800eb52:	2202      	movs	r2, #2
 800eb54:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Request served.
                }

                break;
 800eb56:	e040      	b.n	800ebda <bld_task+0x3da>
            }
            case BLD_STATE_APP_CHECK:
            {
                if (bld_checkApplication(&binaryDescriptor.binaryInfo, GOS_TRUE) == GOS_SUCCESS)
 800eb58:	2136      	movs	r1, #54	@ 0x36
 800eb5a:	4826      	ldr	r0, [pc, #152]	@ (800ebf4 <bld_task+0x3f4>)
 800eb5c:	f000 f854 	bl	800ec08 <bld_checkApplication>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b55      	cmp	r3, #85	@ 0x55
 800eb64:	d125      	bne.n	800ebb2 <bld_task+0x3b2>
                {
                    // Application OK.
                    bldConfig.installRequested = GOS_FALSE;
 800eb66:	4b1f      	ldr	r3, [pc, #124]	@ (800ebe4 <bld_task+0x3e4>)
 800eb68:	2249      	movs	r2, #73	@ 0x49
 800eb6a:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 800eb6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ebe4 <bld_task+0x3e4>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_FALSE;
 800eb72:	4b1c      	ldr	r3, [pc, #112]	@ (800ebe4 <bld_task+0x3e4>)
 800eb74:	2249      	movs	r2, #73	@ 0x49
 800eb76:	711a      	strb	r2, [r3, #4]
                    bldConfig.startupCounter   = 1u;
 800eb78:	4b1a      	ldr	r3, [pc, #104]	@ (800ebe4 <bld_task+0x3e4>)
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	715a      	strb	r2, [r3, #5]

                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 800eb7e:	4819      	ldr	r0, [pc, #100]	@ (800ebe4 <bld_task+0x3e4>)
 800eb80:	f005 fb6a 	bl	8014258 <svl_pdhSetBldCfg>

                    (void_t) memcpy((void_t*)&currentSwInfo.appBinaryInfo, (void_t*)&binaryDescriptor.binaryInfo, sizeof(currentSwInfo.appBinaryInfo));
 800eb84:	4b1c      	ldr	r3, [pc, #112]	@ (800ebf8 <bld_task+0x3f8>)
 800eb86:	4a1d      	ldr	r2, [pc, #116]	@ (800ebfc <bld_task+0x3fc>)
 800eb88:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800eb8c:	322e      	adds	r2, #46	@ 0x2e
 800eb8e:	6810      	ldr	r0, [r2, #0]
 800eb90:	6851      	ldr	r1, [r2, #4]
 800eb92:	6892      	ldr	r2, [r2, #8]
 800eb94:	c307      	stmia	r3!, {r0, r1, r2}

                    (void_t) svl_pdhSetSwInfo(&currentSwInfo);
 800eb96:	4818      	ldr	r0, [pc, #96]	@ (800ebf8 <bld_task+0x3f8>)
 800eb98:	f005 faee 	bl	8014178 <svl_pdhSetSwInfo>

                    (void_t) gos_traceTrace(GOS_TRUE, "Exiting update mode...\r\n");
 800eb9c:	4918      	ldr	r1, [pc, #96]	@ (800ec00 <bld_task+0x400>)
 800eb9e:	2036      	movs	r0, #54	@ 0x36
 800eba0:	f7ff f8ba 	bl	800dd18 <gos_traceTrace>
                    (void_t) gos_taskSleep(300);
 800eba4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eba8:	f7fb fc24 	bl	800a3f4 <gos_taskSleep>
                    gos_kernelReset();
 800ebac:	f7fa fa8a 	bl	80090c4 <gos_kernelReset>

                    bldState = BLD_STATE_WAIT;

                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
                }
                break;
 800ebb0:	e014      	b.n	800ebdc <bld_task+0x3dc>
                    bldConfig.installRequested = GOS_FALSE;
 800ebb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ebe4 <bld_task+0x3e4>)
 800ebb4:	2249      	movs	r2, #73	@ 0x49
 800ebb6:	701a      	strb	r2, [r3, #0]
                    bldConfig.binaryIndex      = 0u;
 800ebb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe4 <bld_task+0x3e4>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	805a      	strh	r2, [r3, #2]
                    bldConfig.updateMode       = GOS_TRUE;
 800ebbe:	4b09      	ldr	r3, [pc, #36]	@ (800ebe4 <bld_task+0x3e4>)
 800ebc0:	2236      	movs	r2, #54	@ 0x36
 800ebc2:	711a      	strb	r2, [r3, #4]
                    (void_t) svl_pdhSetBldCfg(&bldConfig);
 800ebc4:	4807      	ldr	r0, [pc, #28]	@ (800ebe4 <bld_task+0x3e4>)
 800ebc6:	f005 fb47 	bl	8014258 <svl_pdhSetBldCfg>
                    bldState = BLD_STATE_WAIT;
 800ebca:	4b09      	ldr	r3, [pc, #36]	@ (800ebf0 <bld_task+0x3f0>)
 800ebcc:	2201      	movs	r2, #1
 800ebce:	701a      	strb	r2, [r3, #0]
                    (void_t) gos_traceTrace(GOS_TRUE, "Entering update mode...\r\n");
 800ebd0:	490c      	ldr	r1, [pc, #48]	@ (800ec04 <bld_task+0x404>)
 800ebd2:	2036      	movs	r0, #54	@ 0x36
 800ebd4:	f7ff f8a0 	bl	800dd18 <gos_traceTrace>
                break;
 800ebd8:	e000      	b.n	800ebdc <bld_task+0x3dc>
                break;
 800ebda:	bf00      	nop
            }
        }
        (void_t) gos_taskSleep(20);
 800ebdc:	2014      	movs	r0, #20
 800ebde:	f7fb fc09 	bl	800a3f4 <gos_taskSleep>
        switch (bldState)
 800ebe2:	e633      	b.n	800e84c <bld_task+0x4c>
 800ebe4:	20003cb0 	.word	0x20003cb0
 800ebe8:	08019b7c 	.word	0x08019b7c
 800ebec:	08019b80 	.word	0x08019b80
 800ebf0:	20003f60 	.word	0x20003f60
 800ebf4:	200041f2 	.word	0x200041f2
 800ebf8:	20003cc0 	.word	0x20003cc0
 800ebfc:	200041c4 	.word	0x200041c4
 800ec00:	08019b98 	.word	0x08019b98
 800ec04:	08019bb4 	.word	0x08019bb4

0800ec08 <bld_checkApplication>:

/*
 * Function: bld_checkApplication
 */
gos_result_t bld_checkApplication (svl_pdhBinaryInfo_t* pAppData, bool_t bootMode)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70fb      	strb	r3, [r7, #3]
    /*
     * Local variables.
     */
    gos_result_t appCheckResult = GOS_ERROR;
 800ec14:	23ae      	movs	r3, #174	@ 0xae
 800ec16:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check application size.
    if (pAppData->size > 0u && pAppData->size <= BLD_APP_ROM_SIZE)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d020      	beq.n	800ec62 <bld_checkApplication+0x5a>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ec28:	d81b      	bhi.n	800ec62 <bld_checkApplication+0x5a>
    {
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6859      	ldr	r1, [r3, #4]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	2300      	movs	r3, #0
 800ec3a:	f000 fcf3 	bl	800f624 <drv_crcCheckCrc32>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2bca      	cmp	r3, #202	@ 0xca
 800ec42:	d102      	bne.n	800ec4a <bld_checkApplication+0x42>
        {
            appCheckResult = GOS_SUCCESS;
 800ec44:	2355      	movs	r3, #85	@ 0x55
 800ec46:	73fb      	strb	r3, [r7, #15]
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800ec48:	e016      	b.n	800ec78 <bld_checkApplication+0x70>
        }
        else
        {
            // Application check fail.
            if (bootMode == GOS_TRUE)
 800ec4a:	78fb      	ldrb	r3, [r7, #3]
 800ec4c:	2b36      	cmp	r3, #54	@ 0x36
 800ec4e:	d104      	bne.n	800ec5a <bld_checkApplication+0x52>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "Application CRC error.\r\n");
 800ec50:	490c      	ldr	r1, [pc, #48]	@ (800ec84 <bld_checkApplication+0x7c>)
 800ec52:	2036      	movs	r0, #54	@ 0x36
 800ec54:	f7ff f860 	bl	800dd18 <gos_traceTrace>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800ec58:	e00e      	b.n	800ec78 <bld_checkApplication+0x70>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Application CRC error.\r\n");
 800ec5a:	480a      	ldr	r0, [pc, #40]	@ (800ec84 <bld_checkApplication+0x7c>)
 800ec5c:	f7ff fab2 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
        if (drv_crcCheckCrc32((u8_t*)pAppData->startAddress, pAppData->size, pAppData->crc, NULL) == DRV_CRC_CHECK_OK)
 800ec60:	e00a      	b.n	800ec78 <bld_checkApplication+0x70>
            }
        }
    }
    else
    {
        if (bootMode == GOS_TRUE)
 800ec62:	78fb      	ldrb	r3, [r7, #3]
 800ec64:	2b36      	cmp	r3, #54	@ 0x36
 800ec66:	d104      	bne.n	800ec72 <bld_checkApplication+0x6a>
        {
            (void_t) gos_traceTrace(GOS_TRUE, "Application size error.\r\n");
 800ec68:	4907      	ldr	r1, [pc, #28]	@ (800ec88 <bld_checkApplication+0x80>)
 800ec6a:	2036      	movs	r0, #54	@ 0x36
 800ec6c:	f7ff f854 	bl	800dd18 <gos_traceTrace>
 800ec70:	e002      	b.n	800ec78 <bld_checkApplication+0x70>
        }
        else
        {
            (void_t) gos_traceTraceFormattedUnsafe("Application size error.\r\n");
 800ec72:	4805      	ldr	r0, [pc, #20]	@ (800ec88 <bld_checkApplication+0x80>)
 800ec74:	f7ff faa6 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
        }
    }

    return appCheckResult;
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	08019bd0 	.word	0x08019bd0
 800ec88:	08019bec 	.word	0x08019bec

0800ec8c <bld_jumpToApplication>:

/*
 * Function: bld_jumpToApplication
 */
gos_result_t bld_jumpToApplication (void_t)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t jumpResult = GOS_ERROR;
 800ec92:	23ae      	movs	r3, #174	@ 0xae
 800ec94:	717b      	strb	r3, [r7, #5]
    u16_t        irqIdx     = 0u;
 800ec96:	2300      	movs	r3, #0
 800ec98:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    if (currentSwInfo.appBinaryInfo.startAddress % 0x200 == 0u)
 800ec9a:	4b21      	ldr	r3, [pc, #132]	@ (800ed20 <bld_jumpToApplication+0x94>)
 800ec9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d135      	bne.n	800ed14 <bld_jumpToApplication+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800eca8:	b672      	cpsid	i
}
 800ecaa:	bf00      	nop
    {
        /* Disable all interrupts */
        __disable_irq();

        /* Disable Systick timer */
        SysTick->CTRL = 0;
 800ecac:	4b1d      	ldr	r3, [pc, #116]	@ (800ed24 <bld_jumpToApplication+0x98>)
 800ecae:	2200      	movs	r2, #0
 800ecb0:	601a      	str	r2, [r3, #0]

        /* Set the clock to the default state */
        HAL_RCC_DeInit();
 800ecb2:	f7f6 fa9d 	bl	80051f0 <HAL_RCC_DeInit>
        HAL_DeInit();
 800ecb6:	f7f2 feef 	bl	8001a98 <HAL_DeInit>

        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 800ecba:	2300      	movs	r3, #0
 800ecbc:	80fb      	strh	r3, [r7, #6]
 800ecbe:	e010      	b.n	800ece2 <bld_jumpToApplication+0x56>
        {
            NVIC->ICER[irqIdx] = 0xFFFFFFFF;
 800ecc0:	4a19      	ldr	r2, [pc, #100]	@ (800ed28 <bld_jumpToApplication+0x9c>)
 800ecc2:	88fb      	ldrh	r3, [r7, #6]
 800ecc4:	3320      	adds	r3, #32
 800ecc6:	f04f 31ff 	mov.w	r1, #4294967295
 800ecca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            NVIC->ICPR[irqIdx] = 0xFFFFFFFF;
 800ecce:	4a16      	ldr	r2, [pc, #88]	@ (800ed28 <bld_jumpToApplication+0x9c>)
 800ecd0:	88fb      	ldrh	r3, [r7, #6]
 800ecd2:	3360      	adds	r3, #96	@ 0x60
 800ecd4:	f04f 31ff 	mov.w	r1, #4294967295
 800ecd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (irqIdx = 0; irqIdx < sizeof(NVIC->ICER) / sizeof(NVIC->ICER[0]); irqIdx++)
 800ecdc:	88fb      	ldrh	r3, [r7, #6]
 800ecde:	3301      	adds	r3, #1
 800ece0:	80fb      	strh	r3, [r7, #6]
 800ece2:	88fb      	ldrh	r3, [r7, #6]
 800ece4:	2b07      	cmp	r3, #7
 800ece6:	d9eb      	bls.n	800ecc0 <bld_jumpToApplication+0x34>
        }

        SYSCFG->MEMRMP = 0x01;
 800ece8:	4b10      	ldr	r3, [pc, #64]	@ (800ed2c <bld_jumpToApplication+0xa0>)
 800ecea:	2201      	movs	r2, #1
 800ecec:	601a      	str	r2, [r3, #0]

        SCB->VTOR = currentSwInfo.appBinaryInfo.startAddress;
 800ecee:	4a10      	ldr	r2, [pc, #64]	@ (800ed30 <bld_jumpToApplication+0xa4>)
 800ecf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ed20 <bld_jumpToApplication+0x94>)
 800ecf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ecf6:	6093      	str	r3, [r2, #8]

        // Set the MSP
        __set_MSP(((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->initSp);
 800ecf8:	4b09      	ldr	r3, [pc, #36]	@ (800ed20 <bld_jumpToApplication+0x94>)
 800ecfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	f383 8808 	msr	MSP, r3
}
 800ed08:	bf00      	nop

        // Jump to app firmware
        ((bld_boot_vect_table_t*)currentSwInfo.appBinaryInfo.startAddress)->resetHandler();
 800ed0a:	4b05      	ldr	r3, [pc, #20]	@ (800ed20 <bld_jumpToApplication+0x94>)
 800ed0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	4798      	blx	r3
    else
    {
        // Address is incorrect.
    }

    return jumpResult;
 800ed14:	797b      	ldrb	r3, [r7, #5]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3708      	adds	r7, #8
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	20003cc0 	.word	0x20003cc0
 800ed24:	e000e010 	.word	0xe000e010
 800ed28:	e000e100 	.word	0xe000e100
 800ed2c:	40013800 	.word	0x40013800
 800ed30:	e000ed00 	.word	0xe000ed00

0800ed34 <bld_getBootloaderSize>:

/*
 * Function: bld_getBootloaderSize
 */
gos_result_t bld_getBootloaderSize (u32_t* pSize)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b085      	sub	sp, #20
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t sizeGetResult = GOS_SUCCESS;
 800ed3c:	2355      	movs	r3, #85	@ 0x55
 800ed3e:	73fb      	strb	r3, [r7, #15]
    u32_t        address       = BLD_ROM_END_ADDRESS;
 800ed40:	4b13      	ldr	r3, [pc, #76]	@ (800ed90 <bld_getBootloaderSize+0x5c>)
 800ed42:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pSize != NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d017      	beq.n	800ed7a <bld_getBootloaderSize+0x46>
    {
        *pSize = (BLD_ROM_END_ADDRESS - BLD_ROM_START_ADDRESS);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a11      	ldr	r2, [pc, #68]	@ (800ed94 <bld_getBootloaderSize+0x60>)
 800ed4e:	601a      	str	r2, [r3, #0]

        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 800ed50:	4b0f      	ldr	r3, [pc, #60]	@ (800ed90 <bld_getBootloaderSize+0x5c>)
 800ed52:	60bb      	str	r3, [r7, #8]
 800ed54:	e00c      	b.n	800ed70 <bld_getBootloaderSize+0x3c>
        {
            if ((u8_t)(*((u32_t*)address)) != 0xFFu)
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2bff      	cmp	r3, #255	@ 0xff
 800ed5e:	d10f      	bne.n	800ed80 <bld_getBootloaderSize+0x4c>
            {
                break;
            }
            else
            {
                (*pSize)--;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	1e5a      	subs	r2, r3, #1
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
        for (address = BLD_ROM_END_ADDRESS; address >= BLD_ROM_START_ADDRESS; address--)
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	60bb      	str	r3, [r7, #8]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	4a09      	ldr	r2, [pc, #36]	@ (800ed98 <bld_getBootloaderSize+0x64>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d2ee      	bcs.n	800ed56 <bld_getBootloaderSize+0x22>
 800ed78:	e003      	b.n	800ed82 <bld_getBootloaderSize+0x4e>
        }
    }
    else
    {
        // NULL pointer error.
        sizeGetResult = GOS_ERROR;
 800ed7a:	23ae      	movs	r3, #174	@ 0xae
 800ed7c:	73fb      	strb	r3, [r7, #15]
 800ed7e:	e000      	b.n	800ed82 <bld_getBootloaderSize+0x4e>
                break;
 800ed80:	bf00      	nop
    }

    return sizeGetResult;
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	0801ffff 	.word	0x0801ffff
 800ed94:	0001bfff 	.word	0x0001bfff
 800ed98:	08004000 	.word	0x08004000

0800ed9c <bld_getBootloaderCrc>:

/*
 * Function: bld_getBootloaderCrc
 */
gos_result_t bld_getBootloaderCrc (u32_t* pCrc)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 800eda4:	23ae      	movs	r3, #174	@ 0xae
 800eda6:	73fb      	strb	r3, [r7, #15]
    u32_t        bldSize      = 0u;
 800eda8:	2300      	movs	r3, #0
 800edaa:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (pCrc != NULL)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d011      	beq.n	800edd6 <bld_getBootloaderCrc+0x3a>
    {
        crcGetResult = bld_getBootloaderSize(&bldSize);
 800edb2:	f107 0308 	add.w	r3, r7, #8
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff ffbc 	bl	800ed34 <bld_getBootloaderSize>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]
        crcGetResult &= drv_crcGetCrc32((u8_t*)BLD_ROM_START_ADDRESS, bldSize, pCrc);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	4619      	mov	r1, r3
 800edc6:	4809      	ldr	r0, [pc, #36]	@ (800edec <bld_getBootloaderCrc+0x50>)
 800edc8:	f000 fbe0 	bl	800f58c <drv_crcGetCrc32>
 800edcc:	4603      	mov	r3, r0
 800edce:	461a      	mov	r2, r3
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	4013      	ands	r3, r2
 800edd4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer error.
    }

    if (crcGetResult != GOS_SUCCESS)
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	2b55      	cmp	r3, #85	@ 0x55
 800edda:	d001      	beq.n	800ede0 <bld_getBootloaderCrc+0x44>
    {
        crcGetResult = GOS_ERROR;
 800eddc:	23ae      	movs	r3, #174	@ 0xae
 800edde:	73fb      	strb	r3, [r7, #15]
    else
    {
        // OK.
    }

    return crcGetResult;
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	08004000 	.word	0x08004000

0800edf0 <bld_initData>:

/*
 * Function: bld_initData
 */
gos_result_t bld_initData (svl_pdhSwVerInfo_t* pBldSwVer)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b088      	sub	sp, #32
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       initDataResult     = GOS_SUCCESS;
 800edf8:	2355      	movs	r3, #85	@ 0x55
 800edfa:	77fb      	strb	r3, [r7, #31]
    u32_t              currentBldSwVerCrc = 0u;
 800edfc:	2300      	movs	r3, #0
 800edfe:	61bb      	str	r3, [r7, #24]
    u32_t              desiredBldSwVerCrc = 0u;
 800ee00:	2300      	movs	r3, #0
 800ee02:	617b      	str	r3, [r7, #20]
	u32_t              libVerCrc          = 0u;
 800ee04:	2300      	movs	r3, #0
 800ee06:	613b      	str	r3, [r7, #16]
	u32_t              testLibVerCrc      = 0u;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pBldSwVer != NULL)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 8099 	beq.w	800ef46 <bld_initData+0x156>
    {
        // Get current software info.
    	initDataResult &= svl_pdhGetSwInfo(&currentSwInfo);
 800ee14:	484f      	ldr	r0, [pc, #316]	@ (800ef54 <bld_initData+0x164>)
 800ee16:	f005 f8cf 	bl	8013fb8 <svl_pdhGetSwInfo>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	7ffb      	ldrb	r3, [r7, #31]
 800ee20:	4013      	ands	r3, r2
 800ee22:	77fb      	strb	r3, [r7, #31]
    	initDataResult &= svl_pdhGetLibVersion(&libVerInfo);
 800ee24:	484c      	ldr	r0, [pc, #304]	@ (800ef58 <bld_initData+0x168>)
 800ee26:	f005 f83f 	bl	8013ea8 <svl_pdhGetLibVersion>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	7ffb      	ldrb	r3, [r7, #31]
 800ee30:	4013      	ands	r3, r2
 800ee32:	77fb      	strb	r3, [r7, #31]

        // Calculate CRC of current and desired bootloader software info.
        initDataResult &= drv_crcGetCrc32((u8_t*)&currentSwInfo.bldSwVerInfo, sizeof(currentSwInfo.bldSwVerInfo), &currentBldSwVerCrc);
 800ee34:	f107 0318 	add.w	r3, r7, #24
 800ee38:	461a      	mov	r2, r3
 800ee3a:	21a0      	movs	r1, #160	@ 0xa0
 800ee3c:	4847      	ldr	r0, [pc, #284]	@ (800ef5c <bld_initData+0x16c>)
 800ee3e:	f000 fba5 	bl	800f58c <drv_crcGetCrc32>
 800ee42:	4603      	mov	r3, r0
 800ee44:	461a      	mov	r2, r3
 800ee46:	7ffb      	ldrb	r3, [r7, #31]
 800ee48:	4013      	ands	r3, r2
 800ee4a:	77fb      	strb	r3, [r7, #31]
        initDataResult &= drv_crcGetCrc32((u8_t*)pBldSwVer, sizeof(*pBldSwVer), &desiredBldSwVerCrc);
 800ee4c:	f107 0314 	add.w	r3, r7, #20
 800ee50:	461a      	mov	r2, r3
 800ee52:	21a0      	movs	r1, #160	@ 0xa0
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 fb99 	bl	800f58c <drv_crcGetCrc32>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	7ffb      	ldrb	r3, [r7, #31]
 800ee60:	4013      	ands	r3, r2
 800ee62:	77fb      	strb	r3, [r7, #31]

        initDataResult &= drv_crcGetCrc32((u8_t*)&libVerInfo, sizeof(libVerInfo), &libVerCrc);
 800ee64:	f107 0310 	add.w	r3, r7, #16
 800ee68:	461a      	mov	r2, r3
 800ee6a:	21a0      	movs	r1, #160	@ 0xa0
 800ee6c:	483a      	ldr	r0, [pc, #232]	@ (800ef58 <bld_initData+0x168>)
 800ee6e:	f000 fb8d 	bl	800f58c <drv_crcGetCrc32>
 800ee72:	4603      	mov	r3, r0
 800ee74:	461a      	mov	r2, r3
 800ee76:	7ffb      	ldrb	r3, [r7, #31]
 800ee78:	4013      	ands	r3, r2
 800ee7a:	77fb      	strb	r3, [r7, #31]
        initDataResult &= drv_crcGetCrc32((u8_t*)&(currentSwInfo.bldLibVerInfo), sizeof(currentSwInfo.bldLibVerInfo), &testLibVerCrc);
 800ee7c:	f107 030c 	add.w	r3, r7, #12
 800ee80:	461a      	mov	r2, r3
 800ee82:	21a0      	movs	r1, #160	@ 0xa0
 800ee84:	4833      	ldr	r0, [pc, #204]	@ (800ef54 <bld_initData+0x164>)
 800ee86:	f000 fb81 	bl	800f58c <drv_crcGetCrc32>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	7ffb      	ldrb	r3, [r7, #31]
 800ee90:	4013      	ands	r3, r2
 800ee92:	77fb      	strb	r3, [r7, #31]

        // Check if reset is needed.
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 800ee94:	69ba      	ldr	r2, [r7, #24]
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d10d      	bne.n	800eeb8 <bld_initData+0xc8>
 800ee9c:	693a      	ldr	r2, [r7, #16]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d109      	bne.n	800eeb8 <bld_initData+0xc8>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 800eea4:	4b2b      	ldr	r3, [pc, #172]	@ (800ef54 <bld_initData+0x164>)
 800eea6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
    	if ((currentBldSwVerCrc != desiredBldSwVerCrc) || (libVerCrc != testLibVerCrc) ||
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d104      	bne.n	800eeb8 <bld_initData+0xc8>
    		(currentSwInfo.bldOsInfo.major != GOS_VERSION_MAJOR) || (currentSwInfo.bldOsInfo.minor != GOS_VERSION_MINOR))
 800eeae:	4b29      	ldr	r3, [pc, #164]	@ (800ef54 <bld_initData+0x164>)
 800eeb0:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d048      	beq.n	800ef4a <bld_initData+0x15a>
        {
            // Copy desired data.
            (void_t) memcpy((void_t*)&currentSwInfo.bldSwVerInfo, (void_t*)pBldSwVer, sizeof(svl_pdhSwVerInfo_t));
 800eeb8:	4b26      	ldr	r3, [pc, #152]	@ (800ef54 <bld_initData+0x164>)
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	33a0      	adds	r3, #160	@ 0xa0
 800eebe:	4611      	mov	r1, r2
 800eec0:	22a0      	movs	r2, #160	@ 0xa0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f007 ff03 	bl	8016cce <memcpy>

            // Fill out OS info.
            currentSwInfo.bldOsInfo.major = GOS_VERSION_MAJOR;
 800eec8:	4b22      	ldr	r3, [pc, #136]	@ (800ef54 <bld_initData+0x164>)
 800eeca:	2201      	movs	r2, #1
 800eecc:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
            currentSwInfo.bldOsInfo.minor = GOS_VERSION_MINOR;
 800eed0:	4b20      	ldr	r3, [pc, #128]	@ (800ef54 <bld_initData+0x164>)
 800eed2:	2201      	movs	r2, #1
 800eed4:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

            // Fill out binary data.
            currentSwInfo.bldBinaryInfo.startAddress = BLD_ROM_START_ADDRESS;
 800eed8:	4b1e      	ldr	r3, [pc, #120]	@ (800ef54 <bld_initData+0x164>)
 800eeda:	4a21      	ldr	r2, [pc, #132]	@ (800ef60 <bld_initData+0x170>)
 800eedc:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
            initDataResult &= bld_getBootloaderSize(&currentSwInfo.bldBinaryInfo.size);
 800eee0:	4820      	ldr	r0, [pc, #128]	@ (800ef64 <bld_initData+0x174>)
 800eee2:	f7ff ff27 	bl	800ed34 <bld_getBootloaderSize>
 800eee6:	4603      	mov	r3, r0
 800eee8:	461a      	mov	r2, r3
 800eeea:	7ffb      	ldrb	r3, [r7, #31]
 800eeec:	4013      	ands	r3, r2
 800eeee:	77fb      	strb	r3, [r7, #31]
            initDataResult &= bld_getBootloaderCrc(&currentSwInfo.bldBinaryInfo.crc);
 800eef0:	481d      	ldr	r0, [pc, #116]	@ (800ef68 <bld_initData+0x178>)
 800eef2:	f7ff ff53 	bl	800ed9c <bld_getBootloaderCrc>
 800eef6:	4603      	mov	r3, r0
 800eef8:	461a      	mov	r2, r3
 800eefa:	7ffb      	ldrb	r3, [r7, #31]
 800eefc:	4013      	ands	r3, r2
 800eefe:	77fb      	strb	r3, [r7, #31]

            // Fill out library info.
            initDataResult &= svl_pdhGetLibVersion(&currentSwInfo.bldLibVerInfo);
 800ef00:	4814      	ldr	r0, [pc, #80]	@ (800ef54 <bld_initData+0x164>)
 800ef02:	f004 ffd1 	bl	8013ea8 <svl_pdhGetLibVersion>
 800ef06:	4603      	mov	r3, r0
 800ef08:	461a      	mov	r2, r3
 800ef0a:	7ffb      	ldrb	r3, [r7, #31]
 800ef0c:	4013      	ands	r3, r2
 800ef0e:	77fb      	strb	r3, [r7, #31]

            initDataResult &= svl_pdhSetSwInfo(&currentSwInfo);
 800ef10:	4810      	ldr	r0, [pc, #64]	@ (800ef54 <bld_initData+0x164>)
 800ef12:	f005 f931 	bl	8014178 <svl_pdhSetSwInfo>
 800ef16:	4603      	mov	r3, r0
 800ef18:	461a      	mov	r2, r3
 800ef1a:	7ffb      	ldrb	r3, [r7, #31]
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	77fb      	strb	r3, [r7, #31]

            if (initDataResult == GOS_SUCCESS)
 800ef20:	7ffb      	ldrb	r3, [r7, #31]
 800ef22:	2b55      	cmp	r3, #85	@ 0x55
 800ef24:	d109      	bne.n	800ef3a <bld_initData+0x14a>
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data updated. Restarting device...\r\n");
 800ef26:	4811      	ldr	r0, [pc, #68]	@ (800ef6c <bld_initData+0x17c>)
 800ef28:	f7ff f94c 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
                (void_t) gos_taskSleep(1000);
 800ef2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ef30:	f7fb fa60 	bl	800a3f4 <gos_taskSleep>
                gos_kernelReset();
 800ef34:	f7fa f8c6 	bl	80090c4 <gos_kernelReset>
 800ef38:	e007      	b.n	800ef4a <bld_initData+0x15a>
            }
            else
            {
                (void_t) gos_traceTraceFormattedUnsafe("Bootloader data initialization failed.\r\n");
 800ef3a:	480d      	ldr	r0, [pc, #52]	@ (800ef70 <bld_initData+0x180>)
 800ef3c:	f7ff f942 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
                initDataResult = GOS_ERROR;
 800ef40:	23ae      	movs	r3, #174	@ 0xae
 800ef42:	77fb      	strb	r3, [r7, #31]
 800ef44:	e001      	b.n	800ef4a <bld_initData+0x15a>
            // Version info is up-to-date.
        }
    }
    else
    {
        initDataResult = GOS_ERROR;
 800ef46:	23ae      	movs	r3, #174	@ 0xae
 800ef48:	77fb      	strb	r3, [r7, #31]
    }

    return initDataResult;
 800ef4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3720      	adds	r7, #32
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	20003cc0 	.word	0x20003cc0
 800ef58:	20004254 	.word	0x20004254
 800ef5c:	20003d60 	.word	0x20003d60
 800ef60:	08004000 	.word	0x08004000
 800ef64:	20003e08 	.word	0x20003e08
 800ef68:	20003e0c 	.word	0x20003e0c
 800ef6c:	08019c08 	.word	0x08019c08
 800ef70:	08019c38 	.word	0x08019c38

0800ef74 <bld_initConfig>:

/*
 * Function: bld_initConfig
 */
gos_result_t bld_initConfig (void_t)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initCfgResult = GOS_SUCCESS;
 800ef7a:	2355      	movs	r3, #85	@ 0x55
 800ef7c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800ef7e:	4825      	ldr	r0, [pc, #148]	@ (800f014 <bld_initConfig+0xa0>)
 800ef80:	f005 f88a 	bl	8014098 <svl_pdhGetBldCfg>

    // If boolean values are incorrect, it indicates an uninitialized
    // bootloader configuration.
    if ((bldConfig.updateMode      != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 800ef84:	4b23      	ldr	r3, [pc, #140]	@ (800f014 <bld_initConfig+0xa0>)
 800ef86:	791b      	ldrb	r3, [r3, #4]
 800ef88:	2b36      	cmp	r3, #54	@ 0x36
 800ef8a:	d00b      	beq.n	800efa4 <bld_initConfig+0x30>
 800ef8c:	4b21      	ldr	r3, [pc, #132]	@ (800f014 <bld_initConfig+0xa0>)
 800ef8e:	791b      	ldrb	r3, [r3, #4]
 800ef90:	2b49      	cmp	r3, #73	@ 0x49
 800ef92:	d007      	beq.n	800efa4 <bld_initConfig+0x30>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800ef94:	4b1f      	ldr	r3, [pc, #124]	@ (800f014 <bld_initConfig+0xa0>)
 800ef96:	781b      	ldrb	r3, [r3, #0]
    if ((bldConfig.updateMode      != GOS_TRUE && bldConfig.updateMode       != GOS_FALSE &&
 800ef98:	2b36      	cmp	r3, #54	@ 0x36
 800ef9a:	d003      	beq.n	800efa4 <bld_initConfig+0x30>
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800ef9c:	4b1d      	ldr	r3, [pc, #116]	@ (800f014 <bld_initConfig+0xa0>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b49      	cmp	r3, #73	@ 0x49
 800efa2:	d109      	bne.n	800efb8 <bld_initConfig+0x44>
    	bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 800efa4:	4b1b      	ldr	r3, [pc, #108]	@ (800f014 <bld_initConfig+0xa0>)
 800efa6:	f8d3 3006 	ldr.w	r3, [r3, #6]
        bldConfig.installRequested != GOS_TRUE && bldConfig.installRequested != GOS_FALSE) ||
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d004      	beq.n	800efb8 <bld_initConfig+0x44>
    	bldConfig.requestTimeout == 0 || bldConfig.installTimeout == 0)
 800efae:	4b19      	ldr	r3, [pc, #100]	@ (800f014 <bld_initConfig+0xa0>)
 800efb0:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d127      	bne.n	800f008 <bld_initConfig+0x94>
    {
        bldConfig.requestTimeout             = BLD_DEFAULT_REQ_TMO_MS;
 800efb8:	4a16      	ldr	r2, [pc, #88]	@ (800f014 <bld_initConfig+0xa0>)
 800efba:	2300      	movs	r3, #0
 800efbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800efc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800efc4:	f443 436a 	orr.w	r3, r3, #59904	@ 0xea00
 800efc8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800efcc:	80d3      	strh	r3, [r2, #6]
 800efce:	2300      	movs	r3, #0
 800efd0:	8113      	strh	r3, [r2, #8]
        bldConfig.installTimeout             = BLD_DEFAULT_INSTALL_TMO_MS;
 800efd2:	4a10      	ldr	r2, [pc, #64]	@ (800f014 <bld_initConfig+0xa0>)
 800efd4:	2300      	movs	r3, #0
 800efd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800efda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800efde:	f443 4354 	orr.w	r3, r3, #54272	@ 0xd400
 800efe2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800efe6:	8153      	strh	r3, [r2, #10]
 800efe8:	2300      	movs	r3, #0
 800efea:	f043 0301 	orr.w	r3, r3, #1
 800efee:	8193      	strh	r3, [r2, #12]
        bldConfig.startupCounter             = 0u;
 800eff0:	4b08      	ldr	r3, [pc, #32]	@ (800f014 <bld_initConfig+0xa0>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	715a      	strb	r2, [r3, #5]
        bldConfig.updateMode                 = GOS_FALSE;
 800eff6:	4b07      	ldr	r3, [pc, #28]	@ (800f014 <bld_initConfig+0xa0>)
 800eff8:	2249      	movs	r2, #73	@ 0x49
 800effa:	711a      	strb	r2, [r3, #4]
        bldConfig.installRequested           = GOS_FALSE;
 800effc:	4b05      	ldr	r3, [pc, #20]	@ (800f014 <bld_initConfig+0xa0>)
 800effe:	2249      	movs	r2, #73	@ 0x49
 800f000:	701a      	strb	r2, [r3, #0]

        (void_t) svl_pdhSetBldCfg(&bldConfig);
 800f002:	4804      	ldr	r0, [pc, #16]	@ (800f014 <bld_initConfig+0xa0>)
 800f004:	f005 f928 	bl	8014258 <svl_pdhSetBldCfg>
    else
    {
        // Configuration is initialized.
    }

    return initCfgResult;
 800f008:	79fb      	ldrb	r3, [r7, #7]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	20003cb0 	.word	0x20003cb0

0800f018 <bld_printConfig>:

/*
 * Function: bld_printConfig
 */
gos_result_t bld_printConfig (void_t)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) svl_pdhGetBldCfg(&bldConfig);
 800f01c:	480b      	ldr	r0, [pc, #44]	@ (800f04c <bld_printConfig+0x34>)
 800f01e:	f005 f83b 	bl	8014098 <svl_pdhGetBldCfg>

    (void_t) gos_traceTraceFormattedUnsafe(TRACE_BG_BLUE_START"BOOTLOADER CONFIGURATION"TRACE_FORMAT_RESET"\r\n");
 800f022:	480b      	ldr	r0, [pc, #44]	@ (800f050 <bld_printConfig+0x38>)
 800f024:	f7ff f8ce 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Request timeout:      \t%u ms\r\n", bldConfig.requestTimeout);
 800f028:	4b08      	ldr	r3, [pc, #32]	@ (800f04c <bld_printConfig+0x34>)
 800f02a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800f02e:	4619      	mov	r1, r3
 800f030:	4808      	ldr	r0, [pc, #32]	@ (800f054 <bld_printConfig+0x3c>)
 800f032:	f7ff f8c7 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("Install timeout:      \t%u ms\r\n\r\n", bldConfig.installTimeout);
 800f036:	4b05      	ldr	r3, [pc, #20]	@ (800f04c <bld_printConfig+0x34>)
 800f038:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800f03c:	4619      	mov	r1, r3
 800f03e:	4806      	ldr	r0, [pc, #24]	@ (800f058 <bld_printConfig+0x40>)
 800f040:	f7ff f8c0 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>

    return GOS_SUCCESS;
 800f044:	2355      	movs	r3, #85	@ 0x55
}
 800f046:	4618      	mov	r0, r3
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	20003cb0 	.word	0x20003cb0
 800f050:	08019c64 	.word	0x08019c64
 800f054:	08019c88 	.word	0x08019c88
 800f058:	08019ca8 	.word	0x08019ca8

0800f05c <drv_25lc640Init>:

/*
 * Function: drv_25lc640Init
 */
gos_result_t drv_25lc640Init (void_t* pDevice)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b084      	sub	sp, #16
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800f064:	2355      	movs	r3, #85	@ 0x55
 800f066:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800f068:	2300      	movs	r3, #0
 800f06a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d103      	bne.n	800f07a <drv_25lc640Init+0x1e>
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	f043 0301 	orr.w	r3, r3, #1
 800f078:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc640Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC640_MUTEX_INIT);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d10d      	bne.n	800f09e <drv_25lc640Init+0x42>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	3302      	adds	r3, #2
 800f086:	4618      	mov	r0, r3
 800f088:	f7fd fcda 	bl	800ca40 <gos_mutexInit>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b55      	cmp	r3, #85	@ 0x55
 800f090:	d005      	beq.n	800f09e <drv_25lc640Init+0x42>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	699b      	ldr	r3, [r3, #24]
 800f096:	f043 0208 	orr.w	r2, r3, #8
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d102      	bne.n	800f0aa <drv_25lc640Init+0x4e>
 800f0a4:	2355      	movs	r3, #85	@ 0x55
 800f0a6:	73fb      	strb	r3, [r7, #15]
 800f0a8:	e001      	b.n	800f0ae <drv_25lc640Init+0x52>
 800f0aa:	23ae      	movs	r3, #174	@ 0xae
 800f0ac:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800f0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3710      	adds	r7, #16
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <drv_25lc640Read>:

/*
 * Function: drv_25lc640Read
 */
GOS_INLINE gos_result_t drv_25lc640Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 800f0b8:	b590      	push	{r4, r7, lr}
 800f0ba:	b08f      	sub	sp, #60	@ 0x3c
 800f0bc:	af02      	add	r7, sp, #8
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	607a      	str	r2, [r7, #4]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	817b      	strh	r3, [r7, #10]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 800f0cc:	2355      	movs	r3, #85	@ 0x55
 800f0ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage     = 0u;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage       = 0u;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos           = 0u;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset        = 0u;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress    = 0u;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition = 0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d103      	bne.n	800f108 <drv_25lc640Read+0x50>
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	f043 0301 	orr.w	r3, r3, #1
 800f106:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC640_TARGET_NULL);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d103      	bne.n	800f116 <drv_25lc640Read+0x5e>
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	f043 0302 	orr.w	r3, r3, #2
 800f114:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f040 80dd 	bne.w	800f2d8 <drv_25lc640Read+0x220>
 800f11e:	897a      	ldrh	r2, [r7, #10]
 800f120:	893b      	ldrh	r3, [r7, #8]
 800f122:	4413      	add	r3, r2
 800f124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f128:	f080 80d6 	bcs.w	800f2d8 <drv_25lc640Read+0x220>
    {
        DRV_ERROR_CHK_SET(
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d10e      	bne.n	800f150 <drv_25lc640Read+0x98>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	1c9a      	adds	r2, r3, #2
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	4619      	mov	r1, r3
 800f13c:	4610      	mov	r0, r2
 800f13e:	f7fd fc99 	bl	800ca74 <gos_mutexLock>
 800f142:	4603      	mov	r3, r0
 800f144:	2b55      	cmp	r3, #85	@ 0x55
 800f146:	d003      	beq.n	800f150 <drv_25lc640Read+0x98>
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	f043 0310 	orr.w	r3, r3, #16
 800f14e:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800f150:	6a3b      	ldr	r3, [r7, #32]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d103      	bne.n	800f15e <drv_25lc640Read+0xa6>
 800f156:	2355      	movs	r3, #85	@ 0x55
 800f158:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f15c:	e002      	b.n	800f164 <drv_25lc640Read+0xac>
 800f15e:	23ae      	movs	r3, #174	@ 0xae
 800f160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 800f164:	2305      	movs	r3, #5
 800f166:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 800f168:	897b      	ldrh	r3, [r7, #10]
 800f16a:	095b      	lsrs	r3, r3, #5
 800f16c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 800f16e:	893a      	ldrh	r2, [r7, #8]
 800f170:	897b      	ldrh	r3, [r7, #10]
 800f172:	4413      	add	r3, r2
 800f174:	095b      	lsrs	r3, r3, #5
 800f176:	83fb      	strh	r3, [r7, #30]
        pos           = 0u;
 800f178:	2300      	movs	r3, #0
 800f17a:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 800f17c:	897b      	ldrh	r3, [r7, #10]
 800f17e:	f003 031f 	and.w	r3, r3, #31
 800f182:	84fb      	strh	r3, [r7, #38]	@ 0x26
        numofpages    = (endPage-startPage) + (offset > 0) + (startPage == endPage);
 800f184:	8bfa      	ldrh	r2, [r7, #30]
 800f186:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f18e:	2a00      	cmp	r2, #0
 800f190:	bf14      	ite	ne
 800f192:	2201      	movne	r2, #1
 800f194:	2200      	moveq	r2, #0
 800f196:	b2d2      	uxtb	r2, r2
 800f198:	4413      	add	r3, r2
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800f19e:	8bfa      	ldrh	r2, [r7, #30]
 800f1a0:	4291      	cmp	r1, r2
 800f1a2:	bf0c      	ite	eq
 800f1a4:	2201      	moveq	r2, #1
 800f1a6:	2200      	movne	r2, #0
 800f1a8:	b2d2      	uxtb	r2, r2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	83bb      	strh	r3, [r7, #28]

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f1b2:	e083      	b.n	800f2bc <drv_25lc640Read+0x204>
        {
            memAddress = startPage << paddrposition | offset;
 800f1b4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f1bc:	b21a      	sxth	r2, r3
 800f1be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	b21b      	sxth	r3, r3
 800f1c6:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 800f1c8:	893a      	ldrh	r2, [r7, #8]
 800f1ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1cc:	4413      	add	r3, r2
 800f1ce:	2b1f      	cmp	r3, #31
 800f1d0:	d904      	bls.n	800f1dc <drv_25lc640Read+0x124>
 800f1d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1d4:	f1c3 0320 	rsb	r3, r3, #32
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	e000      	b.n	800f1de <drv_25lc640Read+0x126>
 800f1dc:	893b      	ldrh	r3, [r7, #8]
 800f1de:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 800f1e0:	4b48      	ldr	r3, [pc, #288]	@ (800f304 <drv_25lc640Read+0x24c>)
 800f1e2:	2203      	movs	r2, #3
 800f1e4:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 800f1e6:	8b7b      	ldrh	r3, [r7, #26]
 800f1e8:	0a1b      	lsrs	r3, r3, #8
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	4b45      	ldr	r3, [pc, #276]	@ (800f304 <drv_25lc640Read+0x24c>)
 800f1f0:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 800f1f2:	8b7b      	ldrh	r3, [r7, #26]
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	4b43      	ldr	r3, [pc, #268]	@ (800f304 <drv_25lc640Read+0x24c>)
 800f1f8:	709a      	strb	r2, [r3, #2]

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	785b      	ldrb	r3, [r3, #1]
 800f1fe:	2100      	movs	r1, #0
 800f200:	4618      	mov	r0, r3
 800f202:	f001 f8dd 	bl	80103c0 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d112      	bne.n	800f232 <drv_25lc640Read+0x17a>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	7818      	ldrb	r0, [r3, #0]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	689a      	ldr	r2, [r3, #8]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	4613      	mov	r3, r2
 800f21c:	2203      	movs	r2, #3
 800f21e:	4939      	ldr	r1, [pc, #228]	@ (800f304 <drv_25lc640Read+0x24c>)
 800f220:	f001 ff10 	bl	8011044 <drv_spiTransmitIT>
 800f224:	4603      	mov	r3, r0
 800f226:	2b55      	cmp	r3, #85	@ 0x55
 800f228:	d003      	beq.n	800f232 <drv_25lc640Read+0x17a>
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	f043 0320 	orr.w	r3, r3, #32
 800f230:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <drv_25lc640Read+0x188>
 800f238:	2355      	movs	r3, #85	@ 0x55
 800f23a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f23e:	e002      	b.n	800f246 <drv_25lc640Read+0x18e>
 800f240:	23ae      	movs	r3, #174	@ 0xae
 800f242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            DRV_ERROR_CHK_SET(
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d114      	bne.n	800f276 <drv_25lc640Read+0x1be>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	7818      	ldrb	r0, [r3, #0]
 800f250:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	18d1      	adds	r1, r2, r3
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	689c      	ldr	r4, [r3, #8]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	8b3a      	ldrh	r2, [r7, #24]
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	4623      	mov	r3, r4
 800f264:	f001 ff52 	bl	801110c <drv_spiReceiveIT>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b55      	cmp	r3, #85	@ 0x55
 800f26c:	d003      	beq.n	800f276 <drv_25lc640Read+0x1be>
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	f043 0320 	orr.w	r3, r3, #32
 800f274:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d103      	bne.n	800f284 <drv_25lc640Read+0x1cc>
 800f27c:	2355      	movs	r3, #85	@ 0x55
 800f27e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f282:	e002      	b.n	800f28a <drv_25lc640Read+0x1d2>
 800f284:	23ae      	movs	r3, #174	@ 0xae
 800f286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	785b      	ldrb	r3, [r3, #1]
 800f28e:	2101      	movs	r1, #1
 800f290:	4618      	mov	r0, r3
 800f292:	f001 f895 	bl	80103c0 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 800f296:	200a      	movs	r0, #10
 800f298:	f7fb f8ac 	bl	800a3f4 <gos_taskSleep>

            startPage += 1;
 800f29c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f29e:	3301      	adds	r3, #1
 800f2a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 800f2a6:	893a      	ldrh	r2, [r7, #8]
 800f2a8:	8b3b      	ldrh	r3, [r7, #24]
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 800f2ae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f2b0:	8b3b      	ldrh	r3, [r7, #24]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	853b      	strh	r3, [r7, #40]	@ 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 800f2b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f2bc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800f2be:	8bbb      	ldrh	r3, [r7, #28]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d204      	bcs.n	800f2ce <drv_25lc640Read+0x216>
 800f2c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2c8:	2b55      	cmp	r3, #85	@ 0x55
 800f2ca:	f43f af73 	beq.w	800f1b4 <drv_25lc640Read+0xfc>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	3302      	adds	r3, #2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fd fcd4 	bl	800cc80 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	699a      	ldr	r2, [r3, #24]
 800f2dc:	6a3b      	ldr	r3, [r7, #32]
 800f2de:	431a      	orrs	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 800f2e4:	6a3b      	ldr	r3, [r7, #32]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d103      	bne.n	800f2f2 <drv_25lc640Read+0x23a>
 800f2ea:	2355      	movs	r3, #85	@ 0x55
 800f2ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f2f0:	e002      	b.n	800f2f8 <drv_25lc640Read+0x240>
 800f2f2:	23ae      	movs	r3, #174	@ 0xae
 800f2f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return readResult;
 800f2f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3734      	adds	r7, #52	@ 0x34
 800f300:	46bd      	mov	sp, r7
 800f302:	bd90      	pop	{r4, r7, pc}
 800f304:	200042f4 	.word	0x200042f4

0800f308 <drv_25lc640Write>:

/*
 * Function: drv_25lc640Write
 */
GOS_INLINE gos_result_t drv_25lc640Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b08e      	sub	sp, #56	@ 0x38
 800f30c:	af02      	add	r7, sp, #8
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	607a      	str	r2, [r7, #4]
 800f312:	461a      	mov	r2, r3
 800f314:	460b      	mov	r3, r1
 800f316:	817b      	strh	r3, [r7, #10]
 800f318:	4613      	mov	r3, r2
 800f31a:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 800f31c:	2355      	movs	r3, #85	@ 0x55
 800f31e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    u16_t        startPage       = 0u;
 800f322:	2300      	movs	r3, #0
 800f324:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16_t        endPage         = 0u;
 800f326:	2300      	movs	r3, #0
 800f328:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages      = 0u;
 800f32a:	2300      	movs	r3, #0
 800f32c:	83bb      	strh	r3, [r7, #28]
    u16_t        idx             = 0u;
 800f32e:	2300      	movs	r3, #0
 800f330:	857b      	strh	r3, [r7, #42]	@ 0x2a
    u16_t        pos             = 0u;
 800f332:	2300      	movs	r3, #0
 800f334:	853b      	strh	r3, [r7, #40]	@ 0x28
    u16_t        offset          = 0u;
 800f336:	2300      	movs	r3, #0
 800f338:	84fb      	strh	r3, [r7, #38]	@ 0x26
    u16_t        memAddress      = 0u;
 800f33a:	2300      	movs	r3, #0
 800f33c:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem        = 0u;
 800f33e:	2300      	movs	r3, #0
 800f340:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition   = 0;
 800f342:	2300      	movs	r3, #0
 800f344:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags      = 0u;
 800f346:	2300      	movs	r3, #0
 800f348:	623b      	str	r3, [r7, #32]
    u8_t         wrenInstruction = 0x06;
 800f34a:	2306      	movs	r3, #6
 800f34c:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d103      	bne.n	800f35c <drv_25lc640Write+0x54>
 800f354:	6a3b      	ldr	r3, [r7, #32]
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC640_DATA_NULL);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d103      	bne.n	800f36a <drv_25lc640Write+0x62>
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	f043 0304 	orr.w	r3, r3, #4
 800f368:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f040 80f2 	bne.w	800f556 <drv_25lc640Write+0x24e>
 800f372:	897a      	ldrh	r2, [r7, #10]
 800f374:	893b      	ldrh	r3, [r7, #8]
 800f376:	4413      	add	r3, r2
 800f378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f37c:	f080 80eb 	bcs.w	800f556 <drv_25lc640Write+0x24e>
    {
        DRV_ERROR_CHK_SET(
 800f380:	6a3b      	ldr	r3, [r7, #32]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d10e      	bne.n	800f3a4 <drv_25lc640Write+0x9c>
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	1c9a      	adds	r2, r3, #2
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	4619      	mov	r1, r3
 800f390:	4610      	mov	r0, r2
 800f392:	f7fd fb6f 	bl	800ca74 <gos_mutexLock>
 800f396:	4603      	mov	r3, r0
 800f398:	2b55      	cmp	r3, #85	@ 0x55
 800f39a:	d003      	beq.n	800f3a4 <drv_25lc640Write+0x9c>
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	f043 0310 	orr.w	r3, r3, #16
 800f3a2:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d103      	bne.n	800f3b2 <drv_25lc640Write+0xaa>
 800f3aa:	2355      	movs	r3, #85	@ 0x55
 800f3ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f3b0:	e002      	b.n	800f3b8 <drv_25lc640Write+0xb0>
 800f3b2:	23ae      	movs	r3, #174	@ 0xae
 800f3b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 800f3b8:	2305      	movs	r3, #5
 800f3ba:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 800f3bc:	897b      	ldrh	r3, [r7, #10]
 800f3be:	095b      	lsrs	r3, r3, #5
 800f3c0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 800f3c2:	893a      	ldrh	r2, [r7, #8]
 800f3c4:	897b      	ldrh	r3, [r7, #10]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	095b      	lsrs	r3, r3, #5
 800f3ca:	83fb      	strh	r3, [r7, #30]
        pos           = 0u;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	853b      	strh	r3, [r7, #40]	@ 0x28
        offset        = address % PAGE_SIZE;
 800f3d0:	897b      	ldrh	r3, [r7, #10]
 800f3d2:	f003 031f 	and.w	r3, r3, #31
 800f3d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
        numofpages    = (endPage-startPage) + (offset > 0) + (startPage == endPage);
 800f3d8:	8bfa      	ldrh	r2, [r7, #30]
 800f3da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f3e2:	2a00      	cmp	r2, #0
 800f3e4:	bf14      	ite	ne
 800f3e6:	2201      	movne	r2, #1
 800f3e8:	2200      	moveq	r2, #0
 800f3ea:	b2d2      	uxtb	r2, r2
 800f3ec:	4413      	add	r3, r2
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800f3f2:	8bfa      	ldrh	r2, [r7, #30]
 800f3f4:	4291      	cmp	r1, r2
 800f3f6:	bf0c      	ite	eq
 800f3f8:	2201      	moveq	r2, #1
 800f3fa:	2200      	movne	r2, #0
 800f3fc:	b2d2      	uxtb	r2, r2
 800f3fe:	4413      	add	r3, r2
 800f400:	83bb      	strh	r3, [r7, #28]

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 800f402:	2300      	movs	r3, #0
 800f404:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f406:	e098      	b.n	800f53a <drv_25lc640Write+0x232>
        {
            memAddress = startPage << paddrposition | offset;
 800f408:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	fa02 f303 	lsl.w	r3, r2, r3
 800f410:	b21a      	sxth	r2, r3
 800f412:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f416:	4313      	orrs	r3, r2
 800f418:	b21b      	sxth	r3, r3
 800f41a:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 800f41c:	893a      	ldrh	r2, [r7, #8]
 800f41e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f420:	4413      	add	r3, r2
 800f422:	2b1f      	cmp	r3, #31
 800f424:	d904      	bls.n	800f430 <drv_25lc640Write+0x128>
 800f426:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f428:	f1c3 0320 	rsb	r3, r3, #32
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	e000      	b.n	800f432 <drv_25lc640Write+0x12a>
 800f430:	893b      	ldrh	r3, [r7, #8]
 800f432:	833b      	strh	r3, [r7, #24]

            txBuffer[0] = 0x02;
 800f434:	4b53      	ldr	r3, [pc, #332]	@ (800f584 <drv_25lc640Write+0x27c>)
 800f436:	2202      	movs	r2, #2
 800f438:	701a      	strb	r2, [r3, #0]
            txBuffer[1] = (memAddress >> 8);
 800f43a:	8b7b      	ldrh	r3, [r7, #26]
 800f43c:	0a1b      	lsrs	r3, r3, #8
 800f43e:	b29b      	uxth	r3, r3
 800f440:	b2da      	uxtb	r2, r3
 800f442:	4b50      	ldr	r3, [pc, #320]	@ (800f584 <drv_25lc640Write+0x27c>)
 800f444:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = memAddress & 0xFF;
 800f446:	8b7b      	ldrh	r3, [r7, #26]
 800f448:	b2da      	uxtb	r2, r3
 800f44a:	4b4e      	ldr	r3, [pc, #312]	@ (800f584 <drv_25lc640Write+0x27c>)
 800f44c:	709a      	strb	r2, [r3, #2]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 800f44e:	484e      	ldr	r0, [pc, #312]	@ (800f588 <drv_25lc640Write+0x280>)
 800f450:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	4413      	add	r3, r2
 800f456:	8b3a      	ldrh	r2, [r7, #24]
 800f458:	4619      	mov	r1, r3
 800f45a:	f007 fc38 	bl	8016cce <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	785b      	ldrb	r3, [r3, #1]
 800f462:	2100      	movs	r1, #0
 800f464:	4618      	mov	r0, r3
 800f466:	f000 ffab 	bl	80103c0 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d113      	bne.n	800f498 <drv_25lc640Write+0x190>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	7818      	ldrb	r0, [r3, #0]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	689a      	ldr	r2, [r3, #8]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	f107 0113 	add.w	r1, r7, #19
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	4613      	mov	r3, r2
 800f484:	2201      	movs	r2, #1
 800f486:	f001 fddd 	bl	8011044 <drv_spiTransmitIT>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b55      	cmp	r3, #85	@ 0x55
 800f48e:	d003      	beq.n	800f498 <drv_25lc640Write+0x190>
 800f490:	6a3b      	ldr	r3, [r7, #32]
 800f492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f496:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800f498:	6a3b      	ldr	r3, [r7, #32]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d103      	bne.n	800f4a6 <drv_25lc640Write+0x19e>
 800f49e:	2355      	movs	r3, #85	@ 0x55
 800f4a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f4a4:	e002      	b.n	800f4ac <drv_25lc640Write+0x1a4>
 800f4a6:	23ae      	movs	r3, #174	@ 0xae
 800f4a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	785b      	ldrb	r3, [r3, #1]
 800f4b0:	2101      	movs	r1, #1
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 ff84 	bl	80103c0 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	785b      	ldrb	r3, [r3, #1]
 800f4bc:	2100      	movs	r1, #0
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 ff7e 	bl	80103c0 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 800f4c4:	6a3b      	ldr	r3, [r7, #32]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d114      	bne.n	800f4f4 <drv_25lc640Write+0x1ec>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	7818      	ldrb	r0, [r3, #0]
 800f4ce:	8b3b      	ldrh	r3, [r7, #24]
 800f4d0:	3303      	adds	r3, #3
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6899      	ldr	r1, [r3, #8]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	460b      	mov	r3, r1
 800f4e0:	4928      	ldr	r1, [pc, #160]	@ (800f584 <drv_25lc640Write+0x27c>)
 800f4e2:	f001 fdaf 	bl	8011044 <drv_spiTransmitIT>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b55      	cmp	r3, #85	@ 0x55
 800f4ea:	d003      	beq.n	800f4f4 <drv_25lc640Write+0x1ec>
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4f2:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800f4f4:	6a3b      	ldr	r3, [r7, #32]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d103      	bne.n	800f502 <drv_25lc640Write+0x1fa>
 800f4fa:	2355      	movs	r3, #85	@ 0x55
 800f4fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f500:	e002      	b.n	800f508 <drv_25lc640Write+0x200>
 800f502:	23ae      	movs	r3, #174	@ 0xae
 800f504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	785b      	ldrb	r3, [r3, #1]
 800f50c:	2101      	movs	r1, #1
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 ff56 	bl	80103c0 <drv_gpioWritePin>

            startPage += 1;
 800f514:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f516:	3301      	adds	r3, #1
 800f518:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            offset    =  0u;
 800f51a:	2300      	movs	r3, #0
 800f51c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            size      =  size - bytesRem;
 800f51e:	893a      	ldrh	r2, [r7, #8]
 800f520:	8b3b      	ldrh	r3, [r7, #24]
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 800f526:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f528:	8b3b      	ldrh	r3, [r7, #24]
 800f52a:	4413      	add	r3, r2
 800f52c:	853b      	strh	r3, [r7, #40]	@ 0x28

            (void_t) gos_taskSleep(5);
 800f52e:	2005      	movs	r0, #5
 800f530:	f7fa ff60 	bl	800a3f4 <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 800f534:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f536:	3301      	adds	r3, #1
 800f538:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800f53a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800f53c:	8bbb      	ldrh	r3, [r7, #28]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d204      	bcs.n	800f54c <drv_25lc640Write+0x244>
 800f542:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f546:	2b55      	cmp	r3, #85	@ 0x55
 800f548:	f43f af5e 	beq.w	800f408 <drv_25lc640Write+0x100>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	3302      	adds	r3, #2
 800f550:	4618      	mov	r0, r3
 800f552:	f7fd fb95 	bl	800cc80 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	699a      	ldr	r2, [r3, #24]
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	431a      	orrs	r2, r3
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d103      	bne.n	800f570 <drv_25lc640Write+0x268>
 800f568:	2355      	movs	r3, #85	@ 0x55
 800f56a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f56e:	e002      	b.n	800f576 <drv_25lc640Write+0x26e>
 800f570:	23ae      	movs	r3, #174	@ 0xae
 800f572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    return writeResult;
 800f576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3730      	adds	r7, #48	@ 0x30
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	200042f4 	.word	0x200042f4
 800f588:	200042f7 	.word	0x200042f7

0800f58c <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b089      	sub	sp, #36	@ 0x24
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 800f598:	23ae      	movs	r3, #174	@ 0xae
 800f59a:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 800f59c:	2300      	movs	r3, #0
 800f59e:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 800f5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a8:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d030      	beq.n	800f612 <drv_crcGetCrc32+0x86>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d02d      	beq.n	800f612 <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	61bb      	str	r3, [r7, #24]
 800f5ba:	e021      	b.n	800f600 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	4053      	eors	r3, r2
 800f5ca:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	75fb      	strb	r3, [r7, #23]
 800f5d0:	e010      	b.n	800f5f4 <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	da07      	bge.n	800f5e8 <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 800f5de:	693a      	ldr	r2, [r7, #16]
 800f5e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f620 <drv_crcGetCrc32+0x94>)
 800f5e2:	4053      	eors	r3, r2
 800f5e4:	613b      	str	r3, [r7, #16]
 800f5e6:	e002      	b.n	800f5ee <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 800f5ee:	7dfb      	ldrb	r3, [r7, #23]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	75fb      	strb	r3, [r7, #23]
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
 800f5f6:	2b1f      	cmp	r3, #31
 800f5f8:	d9eb      	bls.n	800f5d2 <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	61bb      	str	r3, [r7, #24]
 800f600:	69ba      	ldr	r2, [r7, #24]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	429a      	cmp	r2, r3
 800f606:	d3d9      	bcc.n	800f5bc <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	693a      	ldr	r2, [r7, #16]
 800f60c:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 800f60e:	2355      	movs	r3, #85	@ 0x55
 800f610:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 800f612:	7ffb      	ldrb	r3, [r7, #31]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3724      	adds	r7, #36	@ 0x24
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr
 800f620:	04c11db7 	.word	0x04c11db7

0800f624 <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b086      	sub	sp, #24
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 800f632:	239c      	movs	r3, #156	@ 0x9c
 800f634:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 800f636:	2300      	movs	r3, #0
 800f638:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d015      	beq.n	800f66c <drv_crcCheckCrc32+0x48>
 800f640:	f107 0310 	add.w	r3, r7, #16
 800f644:	461a      	mov	r2, r3
 800f646:	68b9      	ldr	r1, [r7, #8]
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f7ff ff9f 	bl	800f58c <drv_crcGetCrc32>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b55      	cmp	r3, #85	@ 0x55
 800f652:	d10b      	bne.n	800f66c <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d101      	bne.n	800f660 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 800f65c:	23ca      	movs	r3, #202	@ 0xca
 800f65e:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d002      	beq.n	800f66c <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 800f666:	693a      	ldr	r2, [r7, #16]
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 800f66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3718      	adds	r7, #24
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
	...

0800f678 <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 800f67e:	2355      	movs	r3, #85	@ 0x55
 800f680:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 800f682:	2300      	movs	r3, #0
 800f684:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800f686:	2300      	movs	r3, #0
 800f688:	71bb      	strb	r3, [r7, #6]
 800f68a:	e0c9      	b.n	800f820 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 800f68c:	79ba      	ldrb	r2, [r7, #6]
 800f68e:	496c      	ldr	r1, [pc, #432]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f690:	4613      	mov	r3, r2
 800f692:	011b      	lsls	r3, r3, #4
 800f694:	4413      	add	r3, r2
 800f696:	00db      	lsls	r3, r3, #3
 800f698:	440b      	add	r3, r1
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	4619      	mov	r1, r3
 800f69e:	79ba      	ldrb	r2, [r7, #6]
 800f6a0:	4b68      	ldr	r3, [pc, #416]	@ (800f844 <drv_dmaInit+0x1cc>)
 800f6a2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f6a6:	4866      	ldr	r0, [pc, #408]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	011b      	lsls	r3, r3, #4
 800f6ac:	4413      	add	r3, r2
 800f6ae:	00db      	lsls	r3, r3, #3
 800f6b0:	4403      	add	r3, r0
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 800f6b6:	79b9      	ldrb	r1, [r7, #6]
 800f6b8:	79ba      	ldrb	r2, [r7, #6]
 800f6ba:	4861      	ldr	r0, [pc, #388]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f6bc:	460b      	mov	r3, r1
 800f6be:	011b      	lsls	r3, r3, #4
 800f6c0:	440b      	add	r3, r1
 800f6c2:	00db      	lsls	r3, r3, #3
 800f6c4:	4403      	add	r3, r0
 800f6c6:	3364      	adds	r3, #100	@ 0x64
 800f6c8:	6819      	ldr	r1, [r3, #0]
 800f6ca:	485d      	ldr	r0, [pc, #372]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	011b      	lsls	r3, r3, #4
 800f6d0:	4413      	add	r3, r2
 800f6d2:	00db      	lsls	r3, r3, #3
 800f6d4:	4403      	add	r3, r0
 800f6d6:	3308      	adds	r3, #8
 800f6d8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 800f6da:	79b9      	ldrb	r1, [r7, #6]
 800f6dc:	79ba      	ldrb	r2, [r7, #6]
 800f6de:	4858      	ldr	r0, [pc, #352]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	011b      	lsls	r3, r3, #4
 800f6e4:	440b      	add	r3, r1
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	4403      	add	r3, r0
 800f6ea:	3368      	adds	r3, #104	@ 0x68
 800f6ec:	6819      	ldr	r1, [r3, #0]
 800f6ee:	4854      	ldr	r0, [pc, #336]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	4413      	add	r3, r2
 800f6f6:	00db      	lsls	r3, r3, #3
 800f6f8:	4403      	add	r3, r0
 800f6fa:	330c      	adds	r3, #12
 800f6fc:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 800f6fe:	79b9      	ldrb	r1, [r7, #6]
 800f700:	79ba      	ldrb	r2, [r7, #6]
 800f702:	484f      	ldr	r0, [pc, #316]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f704:	460b      	mov	r3, r1
 800f706:	011b      	lsls	r3, r3, #4
 800f708:	440b      	add	r3, r1
 800f70a:	00db      	lsls	r3, r3, #3
 800f70c:	4403      	add	r3, r0
 800f70e:	336c      	adds	r3, #108	@ 0x6c
 800f710:	6819      	ldr	r1, [r3, #0]
 800f712:	484b      	ldr	r0, [pc, #300]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f714:	4613      	mov	r3, r2
 800f716:	011b      	lsls	r3, r3, #4
 800f718:	4413      	add	r3, r2
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	4403      	add	r3, r0
 800f71e:	3310      	adds	r3, #16
 800f720:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 800f722:	79b9      	ldrb	r1, [r7, #6]
 800f724:	79ba      	ldrb	r2, [r7, #6]
 800f726:	4846      	ldr	r0, [pc, #280]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f728:	460b      	mov	r3, r1
 800f72a:	011b      	lsls	r3, r3, #4
 800f72c:	440b      	add	r3, r1
 800f72e:	00db      	lsls	r3, r3, #3
 800f730:	4403      	add	r3, r0
 800f732:	3370      	adds	r3, #112	@ 0x70
 800f734:	6819      	ldr	r1, [r3, #0]
 800f736:	4842      	ldr	r0, [pc, #264]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f738:	4613      	mov	r3, r2
 800f73a:	011b      	lsls	r3, r3, #4
 800f73c:	4413      	add	r3, r2
 800f73e:	00db      	lsls	r3, r3, #3
 800f740:	4403      	add	r3, r0
 800f742:	3314      	adds	r3, #20
 800f744:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 800f746:	79b9      	ldrb	r1, [r7, #6]
 800f748:	79ba      	ldrb	r2, [r7, #6]
 800f74a:	483d      	ldr	r0, [pc, #244]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f74c:	460b      	mov	r3, r1
 800f74e:	011b      	lsls	r3, r3, #4
 800f750:	440b      	add	r3, r1
 800f752:	00db      	lsls	r3, r3, #3
 800f754:	4403      	add	r3, r0
 800f756:	3374      	adds	r3, #116	@ 0x74
 800f758:	6819      	ldr	r1, [r3, #0]
 800f75a:	4839      	ldr	r0, [pc, #228]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f75c:	4613      	mov	r3, r2
 800f75e:	011b      	lsls	r3, r3, #4
 800f760:	4413      	add	r3, r2
 800f762:	00db      	lsls	r3, r3, #3
 800f764:	4403      	add	r3, r0
 800f766:	3318      	adds	r3, #24
 800f768:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 800f76a:	79b9      	ldrb	r1, [r7, #6]
 800f76c:	79ba      	ldrb	r2, [r7, #6]
 800f76e:	4834      	ldr	r0, [pc, #208]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f770:	460b      	mov	r3, r1
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	440b      	add	r3, r1
 800f776:	00db      	lsls	r3, r3, #3
 800f778:	4403      	add	r3, r0
 800f77a:	3378      	adds	r3, #120	@ 0x78
 800f77c:	6819      	ldr	r1, [r3, #0]
 800f77e:	4830      	ldr	r0, [pc, #192]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f780:	4613      	mov	r3, r2
 800f782:	011b      	lsls	r3, r3, #4
 800f784:	4413      	add	r3, r2
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	4403      	add	r3, r0
 800f78a:	331c      	adds	r3, #28
 800f78c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 800f78e:	79b9      	ldrb	r1, [r7, #6]
 800f790:	79ba      	ldrb	r2, [r7, #6]
 800f792:	482b      	ldr	r0, [pc, #172]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f794:	460b      	mov	r3, r1
 800f796:	011b      	lsls	r3, r3, #4
 800f798:	440b      	add	r3, r1
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	4403      	add	r3, r0
 800f79e:	337c      	adds	r3, #124	@ 0x7c
 800f7a0:	6819      	ldr	r1, [r3, #0]
 800f7a2:	4827      	ldr	r0, [pc, #156]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	011b      	lsls	r3, r3, #4
 800f7a8:	4413      	add	r3, r2
 800f7aa:	00db      	lsls	r3, r3, #3
 800f7ac:	4403      	add	r3, r0
 800f7ae:	3320      	adds	r3, #32
 800f7b0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 800f7b2:	79b9      	ldrb	r1, [r7, #6]
 800f7b4:	79ba      	ldrb	r2, [r7, #6]
 800f7b6:	4822      	ldr	r0, [pc, #136]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	011b      	lsls	r3, r3, #4
 800f7bc:	440b      	add	r3, r1
 800f7be:	00db      	lsls	r3, r3, #3
 800f7c0:	4403      	add	r3, r0
 800f7c2:	3380      	adds	r3, #128	@ 0x80
 800f7c4:	6819      	ldr	r1, [r3, #0]
 800f7c6:	481e      	ldr	r0, [pc, #120]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	011b      	lsls	r3, r3, #4
 800f7cc:	4413      	add	r3, r2
 800f7ce:	00db      	lsls	r3, r3, #3
 800f7d0:	4403      	add	r3, r0
 800f7d2:	3324      	adds	r3, #36	@ 0x24
 800f7d4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 800f7d6:	79b9      	ldrb	r1, [r7, #6]
 800f7d8:	79ba      	ldrb	r2, [r7, #6]
 800f7da:	4819      	ldr	r0, [pc, #100]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f7dc:	460b      	mov	r3, r1
 800f7de:	011b      	lsls	r3, r3, #4
 800f7e0:	440b      	add	r3, r1
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	4403      	add	r3, r0
 800f7e6:	3384      	adds	r3, #132	@ 0x84
 800f7e8:	6819      	ldr	r1, [r3, #0]
 800f7ea:	4815      	ldr	r0, [pc, #84]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	011b      	lsls	r3, r3, #4
 800f7f0:	4413      	add	r3, r2
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	4403      	add	r3, r0
 800f7f6:	3328      	adds	r3, #40	@ 0x28
 800f7f8:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 800f7fa:	79ba      	ldrb	r2, [r7, #6]
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	011b      	lsls	r3, r3, #4
 800f800:	4413      	add	r3, r2
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	4a0e      	ldr	r2, [pc, #56]	@ (800f840 <drv_dmaInit+0x1c8>)
 800f806:	4413      	add	r3, r2
 800f808:	3304      	adds	r3, #4
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7f2 fae0 	bl	8001dd0 <HAL_DMA_Init>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d001      	beq.n	800f81a <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 800f816:	23ae      	movs	r3, #174	@ 0xae
 800f818:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800f81a:	79bb      	ldrb	r3, [r7, #6]
 800f81c:	3301      	adds	r3, #1
 800f81e:	71bb      	strb	r3, [r7, #6]
 800f820:	79ba      	ldrb	r2, [r7, #6]
 800f822:	4b09      	ldr	r3, [pc, #36]	@ (800f848 <drv_dmaInit+0x1d0>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4909      	ldr	r1, [pc, #36]	@ (800f84c <drv_dmaInit+0x1d4>)
 800f828:	fba1 1303 	umull	r1, r3, r1, r3
 800f82c:	09db      	lsrs	r3, r3, #7
 800f82e:	429a      	cmp	r2, r3
 800f830:	f4ff af2c 	bcc.w	800f68c <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 800f834:	79fb      	ldrb	r3, [r7, #7]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	2000016c 	.word	0x2000016c
 800f844:	20000e60 	.word	0x20000e60
 800f848:	20000304 	.word	0x20000304
 800f84c:	f0f0f0f1 	.word	0xf0f0f0f1

0800f850 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800f854:	4b19      	ldr	r3, [pc, #100]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d105      	bne.n	800f868 <DMA1_Stream0_IRQHandler+0x18>
 800f85c:	4b18      	ldr	r3, [pc, #96]	@ (800f8c0 <DMA1_Stream0_IRQHandler+0x70>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	3301      	adds	r3, #1
 800f862:	b2da      	uxtb	r2, r3
 800f864:	4b16      	ldr	r3, [pc, #88]	@ (800f8c0 <DMA1_Stream0_IRQHandler+0x70>)
 800f866:	701a      	strb	r2, [r3, #0]
 800f868:	4b14      	ldr	r3, [pc, #80]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	3301      	adds	r3, #1
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	4b12      	ldr	r3, [pc, #72]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f872:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 800f874:	4b13      	ldr	r3, [pc, #76]	@ (800f8c4 <DMA1_Stream0_IRQHandler+0x74>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d005      	beq.n	800f888 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 800f87c:	4b11      	ldr	r3, [pc, #68]	@ (800f8c4 <DMA1_Stream0_IRQHandler+0x74>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	3304      	adds	r3, #4
 800f882:	4618      	mov	r0, r3
 800f884:	f7f2 fc3c 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800f888:	4b0c      	ldr	r3, [pc, #48]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d005      	beq.n	800f89c <DMA1_Stream0_IRQHandler+0x4c>
 800f890:	4b0a      	ldr	r3, [pc, #40]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	3b01      	subs	r3, #1
 800f896:	b2da      	uxtb	r2, r3
 800f898:	4b08      	ldr	r3, [pc, #32]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f89a:	701a      	strb	r2, [r3, #0]
 800f89c:	4b07      	ldr	r3, [pc, #28]	@ (800f8bc <DMA1_Stream0_IRQHandler+0x6c>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d109      	bne.n	800f8b8 <DMA1_Stream0_IRQHandler+0x68>
 800f8a4:	4b06      	ldr	r3, [pc, #24]	@ (800f8c0 <DMA1_Stream0_IRQHandler+0x70>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d005      	beq.n	800f8b8 <DMA1_Stream0_IRQHandler+0x68>
 800f8ac:	4b04      	ldr	r3, [pc, #16]	@ (800f8c0 <DMA1_Stream0_IRQHandler+0x70>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4b02      	ldr	r3, [pc, #8]	@ (800f8c0 <DMA1_Stream0_IRQHandler+0x70>)
 800f8b6:	701a      	strb	r2, [r3, #0]
}
 800f8b8:	bf00      	nop
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20001962 	.word	0x20001962
 800f8c0:	20001961 	.word	0x20001961
 800f8c4:	20000308 	.word	0x20000308

0800f8c8 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800f8cc:	4b19      	ldr	r3, [pc, #100]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d105      	bne.n	800f8e0 <DMA1_Stream1_IRQHandler+0x18>
 800f8d4:	4b18      	ldr	r3, [pc, #96]	@ (800f938 <DMA1_Stream1_IRQHandler+0x70>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	b2da      	uxtb	r2, r3
 800f8dc:	4b16      	ldr	r3, [pc, #88]	@ (800f938 <DMA1_Stream1_IRQHandler+0x70>)
 800f8de:	701a      	strb	r2, [r3, #0]
 800f8e0:	4b14      	ldr	r3, [pc, #80]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	b2da      	uxtb	r2, r3
 800f8e8:	4b12      	ldr	r3, [pc, #72]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f8ea:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 800f8ec:	4b13      	ldr	r3, [pc, #76]	@ (800f93c <DMA1_Stream1_IRQHandler+0x74>)
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d005      	beq.n	800f900 <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 800f8f4:	4b11      	ldr	r3, [pc, #68]	@ (800f93c <DMA1_Stream1_IRQHandler+0x74>)
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f2 fc00 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800f900:	4b0c      	ldr	r3, [pc, #48]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <DMA1_Stream1_IRQHandler+0x4c>
 800f908:	4b0a      	ldr	r3, [pc, #40]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	4b08      	ldr	r3, [pc, #32]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f912:	701a      	strb	r2, [r3, #0]
 800f914:	4b07      	ldr	r3, [pc, #28]	@ (800f934 <DMA1_Stream1_IRQHandler+0x6c>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d109      	bne.n	800f930 <DMA1_Stream1_IRQHandler+0x68>
 800f91c:	4b06      	ldr	r3, [pc, #24]	@ (800f938 <DMA1_Stream1_IRQHandler+0x70>)
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d005      	beq.n	800f930 <DMA1_Stream1_IRQHandler+0x68>
 800f924:	4b04      	ldr	r3, [pc, #16]	@ (800f938 <DMA1_Stream1_IRQHandler+0x70>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	3b01      	subs	r3, #1
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	4b02      	ldr	r3, [pc, #8]	@ (800f938 <DMA1_Stream1_IRQHandler+0x70>)
 800f92e:	701a      	strb	r2, [r3, #0]
}
 800f930:	bf00      	nop
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20001962 	.word	0x20001962
 800f938:	20001961 	.word	0x20001961
 800f93c:	20000308 	.word	0x20000308

0800f940 <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800f944:	4b19      	ldr	r3, [pc, #100]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d105      	bne.n	800f958 <DMA1_Stream2_IRQHandler+0x18>
 800f94c:	4b18      	ldr	r3, [pc, #96]	@ (800f9b0 <DMA1_Stream2_IRQHandler+0x70>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	3301      	adds	r3, #1
 800f952:	b2da      	uxtb	r2, r3
 800f954:	4b16      	ldr	r3, [pc, #88]	@ (800f9b0 <DMA1_Stream2_IRQHandler+0x70>)
 800f956:	701a      	strb	r2, [r3, #0]
 800f958:	4b14      	ldr	r3, [pc, #80]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	3301      	adds	r3, #1
 800f95e:	b2da      	uxtb	r2, r3
 800f960:	4b12      	ldr	r3, [pc, #72]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f962:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 800f964:	4b13      	ldr	r3, [pc, #76]	@ (800f9b4 <DMA1_Stream2_IRQHandler+0x74>)
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d005      	beq.n	800f978 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 800f96c:	4b11      	ldr	r3, [pc, #68]	@ (800f9b4 <DMA1_Stream2_IRQHandler+0x74>)
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	3304      	adds	r3, #4
 800f972:	4618      	mov	r0, r3
 800f974:	f7f2 fbc4 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800f978:	4b0c      	ldr	r3, [pc, #48]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d005      	beq.n	800f98c <DMA1_Stream2_IRQHandler+0x4c>
 800f980:	4b0a      	ldr	r3, [pc, #40]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	3b01      	subs	r3, #1
 800f986:	b2da      	uxtb	r2, r3
 800f988:	4b08      	ldr	r3, [pc, #32]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f98a:	701a      	strb	r2, [r3, #0]
 800f98c:	4b07      	ldr	r3, [pc, #28]	@ (800f9ac <DMA1_Stream2_IRQHandler+0x6c>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d109      	bne.n	800f9a8 <DMA1_Stream2_IRQHandler+0x68>
 800f994:	4b06      	ldr	r3, [pc, #24]	@ (800f9b0 <DMA1_Stream2_IRQHandler+0x70>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d005      	beq.n	800f9a8 <DMA1_Stream2_IRQHandler+0x68>
 800f99c:	4b04      	ldr	r3, [pc, #16]	@ (800f9b0 <DMA1_Stream2_IRQHandler+0x70>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	b2da      	uxtb	r2, r3
 800f9a4:	4b02      	ldr	r3, [pc, #8]	@ (800f9b0 <DMA1_Stream2_IRQHandler+0x70>)
 800f9a6:	701a      	strb	r2, [r3, #0]
}
 800f9a8:	bf00      	nop
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	20001962 	.word	0x20001962
 800f9b0:	20001961 	.word	0x20001961
 800f9b4:	20000308 	.word	0x20000308

0800f9b8 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800f9bc:	4b19      	ldr	r3, [pc, #100]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d105      	bne.n	800f9d0 <DMA1_Stream3_IRQHandler+0x18>
 800f9c4:	4b18      	ldr	r3, [pc, #96]	@ (800fa28 <DMA1_Stream3_IRQHandler+0x70>)
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	4b16      	ldr	r3, [pc, #88]	@ (800fa28 <DMA1_Stream3_IRQHandler+0x70>)
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	4b14      	ldr	r3, [pc, #80]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	4b12      	ldr	r3, [pc, #72]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800f9da:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 800f9dc:	4b13      	ldr	r3, [pc, #76]	@ (800fa2c <DMA1_Stream3_IRQHandler+0x74>)
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d005      	beq.n	800f9f0 <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 800f9e4:	4b11      	ldr	r3, [pc, #68]	@ (800fa2c <DMA1_Stream3_IRQHandler+0x74>)
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7f2 fb88 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800f9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d005      	beq.n	800fa04 <DMA1_Stream3_IRQHandler+0x4c>
 800f9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	b2da      	uxtb	r2, r3
 800fa00:	4b08      	ldr	r3, [pc, #32]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800fa02:	701a      	strb	r2, [r3, #0]
 800fa04:	4b07      	ldr	r3, [pc, #28]	@ (800fa24 <DMA1_Stream3_IRQHandler+0x6c>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d109      	bne.n	800fa20 <DMA1_Stream3_IRQHandler+0x68>
 800fa0c:	4b06      	ldr	r3, [pc, #24]	@ (800fa28 <DMA1_Stream3_IRQHandler+0x70>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d005      	beq.n	800fa20 <DMA1_Stream3_IRQHandler+0x68>
 800fa14:	4b04      	ldr	r3, [pc, #16]	@ (800fa28 <DMA1_Stream3_IRQHandler+0x70>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	4b02      	ldr	r3, [pc, #8]	@ (800fa28 <DMA1_Stream3_IRQHandler+0x70>)
 800fa1e:	701a      	strb	r2, [r3, #0]
}
 800fa20:	bf00      	nop
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	20001962 	.word	0x20001962
 800fa28:	20001961 	.word	0x20001961
 800fa2c:	20000308 	.word	0x20000308

0800fa30 <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fa34:	4b19      	ldr	r3, [pc, #100]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d105      	bne.n	800fa48 <DMA1_Stream4_IRQHandler+0x18>
 800fa3c:	4b18      	ldr	r3, [pc, #96]	@ (800faa0 <DMA1_Stream4_IRQHandler+0x70>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	3301      	adds	r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	4b16      	ldr	r3, [pc, #88]	@ (800faa0 <DMA1_Stream4_IRQHandler+0x70>)
 800fa46:	701a      	strb	r2, [r3, #0]
 800fa48:	4b14      	ldr	r3, [pc, #80]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	b2da      	uxtb	r2, r3
 800fa50:	4b12      	ldr	r3, [pc, #72]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa52:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 800fa54:	4b13      	ldr	r3, [pc, #76]	@ (800faa4 <DMA1_Stream4_IRQHandler+0x74>)
 800fa56:	691b      	ldr	r3, [r3, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 800fa5c:	4b11      	ldr	r3, [pc, #68]	@ (800faa4 <DMA1_Stream4_IRQHandler+0x74>)
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	3304      	adds	r3, #4
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f2 fb4c 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fa68:	4b0c      	ldr	r3, [pc, #48]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d005      	beq.n	800fa7c <DMA1_Stream4_IRQHandler+0x4c>
 800fa70:	4b0a      	ldr	r3, [pc, #40]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	3b01      	subs	r3, #1
 800fa76:	b2da      	uxtb	r2, r3
 800fa78:	4b08      	ldr	r3, [pc, #32]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa7a:	701a      	strb	r2, [r3, #0]
 800fa7c:	4b07      	ldr	r3, [pc, #28]	@ (800fa9c <DMA1_Stream4_IRQHandler+0x6c>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d109      	bne.n	800fa98 <DMA1_Stream4_IRQHandler+0x68>
 800fa84:	4b06      	ldr	r3, [pc, #24]	@ (800faa0 <DMA1_Stream4_IRQHandler+0x70>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d005      	beq.n	800fa98 <DMA1_Stream4_IRQHandler+0x68>
 800fa8c:	4b04      	ldr	r3, [pc, #16]	@ (800faa0 <DMA1_Stream4_IRQHandler+0x70>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	3b01      	subs	r3, #1
 800fa92:	b2da      	uxtb	r2, r3
 800fa94:	4b02      	ldr	r3, [pc, #8]	@ (800faa0 <DMA1_Stream4_IRQHandler+0x70>)
 800fa96:	701a      	strb	r2, [r3, #0]
}
 800fa98:	bf00      	nop
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	20001962 	.word	0x20001962
 800faa0:	20001961 	.word	0x20001961
 800faa4:	20000308 	.word	0x20000308

0800faa8 <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 800faae:	2300      	movs	r3, #0
 800fab0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fab2:	4b28      	ldr	r3, [pc, #160]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d105      	bne.n	800fac6 <DMA1_Stream5_IRQHandler+0x1e>
 800faba:	4b27      	ldr	r3, [pc, #156]	@ (800fb58 <DMA1_Stream5_IRQHandler+0xb0>)
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	3301      	adds	r3, #1
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	4b25      	ldr	r3, [pc, #148]	@ (800fb58 <DMA1_Stream5_IRQHandler+0xb0>)
 800fac4:	701a      	strb	r2, [r3, #0]
 800fac6:	4b23      	ldr	r3, [pc, #140]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	b2da      	uxtb	r2, r3
 800face:	4b21      	ldr	r3, [pc, #132]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fad0:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800fad2:	2300      	movs	r3, #0
 800fad4:	71fb      	strb	r3, [r7, #7]
 800fad6:	e017      	b.n	800fb08 <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 800fad8:	79fa      	ldrb	r2, [r7, #7]
 800fada:	4920      	ldr	r1, [pc, #128]	@ (800fb5c <DMA1_Stream5_IRQHandler+0xb4>)
 800fadc:	4613      	mov	r3, r2
 800fade:	011b      	lsls	r3, r3, #4
 800fae0:	4413      	add	r3, r2
 800fae2:	00db      	lsls	r3, r3, #3
 800fae4:	440b      	add	r3, r1
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2b05      	cmp	r3, #5
 800faea:	d10a      	bne.n	800fb02 <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 800faec:	79fa      	ldrb	r2, [r7, #7]
 800faee:	4613      	mov	r3, r2
 800faf0:	011b      	lsls	r3, r3, #4
 800faf2:	4413      	add	r3, r2
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	4a19      	ldr	r2, [pc, #100]	@ (800fb5c <DMA1_Stream5_IRQHandler+0xb4>)
 800faf8:	4413      	add	r3, r2
 800fafa:	3304      	adds	r3, #4
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7f2 faff 	bl	8002100 <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800fb02:	79fb      	ldrb	r3, [r7, #7]
 800fb04:	3301      	adds	r3, #1
 800fb06:	71fb      	strb	r3, [r7, #7]
 800fb08:	79fa      	ldrb	r2, [r7, #7]
 800fb0a:	4b15      	ldr	r3, [pc, #84]	@ (800fb60 <DMA1_Stream5_IRQHandler+0xb8>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4915      	ldr	r1, [pc, #84]	@ (800fb64 <DMA1_Stream5_IRQHandler+0xbc>)
 800fb10:	fba1 1303 	umull	r1, r3, r1, r3
 800fb14:	09db      	lsrs	r3, r3, #7
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d3de      	bcc.n	800fad8 <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 800fb1a:	4b0e      	ldr	r3, [pc, #56]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d005      	beq.n	800fb2e <DMA1_Stream5_IRQHandler+0x86>
 800fb22:	4b0c      	ldr	r3, [pc, #48]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fb2c:	701a      	strb	r2, [r3, #0]
 800fb2e:	4b09      	ldr	r3, [pc, #36]	@ (800fb54 <DMA1_Stream5_IRQHandler+0xac>)
 800fb30:	781b      	ldrb	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d109      	bne.n	800fb4a <DMA1_Stream5_IRQHandler+0xa2>
 800fb36:	4b08      	ldr	r3, [pc, #32]	@ (800fb58 <DMA1_Stream5_IRQHandler+0xb0>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d005      	beq.n	800fb4a <DMA1_Stream5_IRQHandler+0xa2>
 800fb3e:	4b06      	ldr	r3, [pc, #24]	@ (800fb58 <DMA1_Stream5_IRQHandler+0xb0>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	3b01      	subs	r3, #1
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	4b04      	ldr	r3, [pc, #16]	@ (800fb58 <DMA1_Stream5_IRQHandler+0xb0>)
 800fb48:	701a      	strb	r2, [r3, #0]
}
 800fb4a:	bf00      	nop
 800fb4c:	3708      	adds	r7, #8
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	20001962 	.word	0x20001962
 800fb58:	20001961 	.word	0x20001961
 800fb5c:	2000016c 	.word	0x2000016c
 800fb60:	20000304 	.word	0x20000304
 800fb64:	f0f0f0f1 	.word	0xf0f0f0f1

0800fb68 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fb6c:	4b19      	ldr	r3, [pc, #100]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d105      	bne.n	800fb80 <DMA1_Stream6_IRQHandler+0x18>
 800fb74:	4b18      	ldr	r3, [pc, #96]	@ (800fbd8 <DMA1_Stream6_IRQHandler+0x70>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	4b16      	ldr	r3, [pc, #88]	@ (800fbd8 <DMA1_Stream6_IRQHandler+0x70>)
 800fb7e:	701a      	strb	r2, [r3, #0]
 800fb80:	4b14      	ldr	r3, [pc, #80]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	3301      	adds	r3, #1
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	4b12      	ldr	r3, [pc, #72]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fb8a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 800fb8c:	4b13      	ldr	r3, [pc, #76]	@ (800fbdc <DMA1_Stream6_IRQHandler+0x74>)
 800fb8e:	699b      	ldr	r3, [r3, #24]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d005      	beq.n	800fba0 <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 800fb94:	4b11      	ldr	r3, [pc, #68]	@ (800fbdc <DMA1_Stream6_IRQHandler+0x74>)
 800fb96:	699b      	ldr	r3, [r3, #24]
 800fb98:	3304      	adds	r3, #4
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7f2 fab0 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fba0:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d005      	beq.n	800fbb4 <DMA1_Stream6_IRQHandler+0x4c>
 800fba8:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	3b01      	subs	r3, #1
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	4b08      	ldr	r3, [pc, #32]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fbb2:	701a      	strb	r2, [r3, #0]
 800fbb4:	4b07      	ldr	r3, [pc, #28]	@ (800fbd4 <DMA1_Stream6_IRQHandler+0x6c>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d109      	bne.n	800fbd0 <DMA1_Stream6_IRQHandler+0x68>
 800fbbc:	4b06      	ldr	r3, [pc, #24]	@ (800fbd8 <DMA1_Stream6_IRQHandler+0x70>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d005      	beq.n	800fbd0 <DMA1_Stream6_IRQHandler+0x68>
 800fbc4:	4b04      	ldr	r3, [pc, #16]	@ (800fbd8 <DMA1_Stream6_IRQHandler+0x70>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b02      	ldr	r3, [pc, #8]	@ (800fbd8 <DMA1_Stream6_IRQHandler+0x70>)
 800fbce:	701a      	strb	r2, [r3, #0]
}
 800fbd0:	bf00      	nop
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	20001962 	.word	0x20001962
 800fbd8:	20001961 	.word	0x20001961
 800fbdc:	20000308 	.word	0x20000308

0800fbe0 <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fbe4:	4b19      	ldr	r3, [pc, #100]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d105      	bne.n	800fbf8 <DMA1_Stream7_IRQHandler+0x18>
 800fbec:	4b18      	ldr	r3, [pc, #96]	@ (800fc50 <DMA1_Stream7_IRQHandler+0x70>)
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	b2da      	uxtb	r2, r3
 800fbf4:	4b16      	ldr	r3, [pc, #88]	@ (800fc50 <DMA1_Stream7_IRQHandler+0x70>)
 800fbf6:	701a      	strb	r2, [r3, #0]
 800fbf8:	4b14      	ldr	r3, [pc, #80]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	b2da      	uxtb	r2, r3
 800fc00:	4b12      	ldr	r3, [pc, #72]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fc02:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 800fc04:	4b13      	ldr	r3, [pc, #76]	@ (800fc54 <DMA1_Stream7_IRQHandler+0x74>)
 800fc06:	69db      	ldr	r3, [r3, #28]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d005      	beq.n	800fc18 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 800fc0c:	4b11      	ldr	r3, [pc, #68]	@ (800fc54 <DMA1_Stream7_IRQHandler+0x74>)
 800fc0e:	69db      	ldr	r3, [r3, #28]
 800fc10:	3304      	adds	r3, #4
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f2 fa74 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fc18:	4b0c      	ldr	r3, [pc, #48]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d005      	beq.n	800fc2c <DMA1_Stream7_IRQHandler+0x4c>
 800fc20:	4b0a      	ldr	r3, [pc, #40]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	4b08      	ldr	r3, [pc, #32]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fc2a:	701a      	strb	r2, [r3, #0]
 800fc2c:	4b07      	ldr	r3, [pc, #28]	@ (800fc4c <DMA1_Stream7_IRQHandler+0x6c>)
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d109      	bne.n	800fc48 <DMA1_Stream7_IRQHandler+0x68>
 800fc34:	4b06      	ldr	r3, [pc, #24]	@ (800fc50 <DMA1_Stream7_IRQHandler+0x70>)
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d005      	beq.n	800fc48 <DMA1_Stream7_IRQHandler+0x68>
 800fc3c:	4b04      	ldr	r3, [pc, #16]	@ (800fc50 <DMA1_Stream7_IRQHandler+0x70>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	4b02      	ldr	r3, [pc, #8]	@ (800fc50 <DMA1_Stream7_IRQHandler+0x70>)
 800fc46:	701a      	strb	r2, [r3, #0]
}
 800fc48:	bf00      	nop
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	20001962 	.word	0x20001962
 800fc50:	20001961 	.word	0x20001961
 800fc54:	20000308 	.word	0x20000308

0800fc58 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fc5c:	4b19      	ldr	r3, [pc, #100]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d105      	bne.n	800fc70 <DMA2_Stream0_IRQHandler+0x18>
 800fc64:	4b18      	ldr	r3, [pc, #96]	@ (800fcc8 <DMA2_Stream0_IRQHandler+0x70>)
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	b2da      	uxtb	r2, r3
 800fc6c:	4b16      	ldr	r3, [pc, #88]	@ (800fcc8 <DMA2_Stream0_IRQHandler+0x70>)
 800fc6e:	701a      	strb	r2, [r3, #0]
 800fc70:	4b14      	ldr	r3, [pc, #80]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	3301      	adds	r3, #1
 800fc76:	b2da      	uxtb	r2, r3
 800fc78:	4b12      	ldr	r3, [pc, #72]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fc7a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 800fc7c:	4b13      	ldr	r3, [pc, #76]	@ (800fccc <DMA2_Stream0_IRQHandler+0x74>)
 800fc7e:	6a1b      	ldr	r3, [r3, #32]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d005      	beq.n	800fc90 <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 800fc84:	4b11      	ldr	r3, [pc, #68]	@ (800fccc <DMA2_Stream0_IRQHandler+0x74>)
 800fc86:	6a1b      	ldr	r3, [r3, #32]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7f2 fa38 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fc90:	4b0c      	ldr	r3, [pc, #48]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d005      	beq.n	800fca4 <DMA2_Stream0_IRQHandler+0x4c>
 800fc98:	4b0a      	ldr	r3, [pc, #40]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	4b08      	ldr	r3, [pc, #32]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fca2:	701a      	strb	r2, [r3, #0]
 800fca4:	4b07      	ldr	r3, [pc, #28]	@ (800fcc4 <DMA2_Stream0_IRQHandler+0x6c>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d109      	bne.n	800fcc0 <DMA2_Stream0_IRQHandler+0x68>
 800fcac:	4b06      	ldr	r3, [pc, #24]	@ (800fcc8 <DMA2_Stream0_IRQHandler+0x70>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d005      	beq.n	800fcc0 <DMA2_Stream0_IRQHandler+0x68>
 800fcb4:	4b04      	ldr	r3, [pc, #16]	@ (800fcc8 <DMA2_Stream0_IRQHandler+0x70>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	4b02      	ldr	r3, [pc, #8]	@ (800fcc8 <DMA2_Stream0_IRQHandler+0x70>)
 800fcbe:	701a      	strb	r2, [r3, #0]
}
 800fcc0:	bf00      	nop
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	20001962 	.word	0x20001962
 800fcc8:	20001961 	.word	0x20001961
 800fccc:	20000308 	.word	0x20000308

0800fcd0 <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fcd4:	4b19      	ldr	r3, [pc, #100]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d105      	bne.n	800fce8 <DMA2_Stream1_IRQHandler+0x18>
 800fcdc:	4b18      	ldr	r3, [pc, #96]	@ (800fd40 <DMA2_Stream1_IRQHandler+0x70>)
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	b2da      	uxtb	r2, r3
 800fce4:	4b16      	ldr	r3, [pc, #88]	@ (800fd40 <DMA2_Stream1_IRQHandler+0x70>)
 800fce6:	701a      	strb	r2, [r3, #0]
 800fce8:	4b14      	ldr	r3, [pc, #80]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	3301      	adds	r3, #1
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	4b12      	ldr	r3, [pc, #72]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fcf2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 800fcf4:	4b13      	ldr	r3, [pc, #76]	@ (800fd44 <DMA2_Stream1_IRQHandler+0x74>)
 800fcf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d005      	beq.n	800fd08 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 800fcfc:	4b11      	ldr	r3, [pc, #68]	@ (800fd44 <DMA2_Stream1_IRQHandler+0x74>)
 800fcfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd00:	3304      	adds	r3, #4
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7f2 f9fc 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fd08:	4b0c      	ldr	r3, [pc, #48]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d005      	beq.n	800fd1c <DMA2_Stream1_IRQHandler+0x4c>
 800fd10:	4b0a      	ldr	r3, [pc, #40]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	b2da      	uxtb	r2, r3
 800fd18:	4b08      	ldr	r3, [pc, #32]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fd1a:	701a      	strb	r2, [r3, #0]
 800fd1c:	4b07      	ldr	r3, [pc, #28]	@ (800fd3c <DMA2_Stream1_IRQHandler+0x6c>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d109      	bne.n	800fd38 <DMA2_Stream1_IRQHandler+0x68>
 800fd24:	4b06      	ldr	r3, [pc, #24]	@ (800fd40 <DMA2_Stream1_IRQHandler+0x70>)
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d005      	beq.n	800fd38 <DMA2_Stream1_IRQHandler+0x68>
 800fd2c:	4b04      	ldr	r3, [pc, #16]	@ (800fd40 <DMA2_Stream1_IRQHandler+0x70>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	b2da      	uxtb	r2, r3
 800fd34:	4b02      	ldr	r3, [pc, #8]	@ (800fd40 <DMA2_Stream1_IRQHandler+0x70>)
 800fd36:	701a      	strb	r2, [r3, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	20001962 	.word	0x20001962
 800fd40:	20001961 	.word	0x20001961
 800fd44:	20000308 	.word	0x20000308

0800fd48 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fd4c:	4b19      	ldr	r3, [pc, #100]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d105      	bne.n	800fd60 <DMA2_Stream2_IRQHandler+0x18>
 800fd54:	4b18      	ldr	r3, [pc, #96]	@ (800fdb8 <DMA2_Stream2_IRQHandler+0x70>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	b2da      	uxtb	r2, r3
 800fd5c:	4b16      	ldr	r3, [pc, #88]	@ (800fdb8 <DMA2_Stream2_IRQHandler+0x70>)
 800fd5e:	701a      	strb	r2, [r3, #0]
 800fd60:	4b14      	ldr	r3, [pc, #80]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd62:	781b      	ldrb	r3, [r3, #0]
 800fd64:	3301      	adds	r3, #1
 800fd66:	b2da      	uxtb	r2, r3
 800fd68:	4b12      	ldr	r3, [pc, #72]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd6a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 800fd6c:	4b13      	ldr	r3, [pc, #76]	@ (800fdbc <DMA2_Stream2_IRQHandler+0x74>)
 800fd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d005      	beq.n	800fd80 <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 800fd74:	4b11      	ldr	r3, [pc, #68]	@ (800fdbc <DMA2_Stream2_IRQHandler+0x74>)
 800fd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd78:	3304      	adds	r3, #4
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7f2 f9c0 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fd80:	4b0c      	ldr	r3, [pc, #48]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d005      	beq.n	800fd94 <DMA2_Stream2_IRQHandler+0x4c>
 800fd88:	4b0a      	ldr	r3, [pc, #40]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	3b01      	subs	r3, #1
 800fd8e:	b2da      	uxtb	r2, r3
 800fd90:	4b08      	ldr	r3, [pc, #32]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	4b07      	ldr	r3, [pc, #28]	@ (800fdb4 <DMA2_Stream2_IRQHandler+0x6c>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d109      	bne.n	800fdb0 <DMA2_Stream2_IRQHandler+0x68>
 800fd9c:	4b06      	ldr	r3, [pc, #24]	@ (800fdb8 <DMA2_Stream2_IRQHandler+0x70>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d005      	beq.n	800fdb0 <DMA2_Stream2_IRQHandler+0x68>
 800fda4:	4b04      	ldr	r3, [pc, #16]	@ (800fdb8 <DMA2_Stream2_IRQHandler+0x70>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	b2da      	uxtb	r2, r3
 800fdac:	4b02      	ldr	r3, [pc, #8]	@ (800fdb8 <DMA2_Stream2_IRQHandler+0x70>)
 800fdae:	701a      	strb	r2, [r3, #0]
}
 800fdb0:	bf00      	nop
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	20001962 	.word	0x20001962
 800fdb8:	20001961 	.word	0x20001961
 800fdbc:	20000308 	.word	0x20000308

0800fdc0 <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fdc4:	4b19      	ldr	r3, [pc, #100]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d105      	bne.n	800fdd8 <DMA2_Stream3_IRQHandler+0x18>
 800fdcc:	4b18      	ldr	r3, [pc, #96]	@ (800fe30 <DMA2_Stream3_IRQHandler+0x70>)
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	4b16      	ldr	r3, [pc, #88]	@ (800fe30 <DMA2_Stream3_IRQHandler+0x70>)
 800fdd6:	701a      	strb	r2, [r3, #0]
 800fdd8:	4b14      	ldr	r3, [pc, #80]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	3301      	adds	r3, #1
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	4b12      	ldr	r3, [pc, #72]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fde2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 800fde4:	4b13      	ldr	r3, [pc, #76]	@ (800fe34 <DMA2_Stream3_IRQHandler+0x74>)
 800fde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d005      	beq.n	800fdf8 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 800fdec:	4b11      	ldr	r3, [pc, #68]	@ (800fe34 <DMA2_Stream3_IRQHandler+0x74>)
 800fdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdf0:	3304      	adds	r3, #4
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7f2 f984 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fdf8:	4b0c      	ldr	r3, [pc, #48]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d005      	beq.n	800fe0c <DMA2_Stream3_IRQHandler+0x4c>
 800fe00:	4b0a      	ldr	r3, [pc, #40]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	b2da      	uxtb	r2, r3
 800fe08:	4b08      	ldr	r3, [pc, #32]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fe0a:	701a      	strb	r2, [r3, #0]
 800fe0c:	4b07      	ldr	r3, [pc, #28]	@ (800fe2c <DMA2_Stream3_IRQHandler+0x6c>)
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d109      	bne.n	800fe28 <DMA2_Stream3_IRQHandler+0x68>
 800fe14:	4b06      	ldr	r3, [pc, #24]	@ (800fe30 <DMA2_Stream3_IRQHandler+0x70>)
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d005      	beq.n	800fe28 <DMA2_Stream3_IRQHandler+0x68>
 800fe1c:	4b04      	ldr	r3, [pc, #16]	@ (800fe30 <DMA2_Stream3_IRQHandler+0x70>)
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	4b02      	ldr	r3, [pc, #8]	@ (800fe30 <DMA2_Stream3_IRQHandler+0x70>)
 800fe26:	701a      	strb	r2, [r3, #0]
}
 800fe28:	bf00      	nop
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	20001962 	.word	0x20001962
 800fe30:	20001961 	.word	0x20001961
 800fe34:	20000308 	.word	0x20000308

0800fe38 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800fe3c:	4b19      	ldr	r3, [pc, #100]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d105      	bne.n	800fe50 <DMA2_Stream4_IRQHandler+0x18>
 800fe44:	4b18      	ldr	r3, [pc, #96]	@ (800fea8 <DMA2_Stream4_IRQHandler+0x70>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	4b16      	ldr	r3, [pc, #88]	@ (800fea8 <DMA2_Stream4_IRQHandler+0x70>)
 800fe4e:	701a      	strb	r2, [r3, #0]
 800fe50:	4b14      	ldr	r3, [pc, #80]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	3301      	adds	r3, #1
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	4b12      	ldr	r3, [pc, #72]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe5a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 800fe5c:	4b13      	ldr	r3, [pc, #76]	@ (800feac <DMA2_Stream4_IRQHandler+0x74>)
 800fe5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d005      	beq.n	800fe70 <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 800fe64:	4b11      	ldr	r3, [pc, #68]	@ (800feac <DMA2_Stream4_IRQHandler+0x74>)
 800fe66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe68:	3304      	adds	r3, #4
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7f2 f948 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fe70:	4b0c      	ldr	r3, [pc, #48]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe72:	781b      	ldrb	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d005      	beq.n	800fe84 <DMA2_Stream4_IRQHandler+0x4c>
 800fe78:	4b0a      	ldr	r3, [pc, #40]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	3b01      	subs	r3, #1
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	4b08      	ldr	r3, [pc, #32]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe82:	701a      	strb	r2, [r3, #0]
 800fe84:	4b07      	ldr	r3, [pc, #28]	@ (800fea4 <DMA2_Stream4_IRQHandler+0x6c>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d109      	bne.n	800fea0 <DMA2_Stream4_IRQHandler+0x68>
 800fe8c:	4b06      	ldr	r3, [pc, #24]	@ (800fea8 <DMA2_Stream4_IRQHandler+0x70>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d005      	beq.n	800fea0 <DMA2_Stream4_IRQHandler+0x68>
 800fe94:	4b04      	ldr	r3, [pc, #16]	@ (800fea8 <DMA2_Stream4_IRQHandler+0x70>)
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	b2da      	uxtb	r2, r3
 800fe9c:	4b02      	ldr	r3, [pc, #8]	@ (800fea8 <DMA2_Stream4_IRQHandler+0x70>)
 800fe9e:	701a      	strb	r2, [r3, #0]
}
 800fea0:	bf00      	nop
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	20001962 	.word	0x20001962
 800fea8:	20001961 	.word	0x20001961
 800feac:	20000308 	.word	0x20000308

0800feb0 <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800feb4:	4b19      	ldr	r3, [pc, #100]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d105      	bne.n	800fec8 <DMA2_Stream5_IRQHandler+0x18>
 800febc:	4b18      	ldr	r3, [pc, #96]	@ (800ff20 <DMA2_Stream5_IRQHandler+0x70>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	3301      	adds	r3, #1
 800fec2:	b2da      	uxtb	r2, r3
 800fec4:	4b16      	ldr	r3, [pc, #88]	@ (800ff20 <DMA2_Stream5_IRQHandler+0x70>)
 800fec6:	701a      	strb	r2, [r3, #0]
 800fec8:	4b14      	ldr	r3, [pc, #80]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	3301      	adds	r3, #1
 800fece:	b2da      	uxtb	r2, r3
 800fed0:	4b12      	ldr	r3, [pc, #72]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800fed2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 800fed4:	4b13      	ldr	r3, [pc, #76]	@ (800ff24 <DMA2_Stream5_IRQHandler+0x74>)
 800fed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d005      	beq.n	800fee8 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 800fedc:	4b11      	ldr	r3, [pc, #68]	@ (800ff24 <DMA2_Stream5_IRQHandler+0x74>)
 800fede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fee0:	3304      	adds	r3, #4
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f2 f90c 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800fee8:	4b0c      	ldr	r3, [pc, #48]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d005      	beq.n	800fefc <DMA2_Stream5_IRQHandler+0x4c>
 800fef0:	4b0a      	ldr	r3, [pc, #40]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	3b01      	subs	r3, #1
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	4b08      	ldr	r3, [pc, #32]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800fefa:	701a      	strb	r2, [r3, #0]
 800fefc:	4b07      	ldr	r3, [pc, #28]	@ (800ff1c <DMA2_Stream5_IRQHandler+0x6c>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d109      	bne.n	800ff18 <DMA2_Stream5_IRQHandler+0x68>
 800ff04:	4b06      	ldr	r3, [pc, #24]	@ (800ff20 <DMA2_Stream5_IRQHandler+0x70>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d005      	beq.n	800ff18 <DMA2_Stream5_IRQHandler+0x68>
 800ff0c:	4b04      	ldr	r3, [pc, #16]	@ (800ff20 <DMA2_Stream5_IRQHandler+0x70>)
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	b2da      	uxtb	r2, r3
 800ff14:	4b02      	ldr	r3, [pc, #8]	@ (800ff20 <DMA2_Stream5_IRQHandler+0x70>)
 800ff16:	701a      	strb	r2, [r3, #0]
}
 800ff18:	bf00      	nop
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	20001962 	.word	0x20001962
 800ff20:	20001961 	.word	0x20001961
 800ff24:	20000308 	.word	0x20000308

0800ff28 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800ff2c:	4b19      	ldr	r3, [pc, #100]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d105      	bne.n	800ff40 <DMA2_Stream6_IRQHandler+0x18>
 800ff34:	4b18      	ldr	r3, [pc, #96]	@ (800ff98 <DMA2_Stream6_IRQHandler+0x70>)
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	4b16      	ldr	r3, [pc, #88]	@ (800ff98 <DMA2_Stream6_IRQHandler+0x70>)
 800ff3e:	701a      	strb	r2, [r3, #0]
 800ff40:	4b14      	ldr	r3, [pc, #80]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	3301      	adds	r3, #1
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	4b12      	ldr	r3, [pc, #72]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff4a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 800ff4c:	4b13      	ldr	r3, [pc, #76]	@ (800ff9c <DMA2_Stream6_IRQHandler+0x74>)
 800ff4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d005      	beq.n	800ff60 <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 800ff54:	4b11      	ldr	r3, [pc, #68]	@ (800ff9c <DMA2_Stream6_IRQHandler+0x74>)
 800ff56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff58:	3304      	adds	r3, #4
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7f2 f8d0 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800ff60:	4b0c      	ldr	r3, [pc, #48]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d005      	beq.n	800ff74 <DMA2_Stream6_IRQHandler+0x4c>
 800ff68:	4b0a      	ldr	r3, [pc, #40]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	4b08      	ldr	r3, [pc, #32]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff72:	701a      	strb	r2, [r3, #0]
 800ff74:	4b07      	ldr	r3, [pc, #28]	@ (800ff94 <DMA2_Stream6_IRQHandler+0x6c>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d109      	bne.n	800ff90 <DMA2_Stream6_IRQHandler+0x68>
 800ff7c:	4b06      	ldr	r3, [pc, #24]	@ (800ff98 <DMA2_Stream6_IRQHandler+0x70>)
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d005      	beq.n	800ff90 <DMA2_Stream6_IRQHandler+0x68>
 800ff84:	4b04      	ldr	r3, [pc, #16]	@ (800ff98 <DMA2_Stream6_IRQHandler+0x70>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	b2da      	uxtb	r2, r3
 800ff8c:	4b02      	ldr	r3, [pc, #8]	@ (800ff98 <DMA2_Stream6_IRQHandler+0x70>)
 800ff8e:	701a      	strb	r2, [r3, #0]
}
 800ff90:	bf00      	nop
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	20001962 	.word	0x20001962
 800ff98:	20001961 	.word	0x20001961
 800ff9c:	20000308 	.word	0x20000308

0800ffa0 <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800ffa4:	4b19      	ldr	r3, [pc, #100]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d105      	bne.n	800ffb8 <DMA2_Stream7_IRQHandler+0x18>
 800ffac:	4b18      	ldr	r3, [pc, #96]	@ (8010010 <DMA2_Stream7_IRQHandler+0x70>)
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	b2da      	uxtb	r2, r3
 800ffb4:	4b16      	ldr	r3, [pc, #88]	@ (8010010 <DMA2_Stream7_IRQHandler+0x70>)
 800ffb6:	701a      	strb	r2, [r3, #0]
 800ffb8:	4b14      	ldr	r3, [pc, #80]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	4b12      	ldr	r3, [pc, #72]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffc2:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 800ffc4:	4b13      	ldr	r3, [pc, #76]	@ (8010014 <DMA2_Stream7_IRQHandler+0x74>)
 800ffc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d005      	beq.n	800ffd8 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 800ffcc:	4b11      	ldr	r3, [pc, #68]	@ (8010014 <DMA2_Stream7_IRQHandler+0x74>)
 800ffce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffd0:	3304      	adds	r3, #4
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7f2 f894 	bl	8002100 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800ffd8:	4b0c      	ldr	r3, [pc, #48]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d005      	beq.n	800ffec <DMA2_Stream7_IRQHandler+0x4c>
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	4b08      	ldr	r3, [pc, #32]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffea:	701a      	strb	r2, [r3, #0]
 800ffec:	4b07      	ldr	r3, [pc, #28]	@ (801000c <DMA2_Stream7_IRQHandler+0x6c>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d109      	bne.n	8010008 <DMA2_Stream7_IRQHandler+0x68>
 800fff4:	4b06      	ldr	r3, [pc, #24]	@ (8010010 <DMA2_Stream7_IRQHandler+0x70>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d005      	beq.n	8010008 <DMA2_Stream7_IRQHandler+0x68>
 800fffc:	4b04      	ldr	r3, [pc, #16]	@ (8010010 <DMA2_Stream7_IRQHandler+0x70>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	3b01      	subs	r3, #1
 8010002:	b2da      	uxtb	r2, r3
 8010004:	4b02      	ldr	r3, [pc, #8]	@ (8010010 <DMA2_Stream7_IRQHandler+0x70>)
 8010006:	701a      	strb	r2, [r3, #0]
}
 8010008:	bf00      	nop
 801000a:	bd80      	pop	{r7, pc}
 801000c:	20001962 	.word	0x20001962
 8010010:	20001961 	.word	0x20001961
 8010014:	20000308 	.word	0x20000308

08010018 <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b088      	sub	sp, #32
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 8010022:	23ae      	movs	r3, #174	@ 0xae
 8010024:	77fb      	strb	r3, [r7, #31]
    u32_t                  startSector      = 0u;
 8010026:	2300      	movs	r3, #0
 8010028:	61bb      	str	r3, [r7, #24]
    u32_t                  endSector        = 0u;
 801002a:	2300      	movs	r3, #0
 801002c:	617b      	str	r3, [r7, #20]
    u32_t                  endSectorAddress = 0u;
 801002e:	2300      	movs	r3, #0
 8010030:	613b      	str	r3, [r7, #16]
    u32_t                  sectorError      = 0u;
 8010032:	2300      	movs	r3, #0
 8010034:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 8010036:	f7f2 fb3b 	bl	80026b0 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f888 	bl	8010150 <drv_flashGetSector>
 8010040:	61b8      	str	r0, [r7, #24]
    endSectorAddress = address + requiredSize - 1;
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	4413      	add	r3, r2
 8010048:	3b01      	subs	r3, #1
 801004a:	613b      	str	r3, [r7, #16]
    endSector = drv_flashGetSector(endSectorAddress);
 801004c:	6938      	ldr	r0, [r7, #16]
 801004e:	f000 f87f 	bl	8010150 <drv_flashGetSector>
 8010052:	6178      	str	r0, [r7, #20]

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8010054:	4b10      	ldr	r3, [pc, #64]	@ (8010098 <drv_flashErase+0x80>)
 8010056:	2200      	movs	r2, #0
 8010058:	601a      	str	r2, [r3, #0]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 801005a:	4b0f      	ldr	r3, [pc, #60]	@ (8010098 <drv_flashErase+0x80>)
 801005c:	2202      	movs	r2, #2
 801005e:	611a      	str	r2, [r3, #16]
    eraseInitStruct.Sector        = startSector;
 8010060:	4a0d      	ldr	r2, [pc, #52]	@ (8010098 <drv_flashErase+0x80>)
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	6093      	str	r3, [r2, #8]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	3301      	adds	r3, #1
 801006e:	4a0a      	ldr	r2, [pc, #40]	@ (8010098 <drv_flashErase+0x80>)
 8010070:	60d3      	str	r3, [r2, #12]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 8010072:	f107 030c 	add.w	r3, r7, #12
 8010076:	4619      	mov	r1, r3
 8010078:	4807      	ldr	r0, [pc, #28]	@ (8010098 <drv_flashErase+0x80>)
 801007a:	f7f2 fc8b 	bl	8002994 <HAL_FLASHEx_Erase>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d101      	bne.n	8010088 <drv_flashErase+0x70>
    {
        flashEraseResult = GOS_SUCCESS;
 8010084:	2355      	movs	r3, #85	@ 0x55
 8010086:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 8010088:	f7f2 fb34 	bl	80026f4 <HAL_FLASH_Lock>

    return flashEraseResult;
 801008c:	7ffb      	ldrb	r3, [r7, #31]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3720      	adds	r7, #32
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	20004318 	.word	0x20004318

0801009c <drv_flashWriteWithoutLock>:

/*
 * Function: drv_flashWriteWithoutLock
 */
gos_result_t drv_flashWriteWithoutLock (u32_t address, void_t* pData, u32_t size)
{
 801009c:	b5b0      	push	{r4, r5, r7, lr}
 801009e:	b088      	sub	sp, #32
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 80100a8:	23ae      	movs	r3, #174	@ 0xae
 80100aa:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 80100ac:	2300      	movs	r3, #0
 80100ae:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 80100b0:	2300      	movs	r3, #0
 80100b2:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 80100b4:	2355      	movs	r3, #85	@ 0x55
 80100b6:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 80100b8:	2300      	movs	r3, #0
 80100ba:	61bb      	str	r3, [r7, #24]
 80100bc:	e01c      	b.n	80100f8 <drv_flashWriteWithoutLock+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	617a      	str	r2, [r7, #20]
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	68ba      	ldr	r2, [r7, #8]
 80100ce:	4413      	add	r3, r2
 80100d0:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 80100d2:	2200      	movs	r2, #0
 80100d4:	461c      	mov	r4, r3
 80100d6:	4615      	mov	r5, r2
 80100d8:	4622      	mov	r2, r4
 80100da:	462b      	mov	r3, r5
 80100dc:	2002      	movs	r0, #2
 80100de:	f7f2 fa93 	bl	8002608 <HAL_FLASH_Program>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d101      	bne.n	80100ec <drv_flashWriteWithoutLock+0x50>
        {
            // Programming OK, continue.
            GOS_NOP;
 80100e8:	bf00      	nop
 80100ea:	e002      	b.n	80100f2 <drv_flashWriteWithoutLock+0x56>
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 80100ec:	23ae      	movs	r3, #174	@ 0xae
 80100ee:	77fb      	strb	r3, [r7, #31]
            break;
 80100f0:	e006      	b.n	8010100 <drv_flashWriteWithoutLock+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	3304      	adds	r3, #4
 80100f6:	61bb      	str	r3, [r7, #24]
 80100f8:	69ba      	ldr	r2, [r7, #24]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d3de      	bcc.n	80100be <drv_flashWriteWithoutLock+0x22>
        }
    }

    return flashWriteResult;
 8010100:	7ffb      	ldrb	r3, [r7, #31]
}
 8010102:	4618      	mov	r0, r3
 8010104:	3720      	adds	r7, #32
 8010106:	46bd      	mov	sp, r7
 8010108:	bdb0      	pop	{r4, r5, r7, pc}

0801010a <drv_flashUnlock>:

/*
 * Function: drv_flashUnlock
 */
gos_result_t drv_flashUnlock (void_t)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 8010110:	23ae      	movs	r3, #174	@ 0xae
 8010112:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8010114:	f7f2 facc 	bl	80026b0 <HAL_FLASH_Unlock>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <drv_flashUnlock+0x18>
    {
        unlockResult = GOS_SUCCESS;
 801011e:	2355      	movs	r3, #85	@ 0x55
 8010120:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return unlockResult;
 8010122:	79fb      	ldrb	r3, [r7, #7]
}
 8010124:	4618      	mov	r0, r3
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <drv_flashLock>:

/*
 * Function: drv_flashLock
 */
gos_result_t drv_flashLock (void_t)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t lockResult = GOS_ERROR;
 8010132:	23ae      	movs	r3, #174	@ 0xae
 8010134:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (HAL_FLASH_Lock() == HAL_OK)
 8010136:	f7f2 fadd 	bl	80026f4 <HAL_FLASH_Lock>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d101      	bne.n	8010144 <drv_flashLock+0x18>
    {
        lockResult = GOS_SUCCESS;
 8010140:	2355      	movs	r3, #85	@ 0x55
 8010142:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Error.
    }

    return lockResult;
 8010144:	79fb      	ldrb	r3, [r7, #7]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
	...

08010150 <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 8010158:	2300      	movs	r3, #0
 801015a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a2e      	ldr	r2, [pc, #184]	@ (8010218 <drv_flashGetSector+0xc8>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d206      	bcs.n	8010172 <drv_flashGetSector+0x22>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801016a:	d302      	bcc.n	8010172 <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 801016c:	2300      	movs	r3, #0
 801016e:	60fb      	str	r3, [r7, #12]
 8010170:	e04b      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4a29      	ldr	r2, [pc, #164]	@ (801021c <drv_flashGetSector+0xcc>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d206      	bcs.n	8010188 <drv_flashGetSector+0x38>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a26      	ldr	r2, [pc, #152]	@ (8010218 <drv_flashGetSector+0xc8>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d302      	bcc.n	8010188 <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 8010182:	2301      	movs	r3, #1
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	e040      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4a25      	ldr	r2, [pc, #148]	@ (8010220 <drv_flashGetSector+0xd0>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d206      	bcs.n	801019e <drv_flashGetSector+0x4e>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4a22      	ldr	r2, [pc, #136]	@ (801021c <drv_flashGetSector+0xcc>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d302      	bcc.n	801019e <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 8010198:	2302      	movs	r3, #2
 801019a:	60fb      	str	r3, [r7, #12]
 801019c:	e035      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a20      	ldr	r2, [pc, #128]	@ (8010224 <drv_flashGetSector+0xd4>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d806      	bhi.n	80101b4 <drv_flashGetSector+0x64>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a1d      	ldr	r2, [pc, #116]	@ (8010220 <drv_flashGetSector+0xd0>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d302      	bcc.n	80101b4 <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 80101ae:	2303      	movs	r3, #3
 80101b0:	60fb      	str	r3, [r7, #12]
 80101b2:	e02a      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4a1c      	ldr	r2, [pc, #112]	@ (8010228 <drv_flashGetSector+0xd8>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d806      	bhi.n	80101ca <drv_flashGetSector+0x7a>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4a19      	ldr	r2, [pc, #100]	@ (8010224 <drv_flashGetSector+0xd4>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d902      	bls.n	80101ca <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 80101c4:	2304      	movs	r3, #4
 80101c6:	60fb      	str	r3, [r7, #12]
 80101c8:	e01f      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4a17      	ldr	r2, [pc, #92]	@ (801022c <drv_flashGetSector+0xdc>)
 80101ce:	4293      	cmp	r3, r2
 80101d0:	d806      	bhi.n	80101e0 <drv_flashGetSector+0x90>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a14      	ldr	r2, [pc, #80]	@ (8010228 <drv_flashGetSector+0xd8>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d902      	bls.n	80101e0 <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 80101da:	2305      	movs	r3, #5
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	e014      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4a13      	ldr	r2, [pc, #76]	@ (8010230 <drv_flashGetSector+0xe0>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d806      	bhi.n	80101f6 <drv_flashGetSector+0xa6>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	4a10      	ldr	r2, [pc, #64]	@ (801022c <drv_flashGetSector+0xdc>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	d902      	bls.n	80101f6 <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 80101f0:	2306      	movs	r3, #6
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	e009      	b.n	801020a <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a0e      	ldr	r2, [pc, #56]	@ (8010234 <drv_flashGetSector+0xe4>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d805      	bhi.n	801020a <drv_flashGetSector+0xba>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a0b      	ldr	r2, [pc, #44]	@ (8010230 <drv_flashGetSector+0xe0>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d901      	bls.n	801020a <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 8010206:	2307      	movs	r3, #7
 8010208:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 801020a:	68fb      	ldr	r3, [r7, #12]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr
 8010218:	08004000 	.word	0x08004000
 801021c:	08008000 	.word	0x08008000
 8010220:	0800c000 	.word	0x0800c000
 8010224:	0800ffff 	.word	0x0800ffff
 8010228:	0801ffff 	.word	0x0801ffff
 801022c:	0803ffff 	.word	0x0803ffff
 8010230:	0805ffff 	.word	0x0805ffff
 8010234:	0807ffff 	.word	0x0807ffff

08010238 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 801023e:	2355      	movs	r3, #85	@ 0x55
 8010240:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 8010242:	2300      	movs	r3, #0
 8010244:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8010246:	2300      	movs	r3, #0
 8010248:	71bb      	strb	r3, [r7, #6]
 801024a:	e00e      	b.n	801026a <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 801024c:	79fb      	ldrb	r3, [r7, #7]
 801024e:	2b55      	cmp	r3, #85	@ 0x55
 8010250:	d106      	bne.n	8010260 <drv_gpioInit+0x28>
 8010252:	79bb      	ldrb	r3, [r7, #6]
 8010254:	4618      	mov	r0, r3
 8010256:	f000 f81b 	bl	8010290 <drv_gpioInitPin>
 801025a:	4603      	mov	r3, r0
 801025c:	71fb      	strb	r3, [r7, #7]
 801025e:	e001      	b.n	8010264 <drv_gpioInit+0x2c>
 8010260:	23ae      	movs	r3, #174	@ 0xae
 8010262:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8010264:	79bb      	ldrb	r3, [r7, #6]
 8010266:	3301      	adds	r3, #1
 8010268:	71bb      	strb	r3, [r7, #6]
 801026a:	79bb      	ldrb	r3, [r7, #6]
 801026c:	4a06      	ldr	r2, [pc, #24]	@ (8010288 <drv_gpioInit+0x50>)
 801026e:	6812      	ldr	r2, [r2, #0]
 8010270:	0892      	lsrs	r2, r2, #2
 8010272:	4906      	ldr	r1, [pc, #24]	@ (801028c <drv_gpioInit+0x54>)
 8010274:	fba1 1202 	umull	r1, r2, r1, r2
 8010278:	4293      	cmp	r3, r2
 801027a:	d3e7      	bcc.n	801024c <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 801027c:	79fb      	ldrb	r3, [r7, #7]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3708      	adds	r7, #8
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	2000034c 	.word	0x2000034c
 801028c:	24924925 	.word	0x24924925

08010290 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 8010290:	b590      	push	{r4, r7, lr}
 8010292:	b089      	sub	sp, #36	@ 0x24
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 801029a:	23ae      	movs	r3, #174	@ 0xae
 801029c:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 801029e:	f107 0308 	add.w	r3, r7, #8
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	605a      	str	r2, [r3, #4]
 80102a8:	609a      	str	r2, [r3, #8]
 80102aa:	60da      	str	r2, [r3, #12]
 80102ac:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	4a40      	ldr	r2, [pc, #256]	@ (80103b4 <drv_gpioInitPin+0x124>)
 80102b2:	6812      	ldr	r2, [r2, #0]
 80102b4:	0892      	lsrs	r2, r2, #2
 80102b6:	4940      	ldr	r1, [pc, #256]	@ (80103b8 <drv_gpioInitPin+0x128>)
 80102b8:	fba1 1202 	umull	r1, r2, r1, r2
 80102bc:	4293      	cmp	r3, r2
 80102be:	d274      	bcs.n	80103aa <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 80102c0:	79fa      	ldrb	r2, [r7, #7]
 80102c2:	493e      	ldr	r1, [pc, #248]	@ (80103bc <drv_gpioInitPin+0x12c>)
 80102c4:	4613      	mov	r3, r2
 80102c6:	00db      	lsls	r3, r3, #3
 80102c8:	1a9b      	subs	r3, r3, r2
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	440b      	add	r3, r1
 80102ce:	3304      	adds	r3, #4
 80102d0:	881b      	ldrh	r3, [r3, #0]
 80102d2:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 80102d4:	79fa      	ldrb	r2, [r7, #7]
 80102d6:	4939      	ldr	r1, [pc, #228]	@ (80103bc <drv_gpioInitPin+0x12c>)
 80102d8:	4613      	mov	r3, r2
 80102da:	00db      	lsls	r3, r3, #3
 80102dc:	1a9b      	subs	r3, r3, r2
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	440b      	add	r3, r1
 80102e2:	3308      	adds	r3, #8
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 80102e8:	79fa      	ldrb	r2, [r7, #7]
 80102ea:	4934      	ldr	r1, [pc, #208]	@ (80103bc <drv_gpioInitPin+0x12c>)
 80102ec:	4613      	mov	r3, r2
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	1a9b      	subs	r3, r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	440b      	add	r3, r1
 80102f6:	3310      	adds	r3, #16
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 80102fc:	79fa      	ldrb	r2, [r7, #7]
 80102fe:	492f      	ldr	r1, [pc, #188]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010300:	4613      	mov	r3, r2
 8010302:	00db      	lsls	r3, r3, #3
 8010304:	1a9b      	subs	r3, r3, r2
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	440b      	add	r3, r1
 801030a:	330c      	adds	r3, #12
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 8010310:	79fa      	ldrb	r2, [r7, #7]
 8010312:	492a      	ldr	r1, [pc, #168]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010314:	4613      	mov	r3, r2
 8010316:	00db      	lsls	r3, r3, #3
 8010318:	1a9b      	subs	r3, r3, r2
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	440b      	add	r3, r1
 801031e:	3314      	adds	r3, #20
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 8010324:	79fa      	ldrb	r2, [r7, #7]
 8010326:	4925      	ldr	r1, [pc, #148]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010328:	4613      	mov	r3, r2
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	1a9b      	subs	r3, r3, r2
 801032e:	009b      	lsls	r3, r3, #2
 8010330:	440b      	add	r3, r1
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f107 0208 	add.w	r2, r7, #8
 8010338:	4611      	mov	r1, r2
 801033a:	4618      	mov	r0, r3
 801033c:	f7f2 fc4c 	bl	8002bd8 <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 8010340:	79fa      	ldrb	r2, [r7, #7]
 8010342:	491e      	ldr	r1, [pc, #120]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010344:	4613      	mov	r3, r2
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	1a9b      	subs	r3, r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	440b      	add	r3, r1
 801034e:	3318      	adds	r3, #24
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	2b01      	cmp	r3, #1
 8010354:	d00a      	beq.n	801036c <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 8010356:	79fa      	ldrb	r2, [r7, #7]
 8010358:	4918      	ldr	r1, [pc, #96]	@ (80103bc <drv_gpioInitPin+0x12c>)
 801035a:	4613      	mov	r3, r2
 801035c:	00db      	lsls	r3, r3, #3
 801035e:	1a9b      	subs	r3, r3, r2
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	440b      	add	r3, r1
 8010364:	3318      	adds	r3, #24
 8010366:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 8010368:	2b00      	cmp	r3, #0
 801036a:	d11c      	bne.n	80103a6 <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 801036c:	79fa      	ldrb	r2, [r7, #7]
 801036e:	4913      	ldr	r1, [pc, #76]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010370:	4613      	mov	r3, r2
 8010372:	00db      	lsls	r3, r3, #3
 8010374:	1a9b      	subs	r3, r3, r2
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	440b      	add	r3, r1
 801037a:	6818      	ldr	r0, [r3, #0]
 801037c:	79fa      	ldrb	r2, [r7, #7]
 801037e:	490f      	ldr	r1, [pc, #60]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010380:	4613      	mov	r3, r2
 8010382:	00db      	lsls	r3, r3, #3
 8010384:	1a9b      	subs	r3, r3, r2
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	440b      	add	r3, r1
 801038a:	3304      	adds	r3, #4
 801038c:	8819      	ldrh	r1, [r3, #0]
 801038e:	79fa      	ldrb	r2, [r7, #7]
 8010390:	4c0a      	ldr	r4, [pc, #40]	@ (80103bc <drv_gpioInitPin+0x12c>)
 8010392:	4613      	mov	r3, r2
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	1a9b      	subs	r3, r3, r2
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	4423      	add	r3, r4
 801039c:	3318      	adds	r3, #24
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	461a      	mov	r2, r3
 80103a2:	f7f2 fdad 	bl	8002f00 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 80103a6:	2355      	movs	r3, #85	@ 0x55
 80103a8:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 80103aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3724      	adds	r7, #36	@ 0x24
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd90      	pop	{r4, r7, pc}
 80103b4:	2000034c 	.word	0x2000034c
 80103b8:	24924925 	.word	0x24924925
 80103bc:	0801a384 	.word	0x0801a384

080103c0 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	4603      	mov	r3, r0
 80103c8:	460a      	mov	r2, r1
 80103ca:	71fb      	strb	r3, [r7, #7]
 80103cc:	4613      	mov	r3, r2
 80103ce:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 80103d0:	23ae      	movs	r3, #174	@ 0xae
 80103d2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 80103d4:	79fb      	ldrb	r3, [r7, #7]
 80103d6:	4a13      	ldr	r2, [pc, #76]	@ (8010424 <drv_gpioWritePin+0x64>)
 80103d8:	6812      	ldr	r2, [r2, #0]
 80103da:	0892      	lsrs	r2, r2, #2
 80103dc:	4912      	ldr	r1, [pc, #72]	@ (8010428 <drv_gpioWritePin+0x68>)
 80103de:	fba1 1202 	umull	r1, r2, r1, r2
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d219      	bcs.n	801041a <drv_gpioWritePin+0x5a>
 80103e6:	79bb      	ldrb	r3, [r7, #6]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d816      	bhi.n	801041a <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 80103ec:	79fa      	ldrb	r2, [r7, #7]
 80103ee:	490f      	ldr	r1, [pc, #60]	@ (801042c <drv_gpioWritePin+0x6c>)
 80103f0:	4613      	mov	r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	1a9b      	subs	r3, r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	440b      	add	r3, r1
 80103fa:	6818      	ldr	r0, [r3, #0]
 80103fc:	79fa      	ldrb	r2, [r7, #7]
 80103fe:	490b      	ldr	r1, [pc, #44]	@ (801042c <drv_gpioWritePin+0x6c>)
 8010400:	4613      	mov	r3, r2
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	1a9b      	subs	r3, r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	440b      	add	r3, r1
 801040a:	3304      	adds	r3, #4
 801040c:	881b      	ldrh	r3, [r3, #0]
 801040e:	79ba      	ldrb	r2, [r7, #6]
 8010410:	4619      	mov	r1, r3
 8010412:	f7f2 fd75 	bl	8002f00 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 8010416:	2355      	movs	r3, #85	@ 0x55
 8010418:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 801041a:	7bfb      	ldrb	r3, [r7, #15]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	2000034c 	.word	0x2000034c
 8010428:	24924925 	.word	0x24924925
 801042c:	0801a384 	.word	0x0801a384

08010430 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	4603      	mov	r3, r0
 8010438:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 801043a:	23ae      	movs	r3, #174	@ 0xae
 801043c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 801043e:	79fb      	ldrb	r3, [r7, #7]
 8010440:	4a11      	ldr	r2, [pc, #68]	@ (8010488 <drv_gpioTgglePin+0x58>)
 8010442:	6812      	ldr	r2, [r2, #0]
 8010444:	0892      	lsrs	r2, r2, #2
 8010446:	4911      	ldr	r1, [pc, #68]	@ (801048c <drv_gpioTgglePin+0x5c>)
 8010448:	fba1 1202 	umull	r1, r2, r1, r2
 801044c:	4293      	cmp	r3, r2
 801044e:	d215      	bcs.n	801047c <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 8010450:	79fa      	ldrb	r2, [r7, #7]
 8010452:	490f      	ldr	r1, [pc, #60]	@ (8010490 <drv_gpioTgglePin+0x60>)
 8010454:	4613      	mov	r3, r2
 8010456:	00db      	lsls	r3, r3, #3
 8010458:	1a9b      	subs	r3, r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	440b      	add	r3, r1
 801045e:	6818      	ldr	r0, [r3, #0]
 8010460:	79fa      	ldrb	r2, [r7, #7]
 8010462:	490b      	ldr	r1, [pc, #44]	@ (8010490 <drv_gpioTgglePin+0x60>)
 8010464:	4613      	mov	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	1a9b      	subs	r3, r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	440b      	add	r3, r1
 801046e:	3304      	adds	r3, #4
 8010470:	881b      	ldrh	r3, [r3, #0]
 8010472:	4619      	mov	r1, r3
 8010474:	f7f2 fd5d 	bl	8002f32 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 8010478:	2355      	movs	r3, #85	@ 0x55
 801047a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 801047c:	7bfb      	ldrb	r3, [r7, #15]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	2000034c 	.word	0x2000034c
 801048c:	24924925 	.word	0x24924925
 8010490:	0801a384 	.word	0x0801a384

08010494 <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8010498:	4b1d      	ldr	r3, [pc, #116]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d105      	bne.n	80104ac <EXTI9_5_IRQHandler+0x18>
 80104a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010514 <EXTI9_5_IRQHandler+0x80>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	3301      	adds	r3, #1
 80104a6:	b2da      	uxtb	r2, r3
 80104a8:	4b1a      	ldr	r3, [pc, #104]	@ (8010514 <EXTI9_5_IRQHandler+0x80>)
 80104aa:	701a      	strb	r2, [r3, #0]
 80104ac:	4b18      	ldr	r3, [pc, #96]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	3301      	adds	r3, #1
 80104b2:	b2da      	uxtb	r2, r3
 80104b4:	4b16      	ldr	r3, [pc, #88]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 80104b6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80104b8:	2020      	movs	r0, #32
 80104ba:	f7f2 fd55 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80104be:	2040      	movs	r0, #64	@ 0x40
 80104c0:	f7f2 fd52 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80104c4:	2080      	movs	r0, #128	@ 0x80
 80104c6:	f7f2 fd4f 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80104ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80104ce:	f7f2 fd4b 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80104d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80104d6:	f7f2 fd47 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 80104da:	4b0d      	ldr	r3, [pc, #52]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d005      	beq.n	80104ee <EXTI9_5_IRQHandler+0x5a>
 80104e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	3b01      	subs	r3, #1
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	4b09      	ldr	r3, [pc, #36]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 80104ec:	701a      	strb	r2, [r3, #0]
 80104ee:	4b08      	ldr	r3, [pc, #32]	@ (8010510 <EXTI9_5_IRQHandler+0x7c>)
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d109      	bne.n	801050a <EXTI9_5_IRQHandler+0x76>
 80104f6:	4b07      	ldr	r3, [pc, #28]	@ (8010514 <EXTI9_5_IRQHandler+0x80>)
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d005      	beq.n	801050a <EXTI9_5_IRQHandler+0x76>
 80104fe:	4b05      	ldr	r3, [pc, #20]	@ (8010514 <EXTI9_5_IRQHandler+0x80>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	3b01      	subs	r3, #1
 8010504:	b2da      	uxtb	r2, r3
 8010506:	4b03      	ldr	r3, [pc, #12]	@ (8010514 <EXTI9_5_IRQHandler+0x80>)
 8010508:	701a      	strb	r2, [r3, #0]
}
 801050a:	bf00      	nop
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20001962 	.word	0x20001962
 8010514:	20001961 	.word	0x20001961

08010518 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 801051c:	4b20      	ldr	r3, [pc, #128]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d105      	bne.n	8010530 <EXTI15_10_IRQHandler+0x18>
 8010524:	4b1f      	ldr	r3, [pc, #124]	@ (80105a4 <EXTI15_10_IRQHandler+0x8c>)
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	3301      	adds	r3, #1
 801052a:	b2da      	uxtb	r2, r3
 801052c:	4b1d      	ldr	r3, [pc, #116]	@ (80105a4 <EXTI15_10_IRQHandler+0x8c>)
 801052e:	701a      	strb	r2, [r3, #0]
 8010530:	4b1b      	ldr	r3, [pc, #108]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	3301      	adds	r3, #1
 8010536:	b2da      	uxtb	r2, r3
 8010538:	4b19      	ldr	r3, [pc, #100]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 801053a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801053c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8010540:	f7f2 fd12 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8010544:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8010548:	f7f2 fd0e 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 801054c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8010550:	f7f2 fd0a 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8010554:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8010558:	f7f2 fd06 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 801055c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8010560:	f7f2 fd02 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8010564:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8010568:	f7f2 fcfe 	bl	8002f68 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 801056c:	4b0c      	ldr	r3, [pc, #48]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d005      	beq.n	8010580 <EXTI15_10_IRQHandler+0x68>
 8010574:	4b0a      	ldr	r3, [pc, #40]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	3b01      	subs	r3, #1
 801057a:	b2da      	uxtb	r2, r3
 801057c:	4b08      	ldr	r3, [pc, #32]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 801057e:	701a      	strb	r2, [r3, #0]
 8010580:	4b07      	ldr	r3, [pc, #28]	@ (80105a0 <EXTI15_10_IRQHandler+0x88>)
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d109      	bne.n	801059c <EXTI15_10_IRQHandler+0x84>
 8010588:	4b06      	ldr	r3, [pc, #24]	@ (80105a4 <EXTI15_10_IRQHandler+0x8c>)
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d005      	beq.n	801059c <EXTI15_10_IRQHandler+0x84>
 8010590:	4b04      	ldr	r3, [pc, #16]	@ (80105a4 <EXTI15_10_IRQHandler+0x8c>)
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	3b01      	subs	r3, #1
 8010596:	b2da      	uxtb	r2, r3
 8010598:	4b02      	ldr	r3, [pc, #8]	@ (80105a4 <EXTI15_10_IRQHandler+0x8c>)
 801059a:	701a      	strb	r2, [r3, #0]
}
 801059c:	bf00      	nop
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	20001962 	.word	0x20001962
 80105a4:	20001961 	.word	0x20001961

080105a8 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 80105b2:	4b27      	ldr	r3, [pc, #156]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d105      	bne.n	80105c6 <HAL_GPIO_EXTI_Callback+0x1e>
 80105ba:	4b26      	ldr	r3, [pc, #152]	@ (8010654 <HAL_GPIO_EXTI_Callback+0xac>)
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	3301      	adds	r3, #1
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b24      	ldr	r3, [pc, #144]	@ (8010654 <HAL_GPIO_EXTI_Callback+0xac>)
 80105c4:	701a      	strb	r2, [r3, #0]
 80105c6:	4b22      	ldr	r3, [pc, #136]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	3301      	adds	r3, #1
 80105cc:	b2da      	uxtb	r2, r3
 80105ce:	4b20      	ldr	r3, [pc, #128]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 80105d0:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 80105d2:	2300      	movs	r3, #0
 80105d4:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 80105d6:	2300      	movs	r3, #0
 80105d8:	73fb      	strb	r3, [r7, #15]
 80105da:	e016      	b.n	801060a <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 80105dc:	7bfb      	ldrb	r3, [r7, #15]
 80105de:	4a1e      	ldr	r2, [pc, #120]	@ (8010658 <HAL_GPIO_EXTI_Callback+0xb0>)
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	4413      	add	r3, r2
 80105e4:	889b      	ldrh	r3, [r3, #4]
 80105e6:	88fa      	ldrh	r2, [r7, #6]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d10b      	bne.n	8010604 <HAL_GPIO_EXTI_Callback+0x5c>
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	4a1a      	ldr	r2, [pc, #104]	@ (8010658 <HAL_GPIO_EXTI_Callback+0xb0>)
 80105f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d005      	beq.n	8010604 <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 80105f8:	7bfb      	ldrb	r3, [r7, #15]
 80105fa:	4a17      	ldr	r2, [pc, #92]	@ (8010658 <HAL_GPIO_EXTI_Callback+0xb0>)
 80105fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010600:	4798      	blx	r3
                break;
 8010602:	e008      	b.n	8010616 <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 8010604:	7bfb      	ldrb	r3, [r7, #15]
 8010606:	3301      	adds	r3, #1
 8010608:	73fb      	strb	r3, [r7, #15]
 801060a:	7bfa      	ldrb	r2, [r7, #15]
 801060c:	4b13      	ldr	r3, [pc, #76]	@ (801065c <HAL_GPIO_EXTI_Callback+0xb4>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	08db      	lsrs	r3, r3, #3
 8010612:	429a      	cmp	r2, r3
 8010614:	d3e2      	bcc.n	80105dc <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 8010616:	4b0e      	ldr	r3, [pc, #56]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d005      	beq.n	801062a <HAL_GPIO_EXTI_Callback+0x82>
 801061e:	4b0c      	ldr	r3, [pc, #48]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	3b01      	subs	r3, #1
 8010624:	b2da      	uxtb	r2, r3
 8010626:	4b0a      	ldr	r3, [pc, #40]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 8010628:	701a      	strb	r2, [r3, #0]
 801062a:	4b09      	ldr	r3, [pc, #36]	@ (8010650 <HAL_GPIO_EXTI_Callback+0xa8>)
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d109      	bne.n	8010646 <HAL_GPIO_EXTI_Callback+0x9e>
 8010632:	4b08      	ldr	r3, [pc, #32]	@ (8010654 <HAL_GPIO_EXTI_Callback+0xac>)
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d005      	beq.n	8010646 <HAL_GPIO_EXTI_Callback+0x9e>
 801063a:	4b06      	ldr	r3, [pc, #24]	@ (8010654 <HAL_GPIO_EXTI_Callback+0xac>)
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	3b01      	subs	r3, #1
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b04      	ldr	r3, [pc, #16]	@ (8010654 <HAL_GPIO_EXTI_Callback+0xac>)
 8010644:	701a      	strb	r2, [r3, #0]
}
 8010646:	bf00      	nop
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	20001962 	.word	0x20001962
 8010654:	20001961 	.word	0x20001961
 8010658:	0801a560 	.word	0x0801a560
 801065c:	200016d4 	.word	0x200016d4

08010660 <drv_i2cInit>:

/*
 * Function: drv_i2cInit
 */
gos_result_t drv_i2cInit (void_t)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t i2cDriverInitResult = GOS_SUCCESS;
 8010666:	2355      	movs	r3, #85	@ 0x55
 8010668:	71fb      	strb	r3, [r7, #7]
    u8_t         i2cIdx              = 0u;
 801066a:	2300      	movs	r3, #0
 801066c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (i2cConfig != NULL)
    {
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 801066e:	2300      	movs	r3, #0
 8010670:	71bb      	strb	r3, [r7, #6]
 8010672:	e013      	b.n	801069c <drv_i2cInit+0x3c>
        {
            GOS_CONCAT_RESULT(i2cDriverInitResult, drv_i2cInitInstance(&i2cConfig[i2cIdx]));
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	2b55      	cmp	r3, #85	@ 0x55
 8010678:	d10b      	bne.n	8010692 <drv_i2cInit+0x32>
 801067a:	79bb      	ldrb	r3, [r7, #6]
 801067c:	222c      	movs	r2, #44	@ 0x2c
 801067e:	fb02 f303 	mul.w	r3, r2, r3
 8010682:	4a0d      	ldr	r2, [pc, #52]	@ (80106b8 <drv_i2cInit+0x58>)
 8010684:	4413      	add	r3, r2
 8010686:	4618      	mov	r0, r3
 8010688:	f000 f81c 	bl	80106c4 <drv_i2cInitInstance>
 801068c:	4603      	mov	r3, r0
 801068e:	71fb      	strb	r3, [r7, #7]
 8010690:	e001      	b.n	8010696 <drv_i2cInit+0x36>
 8010692:	23ae      	movs	r3, #174	@ 0xae
 8010694:	71fb      	strb	r3, [r7, #7]
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 8010696:	79bb      	ldrb	r3, [r7, #6]
 8010698:	3301      	adds	r3, #1
 801069a:	71bb      	strb	r3, [r7, #6]
 801069c:	79ba      	ldrb	r2, [r7, #6]
 801069e:	4b07      	ldr	r3, [pc, #28]	@ (80106bc <drv_i2cInit+0x5c>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4907      	ldr	r1, [pc, #28]	@ (80106c0 <drv_i2cInit+0x60>)
 80106a4:	fba1 1303 	umull	r1, r3, r1, r3
 80106a8:	095b      	lsrs	r3, r3, #5
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d3e2      	bcc.n	8010674 <drv_i2cInit+0x14>
    {
        // Configuration array is NULL pointer.
        i2cDriverInitResult = GOS_ERROR;
    }

    return i2cDriverInitResult;
 80106ae:	79fb      	ldrb	r3, [r7, #7]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	0801a560 	.word	0x0801a560
 80106bc:	20000350 	.word	0x20000350
 80106c0:	ba2e8ba3 	.word	0xba2e8ba3

080106c4 <drv_i2cInitInstance>:

/*
 * Function: drv_i2cInitInstance
 */
gos_result_t drv_i2cInitInstance (GOS_CONST drv_i2cDescriptor_t* pInstance)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            i2cInitResult = GOS_ERROR;
 80106cc:	23ae      	movs	r3, #174	@ 0xae
 80106ce:	73fb      	strb	r3, [r7, #15]
    drv_i2cPeriphInstance_t instance      = 0u;
 80106d0:	2300      	movs	r3, #0
 80106d2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pInstance != NULL)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 80e7 	beq.w	80108aa <drv_i2cInitInstance+0x1e6>
    {
        instance = pInstance->periphInstance;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	73bb      	strb	r3, [r7, #14]

        hi2cs[instance].Instance             = i2cInstanceLut[instance];
 80106e2:	7bba      	ldrb	r2, [r7, #14]
 80106e4:	7bbb      	ldrb	r3, [r7, #14]
 80106e6:	4973      	ldr	r1, [pc, #460]	@ (80108b4 <drv_i2cInitInstance+0x1f0>)
 80106e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80106ec:	4972      	ldr	r1, [pc, #456]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 80106ee:	2054      	movs	r0, #84	@ 0x54
 80106f0:	fb00 f303 	mul.w	r3, r0, r3
 80106f4:	440b      	add	r3, r1
 80106f6:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.ClockSpeed      = pInstance->clockSpeed;
 80106f8:	7bbb      	ldrb	r3, [r7, #14]
 80106fa:	687a      	ldr	r2, [r7, #4]
 80106fc:	6852      	ldr	r2, [r2, #4]
 80106fe:	496e      	ldr	r1, [pc, #440]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 8010700:	2054      	movs	r0, #84	@ 0x54
 8010702:	fb00 f303 	mul.w	r3, r0, r3
 8010706:	440b      	add	r3, r1
 8010708:	3304      	adds	r3, #4
 801070a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DutyCycle       = pInstance->dutyCycle;
 801070c:	7bbb      	ldrb	r3, [r7, #14]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	6892      	ldr	r2, [r2, #8]
 8010712:	4969      	ldr	r1, [pc, #420]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 8010714:	2054      	movs	r0, #84	@ 0x54
 8010716:	fb00 f303 	mul.w	r3, r0, r3
 801071a:	440b      	add	r3, r1
 801071c:	3308      	adds	r3, #8
 801071e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.AddressingMode  = pInstance->addressingMode;
 8010720:	7bbb      	ldrb	r3, [r7, #14]
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	6912      	ldr	r2, [r2, #16]
 8010726:	4964      	ldr	r1, [pc, #400]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 8010728:	2054      	movs	r0, #84	@ 0x54
 801072a:	fb00 f303 	mul.w	r3, r0, r3
 801072e:	440b      	add	r3, r1
 8010730:	3310      	adds	r3, #16
 8010732:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress1     = pInstance->ownAddress1;
 8010734:	7bbb      	ldrb	r3, [r7, #14]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	68d2      	ldr	r2, [r2, #12]
 801073a:	495f      	ldr	r1, [pc, #380]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 801073c:	2054      	movs	r0, #84	@ 0x54
 801073e:	fb00 f303 	mul.w	r3, r0, r3
 8010742:	440b      	add	r3, r1
 8010744:	330c      	adds	r3, #12
 8010746:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress2     = pInstance->ownAddress2;
 8010748:	7bbb      	ldrb	r3, [r7, #14]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	6992      	ldr	r2, [r2, #24]
 801074e:	495a      	ldr	r1, [pc, #360]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 8010750:	2054      	movs	r0, #84	@ 0x54
 8010752:	fb00 f303 	mul.w	r3, r0, r3
 8010756:	440b      	add	r3, r1
 8010758:	3318      	adds	r3, #24
 801075a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DualAddressMode = pInstance->dualAddressMode;
 801075c:	7bbb      	ldrb	r3, [r7, #14]
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	6952      	ldr	r2, [r2, #20]
 8010762:	4955      	ldr	r1, [pc, #340]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 8010764:	2054      	movs	r0, #84	@ 0x54
 8010766:	fb00 f303 	mul.w	r3, r0, r3
 801076a:	440b      	add	r3, r1
 801076c:	3314      	adds	r3, #20
 801076e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.GeneralCallMode = pInstance->generalCallMode;
 8010770:	7bbb      	ldrb	r3, [r7, #14]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	69d2      	ldr	r2, [r2, #28]
 8010776:	4950      	ldr	r1, [pc, #320]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 8010778:	2054      	movs	r0, #84	@ 0x54
 801077a:	fb00 f303 	mul.w	r3, r0, r3
 801077e:	440b      	add	r3, r1
 8010780:	331c      	adds	r3, #28
 8010782:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.NoStretchMode   = pInstance->noStretchMode;
 8010784:	7bbb      	ldrb	r3, [r7, #14]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	6a12      	ldr	r2, [r2, #32]
 801078a:	494b      	ldr	r1, [pc, #300]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 801078c:	2054      	movs	r0, #84	@ 0x54
 801078e:	fb00 f303 	mul.w	r3, r0, r3
 8010792:	440b      	add	r3, r1
 8010794:	3320      	adds	r3, #32
 8010796:	601a      	str	r2, [r3, #0]

        HAL_I2C_DeInit(&hi2cs[instance]);
 8010798:	7bbb      	ldrb	r3, [r7, #14]
 801079a:	2254      	movs	r2, #84	@ 0x54
 801079c:	fb02 f303 	mul.w	r3, r2, r3
 80107a0:	4a45      	ldr	r2, [pc, #276]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 80107a2:	4413      	add	r3, r2
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f2 fd3b 	bl	8003220 <HAL_I2C_DeInit>

        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 80107aa:	7bbb      	ldrb	r3, [r7, #14]
 80107ac:	2254      	movs	r2, #84	@ 0x54
 80107ae:	fb02 f303 	mul.w	r3, r2, r3
 80107b2:	4a41      	ldr	r2, [pc, #260]	@ (80108b8 <drv_i2cInitInstance+0x1f4>)
 80107b4:	4413      	add	r3, r2
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f2 fbee 	bl	8002f98 <HAL_I2C_Init>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d173      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 80107c2:	7bbb      	ldrb	r3, [r7, #14]
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	4a3d      	ldr	r2, [pc, #244]	@ (80108bc <drv_i2cInitInstance+0x1f8>)
 80107c8:	4413      	add	r3, r2
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fc f938 	bl	800ca40 <gos_mutexInit>
 80107d0:	4603      	mov	r3, r0
        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 80107d2:	2b55      	cmp	r3, #85	@ 0x55
 80107d4:	d169      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 80107d6:	7bba      	ldrb	r2, [r7, #14]
 80107d8:	4613      	mov	r3, r2
 80107da:	005b      	lsls	r3, r3, #1
 80107dc:	4413      	add	r3, r2
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	4a37      	ldr	r2, [pc, #220]	@ (80108c0 <drv_i2cInitInstance+0x1fc>)
 80107e2:	4413      	add	r3, r2
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fd fd49 	bl	800e27c <gos_triggerInit>
 80107ea:	4603      	mov	r3, r0
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 80107ec:	2b55      	cmp	r3, #85	@ 0x55
 80107ee:	d15c      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 80107f0:	7bba      	ldrb	r2, [r7, #14]
 80107f2:	4613      	mov	r3, r2
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	4413      	add	r3, r2
 80107f8:	009b      	lsls	r3, r3, #2
 80107fa:	4a32      	ldr	r2, [pc, #200]	@ (80108c4 <drv_i2cInitInstance+0x200>)
 80107fc:	4413      	add	r3, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fd fd3c 	bl	800e27c <gos_triggerInit>
 8010804:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010806:	2b55      	cmp	r3, #85	@ 0x55
 8010808:	d14f      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 801080a:	7bba      	ldrb	r2, [r7, #14]
 801080c:	4613      	mov	r3, r2
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	4413      	add	r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	4a2c      	ldr	r2, [pc, #176]	@ (80108c8 <drv_i2cInitInstance+0x204>)
 8010816:	4413      	add	r3, r2
 8010818:	4618      	mov	r0, r3
 801081a:	f7fd fd2f 	bl	800e27c <gos_triggerInit>
 801081e:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010820:	2b55      	cmp	r3, #85	@ 0x55
 8010822:	d142      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8010824:	7bba      	ldrb	r2, [r7, #14]
 8010826:	4613      	mov	r3, r2
 8010828:	005b      	lsls	r3, r3, #1
 801082a:	4413      	add	r3, r2
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	4a27      	ldr	r2, [pc, #156]	@ (80108cc <drv_i2cInitInstance+0x208>)
 8010830:	4413      	add	r3, r2
 8010832:	4618      	mov	r0, r3
 8010834:	f7fd fd22 	bl	800e27c <gos_triggerInit>
 8010838:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 801083a:	2b55      	cmp	r3, #85	@ 0x55
 801083c:	d135      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 801083e:	7bba      	ldrb	r2, [r7, #14]
 8010840:	4613      	mov	r3, r2
 8010842:	005b      	lsls	r3, r3, #1
 8010844:	4413      	add	r3, r2
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	4a1d      	ldr	r2, [pc, #116]	@ (80108c0 <drv_i2cInitInstance+0x1fc>)
 801084a:	4413      	add	r3, r2
 801084c:	4618      	mov	r0, r3
 801084e:	f7fd fd31 	bl	800e2b4 <gos_triggerReset>
 8010852:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8010854:	2b55      	cmp	r3, #85	@ 0x55
 8010856:	d128      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010858:	7bba      	ldrb	r2, [r7, #14]
 801085a:	4613      	mov	r3, r2
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	4413      	add	r3, r2
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4a18      	ldr	r2, [pc, #96]	@ (80108c4 <drv_i2cInitInstance+0x200>)
 8010864:	4413      	add	r3, r2
 8010866:	4618      	mov	r0, r3
 8010868:	f7fd fd24 	bl	800e2b4 <gos_triggerReset>
 801086c:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 801086e:	2b55      	cmp	r3, #85	@ 0x55
 8010870:	d11b      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8010872:	7bba      	ldrb	r2, [r7, #14]
 8010874:	4613      	mov	r3, r2
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	4413      	add	r3, r2
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	4a12      	ldr	r2, [pc, #72]	@ (80108c8 <drv_i2cInitInstance+0x204>)
 801087e:	4413      	add	r3, r2
 8010880:	4618      	mov	r0, r3
 8010882:	f7fd fd17 	bl	800e2b4 <gos_triggerReset>
 8010886:	4603      	mov	r3, r0
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010888:	2b55      	cmp	r3, #85	@ 0x55
 801088a:	d10e      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS
 801088c:	7bba      	ldrb	r2, [r7, #14]
 801088e:	4613      	mov	r3, r2
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	4413      	add	r3, r2
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	4a0d      	ldr	r2, [pc, #52]	@ (80108cc <drv_i2cInitInstance+0x208>)
 8010898:	4413      	add	r3, r2
 801089a:	4618      	mov	r0, r3
 801089c:	f7fd fd0a 	bl	800e2b4 <gos_triggerReset>
 80108a0:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 80108a2:	2b55      	cmp	r3, #85	@ 0x55
 80108a4:	d101      	bne.n	80108aa <drv_i2cInitInstance+0x1e6>
            )
        {
            i2cInitResult = GOS_SUCCESS;
 80108a6:	2355      	movs	r3, #85	@ 0x55
 80108a8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return i2cInitResult;
 80108aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3710      	adds	r7, #16
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	20000ea0 	.word	0x20000ea0
 80108b8:	2000432c 	.word	0x2000432c
 80108bc:	20004428 	.word	0x20004428
 80108c0:	20004434 	.word	0x20004434
 80108c4:	20004458 	.word	0x20004458
 80108c8:	2000447c 	.word	0x2000447c
 80108cc:	200044a0 	.word	0x200044a0

080108d0 <drv_i2cMemRead>:
 */
GOS_INLINE gos_result_t drv_i2cMemRead (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 80108d0:	b590      	push	{r4, r7, lr}
 80108d2:	b087      	sub	sp, #28
 80108d4:	af02      	add	r7, sp, #8
 80108d6:	4604      	mov	r4, r0
 80108d8:	4608      	mov	r0, r1
 80108da:	4611      	mov	r1, r2
 80108dc:	461a      	mov	r2, r3
 80108de:	4623      	mov	r3, r4
 80108e0:	71fb      	strb	r3, [r7, #7]
 80108e2:	4603      	mov	r3, r0
 80108e4:	80bb      	strh	r3, [r7, #4]
 80108e6:	460b      	mov	r3, r1
 80108e8:	807b      	strh	r3, [r7, #2]
 80108ea:	4613      	mov	r3, r2
 80108ec:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemReadResult = GOS_ERROR;
 80108ee:	23ae      	movs	r3, #174	@ 0xae
 80108f0:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	009b      	lsls	r3, r3, #2
 80108f6:	4a29      	ldr	r2, [pc, #164]	@ (801099c <drv_i2cMemRead+0xcc>)
 80108f8:	4413      	add	r3, r2
 80108fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fc f8b9 	bl	800ca74 <gos_mutexLock>
 8010902:	4603      	mov	r3, r0
 8010904:	2b55      	cmp	r3, #85	@ 0x55
 8010906:	d13c      	bne.n	8010982 <drv_i2cMemRead+0xb2>
    {
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 8010908:	79fb      	ldrb	r3, [r7, #7]
 801090a:	2254      	movs	r2, #84	@ 0x54
 801090c:	fb02 f303 	mul.w	r3, r2, r3
 8010910:	4a23      	ldr	r2, [pc, #140]	@ (80109a0 <drv_i2cMemRead+0xd0>)
 8010912:	1898      	adds	r0, r3, r2
 8010914:	883c      	ldrh	r4, [r7, #0]
 8010916:	887a      	ldrh	r2, [r7, #2]
 8010918:	88b9      	ldrh	r1, [r7, #4]
 801091a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	6a3b      	ldr	r3, [r7, #32]
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	4623      	mov	r3, r4
 8010924:	f7f2 fcb6 	bl	8003294 <HAL_I2C_Mem_Read_IT>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d11e      	bne.n	801096c <drv_i2cMemRead+0x9c>
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 801092e:	79fa      	ldrb	r2, [r7, #7]
 8010930:	4613      	mov	r3, r2
 8010932:	005b      	lsls	r3, r3, #1
 8010934:	4413      	add	r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4a1a      	ldr	r2, [pc, #104]	@ (80109a4 <drv_i2cMemRead+0xd4>)
 801093a:	4413      	add	r3, r2
 801093c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801093e:	2101      	movs	r1, #1
 8010940:	4618      	mov	r0, r3
 8010942:	f7fd fd0f 	bl	800e364 <gos_triggerWait>
 8010946:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 8010948:	2b55      	cmp	r3, #85	@ 0x55
 801094a:	d10f      	bne.n	801096c <drv_i2cMemRead+0x9c>
            gos_triggerReset   (&i2cRxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 801094c:	79fa      	ldrb	r2, [r7, #7]
 801094e:	4613      	mov	r3, r2
 8010950:	005b      	lsls	r3, r3, #1
 8010952:	4413      	add	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	4a13      	ldr	r2, [pc, #76]	@ (80109a4 <drv_i2cMemRead+0xd4>)
 8010958:	4413      	add	r3, r2
 801095a:	4618      	mov	r0, r3
 801095c:	f7fd fcaa 	bl	800e2b4 <gos_triggerReset>
 8010960:	4603      	mov	r3, r0
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 8010962:	2b55      	cmp	r3, #85	@ 0x55
 8010964:	d102      	bne.n	801096c <drv_i2cMemRead+0x9c>
        {
            i2cMemReadResult = GOS_SUCCESS;
 8010966:	2355      	movs	r3, #85	@ 0x55
 8010968:	73fb      	strb	r3, [r7, #15]
 801096a:	e00a      	b.n	8010982 <drv_i2cMemRead+0xb2>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	2254      	movs	r2, #84	@ 0x54
 8010970:	fb02 f303 	mul.w	r3, r2, r3
 8010974:	4a0a      	ldr	r2, [pc, #40]	@ (80109a0 <drv_i2cMemRead+0xd0>)
 8010976:	4413      	add	r3, r2
 8010978:	88ba      	ldrh	r2, [r7, #4]
 801097a:	4611      	mov	r1, r2
 801097c:	4618      	mov	r0, r3
 801097e:	f7f2 fd47 	bl	8003410 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 8010982:	79fb      	ldrb	r3, [r7, #7]
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4a05      	ldr	r2, [pc, #20]	@ (801099c <drv_i2cMemRead+0xcc>)
 8010988:	4413      	add	r3, r2
 801098a:	4618      	mov	r0, r3
 801098c:	f7fc f978 	bl	800cc80 <gos_mutexUnlock>

    return i2cMemReadResult;
 8010990:	7bfb      	ldrb	r3, [r7, #15]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3714      	adds	r7, #20
 8010996:	46bd      	mov	sp, r7
 8010998:	bd90      	pop	{r4, r7, pc}
 801099a:	bf00      	nop
 801099c:	20004428 	.word	0x20004428
 80109a0:	2000432c 	.word	0x2000432c
 80109a4:	2000447c 	.word	0x2000447c

080109a8 <HAL_I2C_MasterTxCpltCallback>:

/*
 * Function: HAL_I2C_MasterTxCpltCallback
 */
void_t HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	4b0a      	ldr	r3, [pc, #40]	@ (80109e0 <HAL_I2C_MasterTxCpltCallback+0x38>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d103      	bne.n	80109c4 <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_1]);
 80109bc:	4809      	ldr	r0, [pc, #36]	@ (80109e4 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 80109be:	f7fd fd81 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 80109c2:	e008      	b.n	80109d6 <HAL_I2C_MasterTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	4b05      	ldr	r3, [pc, #20]	@ (80109e0 <HAL_I2C_MasterTxCpltCallback+0x38>)
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d102      	bne.n	80109d6 <HAL_I2C_MasterTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_2]);
 80109d0:	4805      	ldr	r0, [pc, #20]	@ (80109e8 <HAL_I2C_MasterTxCpltCallback+0x40>)
 80109d2:	f7fd fd77 	bl	800e4c4 <gos_triggerIncrement>
}
 80109d6:	bf00      	nop
 80109d8:	3708      	adds	r7, #8
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	20000ea0 	.word	0x20000ea0
 80109e4:	20004458 	.word	0x20004458
 80109e8:	20004464 	.word	0x20004464

080109ec <HAL_I2C_MemTxCpltCallback>:

/*
 * Function: HAL_I2C_MemTxCpltCallback
 */
void_t HAL_I2C_MemTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010a24 <HAL_I2C_MemTxCpltCallback+0x38>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d103      	bne.n	8010a08 <HAL_I2C_MemTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 8010a00:	4809      	ldr	r0, [pc, #36]	@ (8010a28 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8010a02:	f7fd fd5f 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8010a06:	e008      	b.n	8010a1a <HAL_I2C_MemTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	4b05      	ldr	r3, [pc, #20]	@ (8010a24 <HAL_I2C_MemTxCpltCallback+0x38>)
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d102      	bne.n	8010a1a <HAL_I2C_MemTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 8010a14:	4805      	ldr	r0, [pc, #20]	@ (8010a2c <HAL_I2C_MemTxCpltCallback+0x40>)
 8010a16:	f7fd fd55 	bl	800e4c4 <gos_triggerIncrement>
}
 8010a1a:	bf00      	nop
 8010a1c:	3708      	adds	r7, #8
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	20000ea0 	.word	0x20000ea0
 8010a28:	200044a0 	.word	0x200044a0
 8010a2c:	200044ac 	.word	0x200044ac

08010a30 <HAL_I2C_MasterRxCpltCallback>:

/*
 * Function: HAL_I2C_MasterRxCpltCallback
 */
void_t HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010a68 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d103      	bne.n	8010a4c <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_1]);
 8010a44:	4809      	ldr	r0, [pc, #36]	@ (8010a6c <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8010a46:	f7fd fd3d 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8010a4a:	e008      	b.n	8010a5e <HAL_I2C_MasterRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	4b05      	ldr	r3, [pc, #20]	@ (8010a68 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d102      	bne.n	8010a5e <HAL_I2C_MasterRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_2]);
 8010a58:	4805      	ldr	r0, [pc, #20]	@ (8010a70 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8010a5a:	f7fd fd33 	bl	800e4c4 <gos_triggerIncrement>
}
 8010a5e:	bf00      	nop
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	20000ea0 	.word	0x20000ea0
 8010a6c:	20004434 	.word	0x20004434
 8010a70:	20004440 	.word	0x20004440

08010a74 <HAL_I2C_MemRxCpltCallback>:

/*
 * Function: HAL_I2C_MemRxCpltCallback
 */
void_t HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	4b0a      	ldr	r3, [pc, #40]	@ (8010aac <HAL_I2C_MemRxCpltCallback+0x38>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d103      	bne.n	8010a90 <HAL_I2C_MemRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 8010a88:	4809      	ldr	r0, [pc, #36]	@ (8010ab0 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8010a8a:	f7fd fd1b 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8010a8e:	e008      	b.n	8010aa2 <HAL_I2C_MemRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	4b05      	ldr	r3, [pc, #20]	@ (8010aac <HAL_I2C_MemRxCpltCallback+0x38>)
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d102      	bne.n	8010aa2 <HAL_I2C_MemRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 8010a9c:	4805      	ldr	r0, [pc, #20]	@ (8010ab4 <HAL_I2C_MemRxCpltCallback+0x40>)
 8010a9e:	f7fd fd11 	bl	800e4c4 <gos_triggerIncrement>
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	20000ea0 	.word	0x20000ea0
 8010ab0:	2000447c 	.word	0x2000447c
 8010ab4:	20004488 	.word	0x20004488

08010ab8 <I2C1_EV_IRQHandler>:

/*
 * Function: I2C1_EV_IRQHandler
 */
void_t I2C1_EV_IRQHandler (void_t)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8010abc:	4b16      	ldr	r3, [pc, #88]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d105      	bne.n	8010ad0 <I2C1_EV_IRQHandler+0x18>
 8010ac4:	4b15      	ldr	r3, [pc, #84]	@ (8010b1c <I2C1_EV_IRQHandler+0x64>)
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	3301      	adds	r3, #1
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	4b13      	ldr	r3, [pc, #76]	@ (8010b1c <I2C1_EV_IRQHandler+0x64>)
 8010ace:	701a      	strb	r2, [r3, #0]
 8010ad0:	4b11      	ldr	r3, [pc, #68]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010ada:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_1]);
 8010adc:	4810      	ldr	r0, [pc, #64]	@ (8010b20 <I2C1_EV_IRQHandler+0x68>)
 8010ade:	f7f2 fce6 	bl	80034ae <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 8010ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d005      	beq.n	8010af6 <I2C1_EV_IRQHandler+0x3e>
 8010aea:	4b0b      	ldr	r3, [pc, #44]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	3b01      	subs	r3, #1
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	4b09      	ldr	r3, [pc, #36]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010af4:	701a      	strb	r2, [r3, #0]
 8010af6:	4b08      	ldr	r3, [pc, #32]	@ (8010b18 <I2C1_EV_IRQHandler+0x60>)
 8010af8:	781b      	ldrb	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d109      	bne.n	8010b12 <I2C1_EV_IRQHandler+0x5a>
 8010afe:	4b07      	ldr	r3, [pc, #28]	@ (8010b1c <I2C1_EV_IRQHandler+0x64>)
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d005      	beq.n	8010b12 <I2C1_EV_IRQHandler+0x5a>
 8010b06:	4b05      	ldr	r3, [pc, #20]	@ (8010b1c <I2C1_EV_IRQHandler+0x64>)
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	4b03      	ldr	r3, [pc, #12]	@ (8010b1c <I2C1_EV_IRQHandler+0x64>)
 8010b10:	701a      	strb	r2, [r3, #0]
}
 8010b12:	bf00      	nop
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	20001962 	.word	0x20001962
 8010b1c:	20001961 	.word	0x20001961
 8010b20:	2000432c 	.word	0x2000432c

08010b24 <I2C2_EV_IRQHandler>:

/*
 * Function: I2C2_EV_IRQHandler
 */
void_t I2C2_EV_IRQHandler (void_t)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8010b28:	4b16      	ldr	r3, [pc, #88]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d105      	bne.n	8010b3c <I2C2_EV_IRQHandler+0x18>
 8010b30:	4b15      	ldr	r3, [pc, #84]	@ (8010b88 <I2C2_EV_IRQHandler+0x64>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	3301      	adds	r3, #1
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	4b13      	ldr	r3, [pc, #76]	@ (8010b88 <I2C2_EV_IRQHandler+0x64>)
 8010b3a:	701a      	strb	r2, [r3, #0]
 8010b3c:	4b11      	ldr	r3, [pc, #68]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	3301      	adds	r3, #1
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	4b0f      	ldr	r3, [pc, #60]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b46:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_2]);
 8010b48:	4810      	ldr	r0, [pc, #64]	@ (8010b8c <I2C2_EV_IRQHandler+0x68>)
 8010b4a:	f7f2 fcb0 	bl	80034ae <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 8010b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d005      	beq.n	8010b62 <I2C2_EV_IRQHandler+0x3e>
 8010b56:	4b0b      	ldr	r3, [pc, #44]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	3b01      	subs	r3, #1
 8010b5c:	b2da      	uxtb	r2, r3
 8010b5e:	4b09      	ldr	r3, [pc, #36]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b60:	701a      	strb	r2, [r3, #0]
 8010b62:	4b08      	ldr	r3, [pc, #32]	@ (8010b84 <I2C2_EV_IRQHandler+0x60>)
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d109      	bne.n	8010b7e <I2C2_EV_IRQHandler+0x5a>
 8010b6a:	4b07      	ldr	r3, [pc, #28]	@ (8010b88 <I2C2_EV_IRQHandler+0x64>)
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d005      	beq.n	8010b7e <I2C2_EV_IRQHandler+0x5a>
 8010b72:	4b05      	ldr	r3, [pc, #20]	@ (8010b88 <I2C2_EV_IRQHandler+0x64>)
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	3b01      	subs	r3, #1
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	4b03      	ldr	r3, [pc, #12]	@ (8010b88 <I2C2_EV_IRQHandler+0x64>)
 8010b7c:	701a      	strb	r2, [r3, #0]
}
 8010b7e:	bf00      	nop
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	20001962 	.word	0x20001962
 8010b88:	20001961 	.word	0x20001961
 8010b8c:	20004380 	.word	0x20004380

08010b90 <HAL_I2C_MspInit>:

/*
 * Function: HAL_I2C_MspInit
 */
void_t HAL_I2C_MspInit (I2C_HandleTypeDef* hi2c)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b085      	sub	sp, #20
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_i2cPeriphInstance_t instance = 0u;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	73fb      	strb	r3, [r7, #15]
 8010ba4:	e061      	b.n	8010c6a <HAL_I2C_MspInit+0xda>
    {
        if (i2cInstanceLut[instance] == hi2c->Instance)
 8010ba6:	7bfb      	ldrb	r3, [r7, #15]
 8010ba8:	4a35      	ldr	r2, [pc, #212]	@ (8010c80 <HAL_I2C_MspInit+0xf0>)
 8010baa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d156      	bne.n	8010c64 <HAL_I2C_MspInit+0xd4>
        {
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	73bb      	strb	r3, [r7, #14]
 8010bba:	e04a      	b.n	8010c52 <HAL_I2C_MspInit+0xc2>
            {
                if (i2cConfig[idx].periphInstance == instance)
 8010bbc:	7bbb      	ldrb	r3, [r7, #14]
 8010bbe:	4a31      	ldr	r2, [pc, #196]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010bc0:	212c      	movs	r1, #44	@ 0x2c
 8010bc2:	fb01 f303 	mul.w	r3, r1, r3
 8010bc6:	4413      	add	r3, r2
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	7bfa      	ldrb	r2, [r7, #15]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d13d      	bne.n	8010c4c <HAL_I2C_MspInit+0xbc>
                {
                    if (i2cConfig[idx].dmaConfigRx != NULL)
 8010bd0:	7bbb      	ldrb	r3, [r7, #14]
 8010bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010bd4:	212c      	movs	r1, #44	@ 0x2c
 8010bd6:	fb01 f303 	mul.w	r3, r1, r3
 8010bda:	4413      	add	r3, r2
 8010bdc:	3324      	adds	r3, #36	@ 0x24
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d014      	beq.n	8010c0e <HAL_I2C_MspInit+0x7e>
                    {
                        __HAL_LINKDMA(hi2c, hdmarx, i2cConfig[idx].dmaConfigRx->hdma);
 8010be4:	7bbb      	ldrb	r3, [r7, #14]
 8010be6:	4a27      	ldr	r2, [pc, #156]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010be8:	212c      	movs	r1, #44	@ 0x2c
 8010bea:	fb01 f303 	mul.w	r3, r1, r3
 8010bee:	4413      	add	r3, r2
 8010bf0:	3324      	adds	r3, #36	@ 0x24
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	1d1a      	adds	r2, r3, #4
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8010bfa:	7bbb      	ldrb	r3, [r7, #14]
 8010bfc:	4a21      	ldr	r2, [pc, #132]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010bfe:	212c      	movs	r1, #44	@ 0x2c
 8010c00:	fb01 f303 	mul.w	r3, r1, r3
 8010c04:	4413      	add	r3, r2
 8010c06:	3324      	adds	r3, #36	@ 0x24
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (i2cConfig[idx].dmaConfigTx != NULL)
 8010c0e:	7bbb      	ldrb	r3, [r7, #14]
 8010c10:	4a1c      	ldr	r2, [pc, #112]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010c12:	212c      	movs	r1, #44	@ 0x2c
 8010c14:	fb01 f303 	mul.w	r3, r1, r3
 8010c18:	4413      	add	r3, r2
 8010c1a:	3328      	adds	r3, #40	@ 0x28
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d014      	beq.n	8010c4c <HAL_I2C_MspInit+0xbc>
                    {
                        __HAL_LINKDMA(hi2c, hdmatx, i2cConfig[idx].dmaConfigTx->hdma);
 8010c22:	7bbb      	ldrb	r3, [r7, #14]
 8010c24:	4a17      	ldr	r2, [pc, #92]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010c26:	212c      	movs	r1, #44	@ 0x2c
 8010c28:	fb01 f303 	mul.w	r3, r1, r3
 8010c2c:	4413      	add	r3, r2
 8010c2e:	3328      	adds	r3, #40	@ 0x28
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	1d1a      	adds	r2, r3, #4
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	635a      	str	r2, [r3, #52]	@ 0x34
 8010c38:	7bbb      	ldrb	r3, [r7, #14]
 8010c3a:	4a12      	ldr	r2, [pc, #72]	@ (8010c84 <HAL_I2C_MspInit+0xf4>)
 8010c3c:	212c      	movs	r1, #44	@ 0x2c
 8010c3e:	fb01 f303 	mul.w	r3, r1, r3
 8010c42:	4413      	add	r3, r2
 8010c44:	3328      	adds	r3, #40	@ 0x28
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 8010c4c:	7bbb      	ldrb	r3, [r7, #14]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	73bb      	strb	r3, [r7, #14]
 8010c52:	7bba      	ldrb	r2, [r7, #14]
 8010c54:	4b0c      	ldr	r3, [pc, #48]	@ (8010c88 <HAL_I2C_MspInit+0xf8>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	490c      	ldr	r1, [pc, #48]	@ (8010c8c <HAL_I2C_MspInit+0xfc>)
 8010c5a:	fba1 1303 	umull	r1, r3, r1, r3
 8010c5e:	095b      	lsrs	r3, r3, #5
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d3ab      	bcc.n	8010bbc <HAL_I2C_MspInit+0x2c>
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 8010c64:	7bfb      	ldrb	r3, [r7, #15]
 8010c66:	3301      	adds	r3, #1
 8010c68:	73fb      	strb	r3, [r7, #15]
 8010c6a:	7bfb      	ldrb	r3, [r7, #15]
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d99a      	bls.n	8010ba6 <HAL_I2C_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8010c70:	bf00      	nop
 8010c72:	bf00      	nop
 8010c74:	3714      	adds	r7, #20
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	20000ea0 	.word	0x20000ea0
 8010c84:	0801a560 	.word	0x0801a560
 8010c88:	20000350 	.word	0x20000350
 8010c8c:	ba2e8ba3 	.word	0xba2e8ba3

08010c90 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 8010c90:	b590      	push	{r4, r7, lr}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 8010c96:	23ae      	movs	r3, #174	@ 0xae
 8010c98:	71fb      	strb	r3, [r7, #7]
    u8_t         itIdx              = 0u;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	71bb      	strb	r3, [r7, #6]
 8010ca2:	e02c      	b.n	8010cfe <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 8010ca4:	79ba      	ldrb	r2, [r7, #6]
 8010ca6:	491e      	ldr	r1, [pc, #120]	@ (8010d20 <drv_itInit+0x90>)
 8010ca8:	4613      	mov	r3, r2
 8010caa:	005b      	lsls	r3, r3, #1
 8010cac:	4413      	add	r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	440b      	add	r3, r1
 8010cb2:	f993 0000 	ldrsb.w	r0, [r3]
 8010cb6:	79ba      	ldrb	r2, [r7, #6]
 8010cb8:	4919      	ldr	r1, [pc, #100]	@ (8010d20 <drv_itInit+0x90>)
 8010cba:	4613      	mov	r3, r2
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	4413      	add	r3, r2
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	440b      	add	r3, r1
 8010cc4:	3304      	adds	r3, #4
 8010cc6:	6819      	ldr	r1, [r3, #0]
 8010cc8:	79ba      	ldrb	r2, [r7, #6]
 8010cca:	4c15      	ldr	r4, [pc, #84]	@ (8010d20 <drv_itInit+0x90>)
 8010ccc:	4613      	mov	r3, r2
 8010cce:	005b      	lsls	r3, r3, #1
 8010cd0:	4413      	add	r3, r2
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4423      	add	r3, r4
 8010cd6:	3308      	adds	r3, #8
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	f7f1 f841 	bl	8001d62 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 8010ce0:	79ba      	ldrb	r2, [r7, #6]
 8010ce2:	490f      	ldr	r1, [pc, #60]	@ (8010d20 <drv_itInit+0x90>)
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	4413      	add	r3, r2
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	440b      	add	r3, r1
 8010cee:	f993 3000 	ldrsb.w	r3, [r3]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7f1 f851 	bl	8001d9a <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8010cf8:	79bb      	ldrb	r3, [r7, #6]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	71bb      	strb	r3, [r7, #6]
 8010cfe:	79ba      	ldrb	r2, [r7, #6]
 8010d00:	4b08      	ldr	r3, [pc, #32]	@ (8010d24 <drv_itInit+0x94>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	4908      	ldr	r1, [pc, #32]	@ (8010d28 <drv_itInit+0x98>)
 8010d06:	fba1 1303 	umull	r1, r3, r1, r3
 8010d0a:	08db      	lsrs	r3, r3, #3
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d3c9      	bcc.n	8010ca4 <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 8010d10:	2355      	movs	r3, #85	@ 0x55
 8010d12:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 8010d14:	79fb      	ldrb	r3, [r7, #7]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	370c      	adds	r7, #12
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd90      	pop	{r4, r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	0801a58c 	.word	0x0801a58c
 8010d24:	20000354 	.word	0x20000354
 8010d28:	aaaaaaab 	.word	0xaaaaaaab

08010d2c <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 8010d32:	2355      	movs	r3, #85	@ 0x55
 8010d34:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 8010d36:	2300      	movs	r3, #0
 8010d38:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	71bb      	strb	r3, [r7, #6]
 8010d3e:	e00e      	b.n	8010d5e <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 8010d40:	79fb      	ldrb	r3, [r7, #7]
 8010d42:	2b55      	cmp	r3, #85	@ 0x55
 8010d44:	d106      	bne.n	8010d54 <drv_spiInit+0x28>
 8010d46:	79bb      	ldrb	r3, [r7, #6]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f000 f81b 	bl	8010d84 <drv_spiInitInstance>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	71fb      	strb	r3, [r7, #7]
 8010d52:	e001      	b.n	8010d58 <drv_spiInit+0x2c>
 8010d54:	23ae      	movs	r3, #174	@ 0xae
 8010d56:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 8010d58:	79bb      	ldrb	r3, [r7, #6]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	71bb      	strb	r3, [r7, #6]
 8010d5e:	79bb      	ldrb	r3, [r7, #6]
 8010d60:	4a06      	ldr	r2, [pc, #24]	@ (8010d7c <drv_spiInit+0x50>)
 8010d62:	6812      	ldr	r2, [r2, #0]
 8010d64:	08d2      	lsrs	r2, r2, #3
 8010d66:	4906      	ldr	r1, [pc, #24]	@ (8010d80 <drv_spiInit+0x54>)
 8010d68:	fba1 1202 	umull	r1, r2, r1, r2
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d3e7      	bcc.n	8010d40 <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 8010d70:	79fb      	ldrb	r3, [r7, #7]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	20000358 	.word	0x20000358
 8010d80:	24924925 	.word	0x24924925

08010d84 <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 8010d8e:	23ae      	movs	r3, #174	@ 0xae
 8010d90:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 8010d92:	2300      	movs	r3, #0
 8010d94:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 8010d96:	79fb      	ldrb	r3, [r7, #7]
 8010d98:	4aa1      	ldr	r2, [pc, #644]	@ (8011020 <drv_spiInitInstance+0x29c>)
 8010d9a:	6812      	ldr	r2, [r2, #0]
 8010d9c:	08d2      	lsrs	r2, r2, #3
 8010d9e:	49a1      	ldr	r1, [pc, #644]	@ (8011024 <drv_spiInitInstance+0x2a0>)
 8010da0:	fba1 1202 	umull	r1, r2, r1, r2
 8010da4:	4293      	cmp	r3, r2
 8010da6:	f080 8135 	bcs.w	8011014 <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 8010daa:	79fa      	ldrb	r2, [r7, #7]
 8010dac:	499e      	ldr	r1, [pc, #632]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010dae:	4613      	mov	r3, r2
 8010db0:	00db      	lsls	r3, r3, #3
 8010db2:	1a9b      	subs	r3, r3, r2
 8010db4:	00db      	lsls	r3, r3, #3
 8010db6:	440b      	add	r3, r1
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 8010dbc:	7bba      	ldrb	r2, [r7, #14]
 8010dbe:	7bbb      	ldrb	r3, [r7, #14]
 8010dc0:	499a      	ldr	r1, [pc, #616]	@ (801102c <drv_spiInitInstance+0x2a8>)
 8010dc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010dc6:	499a      	ldr	r1, [pc, #616]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010dc8:	2058      	movs	r0, #88	@ 0x58
 8010dca:	fb00 f303 	mul.w	r3, r0, r3
 8010dce:	440b      	add	r3, r1
 8010dd0:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 8010dd2:	79fa      	ldrb	r2, [r7, #7]
 8010dd4:	7bb9      	ldrb	r1, [r7, #14]
 8010dd6:	4894      	ldr	r0, [pc, #592]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010dd8:	4613      	mov	r3, r2
 8010dda:	00db      	lsls	r3, r3, #3
 8010ddc:	1a9b      	subs	r3, r3, r2
 8010dde:	00db      	lsls	r3, r3, #3
 8010de0:	4403      	add	r3, r0
 8010de2:	3304      	adds	r3, #4
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	4892      	ldr	r0, [pc, #584]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010de8:	2358      	movs	r3, #88	@ 0x58
 8010dea:	fb01 f303 	mul.w	r3, r1, r3
 8010dee:	4403      	add	r3, r0
 8010df0:	3304      	adds	r3, #4
 8010df2:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 8010df4:	79fa      	ldrb	r2, [r7, #7]
 8010df6:	7bb9      	ldrb	r1, [r7, #14]
 8010df8:	488b      	ldr	r0, [pc, #556]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010dfa:	4613      	mov	r3, r2
 8010dfc:	00db      	lsls	r3, r3, #3
 8010dfe:	1a9b      	subs	r3, r3, r2
 8010e00:	00db      	lsls	r3, r3, #3
 8010e02:	4403      	add	r3, r0
 8010e04:	3308      	adds	r3, #8
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	4889      	ldr	r0, [pc, #548]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010e0a:	2358      	movs	r3, #88	@ 0x58
 8010e0c:	fb01 f303 	mul.w	r3, r1, r3
 8010e10:	4403      	add	r3, r0
 8010e12:	3308      	adds	r3, #8
 8010e14:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 8010e16:	79fa      	ldrb	r2, [r7, #7]
 8010e18:	7bb9      	ldrb	r1, [r7, #14]
 8010e1a:	4883      	ldr	r0, [pc, #524]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	00db      	lsls	r3, r3, #3
 8010e20:	1a9b      	subs	r3, r3, r2
 8010e22:	00db      	lsls	r3, r3, #3
 8010e24:	4403      	add	r3, r0
 8010e26:	330c      	adds	r3, #12
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	4881      	ldr	r0, [pc, #516]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010e2c:	2358      	movs	r3, #88	@ 0x58
 8010e2e:	fb01 f303 	mul.w	r3, r1, r3
 8010e32:	4403      	add	r3, r0
 8010e34:	330c      	adds	r3, #12
 8010e36:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 8010e38:	79fa      	ldrb	r2, [r7, #7]
 8010e3a:	7bb9      	ldrb	r1, [r7, #14]
 8010e3c:	487a      	ldr	r0, [pc, #488]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010e3e:	4613      	mov	r3, r2
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	1a9b      	subs	r3, r3, r2
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	4403      	add	r3, r0
 8010e48:	3310      	adds	r3, #16
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	4878      	ldr	r0, [pc, #480]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010e4e:	2358      	movs	r3, #88	@ 0x58
 8010e50:	fb01 f303 	mul.w	r3, r1, r3
 8010e54:	4403      	add	r3, r0
 8010e56:	3310      	adds	r3, #16
 8010e58:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 8010e5a:	79fa      	ldrb	r2, [r7, #7]
 8010e5c:	7bb9      	ldrb	r1, [r7, #14]
 8010e5e:	4872      	ldr	r0, [pc, #456]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010e60:	4613      	mov	r3, r2
 8010e62:	00db      	lsls	r3, r3, #3
 8010e64:	1a9b      	subs	r3, r3, r2
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	4403      	add	r3, r0
 8010e6a:	3314      	adds	r3, #20
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	4870      	ldr	r0, [pc, #448]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010e70:	2358      	movs	r3, #88	@ 0x58
 8010e72:	fb01 f303 	mul.w	r3, r1, r3
 8010e76:	4403      	add	r3, r0
 8010e78:	3314      	adds	r3, #20
 8010e7a:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 8010e7c:	79fa      	ldrb	r2, [r7, #7]
 8010e7e:	7bb9      	ldrb	r1, [r7, #14]
 8010e80:	4869      	ldr	r0, [pc, #420]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010e82:	4613      	mov	r3, r2
 8010e84:	00db      	lsls	r3, r3, #3
 8010e86:	1a9b      	subs	r3, r3, r2
 8010e88:	00db      	lsls	r3, r3, #3
 8010e8a:	4403      	add	r3, r0
 8010e8c:	3318      	adds	r3, #24
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	4867      	ldr	r0, [pc, #412]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010e92:	2358      	movs	r3, #88	@ 0x58
 8010e94:	fb01 f303 	mul.w	r3, r1, r3
 8010e98:	4403      	add	r3, r0
 8010e9a:	3318      	adds	r3, #24
 8010e9c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 8010e9e:	79fa      	ldrb	r2, [r7, #7]
 8010ea0:	7bb9      	ldrb	r1, [r7, #14]
 8010ea2:	4861      	ldr	r0, [pc, #388]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	00db      	lsls	r3, r3, #3
 8010eac:	4403      	add	r3, r0
 8010eae:	331c      	adds	r3, #28
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	485f      	ldr	r0, [pc, #380]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010eb4:	2358      	movs	r3, #88	@ 0x58
 8010eb6:	fb01 f303 	mul.w	r3, r1, r3
 8010eba:	4403      	add	r3, r0
 8010ebc:	331c      	adds	r3, #28
 8010ebe:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 8010ec0:	79fa      	ldrb	r2, [r7, #7]
 8010ec2:	7bb9      	ldrb	r1, [r7, #14]
 8010ec4:	4858      	ldr	r0, [pc, #352]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	00db      	lsls	r3, r3, #3
 8010eca:	1a9b      	subs	r3, r3, r2
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	4403      	add	r3, r0
 8010ed0:	3320      	adds	r3, #32
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	4856      	ldr	r0, [pc, #344]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010ed6:	2358      	movs	r3, #88	@ 0x58
 8010ed8:	fb01 f303 	mul.w	r3, r1, r3
 8010edc:	4403      	add	r3, r0
 8010ede:	3320      	adds	r3, #32
 8010ee0:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 8010ee2:	79fa      	ldrb	r2, [r7, #7]
 8010ee4:	7bb9      	ldrb	r1, [r7, #14]
 8010ee6:	4850      	ldr	r0, [pc, #320]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010ee8:	4613      	mov	r3, r2
 8010eea:	00db      	lsls	r3, r3, #3
 8010eec:	1a9b      	subs	r3, r3, r2
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	4403      	add	r3, r0
 8010ef2:	3324      	adds	r3, #36	@ 0x24
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	484e      	ldr	r0, [pc, #312]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010ef8:	2358      	movs	r3, #88	@ 0x58
 8010efa:	fb01 f303 	mul.w	r3, r1, r3
 8010efe:	4403      	add	r3, r0
 8010f00:	3324      	adds	r3, #36	@ 0x24
 8010f02:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 8010f04:	79fa      	ldrb	r2, [r7, #7]
 8010f06:	7bb9      	ldrb	r1, [r7, #14]
 8010f08:	4847      	ldr	r0, [pc, #284]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	00db      	lsls	r3, r3, #3
 8010f0e:	1a9b      	subs	r3, r3, r2
 8010f10:	00db      	lsls	r3, r3, #3
 8010f12:	4403      	add	r3, r0
 8010f14:	3328      	adds	r3, #40	@ 0x28
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	4845      	ldr	r0, [pc, #276]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010f1a:	2358      	movs	r3, #88	@ 0x58
 8010f1c:	fb01 f303 	mul.w	r3, r1, r3
 8010f20:	4403      	add	r3, r0
 8010f22:	3328      	adds	r3, #40	@ 0x28
 8010f24:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 8010f26:	79fa      	ldrb	r2, [r7, #7]
 8010f28:	7bb9      	ldrb	r1, [r7, #14]
 8010f2a:	483f      	ldr	r0, [pc, #252]	@ (8011028 <drv_spiInitInstance+0x2a4>)
 8010f2c:	4613      	mov	r3, r2
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	1a9b      	subs	r3, r3, r2
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	4403      	add	r3, r0
 8010f36:	332c      	adds	r3, #44	@ 0x2c
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	483d      	ldr	r0, [pc, #244]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010f3c:	2358      	movs	r3, #88	@ 0x58
 8010f3e:	fb01 f303 	mul.w	r3, r1, r3
 8010f42:	4403      	add	r3, r0
 8010f44:	332c      	adds	r3, #44	@ 0x2c
 8010f46:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 8010f48:	7bbb      	ldrb	r3, [r7, #14]
 8010f4a:	2258      	movs	r2, #88	@ 0x58
 8010f4c:	fb02 f303 	mul.w	r3, r2, r3
 8010f50:	4a37      	ldr	r2, [pc, #220]	@ (8011030 <drv_spiInitInstance+0x2ac>)
 8010f52:	4413      	add	r3, r2
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7f4 fc9d 	bl	8005894 <HAL_SPI_Init>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d159      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	4a33      	ldr	r2, [pc, #204]	@ (8011034 <drv_spiInitInstance+0x2b0>)
 8010f66:	4413      	add	r3, r2
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fb fd69 	bl	800ca40 <gos_mutexInit>
 8010f6e:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 8010f70:	2b55      	cmp	r3, #85	@ 0x55
 8010f72:	d14f      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010f74:	7bba      	ldrb	r2, [r7, #14]
 8010f76:	4613      	mov	r3, r2
 8010f78:	005b      	lsls	r3, r3, #1
 8010f7a:	4413      	add	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8011038 <drv_spiInitInstance+0x2b4>)
 8010f80:	4413      	add	r3, r2
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fd f97a 	bl	800e27c <gos_triggerInit>
 8010f88:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 8010f8a:	2b55      	cmp	r3, #85	@ 0x55
 8010f8c:	d142      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010f8e:	7bba      	ldrb	r2, [r7, #14]
 8010f90:	4613      	mov	r3, r2
 8010f92:	005b      	lsls	r3, r3, #1
 8010f94:	4413      	add	r3, r2
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	4a28      	ldr	r2, [pc, #160]	@ (801103c <drv_spiInitInstance+0x2b8>)
 8010f9a:	4413      	add	r3, r2
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fd f96d 	bl	800e27c <gos_triggerInit>
 8010fa2:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010fa4:	2b55      	cmp	r3, #85	@ 0x55
 8010fa6:	d135      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 8010fa8:	7bba      	ldrb	r2, [r7, #14]
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4a23      	ldr	r2, [pc, #140]	@ (8011040 <drv_spiInitInstance+0x2bc>)
 8010fb4:	4413      	add	r3, r2
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fd f960 	bl	800e27c <gos_triggerInit>
 8010fbc:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010fbe:	2b55      	cmp	r3, #85	@ 0x55
 8010fc0:	d128      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010fc2:	7bba      	ldrb	r2, [r7, #14]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	4413      	add	r3, r2
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8011038 <drv_spiInitInstance+0x2b4>)
 8010fce:	4413      	add	r3, r2
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fd f96f 	bl	800e2b4 <gos_triggerReset>
 8010fd6:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 8010fd8:	2b55      	cmp	r3, #85	@ 0x55
 8010fda:	d11b      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010fdc:	7bba      	ldrb	r2, [r7, #14]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	4413      	add	r3, r2
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	4a15      	ldr	r2, [pc, #84]	@ (801103c <drv_spiInitInstance+0x2b8>)
 8010fe8:	4413      	add	r3, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fd f962 	bl	800e2b4 <gos_triggerReset>
 8010ff0:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8010ff2:	2b55      	cmp	r3, #85	@ 0x55
 8010ff4:	d10e      	bne.n	8011014 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 8010ff6:	7bba      	ldrb	r2, [r7, #14]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	005b      	lsls	r3, r3, #1
 8010ffc:	4413      	add	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4a0f      	ldr	r2, [pc, #60]	@ (8011040 <drv_spiInitInstance+0x2bc>)
 8011002:	4413      	add	r3, r2
 8011004:	4618      	mov	r0, r3
 8011006:	f7fd f955 	bl	800e2b4 <gos_triggerReset>
 801100a:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 801100c:	2b55      	cmp	r3, #85	@ 0x55
 801100e:	d101      	bne.n	8011014 <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 8011010:	2355      	movs	r3, #85	@ 0x55
 8011012:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 8011014:	7bfb      	ldrb	r3, [r7, #15]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	20000358 	.word	0x20000358
 8011024:	24924925 	.word	0x24924925
 8011028:	0801a5f8 	.word	0x0801a5f8
 801102c:	20000eac 	.word	0x20000eac
 8011030:	200044c4 	.word	0x200044c4
 8011034:	20004624 	.word	0x20004624
 8011038:	20004634 	.word	0x20004634
 801103c:	20004664 	.word	0x20004664
 8011040:	20004694 	.word	0x20004694

08011044 <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60b9      	str	r1, [r7, #8]
 801104c:	607b      	str	r3, [r7, #4]
 801104e:	4603      	mov	r3, r0
 8011050:	73fb      	strb	r3, [r7, #15]
 8011052:	4613      	mov	r3, r2
 8011054:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 8011056:	23ae      	movs	r3, #174	@ 0xae
 8011058:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	4a28      	ldr	r2, [pc, #160]	@ (8011100 <drv_spiTransmitIT+0xbc>)
 8011060:	4413      	add	r3, r2
 8011062:	6879      	ldr	r1, [r7, #4]
 8011064:	4618      	mov	r0, r3
 8011066:	f7fb fd05 	bl	800ca74 <gos_mutexLock>
 801106a:	4603      	mov	r3, r0
 801106c:	2b55      	cmp	r3, #85	@ 0x55
 801106e:	d13a      	bne.n	80110e6 <drv_spiTransmitIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 8011070:	7bfb      	ldrb	r3, [r7, #15]
 8011072:	2258      	movs	r2, #88	@ 0x58
 8011074:	fb02 f303 	mul.w	r3, r2, r3
 8011078:	4a22      	ldr	r2, [pc, #136]	@ (8011104 <drv_spiTransmitIT+0xc0>)
 801107a:	4413      	add	r3, r2
 801107c:	4618      	mov	r0, r3
 801107e:	f7f4 fe19 	bl	8005cb4 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 8011082:	7bfb      	ldrb	r3, [r7, #15]
 8011084:	2258      	movs	r2, #88	@ 0x58
 8011086:	fb02 f303 	mul.w	r3, r2, r3
 801108a:	4a1e      	ldr	r2, [pc, #120]	@ (8011104 <drv_spiTransmitIT+0xc0>)
 801108c:	4413      	add	r3, r2
 801108e:	89ba      	ldrh	r2, [r7, #12]
 8011090:	68b9      	ldr	r1, [r7, #8]
 8011092:	4618      	mov	r0, r3
 8011094:	f7f4 fc62 	bl	800595c <HAL_SPI_Transmit_IT>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d123      	bne.n	80110e6 <drv_spiTransmitIT+0xa2>
        {
            if (triggerTmo > 0u)
 801109e:	6a3b      	ldr	r3, [r7, #32]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d01e      	beq.n	80110e2 <drv_spiTransmitIT+0x9e>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80110a4:	7bfa      	ldrb	r2, [r7, #15]
 80110a6:	4613      	mov	r3, r2
 80110a8:	005b      	lsls	r3, r3, #1
 80110aa:	4413      	add	r3, r2
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	4a16      	ldr	r2, [pc, #88]	@ (8011108 <drv_spiTransmitIT+0xc4>)
 80110b0:	4413      	add	r3, r2
 80110b2:	6a3a      	ldr	r2, [r7, #32]
 80110b4:	2101      	movs	r1, #1
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fd f954 	bl	800e364 <gos_triggerWait>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b55      	cmp	r3, #85	@ 0x55
 80110c0:	d111      	bne.n	80110e6 <drv_spiTransmitIT+0xa2>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 80110c2:	7bfa      	ldrb	r2, [r7, #15]
 80110c4:	4613      	mov	r3, r2
 80110c6:	005b      	lsls	r3, r3, #1
 80110c8:	4413      	add	r3, r2
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	4a0e      	ldr	r2, [pc, #56]	@ (8011108 <drv_spiTransmitIT+0xc4>)
 80110ce:	4413      	add	r3, r2
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fd f8ef 	bl	800e2b4 <gos_triggerReset>
 80110d6:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80110d8:	2b55      	cmp	r3, #85	@ 0x55
 80110da:	d104      	bne.n	80110e6 <drv_spiTransmitIT+0xa2>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 80110dc:	2355      	movs	r3, #85	@ 0x55
 80110de:	75fb      	strb	r3, [r7, #23]
 80110e0:	e001      	b.n	80110e6 <drv_spiTransmitIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 80110e2:	2355      	movs	r3, #85	@ 0x55
 80110e4:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 80110e6:	7bfb      	ldrb	r3, [r7, #15]
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4a05      	ldr	r2, [pc, #20]	@ (8011100 <drv_spiTransmitIT+0xbc>)
 80110ec:	4413      	add	r3, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fb fdc6 	bl	800cc80 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 80110f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3718      	adds	r7, #24
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20004624 	.word	0x20004624
 8011104:	200044c4 	.word	0x200044c4
 8011108:	20004664 	.word	0x20004664

0801110c <drv_spiReceiveIT>:
 */
gos_result_t drv_spiReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60b9      	str	r1, [r7, #8]
 8011114:	607b      	str	r3, [r7, #4]
 8011116:	4603      	mov	r3, r0
 8011118:	73fb      	strb	r3, [r7, #15]
 801111a:	4613      	mov	r3, r2
 801111c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverReceiveResult = GOS_ERROR;
 801111e:	23ae      	movs	r3, #174	@ 0xae
 8011120:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8011122:	7bfb      	ldrb	r3, [r7, #15]
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4a28      	ldr	r2, [pc, #160]	@ (80111c8 <drv_spiReceiveIT+0xbc>)
 8011128:	4413      	add	r3, r2
 801112a:	6879      	ldr	r1, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	f7fb fca1 	bl	800ca74 <gos_mutexLock>
 8011132:	4603      	mov	r3, r0
 8011134:	2b55      	cmp	r3, #85	@ 0x55
 8011136:	d13a      	bne.n	80111ae <drv_spiReceiveIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 8011138:	7bfb      	ldrb	r3, [r7, #15]
 801113a:	2258      	movs	r2, #88	@ 0x58
 801113c:	fb02 f303 	mul.w	r3, r2, r3
 8011140:	4a22      	ldr	r2, [pc, #136]	@ (80111cc <drv_spiReceiveIT+0xc0>)
 8011142:	4413      	add	r3, r2
 8011144:	4618      	mov	r0, r3
 8011146:	f7f4 fdb5 	bl	8005cb4 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Receive_IT(&hspis[instance], pBuffer, size) == HAL_OK)
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	2258      	movs	r2, #88	@ 0x58
 801114e:	fb02 f303 	mul.w	r3, r2, r3
 8011152:	4a1e      	ldr	r2, [pc, #120]	@ (80111cc <drv_spiReceiveIT+0xc0>)
 8011154:	4413      	add	r3, r2
 8011156:	89ba      	ldrh	r2, [r7, #12]
 8011158:	68b9      	ldr	r1, [r7, #8]
 801115a:	4618      	mov	r0, r3
 801115c:	f7f4 fc80 	bl	8005a60 <HAL_SPI_Receive_IT>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d123      	bne.n	80111ae <drv_spiReceiveIT+0xa2>
        {
            if (triggerTmo > 0u)
 8011166:	6a3b      	ldr	r3, [r7, #32]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d01e      	beq.n	80111aa <drv_spiReceiveIT+0x9e>
            {
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 801116c:	7bfa      	ldrb	r2, [r7, #15]
 801116e:	4613      	mov	r3, r2
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	4413      	add	r3, r2
 8011174:	009b      	lsls	r3, r3, #2
 8011176:	4a16      	ldr	r2, [pc, #88]	@ (80111d0 <drv_spiReceiveIT+0xc4>)
 8011178:	4413      	add	r3, r2
 801117a:	6a3a      	ldr	r2, [r7, #32]
 801117c:	2101      	movs	r1, #1
 801117e:	4618      	mov	r0, r3
 8011180:	f7fd f8f0 	bl	800e364 <gos_triggerWait>
 8011184:	4603      	mov	r3, r0
 8011186:	2b55      	cmp	r3, #85	@ 0x55
 8011188:	d111      	bne.n	80111ae <drv_spiReceiveIT+0xa2>
                    gos_triggerReset(&spiRxReadyTriggers[instance])                == GOS_SUCCESS)
 801118a:	7bfa      	ldrb	r2, [r7, #15]
 801118c:	4613      	mov	r3, r2
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	4413      	add	r3, r2
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	4a0e      	ldr	r2, [pc, #56]	@ (80111d0 <drv_spiReceiveIT+0xc4>)
 8011196:	4413      	add	r3, r2
 8011198:	4618      	mov	r0, r3
 801119a:	f7fd f88b 	bl	800e2b4 <gos_triggerReset>
 801119e:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80111a0:	2b55      	cmp	r3, #85	@ 0x55
 80111a2:	d104      	bne.n	80111ae <drv_spiReceiveIT+0xa2>
                {
                    spiDriverReceiveResult = GOS_SUCCESS;
 80111a4:	2355      	movs	r3, #85	@ 0x55
 80111a6:	75fb      	strb	r3, [r7, #23]
 80111a8:	e001      	b.n	80111ae <drv_spiReceiveIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverReceiveResult = GOS_SUCCESS;
 80111aa:	2355      	movs	r3, #85	@ 0x55
 80111ac:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 80111ae:	7bfb      	ldrb	r3, [r7, #15]
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	4a05      	ldr	r2, [pc, #20]	@ (80111c8 <drv_spiReceiveIT+0xbc>)
 80111b4:	4413      	add	r3, r2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fb fd62 	bl	800cc80 <gos_mutexUnlock>

    return spiDriverReceiveResult;
 80111bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3718      	adds	r7, #24
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	20004624 	.word	0x20004624
 80111cc:	200044c4 	.word	0x200044c4
 80111d0:	20004634 	.word	0x20004634

080111d4 <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011220 <HAL_SPI_TxCpltCallback+0x4c>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d103      	bne.n	80111f0 <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 80111e8:	480e      	ldr	r0, [pc, #56]	@ (8011224 <HAL_SPI_TxCpltCallback+0x50>)
 80111ea:	f7fd f96b 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 80111ee:	e012      	b.n	8011216 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	4b0a      	ldr	r3, [pc, #40]	@ (8011220 <HAL_SPI_TxCpltCallback+0x4c>)
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d103      	bne.n	8011204 <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 80111fc:	480a      	ldr	r0, [pc, #40]	@ (8011228 <HAL_SPI_TxCpltCallback+0x54>)
 80111fe:	f7fd f961 	bl	800e4c4 <gos_triggerIncrement>
}
 8011202:	e008      	b.n	8011216 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	4b05      	ldr	r3, [pc, #20]	@ (8011220 <HAL_SPI_TxCpltCallback+0x4c>)
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	429a      	cmp	r2, r3
 801120e:	d102      	bne.n	8011216 <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 8011210:	4806      	ldr	r0, [pc, #24]	@ (801122c <HAL_SPI_TxCpltCallback+0x58>)
 8011212:	f7fd f957 	bl	800e4c4 <gos_triggerIncrement>
}
 8011216:	bf00      	nop
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	20000eac 	.word	0x20000eac
 8011224:	20004664 	.word	0x20004664
 8011228:	20004670 	.word	0x20004670
 801122c:	2000467c 	.word	0x2000467c

08011230 <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	4b0f      	ldr	r3, [pc, #60]	@ (801127c <HAL_SPI_RxCpltCallback+0x4c>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	429a      	cmp	r2, r3
 8011242:	d103      	bne.n	801124c <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 8011244:	480e      	ldr	r0, [pc, #56]	@ (8011280 <HAL_SPI_RxCpltCallback+0x50>)
 8011246:	f7fd f93d 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 801124a:	e012      	b.n	8011272 <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	4b0a      	ldr	r3, [pc, #40]	@ (801127c <HAL_SPI_RxCpltCallback+0x4c>)
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	429a      	cmp	r2, r3
 8011256:	d103      	bne.n	8011260 <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 8011258:	480a      	ldr	r0, [pc, #40]	@ (8011284 <HAL_SPI_RxCpltCallback+0x54>)
 801125a:	f7fd f933 	bl	800e4c4 <gos_triggerIncrement>
}
 801125e:	e008      	b.n	8011272 <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	4b05      	ldr	r3, [pc, #20]	@ (801127c <HAL_SPI_RxCpltCallback+0x4c>)
 8011266:	689b      	ldr	r3, [r3, #8]
 8011268:	429a      	cmp	r2, r3
 801126a:	d102      	bne.n	8011272 <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 801126c:	4806      	ldr	r0, [pc, #24]	@ (8011288 <HAL_SPI_RxCpltCallback+0x58>)
 801126e:	f7fd f929 	bl	800e4c4 <gos_triggerIncrement>
}
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	20000eac 	.word	0x20000eac
 8011280:	20004634 	.word	0x20004634
 8011284:	20004640 	.word	0x20004640
 8011288:	2000464c 	.word	0x2000464c

0801128c <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	4b0f      	ldr	r3, [pc, #60]	@ (80112d8 <HAL_SPI_TxRxCpltCallback+0x4c>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	429a      	cmp	r2, r3
 801129e:	d103      	bne.n	80112a8 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 80112a0:	480e      	ldr	r0, [pc, #56]	@ (80112dc <HAL_SPI_TxRxCpltCallback+0x50>)
 80112a2:	f7fd f90f 	bl	800e4c4 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 80112a6:	e012      	b.n	80112ce <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	4b0a      	ldr	r3, [pc, #40]	@ (80112d8 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d103      	bne.n	80112bc <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 80112b4:	480a      	ldr	r0, [pc, #40]	@ (80112e0 <HAL_SPI_TxRxCpltCallback+0x54>)
 80112b6:	f7fd f905 	bl	800e4c4 <gos_triggerIncrement>
}
 80112ba:	e008      	b.n	80112ce <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	4b05      	ldr	r3, [pc, #20]	@ (80112d8 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d102      	bne.n	80112ce <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 80112c8:	4806      	ldr	r0, [pc, #24]	@ (80112e4 <HAL_SPI_TxRxCpltCallback+0x58>)
 80112ca:	f7fd f8fb 	bl	800e4c4 <gos_triggerIncrement>
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	20000eac 	.word	0x20000eac
 80112dc:	20004694 	.word	0x20004694
 80112e0:	200046a0 	.word	0x200046a0
 80112e4:	200046ac 	.word	0x200046ac

080112e8 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80112ec:	4b16      	ldr	r3, [pc, #88]	@ (8011348 <SPI1_IRQHandler+0x60>)
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d105      	bne.n	8011300 <SPI1_IRQHandler+0x18>
 80112f4:	4b15      	ldr	r3, [pc, #84]	@ (801134c <SPI1_IRQHandler+0x64>)
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	3301      	adds	r3, #1
 80112fa:	b2da      	uxtb	r2, r3
 80112fc:	4b13      	ldr	r3, [pc, #76]	@ (801134c <SPI1_IRQHandler+0x64>)
 80112fe:	701a      	strb	r2, [r3, #0]
 8011300:	4b11      	ldr	r3, [pc, #68]	@ (8011348 <SPI1_IRQHandler+0x60>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	3301      	adds	r3, #1
 8011306:	b2da      	uxtb	r2, r3
 8011308:	4b0f      	ldr	r3, [pc, #60]	@ (8011348 <SPI1_IRQHandler+0x60>)
 801130a:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 801130c:	4810      	ldr	r0, [pc, #64]	@ (8011350 <SPI1_IRQHandler+0x68>)
 801130e:	f7f4 fdcb 	bl	8005ea8 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 8011312:	4b0d      	ldr	r3, [pc, #52]	@ (8011348 <SPI1_IRQHandler+0x60>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d005      	beq.n	8011326 <SPI1_IRQHandler+0x3e>
 801131a:	4b0b      	ldr	r3, [pc, #44]	@ (8011348 <SPI1_IRQHandler+0x60>)
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	3b01      	subs	r3, #1
 8011320:	b2da      	uxtb	r2, r3
 8011322:	4b09      	ldr	r3, [pc, #36]	@ (8011348 <SPI1_IRQHandler+0x60>)
 8011324:	701a      	strb	r2, [r3, #0]
 8011326:	4b08      	ldr	r3, [pc, #32]	@ (8011348 <SPI1_IRQHandler+0x60>)
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <SPI1_IRQHandler+0x5a>
 801132e:	4b07      	ldr	r3, [pc, #28]	@ (801134c <SPI1_IRQHandler+0x64>)
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d005      	beq.n	8011342 <SPI1_IRQHandler+0x5a>
 8011336:	4b05      	ldr	r3, [pc, #20]	@ (801134c <SPI1_IRQHandler+0x64>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	3b01      	subs	r3, #1
 801133c:	b2da      	uxtb	r2, r3
 801133e:	4b03      	ldr	r3, [pc, #12]	@ (801134c <SPI1_IRQHandler+0x64>)
 8011340:	701a      	strb	r2, [r3, #0]
}
 8011342:	bf00      	nop
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	20001962 	.word	0x20001962
 801134c:	20001961 	.word	0x20001961
 8011350:	200044c4 	.word	0x200044c4

08011354 <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011358:	4b16      	ldr	r3, [pc, #88]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d105      	bne.n	801136c <SPI2_IRQHandler+0x18>
 8011360:	4b15      	ldr	r3, [pc, #84]	@ (80113b8 <SPI2_IRQHandler+0x64>)
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	3301      	adds	r3, #1
 8011366:	b2da      	uxtb	r2, r3
 8011368:	4b13      	ldr	r3, [pc, #76]	@ (80113b8 <SPI2_IRQHandler+0x64>)
 801136a:	701a      	strb	r2, [r3, #0]
 801136c:	4b11      	ldr	r3, [pc, #68]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	3301      	adds	r3, #1
 8011372:	b2da      	uxtb	r2, r3
 8011374:	4b0f      	ldr	r3, [pc, #60]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 8011376:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 8011378:	4810      	ldr	r0, [pc, #64]	@ (80113bc <SPI2_IRQHandler+0x68>)
 801137a:	f7f4 fd95 	bl	8005ea8 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 801137e:	4b0d      	ldr	r3, [pc, #52]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d005      	beq.n	8011392 <SPI2_IRQHandler+0x3e>
 8011386:	4b0b      	ldr	r3, [pc, #44]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	3b01      	subs	r3, #1
 801138c:	b2da      	uxtb	r2, r3
 801138e:	4b09      	ldr	r3, [pc, #36]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 8011390:	701a      	strb	r2, [r3, #0]
 8011392:	4b08      	ldr	r3, [pc, #32]	@ (80113b4 <SPI2_IRQHandler+0x60>)
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d109      	bne.n	80113ae <SPI2_IRQHandler+0x5a>
 801139a:	4b07      	ldr	r3, [pc, #28]	@ (80113b8 <SPI2_IRQHandler+0x64>)
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d005      	beq.n	80113ae <SPI2_IRQHandler+0x5a>
 80113a2:	4b05      	ldr	r3, [pc, #20]	@ (80113b8 <SPI2_IRQHandler+0x64>)
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	3b01      	subs	r3, #1
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	4b03      	ldr	r3, [pc, #12]	@ (80113b8 <SPI2_IRQHandler+0x64>)
 80113ac:	701a      	strb	r2, [r3, #0]
}
 80113ae:	bf00      	nop
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	20001962 	.word	0x20001962
 80113b8:	20001961 	.word	0x20001961
 80113bc:	2000451c 	.word	0x2000451c

080113c0 <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80113c4:	4b16      	ldr	r3, [pc, #88]	@ (8011420 <SPI3_IRQHandler+0x60>)
 80113c6:	781b      	ldrb	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d105      	bne.n	80113d8 <SPI3_IRQHandler+0x18>
 80113cc:	4b15      	ldr	r3, [pc, #84]	@ (8011424 <SPI3_IRQHandler+0x64>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	3301      	adds	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	4b13      	ldr	r3, [pc, #76]	@ (8011424 <SPI3_IRQHandler+0x64>)
 80113d6:	701a      	strb	r2, [r3, #0]
 80113d8:	4b11      	ldr	r3, [pc, #68]	@ (8011420 <SPI3_IRQHandler+0x60>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	3301      	adds	r3, #1
 80113de:	b2da      	uxtb	r2, r3
 80113e0:	4b0f      	ldr	r3, [pc, #60]	@ (8011420 <SPI3_IRQHandler+0x60>)
 80113e2:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 80113e4:	4810      	ldr	r0, [pc, #64]	@ (8011428 <SPI3_IRQHandler+0x68>)
 80113e6:	f7f4 fd5f 	bl	8005ea8 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 80113ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011420 <SPI3_IRQHandler+0x60>)
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d005      	beq.n	80113fe <SPI3_IRQHandler+0x3e>
 80113f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011420 <SPI3_IRQHandler+0x60>)
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	4b09      	ldr	r3, [pc, #36]	@ (8011420 <SPI3_IRQHandler+0x60>)
 80113fc:	701a      	strb	r2, [r3, #0]
 80113fe:	4b08      	ldr	r3, [pc, #32]	@ (8011420 <SPI3_IRQHandler+0x60>)
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d109      	bne.n	801141a <SPI3_IRQHandler+0x5a>
 8011406:	4b07      	ldr	r3, [pc, #28]	@ (8011424 <SPI3_IRQHandler+0x64>)
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d005      	beq.n	801141a <SPI3_IRQHandler+0x5a>
 801140e:	4b05      	ldr	r3, [pc, #20]	@ (8011424 <SPI3_IRQHandler+0x64>)
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	3b01      	subs	r3, #1
 8011414:	b2da      	uxtb	r2, r3
 8011416:	4b03      	ldr	r3, [pc, #12]	@ (8011424 <SPI3_IRQHandler+0x64>)
 8011418:	701a      	strb	r2, [r3, #0]
}
 801141a:	bf00      	nop
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	20001962 	.word	0x20001962
 8011424:	20001961 	.word	0x20001961
 8011428:	20004574 	.word	0x20004574

0801142c <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011430:	4b16      	ldr	r3, [pc, #88]	@ (801148c <SPI4_IRQHandler+0x60>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d105      	bne.n	8011444 <SPI4_IRQHandler+0x18>
 8011438:	4b15      	ldr	r3, [pc, #84]	@ (8011490 <SPI4_IRQHandler+0x64>)
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	3301      	adds	r3, #1
 801143e:	b2da      	uxtb	r2, r3
 8011440:	4b13      	ldr	r3, [pc, #76]	@ (8011490 <SPI4_IRQHandler+0x64>)
 8011442:	701a      	strb	r2, [r3, #0]
 8011444:	4b11      	ldr	r3, [pc, #68]	@ (801148c <SPI4_IRQHandler+0x60>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	3301      	adds	r3, #1
 801144a:	b2da      	uxtb	r2, r3
 801144c:	4b0f      	ldr	r3, [pc, #60]	@ (801148c <SPI4_IRQHandler+0x60>)
 801144e:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 8011450:	4810      	ldr	r0, [pc, #64]	@ (8011494 <SPI4_IRQHandler+0x68>)
 8011452:	f7f4 fd29 	bl	8005ea8 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 8011456:	4b0d      	ldr	r3, [pc, #52]	@ (801148c <SPI4_IRQHandler+0x60>)
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d005      	beq.n	801146a <SPI4_IRQHandler+0x3e>
 801145e:	4b0b      	ldr	r3, [pc, #44]	@ (801148c <SPI4_IRQHandler+0x60>)
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	3b01      	subs	r3, #1
 8011464:	b2da      	uxtb	r2, r3
 8011466:	4b09      	ldr	r3, [pc, #36]	@ (801148c <SPI4_IRQHandler+0x60>)
 8011468:	701a      	strb	r2, [r3, #0]
 801146a:	4b08      	ldr	r3, [pc, #32]	@ (801148c <SPI4_IRQHandler+0x60>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d109      	bne.n	8011486 <SPI4_IRQHandler+0x5a>
 8011472:	4b07      	ldr	r3, [pc, #28]	@ (8011490 <SPI4_IRQHandler+0x64>)
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d005      	beq.n	8011486 <SPI4_IRQHandler+0x5a>
 801147a:	4b05      	ldr	r3, [pc, #20]	@ (8011490 <SPI4_IRQHandler+0x64>)
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	3b01      	subs	r3, #1
 8011480:	b2da      	uxtb	r2, r3
 8011482:	4b03      	ldr	r3, [pc, #12]	@ (8011490 <SPI4_IRQHandler+0x64>)
 8011484:	701a      	strb	r2, [r3, #0]
}
 8011486:	bf00      	nop
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20001962 	.word	0x20001962
 8011490:	20001961 	.word	0x20001961
 8011494:	200045cc 	.word	0x200045cc

08011498 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 8011498:	b480      	push	{r7}
 801149a:	b085      	sub	sp, #20
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 80114a0:	2300      	movs	r3, #0
 80114a2:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 80114a4:	2300      	movs	r3, #0
 80114a6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 80114a8:	2300      	movs	r3, #0
 80114aa:	73fb      	strb	r3, [r7, #15]
 80114ac:	e068      	b.n	8011580 <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 80114ae:	7bfb      	ldrb	r3, [r7, #15]
 80114b0:	4a38      	ldr	r2, [pc, #224]	@ (8011594 <HAL_SPI_MspInit+0xfc>)
 80114b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d15d      	bne.n	801157a <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 80114be:	2300      	movs	r3, #0
 80114c0:	73bb      	strb	r3, [r7, #14]
 80114c2:	e051      	b.n	8011568 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 80114c4:	7bba      	ldrb	r2, [r7, #14]
 80114c6:	4934      	ldr	r1, [pc, #208]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 80114c8:	4613      	mov	r3, r2
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	1a9b      	subs	r3, r3, r2
 80114ce:	00db      	lsls	r3, r3, #3
 80114d0:	440b      	add	r3, r1
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	7bfa      	ldrb	r2, [r7, #15]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d143      	bne.n	8011562 <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 80114da:	7bba      	ldrb	r2, [r7, #14]
 80114dc:	492e      	ldr	r1, [pc, #184]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 80114de:	4613      	mov	r3, r2
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	1a9b      	subs	r3, r3, r2
 80114e4:	00db      	lsls	r3, r3, #3
 80114e6:	440b      	add	r3, r1
 80114e8:	3330      	adds	r3, #48	@ 0x30
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d016      	beq.n	801151e <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 80114f0:	7bba      	ldrb	r2, [r7, #14]
 80114f2:	4929      	ldr	r1, [pc, #164]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 80114f4:	4613      	mov	r3, r2
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	1a9b      	subs	r3, r3, r2
 80114fa:	00db      	lsls	r3, r3, #3
 80114fc:	440b      	add	r3, r1
 80114fe:	3330      	adds	r3, #48	@ 0x30
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	1d1a      	adds	r2, r3, #4
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011508:	7bba      	ldrb	r2, [r7, #14]
 801150a:	4923      	ldr	r1, [pc, #140]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 801150c:	4613      	mov	r3, r2
 801150e:	00db      	lsls	r3, r3, #3
 8011510:	1a9b      	subs	r3, r3, r2
 8011512:	00db      	lsls	r3, r3, #3
 8011514:	440b      	add	r3, r1
 8011516:	3330      	adds	r3, #48	@ 0x30
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 801151e:	7bba      	ldrb	r2, [r7, #14]
 8011520:	491d      	ldr	r1, [pc, #116]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 8011522:	4613      	mov	r3, r2
 8011524:	00db      	lsls	r3, r3, #3
 8011526:	1a9b      	subs	r3, r3, r2
 8011528:	00db      	lsls	r3, r3, #3
 801152a:	440b      	add	r3, r1
 801152c:	3334      	adds	r3, #52	@ 0x34
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d016      	beq.n	8011562 <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 8011534:	7bba      	ldrb	r2, [r7, #14]
 8011536:	4918      	ldr	r1, [pc, #96]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 8011538:	4613      	mov	r3, r2
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	1a9b      	subs	r3, r3, r2
 801153e:	00db      	lsls	r3, r3, #3
 8011540:	440b      	add	r3, r1
 8011542:	3334      	adds	r3, #52	@ 0x34
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	1d1a      	adds	r2, r3, #4
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	649a      	str	r2, [r3, #72]	@ 0x48
 801154c:	7bba      	ldrb	r2, [r7, #14]
 801154e:	4912      	ldr	r1, [pc, #72]	@ (8011598 <HAL_SPI_MspInit+0x100>)
 8011550:	4613      	mov	r3, r2
 8011552:	00db      	lsls	r3, r3, #3
 8011554:	1a9b      	subs	r3, r3, r2
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	440b      	add	r3, r1
 801155a:	3334      	adds	r3, #52	@ 0x34
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 8011562:	7bbb      	ldrb	r3, [r7, #14]
 8011564:	3301      	adds	r3, #1
 8011566:	73bb      	strb	r3, [r7, #14]
 8011568:	7bbb      	ldrb	r3, [r7, #14]
 801156a:	4a0c      	ldr	r2, [pc, #48]	@ (801159c <HAL_SPI_MspInit+0x104>)
 801156c:	6812      	ldr	r2, [r2, #0]
 801156e:	08d2      	lsrs	r2, r2, #3
 8011570:	490b      	ldr	r1, [pc, #44]	@ (80115a0 <HAL_SPI_MspInit+0x108>)
 8011572:	fba1 1202 	umull	r1, r2, r1, r2
 8011576:	4293      	cmp	r3, r2
 8011578:	d3a4      	bcc.n	80114c4 <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 801157a:	7bfb      	ldrb	r3, [r7, #15]
 801157c:	3301      	adds	r3, #1
 801157e:	73fb      	strb	r3, [r7, #15]
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	2b03      	cmp	r3, #3
 8011584:	d993      	bls.n	80114ae <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8011586:	bf00      	nop
 8011588:	bf00      	nop
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr
 8011594:	20000eac 	.word	0x20000eac
 8011598:	0801a5f8 	.word	0x0801a5f8
 801159c:	20000358 	.word	0x20000358
 80115a0:	24924925 	.word	0x24924925

080115a4 <drv_sysmonWiredTransmit>:

/*
 * Function: drv_sysmonWiredTransmit
 */
GOS_INLINE gos_result_t drv_sysmonWiredTransmit (u8_t* pData, u16_t size)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b086      	sub	sp, #24
 80115a8:	af02      	add	r7, sp, #8
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	460b      	mov	r3, r1
 80115ae:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 80115b0:	23ae      	movs	r3, #174	@ 0xae
 80115b2:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 80115b4:	2300      	movs	r3, #0
 80115b6:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_WIRED_INSTANCE];
 80115b8:	4b0a      	ldr	r3, [pc, #40]	@ (80115e4 <drv_sysmonWiredTransmit+0x40>)
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 80115be:	4b0a      	ldr	r3, [pc, #40]	@ (80115e8 <drv_sysmonWiredTransmit+0x44>)
 80115c0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80115c2:	4b09      	ldr	r3, [pc, #36]	@ (80115e8 <drv_sysmonWiredTransmit+0x44>)
 80115c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115c6:	887a      	ldrh	r2, [r7, #2]
 80115c8:	7bb8      	ldrb	r0, [r7, #14]
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	460b      	mov	r3, r1
 80115ce:	6879      	ldr	r1, [r7, #4]
 80115d0:	f000 ff2a 	bl	8012428 <drv_uartTransmitIT>
 80115d4:	4603      	mov	r3, r0
 80115d6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 80115d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	0801a6c4 	.word	0x0801a6c4
 80115e8:	200003c8 	.word	0x200003c8

080115ec <drv_sysmonWiredReceive>:

/*
 * Function: drv_sysmonWiredReceive
 */
GOS_INLINE gos_result_t drv_sysmonWiredReceive (u8_t* pBuffer, u16_t size)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af02      	add	r7, sp, #8
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 80115f8:	23ae      	movs	r3, #174	@ 0xae
 80115fa:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 80115fc:	2300      	movs	r3, #0
 80115fe:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_WIRED_INSTANCE];
 8011600:	4b0a      	ldr	r3, [pc, #40]	@ (801162c <drv_sysmonWiredReceive+0x40>)
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 8011606:	4b0a      	ldr	r3, [pc, #40]	@ (8011630 <drv_sysmonWiredReceive+0x44>)
 8011608:	69d9      	ldr	r1, [r3, #28]
 801160a:	4b09      	ldr	r3, [pc, #36]	@ (8011630 <drv_sysmonWiredReceive+0x44>)
 801160c:	6a1b      	ldr	r3, [r3, #32]
 801160e:	887a      	ldrh	r2, [r7, #2]
 8011610:	7bb8      	ldrb	r0, [r7, #14]
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	460b      	mov	r3, r1
 8011616:	6879      	ldr	r1, [r7, #4]
 8011618:	f000 fe96 	bl	8012348 <drv_uartReceiveDMA>
 801161c:	4603      	mov	r3, r0
 801161e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 8011620:	7bfb      	ldrb	r3, [r7, #15]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	0801a6c4 	.word	0x0801a6c4
 8011630:	200003c8 	.word	0x200003c8

08011634 <drv_sysmonWirelessTransmit>:

/*
 * Function: drv_sysmonWirelessTransmit
 */
GOS_INLINE gos_result_t drv_sysmonWirelessTransmit (u8_t* pData, u16_t size)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b086      	sub	sp, #24
 8011638:	af02      	add	r7, sp, #8
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	460b      	mov	r3, r1
 801163e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8011640:	23ae      	movs	r3, #174	@ 0xae
 8011642:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8011644:	2300      	movs	r3, #0
 8011646:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_WIRELESS_INSTANCE];
 8011648:	4b0a      	ldr	r3, [pc, #40]	@ (8011674 <drv_sysmonWirelessTransmit+0x40>)
 801164a:	785b      	ldrb	r3, [r3, #1]
 801164c:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 801164e:	4b0a      	ldr	r3, [pc, #40]	@ (8011678 <drv_sysmonWirelessTransmit+0x44>)
 8011650:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011652:	4b09      	ldr	r3, [pc, #36]	@ (8011678 <drv_sysmonWirelessTransmit+0x44>)
 8011654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011656:	887a      	ldrh	r2, [r7, #2]
 8011658:	7bb8      	ldrb	r0, [r7, #14]
 801165a:	9300      	str	r3, [sp, #0]
 801165c:	460b      	mov	r3, r1
 801165e:	6879      	ldr	r1, [r7, #4]
 8011660:	f000 fee2 	bl	8012428 <drv_uartTransmitIT>
 8011664:	4603      	mov	r3, r0
 8011666:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8011668:	7bfb      	ldrb	r3, [r7, #15]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	0801a6c4 	.word	0x0801a6c4
 8011678:	200003c8 	.word	0x200003c8

0801167c <drv_sysmonWirelessReceive>:

/*
 * Function: drv_sysmonWirelessReceive
 */
GOS_INLINE gos_result_t drv_sysmonWirelessReceive (u8_t* pBuffer, u16_t size)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b086      	sub	sp, #24
 8011680:	af02      	add	r7, sp, #8
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	460b      	mov	r3, r1
 8011686:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 8011688:	23ae      	movs	r3, #174	@ 0xae
 801168a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 801168c:	2300      	movs	r3, #0
 801168e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_WIRELESS_INSTANCE];
 8011690:	4b0a      	ldr	r3, [pc, #40]	@ (80116bc <drv_sysmonWirelessReceive+0x40>)
 8011692:	785b      	ldrb	r3, [r3, #1]
 8011694:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 8011696:	4b0a      	ldr	r3, [pc, #40]	@ (80116c0 <drv_sysmonWirelessReceive+0x44>)
 8011698:	69d9      	ldr	r1, [r3, #28]
 801169a:	4b09      	ldr	r3, [pc, #36]	@ (80116c0 <drv_sysmonWirelessReceive+0x44>)
 801169c:	6a1b      	ldr	r3, [r3, #32]
 801169e:	887a      	ldrh	r2, [r7, #2]
 80116a0:	7bb8      	ldrb	r0, [r7, #14]
 80116a2:	9300      	str	r3, [sp, #0]
 80116a4:	460b      	mov	r3, r1
 80116a6:	6879      	ldr	r1, [r7, #4]
 80116a8:	f000 fe4e 	bl	8012348 <drv_uartReceiveDMA>
 80116ac:	4603      	mov	r3, r0
 80116ae:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 80116b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3710      	adds	r7, #16
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	0801a6c4 	.word	0x0801a6c4
 80116c0:	200003c8 	.word	0x200003c8

080116c4 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 80116ca:	23ae      	movs	r3, #174	@ 0xae
 80116cc:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 80116ce:	2300      	movs	r3, #0
 80116d0:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 80116d2:	4b08      	ldr	r3, [pc, #32]	@ (80116f4 <drv_systimerStart+0x30>)
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 80116d8:	79bb      	ldrb	r3, [r7, #6]
 80116da:	f04f 31ff 	mov.w	r1, #4294967295
 80116de:	4618      	mov	r0, r3
 80116e0:	f000 f9a2 	bl	8011a28 <drv_tmrStart>
 80116e4:	4603      	mov	r3, r0
 80116e6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 80116e8:	79fb      	ldrb	r3, [r7, #7]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	0801a648 	.word	0x0801a648

080116f8 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 8011700:	23ae      	movs	r3, #174	@ 0xae
 8011702:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 8011704:	2300      	movs	r3, #0
 8011706:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 8011708:	2300      	movs	r3, #0
 801170a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00f      	beq.n	8011732 <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8011712:	4b0a      	ldr	r3, [pc, #40]	@ (801173c <drv_systimerGetValue+0x44>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 8011718:	f107 0208 	add.w	r2, r7, #8
 801171c:	7bbb      	ldrb	r3, [r7, #14]
 801171e:	4611      	mov	r1, r2
 8011720:	4618      	mov	r0, r3
 8011722:	f000 f9b3 	bl	8011a8c <drv_tmrGetValue>
 8011726:	4603      	mov	r3, r0
 8011728:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	b29a      	uxth	r2, r3
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 8011732:	7bfb      	ldrb	r3, [r7, #15]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	0801a648 	.word	0x0801a648

08011740 <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 8011746:	2355      	movs	r3, #85	@ 0x55
 8011748:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 801174a:	2300      	movs	r3, #0
 801174c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 801174e:	2300      	movs	r3, #0
 8011750:	71bb      	strb	r3, [r7, #6]
 8011752:	e00e      	b.n	8011772 <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 8011754:	79fb      	ldrb	r3, [r7, #7]
 8011756:	2b55      	cmp	r3, #85	@ 0x55
 8011758:	d106      	bne.n	8011768 <drv_tmrInit+0x28>
 801175a:	79bb      	ldrb	r3, [r7, #6]
 801175c:	4618      	mov	r0, r3
 801175e:	f000 f81b 	bl	8011798 <drv_tmrInitInstance>
 8011762:	4603      	mov	r3, r0
 8011764:	71fb      	strb	r3, [r7, #7]
 8011766:	e001      	b.n	801176c <drv_tmrInit+0x2c>
 8011768:	23ae      	movs	r3, #174	@ 0xae
 801176a:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 801176c:	79bb      	ldrb	r3, [r7, #6]
 801176e:	3301      	adds	r3, #1
 8011770:	71bb      	strb	r3, [r7, #6]
 8011772:	79ba      	ldrb	r2, [r7, #6]
 8011774:	4b06      	ldr	r3, [pc, #24]	@ (8011790 <drv_tmrInit+0x50>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4906      	ldr	r1, [pc, #24]	@ (8011794 <drv_tmrInit+0x54>)
 801177a:	fba1 1303 	umull	r1, r3, r1, r3
 801177e:	091b      	lsrs	r3, r3, #4
 8011780:	429a      	cmp	r2, r3
 8011782:	d3e7      	bcc.n	8011754 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 8011784:	79fb      	ldrb	r3, [r7, #7]
}
 8011786:	4618      	mov	r0, r3
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	200003c4 	.word	0x200003c4
 8011794:	4ec4ec4f 	.word	0x4ec4ec4f

08011798 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b08a      	sub	sp, #40	@ 0x28
 801179c:	af00      	add	r7, sp, #0
 801179e:	4603      	mov	r3, r0
 80117a0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 80117a2:	23ae      	movs	r3, #174	@ 0xae
 80117a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 80117a8:	2300      	movs	r3, #0
 80117aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 80117ae:	f107 031c 	add.w	r3, r7, #28
 80117b2:	2200      	movs	r2, #0
 80117b4:	601a      	str	r2, [r3, #0]
 80117b6:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 80117b8:	f107 030c 	add.w	r3, r7, #12
 80117bc:	2200      	movs	r2, #0
 80117be:	601a      	str	r2, [r3, #0]
 80117c0:	605a      	str	r2, [r3, #4]
 80117c2:	609a      	str	r2, [r3, #8]
 80117c4:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 80117c6:	79fa      	ldrb	r2, [r7, #7]
 80117c8:	4b90      	ldr	r3, [pc, #576]	@ (8011a0c <drv_tmrInitInstance+0x274>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4990      	ldr	r1, [pc, #576]	@ (8011a10 <drv_tmrInitInstance+0x278>)
 80117ce:	fba1 1303 	umull	r1, r3, r1, r3
 80117d2:	091b      	lsrs	r3, r3, #4
 80117d4:	429a      	cmp	r2, r3
 80117d6:	f080 8112 	bcs.w	80119fe <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 80117da:	79fb      	ldrb	r3, [r7, #7]
 80117dc:	4a8d      	ldr	r2, [pc, #564]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 80117de:	2134      	movs	r1, #52	@ 0x34
 80117e0:	fb01 f303 	mul.w	r3, r1, r3
 80117e4:	4413      	add	r3, r2
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 80117ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80117f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80117f4:	4988      	ldr	r1, [pc, #544]	@ (8011a18 <drv_tmrInitInstance+0x280>)
 80117f6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80117fa:	4888      	ldr	r0, [pc, #544]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 80117fc:	4613      	mov	r3, r2
 80117fe:	00db      	lsls	r3, r3, #3
 8011800:	4413      	add	r3, r2
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	4403      	add	r3, r0
 8011806:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 8011808:	79fb      	ldrb	r3, [r7, #7]
 801180a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801180e:	4981      	ldr	r1, [pc, #516]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 8011810:	2034      	movs	r0, #52	@ 0x34
 8011812:	fb00 f303 	mul.w	r3, r0, r3
 8011816:	440b      	add	r3, r1
 8011818:	3318      	adds	r3, #24
 801181a:	6819      	ldr	r1, [r3, #0]
 801181c:	487f      	ldr	r0, [pc, #508]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 801181e:	4613      	mov	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	4413      	add	r3, r2
 8011824:	00db      	lsls	r3, r3, #3
 8011826:	4403      	add	r3, r0
 8011828:	3318      	adds	r3, #24
 801182a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 801182c:	79fb      	ldrb	r3, [r7, #7]
 801182e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011832:	4978      	ldr	r1, [pc, #480]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 8011834:	2034      	movs	r0, #52	@ 0x34
 8011836:	fb00 f303 	mul.w	r3, r0, r3
 801183a:	440b      	add	r3, r1
 801183c:	3314      	adds	r3, #20
 801183e:	6819      	ldr	r1, [r3, #0]
 8011840:	4876      	ldr	r0, [pc, #472]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 8011842:	4613      	mov	r3, r2
 8011844:	00db      	lsls	r3, r3, #3
 8011846:	4413      	add	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	4403      	add	r3, r0
 801184c:	3310      	adds	r3, #16
 801184e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 8011850:	79fb      	ldrb	r3, [r7, #7]
 8011852:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011856:	496f      	ldr	r1, [pc, #444]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 8011858:	2034      	movs	r0, #52	@ 0x34
 801185a:	fb00 f303 	mul.w	r3, r0, r3
 801185e:	440b      	add	r3, r1
 8011860:	330c      	adds	r3, #12
 8011862:	6819      	ldr	r1, [r3, #0]
 8011864:	486d      	ldr	r0, [pc, #436]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 8011866:	4613      	mov	r3, r2
 8011868:	00db      	lsls	r3, r3, #3
 801186a:	4413      	add	r3, r2
 801186c:	00db      	lsls	r3, r3, #3
 801186e:	4403      	add	r3, r0
 8011870:	3308      	adds	r3, #8
 8011872:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 8011874:	79fb      	ldrb	r3, [r7, #7]
 8011876:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801187a:	4966      	ldr	r1, [pc, #408]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 801187c:	2034      	movs	r0, #52	@ 0x34
 801187e:	fb00 f303 	mul.w	r3, r0, r3
 8011882:	440b      	add	r3, r1
 8011884:	3310      	adds	r3, #16
 8011886:	6819      	ldr	r1, [r3, #0]
 8011888:	4864      	ldr	r0, [pc, #400]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 801188a:	4613      	mov	r3, r2
 801188c:	00db      	lsls	r3, r3, #3
 801188e:	4413      	add	r3, r2
 8011890:	00db      	lsls	r3, r3, #3
 8011892:	4403      	add	r3, r0
 8011894:	330c      	adds	r3, #12
 8011896:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 8011898:	79fb      	ldrb	r3, [r7, #7]
 801189a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801189e:	495d      	ldr	r1, [pc, #372]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 80118a0:	2034      	movs	r0, #52	@ 0x34
 80118a2:	fb00 f303 	mul.w	r3, r0, r3
 80118a6:	440b      	add	r3, r1
 80118a8:	3304      	adds	r3, #4
 80118aa:	6819      	ldr	r1, [r3, #0]
 80118ac:	485b      	ldr	r0, [pc, #364]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 80118ae:	4613      	mov	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	4413      	add	r3, r2
 80118b4:	00db      	lsls	r3, r3, #3
 80118b6:	4403      	add	r3, r0
 80118b8:	3304      	adds	r3, #4
 80118ba:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 80118bc:	79fb      	ldrb	r3, [r7, #7]
 80118be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80118c2:	4954      	ldr	r1, [pc, #336]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 80118c4:	2034      	movs	r0, #52	@ 0x34
 80118c6:	fb00 f303 	mul.w	r3, r0, r3
 80118ca:	440b      	add	r3, r1
 80118cc:	3308      	adds	r3, #8
 80118ce:	6819      	ldr	r1, [r3, #0]
 80118d0:	4852      	ldr	r0, [pc, #328]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 80118d2:	4613      	mov	r3, r2
 80118d4:	00db      	lsls	r3, r3, #3
 80118d6:	4413      	add	r3, r2
 80118d8:	00db      	lsls	r3, r3, #3
 80118da:	4403      	add	r3, r0
 80118dc:	3314      	adds	r3, #20
 80118de:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 80118e0:	79fb      	ldrb	r3, [r7, #7]
 80118e2:	4a4c      	ldr	r2, [pc, #304]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 80118e4:	2134      	movs	r1, #52	@ 0x34
 80118e6:	fb01 f303 	mul.w	r3, r1, r3
 80118ea:	4413      	add	r3, r2
 80118ec:	3328      	adds	r3, #40	@ 0x28
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	4a47      	ldr	r2, [pc, #284]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 80118f6:	2134      	movs	r1, #52	@ 0x34
 80118f8:	fb01 f303 	mul.w	r3, r1, r3
 80118fc:	4413      	add	r3, r2
 80118fe:	332c      	adds	r3, #44	@ 0x2c
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 8011904:	79fb      	ldrb	r3, [r7, #7]
 8011906:	4a43      	ldr	r2, [pc, #268]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 8011908:	2134      	movs	r1, #52	@ 0x34
 801190a:	fb01 f303 	mul.w	r3, r1, r3
 801190e:	4413      	add	r3, r2
 8011910:	3320      	adds	r3, #32
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8011916:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801191a:	4613      	mov	r3, r2
 801191c:	00db      	lsls	r3, r3, #3
 801191e:	4413      	add	r3, r2
 8011920:	00db      	lsls	r3, r3, #3
 8011922:	4a3e      	ldr	r2, [pc, #248]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 8011924:	4413      	add	r3, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f7f5 f87c 	bl	8006a24 <HAL_TIM_Base_Init>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d165      	bne.n	80119fe <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 8011932:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	4a39      	ldr	r2, [pc, #228]	@ (8011a20 <drv_tmrInitInstance+0x288>)
 801193a:	4413      	add	r3, r2
 801193c:	4618      	mov	r0, r3
 801193e:	f7fb f87f 	bl	800ca40 <gos_mutexInit>
 8011942:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8011944:	2b55      	cmp	r3, #85	@ 0x55
 8011946:	d15a      	bne.n	80119fe <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8011948:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801194c:	4613      	mov	r3, r2
 801194e:	005b      	lsls	r3, r3, #1
 8011950:	4413      	add	r3, r2
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	4a33      	ldr	r2, [pc, #204]	@ (8011a24 <drv_tmrInitInstance+0x28c>)
 8011956:	4413      	add	r3, r2
 8011958:	4618      	mov	r0, r3
 801195a:	f7fc fc8f 	bl	800e27c <gos_triggerInit>
 801195e:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 8011960:	2b55      	cmp	r3, #85	@ 0x55
 8011962:	d14c      	bne.n	80119fe <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 8011964:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011968:	4613      	mov	r3, r2
 801196a:	005b      	lsls	r3, r3, #1
 801196c:	4413      	add	r3, r2
 801196e:	009b      	lsls	r3, r3, #2
 8011970:	4a2c      	ldr	r2, [pc, #176]	@ (8011a24 <drv_tmrInitInstance+0x28c>)
 8011972:	4413      	add	r3, r2
 8011974:	4618      	mov	r0, r3
 8011976:	f7fc fc9d 	bl	800e2b4 <gos_triggerReset>
 801197a:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 801197c:	2b55      	cmp	r3, #85	@ 0x55
 801197e:	d13e      	bne.n	80119fe <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 8011980:	2355      	movs	r3, #85	@ 0x55
 8011982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	4a22      	ldr	r2, [pc, #136]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 801198a:	2134      	movs	r1, #52	@ 0x34
 801198c:	fb01 f303 	mul.w	r3, r1, r3
 8011990:	4413      	add	r3, r2
 8011992:	331c      	adds	r3, #28
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	2b36      	cmp	r3, #54	@ 0x36
 8011998:	d113      	bne.n	80119c2 <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 801199a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801199e:	4613      	mov	r3, r2
 80119a0:	00db      	lsls	r3, r3, #3
 80119a2:	4413      	add	r3, r2
 80119a4:	00db      	lsls	r3, r3, #3
 80119a6:	4a1d      	ldr	r2, [pc, #116]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 80119a8:	4413      	add	r3, r2
 80119aa:	f107 020c 	add.w	r2, r7, #12
 80119ae:	4611      	mov	r1, r2
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7f5 f998 	bl	8006ce6 <HAL_TIM_ConfigClockSource>
 80119b6:	4603      	mov	r3, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d002      	beq.n	80119c2 <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 80119bc:	23ae      	movs	r3, #174	@ 0xae
 80119be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 80119c2:	79fb      	ldrb	r3, [r7, #7]
 80119c4:	4a13      	ldr	r2, [pc, #76]	@ (8011a14 <drv_tmrInitInstance+0x27c>)
 80119c6:	2134      	movs	r1, #52	@ 0x34
 80119c8:	fb01 f303 	mul.w	r3, r1, r3
 80119cc:	4413      	add	r3, r2
 80119ce:	3324      	adds	r3, #36	@ 0x24
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b36      	cmp	r3, #54	@ 0x36
 80119d4:	d113      	bne.n	80119fe <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 80119d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80119da:	4613      	mov	r3, r2
 80119dc:	00db      	lsls	r3, r3, #3
 80119de:	4413      	add	r3, r2
 80119e0:	00db      	lsls	r3, r3, #3
 80119e2:	4a0e      	ldr	r2, [pc, #56]	@ (8011a1c <drv_tmrInitInstance+0x284>)
 80119e4:	4413      	add	r3, r2
 80119e6:	f107 021c 	add.w	r2, r7, #28
 80119ea:	4611      	mov	r1, r2
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7f5 fba1 	bl	8007134 <HAL_TIMEx_MasterConfigSynchronization>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d002      	beq.n	80119fe <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 80119f8:	23ae      	movs	r3, #174	@ 0xae
 80119fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 80119fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3728      	adds	r7, #40	@ 0x28
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	200003c4 	.word	0x200003c4
 8011a10:	4ec4ec4f 	.word	0x4ec4ec4f
 8011a14:	2000035c 	.word	0x2000035c
 8011a18:	20000ebc 	.word	0x20000ebc
 8011a1c:	200046c4 	.word	0x200046c4
 8011a20:	20004ab4 	.word	0x20004ab4
 8011a24:	20004aec 	.word	0x20004aec

08011a28 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	4603      	mov	r3, r0
 8011a30:	6039      	str	r1, [r7, #0]
 8011a32:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 8011a34:	23ae      	movs	r3, #174	@ 0xae
 8011a36:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8011a38:	79fb      	ldrb	r3, [r7, #7]
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	4a11      	ldr	r2, [pc, #68]	@ (8011a84 <drv_tmrStart+0x5c>)
 8011a3e:	4413      	add	r3, r2
 8011a40:	6839      	ldr	r1, [r7, #0]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fb f816 	bl	800ca74 <gos_mutexLock>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b55      	cmp	r3, #85	@ 0x55
 8011a4c:	d10e      	bne.n	8011a6c <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 8011a4e:	79fa      	ldrb	r2, [r7, #7]
 8011a50:	4613      	mov	r3, r2
 8011a52:	00db      	lsls	r3, r3, #3
 8011a54:	4413      	add	r3, r2
 8011a56:	00db      	lsls	r3, r3, #3
 8011a58:	4a0b      	ldr	r2, [pc, #44]	@ (8011a88 <drv_tmrStart+0x60>)
 8011a5a:	4413      	add	r3, r2
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f5 f816 	bl	8006a8e <HAL_TIM_Base_Start>
 8011a62:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d101      	bne.n	8011a6c <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 8011a68:	2355      	movs	r3, #85	@ 0x55
 8011a6a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 8011a6c:	79fb      	ldrb	r3, [r7, #7]
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4a04      	ldr	r2, [pc, #16]	@ (8011a84 <drv_tmrStart+0x5c>)
 8011a72:	4413      	add	r3, r2
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fb f903 	bl	800cc80 <gos_mutexUnlock>

    return tmrStartResult;
 8011a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3710      	adds	r7, #16
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	20004ab4 	.word	0x20004ab4
 8011a88:	200046c4 	.word	0x200046c4

08011a8c <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	6039      	str	r1, [r7, #0]
 8011a96:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 8011a98:	23ae      	movs	r3, #174	@ 0xae
 8011a9a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00c      	beq.n	8011abc <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 8011aa2:	79fa      	ldrb	r2, [r7, #7]
 8011aa4:	4909      	ldr	r1, [pc, #36]	@ (8011acc <drv_tmrGetValue+0x40>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 8011ab8:	2355      	movs	r3, #85	@ 0x55
 8011aba:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 8011abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop
 8011acc:	200046c4 	.word	0x200046c4

08011ad0 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8011adc:	2300      	movs	r3, #0
 8011ade:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d041      	beq.n	8011b6a <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	73fb      	strb	r3, [r7, #15]
 8011aea:	e03a      	b.n	8011b62 <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
 8011aee:	4a21      	ldr	r2, [pc, #132]	@ (8011b74 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8011af0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d12f      	bne.n	8011b5c <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8011afc:	2300      	movs	r3, #0
 8011afe:	73bb      	strb	r3, [r7, #14]
 8011b00:	e020      	b.n	8011b44 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 8011b02:	7bbb      	ldrb	r3, [r7, #14]
 8011b04:	4a1c      	ldr	r2, [pc, #112]	@ (8011b78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8011b06:	2134      	movs	r1, #52	@ 0x34
 8011b08:	fb01 f303 	mul.w	r3, r1, r3
 8011b0c:	4413      	add	r3, r2
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	7bfa      	ldrb	r2, [r7, #15]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d113      	bne.n	8011b3e <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 8011b16:	7bbb      	ldrb	r3, [r7, #14]
 8011b18:	4a17      	ldr	r2, [pc, #92]	@ (8011b78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8011b1a:	2134      	movs	r1, #52	@ 0x34
 8011b1c:	fb01 f303 	mul.w	r3, r1, r3
 8011b20:	4413      	add	r3, r2
 8011b22:	3330      	adds	r3, #48	@ 0x30
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d016      	beq.n	8011b58 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 8011b2a:	7bbb      	ldrb	r3, [r7, #14]
 8011b2c:	4a12      	ldr	r2, [pc, #72]	@ (8011b78 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8011b2e:	2134      	movs	r1, #52	@ 0x34
 8011b30:	fb01 f303 	mul.w	r3, r1, r3
 8011b34:	4413      	add	r3, r2
 8011b36:	3330      	adds	r3, #48	@ 0x30
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 8011b3c:	e00c      	b.n	8011b58 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8011b3e:	7bbb      	ldrb	r3, [r7, #14]
 8011b40:	3301      	adds	r3, #1
 8011b42:	73bb      	strb	r3, [r7, #14]
 8011b44:	7bba      	ldrb	r2, [r7, #14]
 8011b46:	4b0d      	ldr	r3, [pc, #52]	@ (8011b7c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	490d      	ldr	r1, [pc, #52]	@ (8011b80 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8011b4c:	fba1 1303 	umull	r1, r3, r1, r3
 8011b50:	091b      	lsrs	r3, r3, #4
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d3d5      	bcc.n	8011b02 <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 8011b56:	e008      	b.n	8011b6a <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 8011b58:	bf00      	nop
                break;
 8011b5a:	e006      	b.n	8011b6a <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8011b5c:	7bfb      	ldrb	r3, [r7, #15]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	73fb      	strb	r3, [r7, #15]
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
 8011b64:	2b0d      	cmp	r3, #13
 8011b66:	d9c1      	bls.n	8011aec <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 8011b68:	e7ff      	b.n	8011b6a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8011b6a:	bf00      	nop
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	20000ebc 	.word	0x20000ebc
 8011b78:	2000035c 	.word	0x2000035c
 8011b7c:	200003c4 	.word	0x200003c4
 8011b80:	4ec4ec4f 	.word	0x4ec4ec4f

08011b84 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011b88:	4b16      	ldr	r3, [pc, #88]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <TIM2_IRQHandler+0x18>
 8011b90:	4b15      	ldr	r3, [pc, #84]	@ (8011be8 <TIM2_IRQHandler+0x64>)
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	3301      	adds	r3, #1
 8011b96:	b2da      	uxtb	r2, r3
 8011b98:	4b13      	ldr	r3, [pc, #76]	@ (8011be8 <TIM2_IRQHandler+0x64>)
 8011b9a:	701a      	strb	r2, [r3, #0]
 8011b9c:	4b11      	ldr	r3, [pc, #68]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011ba6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 8011ba8:	4810      	ldr	r0, [pc, #64]	@ (8011bec <TIM2_IRQHandler+0x68>)
 8011baa:	f7f4 ff94 	bl	8006ad6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8011bae:	4b0d      	ldr	r3, [pc, #52]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d005      	beq.n	8011bc2 <TIM2_IRQHandler+0x3e>
 8011bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	3b01      	subs	r3, #1
 8011bbc:	b2da      	uxtb	r2, r3
 8011bbe:	4b09      	ldr	r3, [pc, #36]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011bc0:	701a      	strb	r2, [r3, #0]
 8011bc2:	4b08      	ldr	r3, [pc, #32]	@ (8011be4 <TIM2_IRQHandler+0x60>)
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d109      	bne.n	8011bde <TIM2_IRQHandler+0x5a>
 8011bca:	4b07      	ldr	r3, [pc, #28]	@ (8011be8 <TIM2_IRQHandler+0x64>)
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d005      	beq.n	8011bde <TIM2_IRQHandler+0x5a>
 8011bd2:	4b05      	ldr	r3, [pc, #20]	@ (8011be8 <TIM2_IRQHandler+0x64>)
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	4b03      	ldr	r3, [pc, #12]	@ (8011be8 <TIM2_IRQHandler+0x64>)
 8011bdc:	701a      	strb	r2, [r3, #0]
}
 8011bde:	bf00      	nop
 8011be0:	bd80      	pop	{r7, pc}
 8011be2:	bf00      	nop
 8011be4:	20001962 	.word	0x20001962
 8011be8:	20001961 	.word	0x20001961
 8011bec:	2000470c 	.word	0x2000470c

08011bf0 <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011bf4:	4b16      	ldr	r3, [pc, #88]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d105      	bne.n	8011c08 <TIM3_IRQHandler+0x18>
 8011bfc:	4b15      	ldr	r3, [pc, #84]	@ (8011c54 <TIM3_IRQHandler+0x64>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	3301      	adds	r3, #1
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	4b13      	ldr	r3, [pc, #76]	@ (8011c54 <TIM3_IRQHandler+0x64>)
 8011c06:	701a      	strb	r2, [r3, #0]
 8011c08:	4b11      	ldr	r3, [pc, #68]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	b2da      	uxtb	r2, r3
 8011c10:	4b0f      	ldr	r3, [pc, #60]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011c12:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 8011c14:	4810      	ldr	r0, [pc, #64]	@ (8011c58 <TIM3_IRQHandler+0x68>)
 8011c16:	f7f4 ff5e 	bl	8006ad6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8011c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d005      	beq.n	8011c2e <TIM3_IRQHandler+0x3e>
 8011c22:	4b0b      	ldr	r3, [pc, #44]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	b2da      	uxtb	r2, r3
 8011c2a:	4b09      	ldr	r3, [pc, #36]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011c2c:	701a      	strb	r2, [r3, #0]
 8011c2e:	4b08      	ldr	r3, [pc, #32]	@ (8011c50 <TIM3_IRQHandler+0x60>)
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d109      	bne.n	8011c4a <TIM3_IRQHandler+0x5a>
 8011c36:	4b07      	ldr	r3, [pc, #28]	@ (8011c54 <TIM3_IRQHandler+0x64>)
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d005      	beq.n	8011c4a <TIM3_IRQHandler+0x5a>
 8011c3e:	4b05      	ldr	r3, [pc, #20]	@ (8011c54 <TIM3_IRQHandler+0x64>)
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	3b01      	subs	r3, #1
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	4b03      	ldr	r3, [pc, #12]	@ (8011c54 <TIM3_IRQHandler+0x64>)
 8011c48:	701a      	strb	r2, [r3, #0]
}
 8011c4a:	bf00      	nop
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	20001962 	.word	0x20001962
 8011c54:	20001961 	.word	0x20001961
 8011c58:	20004754 	.word	0x20004754

08011c5c <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011c60:	4b16      	ldr	r3, [pc, #88]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d105      	bne.n	8011c74 <TIM4_IRQHandler+0x18>
 8011c68:	4b15      	ldr	r3, [pc, #84]	@ (8011cc0 <TIM4_IRQHandler+0x64>)
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	b2da      	uxtb	r2, r3
 8011c70:	4b13      	ldr	r3, [pc, #76]	@ (8011cc0 <TIM4_IRQHandler+0x64>)
 8011c72:	701a      	strb	r2, [r3, #0]
 8011c74:	4b11      	ldr	r3, [pc, #68]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	b2da      	uxtb	r2, r3
 8011c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c7e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 8011c80:	4810      	ldr	r0, [pc, #64]	@ (8011cc4 <TIM4_IRQHandler+0x68>)
 8011c82:	f7f4 ff28 	bl	8006ad6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8011c86:	4b0d      	ldr	r3, [pc, #52]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d005      	beq.n	8011c9a <TIM4_IRQHandler+0x3e>
 8011c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	b2da      	uxtb	r2, r3
 8011c96:	4b09      	ldr	r3, [pc, #36]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c98:	701a      	strb	r2, [r3, #0]
 8011c9a:	4b08      	ldr	r3, [pc, #32]	@ (8011cbc <TIM4_IRQHandler+0x60>)
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d109      	bne.n	8011cb6 <TIM4_IRQHandler+0x5a>
 8011ca2:	4b07      	ldr	r3, [pc, #28]	@ (8011cc0 <TIM4_IRQHandler+0x64>)
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d005      	beq.n	8011cb6 <TIM4_IRQHandler+0x5a>
 8011caa:	4b05      	ldr	r3, [pc, #20]	@ (8011cc0 <TIM4_IRQHandler+0x64>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	3b01      	subs	r3, #1
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	4b03      	ldr	r3, [pc, #12]	@ (8011cc0 <TIM4_IRQHandler+0x64>)
 8011cb4:	701a      	strb	r2, [r3, #0]
}
 8011cb6:	bf00      	nop
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	20001962 	.word	0x20001962
 8011cc0:	20001961 	.word	0x20001961
 8011cc4:	2000479c 	.word	0x2000479c

08011cc8 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011ccc:	4b16      	ldr	r3, [pc, #88]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d105      	bne.n	8011ce0 <TIM5_IRQHandler+0x18>
 8011cd4:	4b15      	ldr	r3, [pc, #84]	@ (8011d2c <TIM5_IRQHandler+0x64>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	3301      	adds	r3, #1
 8011cda:	b2da      	uxtb	r2, r3
 8011cdc:	4b13      	ldr	r3, [pc, #76]	@ (8011d2c <TIM5_IRQHandler+0x64>)
 8011cde:	701a      	strb	r2, [r3, #0]
 8011ce0:	4b11      	ldr	r3, [pc, #68]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	b2da      	uxtb	r2, r3
 8011ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011cea:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 8011cec:	4810      	ldr	r0, [pc, #64]	@ (8011d30 <TIM5_IRQHandler+0x68>)
 8011cee:	f7f4 fef2 	bl	8006ad6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8011cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d005      	beq.n	8011d06 <TIM5_IRQHandler+0x3e>
 8011cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	3b01      	subs	r3, #1
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	4b09      	ldr	r3, [pc, #36]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011d04:	701a      	strb	r2, [r3, #0]
 8011d06:	4b08      	ldr	r3, [pc, #32]	@ (8011d28 <TIM5_IRQHandler+0x60>)
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d109      	bne.n	8011d22 <TIM5_IRQHandler+0x5a>
 8011d0e:	4b07      	ldr	r3, [pc, #28]	@ (8011d2c <TIM5_IRQHandler+0x64>)
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d005      	beq.n	8011d22 <TIM5_IRQHandler+0x5a>
 8011d16:	4b05      	ldr	r3, [pc, #20]	@ (8011d2c <TIM5_IRQHandler+0x64>)
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	3b01      	subs	r3, #1
 8011d1c:	b2da      	uxtb	r2, r3
 8011d1e:	4b03      	ldr	r3, [pc, #12]	@ (8011d2c <TIM5_IRQHandler+0x64>)
 8011d20:	701a      	strb	r2, [r3, #0]
}
 8011d22:	bf00      	nop
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	20001962 	.word	0x20001962
 8011d2c:	20001961 	.word	0x20001961
 8011d30:	200047e4 	.word	0x200047e4

08011d34 <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8011d38:	4b16      	ldr	r3, [pc, #88]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d105      	bne.n	8011d4c <TIM7_IRQHandler+0x18>
 8011d40:	4b15      	ldr	r3, [pc, #84]	@ (8011d98 <TIM7_IRQHandler+0x64>)
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	3301      	adds	r3, #1
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	4b13      	ldr	r3, [pc, #76]	@ (8011d98 <TIM7_IRQHandler+0x64>)
 8011d4a:	701a      	strb	r2, [r3, #0]
 8011d4c:	4b11      	ldr	r3, [pc, #68]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	3301      	adds	r3, #1
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	4b0f      	ldr	r3, [pc, #60]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d56:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 8011d58:	4810      	ldr	r0, [pc, #64]	@ (8011d9c <TIM7_IRQHandler+0x68>)
 8011d5a:	f7f4 febc 	bl	8006ad6 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8011d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d005      	beq.n	8011d72 <TIM7_IRQHandler+0x3e>
 8011d66:	4b0b      	ldr	r3, [pc, #44]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	4b09      	ldr	r3, [pc, #36]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d70:	701a      	strb	r2, [r3, #0]
 8011d72:	4b08      	ldr	r3, [pc, #32]	@ (8011d94 <TIM7_IRQHandler+0x60>)
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d109      	bne.n	8011d8e <TIM7_IRQHandler+0x5a>
 8011d7a:	4b07      	ldr	r3, [pc, #28]	@ (8011d98 <TIM7_IRQHandler+0x64>)
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d005      	beq.n	8011d8e <TIM7_IRQHandler+0x5a>
 8011d82:	4b05      	ldr	r3, [pc, #20]	@ (8011d98 <TIM7_IRQHandler+0x64>)
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	4b03      	ldr	r3, [pc, #12]	@ (8011d98 <TIM7_IRQHandler+0x64>)
 8011d8c:	701a      	strb	r2, [r3, #0]
}
 8011d8e:	bf00      	nop
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	20001962 	.word	0x20001962
 8011d98:	20001961 	.word	0x20001961
 8011d9c:	20004874 	.word	0x20004874

08011da0 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8011da8:	23ae      	movs	r3, #174	@ 0xae
 8011daa:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8011dac:	2300      	movs	r3, #0
 8011dae:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8011db0:	4b0a      	ldr	r3, [pc, #40]	@ (8011ddc <drv_traceTransmitUnsafe+0x3c>)
 8011db2:	78db      	ldrb	r3, [r3, #3]
 8011db4:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7ee fa7a 	bl	80002b0 <strlen>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	4b07      	ldr	r3, [pc, #28]	@ (8011de0 <drv_traceTransmitUnsafe+0x40>)
 8011dc2:	689b      	ldr	r3, [r3, #8]
 8011dc4:	7bb8      	ldrb	r0, [r7, #14]
 8011dc6:	6879      	ldr	r1, [r7, #4]
 8011dc8:	f000 fa02 	bl	80121d0 <drv_uartTransmitBlocking>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	0801a6c4 	.word	0x0801a6c4
 8011de0:	200003c8 	.word	0x200003c8

08011de4 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af02      	add	r7, sp, #8
 8011dea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8011dec:	23ae      	movs	r3, #174	@ 0xae
 8011dee:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8011df0:	2300      	movs	r3, #0
 8011df2:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8011df4:	4b0c      	ldr	r3, [pc, #48]	@ (8011e28 <drv_traceTransmit+0x44>)
 8011df6:	78db      	ldrb	r3, [r3, #3]
 8011df8:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f7ee fa58 	bl	80002b0 <strlen>
 8011e00:	4603      	mov	r3, r0
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	4b09      	ldr	r3, [pc, #36]	@ (8011e2c <drv_traceTransmit+0x48>)
 8011e06:	6819      	ldr	r1, [r3, #0]
 8011e08:	4b08      	ldr	r3, [pc, #32]	@ (8011e2c <drv_traceTransmit+0x48>)
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	7bb8      	ldrb	r0, [r7, #14]
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	460b      	mov	r3, r1
 8011e12:	6879      	ldr	r1, [r7, #4]
 8011e14:	f000 fa28 	bl	8012268 <drv_uartTransmitDMA>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8011e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	0801a6c4 	.word	0x0801a6c4
 8011e2c:	200003c8 	.word	0x200003c8

08011e30 <drv_traceEnqueueTraceMessage>:

/*
 * Function: drv_traceEnqueueTraceMessage
 */
gos_result_t drv_traceEnqueueTraceMessage (const char_t* message, bool_t plainText, gos_result_t result)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	460b      	mov	r3, r1
 8011e3a:	70fb      	strb	r3, [r7, #3]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	70bb      	strb	r3, [r7, #2]
    /*
     * Function code.
     */
	if (nextEntryIndex < TRACE_ENQ_ENTRY_MAX_NUM)
 8011e40:	4b18      	ldr	r3, [pc, #96]	@ (8011ea4 <drv_traceEnqueueTraceMessage+0x74>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	2b0b      	cmp	r3, #11
 8011e46:	d827      	bhi.n	8011e98 <drv_traceEnqueueTraceMessage+0x68>
	{
		(void_t) strcpy(traceEntries[nextEntryIndex].message, message);
 8011e48:	4b16      	ldr	r3, [pc, #88]	@ (8011ea4 <drv_traceEnqueueTraceMessage+0x74>)
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	2332      	movs	r3, #50	@ 0x32
 8011e50:	fb02 f303 	mul.w	r3, r2, r3
 8011e54:	4a14      	ldr	r2, [pc, #80]	@ (8011ea8 <drv_traceEnqueueTraceMessage+0x78>)
 8011e56:	4413      	add	r3, r2
 8011e58:	6879      	ldr	r1, [r7, #4]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f004 ff2f 	bl	8016cbe <strcpy>
		traceEntries[nextEntryIndex].result    = result;
 8011e60:	4b10      	ldr	r3, [pc, #64]	@ (8011ea4 <drv_traceEnqueueTraceMessage+0x74>)
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	4619      	mov	r1, r3
 8011e66:	4a10      	ldr	r2, [pc, #64]	@ (8011ea8 <drv_traceEnqueueTraceMessage+0x78>)
 8011e68:	2332      	movs	r3, #50	@ 0x32
 8011e6a:	fb01 f303 	mul.w	r3, r1, r3
 8011e6e:	4413      	add	r3, r2
 8011e70:	3331      	adds	r3, #49	@ 0x31
 8011e72:	78ba      	ldrb	r2, [r7, #2]
 8011e74:	701a      	strb	r2, [r3, #0]
		traceEntries[nextEntryIndex].plainText = plainText;
 8011e76:	4b0b      	ldr	r3, [pc, #44]	@ (8011ea4 <drv_traceEnqueueTraceMessage+0x74>)
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8011ea8 <drv_traceEnqueueTraceMessage+0x78>)
 8011e7e:	2332      	movs	r3, #50	@ 0x32
 8011e80:	fb01 f303 	mul.w	r3, r1, r3
 8011e84:	4413      	add	r3, r2
 8011e86:	3330      	adds	r3, #48	@ 0x30
 8011e88:	78fa      	ldrb	r2, [r7, #3]
 8011e8a:	701a      	strb	r2, [r3, #0]
		nextEntryIndex++;
 8011e8c:	4b05      	ldr	r3, [pc, #20]	@ (8011ea4 <drv_traceEnqueueTraceMessage+0x74>)
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	3301      	adds	r3, #1
 8011e92:	b2da      	uxtb	r2, r3
 8011e94:	4b03      	ldr	r3, [pc, #12]	@ (8011ea4 <drv_traceEnqueueTraceMessage+0x74>)
 8011e96:	701a      	strb	r2, [r3, #0]
	else
	{
		// Trace queue full.
	}

	return result;
 8011e98:	78bb      	ldrb	r3, [r7, #2]
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	20004dec 	.word	0x20004dec
 8011ea8:	20004b94 	.word	0x20004b94

08011eac <drv_traceFlushTraceEntries>:

/*
 * Function: drv_traceFlushTraceEntries
 */
void_t drv_traceFlushTraceEntries (void_t)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t traceIndex = 0u;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	71fb      	strb	r3, [r7, #7]
 8011eba:	e028      	b.n	8011f0e <drv_traceFlushTraceEntries+0x62>
	{
		if (traceEntries[traceIndex].plainText == GOS_TRUE)
 8011ebc:	79fb      	ldrb	r3, [r7, #7]
 8011ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8011f28 <drv_traceFlushTraceEntries+0x7c>)
 8011ec0:	2132      	movs	r1, #50	@ 0x32
 8011ec2:	fb01 f303 	mul.w	r3, r1, r3
 8011ec6:	4413      	add	r3, r2
 8011ec8:	3330      	adds	r3, #48	@ 0x30
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	2b36      	cmp	r3, #54	@ 0x36
 8011ece:	d109      	bne.n	8011ee4 <drv_traceFlushTraceEntries+0x38>
		{
			(void_t) gos_traceTraceFormattedUnsafe(traceEntries[traceIndex].message);
 8011ed0:	79fb      	ldrb	r3, [r7, #7]
 8011ed2:	2232      	movs	r2, #50	@ 0x32
 8011ed4:	fb02 f303 	mul.w	r3, r2, r3
 8011ed8:	4a13      	ldr	r2, [pc, #76]	@ (8011f28 <drv_traceFlushTraceEntries+0x7c>)
 8011eda:	4413      	add	r3, r2
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7fc f971 	bl	800e1c4 <gos_traceTraceFormattedUnsafe>
 8011ee2:	e011      	b.n	8011f08 <drv_traceFlushTraceEntries+0x5c>
		}
		else
		{
			(void_t) gos_errorTraceInit(traceEntries[traceIndex].message, traceEntries[traceIndex].result);
 8011ee4:	79fb      	ldrb	r3, [r7, #7]
 8011ee6:	2232      	movs	r2, #50	@ 0x32
 8011ee8:	fb02 f303 	mul.w	r3, r2, r3
 8011eec:	4a0e      	ldr	r2, [pc, #56]	@ (8011f28 <drv_traceFlushTraceEntries+0x7c>)
 8011eee:	441a      	add	r2, r3
 8011ef0:	79fb      	ldrb	r3, [r7, #7]
 8011ef2:	490d      	ldr	r1, [pc, #52]	@ (8011f28 <drv_traceFlushTraceEntries+0x7c>)
 8011ef4:	2032      	movs	r0, #50	@ 0x32
 8011ef6:	fb00 f303 	mul.w	r3, r0, r3
 8011efa:	440b      	add	r3, r1
 8011efc:	3331      	adds	r3, #49	@ 0x31
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	4619      	mov	r1, r3
 8011f02:	4610      	mov	r0, r2
 8011f04:	f7f9 ffe4 	bl	800bed0 <gos_errorTraceInit>
	for (traceIndex = 0u; traceIndex < nextEntryIndex; traceIndex++)
 8011f08:	79fb      	ldrb	r3, [r7, #7]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	71fb      	strb	r3, [r7, #7]
 8011f0e:	4b07      	ldr	r3, [pc, #28]	@ (8011f2c <drv_traceFlushTraceEntries+0x80>)
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	79fa      	ldrb	r2, [r7, #7]
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d3d1      	bcc.n	8011ebc <drv_traceFlushTraceEntries+0x10>
		}
	}

	nextEntryIndex = 0u;
 8011f18:	4b04      	ldr	r3, [pc, #16]	@ (8011f2c <drv_traceFlushTraceEntries+0x80>)
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	701a      	strb	r2, [r3, #0]
}
 8011f1e:	bf00      	nop
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	20004b94 	.word	0x20004b94
 8011f2c:	20004dec 	.word	0x20004dec

08011f30 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 8011f36:	2355      	movs	r3, #85	@ 0x55
 8011f38:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8011f3e:	2300      	movs	r3, #0
 8011f40:	71bb      	strb	r3, [r7, #6]
 8011f42:	e00e      	b.n	8011f62 <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 8011f44:	79fb      	ldrb	r3, [r7, #7]
 8011f46:	2b55      	cmp	r3, #85	@ 0x55
 8011f48:	d106      	bne.n	8011f58 <drv_uartInit+0x28>
 8011f4a:	79bb      	ldrb	r3, [r7, #6]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 f81b 	bl	8011f88 <drv_uartInitInstance>
 8011f52:	4603      	mov	r3, r0
 8011f54:	71fb      	strb	r3, [r7, #7]
 8011f56:	e001      	b.n	8011f5c <drv_uartInit+0x2c>
 8011f58:	23ae      	movs	r3, #174	@ 0xae
 8011f5a:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8011f5c:	79bb      	ldrb	r3, [r7, #6]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	71bb      	strb	r3, [r7, #6]
 8011f62:	79ba      	ldrb	r2, [r7, #6]
 8011f64:	4b06      	ldr	r3, [pc, #24]	@ (8011f80 <drv_uartInit+0x50>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4906      	ldr	r1, [pc, #24]	@ (8011f84 <drv_uartInit+0x54>)
 8011f6a:	fba1 1303 	umull	r1, r3, r1, r3
 8011f6e:	095b      	lsrs	r3, r3, #5
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d3e7      	bcc.n	8011f44 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 8011f74:	79fb      	ldrb	r3, [r7, #7]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3708      	adds	r7, #8
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	200003f4 	.word	0x200003f4
 8011f84:	cccccccd 	.word	0xcccccccd

08011f88 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	4603      	mov	r3, r0
 8011f90:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 8011f92:	23ae      	movs	r3, #174	@ 0xae
 8011f94:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 8011f96:	2300      	movs	r3, #0
 8011f98:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 8011f9a:	79fa      	ldrb	r2, [r7, #7]
 8011f9c:	4b82      	ldr	r3, [pc, #520]	@ (80121a8 <drv_uartInitInstance+0x220>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4982      	ldr	r1, [pc, #520]	@ (80121ac <drv_uartInitInstance+0x224>)
 8011fa2:	fba1 1303 	umull	r1, r3, r1, r3
 8011fa6:	095b      	lsrs	r3, r3, #5
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	f080 80f2 	bcs.w	8012192 <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 8011fae:	79fa      	ldrb	r2, [r7, #7]
 8011fb0:	497f      	ldr	r1, [pc, #508]	@ (80121b0 <drv_uartInitInstance+0x228>)
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	4413      	add	r3, r2
 8011fb8:	00db      	lsls	r3, r3, #3
 8011fba:	440b      	add	r3, r1
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 8011fc0:	7bbb      	ldrb	r3, [r7, #14]
 8011fc2:	7bba      	ldrb	r2, [r7, #14]
 8011fc4:	497b      	ldr	r1, [pc, #492]	@ (80121b4 <drv_uartInitInstance+0x22c>)
 8011fc6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011fca:	487b      	ldr	r0, [pc, #492]	@ (80121b8 <drv_uartInitInstance+0x230>)
 8011fcc:	4613      	mov	r3, r2
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	4413      	add	r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	4403      	add	r3, r0
 8011fd6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 8011fd8:	79f9      	ldrb	r1, [r7, #7]
 8011fda:	7bba      	ldrb	r2, [r7, #14]
 8011fdc:	4874      	ldr	r0, [pc, #464]	@ (80121b0 <drv_uartInitInstance+0x228>)
 8011fde:	460b      	mov	r3, r1
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	440b      	add	r3, r1
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	4403      	add	r3, r0
 8011fe8:	3304      	adds	r3, #4
 8011fea:	6819      	ldr	r1, [r3, #0]
 8011fec:	4872      	ldr	r0, [pc, #456]	@ (80121b8 <drv_uartInitInstance+0x230>)
 8011fee:	4613      	mov	r3, r2
 8011ff0:	011b      	lsls	r3, r3, #4
 8011ff2:	4413      	add	r3, r2
 8011ff4:	009b      	lsls	r3, r3, #2
 8011ff6:	4403      	add	r3, r0
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 8011ffc:	79f9      	ldrb	r1, [r7, #7]
 8011ffe:	7bba      	ldrb	r2, [r7, #14]
 8012000:	486b      	ldr	r0, [pc, #428]	@ (80121b0 <drv_uartInitInstance+0x228>)
 8012002:	460b      	mov	r3, r1
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	440b      	add	r3, r1
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	4403      	add	r3, r0
 801200c:	3308      	adds	r3, #8
 801200e:	6819      	ldr	r1, [r3, #0]
 8012010:	4869      	ldr	r0, [pc, #420]	@ (80121b8 <drv_uartInitInstance+0x230>)
 8012012:	4613      	mov	r3, r2
 8012014:	011b      	lsls	r3, r3, #4
 8012016:	4413      	add	r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	4403      	add	r3, r0
 801201c:	3308      	adds	r3, #8
 801201e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 8012020:	79f9      	ldrb	r1, [r7, #7]
 8012022:	7bba      	ldrb	r2, [r7, #14]
 8012024:	4862      	ldr	r0, [pc, #392]	@ (80121b0 <drv_uartInitInstance+0x228>)
 8012026:	460b      	mov	r3, r1
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	440b      	add	r3, r1
 801202c:	00db      	lsls	r3, r3, #3
 801202e:	4403      	add	r3, r0
 8012030:	330c      	adds	r3, #12
 8012032:	6819      	ldr	r1, [r3, #0]
 8012034:	4860      	ldr	r0, [pc, #384]	@ (80121b8 <drv_uartInitInstance+0x230>)
 8012036:	4613      	mov	r3, r2
 8012038:	011b      	lsls	r3, r3, #4
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4403      	add	r3, r0
 8012040:	330c      	adds	r3, #12
 8012042:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 8012044:	79f9      	ldrb	r1, [r7, #7]
 8012046:	7bba      	ldrb	r2, [r7, #14]
 8012048:	4859      	ldr	r0, [pc, #356]	@ (80121b0 <drv_uartInitInstance+0x228>)
 801204a:	460b      	mov	r3, r1
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	440b      	add	r3, r1
 8012050:	00db      	lsls	r3, r3, #3
 8012052:	4403      	add	r3, r0
 8012054:	3310      	adds	r3, #16
 8012056:	6819      	ldr	r1, [r3, #0]
 8012058:	4857      	ldr	r0, [pc, #348]	@ (80121b8 <drv_uartInitInstance+0x230>)
 801205a:	4613      	mov	r3, r2
 801205c:	011b      	lsls	r3, r3, #4
 801205e:	4413      	add	r3, r2
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	4403      	add	r3, r0
 8012064:	3310      	adds	r3, #16
 8012066:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 8012068:	79f9      	ldrb	r1, [r7, #7]
 801206a:	7bba      	ldrb	r2, [r7, #14]
 801206c:	4850      	ldr	r0, [pc, #320]	@ (80121b0 <drv_uartInitInstance+0x228>)
 801206e:	460b      	mov	r3, r1
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	440b      	add	r3, r1
 8012074:	00db      	lsls	r3, r3, #3
 8012076:	4403      	add	r3, r0
 8012078:	3314      	adds	r3, #20
 801207a:	6819      	ldr	r1, [r3, #0]
 801207c:	484e      	ldr	r0, [pc, #312]	@ (80121b8 <drv_uartInitInstance+0x230>)
 801207e:	4613      	mov	r3, r2
 8012080:	011b      	lsls	r3, r3, #4
 8012082:	4413      	add	r3, r2
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	4403      	add	r3, r0
 8012088:	3314      	adds	r3, #20
 801208a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 801208c:	79f9      	ldrb	r1, [r7, #7]
 801208e:	7bba      	ldrb	r2, [r7, #14]
 8012090:	4847      	ldr	r0, [pc, #284]	@ (80121b0 <drv_uartInitInstance+0x228>)
 8012092:	460b      	mov	r3, r1
 8012094:	009b      	lsls	r3, r3, #2
 8012096:	440b      	add	r3, r1
 8012098:	00db      	lsls	r3, r3, #3
 801209a:	4403      	add	r3, r0
 801209c:	3318      	adds	r3, #24
 801209e:	6819      	ldr	r1, [r3, #0]
 80120a0:	4845      	ldr	r0, [pc, #276]	@ (80121b8 <drv_uartInitInstance+0x230>)
 80120a2:	4613      	mov	r3, r2
 80120a4:	011b      	lsls	r3, r3, #4
 80120a6:	4413      	add	r3, r2
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4403      	add	r3, r0
 80120ac:	3318      	adds	r3, #24
 80120ae:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 80120b0:	79f9      	ldrb	r1, [r7, #7]
 80120b2:	7bba      	ldrb	r2, [r7, #14]
 80120b4:	483e      	ldr	r0, [pc, #248]	@ (80121b0 <drv_uartInitInstance+0x228>)
 80120b6:	460b      	mov	r3, r1
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	440b      	add	r3, r1
 80120bc:	00db      	lsls	r3, r3, #3
 80120be:	4403      	add	r3, r0
 80120c0:	331c      	adds	r3, #28
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	483c      	ldr	r0, [pc, #240]	@ (80121b8 <drv_uartInitInstance+0x230>)
 80120c6:	4613      	mov	r3, r2
 80120c8:	011b      	lsls	r3, r3, #4
 80120ca:	4413      	add	r3, r2
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	4403      	add	r3, r0
 80120d0:	331c      	adds	r3, #28
 80120d2:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 80120d4:	7bba      	ldrb	r2, [r7, #14]
 80120d6:	4613      	mov	r3, r2
 80120d8:	011b      	lsls	r3, r3, #4
 80120da:	4413      	add	r3, r2
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	4a36      	ldr	r2, [pc, #216]	@ (80121b8 <drv_uartInitInstance+0x230>)
 80120e0:	4413      	add	r3, r2
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7f5 f8b6 	bl	8007254 <HAL_UART_Init>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d14a      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 80120ee:	7bbb      	ldrb	r3, [r7, #14]
 80120f0:	009b      	lsls	r3, r3, #2
 80120f2:	4a32      	ldr	r2, [pc, #200]	@ (80121bc <drv_uartInitInstance+0x234>)
 80120f4:	4413      	add	r3, r2
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fa fca2 	bl	800ca40 <gos_mutexInit>
 80120fc:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 80120fe:	2b55      	cmp	r3, #85	@ 0x55
 8012100:	d140      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8012102:	7bbb      	ldrb	r3, [r7, #14]
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4a2e      	ldr	r2, [pc, #184]	@ (80121c0 <drv_uartInitInstance+0x238>)
 8012108:	4413      	add	r3, r2
 801210a:	4618      	mov	r0, r3
 801210c:	f7fa fc98 	bl	800ca40 <gos_mutexInit>
 8012110:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8012112:	2b55      	cmp	r3, #85	@ 0x55
 8012114:	d136      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8012116:	7bba      	ldrb	r2, [r7, #14]
 8012118:	4613      	mov	r3, r2
 801211a:	005b      	lsls	r3, r3, #1
 801211c:	4413      	add	r3, r2
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	4a28      	ldr	r2, [pc, #160]	@ (80121c4 <drv_uartInitInstance+0x23c>)
 8012122:	4413      	add	r3, r2
 8012124:	4618      	mov	r0, r3
 8012126:	f7fc f8a9 	bl	800e27c <gos_triggerInit>
 801212a:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 801212c:	2b55      	cmp	r3, #85	@ 0x55
 801212e:	d129      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8012130:	7bba      	ldrb	r2, [r7, #14]
 8012132:	4613      	mov	r3, r2
 8012134:	005b      	lsls	r3, r3, #1
 8012136:	4413      	add	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4a23      	ldr	r2, [pc, #140]	@ (80121c8 <drv_uartInitInstance+0x240>)
 801213c:	4413      	add	r3, r2
 801213e:	4618      	mov	r0, r3
 8012140:	f7fc f89c 	bl	800e27c <gos_triggerInit>
 8012144:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8012146:	2b55      	cmp	r3, #85	@ 0x55
 8012148:	d11c      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 801214a:	7bba      	ldrb	r2, [r7, #14]
 801214c:	4613      	mov	r3, r2
 801214e:	005b      	lsls	r3, r3, #1
 8012150:	4413      	add	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4a1b      	ldr	r2, [pc, #108]	@ (80121c4 <drv_uartInitInstance+0x23c>)
 8012156:	4413      	add	r3, r2
 8012158:	4618      	mov	r0, r3
 801215a:	f7fc f8ab 	bl	800e2b4 <gos_triggerReset>
 801215e:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8012160:	2b55      	cmp	r3, #85	@ 0x55
 8012162:	d10f      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 8012164:	7bba      	ldrb	r2, [r7, #14]
 8012166:	4613      	mov	r3, r2
 8012168:	005b      	lsls	r3, r3, #1
 801216a:	4413      	add	r3, r2
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	4a16      	ldr	r2, [pc, #88]	@ (80121c8 <drv_uartInitInstance+0x240>)
 8012170:	4413      	add	r3, r2
 8012172:	4618      	mov	r0, r3
 8012174:	f7fc f89e 	bl	800e2b4 <gos_triggerReset>
 8012178:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 801217a:	2b55      	cmp	r3, #85	@ 0x55
 801217c:	d102      	bne.n	8012184 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 801217e:	2355      	movs	r3, #85	@ 0x55
 8012180:	73fb      	strb	r3, [r7, #15]
 8012182:	e00c      	b.n	801219e <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 8012184:	4b11      	ldr	r3, [pc, #68]	@ (80121cc <drv_uartInitInstance+0x244>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f043 0304 	orr.w	r3, r3, #4
 801218c:	4a0f      	ldr	r2, [pc, #60]	@ (80121cc <drv_uartInitInstance+0x244>)
 801218e:	6013      	str	r3, [r2, #0]
 8012190:	e005      	b.n	801219e <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 8012192:	4b0e      	ldr	r3, [pc, #56]	@ (80121cc <drv_uartInitInstance+0x244>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f043 0302 	orr.w	r3, r3, #2
 801219a:	4a0c      	ldr	r2, [pc, #48]	@ (80121cc <drv_uartInitInstance+0x244>)
 801219c:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 801219e:	7bfb      	ldrb	r3, [r7, #15]
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3710      	adds	r7, #16
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	200003f4 	.word	0x200003f4
 80121ac:	cccccccd 	.word	0xcccccccd
 80121b0:	0801a64c 	.word	0x0801a64c
 80121b4:	20000ef4 	.word	0x20000ef4
 80121b8:	20004df4 	.word	0x20004df4
 80121bc:	20004f8c 	.word	0x20004f8c
 80121c0:	20004fa4 	.word	0x20004fa4
 80121c4:	20004fbc 	.word	0x20004fbc
 80121c8:	20005004 	.word	0x20005004
 80121cc:	20004df0 	.word	0x20004df0

080121d0 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60b9      	str	r1, [r7, #8]
 80121d8:	607b      	str	r3, [r7, #4]
 80121da:	4603      	mov	r3, r0
 80121dc:	73fb      	strb	r3, [r7, #15]
 80121de:	4613      	mov	r3, r2
 80121e0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 80121e2:	23ae      	movs	r3, #174	@ 0xae
 80121e4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 80121e6:	4b1d      	ldr	r3, [pc, #116]	@ (801225c <drv_uartTransmitBlocking+0x8c>)
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	3301      	adds	r3, #1
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	4b1b      	ldr	r3, [pc, #108]	@ (801225c <drv_uartTransmitBlocking+0x8c>)
 80121f0:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 80121f2:	7bfa      	ldrb	r2, [r7, #15]
 80121f4:	4613      	mov	r3, r2
 80121f6:	011b      	lsls	r3, r3, #4
 80121f8:	4413      	add	r3, r2
 80121fa:	009b      	lsls	r3, r3, #2
 80121fc:	4a18      	ldr	r2, [pc, #96]	@ (8012260 <drv_uartTransmitBlocking+0x90>)
 80121fe:	4413      	add	r3, r2
 8012200:	4618      	mov	r0, r3
 8012202:	f7f5 f9f9 	bl	80075f8 <HAL_UART_Abort>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d111      	bne.n	8012230 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 801220c:	7bfa      	ldrb	r2, [r7, #15]
 801220e:	4613      	mov	r3, r2
 8012210:	011b      	lsls	r3, r3, #4
 8012212:	4413      	add	r3, r2
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	4a12      	ldr	r2, [pc, #72]	@ (8012260 <drv_uartTransmitBlocking+0x90>)
 8012218:	1898      	adds	r0, r3, r2
 801221a:	89ba      	ldrh	r2, [r7, #12]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	68b9      	ldr	r1, [r7, #8]
 8012220:	f7f5 f865 	bl	80072ee <HAL_UART_Transmit>
 8012224:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8012226:	2b00      	cmp	r3, #0
 8012228:	d102      	bne.n	8012230 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 801222a:	2355      	movs	r3, #85	@ 0x55
 801222c:	75fb      	strb	r3, [r7, #23]
 801222e:	e005      	b.n	801223c <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 8012230:	4b0c      	ldr	r3, [pc, #48]	@ (8012264 <drv_uartTransmitBlocking+0x94>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f043 0310 	orr.w	r3, r3, #16
 8012238:	4a0a      	ldr	r2, [pc, #40]	@ (8012264 <drv_uartTransmitBlocking+0x94>)
 801223a:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 801223c:	4b07      	ldr	r3, [pc, #28]	@ (801225c <drv_uartTransmitBlocking+0x8c>)
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d005      	beq.n	8012250 <drv_uartTransmitBlocking+0x80>
 8012244:	4b05      	ldr	r3, [pc, #20]	@ (801225c <drv_uartTransmitBlocking+0x8c>)
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	3b01      	subs	r3, #1
 801224a:	b2da      	uxtb	r2, r3
 801224c:	4b03      	ldr	r3, [pc, #12]	@ (801225c <drv_uartTransmitBlocking+0x8c>)
 801224e:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 8012250:	7dfb      	ldrb	r3, [r7, #23]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3718      	adds	r7, #24
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	20001961 	.word	0x20001961
 8012260:	20004df4 	.word	0x20004df4
 8012264:	20004df0 	.word	0x20004df0

08012268 <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b086      	sub	sp, #24
 801226c:	af00      	add	r7, sp, #0
 801226e:	60b9      	str	r1, [r7, #8]
 8012270:	607b      	str	r3, [r7, #4]
 8012272:	4603      	mov	r3, r0
 8012274:	73fb      	strb	r3, [r7, #15]
 8012276:	4613      	mov	r3, r2
 8012278:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 801227a:	23ae      	movs	r3, #174	@ 0xae
 801227c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 801227e:	7bfb      	ldrb	r3, [r7, #15]
 8012280:	009b      	lsls	r3, r3, #2
 8012282:	4a2d      	ldr	r2, [pc, #180]	@ (8012338 <drv_uartTransmitDMA+0xd0>)
 8012284:	4413      	add	r3, r2
 8012286:	6879      	ldr	r1, [r7, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	f7fa fbf3 	bl	800ca74 <gos_mutexLock>
 801228e:	4603      	mov	r3, r0
 8012290:	2b55      	cmp	r3, #85	@ 0x55
 8012292:	d13e      	bne.n	8012312 <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 8012294:	7bfa      	ldrb	r2, [r7, #15]
 8012296:	4613      	mov	r3, r2
 8012298:	011b      	lsls	r3, r3, #4
 801229a:	4413      	add	r3, r2
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	4a27      	ldr	r2, [pc, #156]	@ (801233c <drv_uartTransmitDMA+0xd4>)
 80122a0:	4413      	add	r3, r2
 80122a2:	89ba      	ldrh	r2, [r7, #12]
 80122a4:	68b9      	ldr	r1, [r7, #8]
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7f5 f8f8 	bl	800749c <HAL_UART_Transmit_DMA>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d11e      	bne.n	80122f0 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80122b2:	7bfa      	ldrb	r2, [r7, #15]
 80122b4:	4613      	mov	r3, r2
 80122b6:	005b      	lsls	r3, r3, #1
 80122b8:	4413      	add	r3, r2
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	4a20      	ldr	r2, [pc, #128]	@ (8012340 <drv_uartTransmitDMA+0xd8>)
 80122be:	4413      	add	r3, r2
 80122c0:	6a3a      	ldr	r2, [r7, #32]
 80122c2:	2101      	movs	r1, #1
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fc f84d 	bl	800e364 <gos_triggerWait>
 80122ca:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 80122cc:	2b55      	cmp	r3, #85	@ 0x55
 80122ce:	d10f      	bne.n	80122f0 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 80122d0:	7bfa      	ldrb	r2, [r7, #15]
 80122d2:	4613      	mov	r3, r2
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	009b      	lsls	r3, r3, #2
 80122da:	4a19      	ldr	r2, [pc, #100]	@ (8012340 <drv_uartTransmitDMA+0xd8>)
 80122dc:	4413      	add	r3, r2
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fb ffe8 	bl	800e2b4 <gos_triggerReset>
 80122e4:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80122e6:	2b55      	cmp	r3, #85	@ 0x55
 80122e8:	d102      	bne.n	80122f0 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 80122ea:	2355      	movs	r3, #85	@ 0x55
 80122ec:	75fb      	strb	r3, [r7, #23]
 80122ee:	e016      	b.n	801231e <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 80122f0:	7bfa      	ldrb	r2, [r7, #15]
 80122f2:	4613      	mov	r3, r2
 80122f4:	011b      	lsls	r3, r3, #4
 80122f6:	4413      	add	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	4a10      	ldr	r2, [pc, #64]	@ (801233c <drv_uartTransmitDMA+0xd4>)
 80122fc:	4413      	add	r3, r2
 80122fe:	4618      	mov	r0, r3
 8012300:	f7f5 fa66 	bl	80077d0 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 8012304:	4b0f      	ldr	r3, [pc, #60]	@ (8012344 <drv_uartTransmitDMA+0xdc>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801230c:	4a0d      	ldr	r2, [pc, #52]	@ (8012344 <drv_uartTransmitDMA+0xdc>)
 801230e:	6013      	str	r3, [r2, #0]
 8012310:	e005      	b.n	801231e <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 8012312:	4b0c      	ldr	r3, [pc, #48]	@ (8012344 <drv_uartTransmitDMA+0xdc>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f043 0320 	orr.w	r3, r3, #32
 801231a:	4a0a      	ldr	r2, [pc, #40]	@ (8012344 <drv_uartTransmitDMA+0xdc>)
 801231c:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 801231e:	7bfb      	ldrb	r3, [r7, #15]
 8012320:	009b      	lsls	r3, r3, #2
 8012322:	4a05      	ldr	r2, [pc, #20]	@ (8012338 <drv_uartTransmitDMA+0xd0>)
 8012324:	4413      	add	r3, r2
 8012326:	4618      	mov	r0, r3
 8012328:	f7fa fcaa 	bl	800cc80 <gos_mutexUnlock>

    return uartTransmitResult;
 801232c:	7dfb      	ldrb	r3, [r7, #23]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3718      	adds	r7, #24
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	20004fa4 	.word	0x20004fa4
 801233c:	20004df4 	.word	0x20004df4
 8012340:	20005004 	.word	0x20005004
 8012344:	20004df0 	.word	0x20004df0

08012348 <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b086      	sub	sp, #24
 801234c:	af00      	add	r7, sp, #0
 801234e:	60b9      	str	r1, [r7, #8]
 8012350:	607b      	str	r3, [r7, #4]
 8012352:	4603      	mov	r3, r0
 8012354:	73fb      	strb	r3, [r7, #15]
 8012356:	4613      	mov	r3, r2
 8012358:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 801235a:	23ae      	movs	r3, #174	@ 0xae
 801235c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 801235e:	7bfb      	ldrb	r3, [r7, #15]
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	4a2d      	ldr	r2, [pc, #180]	@ (8012418 <drv_uartReceiveDMA+0xd0>)
 8012364:	4413      	add	r3, r2
 8012366:	6879      	ldr	r1, [r7, #4]
 8012368:	4618      	mov	r0, r3
 801236a:	f7fa fb83 	bl	800ca74 <gos_mutexLock>
 801236e:	4603      	mov	r3, r0
 8012370:	2b55      	cmp	r3, #85	@ 0x55
 8012372:	d13e      	bne.n	80123f2 <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 8012374:	7bfa      	ldrb	r2, [r7, #15]
 8012376:	4613      	mov	r3, r2
 8012378:	011b      	lsls	r3, r3, #4
 801237a:	4413      	add	r3, r2
 801237c:	009b      	lsls	r3, r3, #2
 801237e:	4a27      	ldr	r2, [pc, #156]	@ (801241c <drv_uartReceiveDMA+0xd4>)
 8012380:	4413      	add	r3, r2
 8012382:	89ba      	ldrh	r2, [r7, #12]
 8012384:	68b9      	ldr	r1, [r7, #8]
 8012386:	4618      	mov	r0, r3
 8012388:	f7f5 f906 	bl	8007598 <HAL_UART_Receive_DMA>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d11e      	bne.n	80123d0 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8012392:	7bfa      	ldrb	r2, [r7, #15]
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	009b      	lsls	r3, r3, #2
 801239c:	4a20      	ldr	r2, [pc, #128]	@ (8012420 <drv_uartReceiveDMA+0xd8>)
 801239e:	4413      	add	r3, r2
 80123a0:	6a3a      	ldr	r2, [r7, #32]
 80123a2:	2101      	movs	r1, #1
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fb ffdd 	bl	800e364 <gos_triggerWait>
 80123aa:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 80123ac:	2b55      	cmp	r3, #85	@ 0x55
 80123ae:	d10f      	bne.n	80123d0 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 80123b0:	7bfa      	ldrb	r2, [r7, #15]
 80123b2:	4613      	mov	r3, r2
 80123b4:	005b      	lsls	r3, r3, #1
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	4a19      	ldr	r2, [pc, #100]	@ (8012420 <drv_uartReceiveDMA+0xd8>)
 80123bc:	4413      	add	r3, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fb ff78 	bl	800e2b4 <gos_triggerReset>
 80123c4:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80123c6:	2b55      	cmp	r3, #85	@ 0x55
 80123c8:	d102      	bne.n	80123d0 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 80123ca:	2355      	movs	r3, #85	@ 0x55
 80123cc:	75fb      	strb	r3, [r7, #23]
 80123ce:	e016      	b.n	80123fe <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 80123d0:	7bfa      	ldrb	r2, [r7, #15]
 80123d2:	4613      	mov	r3, r2
 80123d4:	011b      	lsls	r3, r3, #4
 80123d6:	4413      	add	r3, r2
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	4a10      	ldr	r2, [pc, #64]	@ (801241c <drv_uartReceiveDMA+0xd4>)
 80123dc:	4413      	add	r3, r2
 80123de:	4618      	mov	r0, r3
 80123e0:	f7f5 f9f6 	bl	80077d0 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 80123e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012424 <drv_uartReceiveDMA+0xdc>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80123ec:	4a0d      	ldr	r2, [pc, #52]	@ (8012424 <drv_uartReceiveDMA+0xdc>)
 80123ee:	6013      	str	r3, [r2, #0]
 80123f0:	e005      	b.n	80123fe <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 80123f2:	4b0c      	ldr	r3, [pc, #48]	@ (8012424 <drv_uartReceiveDMA+0xdc>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80123fa:	4a0a      	ldr	r2, [pc, #40]	@ (8012424 <drv_uartReceiveDMA+0xdc>)
 80123fc:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	4a05      	ldr	r2, [pc, #20]	@ (8012418 <drv_uartReceiveDMA+0xd0>)
 8012404:	4413      	add	r3, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f7fa fc3a 	bl	800cc80 <gos_mutexUnlock>

    return uartReceiveResult;
 801240c:	7dfb      	ldrb	r3, [r7, #23]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20004f8c 	.word	0x20004f8c
 801241c:	20004df4 	.word	0x20004df4
 8012420:	20004fbc 	.word	0x20004fbc
 8012424:	20004df0 	.word	0x20004df0

08012428 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	60b9      	str	r1, [r7, #8]
 8012430:	607b      	str	r3, [r7, #4]
 8012432:	4603      	mov	r3, r0
 8012434:	73fb      	strb	r3, [r7, #15]
 8012436:	4613      	mov	r3, r2
 8012438:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 801243a:	23ae      	movs	r3, #174	@ 0xae
 801243c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 801243e:	7bfb      	ldrb	r3, [r7, #15]
 8012440:	009b      	lsls	r3, r3, #2
 8012442:	4a2d      	ldr	r2, [pc, #180]	@ (80124f8 <drv_uartTransmitIT+0xd0>)
 8012444:	4413      	add	r3, r2
 8012446:	6879      	ldr	r1, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7fa fb13 	bl	800ca74 <gos_mutexLock>
 801244e:	4603      	mov	r3, r0
 8012450:	2b55      	cmp	r3, #85	@ 0x55
 8012452:	d13e      	bne.n	80124d2 <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 8012454:	7bfa      	ldrb	r2, [r7, #15]
 8012456:	4613      	mov	r3, r2
 8012458:	011b      	lsls	r3, r3, #4
 801245a:	4413      	add	r3, r2
 801245c:	009b      	lsls	r3, r3, #2
 801245e:	4a27      	ldr	r2, [pc, #156]	@ (80124fc <drv_uartTransmitIT+0xd4>)
 8012460:	4413      	add	r3, r2
 8012462:	89ba      	ldrh	r2, [r7, #12]
 8012464:	68b9      	ldr	r1, [r7, #8]
 8012466:	4618      	mov	r0, r3
 8012468:	f7f4 ffd3 	bl	8007412 <HAL_UART_Transmit_IT>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d11e      	bne.n	80124b0 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8012472:	7bfa      	ldrb	r2, [r7, #15]
 8012474:	4613      	mov	r3, r2
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	4413      	add	r3, r2
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	4a20      	ldr	r2, [pc, #128]	@ (8012500 <drv_uartTransmitIT+0xd8>)
 801247e:	4413      	add	r3, r2
 8012480:	6a3a      	ldr	r2, [r7, #32]
 8012482:	2101      	movs	r1, #1
 8012484:	4618      	mov	r0, r3
 8012486:	f7fb ff6d 	bl	800e364 <gos_triggerWait>
 801248a:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 801248c:	2b55      	cmp	r3, #85	@ 0x55
 801248e:	d10f      	bne.n	80124b0 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8012490:	7bfa      	ldrb	r2, [r7, #15]
 8012492:	4613      	mov	r3, r2
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	4413      	add	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4a19      	ldr	r2, [pc, #100]	@ (8012500 <drv_uartTransmitIT+0xd8>)
 801249c:	4413      	add	r3, r2
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fb ff08 	bl	800e2b4 <gos_triggerReset>
 80124a4:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80124a6:	2b55      	cmp	r3, #85	@ 0x55
 80124a8:	d102      	bne.n	80124b0 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 80124aa:	2355      	movs	r3, #85	@ 0x55
 80124ac:	75fb      	strb	r3, [r7, #23]
 80124ae:	e016      	b.n	80124de <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 80124b0:	7bfa      	ldrb	r2, [r7, #15]
 80124b2:	4613      	mov	r3, r2
 80124b4:	011b      	lsls	r3, r3, #4
 80124b6:	4413      	add	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4a10      	ldr	r2, [pc, #64]	@ (80124fc <drv_uartTransmitIT+0xd4>)
 80124bc:	4413      	add	r3, r2
 80124be:	4618      	mov	r0, r3
 80124c0:	f7f5 f986 	bl	80077d0 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 80124c4:	4b0f      	ldr	r3, [pc, #60]	@ (8012504 <drv_uartTransmitIT+0xdc>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80124cc:	4a0d      	ldr	r2, [pc, #52]	@ (8012504 <drv_uartTransmitIT+0xdc>)
 80124ce:	6013      	str	r3, [r2, #0]
 80124d0:	e005      	b.n	80124de <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 80124d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012504 <drv_uartTransmitIT+0xdc>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80124da:	4a0a      	ldr	r2, [pc, #40]	@ (8012504 <drv_uartTransmitIT+0xdc>)
 80124dc:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 80124de:	7bfb      	ldrb	r3, [r7, #15]
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	4a05      	ldr	r2, [pc, #20]	@ (80124f8 <drv_uartTransmitIT+0xd0>)
 80124e4:	4413      	add	r3, r2
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7fa fbca 	bl	800cc80 <gos_mutexUnlock>

    return uartTransmitResult;
 80124ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3718      	adds	r7, #24
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	20004fa4 	.word	0x20004fa4
 80124fc:	20004df4 	.word	0x20004df4
 8012500:	20005004 	.word	0x20005004
 8012504:	20004df0 	.word	0x20004df0

08012508 <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 801250c:	4b16      	ldr	r3, [pc, #88]	@ (8012568 <USART1_IRQHandler+0x60>)
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d105      	bne.n	8012520 <USART1_IRQHandler+0x18>
 8012514:	4b15      	ldr	r3, [pc, #84]	@ (801256c <USART1_IRQHandler+0x64>)
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	3301      	adds	r3, #1
 801251a:	b2da      	uxtb	r2, r3
 801251c:	4b13      	ldr	r3, [pc, #76]	@ (801256c <USART1_IRQHandler+0x64>)
 801251e:	701a      	strb	r2, [r3, #0]
 8012520:	4b11      	ldr	r3, [pc, #68]	@ (8012568 <USART1_IRQHandler+0x60>)
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	3301      	adds	r3, #1
 8012526:	b2da      	uxtb	r2, r3
 8012528:	4b0f      	ldr	r3, [pc, #60]	@ (8012568 <USART1_IRQHandler+0x60>)
 801252a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 801252c:	4810      	ldr	r0, [pc, #64]	@ (8012570 <USART1_IRQHandler+0x68>)
 801252e:	f7f5 fa63 	bl	80079f8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8012532:	4b0d      	ldr	r3, [pc, #52]	@ (8012568 <USART1_IRQHandler+0x60>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d005      	beq.n	8012546 <USART1_IRQHandler+0x3e>
 801253a:	4b0b      	ldr	r3, [pc, #44]	@ (8012568 <USART1_IRQHandler+0x60>)
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	3b01      	subs	r3, #1
 8012540:	b2da      	uxtb	r2, r3
 8012542:	4b09      	ldr	r3, [pc, #36]	@ (8012568 <USART1_IRQHandler+0x60>)
 8012544:	701a      	strb	r2, [r3, #0]
 8012546:	4b08      	ldr	r3, [pc, #32]	@ (8012568 <USART1_IRQHandler+0x60>)
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d109      	bne.n	8012562 <USART1_IRQHandler+0x5a>
 801254e:	4b07      	ldr	r3, [pc, #28]	@ (801256c <USART1_IRQHandler+0x64>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d005      	beq.n	8012562 <USART1_IRQHandler+0x5a>
 8012556:	4b05      	ldr	r3, [pc, #20]	@ (801256c <USART1_IRQHandler+0x64>)
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	3b01      	subs	r3, #1
 801255c:	b2da      	uxtb	r2, r3
 801255e:	4b03      	ldr	r3, [pc, #12]	@ (801256c <USART1_IRQHandler+0x64>)
 8012560:	701a      	strb	r2, [r3, #0]
}
 8012562:	bf00      	nop
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	20001962 	.word	0x20001962
 801256c:	20001961 	.word	0x20001961
 8012570:	20004df4 	.word	0x20004df4

08012574 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8012578:	4b16      	ldr	r3, [pc, #88]	@ (80125d4 <USART2_IRQHandler+0x60>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d105      	bne.n	801258c <USART2_IRQHandler+0x18>
 8012580:	4b15      	ldr	r3, [pc, #84]	@ (80125d8 <USART2_IRQHandler+0x64>)
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	3301      	adds	r3, #1
 8012586:	b2da      	uxtb	r2, r3
 8012588:	4b13      	ldr	r3, [pc, #76]	@ (80125d8 <USART2_IRQHandler+0x64>)
 801258a:	701a      	strb	r2, [r3, #0]
 801258c:	4b11      	ldr	r3, [pc, #68]	@ (80125d4 <USART2_IRQHandler+0x60>)
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	3301      	adds	r3, #1
 8012592:	b2da      	uxtb	r2, r3
 8012594:	4b0f      	ldr	r3, [pc, #60]	@ (80125d4 <USART2_IRQHandler+0x60>)
 8012596:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 8012598:	4810      	ldr	r0, [pc, #64]	@ (80125dc <USART2_IRQHandler+0x68>)
 801259a:	f7f5 fa2d 	bl	80079f8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 801259e:	4b0d      	ldr	r3, [pc, #52]	@ (80125d4 <USART2_IRQHandler+0x60>)
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d005      	beq.n	80125b2 <USART2_IRQHandler+0x3e>
 80125a6:	4b0b      	ldr	r3, [pc, #44]	@ (80125d4 <USART2_IRQHandler+0x60>)
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	3b01      	subs	r3, #1
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	4b09      	ldr	r3, [pc, #36]	@ (80125d4 <USART2_IRQHandler+0x60>)
 80125b0:	701a      	strb	r2, [r3, #0]
 80125b2:	4b08      	ldr	r3, [pc, #32]	@ (80125d4 <USART2_IRQHandler+0x60>)
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d109      	bne.n	80125ce <USART2_IRQHandler+0x5a>
 80125ba:	4b07      	ldr	r3, [pc, #28]	@ (80125d8 <USART2_IRQHandler+0x64>)
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d005      	beq.n	80125ce <USART2_IRQHandler+0x5a>
 80125c2:	4b05      	ldr	r3, [pc, #20]	@ (80125d8 <USART2_IRQHandler+0x64>)
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	4b03      	ldr	r3, [pc, #12]	@ (80125d8 <USART2_IRQHandler+0x64>)
 80125cc:	701a      	strb	r2, [r3, #0]
}
 80125ce:	bf00      	nop
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	20001962 	.word	0x20001962
 80125d8:	20001961 	.word	0x20001961
 80125dc:	20004e38 	.word	0x20004e38

080125e0 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80125e4:	4b16      	ldr	r3, [pc, #88]	@ (8012640 <USART3_IRQHandler+0x60>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d105      	bne.n	80125f8 <USART3_IRQHandler+0x18>
 80125ec:	4b15      	ldr	r3, [pc, #84]	@ (8012644 <USART3_IRQHandler+0x64>)
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	3301      	adds	r3, #1
 80125f2:	b2da      	uxtb	r2, r3
 80125f4:	4b13      	ldr	r3, [pc, #76]	@ (8012644 <USART3_IRQHandler+0x64>)
 80125f6:	701a      	strb	r2, [r3, #0]
 80125f8:	4b11      	ldr	r3, [pc, #68]	@ (8012640 <USART3_IRQHandler+0x60>)
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	3301      	adds	r3, #1
 80125fe:	b2da      	uxtb	r2, r3
 8012600:	4b0f      	ldr	r3, [pc, #60]	@ (8012640 <USART3_IRQHandler+0x60>)
 8012602:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 8012604:	4810      	ldr	r0, [pc, #64]	@ (8012648 <USART3_IRQHandler+0x68>)
 8012606:	f7f5 f9f7 	bl	80079f8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 801260a:	4b0d      	ldr	r3, [pc, #52]	@ (8012640 <USART3_IRQHandler+0x60>)
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d005      	beq.n	801261e <USART3_IRQHandler+0x3e>
 8012612:	4b0b      	ldr	r3, [pc, #44]	@ (8012640 <USART3_IRQHandler+0x60>)
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	3b01      	subs	r3, #1
 8012618:	b2da      	uxtb	r2, r3
 801261a:	4b09      	ldr	r3, [pc, #36]	@ (8012640 <USART3_IRQHandler+0x60>)
 801261c:	701a      	strb	r2, [r3, #0]
 801261e:	4b08      	ldr	r3, [pc, #32]	@ (8012640 <USART3_IRQHandler+0x60>)
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d109      	bne.n	801263a <USART3_IRQHandler+0x5a>
 8012626:	4b07      	ldr	r3, [pc, #28]	@ (8012644 <USART3_IRQHandler+0x64>)
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d005      	beq.n	801263a <USART3_IRQHandler+0x5a>
 801262e:	4b05      	ldr	r3, [pc, #20]	@ (8012644 <USART3_IRQHandler+0x64>)
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	3b01      	subs	r3, #1
 8012634:	b2da      	uxtb	r2, r3
 8012636:	4b03      	ldr	r3, [pc, #12]	@ (8012644 <USART3_IRQHandler+0x64>)
 8012638:	701a      	strb	r2, [r3, #0]
}
 801263a:	bf00      	nop
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	20001962 	.word	0x20001962
 8012644:	20001961 	.word	0x20001961
 8012648:	20004e7c 	.word	0x20004e7c

0801264c <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8012650:	4b16      	ldr	r3, [pc, #88]	@ (80126ac <UART4_IRQHandler+0x60>)
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d105      	bne.n	8012664 <UART4_IRQHandler+0x18>
 8012658:	4b15      	ldr	r3, [pc, #84]	@ (80126b0 <UART4_IRQHandler+0x64>)
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	3301      	adds	r3, #1
 801265e:	b2da      	uxtb	r2, r3
 8012660:	4b13      	ldr	r3, [pc, #76]	@ (80126b0 <UART4_IRQHandler+0x64>)
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	4b11      	ldr	r3, [pc, #68]	@ (80126ac <UART4_IRQHandler+0x60>)
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	3301      	adds	r3, #1
 801266a:	b2da      	uxtb	r2, r3
 801266c:	4b0f      	ldr	r3, [pc, #60]	@ (80126ac <UART4_IRQHandler+0x60>)
 801266e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 8012670:	4810      	ldr	r0, [pc, #64]	@ (80126b4 <UART4_IRQHandler+0x68>)
 8012672:	f7f5 f9c1 	bl	80079f8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8012676:	4b0d      	ldr	r3, [pc, #52]	@ (80126ac <UART4_IRQHandler+0x60>)
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d005      	beq.n	801268a <UART4_IRQHandler+0x3e>
 801267e:	4b0b      	ldr	r3, [pc, #44]	@ (80126ac <UART4_IRQHandler+0x60>)
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	3b01      	subs	r3, #1
 8012684:	b2da      	uxtb	r2, r3
 8012686:	4b09      	ldr	r3, [pc, #36]	@ (80126ac <UART4_IRQHandler+0x60>)
 8012688:	701a      	strb	r2, [r3, #0]
 801268a:	4b08      	ldr	r3, [pc, #32]	@ (80126ac <UART4_IRQHandler+0x60>)
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d109      	bne.n	80126a6 <UART4_IRQHandler+0x5a>
 8012692:	4b07      	ldr	r3, [pc, #28]	@ (80126b0 <UART4_IRQHandler+0x64>)
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d005      	beq.n	80126a6 <UART4_IRQHandler+0x5a>
 801269a:	4b05      	ldr	r3, [pc, #20]	@ (80126b0 <UART4_IRQHandler+0x64>)
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	3b01      	subs	r3, #1
 80126a0:	b2da      	uxtb	r2, r3
 80126a2:	4b03      	ldr	r3, [pc, #12]	@ (80126b0 <UART4_IRQHandler+0x64>)
 80126a4:	701a      	strb	r2, [r3, #0]
}
 80126a6:	bf00      	nop
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	20001962 	.word	0x20001962
 80126b0:	20001961 	.word	0x20001961
 80126b4:	20004ec0 	.word	0x20004ec0

080126b8 <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80126bc:	4b16      	ldr	r3, [pc, #88]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d105      	bne.n	80126d0 <UART5_IRQHandler+0x18>
 80126c4:	4b15      	ldr	r3, [pc, #84]	@ (801271c <UART5_IRQHandler+0x64>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	3301      	adds	r3, #1
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	4b13      	ldr	r3, [pc, #76]	@ (801271c <UART5_IRQHandler+0x64>)
 80126ce:	701a      	strb	r2, [r3, #0]
 80126d0:	4b11      	ldr	r3, [pc, #68]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	3301      	adds	r3, #1
 80126d6:	b2da      	uxtb	r2, r3
 80126d8:	4b0f      	ldr	r3, [pc, #60]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126da:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 80126dc:	4810      	ldr	r0, [pc, #64]	@ (8012720 <UART5_IRQHandler+0x68>)
 80126de:	f7f5 f98b 	bl	80079f8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80126e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d005      	beq.n	80126f6 <UART5_IRQHandler+0x3e>
 80126ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	3b01      	subs	r3, #1
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	4b09      	ldr	r3, [pc, #36]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126f4:	701a      	strb	r2, [r3, #0]
 80126f6:	4b08      	ldr	r3, [pc, #32]	@ (8012718 <UART5_IRQHandler+0x60>)
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d109      	bne.n	8012712 <UART5_IRQHandler+0x5a>
 80126fe:	4b07      	ldr	r3, [pc, #28]	@ (801271c <UART5_IRQHandler+0x64>)
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d005      	beq.n	8012712 <UART5_IRQHandler+0x5a>
 8012706:	4b05      	ldr	r3, [pc, #20]	@ (801271c <UART5_IRQHandler+0x64>)
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	3b01      	subs	r3, #1
 801270c:	b2da      	uxtb	r2, r3
 801270e:	4b03      	ldr	r3, [pc, #12]	@ (801271c <UART5_IRQHandler+0x64>)
 8012710:	701a      	strb	r2, [r3, #0]
}
 8012712:	bf00      	nop
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	20001962 	.word	0x20001962
 801271c:	20001961 	.word	0x20001961
 8012720:	20004f04 	.word	0x20004f04

08012724 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8012728:	4b16      	ldr	r3, [pc, #88]	@ (8012784 <USART6_IRQHandler+0x60>)
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d105      	bne.n	801273c <USART6_IRQHandler+0x18>
 8012730:	4b15      	ldr	r3, [pc, #84]	@ (8012788 <USART6_IRQHandler+0x64>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	3301      	adds	r3, #1
 8012736:	b2da      	uxtb	r2, r3
 8012738:	4b13      	ldr	r3, [pc, #76]	@ (8012788 <USART6_IRQHandler+0x64>)
 801273a:	701a      	strb	r2, [r3, #0]
 801273c:	4b11      	ldr	r3, [pc, #68]	@ (8012784 <USART6_IRQHandler+0x60>)
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	3301      	adds	r3, #1
 8012742:	b2da      	uxtb	r2, r3
 8012744:	4b0f      	ldr	r3, [pc, #60]	@ (8012784 <USART6_IRQHandler+0x60>)
 8012746:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 8012748:	4810      	ldr	r0, [pc, #64]	@ (801278c <USART6_IRQHandler+0x68>)
 801274a:	f7f5 f955 	bl	80079f8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 801274e:	4b0d      	ldr	r3, [pc, #52]	@ (8012784 <USART6_IRQHandler+0x60>)
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d005      	beq.n	8012762 <USART6_IRQHandler+0x3e>
 8012756:	4b0b      	ldr	r3, [pc, #44]	@ (8012784 <USART6_IRQHandler+0x60>)
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	3b01      	subs	r3, #1
 801275c:	b2da      	uxtb	r2, r3
 801275e:	4b09      	ldr	r3, [pc, #36]	@ (8012784 <USART6_IRQHandler+0x60>)
 8012760:	701a      	strb	r2, [r3, #0]
 8012762:	4b08      	ldr	r3, [pc, #32]	@ (8012784 <USART6_IRQHandler+0x60>)
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d109      	bne.n	801277e <USART6_IRQHandler+0x5a>
 801276a:	4b07      	ldr	r3, [pc, #28]	@ (8012788 <USART6_IRQHandler+0x64>)
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d005      	beq.n	801277e <USART6_IRQHandler+0x5a>
 8012772:	4b05      	ldr	r3, [pc, #20]	@ (8012788 <USART6_IRQHandler+0x64>)
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	3b01      	subs	r3, #1
 8012778:	b2da      	uxtb	r2, r3
 801277a:	4b03      	ldr	r3, [pc, #12]	@ (8012788 <USART6_IRQHandler+0x64>)
 801277c:	701a      	strb	r2, [r3, #0]
}
 801277e:	bf00      	nop
 8012780:	bd80      	pop	{r7, pc}
 8012782:	bf00      	nop
 8012784:	20001962 	.word	0x20001962
 8012788:	20001961 	.word	0x20001961
 801278c:	20004f48 	.word	0x20004f48

08012790 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8012798:	2300      	movs	r3, #0
 801279a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 801279c:	2300      	movs	r3, #0
 801279e:	73fb      	strb	r3, [r7, #15]
 80127a0:	e015      	b.n	80127ce <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 80127a2:	7bfb      	ldrb	r3, [r7, #15]
 80127a4:	4a0e      	ldr	r2, [pc, #56]	@ (80127e0 <HAL_UART_TxCpltCallback+0x50>)
 80127a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d10a      	bne.n	80127c8 <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 80127b2:	7bfa      	ldrb	r2, [r7, #15]
 80127b4:	4613      	mov	r3, r2
 80127b6:	005b      	lsls	r3, r3, #1
 80127b8:	4413      	add	r3, r2
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4a09      	ldr	r2, [pc, #36]	@ (80127e4 <HAL_UART_TxCpltCallback+0x54>)
 80127be:	4413      	add	r3, r2
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7fb fe7f 	bl	800e4c4 <gos_triggerIncrement>
            break;
 80127c6:	e006      	b.n	80127d6 <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80127c8:	7bfb      	ldrb	r3, [r7, #15]
 80127ca:	3301      	adds	r3, #1
 80127cc:	73fb      	strb	r3, [r7, #15]
 80127ce:	7bfb      	ldrb	r3, [r7, #15]
 80127d0:	2b05      	cmp	r3, #5
 80127d2:	d9e6      	bls.n	80127a2 <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 80127d4:	bf00      	nop
 80127d6:	bf00      	nop
 80127d8:	3710      	adds	r7, #16
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	20000ef4 	.word	0x20000ef4
 80127e4:	20005004 	.word	0x20005004

080127e8 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 80127f0:	2300      	movs	r3, #0
 80127f2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80127f4:	2300      	movs	r3, #0
 80127f6:	73fb      	strb	r3, [r7, #15]
 80127f8:	e015      	b.n	8012826 <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
 80127fc:	4a0e      	ldr	r2, [pc, #56]	@ (8012838 <HAL_UART_RxCpltCallback+0x50>)
 80127fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	429a      	cmp	r2, r3
 8012808:	d10a      	bne.n	8012820 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 801280a:	7bfa      	ldrb	r2, [r7, #15]
 801280c:	4613      	mov	r3, r2
 801280e:	005b      	lsls	r3, r3, #1
 8012810:	4413      	add	r3, r2
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4a09      	ldr	r2, [pc, #36]	@ (801283c <HAL_UART_RxCpltCallback+0x54>)
 8012816:	4413      	add	r3, r2
 8012818:	4618      	mov	r0, r3
 801281a:	f7fb fe53 	bl	800e4c4 <gos_triggerIncrement>
            break;
 801281e:	e006      	b.n	801282e <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8012820:	7bfb      	ldrb	r3, [r7, #15]
 8012822:	3301      	adds	r3, #1
 8012824:	73fb      	strb	r3, [r7, #15]
 8012826:	7bfb      	ldrb	r3, [r7, #15]
 8012828:	2b05      	cmp	r3, #5
 801282a:	d9e6      	bls.n	80127fa <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 801282c:	bf00      	nop
 801282e:	bf00      	nop
 8012830:	3710      	adds	r7, #16
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	20000ef4 	.word	0x20000ef4
 801283c:	20004fbc 	.word	0x20004fbc

08012840 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8012840:	b480      	push	{r7}
 8012842:	b085      	sub	sp, #20
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 8012848:	2300      	movs	r3, #0
 801284a:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 801284c:	2300      	movs	r3, #0
 801284e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8012850:	2300      	movs	r3, #0
 8012852:	73fb      	strb	r3, [r7, #15]
 8012854:	e069      	b.n	801292a <HAL_UART_MspInit+0xea>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8012856:	7bfb      	ldrb	r3, [r7, #15]
 8012858:	4a39      	ldr	r2, [pc, #228]	@ (8012940 <HAL_UART_MspInit+0x100>)
 801285a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	429a      	cmp	r2, r3
 8012864:	d15e      	bne.n	8012924 <HAL_UART_MspInit+0xe4>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8012866:	2300      	movs	r3, #0
 8012868:	73bb      	strb	r3, [r7, #14]
 801286a:	e051      	b.n	8012910 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 801286c:	7bba      	ldrb	r2, [r7, #14]
 801286e:	4935      	ldr	r1, [pc, #212]	@ (8012944 <HAL_UART_MspInit+0x104>)
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	440b      	add	r3, r1
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	7bfa      	ldrb	r2, [r7, #15]
 801287e:	429a      	cmp	r2, r3
 8012880:	d143      	bne.n	801290a <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 8012882:	7bba      	ldrb	r2, [r7, #14]
 8012884:	492f      	ldr	r1, [pc, #188]	@ (8012944 <HAL_UART_MspInit+0x104>)
 8012886:	4613      	mov	r3, r2
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	4413      	add	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	440b      	add	r3, r1
 8012890:	3320      	adds	r3, #32
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d016      	beq.n	80128c6 <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 8012898:	7bba      	ldrb	r2, [r7, #14]
 801289a:	492a      	ldr	r1, [pc, #168]	@ (8012944 <HAL_UART_MspInit+0x104>)
 801289c:	4613      	mov	r3, r2
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	4413      	add	r3, r2
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	440b      	add	r3, r1
 80128a6:	3320      	adds	r3, #32
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	1d1a      	adds	r2, r3, #4
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80128b0:	7bba      	ldrb	r2, [r7, #14]
 80128b2:	4924      	ldr	r1, [pc, #144]	@ (8012944 <HAL_UART_MspInit+0x104>)
 80128b4:	4613      	mov	r3, r2
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	4413      	add	r3, r2
 80128ba:	00db      	lsls	r3, r3, #3
 80128bc:	440b      	add	r3, r1
 80128be:	3320      	adds	r3, #32
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 80128c6:	7bba      	ldrb	r2, [r7, #14]
 80128c8:	491e      	ldr	r1, [pc, #120]	@ (8012944 <HAL_UART_MspInit+0x104>)
 80128ca:	4613      	mov	r3, r2
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	4413      	add	r3, r2
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	440b      	add	r3, r1
 80128d4:	3324      	adds	r3, #36	@ 0x24
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d016      	beq.n	801290a <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 80128dc:	7bba      	ldrb	r2, [r7, #14]
 80128de:	4919      	ldr	r1, [pc, #100]	@ (8012944 <HAL_UART_MspInit+0x104>)
 80128e0:	4613      	mov	r3, r2
 80128e2:	009b      	lsls	r3, r3, #2
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	3324      	adds	r3, #36	@ 0x24
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	1d1a      	adds	r2, r3, #4
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80128f4:	7bba      	ldrb	r2, [r7, #14]
 80128f6:	4913      	ldr	r1, [pc, #76]	@ (8012944 <HAL_UART_MspInit+0x104>)
 80128f8:	4613      	mov	r3, r2
 80128fa:	009b      	lsls	r3, r3, #2
 80128fc:	4413      	add	r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	440b      	add	r3, r1
 8012902:	3324      	adds	r3, #36	@ 0x24
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	687a      	ldr	r2, [r7, #4]
 8012908:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 801290a:	7bbb      	ldrb	r3, [r7, #14]
 801290c:	3301      	adds	r3, #1
 801290e:	73bb      	strb	r3, [r7, #14]
 8012910:	7bba      	ldrb	r2, [r7, #14]
 8012912:	4b0d      	ldr	r3, [pc, #52]	@ (8012948 <HAL_UART_MspInit+0x108>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	490d      	ldr	r1, [pc, #52]	@ (801294c <HAL_UART_MspInit+0x10c>)
 8012918:	fba1 1303 	umull	r1, r3, r1, r3
 801291c:	095b      	lsrs	r3, r3, #5
 801291e:	429a      	cmp	r2, r3
 8012920:	d3a4      	bcc.n	801286c <HAL_UART_MspInit+0x2c>
                else
                {
                    // Continue.
                }
            }
            break;
 8012922:	e006      	b.n	8012932 <HAL_UART_MspInit+0xf2>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8012924:	7bfb      	ldrb	r3, [r7, #15]
 8012926:	3301      	adds	r3, #1
 8012928:	73fb      	strb	r3, [r7, #15]
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	2b05      	cmp	r3, #5
 801292e:	d992      	bls.n	8012856 <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8012930:	bf00      	nop
 8012932:	bf00      	nop
 8012934:	3714      	adds	r7, #20
 8012936:	46bd      	mov	sp, r7
 8012938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	20000ef4 	.word	0x20000ef4
 8012944:	0801a64c 	.word	0x0801a64c
 8012948:	200003f4 	.word	0x200003f4
 801294c:	cccccccd 	.word	0xcccccccd

08012950 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback (UART_HandleTypeDef* pHuart)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b088      	sub	sp, #32
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 8012958:	2300      	movs	r3, #0
 801295a:	77fb      	strb	r3, [r7, #31]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 801295c:	2300      	movs	r3, #0
 801295e:	77fb      	strb	r3, [r7, #31]
 8012960:	e03a      	b.n	80129d8 <HAL_UART_ErrorCallback+0x88>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8012962:	7ffb      	ldrb	r3, [r7, #31]
 8012964:	4a20      	ldr	r2, [pc, #128]	@ (80129e8 <HAL_UART_ErrorCallback+0x98>)
 8012966:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	429a      	cmp	r2, r3
 8012970:	d12f      	bne.n	80129d2 <HAL_UART_ErrorCallback+0x82>
        {
        	HAL_UART_Abort_IT(pHuart);
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f7f4 ff2c 	bl	80077d0 <HAL_UART_Abort_IT>

        	__HAL_UART_CLEAR_PEFLAG(pHuart);
 8012978:	2300      	movs	r3, #0
 801297a:	61bb      	str	r3, [r7, #24]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	61bb      	str	r3, [r7, #24]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	61bb      	str	r3, [r7, #24]
 801298c:	69bb      	ldr	r3, [r7, #24]
        	__HAL_UART_CLEAR_FEFLAG(pHuart);
 801298e:	2300      	movs	r3, #0
 8012990:	617b      	str	r3, [r7, #20]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	617b      	str	r3, [r7, #20]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	617b      	str	r3, [r7, #20]
 80129a2:	697b      	ldr	r3, [r7, #20]
        	__HAL_UART_CLEAR_NEFLAG(pHuart);
 80129a4:	2300      	movs	r3, #0
 80129a6:	613b      	str	r3, [r7, #16]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	613b      	str	r3, [r7, #16]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	613b      	str	r3, [r7, #16]
 80129b8:	693b      	ldr	r3, [r7, #16]
        	__HAL_UART_CLEAR_OREFLAG(pHuart);
 80129ba:	2300      	movs	r3, #0
 80129bc:	60fb      	str	r3, [r7, #12]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	60fb      	str	r3, [r7, #12]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	685b      	ldr	r3, [r3, #4]
 80129cc:	60fb      	str	r3, [r7, #12]
 80129ce:	68fb      	ldr	r3, [r7, #12]
        	break;
 80129d0:	e006      	b.n	80129e0 <HAL_UART_ErrorCallback+0x90>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 80129d2:	7ffb      	ldrb	r3, [r7, #31]
 80129d4:	3301      	adds	r3, #1
 80129d6:	77fb      	strb	r3, [r7, #31]
 80129d8:	7ffb      	ldrb	r3, [r7, #31]
 80129da:	2b05      	cmp	r3, #5
 80129dc:	d9c1      	bls.n	8012962 <HAL_UART_ErrorCallback+0x12>
        else
        {
        	// Continue.
        }
    }
}
 80129de:	bf00      	nop
 80129e0:	bf00      	nop
 80129e2:	3720      	adds	r7, #32
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	20000ef4 	.word	0x20000ef4

080129ec <drv_w25q64Init>:

/*
 * Function: drv_w25q64Init
 */
gos_result_t drv_w25q64Init (void_t* pDevice)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b084      	sub	sp, #16
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 80129f4:	2355      	movs	r3, #85	@ 0x55
 80129f6:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 80129f8:	2300      	movs	r3, #0
 80129fa:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_W25Q64_DEVICE_NULL);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d103      	bne.n	8012a0a <drv_w25q64Init+0x1e>
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	f043 0301 	orr.w	r3, r3, #1
 8012a08:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex), ((drv_w25q64Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_W25Q64_MUTEX_INIT);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	699b      	ldr	r3, [r3, #24]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d10d      	bne.n	8012a2e <drv_w25q64Init+0x42>
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	3302      	adds	r3, #2
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fa f812 	bl	800ca40 <gos_mutexInit>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b55      	cmp	r3, #85	@ 0x55
 8012a20:	d005      	beq.n	8012a2e <drv_w25q64Init+0x42>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	699b      	ldr	r3, [r3, #24]
 8012a26:	f043 0202 	orr.w	r2, r3, #2
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d102      	bne.n	8012a3a <drv_w25q64Init+0x4e>
 8012a34:	2355      	movs	r3, #85	@ 0x55
 8012a36:	73fb      	strb	r3, [r7, #15]
 8012a38:	e001      	b.n	8012a3e <drv_w25q64Init+0x52>
 8012a3a:	23ae      	movs	r3, #174	@ 0xae
 8012a3c:	73fb      	strb	r3, [r7, #15]

    return initResult;
 8012a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3710      	adds	r7, #16
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <drv_w25q64ReadData>:

/*
 * Function: drv_w25q64ReadData
 */
GOS_INLINE void_t drv_w25q64ReadData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b088      	sub	sp, #32
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
 8012a54:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage  = address / W25Q64_PAGE_SIZE;
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	0a1b      	lsrs	r3, r3, #8
 8012a5a:	61fb      	str	r3, [r7, #28]
    u8_t  offset     = address % W25Q64_PAGE_SIZE;
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	76fb      	strb	r3, [r7, #27]
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	021a      	lsls	r2, r3, #8
 8012a64:	7efb      	ldrb	r3, [r7, #27]
 8012a66:	4413      	add	r3, r2
 8012a68:	617b      	str	r3, [r7, #20]
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 8012a6a:	2303      	movs	r3, #3
 8012a6c:	743b      	strb	r3, [r7, #16]
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	0c1b      	lsrs	r3, r3, #16
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	747b      	strb	r3, [r7, #17]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	0a1b      	lsrs	r3, r3, #8
 8012a7a:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 8012a7c:	74bb      	strb	r3, [r7, #18]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 8012a82:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d030      	beq.n	8012aec <drv_w25q64ReadData+0xa4>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d02d      	beq.n	8012aec <drv_w25q64ReadData+0xa4>
	{
        DRV_ERROR_CHK_SET(
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d110      	bne.n	8012aba <drv_w25q64ReadData+0x72>
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	1c9a      	adds	r2, r3, #2
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	689b      	ldr	r3, [r3, #8]
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4610      	mov	r0, r2
 8012aa4:	f7f9 ffe6 	bl	800ca74 <gos_mutexLock>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b55      	cmp	r3, #85	@ 0x55
 8012aac:	d005      	beq.n	8012aba <drv_w25q64ReadData+0x72>
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	699b      	ldr	r3, [r3, #24]
 8012ab2:	f043 0204 	orr.w	r2, r3, #4
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		drv_w25q64ChipSelectLow(pDevice);
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f000 f9c9 	bl	8012e52 <drv_w25q64ChipSelectLow>
		drv_w25q64Write(pDevice, command, 4);
 8012ac0:	f107 0310 	add.w	r3, r7, #16
 8012ac4:	2204      	movs	r2, #4
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	f000 fa12 	bl	8012ef2 <drv_w25q64Write>
		drv_w25q64Read(pDevice, pData, size);
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	6879      	ldr	r1, [r7, #4]
 8012ad6:	68f8      	ldr	r0, [r7, #12]
 8012ad8:	f000 fa2f 	bl	8012f3a <drv_w25q64Read>
		drv_w25q64ChipSelectHigh(pDevice);
 8012adc:	68f8      	ldr	r0, [r7, #12]
 8012ade:	f000 f9c6 	bl	8012e6e <drv_w25q64ChipSelectHigh>

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	3302      	adds	r3, #2
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fa f8ca 	bl	800cc80 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 8012aec:	bf00      	nop
 8012aee:	3720      	adds	r7, #32
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <drv_w25q64WriteData>:

/*
 * Function: drv_w25q64WriteData
 */
GOS_INLINE void_t drv_w25q64WriteData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b090      	sub	sp, #64	@ 0x40
 8012af8:	af02      	add	r7, sp, #8
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
 8012b00:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage    = address / W25Q64_PAGE_SIZE;
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	0a1b      	lsrs	r3, r3, #8
 8012b06:	627b      	str	r3, [r7, #36]	@ 0x24
    u8_t  offset       = address % W25Q64_PAGE_SIZE;
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	u16_t startSector  = startPage / 16;
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b10:	091b      	lsrs	r3, r3, #4
 8012b12:	86fb      	strh	r3, [r7, #54]	@ 0x36
	u16_t endSector    = (startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE)) / 16;
 8012b14:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	0a1a      	lsrs	r2, r3, #8
 8012b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b22:	4413      	add	r3, r2
 8012b24:	091b      	lsrs	r3, r3, #4
 8012b26:	843b      	strh	r3, [r7, #32]
	u16_t numOfSectors = endSector - startSector + 1;
 8012b28:	8c3a      	ldrh	r2, [r7, #32]
 8012b2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012b2c:	1ad3      	subs	r3, r2, r3
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	3301      	adds	r3, #1
 8012b32:	83fb      	strh	r3, [r7, #30]
	u32_t sectorOffset = ((startPage % 16) * W25Q64_PAGE_SIZE) + offset;
 8012b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b36:	f003 030f 	and.w	r3, r3, #15
 8012b3a:	021a      	lsls	r2, r3, #8
 8012b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012b40:	4413      	add	r3, r2
 8012b42:	633b      	str	r3, [r7, #48]	@ 0x30
	u32_t dataIndx     = 0u;
 8012b44:	2300      	movs	r3, #0
 8012b46:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d065      	beq.n	8012c1a <drv_w25q64WriteData+0x126>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d062      	beq.n	8012c1a <drv_w25q64WriteData+0x126>
	{
        DRV_ERROR_CHK_SET(
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	699b      	ldr	r3, [r3, #24]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d110      	bne.n	8012b7e <drv_w25q64WriteData+0x8a>
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	1c9a      	adds	r2, r3, #2
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	689b      	ldr	r3, [r3, #8]
 8012b64:	4619      	mov	r1, r3
 8012b66:	4610      	mov	r0, r2
 8012b68:	f7f9 ff84 	bl	800ca74 <gos_mutexLock>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b55      	cmp	r3, #85	@ 0x55
 8012b70:	d005      	beq.n	8012b7e <drv_w25q64WriteData+0x8a>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	699b      	ldr	r3, [r3, #24]
 8012b76:	f043 0204 	orr.w	r2, r3, #4
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		for (u16_t i = 0u; i < numOfSectors; i++)
 8012b7e:	2300      	movs	r3, #0
 8012b80:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012b82:	e041      	b.n	8012c08 <drv_w25q64WriteData+0x114>
		{
			u32_t _startPage = startSector * 16;
 8012b84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012b86:	011b      	lsls	r3, r3, #4
 8012b88:	61bb      	str	r3, [r7, #24]

			//(void_t) memset(sectorBuffer, 0, SECTOR_SIZE);

			drv_w25q64ReadDataFast(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 8012b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	4b24      	ldr	r3, [pc, #144]	@ (8012c24 <drv_w25q64WriteData+0x130>)
 8012b92:	2200      	movs	r2, #0
 8012b94:	69b9      	ldr	r1, [r7, #24]
 8012b96:	68f8      	ldr	r0, [r7, #12]
 8012b98:	f000 f846 	bl	8012c28 <drv_w25q64ReadDataFast>

			u16_t bytesRem = drv_w25q64BytesToModify(size, sectorOffset);
 8012b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	6838      	ldr	r0, [r7, #0]
 8012ba4:	f000 f939 	bl	8012e1a <drv_w25q64BytesToModify>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	82fb      	strh	r3, [r7, #22]

			for (u16_t j = 0u; j < bytesRem; j++)
 8012bac:	2300      	movs	r3, #0
 8012bae:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012bb0:	e00d      	b.n	8012bce <drv_w25q64WriteData+0xda>
			{
				sectorBuffer[j + sectorOffset] = pData[j + dataIndx];
 8012bb2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb6:	4413      	add	r3, r2
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	441a      	add	r2, r3
 8012bbc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc0:	440b      	add	r3, r1
 8012bc2:	7811      	ldrb	r1, [r2, #0]
 8012bc4:	4a17      	ldr	r2, [pc, #92]	@ (8012c24 <drv_w25q64WriteData+0x130>)
 8012bc6:	54d1      	strb	r1, [r2, r3]
			for (u16_t j = 0u; j < bytesRem; j++)
 8012bc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012bca:	3301      	adds	r3, #1
 8012bcc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8012bce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8012bd0:	8afb      	ldrh	r3, [r7, #22]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d3ed      	bcc.n	8012bb2 <drv_w25q64WriteData+0xbe>
			}

			drv_w25q64WriteDataClean(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 8012bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	4b11      	ldr	r3, [pc, #68]	@ (8012c24 <drv_w25q64WriteData+0x130>)
 8012bde:	2200      	movs	r2, #0
 8012be0:	69b9      	ldr	r1, [r7, #24]
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f000 f854 	bl	8012c90 <drv_w25q64WriteDataClean>

			startSector++;
 8012be8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012bea:	3301      	adds	r3, #1
 8012bec:	86fb      	strh	r3, [r7, #54]	@ 0x36
			sectorOffset = 0;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	633b      	str	r3, [r7, #48]	@ 0x30
			dataIndx = dataIndx + bytesRem;
 8012bf2:	8afb      	ldrh	r3, [r7, #22]
 8012bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012bf6:	4413      	add	r3, r2
 8012bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			size = size - bytesRem;
 8012bfa:	8afb      	ldrh	r3, [r7, #22]
 8012bfc:	683a      	ldr	r2, [r7, #0]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	603b      	str	r3, [r7, #0]
		for (u16_t i = 0u; i < numOfSectors; i++)
 8012c02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012c04:	3301      	adds	r3, #1
 8012c06:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8012c08:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012c0a:	8bfb      	ldrh	r3, [r7, #30]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d3b9      	bcc.n	8012b84 <drv_w25q64WriteData+0x90>
		}

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	3302      	adds	r3, #2
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fa f833 	bl	800cc80 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 8012c1a:	bf00      	nop
 8012c1c:	3738      	adds	r7, #56	@ 0x38
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	2000504c 	.word	0x2000504c

08012c28 <drv_w25q64ReadDataFast>:
 * @param   size      : Size of data to be read.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ReadDataFast (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b088      	sub	sp, #32
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	603b      	str	r3, [r7, #0]
 8012c34:	4613      	mov	r3, r2
 8012c36:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	021a      	lsls	r2, r3, #8
 8012c3c:	79fb      	ldrb	r3, [r7, #7]
 8012c3e:	4413      	add	r3, r2
 8012c40:	61fb      	str	r3, [r7, #28]
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 8012c42:	230b      	movs	r3, #11
 8012c44:	753b      	strb	r3, [r7, #20]
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	0c1b      	lsrs	r3, r3, #16
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	757b      	strb	r3, [r7, #21]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 8012c4e:	69fb      	ldr	r3, [r7, #28]
 8012c50:	0a1b      	lsrs	r3, r3, #8
 8012c52:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 8012c54:	75bb      	strb	r3, [r7, #22]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 8012c5a:	75fb      	strb	r3, [r7, #23]
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	763b      	strb	r3, [r7, #24]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 8012c60:	68f8      	ldr	r0, [r7, #12]
 8012c62:	f000 f8f6 	bl	8012e52 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 5);
 8012c66:	f107 0314 	add.w	r3, r7, #20
 8012c6a:	2205      	movs	r2, #5
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	f000 f93f 	bl	8012ef2 <drv_w25q64Write>
	drv_w25q64Read(pDevice, pData, size);
 8012c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	461a      	mov	r2, r3
 8012c7a:	6839      	ldr	r1, [r7, #0]
 8012c7c:	68f8      	ldr	r0, [r7, #12]
 8012c7e:	f000 f95c 	bl	8012f3a <drv_w25q64Read>
	drv_w25q64ChipSelectHigh(pDevice);
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f000 f8f3 	bl	8012e6e <drv_w25q64ChipSelectHigh>
}
 8012c88:	bf00      	nop
 8012c8a:	3720      	adds	r7, #32
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <drv_w25q64WriteDataClean>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64WriteDataClean (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b090      	sub	sp, #64	@ 0x40
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	603b      	str	r3, [r7, #0]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t endPage      = startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE);
 8012ca0:	79fa      	ldrb	r2, [r7, #7]
 8012ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ca4:	4413      	add	r3, r2
 8012ca6:	3b01      	subs	r3, #1
 8012ca8:	0a1b      	lsrs	r3, r3, #8
 8012caa:	68ba      	ldr	r2, [r7, #8]
 8012cac:	4413      	add	r3, r2
 8012cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	u32_t numOfPages   = endPage - startPage + 1;
 8012cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	u16_t startSector  = startPage / 16;
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	091b      	lsrs	r3, r3, #4
 8012cbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	u16_t endSector    = endPage / 16;
 8012cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc2:	091b      	lsrs	r3, r3, #4
 8012cc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	u16_t numOfSectors = endSector - startSector + 1;
 8012cc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012cc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012cca:	1ad3      	subs	r3, r2, r3
 8012ccc:	b29b      	uxth	r3, r3
 8012cce:	3301      	adds	r3, #1
 8012cd0:	847b      	strh	r3, [r7, #34]	@ 0x22
	u32_t dataPosition = 0u;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u32_t idx;

    /*
     * Function code.
     */
	for (idx = 0u; idx < numOfSectors; idx++)
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012cda:	e00b      	b.n	8012cf4 <drv_w25q64WriteDataClean+0x64>
	{
		drv_w25q64EraseSector(pDevice, (startSector + idx));
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012ce2:	4413      	add	r3, r2
 8012ce4:	b29b      	uxth	r3, r3
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	68f8      	ldr	r0, [r7, #12]
 8012cea:	f000 f94a 	bl	8012f82 <drv_w25q64EraseSector>
	for (idx = 0u; idx < numOfSectors; idx++)
 8012cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012cf4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012cf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d3ef      	bcc.n	8012cdc <drv_w25q64WriteDataClean+0x4c>
	}

	(void_t) memset(pageWriteBuffer, 0, 266);
 8012cfc:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 8012d00:	2100      	movs	r1, #0
 8012d02:	4837      	ldr	r0, [pc, #220]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d04:	f003 ff4c 	bl	8016ba0 <memset>

	for (idx = 0; idx < numOfPages; idx++)
 8012d08:	2300      	movs	r3, #0
 8012d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d0c:	e05e      	b.n	8012dcc <drv_w25q64WriteDataClean+0x13c>
	{
		u32_t memAddress = (startPage * W25Q64_PAGE_SIZE) + offset;
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	021a      	lsls	r2, r3, #8
 8012d12:	79fb      	ldrb	r3, [r7, #7]
 8012d14:	4413      	add	r3, r2
 8012d16:	61fb      	str	r3, [r7, #28]
		u32_t bytesRem = drv_w25q64BytesToWrite(size, offset);
 8012d18:	79fb      	ldrb	r3, [r7, #7]
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012d20:	f000 f860 	bl	8012de4 <drv_w25q64BytesToWrite>
 8012d24:	61b8      	str	r0, [r7, #24]
		u32_t indx = 4;
 8012d26:	2304      	movs	r3, #4
 8012d28:	637b      	str	r3, [r7, #52]	@ 0x34

		drv_w25q64WriteEnable(pDevice);
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f000 f8ad 	bl	8012e8a <drv_w25q64WriteEnable>

		pageWriteBuffer[0] = 0x02;
 8012d30:	4b2b      	ldr	r3, [pc, #172]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d32:	2202      	movs	r2, #2
 8012d34:	701a      	strb	r2, [r3, #0]
		pageWriteBuffer[1] = (u8_t)((memAddress >> 16) & 0xFF);
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	0c1b      	lsrs	r3, r3, #16
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	4b28      	ldr	r3, [pc, #160]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d3e:	705a      	strb	r2, [r3, #1]
		pageWriteBuffer[2] = (u8_t)((memAddress >> 8) & 0xFF);
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	0a1b      	lsrs	r3, r3, #8
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	4b26      	ldr	r3, [pc, #152]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d48:	709a      	strb	r2, [r3, #2]
		pageWriteBuffer[3] = (u8_t)(memAddress & 0xFF);
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	b2da      	uxtb	r2, r3
 8012d4e:	4b24      	ldr	r3, [pc, #144]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d50:	70da      	strb	r2, [r3, #3]

		u16_t bytesToSend = bytesRem + indx;
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	4413      	add	r3, r2
 8012d5c:	82fb      	strh	r3, [r7, #22]

		for (u16_t i = 0; i < bytesRem; i++)
 8012d5e:	2300      	movs	r3, #0
 8012d60:	867b      	strh	r3, [r7, #50]	@ 0x32
 8012d62:	e00d      	b.n	8012d80 <drv_w25q64WriteDataClean+0xf0>
		{
			pageWriteBuffer[indx++] = pData[ i + dataPosition];
 8012d64:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8012d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d68:	4413      	add	r3, r2
 8012d6a:	683a      	ldr	r2, [r7, #0]
 8012d6c:	441a      	add	r2, r3
 8012d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d70:	1c59      	adds	r1, r3, #1
 8012d72:	6379      	str	r1, [r7, #52]	@ 0x34
 8012d74:	7811      	ldrb	r1, [r2, #0]
 8012d76:	4a1a      	ldr	r2, [pc, #104]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d78:	54d1      	strb	r1, [r2, r3]
		for (u16_t i = 0; i < bytesRem; i++)
 8012d7a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8012d80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012d82:	69ba      	ldr	r2, [r7, #24]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d8ed      	bhi.n	8012d64 <drv_w25q64WriteDataClean+0xd4>
		}

		drv_w25q64ChipSelectLow(pDevice);
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	f000 f862 	bl	8012e52 <drv_w25q64ChipSelectLow>

		drv_w25q64Write(pDevice, pageWriteBuffer, bytesToSend);
 8012d8e:	8afb      	ldrh	r3, [r7, #22]
 8012d90:	461a      	mov	r2, r3
 8012d92:	4913      	ldr	r1, [pc, #76]	@ (8012de0 <drv_w25q64WriteDataClean+0x150>)
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	f000 f8ac 	bl	8012ef2 <drv_w25q64Write>

		drv_w25q64ChipSelectHigh(pDevice);
 8012d9a:	68f8      	ldr	r0, [r7, #12]
 8012d9c:	f000 f867 	bl	8012e6e <drv_w25q64ChipSelectHigh>

		startPage++;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	3301      	adds	r3, #1
 8012da4:	60bb      	str	r3, [r7, #8]
		offset = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	71fb      	strb	r3, [r7, #7]
		size = size - bytesRem;
 8012daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012dac:	69bb      	ldr	r3, [r7, #24]
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	64bb      	str	r3, [r7, #72]	@ 0x48
		dataPosition = dataPosition + bytesRem;
 8012db2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	4413      	add	r3, r2
 8012db8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		(void_t) gos_taskSleep(5);
 8012dba:	2005      	movs	r0, #5
 8012dbc:	f7f7 fb1a 	bl	800a3f4 <gos_taskSleep>

		drv_w25q64WriteDisable(pDevice);
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f000 f87c 	bl	8012ebe <drv_w25q64WriteDisable>
	for (idx = 0; idx < numOfPages; idx++)
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc8:	3301      	adds	r3, #1
 8012dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d39c      	bcc.n	8012d0e <drv_w25q64WriteDataClean+0x7e>
	}
}
 8012dd4:	bf00      	nop
 8012dd6:	bf00      	nop
 8012dd8:	3740      	adds	r7, #64	@ 0x40
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	2000604c 	.word	0x2000604c

08012de4 <drv_w25q64BytesToWrite>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to write.
 */
GOS_STATIC u32_t drv_w25q64BytesToWrite (u32_t size, u16_t offset)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 8012df0:	2300      	movs	r3, #0
 8012df2:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < W25Q64_PAGE_SIZE)
 8012df4:	887a      	ldrh	r2, [r7, #2]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4413      	add	r3, r2
 8012dfa:	2bff      	cmp	r3, #255	@ 0xff
 8012dfc:	d802      	bhi.n	8012e04 <drv_w25q64BytesToWrite+0x20>
	{
		bytesToWrite = size;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	60fb      	str	r3, [r7, #12]
 8012e02:	e003      	b.n	8012e0c <drv_w25q64BytesToWrite+0x28>
	}
	else
	{
		bytesToWrite = W25Q64_PAGE_SIZE - offset;
 8012e04:	887b      	ldrh	r3, [r7, #2]
 8012e06:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8012e0a:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	3714      	adds	r7, #20
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr

08012e1a <drv_w25q64BytesToModify>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to modify.
 */
GOS_STATIC u32_t drv_w25q64BytesToModify (u32_t size, u16_t offset)
{
 8012e1a:	b480      	push	{r7}
 8012e1c:	b085      	sub	sp, #20
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
 8012e22:	460b      	mov	r3, r1
 8012e24:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 8012e26:	2300      	movs	r3, #0
 8012e28:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < SECTOR_SIZE)
 8012e2a:	887a      	ldrh	r2, [r7, #2]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	4413      	add	r3, r2
 8012e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e34:	d202      	bcs.n	8012e3c <drv_w25q64BytesToModify+0x22>
	{
		bytesToWrite = size;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	60fb      	str	r3, [r7, #12]
 8012e3a:	e003      	b.n	8012e44 <drv_w25q64BytesToModify+0x2a>
	}
	else
	{
		bytesToWrite = SECTOR_SIZE - offset;
 8012e3c:	887b      	ldrh	r3, [r7, #2]
 8012e3e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8012e42:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 8012e44:	68fb      	ldr	r3, [r7, #12]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3714      	adds	r7, #20
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr

08012e52 <drv_w25q64ChipSelectLow>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectLow (void_t* pDevice)
{
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b082      	sub	sp, #8
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	785b      	ldrb	r3, [r3, #1]
 8012e5e:	2100      	movs	r1, #0
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7fd faad 	bl	80103c0 <drv_gpioWritePin>
}
 8012e66:	bf00      	nop
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <drv_w25q64ChipSelectHigh>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectHigh (void_t* pDevice)
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b082      	sub	sp, #8
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	785b      	ldrb	r3, [r3, #1]
 8012e7a:	2101      	movs	r1, #1
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fd fa9f 	bl	80103c0 <drv_gpioWritePin>
}
 8012e82:	bf00      	nop
 8012e84:	3708      	adds	r7, #8
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}

08012e8a <drv_w25q64WriteEnable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteEnable (void_t* pDevice)
{
 8012e8a:	b580      	push	{r7, lr}
 8012e8c:	b084      	sub	sp, #16
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x06;
 8012e92:	2306      	movs	r3, #6
 8012e94:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7ff ffdb 	bl	8012e52 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 8012e9c:	f107 030f 	add.w	r3, r7, #15
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 f824 	bl	8012ef2 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff ffdf 	bl	8012e6e <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 8012eb0:	2005      	movs	r0, #5
 8012eb2:	f7f7 fa9f 	bl	800a3f4 <gos_taskSleep>
}
 8012eb6:	bf00      	nop
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}

08012ebe <drv_w25q64WriteDisable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteDisable (void_t* pDevice)
{
 8012ebe:	b580      	push	{r7, lr}
 8012ec0:	b084      	sub	sp, #16
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x04;
 8012ec6:	2304      	movs	r3, #4
 8012ec8:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f7ff ffc1 	bl	8012e52 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 8012ed0:	f107 030f 	add.w	r3, r7, #15
 8012ed4:	2201      	movs	r2, #1
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f000 f80a 	bl	8012ef2 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f7ff ffc5 	bl	8012e6e <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 8012ee4:	2005      	movs	r0, #5
 8012ee6:	f7f7 fa85 	bl	800a3f4 <gos_taskSleep>
}
 8012eea:	bf00      	nop
 8012eec:	3710      	adds	r7, #16
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}

08012ef2 <drv_w25q64Write>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Write (void_t* pDevice, u8_t* pData, u16_t size)
{
 8012ef2:	b580      	push	{r7, lr}
 8012ef4:	b086      	sub	sp, #24
 8012ef6:	af02      	add	r7, sp, #8
 8012ef8:	60f8      	str	r0, [r7, #12]
 8012efa:	60b9      	str	r1, [r7, #8]
 8012efc:	4613      	mov	r3, r2
 8012efe:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	699b      	ldr	r3, [r3, #24]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d114      	bne.n	8012f32 <drv_w25q64Write+0x40>
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	7818      	ldrb	r0, [r3, #0]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6919      	ldr	r1, [r3, #16]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	695b      	ldr	r3, [r3, #20]
 8012f14:	88fa      	ldrh	r2, [r7, #6]
 8012f16:	9300      	str	r3, [sp, #0]
 8012f18:	460b      	mov	r3, r1
 8012f1a:	68b9      	ldr	r1, [r7, #8]
 8012f1c:	f7fe f892 	bl	8011044 <drv_spiTransmitIT>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b55      	cmp	r3, #85	@ 0x55
 8012f24:	d005      	beq.n	8012f32 <drv_w25q64Write+0x40>
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	699b      	ldr	r3, [r3, #24]
 8012f2a:	f043 0210 	orr.w	r2, r3, #16
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->writeTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_WRITE
            );
}
 8012f32:	bf00      	nop
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <drv_w25q64Read>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Read (void_t* pDevice, u8_t* pData, u16_t size)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b086      	sub	sp, #24
 8012f3e:	af02      	add	r7, sp, #8
 8012f40:	60f8      	str	r0, [r7, #12]
 8012f42:	60b9      	str	r1, [r7, #8]
 8012f44:	4613      	mov	r3, r2
 8012f46:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	699b      	ldr	r3, [r3, #24]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d114      	bne.n	8012f7a <drv_w25q64Read+0x40>
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	7818      	ldrb	r0, [r3, #0]
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	6899      	ldr	r1, [r3, #8]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	88fa      	ldrh	r2, [r7, #6]
 8012f5e:	9300      	str	r3, [sp, #0]
 8012f60:	460b      	mov	r3, r1
 8012f62:	68b9      	ldr	r1, [r7, #8]
 8012f64:	f7fe f8d2 	bl	801110c <drv_spiReceiveIT>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2b55      	cmp	r3, #85	@ 0x55
 8012f6c:	d005      	beq.n	8012f7a <drv_w25q64Read+0x40>
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	699b      	ldr	r3, [r3, #24]
 8012f72:	f043 0208 	orr.w	r2, r3, #8
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->readTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_READ
            );
}
 8012f7a:	bf00      	nop
 8012f7c:	3710      	adds	r7, #16
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}

08012f82 <drv_w25q64EraseSector>:
 * @param pDevice
 * @param sector
 * @return
 */
GOS_STATIC void_t drv_w25q64EraseSector (void_t* pDevice, u16_t sector)
{
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b084      	sub	sp, #16
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t memAddress = sector * 16 * W25Q64_PAGE_SIZE;
 8012f8e:	887b      	ldrh	r3, [r7, #2]
 8012f90:	031b      	lsls	r3, r3, #12
 8012f92:	60fb      	str	r3, [r7, #12]
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 8012f94:	2320      	movs	r3, #32
 8012f96:	723b      	strb	r3, [r7, #8]
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	0c1b      	lsrs	r3, r3, #16
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	727b      	strb	r3, [r7, #9]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	0a1b      	lsrs	r3, r3, #8
 8012fa4:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 8012fa6:	72bb      	strb	r3, [r7, #10]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 8012fac:	72fb      	strb	r3, [r7, #11]

    /*
     * Function code.
     */
	drv_w25q64WriteEnable(pDevice);
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f7ff ff6b 	bl	8012e8a <drv_w25q64WriteEnable>
	drv_w25q64ChipSelectLow(pDevice);
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f7ff ff4c 	bl	8012e52 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 4);
 8012fba:	f107 0308 	add.w	r3, r7, #8
 8012fbe:	2204      	movs	r2, #4
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f7ff ff95 	bl	8012ef2 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7ff ff50 	bl	8012e6e <drv_w25q64ChipSelectHigh>

	(void_t) gos_taskSleep(450);
 8012fce:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8012fd2:	f7f7 fa0f 	bl	800a3f4 <gos_taskSleep>

	drv_w25q64WriteDisable(pDevice);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7ff ff71 	bl	8012ebe <drv_w25q64WriteDisable>
}
 8012fdc:	bf00      	nop
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <svl_dhsInit>:

/*
 * Function: svl_dhsInit
 */
gos_result_t svl_dhsInit (void_t)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 8012fea:	2355      	movs	r3, #85	@ 0x55
 8012fec:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_CONCAT_RESULT(initResult, gos_taskRegister(&dhsDaemonDesc, NULL));
 8012fee:	79fb      	ldrb	r3, [r7, #7]
 8012ff0:	2b55      	cmp	r3, #85	@ 0x55
 8012ff2:	d106      	bne.n	8013002 <svl_dhsInit+0x1e>
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	4811      	ldr	r0, [pc, #68]	@ (801303c <svl_dhsInit+0x58>)
 8012ff8:	f7f7 f86a 	bl	800a0d0 <gos_taskRegister>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	71fb      	strb	r3, [r7, #7]
 8013000:	e001      	b.n	8013006 <svl_dhsInit+0x22>
 8013002:	23ae      	movs	r3, #174	@ 0xae
 8013004:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonDeviceNumReqMsg));
 8013006:	79fb      	ldrb	r3, [r7, #7]
 8013008:	2b55      	cmp	r3, #85	@ 0x55
 801300a:	d105      	bne.n	8013018 <svl_dhsInit+0x34>
 801300c:	480c      	ldr	r0, [pc, #48]	@ (8013040 <svl_dhsInit+0x5c>)
 801300e:	f002 fa41 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013012:	4603      	mov	r3, r0
 8013014:	71fb      	strb	r3, [r7, #7]
 8013016:	e001      	b.n	801301c <svl_dhsInit+0x38>
 8013018:	23ae      	movs	r3, #174	@ 0xae
 801301a:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonDeviceInfoReqMsg));
 801301c:	79fb      	ldrb	r3, [r7, #7]
 801301e:	2b55      	cmp	r3, #85	@ 0x55
 8013020:	d105      	bne.n	801302e <svl_dhsInit+0x4a>
 8013022:	4808      	ldr	r0, [pc, #32]	@ (8013044 <svl_dhsInit+0x60>)
 8013024:	f002 fa36 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013028:	4603      	mov	r3, r0
 801302a:	71fb      	strb	r3, [r7, #7]
 801302c:	e001      	b.n	8013032 <svl_dhsInit+0x4e>
 801302e:	23ae      	movs	r3, #174	@ 0xae
 8013030:	71fb      	strb	r3, [r7, #7]

    return initResult;
 8013032:	79fb      	ldrb	r3, [r7, #7]
}
 8013034:	4618      	mov	r0, r3
 8013036:	3708      	adds	r7, #8
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	20000f0c 	.word	0x20000f0c
 8013040:	20000f78 	.word	0x20000f78
 8013044:	20000f88 	.word	0x20000f88

08013048 <svl_dhsGetDeviceData>:

/*
 * Function: svl_dhsGetDeviceData
 */
gos_result_t svl_dhsGetDeviceData (u8_t index, svl_dhsDevice_t* pDevice)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	4603      	mov	r3, r0
 8013050:	6039      	str	r1, [r7, #0]
 8013052:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8013054:	23ae      	movs	r3, #174	@ 0xae
 8013056:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pDevice != NULL) && (index < numOfDevices))
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d011      	beq.n	8013082 <svl_dhsGetDeviceData+0x3a>
 801305e:	4b0b      	ldr	r3, [pc, #44]	@ (801308c <svl_dhsGetDeviceData+0x44>)
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	79fa      	ldrb	r2, [r7, #7]
 8013064:	429a      	cmp	r2, r3
 8013066:	d20c      	bcs.n	8013082 <svl_dhsGetDeviceData+0x3a>
	{
		(void_t) memcpy((void_t*)pDevice, (void_t*)&devices[index], sizeof(svl_dhsDevice_t));
 8013068:	79fb      	ldrb	r3, [r7, #7]
 801306a:	22a8      	movs	r2, #168	@ 0xa8
 801306c:	fb02 f303 	mul.w	r3, r2, r3
 8013070:	4a07      	ldr	r2, [pc, #28]	@ (8013090 <svl_dhsGetDeviceData+0x48>)
 8013072:	4413      	add	r3, r2
 8013074:	22a8      	movs	r2, #168	@ 0xa8
 8013076:	4619      	mov	r1, r3
 8013078:	6838      	ldr	r0, [r7, #0]
 801307a:	f003 fe28 	bl	8016cce <memcpy>
		getResult = GOS_SUCCESS;
 801307e:	2355      	movs	r3, #85	@ 0x55
 8013080:	73fb      	strb	r3, [r7, #15]
	else
	{
		// NULL pointer or wrong index.
	}

	return getResult;
 8013082:	7bfb      	ldrb	r3, [r7, #15]
}
 8013084:	4618      	mov	r0, r3
 8013086:	3710      	adds	r7, #16
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	20006360 	.word	0x20006360
 8013090:	20006158 	.word	0x20006158

08013094 <svl_dhsDaemon>:
 * @details Initializes the registered devices that have not been force-initialized.

 * @return  -
 */
GOS_STATIC void_t svl_dhsDaemon (void_t)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t index = 0u;
 801309a:	2300      	movs	r3, #0
 801309c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Initialize devices.
	for (index = 0u; index < SVL_DHS_MAX_DEVICES; index++)
 801309e:	2300      	movs	r3, #0
 80130a0:	71fb      	strb	r3, [r7, #7]
 80130a2:	e059      	b.n	8013158 <svl_dhsDaemon+0xc4>
	{
		if ((devices[index].pInitializer != NULL) && (devices[index].deviceState == DHS_STATE_UNINITIALIZED))
 80130a4:	79fb      	ldrb	r3, [r7, #7]
 80130a6:	4ab8      	ldr	r2, [pc, #736]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80130a8:	21a8      	movs	r1, #168	@ 0xa8
 80130aa:	fb01 f303 	mul.w	r3, r1, r3
 80130ae:	4413      	add	r3, r2
 80130b0:	3368      	adds	r3, #104	@ 0x68
 80130b2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d04b      	beq.n	8013152 <svl_dhsDaemon+0xbe>
 80130ba:	79fb      	ldrb	r3, [r7, #7]
 80130bc:	4ab2      	ldr	r2, [pc, #712]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80130be:	21a8      	movs	r1, #168	@ 0xa8
 80130c0:	fb01 f303 	mul.w	r3, r1, r3
 80130c4:	4413      	add	r3, r2
 80130c6:	3393      	adds	r3, #147	@ 0x93
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d141      	bne.n	8013152 <svl_dhsDaemon+0xbe>
		{
			if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 80130ce:	79fb      	ldrb	r3, [r7, #7]
 80130d0:	4aad      	ldr	r2, [pc, #692]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80130d2:	21a8      	movs	r1, #168	@ 0xa8
 80130d4:	fb01 f303 	mul.w	r3, r1, r3
 80130d8:	4413      	add	r3, r2
 80130da:	3368      	adds	r3, #104	@ 0x68
 80130dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80130e0:	79fa      	ldrb	r2, [r7, #7]
 80130e2:	49a9      	ldr	r1, [pc, #676]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80130e4:	20a8      	movs	r0, #168	@ 0xa8
 80130e6:	fb00 f202 	mul.w	r2, r0, r2
 80130ea:	440a      	add	r2, r1
 80130ec:	3264      	adds	r2, #100	@ 0x64
 80130ee:	6812      	ldr	r2, [r2, #0]
 80130f0:	4610      	mov	r0, r2
 80130f2:	4798      	blx	r3
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b55      	cmp	r3, #85	@ 0x55
 80130f8:	d022      	beq.n	8013140 <svl_dhsDaemon+0xac>
			{
				// Device initialization failed.
				devices[index].errorCounter++;
 80130fa:	79fb      	ldrb	r3, [r7, #7]
 80130fc:	49a2      	ldr	r1, [pc, #648]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80130fe:	22a8      	movs	r2, #168	@ 0xa8
 8013100:	fb03 f202 	mul.w	r2, r3, r2
 8013104:	440a      	add	r2, r1
 8013106:	3298      	adds	r2, #152	@ 0x98
 8013108:	6812      	ldr	r2, [r2, #0]
 801310a:	3201      	adds	r2, #1
 801310c:	499e      	ldr	r1, [pc, #632]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801310e:	20a8      	movs	r0, #168	@ 0xa8
 8013110:	fb00 f303 	mul.w	r3, r0, r3
 8013114:	440b      	add	r3, r1
 8013116:	3398      	adds	r3, #152	@ 0x98
 8013118:	601a      	str	r2, [r3, #0]
				devices[index].errorCode |= DHS_ERROR_INIT;
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	4a9a      	ldr	r2, [pc, #616]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801311e:	21a8      	movs	r1, #168	@ 0xa8
 8013120:	fb01 f303 	mul.w	r3, r1, r3
 8013124:	4413      	add	r3, r2
 8013126:	3394      	adds	r3, #148	@ 0x94
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	79fb      	ldrb	r3, [r7, #7]
 801312c:	f042 0201 	orr.w	r2, r2, #1
 8013130:	4995      	ldr	r1, [pc, #596]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013132:	20a8      	movs	r0, #168	@ 0xa8
 8013134:	fb00 f303 	mul.w	r3, r0, r3
 8013138:	440b      	add	r3, r1
 801313a:	3394      	adds	r3, #148	@ 0x94
 801313c:	601a      	str	r2, [r3, #0]
 801313e:	e008      	b.n	8013152 <svl_dhsDaemon+0xbe>
			}
			else
			{
				// Device initialized successfully.
				devices[index].deviceState = DHS_STATE_HEALTHY;
 8013140:	79fb      	ldrb	r3, [r7, #7]
 8013142:	4a91      	ldr	r2, [pc, #580]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013144:	21a8      	movs	r1, #168	@ 0xa8
 8013146:	fb01 f303 	mul.w	r3, r1, r3
 801314a:	4413      	add	r3, r2
 801314c:	3393      	adds	r3, #147	@ 0x93
 801314e:	2201      	movs	r2, #1
 8013150:	701a      	strb	r2, [r3, #0]
	for (index = 0u; index < SVL_DHS_MAX_DEVICES; index++)
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	3301      	adds	r3, #1
 8013156:	71fb      	strb	r3, [r7, #7]
 8013158:	79fb      	ldrb	r3, [r7, #7]
 801315a:	2b01      	cmp	r3, #1
 801315c:	d9a2      	bls.n	80130a4 <svl_dhsDaemon+0x10>
		{
			// Continue.
		}
	}

	(void_t) gos_taskSleep(100);
 801315e:	2064      	movs	r0, #100	@ 0x64
 8013160:	f7f7 f948 	bl	800a3f4 <gos_taskSleep>

	for (;;)
	{
        // Monitor devices.
		for (index = 0u; index < SVL_DHS_MAX_DEVICES; index++)
 8013164:	2300      	movs	r3, #0
 8013166:	71fb      	strb	r3, [r7, #7]
 8013168:	e105      	b.n	8013376 <svl_dhsDaemon+0x2e2>
		{
			if ((devices[index].deviceState == DHS_STATE_UNINITIALIZED) &&
 801316a:	79fb      	ldrb	r3, [r7, #7]
 801316c:	4a86      	ldr	r2, [pc, #536]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801316e:	21a8      	movs	r1, #168	@ 0xa8
 8013170:	fb01 f303 	mul.w	r3, r1, r3
 8013174:	4413      	add	r3, r2
 8013176:	3393      	adds	r3, #147	@ 0x93
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d14f      	bne.n	801321e <svl_dhsDaemon+0x18a>
				(devices[index].pInitializer != NULL))
 801317e:	79fb      	ldrb	r3, [r7, #7]
 8013180:	4a81      	ldr	r2, [pc, #516]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013182:	21a8      	movs	r1, #168	@ 0xa8
 8013184:	fb01 f303 	mul.w	r3, r1, r3
 8013188:	4413      	add	r3, r2
 801318a:	3368      	adds	r3, #104	@ 0x68
 801318c:	f8d3 3002 	ldr.w	r3, [r3, #2]
			if ((devices[index].deviceState == DHS_STATE_UNINITIALIZED) &&
 8013190:	2b00      	cmp	r3, #0
 8013192:	d044      	beq.n	801321e <svl_dhsDaemon+0x18a>
			{
				// Try to initialize.
				if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 8013194:	79fb      	ldrb	r3, [r7, #7]
 8013196:	4a7c      	ldr	r2, [pc, #496]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013198:	21a8      	movs	r1, #168	@ 0xa8
 801319a:	fb01 f303 	mul.w	r3, r1, r3
 801319e:	4413      	add	r3, r2
 80131a0:	3368      	adds	r3, #104	@ 0x68
 80131a2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80131a6:	79fa      	ldrb	r2, [r7, #7]
 80131a8:	4977      	ldr	r1, [pc, #476]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80131aa:	20a8      	movs	r0, #168	@ 0xa8
 80131ac:	fb00 f202 	mul.w	r2, r0, r2
 80131b0:	440a      	add	r2, r1
 80131b2:	3264      	adds	r2, #100	@ 0x64
 80131b4:	6812      	ldr	r2, [r2, #0]
 80131b6:	4610      	mov	r0, r2
 80131b8:	4798      	blx	r3
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b55      	cmp	r3, #85	@ 0x55
 80131be:	d009      	beq.n	80131d4 <svl_dhsDaemon+0x140>
				{
					// If initialization failed, set device state to not present.
					devices[index].deviceState = DHS_STATE_NOT_PRESENT;
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	4a71      	ldr	r2, [pc, #452]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80131c4:	21a8      	movs	r1, #168	@ 0xa8
 80131c6:	fb01 f303 	mul.w	r3, r1, r3
 80131ca:	4413      	add	r3, r2
 80131cc:	3393      	adds	r3, #147	@ 0x93
 80131ce:	2204      	movs	r2, #4
 80131d0:	701a      	strb	r2, [r3, #0]
				if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 80131d2:	e0cd      	b.n	8013370 <svl_dhsDaemon+0x2dc>
				}
				else
				{
					// Initialization successful, set state to healthy, clear errors.
					devices[index].deviceState = DHS_STATE_HEALTHY;
 80131d4:	79fb      	ldrb	r3, [r7, #7]
 80131d6:	4a6c      	ldr	r2, [pc, #432]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80131d8:	21a8      	movs	r1, #168	@ 0xa8
 80131da:	fb01 f303 	mul.w	r3, r1, r3
 80131de:	4413      	add	r3, r2
 80131e0:	3393      	adds	r3, #147	@ 0x93
 80131e2:	2201      	movs	r2, #1
 80131e4:	701a      	strb	r2, [r3, #0]
					devices[index].errorCounter = 0u;
 80131e6:	79fb      	ldrb	r3, [r7, #7]
 80131e8:	4a67      	ldr	r2, [pc, #412]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80131ea:	21a8      	movs	r1, #168	@ 0xa8
 80131ec:	fb01 f303 	mul.w	r3, r1, r3
 80131f0:	4413      	add	r3, r2
 80131f2:	3398      	adds	r3, #152	@ 0x98
 80131f4:	2200      	movs	r2, #0
 80131f6:	601a      	str	r2, [r3, #0]
					devices[index].errorCode &= ~((u32_t)DHS_ERROR_INIT);
 80131f8:	79fb      	ldrb	r3, [r7, #7]
 80131fa:	4a63      	ldr	r2, [pc, #396]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80131fc:	21a8      	movs	r1, #168	@ 0xa8
 80131fe:	fb01 f303 	mul.w	r3, r1, r3
 8013202:	4413      	add	r3, r2
 8013204:	3394      	adds	r3, #148	@ 0x94
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	79fb      	ldrb	r3, [r7, #7]
 801320a:	f022 0201 	bic.w	r2, r2, #1
 801320e:	495e      	ldr	r1, [pc, #376]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013210:	20a8      	movs	r0, #168	@ 0xa8
 8013212:	fb00 f303 	mul.w	r3, r0, r3
 8013216:	440b      	add	r3, r1
 8013218:	3394      	adds	r3, #148	@ 0x94
 801321a:	601a      	str	r2, [r3, #0]
				if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 801321c:	e0a8      	b.n	8013370 <svl_dhsDaemon+0x2dc>
				}
			}
			else if ((devices[index].deviceState == DHS_STATE_NOT_PRESENT) &&
 801321e:	79fb      	ldrb	r3, [r7, #7]
 8013220:	4a59      	ldr	r2, [pc, #356]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013222:	21a8      	movs	r1, #168	@ 0xa8
 8013224:	fb01 f303 	mul.w	r3, r1, r3
 8013228:	4413      	add	r3, r2
 801322a:	3393      	adds	r3, #147	@ 0x93
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	2b04      	cmp	r3, #4
 8013230:	d145      	bne.n	80132be <svl_dhsDaemon+0x22a>
					 (devices[index].pInitializer != NULL))
 8013232:	79fb      	ldrb	r3, [r7, #7]
 8013234:	4a54      	ldr	r2, [pc, #336]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013236:	21a8      	movs	r1, #168	@ 0xa8
 8013238:	fb01 f303 	mul.w	r3, r1, r3
 801323c:	4413      	add	r3, r2
 801323e:	3368      	adds	r3, #104	@ 0x68
 8013240:	f8d3 3002 	ldr.w	r3, [r3, #2]
			else if ((devices[index].deviceState == DHS_STATE_NOT_PRESENT) &&
 8013244:	2b00      	cmp	r3, #0
 8013246:	d03a      	beq.n	80132be <svl_dhsDaemon+0x22a>
			{
				// Try to initialize.
				if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 8013248:	79fb      	ldrb	r3, [r7, #7]
 801324a:	4a4f      	ldr	r2, [pc, #316]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801324c:	21a8      	movs	r1, #168	@ 0xa8
 801324e:	fb01 f303 	mul.w	r3, r1, r3
 8013252:	4413      	add	r3, r2
 8013254:	3368      	adds	r3, #104	@ 0x68
 8013256:	f8d3 3002 	ldr.w	r3, [r3, #2]
 801325a:	79fa      	ldrb	r2, [r7, #7]
 801325c:	494a      	ldr	r1, [pc, #296]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801325e:	20a8      	movs	r0, #168	@ 0xa8
 8013260:	fb00 f202 	mul.w	r2, r0, r2
 8013264:	440a      	add	r2, r1
 8013266:	3264      	adds	r2, #100	@ 0x64
 8013268:	6812      	ldr	r2, [r2, #0]
 801326a:	4610      	mov	r0, r2
 801326c:	4798      	blx	r3
 801326e:	4603      	mov	r3, r0
 8013270:	2b55      	cmp	r3, #85	@ 0x55
 8013272:	d17d      	bne.n	8013370 <svl_dhsDaemon+0x2dc>
					// If initialization failed, stay in state not present.
				}
				else
				{
					// Initialization successful, set state to healthy, clear errors.
					devices[index].deviceState = DHS_STATE_HEALTHY;
 8013274:	79fb      	ldrb	r3, [r7, #7]
 8013276:	4a44      	ldr	r2, [pc, #272]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013278:	21a8      	movs	r1, #168	@ 0xa8
 801327a:	fb01 f303 	mul.w	r3, r1, r3
 801327e:	4413      	add	r3, r2
 8013280:	3393      	adds	r3, #147	@ 0x93
 8013282:	2201      	movs	r2, #1
 8013284:	701a      	strb	r2, [r3, #0]
					devices[index].errorCounter = 0u;
 8013286:	79fb      	ldrb	r3, [r7, #7]
 8013288:	4a3f      	ldr	r2, [pc, #252]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801328a:	21a8      	movs	r1, #168	@ 0xa8
 801328c:	fb01 f303 	mul.w	r3, r1, r3
 8013290:	4413      	add	r3, r2
 8013292:	3398      	adds	r3, #152	@ 0x98
 8013294:	2200      	movs	r2, #0
 8013296:	601a      	str	r2, [r3, #0]
					devices[index].errorCode &= ~((u32_t)DHS_ERROR_INIT);
 8013298:	79fb      	ldrb	r3, [r7, #7]
 801329a:	4a3b      	ldr	r2, [pc, #236]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801329c:	21a8      	movs	r1, #168	@ 0xa8
 801329e:	fb01 f303 	mul.w	r3, r1, r3
 80132a2:	4413      	add	r3, r2
 80132a4:	3394      	adds	r3, #148	@ 0x94
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	79fb      	ldrb	r3, [r7, #7]
 80132aa:	f022 0201 	bic.w	r2, r2, #1
 80132ae:	4936      	ldr	r1, [pc, #216]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80132b0:	20a8      	movs	r0, #168	@ 0xa8
 80132b2:	fb00 f303 	mul.w	r3, r0, r3
 80132b6:	440b      	add	r3, r1
 80132b8:	3394      	adds	r3, #148	@ 0x94
 80132ba:	601a      	str	r2, [r3, #0]
				if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 80132bc:	e058      	b.n	8013370 <svl_dhsDaemon+0x2dc>
				}
			}
			else if ((devices[index].deviceState == DHS_STATE_ERROR) &&
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	4a31      	ldr	r2, [pc, #196]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80132c2:	21a8      	movs	r1, #168	@ 0xa8
 80132c4:	fb01 f303 	mul.w	r3, r1, r3
 80132c8:	4413      	add	r3, r2
 80132ca:	3393      	adds	r3, #147	@ 0x93
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	d14e      	bne.n	8013370 <svl_dhsDaemon+0x2dc>
					(devices[index].pInitializer != NULL) &&
 80132d2:	79fb      	ldrb	r3, [r7, #7]
 80132d4:	4a2c      	ldr	r2, [pc, #176]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80132d6:	21a8      	movs	r1, #168	@ 0xa8
 80132d8:	fb01 f303 	mul.w	r3, r1, r3
 80132dc:	4413      	add	r3, r2
 80132de:	3368      	adds	r3, #104	@ 0x68
 80132e0:	f8d3 3002 	ldr.w	r3, [r3, #2]
			else if ((devices[index].deviceState == DHS_STATE_ERROR) &&
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d043      	beq.n	8013370 <svl_dhsDaemon+0x2dc>
					(devices[index].recoveryType != DHS_RECOVERY_NONE))
 80132e8:	79fb      	ldrb	r3, [r7, #7]
 80132ea:	4a27      	ldr	r2, [pc, #156]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 80132ec:	21a8      	movs	r1, #168	@ 0xa8
 80132ee:	fb01 f303 	mul.w	r3, r1, r3
 80132f2:	4413      	add	r3, r2
 80132f4:	3372      	adds	r3, #114	@ 0x72
 80132f6:	781b      	ldrb	r3, [r3, #0]
					(devices[index].pInitializer != NULL) &&
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d039      	beq.n	8013370 <svl_dhsDaemon+0x2dc>
			{
				// Try to initialize.
				if (devices[index].pInitializer(devices[index].pDeviceDescriptor) != GOS_SUCCESS)
 80132fc:	79fb      	ldrb	r3, [r7, #7]
 80132fe:	4a22      	ldr	r2, [pc, #136]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013300:	21a8      	movs	r1, #168	@ 0xa8
 8013302:	fb01 f303 	mul.w	r3, r1, r3
 8013306:	4413      	add	r3, r2
 8013308:	3368      	adds	r3, #104	@ 0x68
 801330a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 801330e:	79fa      	ldrb	r2, [r7, #7]
 8013310:	491d      	ldr	r1, [pc, #116]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013312:	20a8      	movs	r0, #168	@ 0xa8
 8013314:	fb00 f202 	mul.w	r2, r0, r2
 8013318:	440a      	add	r2, r1
 801331a:	3264      	adds	r2, #100	@ 0x64
 801331c:	6812      	ldr	r2, [r2, #0]
 801331e:	4610      	mov	r0, r2
 8013320:	4798      	blx	r3
 8013322:	4603      	mov	r3, r0
 8013324:	2b55      	cmp	r3, #85	@ 0x55
 8013326:	d123      	bne.n	8013370 <svl_dhsDaemon+0x2dc>
					// If initialization failed, stay in state not present.
				}
				else
				{
					// Initialization successful, set state to healthy, clear errors.
					devices[index].deviceState = DHS_STATE_HEALTHY;
 8013328:	79fb      	ldrb	r3, [r7, #7]
 801332a:	4a17      	ldr	r2, [pc, #92]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801332c:	21a8      	movs	r1, #168	@ 0xa8
 801332e:	fb01 f303 	mul.w	r3, r1, r3
 8013332:	4413      	add	r3, r2
 8013334:	3393      	adds	r3, #147	@ 0x93
 8013336:	2201      	movs	r2, #1
 8013338:	701a      	strb	r2, [r3, #0]
					devices[index].errorCounter = 0u;
 801333a:	79fb      	ldrb	r3, [r7, #7]
 801333c:	4a12      	ldr	r2, [pc, #72]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 801333e:	21a8      	movs	r1, #168	@ 0xa8
 8013340:	fb01 f303 	mul.w	r3, r1, r3
 8013344:	4413      	add	r3, r2
 8013346:	3398      	adds	r3, #152	@ 0x98
 8013348:	2200      	movs	r2, #0
 801334a:	601a      	str	r2, [r3, #0]
					devices[index].errorCode &= ~((u32_t)DHS_ERROR_INIT);
 801334c:	79fb      	ldrb	r3, [r7, #7]
 801334e:	4a0e      	ldr	r2, [pc, #56]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013350:	21a8      	movs	r1, #168	@ 0xa8
 8013352:	fb01 f303 	mul.w	r3, r1, r3
 8013356:	4413      	add	r3, r2
 8013358:	3394      	adds	r3, #148	@ 0x94
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	79fb      	ldrb	r3, [r7, #7]
 801335e:	f022 0201 	bic.w	r2, r2, #1
 8013362:	4909      	ldr	r1, [pc, #36]	@ (8013388 <svl_dhsDaemon+0x2f4>)
 8013364:	20a8      	movs	r0, #168	@ 0xa8
 8013366:	fb00 f303 	mul.w	r3, r0, r3
 801336a:	440b      	add	r3, r1
 801336c:	3394      	adds	r3, #148	@ 0x94
 801336e:	601a      	str	r2, [r3, #0]
		for (index = 0u; index < SVL_DHS_MAX_DEVICES; index++)
 8013370:	79fb      	ldrb	r3, [r7, #7]
 8013372:	3301      	adds	r3, #1
 8013374:	71fb      	strb	r3, [r7, #7]
 8013376:	79fb      	ldrb	r3, [r7, #7]
 8013378:	2b01      	cmp	r3, #1
 801337a:	f67f aef6 	bls.w	801316a <svl_dhsDaemon+0xd6>
			{
				// Other states not handled periodically.
			}
		}

		(void_t) gos_taskSleep(100);
 801337e:	2064      	movs	r0, #100	@ 0x64
 8013380:	f7f7 f838 	bl	800a3f4 <gos_taskSleep>
		for (index = 0u; index < SVL_DHS_MAX_DEVICES; index++)
 8013384:	e6ee      	b.n	8013164 <svl_dhsDaemon+0xd0>
 8013386:	bf00      	nop
 8013388:	20006158 	.word	0x20006158

0801338c <svl_dhsSysmonDeviceNumReqCallback>:
 * @details Sends out the number of registered devices.
 *
 * @return  -
 */
GOS_STATIC void_t svl_dhsSysmonDeviceNumReqCallback  (gos_gcpChannelNumber_t gcpChannel)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af02      	add	r7, sp, #8
 8013392:	4603      	mov	r3, r0
 8013394:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u16_t numOfDev = (u16_t)numOfDevices;
 8013396:	4b0a      	ldr	r3, [pc, #40]	@ (80133c0 <svl_dhsSysmonDeviceNumReqCallback+0x34>)
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	81fb      	strh	r3, [r7, #14]

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)dhsBuffer, (void_t*)&numOfDev, sizeof(u16_t));
 801339c:	89fa      	ldrh	r2, [r7, #14]
 801339e:	4b09      	ldr	r3, [pc, #36]	@ (80133c4 <svl_dhsSysmonDeviceNumReqCallback+0x38>)
 80133a0:	801a      	strh	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 80133a2:	79f8      	ldrb	r0, [r7, #7]
 80133a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	2302      	movs	r3, #2
 80133ac:	4a05      	ldr	r2, [pc, #20]	@ (80133c4 <svl_dhsSysmonDeviceNumReqCallback+0x38>)
 80133ae:	f645 2101 	movw	r1, #23041	@ 0x5a01
 80133b2:	f7f8 fe23 	bl	800bffc <gos_gcpTransmitMessage>
    		gcpChannel,
            SVL_DHS_SYSMON_MSG_DEVICE_NUM_RESP,
            (void_t*)dhsBuffer,
            sizeof(u16_t),
            0xFFFF);
}
 80133b6:	bf00      	nop
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	20006360 	.word	0x20006360
 80133c4:	200062a8 	.word	0x200062a8

080133c8 <svl_dhsSysmonDeviceInfoReqCallback>:
 * @details Sends out the device information of the requested device.
 *
 * @return  -
 */
GOS_STATIC void_t svl_dhsSysmonDeviceInfoReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b0b0      	sub	sp, #192	@ 0xc0
 80133cc:	af02      	add	r7, sp, #8
 80133ce:	4603      	mov	r3, r0
 80133d0:	71fb      	strb	r3, [r7, #7]
	svl_dhsDevice_t deviceData;

	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&devIndex, (void_t*)dhsBuffer, sizeof(u16_t));
 80133d2:	4b11      	ldr	r3, [pc, #68]	@ (8013418 <svl_dhsSysmonDeviceInfoReqCallback+0x50>)
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
	(void_t) svl_dhsGetDeviceData(devIndex, &deviceData);
 80133da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 80133de:	b2db      	uxtb	r3, r3
 80133e0:	f107 020c 	add.w	r2, r7, #12
 80133e4:	4611      	mov	r1, r2
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7ff fe2e 	bl	8013048 <svl_dhsGetDeviceData>
	(void_t) memcpy((void_t*)dhsBuffer, (void_t*)&deviceData, sizeof(svl_dhsDevice_t));
 80133ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013418 <svl_dhsSysmonDeviceInfoReqCallback+0x50>)
 80133ee:	4618      	mov	r0, r3
 80133f0:	f107 030c 	add.w	r3, r7, #12
 80133f4:	22a8      	movs	r2, #168	@ 0xa8
 80133f6:	4619      	mov	r1, r3
 80133f8:	f003 fc69 	bl	8016cce <memcpy>

    (void_t) gos_gcpTransmitMessage(
 80133fc:	79f8      	ldrb	r0, [r7, #7]
 80133fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	23a8      	movs	r3, #168	@ 0xa8
 8013406:	4a04      	ldr	r2, [pc, #16]	@ (8013418 <svl_dhsSysmonDeviceInfoReqCallback+0x50>)
 8013408:	f645 2102 	movw	r1, #23042	@ 0x5a02
 801340c:	f7f8 fdf6 	bl	800bffc <gos_gcpTransmitMessage>
    		gcpChannel,
            SVL_DHS_SYSMON_MSG_DEVICE_INFO_RESP,
            (void_t*)dhsBuffer,
            sizeof(svl_dhsDevice_t),
            0xFFFF);
}
 8013410:	bf00      	nop
 8013412:	37b8      	adds	r7, #184	@ 0xb8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	200062a8 	.word	0x200062a8

0801341c <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 801341c:	b590      	push	{r4, r7, lr}
 801341e:	b083      	sub	sp, #12
 8013420:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_ERROR;
 8013422:	23ae      	movs	r3, #174	@ 0xae
 8013424:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 8013426:	2300      	movs	r3, #0
 8013428:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 801342a:	2300      	movs	r3, #0
 801342c:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (appInitPhaseConfig != NULL && appInitPhaseConfigSize > 0u)
 801342e:	4b3a      	ldr	r3, [pc, #232]	@ (8013518 <svl_dsmInit+0xfc>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d066      	beq.n	8013504 <svl_dsmInit+0xe8>
	{
		// Register DSM task.
		dsmInitResult = gos_errorTraceInit("DSM initialization", gos_taskRegister(&svlDsmDaemonDesc, NULL));
 8013436:	2100      	movs	r1, #0
 8013438:	4838      	ldr	r0, [pc, #224]	@ (801351c <svl_dsmInit+0x100>)
 801343a:	f7f6 fe49 	bl	800a0d0 <gos_taskRegister>
 801343e:	4603      	mov	r3, r0
 8013440:	4619      	mov	r1, r3
 8013442:	4837      	ldr	r0, [pc, #220]	@ (8013520 <svl_dsmInit+0x104>)
 8013444:	f7f8 fd44 	bl	800bed0 <gos_errorTraceInit>
 8013448:	4603      	mov	r3, r0
 801344a:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < appInitPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 801344c:	2300      	movs	r3, #0
 801344e:	71bb      	strb	r3, [r7, #6]
 8013450:	e04f      	b.n	80134f2 <svl_dsmInit+0xd6>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8013452:	4834      	ldr	r0, [pc, #208]	@ (8013524 <svl_dsmInit+0x108>)
 8013454:	f7fb f952 	bl	800e6fc <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(appInitPhaseConfig[initIdx].phaseName);
 8013458:	79ba      	ldrb	r2, [r7, #6]
 801345a:	4933      	ldr	r1, [pc, #204]	@ (8013528 <svl_dsmInit+0x10c>)
 801345c:	4613      	mov	r3, r2
 801345e:	015b      	lsls	r3, r3, #5
 8013460:	4413      	add	r3, r2
 8013462:	009b      	lsls	r3, r3, #2
 8013464:	440b      	add	r3, r1
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4618      	mov	r0, r3
 801346a:	f7fb f947 	bl	800e6fc <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 801346e:	482d      	ldr	r0, [pc, #180]	@ (8013524 <svl_dsmInit+0x108>)
 8013470:	f7fb f944 	bl	800e6fc <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8013474:	2300      	movs	r3, #0
 8013476:	717b      	strb	r3, [r7, #5]
 8013478:	e033      	b.n	80134e2 <svl_dsmInit+0xc6>
			{
				if (appInitPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 801347a:	79ba      	ldrb	r2, [r7, #6]
 801347c:	797b      	ldrb	r3, [r7, #5]
 801347e:	482a      	ldr	r0, [pc, #168]	@ (8013528 <svl_dsmInit+0x10c>)
 8013480:	00d9      	lsls	r1, r3, #3
 8013482:	4613      	mov	r3, r2
 8013484:	015b      	lsls	r3, r3, #5
 8013486:	4413      	add	r3, r2
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	440b      	add	r3, r1
 801348c:	4403      	add	r3, r0
 801348e:	3308      	adds	r3, #8
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d029      	beq.n	80134ea <svl_dsmInit+0xce>
				{
					dsmInitResult &= gos_errorTraceInit(
 8013496:	79ba      	ldrb	r2, [r7, #6]
 8013498:	797b      	ldrb	r3, [r7, #5]
							appInitPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 801349a:	4823      	ldr	r0, [pc, #140]	@ (8013528 <svl_dsmInit+0x10c>)
 801349c:	00d9      	lsls	r1, r3, #3
 801349e:	4613      	mov	r3, r2
 80134a0:	015b      	lsls	r3, r3, #5
 80134a2:	4413      	add	r3, r2
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	440b      	add	r3, r1
 80134a8:	4403      	add	r3, r0
 80134aa:	3304      	adds	r3, #4
 80134ac:	681c      	ldr	r4, [r3, #0]
							appInitPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 80134ae:	79ba      	ldrb	r2, [r7, #6]
 80134b0:	797b      	ldrb	r3, [r7, #5]
 80134b2:	481d      	ldr	r0, [pc, #116]	@ (8013528 <svl_dsmInit+0x10c>)
 80134b4:	00d9      	lsls	r1, r3, #3
 80134b6:	4613      	mov	r3, r2
 80134b8:	015b      	lsls	r3, r3, #5
 80134ba:	4413      	add	r3, r2
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	440b      	add	r3, r1
 80134c0:	4403      	add	r3, r0
 80134c2:	3308      	adds	r3, #8
 80134c4:	681b      	ldr	r3, [r3, #0]
					dsmInitResult &= gos_errorTraceInit(
 80134c6:	4798      	blx	r3
 80134c8:	4603      	mov	r3, r0
 80134ca:	4619      	mov	r1, r3
 80134cc:	4620      	mov	r0, r4
 80134ce:	f7f8 fcff 	bl	800bed0 <gos_errorTraceInit>
 80134d2:	4603      	mov	r3, r0
 80134d4:	461a      	mov	r2, r3
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	4013      	ands	r3, r2
 80134da:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 80134dc:	797b      	ldrb	r3, [r7, #5]
 80134de:	3301      	adds	r3, #1
 80134e0:	717b      	strb	r3, [r7, #5]
 80134e2:	797b      	ldrb	r3, [r7, #5]
 80134e4:	2b0f      	cmp	r3, #15
 80134e6:	d9c8      	bls.n	801347a <svl_dsmInit+0x5e>
 80134e8:	e000      	b.n	80134ec <svl_dsmInit+0xd0>
				}
				else
				{
					// End of initializers.
					break;
 80134ea:	bf00      	nop
		for (initIdx = 0u; initIdx < appInitPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 80134ec:	79bb      	ldrb	r3, [r7, #6]
 80134ee:	3301      	adds	r3, #1
 80134f0:	71bb      	strb	r3, [r7, #6]
 80134f2:	79ba      	ldrb	r2, [r7, #6]
 80134f4:	4b08      	ldr	r3, [pc, #32]	@ (8013518 <svl_dsmInit+0xfc>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	490c      	ldr	r1, [pc, #48]	@ (801352c <svl_dsmInit+0x110>)
 80134fa:	fba1 1303 	umull	r1, r3, r1, r3
 80134fe:	095b      	lsrs	r3, r3, #5
 8013500:	429a      	cmp	r2, r3
 8013502:	d3a6      	bcc.n	8013452 <svl_dsmInit+0x36>
	else
	{
		// Configuration is empty.
	}

	GOS_CONVERT_RESULT(dsmInitResult);
 8013504:	79fb      	ldrb	r3, [r7, #7]
 8013506:	2b55      	cmp	r3, #85	@ 0x55
 8013508:	d001      	beq.n	801350e <svl_dsmInit+0xf2>
 801350a:	23ae      	movs	r3, #174	@ 0xae
 801350c:	71fb      	strb	r3, [r7, #7]

	return dsmInitResult;
 801350e:	79fb      	ldrb	r3, [r7, #7]
}
 8013510:	4618      	mov	r0, r3
 8013512:	370c      	adds	r7, #12
 8013514:	46bd      	mov	sp, r7
 8013516:	bd90      	pop	{r4, r7, pc}
 8013518:	20000348 	.word	0x20000348
 801351c:	20000f98 	.word	0x20000f98
 8013520:	08019ccc 	.word	0x08019ccc
 8013524:	08019ce0 	.word	0x08019ce0
 8013528:	0801a27c 	.word	0x0801a27c
 801352c:	3e0f83e1 	.word	0x3e0f83e1

08013530 <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 8013536:	2355      	movs	r3, #85	@ 0x55
 8013538:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n"));
 801353a:	79fb      	ldrb	r3, [r7, #7]
 801353c:	2b55      	cmp	r3, #85	@ 0x55
 801353e:	d106      	bne.n	801354e <svl_dsmPrintOSInfo+0x1e>
 8013540:	490d      	ldr	r1, [pc, #52]	@ (8013578 <svl_dsmPrintOSInfo+0x48>)
 8013542:	2049      	movs	r0, #73	@ 0x49
 8013544:	f7fa fd0c 	bl	800df60 <gos_traceTraceFormatted>
 8013548:	4603      	mov	r3, r0
 801354a:	71fb      	strb	r3, [r7, #7]
 801354c:	e001      	b.n	8013552 <svl_dsmPrintOSInfo+0x22>
 801354e:	23ae      	movs	r3, #174	@ 0xae
 8013550:	71fb      	strb	r3, [r7, #7]
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR));
 8013552:	79fb      	ldrb	r3, [r7, #7]
 8013554:	2b55      	cmp	r3, #85	@ 0x55
 8013556:	d108      	bne.n	801356a <svl_dsmPrintOSInfo+0x3a>
 8013558:	2301      	movs	r3, #1
 801355a:	2201      	movs	r2, #1
 801355c:	4907      	ldr	r1, [pc, #28]	@ (801357c <svl_dsmPrintOSInfo+0x4c>)
 801355e:	2049      	movs	r0, #73	@ 0x49
 8013560:	f7fa fcfe 	bl	800df60 <gos_traceTraceFormatted>
 8013564:	4603      	mov	r3, r0
 8013566:	71fb      	strb	r3, [r7, #7]
 8013568:	e001      	b.n	801356e <svl_dsmPrintOSInfo+0x3e>
 801356a:	23ae      	movs	r3, #174	@ 0xae
 801356c:	71fb      	strb	r3, [r7, #7]

	return printResult;
 801356e:	79fb      	ldrb	r3, [r7, #7]
}
 8013570:	4618      	mov	r0, r3
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	08019ce4 	.word	0x08019ce4
 801357c:	08019cfc 	.word	0x08019cfc

08013580 <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b0ac      	sub	sp, #176	@ 0xb0
 8013584:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 8013586:	2355      	movs	r3, #85	@ 0x55
 8013588:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 801358c:	1d3b      	adds	r3, r7, #4
 801358e:	22a0      	movs	r2, #160	@ 0xa0
 8013590:	2100      	movs	r1, #0
 8013592:	4618      	mov	r0, r3
 8013594:	f003 fb04 	bl	8016ba0 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetLibVersion(&libVer));
 8013598:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 801359c:	2b55      	cmp	r3, #85	@ 0x55
 801359e:	d107      	bne.n	80135b0 <svl_dsmPrintLibInfo+0x30>
 80135a0:	1d3b      	adds	r3, r7, #4
 80135a2:	4618      	mov	r0, r3
 80135a4:	f000 fc80 	bl	8013ea8 <svl_pdhGetLibVersion>
 80135a8:	4603      	mov	r3, r0
 80135aa:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80135ae:	e002      	b.n	80135b6 <svl_dsmPrintLibInfo+0x36>
 80135b0:	23ae      	movs	r3, #174	@ 0xae
 80135b2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n"));
 80135b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80135ba:	2b55      	cmp	r3, #85	@ 0x55
 80135bc:	d107      	bne.n	80135ce <svl_dsmPrintLibInfo+0x4e>
 80135be:	493a      	ldr	r1, [pc, #232]	@ (80136a8 <svl_dsmPrintLibInfo+0x128>)
 80135c0:	2049      	movs	r0, #73	@ 0x49
 80135c2:	f7fa fccd 	bl	800df60 <gos_traceTraceFormatted>
 80135c6:	4603      	mov	r3, r0
 80135c8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80135cc:	e002      	b.n	80135d4 <svl_dsmPrintLibInfo+0x54>
 80135ce:	23ae      	movs	r3, #174	@ 0xae
 80135d0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name));
 80135d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80135d8:	2b55      	cmp	r3, #85	@ 0x55
 80135da:	d10a      	bne.n	80135f2 <svl_dsmPrintLibInfo+0x72>
 80135dc:	1d3b      	adds	r3, r7, #4
 80135de:	3310      	adds	r3, #16
 80135e0:	461a      	mov	r2, r3
 80135e2:	4932      	ldr	r1, [pc, #200]	@ (80136ac <svl_dsmPrintLibInfo+0x12c>)
 80135e4:	2049      	movs	r0, #73	@ 0x49
 80135e6:	f7fa fcbb 	bl	800df60 <gos_traceTraceFormatted>
 80135ea:	4603      	mov	r3, r0
 80135ec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80135f0:	e002      	b.n	80135f8 <svl_dsmPrintLibInfo+0x78>
 80135f2:	23ae      	movs	r3, #174	@ 0xae
 80135f4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description));
 80135f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80135fc:	2b55      	cmp	r3, #85	@ 0x55
 80135fe:	d10a      	bne.n	8013616 <svl_dsmPrintLibInfo+0x96>
 8013600:	1d3b      	adds	r3, r7, #4
 8013602:	3340      	adds	r3, #64	@ 0x40
 8013604:	461a      	mov	r2, r3
 8013606:	492a      	ldr	r1, [pc, #168]	@ (80136b0 <svl_dsmPrintLibInfo+0x130>)
 8013608:	2049      	movs	r0, #73	@ 0x49
 801360a:	f7fa fca9 	bl	800df60 <gos_traceTraceFormatted>
 801360e:	4603      	mov	r3, r0
 8013610:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8013614:	e002      	b.n	801361c <svl_dsmPrintLibInfo+0x9c>
 8013616:	23ae      	movs	r3, #174	@ 0xae
 8013618:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build));
 801361c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8013620:	2b55      	cmp	r3, #85	@ 0x55
 8013622:	d10e      	bne.n	8013642 <svl_dsmPrintLibInfo+0xc2>
 8013624:	88bb      	ldrh	r3, [r7, #4]
 8013626:	461a      	mov	r2, r3
 8013628:	88fb      	ldrh	r3, [r7, #6]
 801362a:	4619      	mov	r1, r3
 801362c:	893b      	ldrh	r3, [r7, #8]
 801362e:	9300      	str	r3, [sp, #0]
 8013630:	460b      	mov	r3, r1
 8013632:	4920      	ldr	r1, [pc, #128]	@ (80136b4 <svl_dsmPrintLibInfo+0x134>)
 8013634:	2049      	movs	r0, #73	@ 0x49
 8013636:	f7fa fc93 	bl	800df60 <gos_traceTraceFormatted>
 801363a:	4603      	mov	r3, r0
 801363c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8013640:	e002      	b.n	8013648 <svl_dsmPrintLibInfo+0xc8>
 8013642:	23ae      	movs	r3, #174	@ 0xae
 8013644:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days));
 8013648:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 801364c:	2b55      	cmp	r3, #85	@ 0x55
 801364e:	d110      	bne.n	8013672 <svl_dsmPrintLibInfo+0xf2>
 8013650:	8a7b      	ldrh	r3, [r7, #18]
 8013652:	461a      	mov	r2, r3
 8013654:	7c7b      	ldrb	r3, [r7, #17]
 8013656:	4619      	mov	r1, r3
 8013658:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 801365c:	b29b      	uxth	r3, r3
 801365e:	9300      	str	r3, [sp, #0]
 8013660:	460b      	mov	r3, r1
 8013662:	4915      	ldr	r1, [pc, #84]	@ (80136b8 <svl_dsmPrintLibInfo+0x138>)
 8013664:	2049      	movs	r0, #73	@ 0x49
 8013666:	f7fa fc7b 	bl	800df60 <gos_traceTraceFormatted>
 801366a:	4603      	mov	r3, r0
 801366c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8013670:	e002      	b.n	8013678 <svl_dsmPrintLibInfo+0xf8>
 8013672:	23ae      	movs	r3, #174	@ 0xae
 8013674:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author));
 8013678:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 801367c:	2b55      	cmp	r3, #85	@ 0x55
 801367e:	d10a      	bne.n	8013696 <svl_dsmPrintLibInfo+0x116>
 8013680:	1d3b      	adds	r3, r7, #4
 8013682:	3370      	adds	r3, #112	@ 0x70
 8013684:	461a      	mov	r2, r3
 8013686:	490d      	ldr	r1, [pc, #52]	@ (80136bc <svl_dsmPrintLibInfo+0x13c>)
 8013688:	2049      	movs	r0, #73	@ 0x49
 801368a:	f7fa fc69 	bl	800df60 <gos_traceTraceFormatted>
 801368e:	4603      	mov	r3, r0
 8013690:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8013694:	e002      	b.n	801369c <svl_dsmPrintLibInfo+0x11c>
 8013696:	23ae      	movs	r3, #174	@ 0xae
 8013698:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	return printResult;
 801369c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	37a8      	adds	r7, #168	@ 0xa8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	08019d14 	.word	0x08019d14
 80136ac:	08019d30 	.word	0x08019d30
 80136b0:	08019d44 	.word	0x08019d44
 80136b4:	08019d58 	.word	0x08019d58
 80136b8:	08019d78 	.word	0x08019d78
 80136bc:	08019d98 	.word	0x08019d98

080136c0 <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b0c2      	sub	sp, #264	@ 0x108
 80136c4:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 80136c6:	2355      	movs	r3, #85	@ 0x55
 80136c8:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 80136cc:	1d3b      	adds	r3, r7, #4
 80136ce:	22fa      	movs	r2, #250	@ 0xfa
 80136d0:	2100      	movs	r1, #0
 80136d2:	4618      	mov	r0, r3
 80136d4:	f003 fa64 	bl	8016ba0 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetHwInfo(&hwInfo));
 80136d8:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80136dc:	2b55      	cmp	r3, #85	@ 0x55
 80136de:	d107      	bne.n	80136f0 <svl_dsmPrintHwInfo+0x30>
 80136e0:	1d3b      	adds	r3, r7, #4
 80136e2:	4618      	mov	r0, r3
 80136e4:	f000 fca0 	bl	8014028 <svl_pdhGetHwInfo>
 80136e8:	4603      	mov	r3, r0
 80136ea:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80136ee:	e002      	b.n	80136f6 <svl_dsmPrintHwInfo+0x36>
 80136f0:	23ae      	movs	r3, #174	@ 0xae
 80136f2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n"));
 80136f6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80136fa:	2b55      	cmp	r3, #85	@ 0x55
 80136fc:	d107      	bne.n	801370e <svl_dsmPrintHwInfo+0x4e>
 80136fe:	4942      	ldr	r1, [pc, #264]	@ (8013808 <svl_dsmPrintHwInfo+0x148>)
 8013700:	2049      	movs	r0, #73	@ 0x49
 8013702:	f7fa fc2d 	bl	800df60 <gos_traceTraceFormatted>
 8013706:	4603      	mov	r3, r0
 8013708:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 801370c:	e002      	b.n	8013714 <svl_dsmPrintHwInfo+0x54>
 801370e:	23ae      	movs	r3, #174	@ 0xae
 8013710:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Board name:    \t%s\r\n", hwInfo.boardName));
 8013714:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8013718:	2b55      	cmp	r3, #85	@ 0x55
 801371a:	d109      	bne.n	8013730 <svl_dsmPrintHwInfo+0x70>
 801371c:	1d3b      	adds	r3, r7, #4
 801371e:	461a      	mov	r2, r3
 8013720:	493a      	ldr	r1, [pc, #232]	@ (801380c <svl_dsmPrintHwInfo+0x14c>)
 8013722:	2049      	movs	r0, #73	@ 0x49
 8013724:	f7fa fc1c 	bl	800df60 <gos_traceTraceFormatted>
 8013728:	4603      	mov	r3, r0
 801372a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 801372e:	e002      	b.n	8013736 <svl_dsmPrintHwInfo+0x76>
 8013730:	23ae      	movs	r3, #174	@ 0xae
 8013732:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:        \t%s\r\n", hwInfo.author));
 8013736:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 801373a:	2b55      	cmp	r3, #85	@ 0x55
 801373c:	d10a      	bne.n	8013754 <svl_dsmPrintHwInfo+0x94>
 801373e:	1d3b      	adds	r3, r7, #4
 8013740:	3360      	adds	r3, #96	@ 0x60
 8013742:	461a      	mov	r2, r3
 8013744:	4932      	ldr	r1, [pc, #200]	@ (8013810 <svl_dsmPrintHwInfo+0x150>)
 8013746:	2049      	movs	r0, #73	@ 0x49
 8013748:	f7fa fc0a 	bl	800df60 <gos_traceTraceFormatted>
 801374c:	4603      	mov	r3, r0
 801374e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8013752:	e002      	b.n	801375a <svl_dsmPrintHwInfo+0x9a>
 8013754:	23ae      	movs	r3, #174	@ 0xae
 8013756:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description:   \t%s\r\n", hwInfo.description));
 801375a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 801375e:	2b55      	cmp	r3, #85	@ 0x55
 8013760:	d10a      	bne.n	8013778 <svl_dsmPrintHwInfo+0xb8>
 8013762:	1d3b      	adds	r3, r7, #4
 8013764:	3390      	adds	r3, #144	@ 0x90
 8013766:	461a      	mov	r2, r3
 8013768:	492a      	ldr	r1, [pc, #168]	@ (8013814 <svl_dsmPrintHwInfo+0x154>)
 801376a:	2049      	movs	r0, #73	@ 0x49
 801376c:	f7fa fbf8 	bl	800df60 <gos_traceTraceFormatted>
 8013770:	4603      	mov	r3, r0
 8013772:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 8013776:	e002      	b.n	801377e <svl_dsmPrintHwInfo+0xbe>
 8013778:	23ae      	movs	r3, #174	@ 0xae
 801377a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Revision:      \t%s\r\n", hwInfo.revision));
 801377e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8013782:	2b55      	cmp	r3, #85	@ 0x55
 8013784:	d10a      	bne.n	801379c <svl_dsmPrintHwInfo+0xdc>
 8013786:	1d3b      	adds	r3, r7, #4
 8013788:	3330      	adds	r3, #48	@ 0x30
 801378a:	461a      	mov	r2, r3
 801378c:	4922      	ldr	r1, [pc, #136]	@ (8013818 <svl_dsmPrintHwInfo+0x158>)
 801378e:	2049      	movs	r0, #73	@ 0x49
 8013790:	f7fa fbe6 	bl	800df60 <gos_traceTraceFormatted>
 8013794:	4603      	mov	r3, r0
 8013796:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 801379a:	e002      	b.n	80137a2 <svl_dsmPrintHwInfo+0xe2>
 801379c:	23ae      	movs	r3, #174	@ 0xae
 801379e:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Serial number: \t%s\r\n", hwInfo.serialNumber));
 80137a2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80137a6:	2b55      	cmp	r3, #85	@ 0x55
 80137a8:	d10a      	bne.n	80137c0 <svl_dsmPrintHwInfo+0x100>
 80137aa:	1d3b      	adds	r3, r7, #4
 80137ac:	33ca      	adds	r3, #202	@ 0xca
 80137ae:	461a      	mov	r2, r3
 80137b0:	491a      	ldr	r1, [pc, #104]	@ (801381c <svl_dsmPrintHwInfo+0x15c>)
 80137b2:	2049      	movs	r0, #73	@ 0x49
 80137b4:	f7fa fbd4 	bl	800df60 <gos_traceTraceFormatted>
 80137b8:	4603      	mov	r3, r0
 80137ba:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80137be:	e002      	b.n	80137c6 <svl_dsmPrintHwInfo+0x106>
 80137c0:	23ae      	movs	r3, #174	@ 0xae
 80137c2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 80137c6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80137ca:	2b55      	cmp	r3, #85	@ 0x55
 80137cc:	d112      	bne.n	80137f4 <svl_dsmPrintHwInfo+0x134>
 80137ce:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 80137d2:	461a      	mov	r2, r3
 80137d4:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80137d8:	4619      	mov	r1, r3
 80137da:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	@ 0xc9
 80137de:	b29b      	uxth	r3, r3
 80137e0:	9300      	str	r3, [sp, #0]
 80137e2:	460b      	mov	r3, r1
 80137e4:	490e      	ldr	r1, [pc, #56]	@ (8013820 <svl_dsmPrintHwInfo+0x160>)
 80137e6:	2049      	movs	r0, #73	@ 0x49
 80137e8:	f7fa fbba 	bl	800df60 <gos_traceTraceFormatted>
 80137ec:	4603      	mov	r3, r0
 80137ee:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
 80137f2:	e002      	b.n	80137fa <svl_dsmPrintHwInfo+0x13a>
 80137f4:	23ae      	movs	r3, #174	@ 0xae
 80137f6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			hwInfo.date.years,
			hwInfo.date.months,
			hwInfo.date.days
			));

	return printResult;
 80137fa:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 80137fe:	4618      	mov	r0, r3
 8013800:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	08019dac 	.word	0x08019dac
 801380c:	08019dc8 	.word	0x08019dc8
 8013810:	08019de0 	.word	0x08019de0
 8013814:	08019df8 	.word	0x08019df8
 8013818:	08019e10 	.word	0x08019e10
 801381c:	08019e28 	.word	0x08019e28
 8013820:	08019e40 	.word	0x08019e40

08013824 <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 801382a:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 801382c:	2355      	movs	r3, #85	@ 0x55
 801382e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 8013832:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013836:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801383a:	4618      	mov	r0, r3
 801383c:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8013840:	461a      	mov	r2, r3
 8013842:	2100      	movs	r1, #0
 8013844:	f003 f9ac 	bl	8016ba0 <memset>

	/*
	 * Function code.
	 */
	GOS_CONCAT_RESULT(printResult, svl_pdhGetSwInfo(&swInfo));
 8013848:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 801384c:	2b55      	cmp	r3, #85	@ 0x55
 801384e:	d107      	bne.n	8013860 <svl_dsmPrintAppInfo+0x3c>
 8013850:	1d3b      	adds	r3, r7, #4
 8013852:	4618      	mov	r0, r3
 8013854:	f000 fbb0 	bl	8013fb8 <svl_pdhGetSwInfo>
 8013858:	4603      	mov	r3, r0
 801385a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 801385e:	e002      	b.n	8013866 <svl_dsmPrintAppInfo+0x42>
 8013860:	23ae      	movs	r3, #174	@ 0xae
 8013862:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	if (strcmp(swInfo.bldSwVerInfo.name, "") != 0)
 8013866:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 801386a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801386e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8013872:	2b00      	cmp	r3, #0
 8013874:	f000 8091 	beq.w	801399a <svl_dsmPrintAppInfo+0x176>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Bootloader Info"TRACE_FORMAT_RESET"\r\n"));
 8013878:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 801387c:	2b55      	cmp	r3, #85	@ 0x55
 801387e:	d107      	bne.n	8013890 <svl_dsmPrintAppInfo+0x6c>
 8013880:	4997      	ldr	r1, [pc, #604]	@ (8013ae0 <svl_dsmPrintAppInfo+0x2bc>)
 8013882:	2049      	movs	r0, #73	@ 0x49
 8013884:	f7fa fb6c 	bl	800df60 <gos_traceTraceFormatted>
 8013888:	4603      	mov	r3, r0
 801388a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 801388e:	e002      	b.n	8013896 <svl_dsmPrintAppInfo+0x72>
 8013890:	23ae      	movs	r3, #174	@ 0xae
 8013892:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.bldSwVerInfo.name));
 8013896:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 801389a:	2b55      	cmp	r3, #85	@ 0x55
 801389c:	d10a      	bne.n	80138b4 <svl_dsmPrintAppInfo+0x90>
 801389e:	1d3b      	adds	r3, r7, #4
 80138a0:	33b0      	adds	r3, #176	@ 0xb0
 80138a2:	461a      	mov	r2, r3
 80138a4:	498f      	ldr	r1, [pc, #572]	@ (8013ae4 <svl_dsmPrintAppInfo+0x2c0>)
 80138a6:	2049      	movs	r0, #73	@ 0x49
 80138a8:	f7fa fb5a 	bl	800df60 <gos_traceTraceFormatted>
 80138ac:	4603      	mov	r3, r0
 80138ae:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80138b2:	e002      	b.n	80138ba <svl_dsmPrintAppInfo+0x96>
 80138b4:	23ae      	movs	r3, #174	@ 0xae
 80138b6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.bldSwVerInfo.description));
 80138ba:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80138be:	2b55      	cmp	r3, #85	@ 0x55
 80138c0:	d10a      	bne.n	80138d8 <svl_dsmPrintAppInfo+0xb4>
 80138c2:	1d3b      	adds	r3, r7, #4
 80138c4:	33e0      	adds	r3, #224	@ 0xe0
 80138c6:	461a      	mov	r2, r3
 80138c8:	4987      	ldr	r1, [pc, #540]	@ (8013ae8 <svl_dsmPrintAppInfo+0x2c4>)
 80138ca:	2049      	movs	r0, #73	@ 0x49
 80138cc:	f7fa fb48 	bl	800df60 <gos_traceTraceFormatted>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80138d6:	e002      	b.n	80138de <svl_dsmPrintAppInfo+0xba>
 80138d8:	23ae      	movs	r3, #174	@ 0xae
 80138da:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.bldSwVerInfo.major, swInfo.bldSwVerInfo.minor, swInfo.bldSwVerInfo.build));
 80138de:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80138e2:	2b55      	cmp	r3, #85	@ 0x55
 80138e4:	d11d      	bne.n	8013922 <svl_dsmPrintAppInfo+0xfe>
 80138e6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80138ea:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80138ee:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80138f2:	461a      	mov	r2, r3
 80138f4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80138f8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80138fc:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8013900:	4619      	mov	r1, r3
 8013902:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013906:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801390a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 801390e:	9300      	str	r3, [sp, #0]
 8013910:	460b      	mov	r3, r1
 8013912:	4976      	ldr	r1, [pc, #472]	@ (8013aec <svl_dsmPrintAppInfo+0x2c8>)
 8013914:	2049      	movs	r0, #73	@ 0x49
 8013916:	f7fa fb23 	bl	800df60 <gos_traceTraceFormatted>
 801391a:	4603      	mov	r3, r0
 801391c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8013920:	e002      	b.n	8013928 <svl_dsmPrintAppInfo+0x104>
 8013922:	23ae      	movs	r3, #174	@ 0xae
 8013924:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.bldSwVerInfo.date.years, swInfo.bldSwVerInfo.date.months, swInfo.bldSwVerInfo.date.days));
 8013928:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 801392c:	2b55      	cmp	r3, #85	@ 0x55
 801392e:	d11e      	bne.n	801396e <svl_dsmPrintAppInfo+0x14a>
 8013930:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013934:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013938:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801393c:	461a      	mov	r2, r3
 801393e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013942:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013946:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801394a:	4619      	mov	r1, r3
 801394c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013950:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013954:	f8b3 30ab 	ldrh.w	r3, [r3, #171]	@ 0xab
 8013958:	b29b      	uxth	r3, r3
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	460b      	mov	r3, r1
 801395e:	4964      	ldr	r1, [pc, #400]	@ (8013af0 <svl_dsmPrintAppInfo+0x2cc>)
 8013960:	2049      	movs	r0, #73	@ 0x49
 8013962:	f7fa fafd 	bl	800df60 <gos_traceTraceFormatted>
 8013966:	4603      	mov	r3, r0
 8013968:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 801396c:	e002      	b.n	8013974 <svl_dsmPrintAppInfo+0x150>
 801396e:	23ae      	movs	r3, #174	@ 0xae
 8013970:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.bldSwVerInfo.author));
 8013974:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8013978:	2b55      	cmp	r3, #85	@ 0x55
 801397a:	d10b      	bne.n	8013994 <svl_dsmPrintAppInfo+0x170>
 801397c:	1d3b      	adds	r3, r7, #4
 801397e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8013982:	461a      	mov	r2, r3
 8013984:	495b      	ldr	r1, [pc, #364]	@ (8013af4 <svl_dsmPrintAppInfo+0x2d0>)
 8013986:	2049      	movs	r0, #73	@ 0x49
 8013988:	f7fa faea 	bl	800df60 <gos_traceTraceFormatted>
 801398c:	4603      	mov	r3, r0
 801398e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8013992:	e002      	b.n	801399a <svl_dsmPrintAppInfo+0x176>
 8013994:	23ae      	movs	r3, #174	@ 0xae
 8013996:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Bootloader does not exist.
	}

	if (strcmp(swInfo.appSwVerInfo.name, "") != 0)
 801399a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 801399e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80139a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f000 8093 	beq.w	8013ad2 <svl_dsmPrintAppInfo+0x2ae>
	{
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n"));
 80139ac:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80139b0:	2b55      	cmp	r3, #85	@ 0x55
 80139b2:	d107      	bne.n	80139c4 <svl_dsmPrintAppInfo+0x1a0>
 80139b4:	4950      	ldr	r1, [pc, #320]	@ (8013af8 <svl_dsmPrintAppInfo+0x2d4>)
 80139b6:	2049      	movs	r0, #73	@ 0x49
 80139b8:	f7fa fad2 	bl	800df60 <gos_traceTraceFormatted>
 80139bc:	4603      	mov	r3, r0
 80139be:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80139c2:	e002      	b.n	80139ca <svl_dsmPrintAppInfo+0x1a6>
 80139c4:	23ae      	movs	r3, #174	@ 0xae
 80139c6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name));
 80139ca:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80139ce:	2b55      	cmp	r3, #85	@ 0x55
 80139d0:	d10b      	bne.n	80139ea <svl_dsmPrintAppInfo+0x1c6>
 80139d2:	1d3b      	adds	r3, r7, #4
 80139d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80139d8:	461a      	mov	r2, r3
 80139da:	4942      	ldr	r1, [pc, #264]	@ (8013ae4 <svl_dsmPrintAppInfo+0x2c0>)
 80139dc:	2049      	movs	r0, #73	@ 0x49
 80139de:	f7fa fabf 	bl	800df60 <gos_traceTraceFormatted>
 80139e2:	4603      	mov	r3, r0
 80139e4:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 80139e8:	e002      	b.n	80139f0 <svl_dsmPrintAppInfo+0x1cc>
 80139ea:	23ae      	movs	r3, #174	@ 0xae
 80139ec:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description));
 80139f0:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80139f4:	2b55      	cmp	r3, #85	@ 0x55
 80139f6:	d10b      	bne.n	8013a10 <svl_dsmPrintAppInfo+0x1ec>
 80139f8:	1d3b      	adds	r3, r7, #4
 80139fa:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80139fe:	461a      	mov	r2, r3
 8013a00:	4939      	ldr	r1, [pc, #228]	@ (8013ae8 <svl_dsmPrintAppInfo+0x2c4>)
 8013a02:	2049      	movs	r0, #73	@ 0x49
 8013a04:	f7fa faac 	bl	800df60 <gos_traceTraceFormatted>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8013a0e:	e002      	b.n	8013a16 <svl_dsmPrintAppInfo+0x1f2>
 8013a10:	23ae      	movs	r3, #174	@ 0xae
 8013a12:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build));
 8013a16:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8013a1a:	2b55      	cmp	r3, #85	@ 0x55
 8013a1c:	d11d      	bne.n	8013a5a <svl_dsmPrintAppInfo+0x236>
 8013a1e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013a22:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013a26:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013a30:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013a34:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
 8013a38:	4619      	mov	r1, r3
 8013a3a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013a3e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013a42:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	460b      	mov	r3, r1
 8013a4a:	4928      	ldr	r1, [pc, #160]	@ (8013aec <svl_dsmPrintAppInfo+0x2c8>)
 8013a4c:	2049      	movs	r0, #73	@ 0x49
 8013a4e:	f7fa fa87 	bl	800df60 <gos_traceTraceFormatted>
 8013a52:	4603      	mov	r3, r0
 8013a54:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8013a58:	e002      	b.n	8013a60 <svl_dsmPrintAppInfo+0x23c>
 8013a5a:	23ae      	movs	r3, #174	@ 0xae
 8013a5c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days));
 8013a60:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8013a64:	2b55      	cmp	r3, #85	@ 0x55
 8013a66:	d11e      	bne.n	8013aa6 <svl_dsmPrintAppInfo+0x282>
 8013a68:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013a6c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013a70:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 8013a74:	461a      	mov	r2, r3
 8013a76:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013a7a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013a7e:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 8013a82:	4619      	mov	r1, r3
 8013a84:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8013a88:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013a8c:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	9300      	str	r3, [sp, #0]
 8013a94:	460b      	mov	r3, r1
 8013a96:	4916      	ldr	r1, [pc, #88]	@ (8013af0 <svl_dsmPrintAppInfo+0x2cc>)
 8013a98:	2049      	movs	r0, #73	@ 0x49
 8013a9a:	f7fa fa61 	bl	800df60 <gos_traceTraceFormatted>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8013aa4:	e002      	b.n	8013aac <svl_dsmPrintAppInfo+0x288>
 8013aa6:	23ae      	movs	r3, #174	@ 0xae
 8013aa8:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		GOS_CONCAT_RESULT(printResult, gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author));
 8013aac:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8013ab0:	2b55      	cmp	r3, #85	@ 0x55
 8013ab2:	d10b      	bne.n	8013acc <svl_dsmPrintAppInfo+0x2a8>
 8013ab4:	1d3b      	adds	r3, r7, #4
 8013ab6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013aba:	461a      	mov	r2, r3
 8013abc:	490d      	ldr	r1, [pc, #52]	@ (8013af4 <svl_dsmPrintAppInfo+0x2d0>)
 8013abe:	2049      	movs	r0, #73	@ 0x49
 8013ac0:	f7fa fa4e 	bl	800df60 <gos_traceTraceFormatted>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
 8013aca:	e002      	b.n	8013ad2 <svl_dsmPrintAppInfo+0x2ae>
 8013acc:	23ae      	movs	r3, #174	@ 0xae
 8013ace:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Application does not exist.
	}

	return printResult;
 8013ad2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	08019e64 	.word	0x08019e64
 8013ae4:	08019d30 	.word	0x08019d30
 8013ae8:	08019d44 	.word	0x08019d44
 8013aec:	08019d58 	.word	0x08019d58
 8013af0:	08019d78 	.word	0x08019d78
 8013af4:	08019d98 	.word	0x08019d98
 8013af8:	08019e84 	.word	0x08019e84

08013afc <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8013afc:	b590      	push	{r4, r7, lr}
 8013afe:	b08f      	sub	sp, #60	@ 0x3c
 8013b00:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult   = GOS_ERROR;
 8013b02:	23ae      	movs	r3, #174	@ 0xae
 8013b04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	u8_t         initIdx      = 0u;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	u8_t         initBlockIdx = 0u;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	char_t       tempBuff [48];

    /*
     * Function code.
     */
	initResult = svl_dsmPlatformInit();
 8013b14:	f7ed f9e0 	bl	8000ed8 <svl_dsmPlatformInit>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (platformInitPhaseConfig != NULL && platformInitPhaseConfigSize > 0u)
 8013b1e:	4b40      	ldr	r3, [pc, #256]	@ (8013c20 <gos_platformDriverInit+0x124>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d06f      	beq.n	8013c06 <gos_platformDriverInit+0x10a>
	{
		// Loop through all init phases.
		for (initIdx = 0u; initIdx < platformInitPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8013b26:	2300      	movs	r3, #0
 8013b28:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013b2c:	e061      	b.n	8013bf2 <gos_platformDriverInit+0xf6>
		{
			(void_t) sprintf(tempBuff, "\r\n%s\r\n", platformInitPhaseConfig[initIdx].phaseName);
 8013b2e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8013b32:	493c      	ldr	r1, [pc, #240]	@ (8013c24 <gos_platformDriverInit+0x128>)
 8013b34:	4613      	mov	r3, r2
 8013b36:	015b      	lsls	r3, r3, #5
 8013b38:	4413      	add	r3, r2
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	440b      	add	r3, r1
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	1d3b      	adds	r3, r7, #4
 8013b42:	4939      	ldr	r1, [pc, #228]	@ (8013c28 <gos_platformDriverInit+0x12c>)
 8013b44:	4618      	mov	r0, r3
 8013b46:	f002 ffa7 	bl	8016a98 <siprintf>
			(void_t) drv_traceEnqueueTraceMessage(tempBuff, GOS_TRUE, GOS_SUCCESS);
 8013b4a:	1d3b      	adds	r3, r7, #4
 8013b4c:	2255      	movs	r2, #85	@ 0x55
 8013b4e:	2136      	movs	r1, #54	@ 0x36
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe f96d 	bl	8011e30 <drv_traceEnqueueTraceMessage>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8013b56:	2300      	movs	r3, #0
 8013b58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8013b5c:	e03e      	b.n	8013bdc <gos_platformDriverInit+0xe0>
			{
				if (platformInitPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 8013b5e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8013b62:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013b66:	482f      	ldr	r0, [pc, #188]	@ (8013c24 <gos_platformDriverInit+0x128>)
 8013b68:	00d9      	lsls	r1, r3, #3
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	015b      	lsls	r3, r3, #5
 8013b6e:	4413      	add	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	440b      	add	r3, r1
 8013b74:	4403      	add	r3, r0
 8013b76:	3308      	adds	r3, #8
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d033      	beq.n	8013be6 <gos_platformDriverInit+0xea>
				{
					initResult &= drv_traceEnqueueTraceMessage(
 8013b7e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8013b82:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
							platformInitPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 8013b86:	4827      	ldr	r0, [pc, #156]	@ (8013c24 <gos_platformDriverInit+0x128>)
 8013b88:	00d9      	lsls	r1, r3, #3
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	015b      	lsls	r3, r3, #5
 8013b8e:	4413      	add	r3, r2
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	440b      	add	r3, r1
 8013b94:	4403      	add	r3, r0
 8013b96:	3304      	adds	r3, #4
 8013b98:	681c      	ldr	r4, [r3, #0]
							GOS_FALSE,
							platformInitPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 8013b9a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8013b9e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013ba2:	4820      	ldr	r0, [pc, #128]	@ (8013c24 <gos_platformDriverInit+0x128>)
 8013ba4:	00d9      	lsls	r1, r3, #3
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	015b      	lsls	r3, r3, #5
 8013baa:	4413      	add	r3, r2
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	440b      	add	r3, r1
 8013bb0:	4403      	add	r3, r0
 8013bb2:	3308      	adds	r3, #8
 8013bb4:	681b      	ldr	r3, [r3, #0]
					initResult &= drv_traceEnqueueTraceMessage(
 8013bb6:	4798      	blx	r3
 8013bb8:	4603      	mov	r3, r0
 8013bba:	461a      	mov	r2, r3
 8013bbc:	2149      	movs	r1, #73	@ 0x49
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	f7fe f936 	bl	8011e30 <drv_traceEnqueueTraceMessage>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013bcc:	4013      	ands	r3, r2
 8013bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8013bd2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013bd6:	3301      	adds	r3, #1
 8013bd8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8013bdc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8013be0:	2b0f      	cmp	r3, #15
 8013be2:	d9bc      	bls.n	8013b5e <gos_platformDriverInit+0x62>
 8013be4:	e000      	b.n	8013be8 <gos_platformDriverInit+0xec>
				}
				else
				{
					// End of initializers.
					break;
 8013be6:	bf00      	nop
		for (initIdx = 0u; initIdx < platformInitPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8013be8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013bec:	3301      	adds	r3, #1
 8013bee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013bf2:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8013bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8013c20 <gos_platformDriverInit+0x124>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	490c      	ldr	r1, [pc, #48]	@ (8013c2c <gos_platformDriverInit+0x130>)
 8013bfc:	fba1 1303 	umull	r1, r3, r1, r3
 8013c00:	095b      	lsrs	r3, r3, #5
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d393      	bcc.n	8013b2e <gos_platformDriverInit+0x32>
	else
	{
		// Configuration is empty.
	}

	GOS_CONVERT_RESULT(initResult);
 8013c06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c0a:	2b55      	cmp	r3, #85	@ 0x55
 8013c0c:	d002      	beq.n	8013c14 <gos_platformDriverInit+0x118>
 8013c0e:	23ae      	movs	r3, #174	@ 0xae
 8013c10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    return initResult;
 8013c14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	373c      	adds	r7, #60	@ 0x3c
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd90      	pop	{r4, r7, pc}
 8013c20:	200016cc 	.word	0x200016cc
 8013c24:	0801a384 	.word	0x0801a384
 8013c28:	08019ef8 	.word	0x08019ef8
 8013c2c:	3e0f83e1 	.word	0x3e0f83e1

08013c30 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8013c36:	23ae      	movs	r3, #174	@ 0xae
 8013c38:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
	// Flush collected traces.
	drv_traceFlushTraceEntries();
 8013c3a:	f7fe f937 	bl	8011eac <drv_traceFlushTraceEntries>

	initResult = svl_dsmInit();
 8013c3e:	f7ff fbed 	bl	801341c <svl_dsmInit>
 8013c42:	4603      	mov	r3, r0
 8013c44:	71fb      	strb	r3, [r7, #7]

	// Final step is to call application initializer.
	initResult &= svl_dsmApplicationInit();
 8013c46:	f7ed f9a1 	bl	8000f8c <svl_dsmApplicationInit>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	79fb      	ldrb	r3, [r7, #7]
 8013c50:	4013      	ands	r3, r2
 8013c52:	71fb      	strb	r3, [r7, #7]

	GOS_CONVERT_RESULT(initResult);
 8013c54:	79fb      	ldrb	r3, [r7, #7]
 8013c56:	2b55      	cmp	r3, #85	@ 0x55
 8013c58:	d001      	beq.n	8013c5e <gos_userApplicationInit+0x2e>
 8013c5a:	23ae      	movs	r3, #174	@ 0xae
 8013c5c:	71fb      	strb	r3, [r7, #7]

    return initResult;
 8013c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <svl_dsmDaemonTask>:
 *          it activates the related reactions - if any.
 *
 * @return  -
 */
GOS_STATIC void_t svl_dsmDaemonTask (void_t)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Disable scheduling to keep printed info consistent.
	GOS_DISABLE_SCHED
 8013c72:	4b32      	ldr	r3, [pc, #200]	@ (8013d3c <svl_dsmDaemonTask+0xd4>)
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	3301      	adds	r3, #1
 8013c78:	b2da      	uxtb	r2, r3
 8013c7a:	4b30      	ldr	r3, [pc, #192]	@ (8013d3c <svl_dsmDaemonTask+0xd4>)
 8013c7c:	701a      	strb	r2, [r3, #0]

	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 8013c7e:	f7ff fc57 	bl	8013530 <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 8013c82:	f7ff fc7d 	bl	8013580 <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 8013c86:	f7ff fd1b 	bl	80136c0 <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 8013c8a:	f7ff fdcb 	bl	8013824 <svl_dsmPrintAppInfo>

	// Enable scheduling, data printed.
	GOS_ENABLE_SCHED
 8013c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8013d3c <svl_dsmDaemonTask+0xd4>)
 8013c90:	781b      	ldrb	r3, [r3, #0]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d005      	beq.n	8013ca2 <svl_dsmDaemonTask+0x3a>
 8013c96:	4b29      	ldr	r3, [pc, #164]	@ (8013d3c <svl_dsmDaemonTask+0xd4>)
 8013c98:	781b      	ldrb	r3, [r3, #0]
 8013c9a:	3b01      	subs	r3, #1
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	4b27      	ldr	r3, [pc, #156]	@ (8013d3c <svl_dsmDaemonTask+0xd4>)
 8013ca0:	701a      	strb	r2, [r3, #0]

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 8013ca2:	4b27      	ldr	r3, [pc, #156]	@ (8013d40 <svl_dsmDaemonTask+0xd8>)
 8013ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ca6:	21c8      	movs	r1, #200	@ 0xc8
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7f7 f9eb 	bl	800b084 <gos_taskSetPriority>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 8013cb2:	4b24      	ldr	r3, [pc, #144]	@ (8013d44 <svl_dsmDaemonTask+0xdc>)
 8013cb4:	781a      	ldrb	r2, [r3, #0]
 8013cb6:	4b24      	ldr	r3, [pc, #144]	@ (8013d48 <svl_dsmDaemonTask+0xe0>)
 8013cb8:	701a      	strb	r2, [r3, #0]
	deviceState     = requiredState;
 8013cba:	4a22      	ldr	r2, [pc, #136]	@ (8013d44 <svl_dsmDaemonTask+0xdc>)
 8013cbc:	79bb      	ldrb	r3, [r7, #6]
 8013cbe:	7013      	strb	r3, [r2, #0]
}
 8013cc0:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 8013cc2:	4b21      	ldr	r3, [pc, #132]	@ (8013d48 <svl_dsmDaemonTask+0xe0>)
 8013cc4:	781a      	ldrb	r2, [r3, #0]
 8013cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8013d44 <svl_dsmDaemonTask+0xdc>)
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d031      	beq.n	8013d32 <svl_dsmDaemonTask+0xca>
 8013cce:	4b1f      	ldr	r3, [pc, #124]	@ (8013d4c <svl_dsmDaemonTask+0xe4>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d02d      	beq.n	8013d32 <svl_dsmDaemonTask+0xca>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	71fb      	strb	r3, [r7, #7]
 8013cda:	e020      	b.n	8013d1e <svl_dsmDaemonTask+0xb6>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8013cdc:	79fb      	ldrb	r3, [r7, #7]
 8013cde:	4a1c      	ldr	r2, [pc, #112]	@ (8013d50 <svl_dsmDaemonTask+0xe8>)
 8013ce0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8013ce4:	4b18      	ldr	r3, [pc, #96]	@ (8013d48 <svl_dsmDaemonTask+0xe0>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	429a      	cmp	r2, r3
 8013cea:	d115      	bne.n	8013d18 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].currState == deviceState &&
 8013cec:	79fb      	ldrb	r3, [r7, #7]
 8013cee:	4a18      	ldr	r2, [pc, #96]	@ (8013d50 <svl_dsmDaemonTask+0xe8>)
 8013cf0:	00db      	lsls	r3, r3, #3
 8013cf2:	4413      	add	r3, r2
 8013cf4:	785a      	ldrb	r2, [r3, #1]
 8013cf6:	4b13      	ldr	r3, [pc, #76]	@ (8013d44 <svl_dsmDaemonTask+0xdc>)
 8013cf8:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d10c      	bne.n	8013d18 <svl_dsmDaemonTask+0xb0>
					reactionConfig[reactionIdx].pReaction != NULL)
 8013cfe:	79fb      	ldrb	r3, [r7, #7]
 8013d00:	4a13      	ldr	r2, [pc, #76]	@ (8013d50 <svl_dsmDaemonTask+0xe8>)
 8013d02:	00db      	lsls	r3, r3, #3
 8013d04:	4413      	add	r3, r2
 8013d06:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d005      	beq.n	8013d18 <svl_dsmDaemonTask+0xb0>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 8013d0c:	79fb      	ldrb	r3, [r7, #7]
 8013d0e:	4a10      	ldr	r2, [pc, #64]	@ (8013d50 <svl_dsmDaemonTask+0xe8>)
 8013d10:	00db      	lsls	r3, r3, #3
 8013d12:	4413      	add	r3, r2
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 8013d18:	79fb      	ldrb	r3, [r7, #7]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	71fb      	strb	r3, [r7, #7]
 8013d1e:	79fa      	ldrb	r2, [r7, #7]
 8013d20:	4b0a      	ldr	r3, [pc, #40]	@ (8013d4c <svl_dsmDaemonTask+0xe4>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	08db      	lsrs	r3, r3, #3
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d3d8      	bcc.n	8013cdc <svl_dsmDaemonTask+0x74>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 8013d2a:	4b06      	ldr	r3, [pc, #24]	@ (8013d44 <svl_dsmDaemonTask+0xdc>)
 8013d2c:	781a      	ldrb	r2, [r3, #0]
 8013d2e:	4b06      	ldr	r3, [pc, #24]	@ (8013d48 <svl_dsmDaemonTask+0xe0>)
 8013d30:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 8013d32:	2014      	movs	r0, #20
 8013d34:	f7f6 fb5e 	bl	800a3f4 <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 8013d38:	e7c3      	b.n	8013cc2 <svl_dsmDaemonTask+0x5a>
 8013d3a:	bf00      	nop
 8013d3c:	20001961 	.word	0x20001961
 8013d40:	20000f98 	.word	0x20000f98
 8013d44:	20006361 	.word	0x20006361
 8013d48:	20006362 	.word	0x20006362
 8013d4c:	200016d0 	.word	0x200016d0
 8013d50:	0801a384 	.word	0x0801a384

08013d54 <svl_pdhInit>:

/*
 * Function: svl_pdhInit
 */
gos_result_t svl_pdhInit (void_t)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_SUCCESS;
 8013d5a:	2355      	movs	r3, #85	@ 0x55
 8013d5c:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&softwareInfoReqMsg));
 8013d5e:	79fb      	ldrb	r3, [r7, #7]
 8013d60:	2b55      	cmp	r3, #85	@ 0x55
 8013d62:	d105      	bne.n	8013d70 <svl_pdhInit+0x1c>
 8013d64:	4833      	ldr	r0, [pc, #204]	@ (8013e34 <svl_pdhInit+0xe0>)
 8013d66:	f001 fb95 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	71fb      	strb	r3, [r7, #7]
 8013d6e:	e001      	b.n	8013d74 <svl_pdhInit+0x20>
 8013d70:	23ae      	movs	r3, #174	@ 0xae
 8013d72:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&hardwareInfoReqMsg));
 8013d74:	79fb      	ldrb	r3, [r7, #7]
 8013d76:	2b55      	cmp	r3, #85	@ 0x55
 8013d78:	d105      	bne.n	8013d86 <svl_pdhInit+0x32>
 8013d7a:	482f      	ldr	r0, [pc, #188]	@ (8013e38 <svl_pdhInit+0xe4>)
 8013d7c:	f001 fb8a 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013d80:	4603      	mov	r3, r0
 8013d82:	71fb      	strb	r3, [r7, #7]
 8013d84:	e001      	b.n	8013d8a <svl_pdhInit+0x36>
 8013d86:	23ae      	movs	r3, #174	@ 0xae
 8013d88:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&wifiCfgReqMsg));
 8013d8a:	79fb      	ldrb	r3, [r7, #7]
 8013d8c:	2b55      	cmp	r3, #85	@ 0x55
 8013d8e:	d105      	bne.n	8013d9c <svl_pdhInit+0x48>
 8013d90:	482a      	ldr	r0, [pc, #168]	@ (8013e3c <svl_pdhInit+0xe8>)
 8013d92:	f001 fb7f 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013d96:	4603      	mov	r3, r0
 8013d98:	71fb      	strb	r3, [r7, #7]
 8013d9a:	e001      	b.n	8013da0 <svl_pdhInit+0x4c>
 8013d9c:	23ae      	movs	r3, #174	@ 0xae
 8013d9e:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&bldCfgReqMsg));
 8013da0:	79fb      	ldrb	r3, [r7, #7]
 8013da2:	2b55      	cmp	r3, #85	@ 0x55
 8013da4:	d105      	bne.n	8013db2 <svl_pdhInit+0x5e>
 8013da6:	4826      	ldr	r0, [pc, #152]	@ (8013e40 <svl_pdhInit+0xec>)
 8013da8:	f001 fb74 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013dac:	4603      	mov	r3, r0
 8013dae:	71fb      	strb	r3, [r7, #7]
 8013db0:	e001      	b.n	8013db6 <svl_pdhInit+0x62>
 8013db2:	23ae      	movs	r3, #174	@ 0xae
 8013db4:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&softwareInfoSetMsg));
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	2b55      	cmp	r3, #85	@ 0x55
 8013dba:	d105      	bne.n	8013dc8 <svl_pdhInit+0x74>
 8013dbc:	4821      	ldr	r0, [pc, #132]	@ (8013e44 <svl_pdhInit+0xf0>)
 8013dbe:	f001 fb69 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	71fb      	strb	r3, [r7, #7]
 8013dc6:	e001      	b.n	8013dcc <svl_pdhInit+0x78>
 8013dc8:	23ae      	movs	r3, #174	@ 0xae
 8013dca:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&hardwareInfoSetMsg));
 8013dcc:	79fb      	ldrb	r3, [r7, #7]
 8013dce:	2b55      	cmp	r3, #85	@ 0x55
 8013dd0:	d105      	bne.n	8013dde <svl_pdhInit+0x8a>
 8013dd2:	481d      	ldr	r0, [pc, #116]	@ (8013e48 <svl_pdhInit+0xf4>)
 8013dd4:	f001 fb5e 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	71fb      	strb	r3, [r7, #7]
 8013ddc:	e001      	b.n	8013de2 <svl_pdhInit+0x8e>
 8013dde:	23ae      	movs	r3, #174	@ 0xae
 8013de0:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&wifiCfgSetMsg));
 8013de2:	79fb      	ldrb	r3, [r7, #7]
 8013de4:	2b55      	cmp	r3, #85	@ 0x55
 8013de6:	d105      	bne.n	8013df4 <svl_pdhInit+0xa0>
 8013de8:	4818      	ldr	r0, [pc, #96]	@ (8013e4c <svl_pdhInit+0xf8>)
 8013dea:	f001 fb53 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013dee:	4603      	mov	r3, r0
 8013df0:	71fb      	strb	r3, [r7, #7]
 8013df2:	e001      	b.n	8013df8 <svl_pdhInit+0xa4>
 8013df4:	23ae      	movs	r3, #174	@ 0xae
 8013df6:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&bldCfgSetMsg));
 8013df8:	79fb      	ldrb	r3, [r7, #7]
 8013dfa:	2b55      	cmp	r3, #85	@ 0x55
 8013dfc:	d105      	bne.n	8013e0a <svl_pdhInit+0xb6>
 8013dfe:	4814      	ldr	r0, [pc, #80]	@ (8013e50 <svl_pdhInit+0xfc>)
 8013e00:	f001 fb48 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8013e04:	4603      	mov	r3, r0
 8013e06:	71fb      	strb	r3, [r7, #7]
 8013e08:	e001      	b.n	8013e0e <svl_pdhInit+0xba>
 8013e0a:	23ae      	movs	r3, #174	@ 0xae
 8013e0c:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_mutexInit(&pdhMutex));
 8013e0e:	79fb      	ldrb	r3, [r7, #7]
 8013e10:	2b55      	cmp	r3, #85	@ 0x55
 8013e12:	d105      	bne.n	8013e20 <svl_pdhInit+0xcc>
 8013e14:	480f      	ldr	r0, [pc, #60]	@ (8013e54 <svl_pdhInit+0x100>)
 8013e16:	f7f8 fe13 	bl	800ca40 <gos_mutexInit>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	71fb      	strb	r3, [r7, #7]
 8013e1e:	e001      	b.n	8013e24 <svl_pdhInit+0xd0>
 8013e20:	23ae      	movs	r3, #174	@ 0xae
 8013e22:	71fb      	strb	r3, [r7, #7]

	pdhInited = GOS_TRUE;
 8013e24:	4b0c      	ldr	r3, [pc, #48]	@ (8013e58 <svl_pdhInit+0x104>)
 8013e26:	2236      	movs	r2, #54	@ 0x36
 8013e28:	701a      	strb	r2, [r3, #0]

	return initResult;
 8013e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	20001004 	.word	0x20001004
 8013e38:	20001014 	.word	0x20001014
 8013e3c:	20001024 	.word	0x20001024
 8013e40:	20001034 	.word	0x20001034
 8013e44:	20001044 	.word	0x20001044
 8013e48:	20001054 	.word	0x20001054
 8013e4c:	20001064 	.word	0x20001064
 8013e50:	20001074 	.word	0x20001074
 8013e54:	2000636c 	.word	0x2000636c
 8013e58:	20001002 	.word	0x20001002

08013e5c <svl_pdhConfigure>:

/*
 * Function: svl_pdhConfigure
 */
gos_result_t svl_pdhConfigure (svl_pdhCfg_t* pCfg)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b085      	sub	sp, #20
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 8013e64:	23ae      	movs	r3, #174	@ 0xae
 8013e66:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d011      	beq.n	8013e92 <svl_pdhConfigure+0x36>
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d00d      	beq.n	8013e92 <svl_pdhConfigure+0x36>
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d009      	beq.n	8013e92 <svl_pdhConfigure+0x36>
	{
		pdhReadFunction  = pCfg->readFunction;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4a07      	ldr	r2, [pc, #28]	@ (8013ea0 <svl_pdhConfigure+0x44>)
 8013e84:	6013      	str	r3, [r2, #0]
		pdhWriteFunction = pCfg->writeFunction;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	4a06      	ldr	r2, [pc, #24]	@ (8013ea4 <svl_pdhConfigure+0x48>)
 8013e8c:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 8013e8e:	2355      	movs	r3, #85	@ 0x55
 8013e90:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 8013e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3714      	adds	r7, #20
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr
 8013ea0:	20006364 	.word	0x20006364
 8013ea4:	20006368 	.word	0x20006368

08013ea8 <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 8013ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8013eb0:	23ae      	movs	r3, #174	@ 0xae
 8013eb2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d06e      	beq.n	8013f98 <svl_pdhGetLibVersion+0xf0>
 8013eba:	4b3b      	ldr	r3, [pc, #236]	@ (8013fa8 <svl_pdhGetLibVersion+0x100>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d06a      	beq.n	8013f98 <svl_pdhGetLibVersion+0xf0>
	{
		(void_t) memset((void_t*)pLibVer, 0, sizeof(*pLibVer));
 8013ec2:	22a0      	movs	r2, #160	@ 0xa0
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f002 fe6a 	bl	8016ba0 <memset>

		pLibVer->major             = PDH_LIBVER_VERSION_MAJOR;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	701a      	strb	r2, [r3, #0]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	705a      	strb	r2, [r3, #1]
		pLibVer->minor             = PDH_LIBVER_VERSION_MINOR;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f042 0219 	orr.w	r2, r2, #25
 8013ede:	709a      	strb	r2, [r3, #2]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	70da      	strb	r2, [r3, #3]
		pLibVer->build             = PDH_LIBVER_VERSION_BUILD;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	711a      	strb	r2, [r3, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years        = PDH_LIBVER_VERSION_DATE_YEAR;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	f062 0216 	orn	r2, r2, #22
 8013ef6:	739a      	strb	r2, [r3, #14]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f042 0207 	orr.w	r2, r2, #7
 8013efe:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months       = PDH_LIBVER_VERSION_DATE_MONTH;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2207      	movs	r2, #7
 8013f04:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days         = PDH_LIBVER_VERSION_DATE_DAY;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	f042 0216 	orr.w	r2, r2, #22
 8013f0e:	72da      	strb	r2, [r3, #11]
 8013f10:	2200      	movs	r2, #0
 8013f12:	731a      	strb	r2, [r3, #12]
		pLibVer->date.hours        = 0u;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2200      	movs	r2, #0
 8013f18:	729a      	strb	r2, [r3, #10]
		pLibVer->date.minutes      = 0u;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	725a      	strb	r2, [r3, #9]
		pLibVer->date.seconds      = 0u;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	721a      	strb	r2, [r3, #8]
		pLibVer->date.milliseconds = 0u;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	719a      	strb	r2, [r3, #6]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	71da      	strb	r2, [r3, #7]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	3310      	adds	r3, #16
 8013f34:	4a1d      	ldr	r2, [pc, #116]	@ (8013fac <svl_pdhGetLibVersion+0x104>)
 8013f36:	461c      	mov	r4, r3
 8013f38:	4613      	mov	r3, r2
 8013f3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f3c:	6020      	str	r0, [r4, #0]
 8013f3e:	6061      	str	r1, [r4, #4]
 8013f40:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	3370      	adds	r3, #112	@ 0x70
 8013f46:	4a1a      	ldr	r2, [pc, #104]	@ (8013fb0 <svl_pdhGetLibVersion+0x108>)
 8013f48:	461d      	mov	r5, r3
 8013f4a:	4614      	mov	r4, r2
 8013f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f4e:	6028      	str	r0, [r5, #0]
 8013f50:	6069      	str	r1, [r5, #4]
 8013f52:	60aa      	str	r2, [r5, #8]
 8013f54:	60eb      	str	r3, [r5, #12]
 8013f56:	6820      	ldr	r0, [r4, #0]
 8013f58:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	3340      	adds	r3, #64	@ 0x40
 8013f5e:	4a15      	ldr	r2, [pc, #84]	@ (8013fb4 <svl_pdhGetLibVersion+0x10c>)
 8013f60:	4614      	mov	r4, r2
 8013f62:	469c      	mov	ip, r3
 8013f64:	f104 0e20 	add.w	lr, r4, #32
 8013f68:	4665      	mov	r5, ip
 8013f6a:	4626      	mov	r6, r4
 8013f6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f6e:	6028      	str	r0, [r5, #0]
 8013f70:	6069      	str	r1, [r5, #4]
 8013f72:	60aa      	str	r2, [r5, #8]
 8013f74:	60eb      	str	r3, [r5, #12]
 8013f76:	3410      	adds	r4, #16
 8013f78:	f10c 0c10 	add.w	ip, ip, #16
 8013f7c:	4574      	cmp	r4, lr
 8013f7e:	d1f3      	bne.n	8013f68 <svl_pdhGetLibVersion+0xc0>
 8013f80:	4662      	mov	r2, ip
 8013f82:	4623      	mov	r3, r4
 8013f84:	cb03      	ldmia	r3!, {r0, r1}
 8013f86:	6010      	str	r0, [r2, #0]
 8013f88:	6051      	str	r1, [r2, #4]
 8013f8a:	8819      	ldrh	r1, [r3, #0]
 8013f8c:	789b      	ldrb	r3, [r3, #2]
 8013f8e:	8111      	strh	r1, [r2, #8]
 8013f90:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 8013f92:	2355      	movs	r3, #85	@ 0x55
 8013f94:	73fb      	strb	r3, [r7, #15]
 8013f96:	e001      	b.n	8013f9c <svl_pdhGetLibVersion+0xf4>
	}
	else
	{
		getResult = GOS_ERROR;
 8013f98:	23ae      	movs	r3, #174	@ 0xae
 8013f9a:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8013f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3714      	adds	r7, #20
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	20006364 	.word	0x20006364
 8013fac:	08019f00 	.word	0x08019f00
 8013fb0:	08019f0c 	.word	0x08019f0c
 8013fb4:	08019f20 	.word	0x08019f20

08013fb8 <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8013fc0:	23ae      	movs	r3, #174	@ 0xae
 8013fc2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d020      	beq.n	801400c <svl_pdhGetSwInfo+0x54>
 8013fca:	4b14      	ldr	r3, [pc, #80]	@ (801401c <svl_pdhGetSwInfo+0x64>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d01c      	beq.n	801400c <svl_pdhGetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8013fd2:	4b13      	ldr	r3, [pc, #76]	@ (8014020 <svl_pdhGetSwInfo+0x68>)
 8013fd4:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8013fd6:	2b49      	cmp	r3, #73	@ 0x49
 8013fd8:	d00b      	beq.n	8013ff2 <svl_pdhGetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8013fda:	4b11      	ldr	r3, [pc, #68]	@ (8014020 <svl_pdhGetSwInfo+0x68>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	2b36      	cmp	r3, #54	@ 0x36
 8013fe0:	d114      	bne.n	801400c <svl_pdhGetSwInfo+0x54>
 8013fe2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8013fe6:	480f      	ldr	r0, [pc, #60]	@ (8014024 <svl_pdhGetSwInfo+0x6c>)
 8013fe8:	f7f8 fd44 	bl	800ca74 <gos_mutexLock>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b55      	cmp	r3, #85	@ 0x55
 8013ff0:	d10c      	bne.n	801400c <svl_pdhGetSwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8013ff2:	4b0a      	ldr	r3, [pc, #40]	@ (801401c <svl_pdhGetSwInfo+0x64>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8013ffa:	6879      	ldr	r1, [r7, #4]
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	4798      	blx	r3
 8014000:	4603      	mov	r3, r0
 8014002:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014004:	4807      	ldr	r0, [pc, #28]	@ (8014024 <svl_pdhGetSwInfo+0x6c>)
 8014006:	f7f8 fe3b 	bl	800cc80 <gos_mutexUnlock>
 801400a:	e001      	b.n	8014010 <svl_pdhGetSwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 801400c:	23ae      	movs	r3, #174	@ 0xae
 801400e:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8014010:	7bfb      	ldrb	r3, [r7, #15]
}
 8014012:	4618      	mov	r0, r3
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	20006364 	.word	0x20006364
 8014020:	20001002 	.word	0x20001002
 8014024:	2000636c 	.word	0x2000636c

08014028 <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8014030:	23ae      	movs	r3, #174	@ 0xae
 8014032:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d020      	beq.n	801407c <svl_pdhGetHwInfo+0x54>
 801403a:	4b14      	ldr	r3, [pc, #80]	@ (801408c <svl_pdhGetHwInfo+0x64>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d01c      	beq.n	801407c <svl_pdhGetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014042:	4b13      	ldr	r3, [pc, #76]	@ (8014090 <svl_pdhGetHwInfo+0x68>)
 8014044:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8014046:	2b49      	cmp	r3, #73	@ 0x49
 8014048:	d00b      	beq.n	8014062 <svl_pdhGetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801404a:	4b11      	ldr	r3, [pc, #68]	@ (8014090 <svl_pdhGetHwInfo+0x68>)
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2b36      	cmp	r3, #54	@ 0x36
 8014050:	d114      	bne.n	801407c <svl_pdhGetHwInfo+0x54>
 8014052:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014056:	480f      	ldr	r0, [pc, #60]	@ (8014094 <svl_pdhGetHwInfo+0x6c>)
 8014058:	f7f8 fd0c 	bl	800ca74 <gos_mutexLock>
 801405c:	4603      	mov	r3, r0
 801405e:	2b55      	cmp	r3, #85	@ 0x55
 8014060:	d10c      	bne.n	801407c <svl_pdhGetHwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8014062:	4b0a      	ldr	r3, [pc, #40]	@ (801408c <svl_pdhGetHwInfo+0x64>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	22fa      	movs	r2, #250	@ 0xfa
 8014068:	6879      	ldr	r1, [r7, #4]
 801406a:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 801406e:	4798      	blx	r3
 8014070:	4603      	mov	r3, r0
 8014072:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014074:	4807      	ldr	r0, [pc, #28]	@ (8014094 <svl_pdhGetHwInfo+0x6c>)
 8014076:	f7f8 fe03 	bl	800cc80 <gos_mutexUnlock>
 801407a:	e001      	b.n	8014080 <svl_pdhGetHwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 801407c:	23ae      	movs	r3, #174	@ 0xae
 801407e:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8014080:	7bfb      	ldrb	r3, [r7, #15]
}
 8014082:	4618      	mov	r0, r3
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	20006364 	.word	0x20006364
 8014090:	20001002 	.word	0x20001002
 8014094:	2000636c 	.word	0x2000636c

08014098 <svl_pdhGetBldCfg>:

/*
 * Function: svl_pdhGetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhGetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 80140a0:	23ae      	movs	r3, #174	@ 0xae
 80140a2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d020      	beq.n	80140ec <svl_pdhGetBldCfg+0x54>
 80140aa:	4b14      	ldr	r3, [pc, #80]	@ (80140fc <svl_pdhGetBldCfg+0x64>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d01c      	beq.n	80140ec <svl_pdhGetBldCfg+0x54>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80140b2:	4b13      	ldr	r3, [pc, #76]	@ (8014100 <svl_pdhGetBldCfg+0x68>)
 80140b4:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 80140b6:	2b49      	cmp	r3, #73	@ 0x49
 80140b8:	d00b      	beq.n	80140d2 <svl_pdhGetBldCfg+0x3a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80140ba:	4b11      	ldr	r3, [pc, #68]	@ (8014100 <svl_pdhGetBldCfg+0x68>)
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	2b36      	cmp	r3, #54	@ 0x36
 80140c0:	d114      	bne.n	80140ec <svl_pdhGetBldCfg+0x54>
 80140c2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80140c6:	480f      	ldr	r0, [pc, #60]	@ (8014104 <svl_pdhGetBldCfg+0x6c>)
 80140c8:	f7f8 fcd4 	bl	800ca74 <gos_mutexLock>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b55      	cmp	r3, #85	@ 0x55
 80140d0:	d10c      	bne.n	80140ec <svl_pdhGetBldCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 80140d2:	4b0a      	ldr	r3, [pc, #40]	@ (80140fc <svl_pdhGetBldCfg+0x64>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	220e      	movs	r2, #14
 80140d8:	6879      	ldr	r1, [r7, #4]
 80140da:	f240 309a 	movw	r0, #922	@ 0x39a
 80140de:	4798      	blx	r3
 80140e0:	4603      	mov	r3, r0
 80140e2:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80140e4:	4807      	ldr	r0, [pc, #28]	@ (8014104 <svl_pdhGetBldCfg+0x6c>)
 80140e6:	f7f8 fdcb 	bl	800cc80 <gos_mutexUnlock>
 80140ea:	e001      	b.n	80140f0 <svl_pdhGetBldCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 80140ec:	23ae      	movs	r3, #174	@ 0xae
 80140ee:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 80140f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	20006364 	.word	0x20006364
 8014100:	20001002 	.word	0x20001002
 8014104:	2000636c 	.word	0x2000636c

08014108 <svl_pdhGetWifiCfg>:

/*
 * Function: svl_pdhGetWifiCfg
 */
gos_result_t svl_pdhGetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 8014110:	23ae      	movs	r3, #174	@ 0xae
 8014112:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d020      	beq.n	801415c <svl_pdhGetWifiCfg+0x54>
 801411a:	4b14      	ldr	r3, [pc, #80]	@ (801416c <svl_pdhGetWifiCfg+0x64>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d01c      	beq.n	801415c <svl_pdhGetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014122:	4b13      	ldr	r3, [pc, #76]	@ (8014170 <svl_pdhGetWifiCfg+0x68>)
 8014124:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhReadFunction != NULL) &&
 8014126:	2b49      	cmp	r3, #73	@ 0x49
 8014128:	d00b      	beq.n	8014142 <svl_pdhGetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801412a:	4b11      	ldr	r3, [pc, #68]	@ (8014170 <svl_pdhGetWifiCfg+0x68>)
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	2b36      	cmp	r3, #54	@ 0x36
 8014130:	d114      	bne.n	801415c <svl_pdhGetWifiCfg+0x54>
 8014132:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014136:	480f      	ldr	r0, [pc, #60]	@ (8014174 <svl_pdhGetWifiCfg+0x6c>)
 8014138:	f7f8 fc9c 	bl	800ca74 <gos_mutexLock>
 801413c:	4603      	mov	r3, r0
 801413e:	2b55      	cmp	r3, #85	@ 0x55
 8014140:	d10c      	bne.n	801415c <svl_pdhGetWifiCfg+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 8014142:	4b0a      	ldr	r3, [pc, #40]	@ (801416c <svl_pdhGetWifiCfg+0x64>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	226e      	movs	r2, #110	@ 0x6e
 8014148:	6879      	ldr	r1, [r7, #4]
 801414a:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 801414e:	4798      	blx	r3
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014154:	4807      	ldr	r0, [pc, #28]	@ (8014174 <svl_pdhGetWifiCfg+0x6c>)
 8014156:	f7f8 fd93 	bl	800cc80 <gos_mutexUnlock>
 801415a:	e001      	b.n	8014160 <svl_pdhGetWifiCfg+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 801415c:	23ae      	movs	r3, #174	@ 0xae
 801415e:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 8014160:	7bfb      	ldrb	r3, [r7, #15]
}
 8014162:	4618      	mov	r0, r3
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	20006364 	.word	0x20006364
 8014170:	20001002 	.word	0x20001002
 8014174:	2000636c 	.word	0x2000636c

08014178 <svl_pdhSetSwInfo>:

/*
 * Function: svl_pdhSetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhSetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 8014180:	23ae      	movs	r3, #174	@ 0xae
 8014182:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d020      	beq.n	80141cc <svl_pdhSetSwInfo+0x54>
 801418a:	4b14      	ldr	r3, [pc, #80]	@ (80141dc <svl_pdhSetSwInfo+0x64>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d01c      	beq.n	80141cc <svl_pdhSetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014192:	4b13      	ldr	r3, [pc, #76]	@ (80141e0 <svl_pdhSetSwInfo+0x68>)
 8014194:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8014196:	2b49      	cmp	r3, #73	@ 0x49
 8014198:	d00b      	beq.n	80141b2 <svl_pdhSetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801419a:	4b11      	ldr	r3, [pc, #68]	@ (80141e0 <svl_pdhSetSwInfo+0x68>)
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	2b36      	cmp	r3, #54	@ 0x36
 80141a0:	d114      	bne.n	80141cc <svl_pdhSetSwInfo+0x54>
 80141a2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80141a6:	480f      	ldr	r0, [pc, #60]	@ (80141e4 <svl_pdhSetSwInfo+0x6c>)
 80141a8:	f7f8 fc64 	bl	800ca74 <gos_mutexLock>
 80141ac:	4603      	mov	r3, r0
 80141ae:	2b55      	cmp	r3, #85	@ 0x55
 80141b0:	d10c      	bne.n	80141cc <svl_pdhSetSwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(svl_pdhSwInfo_t));
 80141b2:	4b0a      	ldr	r3, [pc, #40]	@ (80141dc <svl_pdhSetSwInfo+0x64>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80141ba:	6879      	ldr	r1, [r7, #4]
 80141bc:	2000      	movs	r0, #0
 80141be:	4798      	blx	r3
 80141c0:	4603      	mov	r3, r0
 80141c2:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80141c4:	4807      	ldr	r0, [pc, #28]	@ (80141e4 <svl_pdhSetSwInfo+0x6c>)
 80141c6:	f7f8 fd5b 	bl	800cc80 <gos_mutexUnlock>
 80141ca:	e001      	b.n	80141d0 <svl_pdhSetSwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 80141cc:	23ae      	movs	r3, #174	@ 0xae
 80141ce:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 80141d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3710      	adds	r7, #16
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
 80141da:	bf00      	nop
 80141dc:	20006368 	.word	0x20006368
 80141e0:	20001002 	.word	0x20001002
 80141e4:	2000636c 	.word	0x2000636c

080141e8 <svl_pdhSetHwInfo>:

/*
 * Function: svl_pdhSetHwInfo
 */
gos_result_t svl_pdhSetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b084      	sub	sp, #16
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 80141f0:	23ae      	movs	r3, #174	@ 0xae
 80141f2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d020      	beq.n	801423c <svl_pdhSetHwInfo+0x54>
 80141fa:	4b14      	ldr	r3, [pc, #80]	@ (801424c <svl_pdhSetHwInfo+0x64>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d01c      	beq.n	801423c <svl_pdhSetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014202:	4b13      	ldr	r3, [pc, #76]	@ (8014250 <svl_pdhSetHwInfo+0x68>)
 8014204:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8014206:	2b49      	cmp	r3, #73	@ 0x49
 8014208:	d00b      	beq.n	8014222 <svl_pdhSetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801420a:	4b11      	ldr	r3, [pc, #68]	@ (8014250 <svl_pdhSetHwInfo+0x68>)
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	2b36      	cmp	r3, #54	@ 0x36
 8014210:	d114      	bne.n	801423c <svl_pdhSetHwInfo+0x54>
 8014212:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014216:	480f      	ldr	r0, [pc, #60]	@ (8014254 <svl_pdhSetHwInfo+0x6c>)
 8014218:	f7f8 fc2c 	bl	800ca74 <gos_mutexLock>
 801421c:	4603      	mov	r3, r0
 801421e:	2b55      	cmp	r3, #85	@ 0x55
 8014220:	d10c      	bne.n	801423c <svl_pdhSetHwInfo+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8014222:	4b0a      	ldr	r3, [pc, #40]	@ (801424c <svl_pdhSetHwInfo+0x64>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	22fa      	movs	r2, #250	@ 0xfa
 8014228:	6879      	ldr	r1, [r7, #4]
 801422a:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 801422e:	4798      	blx	r3
 8014230:	4603      	mov	r3, r0
 8014232:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014234:	4807      	ldr	r0, [pc, #28]	@ (8014254 <svl_pdhSetHwInfo+0x6c>)
 8014236:	f7f8 fd23 	bl	800cc80 <gos_mutexUnlock>
 801423a:	e001      	b.n	8014240 <svl_pdhSetHwInfo+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 801423c:	23ae      	movs	r3, #174	@ 0xae
 801423e:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 8014240:	7bfb      	ldrb	r3, [r7, #15]
}
 8014242:	4618      	mov	r0, r3
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	20006368 	.word	0x20006368
 8014250:	20001002 	.word	0x20001002
 8014254:	2000636c 	.word	0x2000636c

08014258 <svl_pdhSetBldCfg>:

/*
 * Function: svl_pdhSetBldCfg
 */
GOS_INLINE gos_result_t svl_pdhSetBldCfg (svl_pdhBldCfg_t* pBldCfg)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 8014260:	23ae      	movs	r3, #174	@ 0xae
 8014262:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d020      	beq.n	80142ac <svl_pdhSetBldCfg+0x54>
 801426a:	4b14      	ldr	r3, [pc, #80]	@ (80142bc <svl_pdhSetBldCfg+0x64>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d01c      	beq.n	80142ac <svl_pdhSetBldCfg+0x54>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014272:	4b13      	ldr	r3, [pc, #76]	@ (80142c0 <svl_pdhSetBldCfg+0x68>)
 8014274:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8014276:	2b49      	cmp	r3, #73	@ 0x49
 8014278:	d00b      	beq.n	8014292 <svl_pdhSetBldCfg+0x3a>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801427a:	4b11      	ldr	r3, [pc, #68]	@ (80142c0 <svl_pdhSetBldCfg+0x68>)
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b36      	cmp	r3, #54	@ 0x36
 8014280:	d114      	bne.n	80142ac <svl_pdhSetBldCfg+0x54>
 8014282:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014286:	480f      	ldr	r0, [pc, #60]	@ (80142c4 <svl_pdhSetBldCfg+0x6c>)
 8014288:	f7f8 fbf4 	bl	800ca74 <gos_mutexLock>
 801428c:	4603      	mov	r3, r0
 801428e:	2b55      	cmp	r3, #85	@ 0x55
 8014290:	d10c      	bne.n	80142ac <svl_pdhSetBldCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8014292:	4b0a      	ldr	r3, [pc, #40]	@ (80142bc <svl_pdhSetBldCfg+0x64>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	220e      	movs	r2, #14
 8014298:	6879      	ldr	r1, [r7, #4]
 801429a:	f240 309a 	movw	r0, #922	@ 0x39a
 801429e:	4798      	blx	r3
 80142a0:	4603      	mov	r3, r0
 80142a2:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80142a4:	4807      	ldr	r0, [pc, #28]	@ (80142c4 <svl_pdhSetBldCfg+0x6c>)
 80142a6:	f7f8 fceb 	bl	800cc80 <gos_mutexUnlock>
 80142aa:	e001      	b.n	80142b0 <svl_pdhSetBldCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 80142ac:	23ae      	movs	r3, #174	@ 0xae
 80142ae:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 80142b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	20006368 	.word	0x20006368
 80142c0:	20001002 	.word	0x20001002
 80142c4:	2000636c 	.word	0x2000636c

080142c8 <svl_pdhSetWifiCfg>:

/*
 * Function: svl_pdhSetWifiCfg
 */
gos_result_t svl_pdhSetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 80142d0:	23ae      	movs	r3, #174	@ 0xae
 80142d2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d020      	beq.n	801431c <svl_pdhSetWifiCfg+0x54>
 80142da:	4b14      	ldr	r3, [pc, #80]	@ (801432c <svl_pdhSetWifiCfg+0x64>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d01c      	beq.n	801431c <svl_pdhSetWifiCfg+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80142e2:	4b13      	ldr	r3, [pc, #76]	@ (8014330 <svl_pdhSetWifiCfg+0x68>)
 80142e4:	781b      	ldrb	r3, [r3, #0]
	if ((pWifiCfg != NULL) && (pdhWriteFunction != NULL) &&
 80142e6:	2b49      	cmp	r3, #73	@ 0x49
 80142e8:	d00b      	beq.n	8014302 <svl_pdhSetWifiCfg+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80142ea:	4b11      	ldr	r3, [pc, #68]	@ (8014330 <svl_pdhSetWifiCfg+0x68>)
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	2b36      	cmp	r3, #54	@ 0x36
 80142f0:	d114      	bne.n	801431c <svl_pdhSetWifiCfg+0x54>
 80142f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80142f6:	480f      	ldr	r0, [pc, #60]	@ (8014334 <svl_pdhSetWifiCfg+0x6c>)
 80142f8:	f7f8 fbbc 	bl	800ca74 <gos_mutexLock>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b55      	cmp	r3, #85	@ 0x55
 8014300:	d10c      	bne.n	801431c <svl_pdhSetWifiCfg+0x54>
	{
		setResult = pdhWriteFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 8014302:	4b0a      	ldr	r3, [pc, #40]	@ (801432c <svl_pdhSetWifiCfg+0x64>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	226e      	movs	r2, #110	@ 0x6e
 8014308:	6879      	ldr	r1, [r7, #4]
 801430a:	f44f 6081 	mov.w	r0, #1032	@ 0x408
 801430e:	4798      	blx	r3
 8014310:	4603      	mov	r3, r0
 8014312:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014314:	4807      	ldr	r0, [pc, #28]	@ (8014334 <svl_pdhSetWifiCfg+0x6c>)
 8014316:	f7f8 fcb3 	bl	800cc80 <gos_mutexUnlock>
 801431a:	e001      	b.n	8014320 <svl_pdhSetWifiCfg+0x58>
	}
	else
	{
		setResult = GOS_ERROR;
 801431c:	23ae      	movs	r3, #174	@ 0xae
 801431e:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 8014320:	7bfb      	ldrb	r3, [r7, #15]
}
 8014322:	4618      	mov	r0, r3
 8014324:	3710      	adds	r7, #16
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	20006368 	.word	0x20006368
 8014330:	20001002 	.word	0x20001002
 8014334:	2000636c 	.word	0x2000636c

08014338 <svl_pdhSoftwareInfoReqMsgReceived>:
 * @details Sends out the software info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhSoftwareInfoReqMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b086      	sub	sp, #24
 801433c:	af02      	add	r7, sp, #8
 801433e:	4603      	mov	r3, r0
 8014340:	71fb      	strb	r3, [r7, #7]
 8014342:	4b1c      	ldr	r3, [pc, #112]	@ (80143b4 <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 8014344:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 8014346:	23ae      	movs	r3, #174	@ 0xae
 8014348:	72fb      	strb	r3, [r7, #11]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d020      	beq.n	8014392 <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
 8014350:	4b19      	ldr	r3, [pc, #100]	@ (80143b8 <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d01c      	beq.n	8014392 <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014358:	4b18      	ldr	r3, [pc, #96]	@ (80143bc <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 801435a:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 801435c:	2b49      	cmp	r3, #73	@ 0x49
 801435e:	d00b      	beq.n	8014378 <svl_pdhSoftwareInfoReqMsgReceived+0x40>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014360:	4b16      	ldr	r3, [pc, #88]	@ (80143bc <svl_pdhSoftwareInfoReqMsgReceived+0x84>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	2b36      	cmp	r3, #54	@ 0x36
 8014366:	d114      	bne.n	8014392 <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
 8014368:	f241 3188 	movw	r1, #5000	@ 0x1388
 801436c:	4814      	ldr	r0, [pc, #80]	@ (80143c0 <svl_pdhSoftwareInfoReqMsgReceived+0x88>)
 801436e:	f7f8 fb81 	bl	800ca74 <gos_mutexLock>
 8014372:	4603      	mov	r3, r0
 8014374:	2b55      	cmp	r3, #85	@ 0x55
 8014376:	d10c      	bne.n	8014392 <svl_pdhSoftwareInfoReqMsgReceived+0x5a>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 8014378:	4b0f      	ldr	r3, [pc, #60]	@ (80143b8 <svl_pdhSoftwareInfoReqMsgReceived+0x80>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8014380:	68f9      	ldr	r1, [r7, #12]
 8014382:	2000      	movs	r0, #0
 8014384:	4798      	blx	r3
 8014386:	4603      	mov	r3, r0
 8014388:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 801438a:	480d      	ldr	r0, [pc, #52]	@ (80143c0 <svl_pdhSoftwareInfoReqMsgReceived+0x88>)
 801438c:	f7f8 fc78 	bl	800cc80 <gos_mutexUnlock>
 8014390:	e001      	b.n	8014396 <svl_pdhSoftwareInfoReqMsgReceived+0x5e>
		getResult = GOS_ERROR;
 8014392:	23ae      	movs	r3, #174	@ 0xae
 8014394:	72fb      	strb	r3, [r7, #11]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8014396:	79f8      	ldrb	r0, [r7, #7]
 8014398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80143a2:	4a04      	ldr	r2, [pc, #16]	@ (80143b4 <svl_pdhSoftwareInfoReqMsgReceived+0x7c>)
 80143a4:	f642 2101 	movw	r1, #10753	@ 0x2a01
 80143a8:	f7f7 fe28 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_GET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 80143ac:	bf00      	nop
 80143ae:	3710      	adds	r7, #16
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	20006770 	.word	0x20006770
 80143b8:	20006364 	.word	0x20006364
 80143bc:	20001002 	.word	0x20001002
 80143c0:	2000636c 	.word	0x2000636c

080143c4 <svl_pdhHardwareInfoReqMsgReceived>:
 * @details Sends out the hardware info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhHardwareInfoReqMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af02      	add	r7, sp, #8
 80143ca:	4603      	mov	r3, r0
 80143cc:	71fb      	strb	r3, [r7, #7]
 80143ce:	4b1c      	ldr	r3, [pc, #112]	@ (8014440 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 80143d0:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 80143d2:	23ae      	movs	r3, #174	@ 0xae
 80143d4:	72fb      	strb	r3, [r7, #11]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d020      	beq.n	801441e <svl_pdhHardwareInfoReqMsgReceived+0x5a>
 80143dc:	4b19      	ldr	r3, [pc, #100]	@ (8014444 <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d01c      	beq.n	801441e <svl_pdhHardwareInfoReqMsgReceived+0x5a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80143e4:	4b18      	ldr	r3, [pc, #96]	@ (8014448 <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 80143e6:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 80143e8:	2b49      	cmp	r3, #73	@ 0x49
 80143ea:	d00b      	beq.n	8014404 <svl_pdhHardwareInfoReqMsgReceived+0x40>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80143ec:	4b16      	ldr	r3, [pc, #88]	@ (8014448 <svl_pdhHardwareInfoReqMsgReceived+0x84>)
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	2b36      	cmp	r3, #54	@ 0x36
 80143f2:	d114      	bne.n	801441e <svl_pdhHardwareInfoReqMsgReceived+0x5a>
 80143f4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80143f8:	4814      	ldr	r0, [pc, #80]	@ (801444c <svl_pdhHardwareInfoReqMsgReceived+0x88>)
 80143fa:	f7f8 fb3b 	bl	800ca74 <gos_mutexLock>
 80143fe:	4603      	mov	r3, r0
 8014400:	2b55      	cmp	r3, #85	@ 0x55
 8014402:	d10c      	bne.n	801441e <svl_pdhHardwareInfoReqMsgReceived+0x5a>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 8014404:	4b0f      	ldr	r3, [pc, #60]	@ (8014444 <svl_pdhHardwareInfoReqMsgReceived+0x80>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	22fa      	movs	r2, #250	@ 0xfa
 801440a:	68f9      	ldr	r1, [r7, #12]
 801440c:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8014410:	4798      	blx	r3
 8014412:	4603      	mov	r3, r0
 8014414:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014416:	480d      	ldr	r0, [pc, #52]	@ (801444c <svl_pdhHardwareInfoReqMsgReceived+0x88>)
 8014418:	f7f8 fc32 	bl	800cc80 <gos_mutexUnlock>
 801441c:	e001      	b.n	8014422 <svl_pdhHardwareInfoReqMsgReceived+0x5e>
		getResult = GOS_ERROR;
 801441e:	23ae      	movs	r3, #174	@ 0xae
 8014420:	72fb      	strb	r3, [r7, #11]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 8014422:	79f8      	ldrb	r0, [r7, #7]
 8014424:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014428:	9300      	str	r3, [sp, #0]
 801442a:	23fa      	movs	r3, #250	@ 0xfa
 801442c:	4a04      	ldr	r2, [pc, #16]	@ (8014440 <svl_pdhHardwareInfoReqMsgReceived+0x7c>)
 801442e:	f642 2102 	movw	r1, #10754	@ 0x2a02
 8014432:	f7f7 fde3 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_GET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 8014436:	bf00      	nop
 8014438:	3710      	adds	r7, #16
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	20006a10 	.word	0x20006a10
 8014444:	20006364 	.word	0x20006364
 8014448:	20001002 	.word	0x20001002
 801444c:	2000636c 	.word	0x2000636c

08014450 <svl_pdhWifiCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgReqMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af02      	add	r7, sp, #8
 8014456:	4603      	mov	r3, r0
 8014458:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 801445a:	4808      	ldr	r0, [pc, #32]	@ (801447c <svl_pdhWifiCfgReqMsgReceived+0x2c>)
 801445c:	f7ff fe54 	bl	8014108 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 8014460:	79f8      	ldrb	r0, [r7, #7]
 8014462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014466:	9300      	str	r3, [sp, #0]
 8014468:	236e      	movs	r3, #110	@ 0x6e
 801446a:	4a04      	ldr	r2, [pc, #16]	@ (801447c <svl_pdhWifiCfgReqMsgReceived+0x2c>)
 801446c:	f642 2103 	movw	r1, #10755	@ 0x2a03
 8014470:	f7f7 fdc4 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_GET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 8014474:	bf00      	nop
 8014476:	3708      	adds	r7, #8
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	20006b0c 	.word	0x20006b0c

08014480 <svl_pdhBldCfgReqMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgReqMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af02      	add	r7, sp, #8
 8014486:	4603      	mov	r3, r0
 8014488:	71fb      	strb	r3, [r7, #7]
 801448a:	4b1c      	ldr	r3, [pc, #112]	@ (80144fc <svl_pdhBldCfgReqMsgReceived+0x7c>)
 801448c:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 801448e:	23ae      	movs	r3, #174	@ 0xae
 8014490:	72fb      	strb	r3, [r7, #11]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d020      	beq.n	80144da <svl_pdhBldCfgReqMsgReceived+0x5a>
 8014498:	4b19      	ldr	r3, [pc, #100]	@ (8014500 <svl_pdhBldCfgReqMsgReceived+0x80>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d01c      	beq.n	80144da <svl_pdhBldCfgReqMsgReceived+0x5a>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80144a0:	4b18      	ldr	r3, [pc, #96]	@ (8014504 <svl_pdhBldCfgReqMsgReceived+0x84>)
 80144a2:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 80144a4:	2b49      	cmp	r3, #73	@ 0x49
 80144a6:	d00b      	beq.n	80144c0 <svl_pdhBldCfgReqMsgReceived+0x40>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80144a8:	4b16      	ldr	r3, [pc, #88]	@ (8014504 <svl_pdhBldCfgReqMsgReceived+0x84>)
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	2b36      	cmp	r3, #54	@ 0x36
 80144ae:	d114      	bne.n	80144da <svl_pdhBldCfgReqMsgReceived+0x5a>
 80144b0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80144b4:	4814      	ldr	r0, [pc, #80]	@ (8014508 <svl_pdhBldCfgReqMsgReceived+0x88>)
 80144b6:	f7f8 fadd 	bl	800ca74 <gos_mutexLock>
 80144ba:	4603      	mov	r3, r0
 80144bc:	2b55      	cmp	r3, #85	@ 0x55
 80144be:	d10c      	bne.n	80144da <svl_pdhBldCfgReqMsgReceived+0x5a>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 80144c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014500 <svl_pdhBldCfgReqMsgReceived+0x80>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	220e      	movs	r2, #14
 80144c6:	68f9      	ldr	r1, [r7, #12]
 80144c8:	f240 309a 	movw	r0, #922	@ 0x39a
 80144cc:	4798      	blx	r3
 80144ce:	4603      	mov	r3, r0
 80144d0:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80144d2:	480d      	ldr	r0, [pc, #52]	@ (8014508 <svl_pdhBldCfgReqMsgReceived+0x88>)
 80144d4:	f7f8 fbd4 	bl	800cc80 <gos_mutexUnlock>
 80144d8:	e001      	b.n	80144de <svl_pdhBldCfgReqMsgReceived+0x5e>
		getResult = GOS_ERROR;
 80144da:	23ae      	movs	r3, #174	@ 0xae
 80144dc:	72fb      	strb	r3, [r7, #11]
	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 80144de:	79f8      	ldrb	r0, [r7, #7]
 80144e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	230e      	movs	r3, #14
 80144e8:	4a04      	ldr	r2, [pc, #16]	@ (80144fc <svl_pdhBldCfgReqMsgReceived+0x7c>)
 80144ea:	f642 2104 	movw	r1, #10756	@ 0x2a04
 80144ee:	f7f7 fd85 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_GET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 80144f2:	bf00      	nop
 80144f4:	3710      	adds	r7, #16
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	20006b7c 	.word	0x20006b7c
 8014500:	20006364 	.word	0x20006364
 8014504:	20001002 	.word	0x20001002
 8014508:	2000636c 	.word	0x2000636c

0801450c <svl_pdhSoftwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhSoftwareInfoSetMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b088      	sub	sp, #32
 8014510:	af02      	add	r7, sp, #8
 8014512:	4603      	mov	r3, r0
 8014514:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&swInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhSwInfo_t));
 8014516:	4a36      	ldr	r2, [pc, #216]	@ (80145f0 <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 8014518:	4b36      	ldr	r3, [pc, #216]	@ (80145f4 <svl_pdhSoftwareInfoSetMsgReceived+0xe8>)
 801451a:	4610      	mov	r0, r2
 801451c:	4619      	mov	r1, r3
 801451e:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8014522:	461a      	mov	r2, r3
 8014524:	f002 fbd3 	bl	8016cce <memcpy>
 8014528:	4b31      	ldr	r3, [pc, #196]	@ (80145f0 <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 801452a:	60fb      	str	r3, [r7, #12]
	gos_result_t setResult = GOS_ERROR;
 801452c:	23ae      	movs	r3, #174	@ 0xae
 801452e:	72fb      	strb	r3, [r7, #11]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d020      	beq.n	8014578 <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
 8014536:	4b30      	ldr	r3, [pc, #192]	@ (80145f8 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d01c      	beq.n	8014578 <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801453e:	4b2f      	ldr	r3, [pc, #188]	@ (80145fc <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 8014540:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhWriteFunction != NULL) &&
 8014542:	2b49      	cmp	r3, #73	@ 0x49
 8014544:	d00b      	beq.n	801455e <svl_pdhSoftwareInfoSetMsgReceived+0x52>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014546:	4b2d      	ldr	r3, [pc, #180]	@ (80145fc <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	2b36      	cmp	r3, #54	@ 0x36
 801454c:	d114      	bne.n	8014578 <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
 801454e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014552:	482b      	ldr	r0, [pc, #172]	@ (8014600 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 8014554:	f7f8 fa8e 	bl	800ca74 <gos_mutexLock>
 8014558:	4603      	mov	r3, r0
 801455a:	2b55      	cmp	r3, #85	@ 0x55
 801455c:	d10c      	bne.n	8014578 <svl_pdhSoftwareInfoSetMsgReceived+0x6c>
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(svl_pdhSwInfo_t));
 801455e:	4b26      	ldr	r3, [pc, #152]	@ (80145f8 <svl_pdhSoftwareInfoSetMsgReceived+0xec>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8014566:	68f9      	ldr	r1, [r7, #12]
 8014568:	2000      	movs	r0, #0
 801456a:	4798      	blx	r3
 801456c:	4603      	mov	r3, r0
 801456e:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014570:	4823      	ldr	r0, [pc, #140]	@ (8014600 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 8014572:	f7f8 fb85 	bl	800cc80 <gos_mutexUnlock>
 8014576:	e001      	b.n	801457c <svl_pdhSoftwareInfoSetMsgReceived+0x70>
		setResult = GOS_ERROR;
 8014578:	23ae      	movs	r3, #174	@ 0xae
 801457a:	72fb      	strb	r3, [r7, #11]
 801457c:	4b1c      	ldr	r3, [pc, #112]	@ (80145f0 <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 801457e:	617b      	str	r3, [r7, #20]
	gos_result_t getResult = GOS_ERROR;
 8014580:	23ae      	movs	r3, #174	@ 0xae
 8014582:	74fb      	strb	r3, [r7, #19]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d020      	beq.n	80145cc <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
 801458a:	4b1e      	ldr	r3, [pc, #120]	@ (8014604 <svl_pdhSoftwareInfoSetMsgReceived+0xf8>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d01c      	beq.n	80145cc <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014592:	4b1a      	ldr	r3, [pc, #104]	@ (80145fc <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 8014594:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8014596:	2b49      	cmp	r3, #73	@ 0x49
 8014598:	d00b      	beq.n	80145b2 <svl_pdhSoftwareInfoSetMsgReceived+0xa6>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801459a:	4b18      	ldr	r3, [pc, #96]	@ (80145fc <svl_pdhSoftwareInfoSetMsgReceived+0xf0>)
 801459c:	781b      	ldrb	r3, [r3, #0]
 801459e:	2b36      	cmp	r3, #54	@ 0x36
 80145a0:	d114      	bne.n	80145cc <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
 80145a2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80145a6:	4816      	ldr	r0, [pc, #88]	@ (8014600 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 80145a8:	f7f8 fa64 	bl	800ca74 <gos_mutexLock>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b55      	cmp	r3, #85	@ 0x55
 80145b0:	d10c      	bne.n	80145cc <svl_pdhSoftwareInfoSetMsgReceived+0xc0>
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 80145b2:	4b14      	ldr	r3, [pc, #80]	@ (8014604 <svl_pdhSoftwareInfoSetMsgReceived+0xf8>)
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 80145ba:	6979      	ldr	r1, [r7, #20]
 80145bc:	2000      	movs	r0, #0
 80145be:	4798      	blx	r3
 80145c0:	4603      	mov	r3, r0
 80145c2:	74fb      	strb	r3, [r7, #19]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80145c4:	480e      	ldr	r0, [pc, #56]	@ (8014600 <svl_pdhSoftwareInfoSetMsgReceived+0xf4>)
 80145c6:	f7f8 fb5b 	bl	800cc80 <gos_mutexUnlock>
 80145ca:	e001      	b.n	80145d0 <svl_pdhSoftwareInfoSetMsgReceived+0xc4>
		getResult = GOS_ERROR;
 80145cc:	23ae      	movs	r3, #174	@ 0xae
 80145ce:	74fb      	strb	r3, [r7, #19]

	(void_t) svl_pdhSetSwInfo(&swInfoMsg);
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 80145d0:	79f8      	ldrb	r0, [r7, #7]
 80145d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 80145dc:	4a04      	ldr	r2, [pc, #16]	@ (80145f0 <svl_pdhSoftwareInfoSetMsgReceived+0xe4>)
 80145de:	f642 2105 	movw	r1, #10757	@ 0x2a05
 80145e2:	f7f7 fd0b 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_SOFTWARE_INFO_SET_RESP,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 80145e6:	bf00      	nop
 80145e8:	3718      	adds	r7, #24
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	20006770 	.word	0x20006770
 80145f4:	20006370 	.word	0x20006370
 80145f8:	20006368 	.word	0x20006368
 80145fc:	20001002 	.word	0x20001002
 8014600:	2000636c 	.word	0x2000636c
 8014604:	20006364 	.word	0x20006364

08014608 <svl_pdhHardwareInfoSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhHardwareInfoSetMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af02      	add	r7, sp, #8
 801460e:	4603      	mov	r3, r0
 8014610:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&hwInfoMsg, (void_t*)pdhBuffer, sizeof(svl_pdhHwInfo_t));
 8014612:	4a21      	ldr	r2, [pc, #132]	@ (8014698 <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 8014614:	4b21      	ldr	r3, [pc, #132]	@ (801469c <svl_pdhHardwareInfoSetMsgReceived+0x94>)
 8014616:	4610      	mov	r0, r2
 8014618:	4619      	mov	r1, r3
 801461a:	23fa      	movs	r3, #250	@ 0xfa
 801461c:	461a      	mov	r2, r3
 801461e:	f002 fb56 	bl	8016cce <memcpy>

	(void_t) svl_pdhSetHwInfo(&hwInfoMsg);
 8014622:	481d      	ldr	r0, [pc, #116]	@ (8014698 <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 8014624:	f7ff fde0 	bl	80141e8 <svl_pdhSetHwInfo>
 8014628:	4b1b      	ldr	r3, [pc, #108]	@ (8014698 <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 801462a:	60fb      	str	r3, [r7, #12]
	gos_result_t getResult = GOS_ERROR;
 801462c:	23ae      	movs	r3, #174	@ 0xae
 801462e:	72fb      	strb	r3, [r7, #11]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d020      	beq.n	8014678 <svl_pdhHardwareInfoSetMsgReceived+0x70>
 8014636:	4b1a      	ldr	r3, [pc, #104]	@ (80146a0 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d01c      	beq.n	8014678 <svl_pdhHardwareInfoSetMsgReceived+0x70>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801463e:	4b19      	ldr	r3, [pc, #100]	@ (80146a4 <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 8014640:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8014642:	2b49      	cmp	r3, #73	@ 0x49
 8014644:	d00b      	beq.n	801465e <svl_pdhHardwareInfoSetMsgReceived+0x56>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014646:	4b17      	ldr	r3, [pc, #92]	@ (80146a4 <svl_pdhHardwareInfoSetMsgReceived+0x9c>)
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	2b36      	cmp	r3, #54	@ 0x36
 801464c:	d114      	bne.n	8014678 <svl_pdhHardwareInfoSetMsgReceived+0x70>
 801464e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014652:	4815      	ldr	r0, [pc, #84]	@ (80146a8 <svl_pdhHardwareInfoSetMsgReceived+0xa0>)
 8014654:	f7f8 fa0e 	bl	800ca74 <gos_mutexLock>
 8014658:	4603      	mov	r3, r0
 801465a:	2b55      	cmp	r3, #85	@ 0x55
 801465c:	d10c      	bne.n	8014678 <svl_pdhHardwareInfoSetMsgReceived+0x70>
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 801465e:	4b10      	ldr	r3, [pc, #64]	@ (80146a0 <svl_pdhHardwareInfoSetMsgReceived+0x98>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	22fa      	movs	r2, #250	@ 0xfa
 8014664:	68f9      	ldr	r1, [r7, #12]
 8014666:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 801466a:	4798      	blx	r3
 801466c:	4603      	mov	r3, r0
 801466e:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014670:	480d      	ldr	r0, [pc, #52]	@ (80146a8 <svl_pdhHardwareInfoSetMsgReceived+0xa0>)
 8014672:	f7f8 fb05 	bl	800cc80 <gos_mutexUnlock>
 8014676:	e001      	b.n	801467c <svl_pdhHardwareInfoSetMsgReceived+0x74>
		getResult = GOS_ERROR;
 8014678:	23ae      	movs	r3, #174	@ 0xae
 801467a:	72fb      	strb	r3, [r7, #11]
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);

	(void_t) gos_gcpTransmitMessage(
 801467c:	79f8      	ldrb	r0, [r7, #7]
 801467e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	23fa      	movs	r3, #250	@ 0xfa
 8014686:	4a04      	ldr	r2, [pc, #16]	@ (8014698 <svl_pdhHardwareInfoSetMsgReceived+0x90>)
 8014688:	f642 2106 	movw	r1, #10758	@ 0x2a06
 801468c:	f7f7 fcb6 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_HARDWARE_INFO_SET_RESP,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 8014690:	bf00      	nop
 8014692:	3710      	adds	r7, #16
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	20006a10 	.word	0x20006a10
 801469c:	20006370 	.word	0x20006370
 80146a0:	20006364 	.word	0x20006364
 80146a4:	20001002 	.word	0x20001002
 80146a8:	2000636c 	.word	0x2000636c

080146ac <svl_pdhWifiCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhWifiCfgSetMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af02      	add	r7, sp, #8
 80146b2:	4603      	mov	r3, r0
 80146b4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&wifiCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhWifiCfg_t));
 80146b6:	4a0e      	ldr	r2, [pc, #56]	@ (80146f0 <svl_pdhWifiCfgSetMsgReceived+0x44>)
 80146b8:	4b0e      	ldr	r3, [pc, #56]	@ (80146f4 <svl_pdhWifiCfgSetMsgReceived+0x48>)
 80146ba:	4610      	mov	r0, r2
 80146bc:	4619      	mov	r1, r3
 80146be:	236e      	movs	r3, #110	@ 0x6e
 80146c0:	461a      	mov	r2, r3
 80146c2:	f002 fb04 	bl	8016cce <memcpy>

	(void_t) svl_pdhSetWifiCfg(&wifiCfgMsg);
 80146c6:	480a      	ldr	r0, [pc, #40]	@ (80146f0 <svl_pdhWifiCfgSetMsgReceived+0x44>)
 80146c8:	f7ff fdfe 	bl	80142c8 <svl_pdhSetWifiCfg>
	(void_t) svl_pdhGetWifiCfg(&wifiCfgMsg);
 80146cc:	4808      	ldr	r0, [pc, #32]	@ (80146f0 <svl_pdhWifiCfgSetMsgReceived+0x44>)
 80146ce:	f7ff fd1b 	bl	8014108 <svl_pdhGetWifiCfg>

	(void_t) gos_gcpTransmitMessage(
 80146d2:	79f8      	ldrb	r0, [r7, #7]
 80146d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	236e      	movs	r3, #110	@ 0x6e
 80146dc:	4a04      	ldr	r2, [pc, #16]	@ (80146f0 <svl_pdhWifiCfgSetMsgReceived+0x44>)
 80146de:	f642 2107 	movw	r1, #10759	@ 0x2a07
 80146e2:	f7f7 fc8b 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_WIFI_CONFIG_SET_RESP,
			(void_t*)&wifiCfgMsg,
			sizeof(wifiCfgMsg),
			0xFFFF);
}
 80146e6:	bf00      	nop
 80146e8:	3708      	adds	r7, #8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	20006b0c 	.word	0x20006b0c
 80146f4:	20006370 	.word	0x20006370

080146f8 <svl_pdhBldCfgSetMsgReceived>:

// TODO
GOS_STATIC void_t svl_pdhBldCfgSetMsgReceived (gos_gcpChannelNumber_t gcpChannel)
{
 80146f8:	b590      	push	{r4, r7, lr}
 80146fa:	b089      	sub	sp, #36	@ 0x24
 80146fc:	af02      	add	r7, sp, #8
 80146fe:	4603      	mov	r3, r0
 8014700:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	(void_t) memcpy((void_t*)&bldCfgMsg, (void_t*)pdhBuffer, sizeof(svl_pdhBldCfg_t));
 8014702:	4a34      	ldr	r2, [pc, #208]	@ (80147d4 <svl_pdhBldCfgSetMsgReceived+0xdc>)
 8014704:	4b34      	ldr	r3, [pc, #208]	@ (80147d8 <svl_pdhBldCfgSetMsgReceived+0xe0>)
 8014706:	4614      	mov	r4, r2
 8014708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801470a:	c407      	stmia	r4!, {r0, r1, r2}
 801470c:	8023      	strh	r3, [r4, #0]
 801470e:	4b31      	ldr	r3, [pc, #196]	@ (80147d4 <svl_pdhBldCfgSetMsgReceived+0xdc>)
 8014710:	60fb      	str	r3, [r7, #12]
	gos_result_t setResult = GOS_ERROR;
 8014712:	23ae      	movs	r3, #174	@ 0xae
 8014714:	72fb      	strb	r3, [r7, #11]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d020      	beq.n	801475e <svl_pdhBldCfgSetMsgReceived+0x66>
 801471c:	4b2f      	ldr	r3, [pc, #188]	@ (80147dc <svl_pdhBldCfgSetMsgReceived+0xe4>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d01c      	beq.n	801475e <svl_pdhBldCfgSetMsgReceived+0x66>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014724:	4b2e      	ldr	r3, [pc, #184]	@ (80147e0 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 8014726:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhWriteFunction != NULL) &&
 8014728:	2b49      	cmp	r3, #73	@ 0x49
 801472a:	d00b      	beq.n	8014744 <svl_pdhBldCfgSetMsgReceived+0x4c>
       ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 801472c:	4b2c      	ldr	r3, [pc, #176]	@ (80147e0 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	2b36      	cmp	r3, #54	@ 0x36
 8014732:	d114      	bne.n	801475e <svl_pdhBldCfgSetMsgReceived+0x66>
 8014734:	f241 3188 	movw	r1, #5000	@ 0x1388
 8014738:	482a      	ldr	r0, [pc, #168]	@ (80147e4 <svl_pdhBldCfgSetMsgReceived+0xec>)
 801473a:	f7f8 f99b 	bl	800ca74 <gos_mutexLock>
 801473e:	4603      	mov	r3, r0
 8014740:	2b55      	cmp	r3, #85	@ 0x55
 8014742:	d10c      	bne.n	801475e <svl_pdhBldCfgSetMsgReceived+0x66>
		setResult = pdhWriteFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8014744:	4b25      	ldr	r3, [pc, #148]	@ (80147dc <svl_pdhBldCfgSetMsgReceived+0xe4>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	220e      	movs	r2, #14
 801474a:	68f9      	ldr	r1, [r7, #12]
 801474c:	f240 309a 	movw	r0, #922	@ 0x39a
 8014750:	4798      	blx	r3
 8014752:	4603      	mov	r3, r0
 8014754:	72fb      	strb	r3, [r7, #11]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8014756:	4823      	ldr	r0, [pc, #140]	@ (80147e4 <svl_pdhBldCfgSetMsgReceived+0xec>)
 8014758:	f7f8 fa92 	bl	800cc80 <gos_mutexUnlock>
 801475c:	e001      	b.n	8014762 <svl_pdhBldCfgSetMsgReceived+0x6a>
		setResult = GOS_ERROR;
 801475e:	23ae      	movs	r3, #174	@ 0xae
 8014760:	72fb      	strb	r3, [r7, #11]
 8014762:	4b1c      	ldr	r3, [pc, #112]	@ (80147d4 <svl_pdhBldCfgSetMsgReceived+0xdc>)
 8014764:	617b      	str	r3, [r7, #20]
	gos_result_t getResult = GOS_ERROR;
 8014766:	23ae      	movs	r3, #174	@ 0xae
 8014768:	74fb      	strb	r3, [r7, #19]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d020      	beq.n	80147b2 <svl_pdhBldCfgSetMsgReceived+0xba>
 8014770:	4b1d      	ldr	r3, [pc, #116]	@ (80147e8 <svl_pdhBldCfgSetMsgReceived+0xf0>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d01c      	beq.n	80147b2 <svl_pdhBldCfgSetMsgReceived+0xba>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014778:	4b19      	ldr	r3, [pc, #100]	@ (80147e0 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 801477a:	781b      	ldrb	r3, [r3, #0]
	if ((pBldCfg != NULL) && (pdhReadFunction != NULL) &&
 801477c:	2b49      	cmp	r3, #73	@ 0x49
 801477e:	d00b      	beq.n	8014798 <svl_pdhBldCfgSetMsgReceived+0xa0>
	   ((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8014780:	4b17      	ldr	r3, [pc, #92]	@ (80147e0 <svl_pdhBldCfgSetMsgReceived+0xe8>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	2b36      	cmp	r3, #54	@ 0x36
 8014786:	d114      	bne.n	80147b2 <svl_pdhBldCfgSetMsgReceived+0xba>
 8014788:	f241 3188 	movw	r1, #5000	@ 0x1388
 801478c:	4815      	ldr	r0, [pc, #84]	@ (80147e4 <svl_pdhBldCfgSetMsgReceived+0xec>)
 801478e:	f7f8 f971 	bl	800ca74 <gos_mutexLock>
 8014792:	4603      	mov	r3, r0
 8014794:	2b55      	cmp	r3, #85	@ 0x55
 8014796:	d10c      	bne.n	80147b2 <svl_pdhBldCfgSetMsgReceived+0xba>
		getResult = pdhReadFunction(PDH_ADDR_BLD_CFG, (u8_t*)pBldCfg, sizeof(*pBldCfg));
 8014798:	4b13      	ldr	r3, [pc, #76]	@ (80147e8 <svl_pdhBldCfgSetMsgReceived+0xf0>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	220e      	movs	r2, #14
 801479e:	6979      	ldr	r1, [r7, #20]
 80147a0:	f240 309a 	movw	r0, #922	@ 0x39a
 80147a4:	4798      	blx	r3
 80147a6:	4603      	mov	r3, r0
 80147a8:	74fb      	strb	r3, [r7, #19]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80147aa:	480e      	ldr	r0, [pc, #56]	@ (80147e4 <svl_pdhBldCfgSetMsgReceived+0xec>)
 80147ac:	f7f8 fa68 	bl	800cc80 <gos_mutexUnlock>
 80147b0:	e001      	b.n	80147b6 <svl_pdhBldCfgSetMsgReceived+0xbe>
		getResult = GOS_ERROR;
 80147b2:	23ae      	movs	r3, #174	@ 0xae
 80147b4:	74fb      	strb	r3, [r7, #19]

	(void_t) svl_pdhSetBldCfg(&bldCfgMsg);
	(void_t) svl_pdhGetBldCfg(&bldCfgMsg);

	(void_t) gos_gcpTransmitMessage(
 80147b6:	79f8      	ldrb	r0, [r7, #7]
 80147b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80147bc:	9300      	str	r3, [sp, #0]
 80147be:	230e      	movs	r3, #14
 80147c0:	4a04      	ldr	r2, [pc, #16]	@ (80147d4 <svl_pdhBldCfgSetMsgReceived+0xdc>)
 80147c2:	f642 2108 	movw	r1, #10760	@ 0x2a08
 80147c6:	f7f7 fc19 	bl	800bffc <gos_gcpTransmitMessage>
			gcpChannel,
			SVL_PDH_SYSMON_MSG_BLD_CONFIG_SET_RESP,
			(void_t*)&bldCfgMsg,
			sizeof(bldCfgMsg),
			0xFFFF);
}
 80147ca:	bf00      	nop
 80147cc:	371c      	adds	r7, #28
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd90      	pop	{r4, r7, pc}
 80147d2:	bf00      	nop
 80147d4:	20006b7c 	.word	0x20006b7c
 80147d8:	20006370 	.word	0x20006370
 80147dc:	20006368 	.word	0x20006368
 80147e0:	20001002 	.word	0x20001002
 80147e4:	2000636c 	.word	0x2000636c
 80147e8:	20006364 	.word	0x20006364

080147ec <svl_sdhInit>:

/*
 * Function: svl_sdhInit
 */
gos_result_t svl_sdhInit (void_t)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 80147f2:	2355      	movs	r3, #85	@ 0x55
 80147f4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Register sysmon callbacks.
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonBinaryNumReqMsg));
 80147f6:	79fb      	ldrb	r3, [r7, #7]
 80147f8:	2b55      	cmp	r3, #85	@ 0x55
 80147fa:	d105      	bne.n	8014808 <svl_sdhInit+0x1c>
 80147fc:	4832      	ldr	r0, [pc, #200]	@ (80148c8 <svl_sdhInit+0xdc>)
 80147fe:	f000 fe49 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8014802:	4603      	mov	r3, r0
 8014804:	71fb      	strb	r3, [r7, #7]
 8014806:	e001      	b.n	801480c <svl_sdhInit+0x20>
 8014808:	23ae      	movs	r3, #174	@ 0xae
 801480a:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonBinaryInfoReqMsg));
 801480c:	79fb      	ldrb	r3, [r7, #7]
 801480e:	2b55      	cmp	r3, #85	@ 0x55
 8014810:	d105      	bne.n	801481e <svl_sdhInit+0x32>
 8014812:	482e      	ldr	r0, [pc, #184]	@ (80148cc <svl_sdhInit+0xe0>)
 8014814:	f000 fe3e 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8014818:	4603      	mov	r3, r0
 801481a:	71fb      	strb	r3, [r7, #7]
 801481c:	e001      	b.n	8014822 <svl_sdhInit+0x36>
 801481e:	23ae      	movs	r3, #174	@ 0xae
 8014820:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonDownloadReqMsg));
 8014822:	79fb      	ldrb	r3, [r7, #7]
 8014824:	2b55      	cmp	r3, #85	@ 0x55
 8014826:	d105      	bne.n	8014834 <svl_sdhInit+0x48>
 8014828:	4829      	ldr	r0, [pc, #164]	@ (80148d0 <svl_sdhInit+0xe4>)
 801482a:	f000 fe33 	bl	8015494 <svl_sysmonRegisterUserMessage>
 801482e:	4603      	mov	r3, r0
 8014830:	71fb      	strb	r3, [r7, #7]
 8014832:	e001      	b.n	8014838 <svl_sdhInit+0x4c>
 8014834:	23ae      	movs	r3, #174	@ 0xae
 8014836:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonBinaryChunkReqMsg));
 8014838:	79fb      	ldrb	r3, [r7, #7]
 801483a:	2b55      	cmp	r3, #85	@ 0x55
 801483c:	d105      	bne.n	801484a <svl_sdhInit+0x5e>
 801483e:	4825      	ldr	r0, [pc, #148]	@ (80148d4 <svl_sdhInit+0xe8>)
 8014840:	f000 fe28 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8014844:	4603      	mov	r3, r0
 8014846:	71fb      	strb	r3, [r7, #7]
 8014848:	e001      	b.n	801484e <svl_sdhInit+0x62>
 801484a:	23ae      	movs	r3, #174	@ 0xae
 801484c:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonSoftwareInstallReqMsg));
 801484e:	79fb      	ldrb	r3, [r7, #7]
 8014850:	2b55      	cmp	r3, #85	@ 0x55
 8014852:	d105      	bne.n	8014860 <svl_sdhInit+0x74>
 8014854:	4820      	ldr	r0, [pc, #128]	@ (80148d8 <svl_sdhInit+0xec>)
 8014856:	f000 fe1d 	bl	8015494 <svl_sysmonRegisterUserMessage>
 801485a:	4603      	mov	r3, r0
 801485c:	71fb      	strb	r3, [r7, #7]
 801485e:	e001      	b.n	8014864 <svl_sdhInit+0x78>
 8014860:	23ae      	movs	r3, #174	@ 0xae
 8014862:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, svl_sysmonRegisterUserMessage(&sysmonBinaryEraseReqMsg));
 8014864:	79fb      	ldrb	r3, [r7, #7]
 8014866:	2b55      	cmp	r3, #85	@ 0x55
 8014868:	d105      	bne.n	8014876 <svl_sdhInit+0x8a>
 801486a:	481c      	ldr	r0, [pc, #112]	@ (80148dc <svl_sdhInit+0xf0>)
 801486c:	f000 fe12 	bl	8015494 <svl_sysmonRegisterUserMessage>
 8014870:	4603      	mov	r3, r0
 8014872:	71fb      	strb	r3, [r7, #7]
 8014874:	e001      	b.n	801487a <svl_sdhInit+0x8e>
 8014876:	23ae      	movs	r3, #174	@ 0xae
 8014878:	71fb      	strb	r3, [r7, #7]

    GOS_CONCAT_RESULT(initResult, gos_taskRegister(&svlSdhTaskDesc, NULL));
 801487a:	79fb      	ldrb	r3, [r7, #7]
 801487c:	2b55      	cmp	r3, #85	@ 0x55
 801487e:	d106      	bne.n	801488e <svl_sdhInit+0xa2>
 8014880:	2100      	movs	r1, #0
 8014882:	4817      	ldr	r0, [pc, #92]	@ (80148e0 <svl_sdhInit+0xf4>)
 8014884:	f7f5 fc24 	bl	800a0d0 <gos_taskRegister>
 8014888:	4603      	mov	r3, r0
 801488a:	71fb      	strb	r3, [r7, #7]
 801488c:	e001      	b.n	8014892 <svl_sdhInit+0xa6>
 801488e:	23ae      	movs	r3, #174	@ 0xae
 8014890:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlTrigger));
 8014892:	79fb      	ldrb	r3, [r7, #7]
 8014894:	2b55      	cmp	r3, #85	@ 0x55
 8014896:	d105      	bne.n	80148a4 <svl_sdhInit+0xb8>
 8014898:	4812      	ldr	r0, [pc, #72]	@ (80148e4 <svl_sdhInit+0xf8>)
 801489a:	f7f9 fcef 	bl	800e27c <gos_triggerInit>
 801489e:	4603      	mov	r3, r0
 80148a0:	71fb      	strb	r3, [r7, #7]
 80148a2:	e001      	b.n	80148a8 <svl_sdhInit+0xbc>
 80148a4:	23ae      	movs	r3, #174	@ 0xae
 80148a6:	71fb      	strb	r3, [r7, #7]
    GOS_CONCAT_RESULT(initResult, gos_triggerInit(&sdhControlFeedbackTrigger));
 80148a8:	79fb      	ldrb	r3, [r7, #7]
 80148aa:	2b55      	cmp	r3, #85	@ 0x55
 80148ac:	d105      	bne.n	80148ba <svl_sdhInit+0xce>
 80148ae:	480e      	ldr	r0, [pc, #56]	@ (80148e8 <svl_sdhInit+0xfc>)
 80148b0:	f7f9 fce4 	bl	800e27c <gos_triggerInit>
 80148b4:	4603      	mov	r3, r0
 80148b6:	71fb      	strb	r3, [r7, #7]
 80148b8:	e001      	b.n	80148be <svl_sdhInit+0xd2>
 80148ba:	23ae      	movs	r3, #174	@ 0xae
 80148bc:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80148be:	79fb      	ldrb	r3, [r7, #7]
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	20001084 	.word	0x20001084
 80148cc:	20001094 	.word	0x20001094
 80148d0:	200010a4 	.word	0x200010a4
 80148d4:	200010b4 	.word	0x200010b4
 80148d8:	200010c4 	.word	0x200010c4
 80148dc:	200010d4 	.word	0x200010d4
 80148e0:	200010e4 	.word	0x200010e4
 80148e4:	20007d98 	.word	0x20007d98
 80148e8:	20007da4 	.word	0x20007da4

080148ec <svl_sdhConfigure>:

/*
 * Function: svl_sdhConfigure
 */
gos_result_t svl_sdhConfigure (svl_sdhCfg_t* pCfg)
{
 80148ec:	b480      	push	{r7}
 80148ee:	b085      	sub	sp, #20
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t cfgResult = GOS_ERROR;
 80148f4:	23ae      	movs	r3, #174	@ 0xae
 80148f6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d011      	beq.n	8014922 <svl_sdhConfigure+0x36>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00d      	beq.n	8014922 <svl_sdhConfigure+0x36>
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d009      	beq.n	8014922 <svl_sdhConfigure+0x36>
    {
        sdhReadFunction  = pCfg->readFunction;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4a07      	ldr	r2, [pc, #28]	@ (8014930 <svl_sdhConfigure+0x44>)
 8014914:	6013      	str	r3, [r2, #0]
        sdhWriteFunction = pCfg->writeFunction;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	4a06      	ldr	r2, [pc, #24]	@ (8014934 <svl_sdhConfigure+0x48>)
 801491c:	6013      	str	r3, [r2, #0]
        cfgResult        = GOS_SUCCESS;
 801491e:	2355      	movs	r3, #85	@ 0x55
 8014920:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    return cfgResult;
 8014922:	7bfb      	ldrb	r3, [r7, #15]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3714      	adds	r7, #20
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr
 8014930:	20006b8c 	.word	0x20006b8c
 8014934:	20006b90 	.word	0x20006b90

08014938 <svl_sdhGetBinaryData>:

/*
 * Function: svl_sdhGetBinaryData
 */
gos_result_t svl_sdhGetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	4603      	mov	r3, r0
 8014940:	6039      	str	r1, [r7, #0]
 8014942:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_SUCCESS;
 8014944:	2355      	movs	r3, #85	@ 0x55
 8014946:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 8014948:	2300      	movs	r3, #0
 801494a:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL)
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d01c      	beq.n	801498c <svl_sdhGetBinaryData+0x54>
 8014952:	4b12      	ldr	r3, [pc, #72]	@ (801499c <svl_sdhGetBinaryData+0x64>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d018      	beq.n	801498c <svl_sdhGetBinaryData+0x54>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 801495a:	4b10      	ldr	r3, [pc, #64]	@ (801499c <svl_sdhGetBinaryData+0x64>)
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	f107 010c 	add.w	r1, r7, #12
 8014962:	2202      	movs	r2, #2
 8014964:	2000      	movs	r0, #0
 8014966:	4798      	blx	r3

        if (index < numOfBinaries)
 8014968:	89bb      	ldrh	r3, [r7, #12]
 801496a:	88fa      	ldrh	r2, [r7, #6]
 801496c:	429a      	cmp	r2, r3
 801496e:	d20a      	bcs.n	8014986 <svl_sdhGetBinaryData+0x4e>
        {
            (void_t) sdhReadFunction(
 8014970:	4b0a      	ldr	r3, [pc, #40]	@ (801499c <svl_sdhGetBinaryData+0x64>)
 8014972:	681b      	ldr	r3, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 8014974:	88fa      	ldrh	r2, [r7, #6]
 8014976:	213a      	movs	r1, #58	@ 0x3a
 8014978:	fb01 f202 	mul.w	r2, r1, r2
 801497c:	1c90      	adds	r0, r2, #2
            (void_t) sdhReadFunction(
 801497e:	223a      	movs	r2, #58	@ 0x3a
 8014980:	6839      	ldr	r1, [r7, #0]
 8014982:	4798      	blx	r3
        if (index < numOfBinaries)
 8014984:	e004      	b.n	8014990 <svl_sdhGetBinaryData+0x58>
                    );
        }
        else
        {
            // Invalid request.
            dataGetResult = GOS_ERROR;
 8014986:	23ae      	movs	r3, #174	@ 0xae
 8014988:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 801498a:	e001      	b.n	8014990 <svl_sdhGetBinaryData+0x58>
        }
    }
    else
    {
        // NULL pointer error.
        dataGetResult = GOS_ERROR;
 801498c:	23ae      	movs	r3, #174	@ 0xae
 801498e:	73fb      	strb	r3, [r7, #15]
    }

    return dataGetResult;
 8014990:	7bfb      	ldrb	r3, [r7, #15]
}
 8014992:	4618      	mov	r0, r3
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	20006b8c 	.word	0x20006b8c

080149a0 <svl_sdhSetBinaryData>:

/*
 * Function: svl_sdhSetBinaryData
 */
gos_result_t svl_sdhSetBinaryData (u16_t index, svl_sdhBinaryDesc_t* pDesc)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	4603      	mov	r3, r0
 80149a8:	6039      	str	r1, [r7, #0]
 80149aa:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_SUCCESS;
 80149ac:	2355      	movs	r3, #85	@ 0x55
 80149ae:	73fb      	strb	r3, [r7, #15]
    u16_t        numOfBinaries = 0u;
 80149b0:	2300      	movs	r3, #0
 80149b2:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pDesc != NULL && sdhReadFunction != NULL && sdhWriteFunction != NULL)
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d020      	beq.n	80149fc <svl_sdhSetBinaryData+0x5c>
 80149ba:	4b14      	ldr	r3, [pc, #80]	@ (8014a0c <svl_sdhSetBinaryData+0x6c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d01c      	beq.n	80149fc <svl_sdhSetBinaryData+0x5c>
 80149c2:	4b13      	ldr	r3, [pc, #76]	@ (8014a10 <svl_sdhSetBinaryData+0x70>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d018      	beq.n	80149fc <svl_sdhSetBinaryData+0x5c>
    {
        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80149ca:	4b10      	ldr	r3, [pc, #64]	@ (8014a0c <svl_sdhSetBinaryData+0x6c>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f107 010c 	add.w	r1, r7, #12
 80149d2:	2202      	movs	r2, #2
 80149d4:	2000      	movs	r0, #0
 80149d6:	4798      	blx	r3

        if (index < numOfBinaries)
 80149d8:	89bb      	ldrh	r3, [r7, #12]
 80149da:	88fa      	ldrh	r2, [r7, #6]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d20a      	bcs.n	80149f6 <svl_sdhSetBinaryData+0x56>
        {
            (void_t) sdhWriteFunction(
 80149e0:	4b0b      	ldr	r3, [pc, #44]	@ (8014a10 <svl_sdhSetBinaryData+0x70>)
 80149e2:	681b      	ldr	r3, [r3, #0]
                    SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 80149e4:	88fa      	ldrh	r2, [r7, #6]
 80149e6:	213a      	movs	r1, #58	@ 0x3a
 80149e8:	fb01 f202 	mul.w	r2, r1, r2
 80149ec:	1c90      	adds	r0, r2, #2
            (void_t) sdhWriteFunction(
 80149ee:	223a      	movs	r2, #58	@ 0x3a
 80149f0:	6839      	ldr	r1, [r7, #0]
 80149f2:	4798      	blx	r3
        if (index < numOfBinaries)
 80149f4:	e004      	b.n	8014a00 <svl_sdhSetBinaryData+0x60>
                    );
        }
        else
        {
            // Invalid request.
            dataSetResult = GOS_ERROR;
 80149f6:	23ae      	movs	r3, #174	@ 0xae
 80149f8:	73fb      	strb	r3, [r7, #15]
        if (index < numOfBinaries)
 80149fa:	e001      	b.n	8014a00 <svl_sdhSetBinaryData+0x60>
        }
    }
    else
    {
        // NULL pointer error.
        dataSetResult = GOS_ERROR;
 80149fc:	23ae      	movs	r3, #174	@ 0xae
 80149fe:	73fb      	strb	r3, [r7, #15]
    }

    return dataSetResult;
 8014a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop
 8014a0c:	20006b8c 	.word	0x20006b8c
 8014a10:	20006b90 	.word	0x20006b90

08014a14 <svl_sdhReadBytesFromMemory>:

/*
 * Function: svl_sdhReadBytesFromMemory
 */
gos_result_t svl_sdhReadBytesFromMemory (u32_t address, u8_t* pBuffer, u32_t size)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b086      	sub	sp, #24
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t readResult = GOS_SUCCESS;
 8014a20:	2355      	movs	r3, #85	@ 0x55
 8014a22:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pBuffer != NULL && sdhReadFunction != NULL)
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d00a      	beq.n	8014a40 <svl_sdhReadBytesFromMemory+0x2c>
 8014a2a:	4b09      	ldr	r3, [pc, #36]	@ (8014a50 <svl_sdhReadBytesFromMemory+0x3c>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d006      	beq.n	8014a40 <svl_sdhReadBytesFromMemory+0x2c>
    {
        (void_t) sdhReadFunction(address, pBuffer, size);
 8014a32:	4b07      	ldr	r3, [pc, #28]	@ (8014a50 <svl_sdhReadBytesFromMemory+0x3c>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	68b9      	ldr	r1, [r7, #8]
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	4798      	blx	r3
 8014a3e:	e001      	b.n	8014a44 <svl_sdhReadBytesFromMemory+0x30>
    }
    else
    {
        // NULL pointer error.
        readResult = GOS_ERROR;
 8014a40:	23ae      	movs	r3, #174	@ 0xae
 8014a42:	75fb      	strb	r3, [r7, #23]
    }

    return readResult;
 8014a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3718      	adds	r7, #24
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	20006b8c 	.word	0x20006b8c

08014a54 <svl_sdhDaemon>:
 * @details Handles the incoming requests via sysmon or IPL.
 *
 * @return -
 */
GOS_STATIC void_t svl_sdhDaemon (void_t)
{
 8014a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a56:	b0bb      	sub	sp, #236	@ 0xec
 8014a58:	af0a      	add	r7, sp, #40	@ 0x28
    /*
     * Local variables.
     */
    svl_sdhBinaryDesc_t binaryDescriptor    = {0};
 8014a5a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8014a5e:	223a      	movs	r2, #58	@ 0x3a
 8014a60:	2100      	movs	r1, #0
 8014a62:	4618      	mov	r0, r3
 8014a64:	f002 f89c 	bl	8016ba0 <memset>
    svl_sdhBinaryDesc_t newBinaryDescriptor = {0};
 8014a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014a6c:	223a      	movs	r2, #58	@ 0x3a
 8014a6e:	2100      	movs	r1, #0
 8014a70:	4618      	mov	r0, r3
 8014a72:	f002 f895 	bl	8016ba0 <memset>
    svl_sdhChunkDesc_t  chunkDesc           = {0};
 8014a76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014a7a:	2100      	movs	r1, #0
 8014a7c:	460a      	mov	r2, r1
 8014a7e:	801a      	strh	r2, [r3, #0]
 8014a80:	460a      	mov	r2, r1
 8014a82:	709a      	strb	r2, [r3, #2]
    svl_pdhBldCfg_t     bldCfg              = {0};
 8014a84:	f107 0318 	add.w	r3, r7, #24
 8014a88:	2200      	movs	r2, #0
 8014a8a:	601a      	str	r2, [r3, #0]
 8014a8c:	605a      	str	r2, [r3, #4]
 8014a8e:	609a      	str	r2, [r3, #8]
 8014a90:	819a      	strh	r2, [r3, #12]
    u16_t               numOfChunks         = 0u;
 8014a92:	2300      	movs	r3, #0
 8014a94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
    u16_t               index               = 0u;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	82fb      	strh	r3, [r7, #22]
    u16_t               numOfBinaries       = 0u;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	82bb      	strh	r3, [r7, #20]
    u8_t                result              = 0u;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	74fb      	strb	r3, [r7, #19]
    u32_t               startAddress        = 0u;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    u32_t               fromAddress         = 0u;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    u32_t               totalCopySize       = 0u;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    bool_t              defragment          = GOS_FALSE;
 8014ab6:	2349      	movs	r3, #73	@ 0x49
 8014ab8:	74bb      	strb	r3, [r7, #18]
    u8_t                flashBufferIndex    = 0u;
 8014aba:	2300      	movs	r3, #0
 8014abc:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
    u8_t                flashChunkIndex     = 0u;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8014ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8014aca:	2101      	movs	r1, #1
 8014acc:	48aa      	ldr	r0, [pc, #680]	@ (8014d78 <svl_sdhDaemon+0x324>)
 8014ace:	f7f9 fc49 	bl	800e364 <gos_triggerWait>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	2b55      	cmp	r3, #85	@ 0x55
 8014ad6:	f040 831c 	bne.w	8015112 <svl_sdhDaemon+0x6be>
        {
            switch (sdhRequestedState)
 8014ada:	4ba8      	ldr	r3, [pc, #672]	@ (8014d7c <svl_sdhDaemon+0x328>)
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	3b01      	subs	r3, #1
 8014ae0:	2b05      	cmp	r3, #5
 8014ae2:	f200 8305 	bhi.w	80150f0 <svl_sdhDaemon+0x69c>
 8014ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8014aec <svl_sdhDaemon+0x98>)
 8014ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014aec:	08014dad 	.word	0x08014dad
 8014af0:	08014b05 	.word	0x08014b05
 8014af4:	08014b5d 	.word	0x08014b5d
 8014af8:	08014c11 	.word	0x08014c11
 8014afc:	08014bb3 	.word	0x08014bb3
 8014b00:	08014ef7 	.word	0x08014ef7
            {
                case SDH_STATE_BINARY_NUM_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8014b04:	4b9e      	ldr	r3, [pc, #632]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	f000 82f3 	beq.w	80150f4 <svl_sdhDaemon+0x6a0>
 8014b0e:	4b9d      	ldr	r3, [pc, #628]	@ (8014d84 <svl_sdhDaemon+0x330>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f000 82ee 	beq.w	80150f4 <svl_sdhDaemon+0x6a0>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary number request received.\r\n");
 8014b18:	499b      	ldr	r1, [pc, #620]	@ (8014d88 <svl_sdhDaemon+0x334>)
 8014b1a:	2036      	movs	r0, #54	@ 0x36
 8014b1c:	f7f9 f8fc 	bl	800dd18 <gos_traceTrace>
#endif
                        u16_t numOfBinaries = 0u;
 8014b20:	2300      	movs	r3, #0
 8014b22:	823b      	strh	r3, [r7, #16]

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014b24:	4b96      	ldr	r3, [pc, #600]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f107 0110 	add.w	r1, r7, #16
 8014b2c:	2202      	movs	r2, #2
 8014b2e:	2000      	movs	r0, #0
 8014b30:	4798      	blx	r3

                        if (numOfBinaries == 0xFFFF)
 8014b32:	8a3b      	ldrh	r3, [r7, #16]
 8014b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d108      	bne.n	8014b4e <svl_sdhDaemon+0xfa>
                        {
                            numOfBinaries = 0u;
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	823b      	strh	r3, [r7, #16]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014b40:	4b90      	ldr	r3, [pc, #576]	@ (8014d84 <svl_sdhDaemon+0x330>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	f107 0110 	add.w	r1, r7, #16
 8014b48:	2202      	movs	r2, #2
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	4798      	blx	r3
                        else
                        {
                            // Number OK.
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, &numOfBinaries, sizeof(numOfBinaries));
 8014b4e:	8a3a      	ldrh	r2, [r7, #16]
 8014b50:	4b8e      	ldr	r3, [pc, #568]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014b52:	801a      	strh	r2, [r3, #0]

                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8014b54:	488e      	ldr	r0, [pc, #568]	@ (8014d90 <svl_sdhDaemon+0x33c>)
 8014b56:	f7f9 fcb5 	bl	800e4c4 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8014b5a:	e2cb      	b.n	80150f4 <svl_sdhDaemon+0x6a0>
                }
                case SDH_STATE_BINARY_INFO_REQ:
                {
                    if (sdhReadFunction != NULL)
 8014b5c:	4b88      	ldr	r3, [pc, #544]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	f000 82c9 	beq.w	80150f8 <svl_sdhDaemon+0x6a4>
                    {
                        (void_t) memcpy((void_t*)&index, sdhBuffer, sizeof(index));
 8014b66:	4b89      	ldr	r3, [pc, #548]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	82fb      	strh	r3, [r7, #22]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary info request received. Index: %u\r\n", index);
 8014b6c:	8afb      	ldrh	r3, [r7, #22]
 8014b6e:	461a      	mov	r2, r3
 8014b70:	4988      	ldr	r1, [pc, #544]	@ (8014d94 <svl_sdhDaemon+0x340>)
 8014b72:	2036      	movs	r0, #54	@ 0x36
 8014b74:	f7f9 f9f4 	bl	800df60 <gos_traceTraceFormatted>
#endif
                        if (svl_sdhGetBinaryData(index, &binaryDescriptor) == GOS_SUCCESS)
 8014b78:	8afb      	ldrh	r3, [r7, #22]
 8014b7a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8014b7e:	4611      	mov	r1, r2
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7ff fed9 	bl	8014938 <svl_sdhGetBinaryData>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b55      	cmp	r3, #85	@ 0x55
 8014b8a:	f040 82b5 	bne.w	80150f8 <svl_sdhDaemon+0x6a4>
                        {
                            (void_t) memcpy(sdhBuffer, (void_t*)&binaryDescriptor, sizeof(binaryDescriptor));
 8014b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014b90:	461c      	mov	r4, r3
 8014b92:	f107 0568 	add.w	r5, r7, #104	@ 0x68
 8014b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014ba6:	c403      	stmia	r4!, {r0, r1}
 8014ba8:	8022      	strh	r2, [r4, #0]
                            gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8014baa:	4879      	ldr	r0, [pc, #484]	@ (8014d90 <svl_sdhDaemon+0x33c>)
 8014bac:	f7f9 fc8a 	bl	800e4c4 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8014bb0:	e2a2      	b.n	80150f8 <svl_sdhDaemon+0x6a4>
                }
                case SDH_STATE_BINARY_INSTALL_REQ:
                {
                    if (sdhReadFunction != NULL)
 8014bb2:	4b73      	ldr	r3, [pc, #460]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f000 82a0 	beq.w	80150fc <svl_sdhDaemon+0x6a8>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 8014bbc:	4b73      	ldr	r3, [pc, #460]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	82fb      	strh	r3, [r7, #22]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary install request received. Index: %u\r\n", index);
 8014bc2:	8afb      	ldrh	r3, [r7, #22]
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	4974      	ldr	r1, [pc, #464]	@ (8014d98 <svl_sdhDaemon+0x344>)
 8014bc8:	2036      	movs	r0, #54	@ 0x36
 8014bca:	f7f9 f9c9 	bl	800df60 <gos_traceTraceFormatted>
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014bce:	4b6c      	ldr	r3, [pc, #432]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	f107 0114 	add.w	r1, r7, #20
 8014bd6:	2202      	movs	r2, #2
 8014bd8:	2000      	movs	r0, #0
 8014bda:	4798      	blx	r3

                        if (index < numOfBinaries)
 8014bdc:	8afa      	ldrh	r2, [r7, #22]
 8014bde:	8abb      	ldrh	r3, [r7, #20]
 8014be0:	429a      	cmp	r2, r3
 8014be2:	f080 828b 	bcs.w	80150fc <svl_sdhDaemon+0x6a8>
                        {
                            (void_t) svl_pdhGetBldCfg(&bldCfg);
 8014be6:	f107 0318 	add.w	r3, r7, #24
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7ff fa54 	bl	8014098 <svl_pdhGetBldCfg>

                            bldCfg.installRequested = GOS_TRUE;
 8014bf0:	2336      	movs	r3, #54	@ 0x36
 8014bf2:	763b      	strb	r3, [r7, #24]
                            bldCfg.binaryIndex      = index;
 8014bf4:	8afb      	ldrh	r3, [r7, #22]
 8014bf6:	837b      	strh	r3, [r7, #26]

                            (void_t) svl_pdhSetBldCfg(&bldCfg);
 8014bf8:	f107 0318 	add.w	r3, r7, #24
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7ff fb2b 	bl	8014258 <svl_pdhSetBldCfg>

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 8014c02:	8afa      	ldrh	r2, [r7, #22]
 8014c04:	4b61      	ldr	r3, [pc, #388]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014c06:	801a      	strh	r2, [r3, #0]

                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8014c08:	4861      	ldr	r0, [pc, #388]	@ (8014d90 <svl_sdhDaemon+0x33c>)
 8014c0a:	f7f9 fc5b 	bl	800e4c4 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8014c0e:	e275      	b.n	80150fc <svl_sdhDaemon+0x6a8>
                }
                case SDH_STATE_BINARY_DOWNLOAD_REQ:
                {
                    if (sdhReadFunction != NULL)
 8014c10:	4b5b      	ldr	r3, [pc, #364]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f000 8273 	beq.w	8015100 <svl_sdhDaemon+0x6ac>
                    {
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download request received.\r\n");
 8014c1a:	4960      	ldr	r1, [pc, #384]	@ (8014d9c <svl_sdhDaemon+0x348>)
 8014c1c:	2036      	movs	r0, #54	@ 0x36
 8014c1e:	f7f9 f87b 	bl	800dd18 <gos_traceTrace>
#endif
                        // Check if descriptor fits.
                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014c22:	4b57      	ldr	r3, [pc, #348]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	f107 0114 	add.w	r1, r7, #20
 8014c2a:	2202      	movs	r2, #2
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	4798      	blx	r3

                        if ((SVL_SDH_STORAGE_DESC_BIN_DESC_START + ((numOfBinaries + 1) * sizeof(svl_sdhBinaryDesc_t))) < SVL_SDH_STORAGE_DESC_AREA_SIZE)
 8014c30:	8abb      	ldrh	r3, [r7, #20]
 8014c32:	3301      	adds	r3, #1
 8014c34:	461a      	mov	r2, r3
 8014c36:	233a      	movs	r3, #58	@ 0x3a
 8014c38:	fb02 f303 	mul.w	r3, r2, r3
 8014c3c:	3302      	adds	r3, #2
 8014c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014c42:	f080 808a 	bcs.w	8014d5a <svl_sdhDaemon+0x306>
                        {
                            (void_t) memcpy((void_t*)&newBinaryDescriptor, (void_t*)sdhBuffer, sizeof(newBinaryDescriptor));
 8014c46:	4b51      	ldr	r3, [pc, #324]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014c48:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8014c4c:	461d      	mov	r5, r3
 8014c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014c5e:	c403      	stmia	r4!, {r0, r1}
 8014c60:	8022      	strh	r2, [r4, #0]

                            if (numOfBinaries > 0)
 8014c62:	8abb      	ldrh	r3, [r7, #20]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d014      	beq.n	8014c92 <svl_sdhDaemon+0x23e>
                            {
                                (void_t) sdhReadFunction(
 8014c68:	4b45      	ldr	r3, [pc, #276]	@ (8014d80 <svl_sdhDaemon+0x32c>)
 8014c6a:	681b      	ldr	r3, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + (numOfBinaries - 1) * sizeof(svl_sdhBinaryDesc_t),
 8014c6c:	8aba      	ldrh	r2, [r7, #20]
 8014c6e:	3a01      	subs	r2, #1
 8014c70:	4611      	mov	r1, r2
 8014c72:	223a      	movs	r2, #58	@ 0x3a
 8014c74:	fb01 f202 	mul.w	r2, r1, r2
 8014c78:	1c90      	adds	r0, r2, #2
                                (void_t) sdhReadFunction(
 8014c7a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8014c7e:	223a      	movs	r2, #58	@ 0x3a
 8014c80:	4798      	blx	r3
                                        (u8_t*)&binaryDescriptor,
                                        sizeof(binaryDescriptor)
                                        );

                                newBinaryDescriptor.binaryLocation = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size;
 8014c82:	f8d7 2092 	ldr.w	r2, [r7, #146]	@ 0x92
 8014c86:	f8d7 309a 	ldr.w	r3, [r7, #154]	@ 0x9a
 8014c8a:	4413      	add	r3, r2
 8014c8c:	f8c7 3056 	str.w	r3, [r7, #86]	@ 0x56
 8014c90:	e007      	b.n	8014ca2 <svl_sdhDaemon+0x24e>
                            }
                            else
                            {
                                newBinaryDescriptor.binaryLocation = SVL_SDH_BINARY_AREA_START;
 8014c92:	2300      	movs	r3, #0
 8014c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8014c98:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                                    "Location: %u\r\n"
                                    "Size: %u\r\n"
                                    "Address: %u\r\n"
                                    "CRC: %u\r\n",
                                    newBinaryDescriptor.name,
									newBinaryDescriptor.installDate.years,
 8014ca2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
                            (void_t) gos_traceTraceFormatted(
 8014ca6:	469c      	mov	ip, r3
									newBinaryDescriptor.installDate.months,
 8014ca8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
                            (void_t) gos_traceTraceFormatted(
 8014cac:	461d      	mov	r5, r3
									newBinaryDescriptor.installDate.days,
 8014cae:	f8b7 3051 	ldrh.w	r3, [r7, #81]	@ 0x51
 8014cb2:	b29b      	uxth	r3, r3
                            (void_t) gos_traceTraceFormatted(
 8014cb4:	461e      	mov	r6, r3
									newBinaryDescriptor.installDate.hours,
 8014cb6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
                            (void_t) gos_traceTraceFormatted(
 8014cba:	60fb      	str	r3, [r7, #12]
									newBinaryDescriptor.installDate.minutes,
 8014cbc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
                            (void_t) gos_traceTraceFormatted(
 8014cc0:	60bb      	str	r3, [r7, #8]
									newBinaryDescriptor.installDate.seconds,
 8014cc2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
                            (void_t) gos_traceTraceFormatted(
 8014cc6:	607b      	str	r3, [r7, #4]
 8014cc8:	f8d7 3056 	ldr.w	r3, [r7, #86]	@ 0x56
 8014ccc:	f8d7 205e 	ldr.w	r2, [r7, #94]	@ 0x5e
 8014cd0:	f8d7 105a 	ldr.w	r1, [r7, #90]	@ 0x5a
 8014cd4:	f8d7 0062 	ldr.w	r0, [r7, #98]	@ 0x62
 8014cd8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8014cdc:	9008      	str	r0, [sp, #32]
 8014cde:	9107      	str	r1, [sp, #28]
 8014ce0:	9206      	str	r2, [sp, #24]
 8014ce2:	9305      	str	r3, [sp, #20]
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	9204      	str	r2, [sp, #16]
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	9203      	str	r2, [sp, #12]
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	9302      	str	r3, [sp, #8]
 8014cf0:	9601      	str	r6, [sp, #4]
 8014cf2:	9500      	str	r5, [sp, #0]
 8014cf4:	4663      	mov	r3, ip
 8014cf6:	4622      	mov	r2, r4
 8014cf8:	4929      	ldr	r1, [pc, #164]	@ (8014da0 <svl_sdhDaemon+0x34c>)
 8014cfa:	2036      	movs	r0, #54	@ 0x36
 8014cfc:	f7f9 f930 	bl	800df60 <gos_traceTraceFormatted>
                                    newBinaryDescriptor.binaryInfo.size,
                                    newBinaryDescriptor.binaryInfo.startAddress,
                                    newBinaryDescriptor.binaryInfo.crc);
#endif

                            if ((newBinaryDescriptor.binaryLocation + newBinaryDescriptor.binaryInfo.size) < SVL_SDH_BINARY_AREA_END)
 8014d00:	f8d7 2056 	ldr.w	r2, [r7, #86]	@ 0x56
 8014d04:	f8d7 305e 	ldr.w	r3, [r7, #94]	@ 0x5e
 8014d08:	4413      	add	r3, r2
 8014d0a:	4a26      	ldr	r2, [pc, #152]	@ (8014da4 <svl_sdhDaemon+0x350>)
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d821      	bhi.n	8014d54 <svl_sdhDaemon+0x300>
                            {
                                (void_t) sdhWriteFunction(
 8014d10:	4b1c      	ldr	r3, [pc, #112]	@ (8014d84 <svl_sdhDaemon+0x330>)
 8014d12:	681b      	ldr	r3, [r3, #0]
                                        SVL_SDH_STORAGE_DESC_BIN_DESC_START + numOfBinaries * sizeof(svl_sdhBinaryDesc_t),
 8014d14:	8aba      	ldrh	r2, [r7, #20]
 8014d16:	4611      	mov	r1, r2
 8014d18:	223a      	movs	r2, #58	@ 0x3a
 8014d1a:	fb01 f202 	mul.w	r2, r1, r2
 8014d1e:	1c90      	adds	r0, r2, #2
                                (void_t) sdhWriteFunction(
 8014d20:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8014d24:	223a      	movs	r2, #58	@ 0x3a
 8014d26:	4798      	blx	r3
                                        (u8_t*)&newBinaryDescriptor,
                                        sizeof(newBinaryDescriptor)
                                );
                                result = SDH_DOWNLOAD_REQ_OK;
 8014d28:	2301      	movs	r3, #1
 8014d2a:	74fb      	strb	r3, [r7, #19]

                                numOfChunks = newBinaryDescriptor.binaryInfo.size / SVL_SDH_CHUNK_SIZE + (newBinaryDescriptor.binaryInfo.size % SVL_SDH_CHUNK_SIZE == 0 ? 0 : 1);
 8014d2c:	f8d7 305e 	ldr.w	r3, [r7, #94]	@ 0x5e
 8014d30:	0a5b      	lsrs	r3, r3, #9
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	f8d7 205e 	ldr.w	r2, [r7, #94]	@ 0x5e
 8014d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014d3c:	2a00      	cmp	r2, #0
 8014d3e:	bf14      	ite	ne
 8014d40:	2201      	movne	r2, #1
 8014d42:	2200      	moveq	r2, #0
 8014d44:	b2d2      	uxtb	r2, r2
 8014d46:	4413      	add	r3, r2
 8014d48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

                                sdhState = SDH_STATE_DOWNLOADING_BINARY;
 8014d4c:	4b16      	ldr	r3, [pc, #88]	@ (8014da8 <svl_sdhDaemon+0x354>)
 8014d4e:	2201      	movs	r2, #1
 8014d50:	701a      	strb	r2, [r3, #0]
 8014d52:	e004      	b.n	8014d5e <svl_sdhDaemon+0x30a>
                            }
                            else
                            {
                                // New binary does not fit.
                                result = SDH_DOWNLOAD_REQ_FILE_SIZE_ERR;
 8014d54:	2304      	movs	r3, #4
 8014d56:	74fb      	strb	r3, [r7, #19]
 8014d58:	e001      	b.n	8014d5e <svl_sdhDaemon+0x30a>
                            }
                        }
                        else
                        {
                            // There is not enough size for descriptor.
                            result = SDH_DOWNLOAD_REQ_DESC_SIZE_ERR;
 8014d5a:	2302      	movs	r3, #2
 8014d5c:	74fb      	strb	r3, [r7, #19]
                        }

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&result, sizeof(result));
 8014d5e:	7cfa      	ldrb	r2, [r7, #19]
 8014d60:	4b0a      	ldr	r3, [pc, #40]	@ (8014d8c <svl_sdhDaemon+0x338>)
 8014d62:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8014d64:	480a      	ldr	r0, [pc, #40]	@ (8014d90 <svl_sdhDaemon+0x33c>)
 8014d66:	f7f9 fbad 	bl	800e4c4 <gos_triggerIncrement>

                        flashBufferIndex = 0u;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
                        flashChunkIndex = 0u;
 8014d70:	2300      	movs	r3, #0
 8014d72:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 8014d76:	e1c3      	b.n	8015100 <svl_sdhDaemon+0x6ac>
 8014d78:	20007d98 	.word	0x20007d98
 8014d7c:	20007db1 	.word	0x20007db1
 8014d80:	20006b8c 	.word	0x20006b8c
 8014d84:	20006b90 	.word	0x20006b90
 8014d88:	08019f4c 	.word	0x08019f4c
 8014d8c:	20006b94 	.word	0x20006b94
 8014d90:	20007da4 	.word	0x20007da4
 8014d94:	08019f74 	.word	0x08019f74
 8014d98:	08019fa4 	.word	0x08019fa4
 8014d9c:	08019fd8 	.word	0x08019fd8
 8014da0:	0801a000 	.word	0x0801a000
 8014da4:	007ffffe 	.word	0x007ffffe
 8014da8:	20007db0 	.word	0x20007db0
                }
                case SDH_STATE_DOWNLOADING_BINARY:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8014dac:	4ba4      	ldr	r3, [pc, #656]	@ (8015040 <svl_sdhDaemon+0x5ec>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f000 81a7 	beq.w	8015104 <svl_sdhDaemon+0x6b0>
 8014db6:	4ba3      	ldr	r3, [pc, #652]	@ (8015044 <svl_sdhDaemon+0x5f0>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	f000 81a2 	beq.w	8015104 <svl_sdhDaemon+0x6b0>
                    {
                        // Get chunk descriptor.
                        (void_t) memcpy((void_t*)&chunkDesc, (void_t*)sdhBuffer, sizeof(chunkDesc));
 8014dc0:	4aa1      	ldr	r2, [pc, #644]	@ (8015048 <svl_sdhDaemon+0x5f4>)
 8014dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014dc6:	6812      	ldr	r2, [r2, #0]
 8014dc8:	4611      	mov	r1, r2
 8014dca:	8019      	strh	r1, [r3, #0]
 8014dcc:	3302      	adds	r3, #2
 8014dce:	0c12      	lsrs	r2, r2, #16
 8014dd0:	701a      	strb	r2, [r3, #0]

#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTrace(GOS_TRUE, "SDH binary chunk request received.\r\n");
 8014dd2:	499e      	ldr	r1, [pc, #632]	@ (801504c <svl_sdhDaemon+0x5f8>)
 8014dd4:	2036      	movs	r0, #54	@ 0x36
 8014dd6:	f7f8 ff9f 	bl	800dd18 <gos_traceTrace>
#endif

#if SVL_SDH_TRACE_LEVEL == 2
                        if (numOfChunks > 0)
 8014dda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d027      	beq.n	8014e32 <svl_sdhDaemon+0x3de>
                        {
                            u32_t percentage = 100 * 100 * (chunkDesc.chunkIdx + 1) / numOfChunks;
 8014de2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014de4:	3301      	adds	r3, #1
 8014de6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014dea:	fb03 f202 	mul.w	r2, r3, r2
 8014dee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014df2:	fb92 f3f3 	sdiv	r3, r2, r3
 8014df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                            (void_t) gos_traceTraceFormatted(
                                    GOS_TRUE,
                                    "SDH chunk counter [%u/%u] ... %3u.%02u%%\r\n",
                                    chunkDesc.chunkIdx + 1,
 8014dfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
                            (void_t) gos_traceTraceFormatted(
 8014dfc:	1c58      	adds	r0, r3, #1
 8014dfe:	f8b7 40be 	ldrh.w	r4, [r7, #190]	@ 0xbe
 8014e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014e06:	4a92      	ldr	r2, [pc, #584]	@ (8015050 <svl_sdhDaemon+0x5fc>)
 8014e08:	fba2 2303 	umull	r2, r3, r2, r3
 8014e0c:	0959      	lsrs	r1, r3, #5
 8014e0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014e12:	4b8f      	ldr	r3, [pc, #572]	@ (8015050 <svl_sdhDaemon+0x5fc>)
 8014e14:	fba3 5302 	umull	r5, r3, r3, r2
 8014e18:	095b      	lsrs	r3, r3, #5
 8014e1a:	2564      	movs	r5, #100	@ 0x64
 8014e1c:	fb05 f303 	mul.w	r3, r5, r3
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	9301      	str	r3, [sp, #4]
 8014e24:	9100      	str	r1, [sp, #0]
 8014e26:	4623      	mov	r3, r4
 8014e28:	4602      	mov	r2, r0
 8014e2a:	498a      	ldr	r1, [pc, #552]	@ (8015054 <svl_sdhDaemon+0x600>)
 8014e2c:	2036      	movs	r0, #54	@ 0x36
 8014e2e:	f7f9 f897 	bl	800df60 <gos_traceTraceFormatted>
                        	// Wrong number.
                        }
#endif

                        // Copy chunk to FLASH buffer.
                        (void_t) memcpy((void_t*)(sdhFlashBuffer + flashBufferIndex * SVL_SDH_CHUNK_SIZE),
 8014e32:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8014e36:	025b      	lsls	r3, r3, #9
 8014e38:	4a87      	ldr	r2, [pc, #540]	@ (8015058 <svl_sdhDaemon+0x604>)
 8014e3a:	4413      	add	r3, r2
 8014e3c:	4987      	ldr	r1, [pc, #540]	@ (801505c <svl_sdhDaemon+0x608>)
 8014e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e42:	4618      	mov	r0, r3
 8014e44:	f001 ff43 	bl	8016cce <memcpy>
                        		(void_t*)(sdhBuffer + sizeof(chunkDesc)), SVL_SDH_CHUNK_SIZE);

                        // Increase offset.
                        flashBufferIndex++;
 8014e48:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8014e4c:	3301      	adds	r3, #1
 8014e4e:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd

                        // If buffer is full or last chunk was received, write it to FLASH.
                        if (((flashBufferIndex * SVL_SDH_CHUNK_SIZE) >= SVL_SDH_FLASH_BUFFER_SIZE) || (chunkDesc.chunkIdx == (numOfChunks - 1)))
 8014e52:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8014e56:	025b      	lsls	r3, r3, #9
 8014e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014e5c:	d206      	bcs.n	8014e6c <svl_sdhDaemon+0x418>
 8014e5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014e60:	461a      	mov	r2, r3
 8014e62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014e66:	3b01      	subs	r3, #1
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d113      	bne.n	8014e94 <svl_sdhDaemon+0x440>
                        {
                            (void_t) sdhWriteFunction(
 8014e6c:	4b75      	ldr	r3, [pc, #468]	@ (8015044 <svl_sdhDaemon+0x5f0>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
                                    newBinaryDescriptor.binaryLocation + flashChunkIndex * SVL_SDH_FLASH_BUFFER_SIZE,
 8014e70:	f8d7 1056 	ldr.w	r1, [r7, #86]	@ 0x56
 8014e74:	f897 20bc 	ldrb.w	r2, [r7, #188]	@ 0xbc
 8014e78:	0312      	lsls	r2, r2, #12
                            (void_t) sdhWriteFunction(
 8014e7a:	1888      	adds	r0, r1, r2
 8014e7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014e80:	4975      	ldr	r1, [pc, #468]	@ (8015058 <svl_sdhDaemon+0x604>)
 8014e82:	4798      	blx	r3
                                    sdhFlashBuffer,
									SVL_SDH_FLASH_BUFFER_SIZE
                            );
                        	flashBufferIndex = 0u;
 8014e84:	2300      	movs	r3, #0
 8014e86:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
                        	flashChunkIndex++;
 8014e8a:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8014e8e:	3301      	adds	r3, #1
 8014e90:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
                        {
                        	// Wait for buffer to get full or for last chunk to be received.
                        }

                        // Send response.
                        chunkDesc.result = 1;
 8014e94:	2301      	movs	r3, #1
 8014e96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                        (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&chunkDesc, sizeof(chunkDesc));
 8014e9a:	4b6b      	ldr	r3, [pc, #428]	@ (8015048 <svl_sdhDaemon+0x5f4>)
 8014e9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8014ea0:	6812      	ldr	r2, [r2, #0]
 8014ea2:	4611      	mov	r1, r2
 8014ea4:	8019      	strh	r1, [r3, #0]
 8014ea6:	3302      	adds	r3, #2
 8014ea8:	0c12      	lsrs	r2, r2, #16
 8014eaa:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 8014eac:	486c      	ldr	r0, [pc, #432]	@ (8015060 <svl_sdhDaemon+0x60c>)
 8014eae:	f7f9 fb09 	bl	800e4c4 <gos_triggerIncrement>

                        // Check if all chunks have been received.
                        if (chunkDesc.chunkIdx == (numOfChunks - 1))
 8014eb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8014eba:	3b01      	subs	r3, #1
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	f040 8121 	bne.w	8015104 <svl_sdhDaemon+0x6b0>
                        {
#if SVL_SDH_TRACE_LEVEL > 0
                            (void_t) gos_traceTrace(GOS_TRUE, "SDH binary download finished.\r\n");
 8014ec2:	4968      	ldr	r1, [pc, #416]	@ (8015064 <svl_sdhDaemon+0x610>)
 8014ec4:	2036      	movs	r0, #54	@ 0x36
 8014ec6:	f7f8 ff27 	bl	800dd18 <gos_traceTrace>
#endif
                            (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014eca:	4b5d      	ldr	r3, [pc, #372]	@ (8015040 <svl_sdhDaemon+0x5ec>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	f107 0114 	add.w	r1, r7, #20
 8014ed2:	2202      	movs	r2, #2
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	4798      	blx	r3
                            numOfBinaries++;
 8014ed8:	8abb      	ldrh	r3, [r7, #20]
 8014eda:	3301      	adds	r3, #1
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	82bb      	strh	r3, [r7, #20]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014ee0:	4b58      	ldr	r3, [pc, #352]	@ (8015044 <svl_sdhDaemon+0x5f0>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	f107 0114 	add.w	r1, r7, #20
 8014ee8:	2202      	movs	r2, #2
 8014eea:	2000      	movs	r0, #0
 8014eec:	4798      	blx	r3

                            sdhState = SDH_STATE_IDLE;
 8014eee:	4b5e      	ldr	r3, [pc, #376]	@ (8015068 <svl_sdhDaemon+0x614>)
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	701a      	strb	r2, [r3, #0]
                        else
                        {
                            // Continue reception.
                        }
                    }
                    break;
 8014ef4:	e106      	b.n	8015104 <svl_sdhDaemon+0x6b0>
                }
                case SDH_STATE_BINARY_ERASE_REQ:
                {
                    if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 8014ef6:	4b52      	ldr	r3, [pc, #328]	@ (8015040 <svl_sdhDaemon+0x5ec>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f000 8104 	beq.w	8015108 <svl_sdhDaemon+0x6b4>
 8014f00:	4b50      	ldr	r3, [pc, #320]	@ (8015044 <svl_sdhDaemon+0x5f0>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f000 80ff 	beq.w	8015108 <svl_sdhDaemon+0x6b4>
                    {
                        (void_t) memcpy((void_t*)&index, (void_t*)sdhBuffer, sizeof(index));
 8014f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8015048 <svl_sdhDaemon+0x5f4>)
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	82fb      	strh	r3, [r7, #22]
                        (void_t) memcpy((void_t*)&defragment, (void_t*)sdhBuffer + sizeof(index), sizeof(defragment));
 8014f10:	4b56      	ldr	r3, [pc, #344]	@ (801506c <svl_sdhDaemon+0x618>)
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	74bb      	strb	r3, [r7, #18]
#if SVL_SDH_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary erase request received. Index: %u\r\n", index);
 8014f16:	8afb      	ldrh	r3, [r7, #22]
 8014f18:	461a      	mov	r2, r3
 8014f1a:	4955      	ldr	r1, [pc, #340]	@ (8015070 <svl_sdhDaemon+0x61c>)
 8014f1c:	2036      	movs	r0, #54	@ 0x36
 8014f1e:	f7f9 f81f 	bl	800df60 <gos_traceTraceFormatted>
#endif

                        (void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 8014f22:	4b47      	ldr	r3, [pc, #284]	@ (8015040 <svl_sdhDaemon+0x5ec>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	f107 0114 	add.w	r1, r7, #20
 8014f2a:	2202      	movs	r2, #2
 8014f2c:	2000      	movs	r0, #0
 8014f2e:	4798      	blx	r3

                        if (index < numOfBinaries)
 8014f30:	8afa      	ldrh	r2, [r7, #22]
 8014f32:	8abb      	ldrh	r3, [r7, #20]
 8014f34:	429a      	cmp	r2, r3
 8014f36:	f080 80e7 	bcs.w	8015108 <svl_sdhDaemon+0x6b4>
                        {
                            svl_sdhGetBinaryData(index, &binaryDescriptor);
 8014f3a:	8afb      	ldrh	r3, [r7, #22]
 8014f3c:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8014f40:	4611      	mov	r1, r2
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7ff fcf8 	bl	8014938 <svl_sdhGetBinaryData>

                            // Start address to copy is the binary location of
                            // the binary that is being deleted.
                            startAddress = binaryDescriptor.binaryLocation;
 8014f48:	f8d7 3092 	ldr.w	r3, [r7, #146]	@ 0x92
 8014f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

                            // Reorganize descriptors and binary.
                            if (index != (numOfBinaries - 1))
 8014f50:	8afb      	ldrh	r3, [r7, #22]
 8014f52:	461a      	mov	r2, r3
 8014f54:	8abb      	ldrh	r3, [r7, #20]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	f000 80b7 	beq.w	80150cc <svl_sdhDaemon+0x678>
                            {
                                // Move descriptors.
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 8014f5e:	2300      	movs	r3, #0
 8014f60:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 8014f64:	e01c      	b.n	8014fa0 <svl_sdhDaemon+0x54c>
                                {
                                    (void_t) svl_sdhGetBinaryData((index + 1 + idx), &binaryDescriptor);
 8014f66:	8afa      	ldrh	r2, [r7, #22]
 8014f68:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8014f6c:	4413      	add	r3, r2
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	3301      	adds	r3, #1
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8014f78:	4611      	mov	r1, r2
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7ff fcdc 	bl	8014938 <svl_sdhGetBinaryData>
                                    (void_t) svl_sdhSetBinaryData((index + idx), &binaryDescriptor);
 8014f80:	8afa      	ldrh	r2, [r7, #22]
 8014f82:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8014f86:	4413      	add	r3, r2
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8014f8e:	4611      	mov	r1, r2
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7ff fd05 	bl	80149a0 <svl_sdhSetBinaryData>
                                for (u16_t idx = 0u; idx < (numOfBinaries - (index + 1)); idx++)
 8014f96:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 8014f9a:	3301      	adds	r3, #1
 8014f9c:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 8014fa0:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	@ 0xba
 8014fa4:	8abb      	ldrh	r3, [r7, #20]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	8afb      	ldrh	r3, [r7, #22]
 8014faa:	3301      	adds	r3, #1
 8014fac:	1acb      	subs	r3, r1, r3
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	dbd9      	blt.n	8014f66 <svl_sdhDaemon+0x512>
                                }

                                // Move binaries and update descriptor data.
                                // Prepare variables.
                                if (defragment == GOS_TRUE)
 8014fb2:	7cbb      	ldrb	r3, [r7, #18]
 8014fb4:	2b36      	cmp	r3, #54	@ 0x36
 8014fb6:	f040 8089 	bne.w	80150cc <svl_sdhDaemon+0x678>
                                {
                                    (void_t) svl_sdhGetBinaryData(index, &binaryDescriptor);
 8014fba:	8afb      	ldrh	r3, [r7, #22]
 8014fbc:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8014fc0:	4611      	mov	r1, r2
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7ff fcb8 	bl	8014938 <svl_sdhGetBinaryData>
                                    fromAddress = binaryDescriptor.binaryLocation;
 8014fc8:	f8d7 3092 	ldr.w	r3, [r7, #146]	@ 0x92
 8014fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

                                    (void_t) svl_sdhGetBinaryData((numOfBinaries - 2), &binaryDescriptor);
 8014fd0:	8abb      	ldrh	r3, [r7, #20]
 8014fd2:	3b02      	subs	r3, #2
 8014fd4:	b29b      	uxth	r3, r3
 8014fd6:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8014fda:	4611      	mov	r1, r2
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7ff fcab 	bl	8014938 <svl_sdhGetBinaryData>
                                    totalCopySize = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size - fromAddress;
 8014fe2:	f8d7 2092 	ldr.w	r2, [r7, #146]	@ 0x92
 8014fe6:	f8d7 309a 	ldr.w	r3, [r7, #154]	@ 0x9a
 8014fea:	441a      	add	r2, r3
 8014fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014ff0:	1ad3      	subs	r3, r2, r3
 8014ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

                                    // Move in chunks using SDH buffer.
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014ffc:	e05f      	b.n	80150be <svl_sdhDaemon+0x66a>
                                    {
                                        if ((cntr + 1) * SVL_SDH_CHUNK_SIZE < totalCopySize)
 8014ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015002:	3301      	adds	r3, #1
 8015004:	025b      	lsls	r3, r3, #9
 8015006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801500a:	429a      	cmp	r2, r3
 801500c:	d932      	bls.n	8015074 <svl_sdhDaemon+0x620>
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 801500e:	4b0c      	ldr	r3, [pc, #48]	@ (8015040 <svl_sdhDaemon+0x5ec>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8015016:	0251      	lsls	r1, r2, #9
 8015018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801501c:	1888      	adds	r0, r1, r2
 801501e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015022:	4909      	ldr	r1, [pc, #36]	@ (8015048 <svl_sdhDaemon+0x5f4>)
 8015024:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, SVL_SDH_CHUNK_SIZE);
 8015026:	4b07      	ldr	r3, [pc, #28]	@ (8015044 <svl_sdhDaemon+0x5f0>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801502e:	0251      	lsls	r1, r2, #9
 8015030:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8015034:	1888      	adds	r0, r1, r2
 8015036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801503a:	4903      	ldr	r1, [pc, #12]	@ (8015048 <svl_sdhDaemon+0x5f4>)
 801503c:	4798      	blx	r3
 801503e:	e039      	b.n	80150b4 <svl_sdhDaemon+0x660>
 8015040:	20006b8c 	.word	0x20006b8c
 8015044:	20006b90 	.word	0x20006b90
 8015048:	20006b94 	.word	0x20006b94
 801504c:	0801a074 	.word	0x0801a074
 8015050:	51eb851f 	.word	0x51eb851f
 8015054:	0801a09c 	.word	0x0801a09c
 8015058:	20006d98 	.word	0x20006d98
 801505c:	20006b97 	.word	0x20006b97
 8015060:	20007da4 	.word	0x20007da4
 8015064:	0801a0c8 	.word	0x0801a0c8
 8015068:	20007db0 	.word	0x20007db0
 801506c:	20006b96 	.word	0x20006b96
 8015070:	0801a0e8 	.word	0x0801a0e8
                                        }
                                        else
                                        {
                                            (void_t) sdhReadFunction(fromAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 8015074:	4b2e      	ldr	r3, [pc, #184]	@ (8015130 <svl_sdhDaemon+0x6dc>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801507c:	0251      	lsls	r1, r2, #9
 801507e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8015082:	1888      	adds	r0, r1, r2
 8015084:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8015088:	0252      	lsls	r2, r2, #9
 801508a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801508e:	1a8a      	subs	r2, r1, r2
 8015090:	4928      	ldr	r1, [pc, #160]	@ (8015134 <svl_sdhDaemon+0x6e0>)
 8015092:	4798      	blx	r3
                                            (void_t) sdhWriteFunction(startAddress + (cntr * SVL_SDH_CHUNK_SIZE), sdhBuffer, totalCopySize - (cntr * SVL_SDH_CHUNK_SIZE));
 8015094:	4b28      	ldr	r3, [pc, #160]	@ (8015138 <svl_sdhDaemon+0x6e4>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801509c:	0251      	lsls	r1, r2, #9
 801509e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80150a2:	1888      	adds	r0, r1, r2
 80150a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80150a8:	0252      	lsls	r2, r2, #9
 80150aa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80150ae:	1a8a      	subs	r2, r1, r2
 80150b0:	4920      	ldr	r1, [pc, #128]	@ (8015134 <svl_sdhDaemon+0x6e0>)
 80150b2:	4798      	blx	r3
                                    for (u32_t cntr = 0u; (cntr * SVL_SDH_CHUNK_SIZE) < totalCopySize; cntr++)
 80150b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80150b8:	3301      	adds	r3, #1
 80150ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80150be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80150c2:	025b      	lsls	r3, r3, #9
 80150c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d898      	bhi.n	8014ffe <svl_sdhDaemon+0x5aa>
                            {
                                // No moving required.
                            }

                            // Decrease number of binaries.
                            numOfBinaries--;
 80150cc:	8abb      	ldrh	r3, [r7, #20]
 80150ce:	3b01      	subs	r3, #1
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	82bb      	strh	r3, [r7, #20]
                            (void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 80150d4:	4b18      	ldr	r3, [pc, #96]	@ (8015138 <svl_sdhDaemon+0x6e4>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	f107 0114 	add.w	r1, r7, #20
 80150dc:	2202      	movs	r2, #2
 80150de:	2000      	movs	r0, #0
 80150e0:	4798      	blx	r3

                            (void_t) memcpy((void_t*)sdhBuffer, (void_t*)&index, sizeof(index));
 80150e2:	8afa      	ldrh	r2, [r7, #22]
 80150e4:	4b13      	ldr	r3, [pc, #76]	@ (8015134 <svl_sdhDaemon+0x6e0>)
 80150e6:	801a      	strh	r2, [r3, #0]
                            (void_t) gos_triggerIncrement(&sdhControlFeedbackTrigger);
 80150e8:	4814      	ldr	r0, [pc, #80]	@ (801513c <svl_sdhDaemon+0x6e8>)
 80150ea:	f7f9 f9eb 	bl	800e4c4 <gos_triggerIncrement>
                    }
                    else
                    {
                        // Request cannot be served.
                    }
                    break;
 80150ee:	e00b      	b.n	8015108 <svl_sdhDaemon+0x6b4>
                }
                default: break;
 80150f0:	bf00      	nop
 80150f2:	e00a      	b.n	801510a <svl_sdhDaemon+0x6b6>
                    break;
 80150f4:	bf00      	nop
 80150f6:	e008      	b.n	801510a <svl_sdhDaemon+0x6b6>
                    break;
 80150f8:	bf00      	nop
 80150fa:	e006      	b.n	801510a <svl_sdhDaemon+0x6b6>
                    break;
 80150fc:	bf00      	nop
 80150fe:	e004      	b.n	801510a <svl_sdhDaemon+0x6b6>
                    break;
 8015100:	bf00      	nop
 8015102:	e002      	b.n	801510a <svl_sdhDaemon+0x6b6>
                    break;
 8015104:	bf00      	nop
 8015106:	e000      	b.n	801510a <svl_sdhDaemon+0x6b6>
                    break;
 8015108:	bf00      	nop
            }
            (void_t) gos_triggerReset(&sdhControlTrigger);
 801510a:	480d      	ldr	r0, [pc, #52]	@ (8015140 <svl_sdhDaemon+0x6ec>)
 801510c:	f7f9 f8d2 	bl	800e2b4 <gos_triggerReset>
 8015110:	e4d9      	b.n	8014ac6 <svl_sdhDaemon+0x72>
        }
        else
        {
            // Timeout.
#if SVL_SDH_TRACE_LEVEL > 0
            if (sdhState != SDH_STATE_IDLE)
 8015112:	4b0c      	ldr	r3, [pc, #48]	@ (8015144 <svl_sdhDaemon+0x6f0>)
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d003      	beq.n	8015122 <svl_sdhDaemon+0x6ce>
            {
                (void_t) gos_traceTrace(GOS_TRUE, "SDH timeout.\r\n");
 801511a:	490b      	ldr	r1, [pc, #44]	@ (8015148 <svl_sdhDaemon+0x6f4>)
 801511c:	2036      	movs	r0, #54	@ 0x36
 801511e:	f7f8 fdfb 	bl	800dd18 <gos_traceTrace>
            else
            {
                // Just message RX timeout in idle state.
            }
#endif
            sdhState = SDH_STATE_IDLE;
 8015122:	4b08      	ldr	r3, [pc, #32]	@ (8015144 <svl_sdhDaemon+0x6f0>)
 8015124:	2200      	movs	r2, #0
 8015126:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskSleep(100);
 8015128:	2064      	movs	r0, #100	@ 0x64
 801512a:	f7f5 f963 	bl	800a3f4 <gos_taskSleep>
        if (gos_triggerWait(&sdhControlTrigger, SVL_SDH_DAEMON_TRIGGER_VALUE, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 801512e:	e4ca      	b.n	8014ac6 <svl_sdhDaemon+0x72>
 8015130:	20006b8c 	.word	0x20006b8c
 8015134:	20006b94 	.word	0x20006b94
 8015138:	20006b90 	.word	0x20006b90
 801513c:	20007da4 	.word	0x20007da4
 8015140:	20007d98 	.word	0x20007d98
 8015144:	20007db0 	.word	0x20007db0
 8015148:	0801a118 	.word	0x0801a118

0801514c <svl_sdhSysmonBinaryNumReqCallback>:
 * @details Handles the binary number request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryNumReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af02      	add	r7, sp, #8
 8015152:	4603      	mov	r3, r0
 8015154:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_NUM_REQ;
 8015156:	4b10      	ldr	r3, [pc, #64]	@ (8015198 <svl_sdhSysmonBinaryNumReqCallback+0x4c>)
 8015158:	2202      	movs	r2, #2
 801515a:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 801515c:	480f      	ldr	r0, [pc, #60]	@ (801519c <svl_sdhSysmonBinaryNumReqCallback+0x50>)
 801515e:	f7f9 f9b1 	bl	800e4c4 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 8015162:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8015166:	2101      	movs	r1, #1
 8015168:	480d      	ldr	r0, [pc, #52]	@ (80151a0 <svl_sdhSysmonBinaryNumReqCallback+0x54>)
 801516a:	f7f9 f8fb 	bl	800e364 <gos_triggerWait>
 801516e:	4603      	mov	r3, r0
 8015170:	2b55      	cmp	r3, #85	@ 0x55
 8015172:	d109      	bne.n	8015188 <svl_sdhSysmonBinaryNumReqCallback+0x3c>
    {
        (void_t) gos_gcpTransmitMessage(
 8015174:	79f8      	ldrb	r0, [r7, #7]
 8015176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	2302      	movs	r3, #2
 801517e:	4a09      	ldr	r2, [pc, #36]	@ (80151a4 <svl_sdhSysmonBinaryNumReqCallback+0x58>)
 8015180:	f641 2101 	movw	r1, #6657	@ 0x1a01
 8015184:	f7f6 ff3a 	bl	800bffc <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8015188:	4805      	ldr	r0, [pc, #20]	@ (80151a0 <svl_sdhSysmonBinaryNumReqCallback+0x54>)
 801518a:	f7f9 f893 	bl	800e2b4 <gos_triggerReset>
}
 801518e:	bf00      	nop
 8015190:	3708      	adds	r7, #8
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	20007db1 	.word	0x20007db1
 801519c:	20007d98 	.word	0x20007d98
 80151a0:	20007da4 	.word	0x20007da4
 80151a4:	20006b94 	.word	0x20006b94

080151a8 <svl_sdhSysmonBinaryInfoReqCallback>:
 * @details Handles the binary info request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryInfoReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af02      	add	r7, sp, #8
 80151ae:	4603      	mov	r3, r0
 80151b0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INFO_REQ;
 80151b2:	4b10      	ldr	r3, [pc, #64]	@ (80151f4 <svl_sdhSysmonBinaryInfoReqCallback+0x4c>)
 80151b4:	2203      	movs	r2, #3
 80151b6:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 80151b8:	480f      	ldr	r0, [pc, #60]	@ (80151f8 <svl_sdhSysmonBinaryInfoReqCallback+0x50>)
 80151ba:	f7f9 f983 	bl	800e4c4 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 80151be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80151c2:	2101      	movs	r1, #1
 80151c4:	480d      	ldr	r0, [pc, #52]	@ (80151fc <svl_sdhSysmonBinaryInfoReqCallback+0x54>)
 80151c6:	f7f9 f8cd 	bl	800e364 <gos_triggerWait>
 80151ca:	4603      	mov	r3, r0
 80151cc:	2b55      	cmp	r3, #85	@ 0x55
 80151ce:	d109      	bne.n	80151e4 <svl_sdhSysmonBinaryInfoReqCallback+0x3c>
    {
        (void_t) gos_gcpTransmitMessage(
 80151d0:	79f8      	ldrb	r0, [r7, #7]
 80151d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	233a      	movs	r3, #58	@ 0x3a
 80151da:	4a09      	ldr	r2, [pc, #36]	@ (8015200 <svl_sdhSysmonBinaryInfoReqCallback+0x58>)
 80151dc:	f641 2102 	movw	r1, #6658	@ 0x1a02
 80151e0:	f7f6 ff0c 	bl	800bffc <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80151e4:	4805      	ldr	r0, [pc, #20]	@ (80151fc <svl_sdhSysmonBinaryInfoReqCallback+0x54>)
 80151e6:	f7f9 f865 	bl	800e2b4 <gos_triggerReset>
}
 80151ea:	bf00      	nop
 80151ec:	3708      	adds	r7, #8
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	20007db1 	.word	0x20007db1
 80151f8:	20007d98 	.word	0x20007d98
 80151fc:	20007da4 	.word	0x20007da4
 8015200:	20006b94 	.word	0x20006b94

08015204 <svl_sdhSysmonDownloadReqCallback>:
 * @details Handles the download request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonDownloadReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b084      	sub	sp, #16
 8015208:	af02      	add	r7, sp, #8
 801520a:	4603      	mov	r3, r0
 801520c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 801520e:	4b10      	ldr	r3, [pc, #64]	@ (8015250 <svl_sdhSysmonDownloadReqCallback+0x4c>)
 8015210:	2204      	movs	r2, #4
 8015212:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8015214:	480f      	ldr	r0, [pc, #60]	@ (8015254 <svl_sdhSysmonDownloadReqCallback+0x50>)
 8015216:	f7f9 f955 	bl	800e4c4 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 801521a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801521e:	2101      	movs	r1, #1
 8015220:	480d      	ldr	r0, [pc, #52]	@ (8015258 <svl_sdhSysmonDownloadReqCallback+0x54>)
 8015222:	f7f9 f89f 	bl	800e364 <gos_triggerWait>
 8015226:	4603      	mov	r3, r0
 8015228:	2b55      	cmp	r3, #85	@ 0x55
 801522a:	d109      	bne.n	8015240 <svl_sdhSysmonDownloadReqCallback+0x3c>
    {
        (void_t) gos_gcpTransmitMessage(
 801522c:	79f8      	ldrb	r0, [r7, #7]
 801522e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015232:	9300      	str	r3, [sp, #0]
 8015234:	2301      	movs	r3, #1
 8015236:	4a09      	ldr	r2, [pc, #36]	@ (801525c <svl_sdhSysmonDownloadReqCallback+0x58>)
 8015238:	f641 2103 	movw	r1, #6659	@ 0x1a03
 801523c:	f7f6 fede 	bl	800bffc <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8015240:	4805      	ldr	r0, [pc, #20]	@ (8015258 <svl_sdhSysmonDownloadReqCallback+0x54>)
 8015242:	f7f9 f837 	bl	800e2b4 <gos_triggerReset>
}
 8015246:	bf00      	nop
 8015248:	3708      	adds	r7, #8
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	20007db1 	.word	0x20007db1
 8015254:	20007d98 	.word	0x20007d98
 8015258:	20007da4 	.word	0x20007da4
 801525c:	20006b94 	.word	0x20006b94

08015260 <svl_sdhSysmonBinaryChunkReqCallback>:
 * @details Handles the binary chunk request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryChunkReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af02      	add	r7, sp, #8
 8015266:	4603      	mov	r3, r0
 8015268:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_DOWNLOADING_BINARY;
 801526a:	4b10      	ldr	r3, [pc, #64]	@ (80152ac <svl_sdhSysmonBinaryChunkReqCallback+0x4c>)
 801526c:	2201      	movs	r2, #1
 801526e:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8015270:	480f      	ldr	r0, [pc, #60]	@ (80152b0 <svl_sdhSysmonBinaryChunkReqCallback+0x50>)
 8015272:	f7f9 f927 	bl	800e4c4 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 10000) == GOS_SUCCESS)
 8015276:	f242 7210 	movw	r2, #10000	@ 0x2710
 801527a:	2101      	movs	r1, #1
 801527c:	480d      	ldr	r0, [pc, #52]	@ (80152b4 <svl_sdhSysmonBinaryChunkReqCallback+0x54>)
 801527e:	f7f9 f871 	bl	800e364 <gos_triggerWait>
 8015282:	4603      	mov	r3, r0
 8015284:	2b55      	cmp	r3, #85	@ 0x55
 8015286:	d109      	bne.n	801529c <svl_sdhSysmonBinaryChunkReqCallback+0x3c>
    {
        (void_t) gos_gcpTransmitMessage(
 8015288:	79f8      	ldrb	r0, [r7, #7]
 801528a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801528e:	9300      	str	r3, [sp, #0]
 8015290:	2303      	movs	r3, #3
 8015292:	4a09      	ldr	r2, [pc, #36]	@ (80152b8 <svl_sdhSysmonBinaryChunkReqCallback+0x58>)
 8015294:	f641 2104 	movw	r1, #6660	@ 0x1a04
 8015298:	f7f6 feb0 	bl	800bffc <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 801529c:	4805      	ldr	r0, [pc, #20]	@ (80152b4 <svl_sdhSysmonBinaryChunkReqCallback+0x54>)
 801529e:	f7f9 f809 	bl	800e2b4 <gos_triggerReset>
}
 80152a2:	bf00      	nop
 80152a4:	3708      	adds	r7, #8
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	20007db1 	.word	0x20007db1
 80152b0:	20007d98 	.word	0x20007d98
 80152b4:	20007da4 	.word	0x20007da4
 80152b8:	20006b94 	.word	0x20006b94

080152bc <svl_sdhSysmonSoftwareInstallReqCallback>:
 * @details Handles the install request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonSoftwareInstallReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af02      	add	r7, sp, #8
 80152c2:	4603      	mov	r3, r0
 80152c4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_INSTALL_REQ;
 80152c6:	4b10      	ldr	r3, [pc, #64]	@ (8015308 <svl_sdhSysmonSoftwareInstallReqCallback+0x4c>)
 80152c8:	2205      	movs	r2, #5
 80152ca:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 80152cc:	480f      	ldr	r0, [pc, #60]	@ (801530c <svl_sdhSysmonSoftwareInstallReqCallback+0x50>)
 80152ce:	f7f9 f8f9 	bl	800e4c4 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 3000) == GOS_SUCCESS)
 80152d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80152d6:	2101      	movs	r1, #1
 80152d8:	480d      	ldr	r0, [pc, #52]	@ (8015310 <svl_sdhSysmonSoftwareInstallReqCallback+0x54>)
 80152da:	f7f9 f843 	bl	800e364 <gos_triggerWait>
 80152de:	4603      	mov	r3, r0
 80152e0:	2b55      	cmp	r3, #85	@ 0x55
 80152e2:	d109      	bne.n	80152f8 <svl_sdhSysmonSoftwareInstallReqCallback+0x3c>
    {
        (void_t) gos_gcpTransmitMessage(
 80152e4:	79f8      	ldrb	r0, [r7, #7]
 80152e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	2302      	movs	r3, #2
 80152ee:	4a09      	ldr	r2, [pc, #36]	@ (8015314 <svl_sdhSysmonSoftwareInstallReqCallback+0x58>)
 80152f0:	f641 2105 	movw	r1, #6661	@ 0x1a05
 80152f4:	f7f6 fe82 	bl	800bffc <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 80152f8:	4805      	ldr	r0, [pc, #20]	@ (8015310 <svl_sdhSysmonSoftwareInstallReqCallback+0x54>)
 80152fa:	f7f8 ffdb 	bl	800e2b4 <gos_triggerReset>
}
 80152fe:	bf00      	nop
 8015300:	3708      	adds	r7, #8
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	20007db1 	.word	0x20007db1
 801530c:	20007d98 	.word	0x20007d98
 8015310:	20007da4 	.word	0x20007da4
 8015314:	20006b94 	.word	0x20006b94

08015318 <svl_sdhSysmonBinaryEraseReqCallback>:
 * @details Handles the erase request via sysmon.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sdhSysmonBinaryEraseReqCallback (gos_gcpChannelNumber_t gcpChannel)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b084      	sub	sp, #16
 801531c:	af02      	add	r7, sp, #8
 801531e:	4603      	mov	r3, r0
 8015320:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sdhRequestedState = SDH_STATE_BINARY_ERASE_REQ;
 8015322:	4b10      	ldr	r3, [pc, #64]	@ (8015364 <svl_sdhSysmonBinaryEraseReqCallback+0x4c>)
 8015324:	2206      	movs	r2, #6
 8015326:	701a      	strb	r2, [r3, #0]

    // Increment trigger to signal for task.
    (void_t) gos_triggerIncrement(&sdhControlTrigger);
 8015328:	480f      	ldr	r0, [pc, #60]	@ (8015368 <svl_sdhSysmonBinaryEraseReqCallback+0x50>)
 801532a:	f7f9 f8cb 	bl	800e4c4 <gos_triggerIncrement>

    if (gos_triggerWait(&sdhControlFeedbackTrigger, SVL_SDH_FEEDBACK_TRIGGER_VALUE, 5000) == GOS_SUCCESS)
 801532e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015332:	2101      	movs	r1, #1
 8015334:	480d      	ldr	r0, [pc, #52]	@ (801536c <svl_sdhSysmonBinaryEraseReqCallback+0x54>)
 8015336:	f7f9 f815 	bl	800e364 <gos_triggerWait>
 801533a:	4603      	mov	r3, r0
 801533c:	2b55      	cmp	r3, #85	@ 0x55
 801533e:	d109      	bne.n	8015354 <svl_sdhSysmonBinaryEraseReqCallback+0x3c>
    {
        (void_t) gos_gcpTransmitMessage(
 8015340:	79f8      	ldrb	r0, [r7, #7]
 8015342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015346:	9300      	str	r3, [sp, #0]
 8015348:	2302      	movs	r3, #2
 801534a:	4a09      	ldr	r2, [pc, #36]	@ (8015370 <svl_sdhSysmonBinaryEraseReqCallback+0x58>)
 801534c:	f641 2106 	movw	r1, #6662	@ 0x1a06
 8015350:	f7f6 fe54 	bl	800bffc <gos_gcpTransmitMessage>
    {
        // Nothing to do.
    }

    // Reset trigger to 0.
    (void_t) gos_triggerReset(&sdhControlFeedbackTrigger);
 8015354:	4805      	ldr	r0, [pc, #20]	@ (801536c <svl_sdhSysmonBinaryEraseReqCallback+0x54>)
 8015356:	f7f8 ffad 	bl	800e2b4 <gos_triggerReset>
}
 801535a:	bf00      	nop
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	20007db1 	.word	0x20007db1
 8015368:	20007d98 	.word	0x20007d98
 801536c:	20007da4 	.word	0x20007da4
 8015370:	20006b94 	.word	0x20006b94

08015374 <svl_sysmonInit>:

/*
 * Function: svl_sysmonInit
 */
gos_result_t svl_sysmonInit (void_t)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_SUCCESS;
 801537a:	2355      	movs	r3, #85	@ 0x55
 801537c:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 801537e:	2300      	movs	r3, #0
 8015380:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8015382:	2300      	movs	r3, #0
 8015384:	71bb      	strb	r3, [r7, #6]
 8015386:	e01e      	b.n	80153c6 <svl_sysmonInit+0x52>
    {
        userMessages[userMessageIndex].callback    = NULL;
 8015388:	79bb      	ldrb	r3, [r7, #6]
 801538a:	4a3d      	ldr	r2, [pc, #244]	@ (8015480 <svl_sysmonInit+0x10c>)
 801538c:	011b      	lsls	r3, r3, #4
 801538e:	4413      	add	r3, r2
 8015390:	330c      	adds	r3, #12
 8015392:	2200      	movs	r2, #0
 8015394:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload     = NULL;
 8015396:	79bb      	ldrb	r3, [r7, #6]
 8015398:	4a39      	ldr	r2, [pc, #228]	@ (8015480 <svl_sysmonInit+0x10c>)
 801539a:	011b      	lsls	r3, r3, #4
 801539c:	4413      	add	r3, r2
 801539e:	3304      	adds	r3, #4
 80153a0:	2200      	movs	r2, #0
 80153a2:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize = 0u;
 80153a4:	79bb      	ldrb	r3, [r7, #6]
 80153a6:	4a36      	ldr	r2, [pc, #216]	@ (8015480 <svl_sysmonInit+0x10c>)
 80153a8:	011b      	lsls	r3, r3, #4
 80153aa:	4413      	add	r3, r2
 80153ac:	3308      	adds	r3, #8
 80153ae:	2200      	movs	r2, #0
 80153b0:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].messageId   = SVL_SYSMON_MSG_INVALID_ID;
 80153b2:	79bb      	ldrb	r3, [r7, #6]
 80153b4:	4a32      	ldr	r2, [pc, #200]	@ (8015480 <svl_sysmonInit+0x10c>)
 80153b6:	011b      	lsls	r3, r3, #4
 80153b8:	4413      	add	r3, r2
 80153ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80153be:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80153c0:	79bb      	ldrb	r3, [r7, #6]
 80153c2:	3301      	adds	r3, #1
 80153c4:	71bb      	strb	r3, [r7, #6]
 80153c6:	79bb      	ldrb	r3, [r7, #6]
 80153c8:	2b17      	cmp	r3, #23
 80153ca:	d9dd      	bls.n	8015388 <svl_sysmonInit+0x14>
    }

    if (sysmonConfig.wiredRxFunction != NULL &&
 80153cc:	4b2d      	ldr	r3, [pc, #180]	@ (8015484 <svl_sysmonInit+0x110>)
 80153ce:	689b      	ldr	r3, [r3, #8]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d020      	beq.n	8015416 <svl_sysmonInit+0xa2>
    	sysmonConfig.wiredTxFunction != NULL)
 80153d4:	4b2b      	ldr	r3, [pc, #172]	@ (8015484 <svl_sysmonInit+0x110>)
 80153d6:	685b      	ldr	r3, [r3, #4]
    if (sysmonConfig.wiredRxFunction != NULL &&
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d01c      	beq.n	8015416 <svl_sysmonInit+0xa2>
    {
    	GOS_CONCAT_RESULT(sysmonInitResult, gos_gcpRegisterPhysicalDriver(sysmonConfig.wiredChannelNumber,
 80153dc:	79fb      	ldrb	r3, [r7, #7]
 80153de:	2b55      	cmp	r3, #85	@ 0x55
 80153e0:	d10b      	bne.n	80153fa <svl_sysmonInit+0x86>
 80153e2:	4b28      	ldr	r3, [pc, #160]	@ (8015484 <svl_sysmonInit+0x110>)
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	4a27      	ldr	r2, [pc, #156]	@ (8015484 <svl_sysmonInit+0x110>)
 80153e8:	6851      	ldr	r1, [r2, #4]
 80153ea:	4a26      	ldr	r2, [pc, #152]	@ (8015484 <svl_sysmonInit+0x110>)
 80153ec:	6892      	ldr	r2, [r2, #8]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f6 fddc 	bl	800bfac <gos_gcpRegisterPhysicalDriver>
 80153f4:	4603      	mov	r3, r0
 80153f6:	71fb      	strb	r3, [r7, #7]
 80153f8:	e001      	b.n	80153fe <svl_sysmonInit+0x8a>
 80153fa:	23ae      	movs	r3, #174	@ 0xae
 80153fc:	71fb      	strb	r3, [r7, #7]
    			sysmonConfig.wiredTxFunction, sysmonConfig.wiredRxFunction));
        // Register task.
        GOS_CONCAT_RESULT(sysmonInitResult, gos_taskRegister(&sysmonWiredDaemonTaskDesc, NULL));
 80153fe:	79fb      	ldrb	r3, [r7, #7]
 8015400:	2b55      	cmp	r3, #85	@ 0x55
 8015402:	d106      	bne.n	8015412 <svl_sysmonInit+0x9e>
 8015404:	2100      	movs	r1, #0
 8015406:	4820      	ldr	r0, [pc, #128]	@ (8015488 <svl_sysmonInit+0x114>)
 8015408:	f7f4 fe62 	bl	800a0d0 <gos_taskRegister>
 801540c:	4603      	mov	r3, r0
 801540e:	71fb      	strb	r3, [r7, #7]
 8015410:	e001      	b.n	8015416 <svl_sysmonInit+0xa2>
 8015412:	23ae      	movs	r3, #174	@ 0xae
 8015414:	71fb      	strb	r3, [r7, #7]
    else
    {
    	// Wired service not configured.
    }

    if (sysmonConfig.wirelessRxFunction != NULL &&
 8015416:	4b1b      	ldr	r3, [pc, #108]	@ (8015484 <svl_sysmonInit+0x110>)
 8015418:	695b      	ldr	r3, [r3, #20]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d020      	beq.n	8015460 <svl_sysmonInit+0xec>
		sysmonConfig.wirelessTxFunction != NULL)
 801541e:	4b19      	ldr	r3, [pc, #100]	@ (8015484 <svl_sysmonInit+0x110>)
 8015420:	691b      	ldr	r3, [r3, #16]
    if (sysmonConfig.wirelessRxFunction != NULL &&
 8015422:	2b00      	cmp	r3, #0
 8015424:	d01c      	beq.n	8015460 <svl_sysmonInit+0xec>
    {
    	GOS_CONCAT_RESULT(sysmonInitResult, gos_gcpRegisterPhysicalDriver(sysmonConfig.wirelessChannelNumber,
 8015426:	79fb      	ldrb	r3, [r7, #7]
 8015428:	2b55      	cmp	r3, #85	@ 0x55
 801542a:	d10b      	bne.n	8015444 <svl_sysmonInit+0xd0>
 801542c:	4b15      	ldr	r3, [pc, #84]	@ (8015484 <svl_sysmonInit+0x110>)
 801542e:	7b1b      	ldrb	r3, [r3, #12]
 8015430:	4a14      	ldr	r2, [pc, #80]	@ (8015484 <svl_sysmonInit+0x110>)
 8015432:	6911      	ldr	r1, [r2, #16]
 8015434:	4a13      	ldr	r2, [pc, #76]	@ (8015484 <svl_sysmonInit+0x110>)
 8015436:	6952      	ldr	r2, [r2, #20]
 8015438:	4618      	mov	r0, r3
 801543a:	f7f6 fdb7 	bl	800bfac <gos_gcpRegisterPhysicalDriver>
 801543e:	4603      	mov	r3, r0
 8015440:	71fb      	strb	r3, [r7, #7]
 8015442:	e001      	b.n	8015448 <svl_sysmonInit+0xd4>
 8015444:	23ae      	movs	r3, #174	@ 0xae
 8015446:	71fb      	strb	r3, [r7, #7]
    			sysmonConfig.wirelessTxFunction, sysmonConfig.wirelessRxFunction));
    	// Register task.
    	GOS_CONCAT_RESULT(sysmonInitResult, gos_taskRegister(&sysmonWirelessDaemonTaskDesc, NULL));
 8015448:	79fb      	ldrb	r3, [r7, #7]
 801544a:	2b55      	cmp	r3, #85	@ 0x55
 801544c:	d106      	bne.n	801545c <svl_sysmonInit+0xe8>
 801544e:	2100      	movs	r1, #0
 8015450:	480e      	ldr	r0, [pc, #56]	@ (801548c <svl_sysmonInit+0x118>)
 8015452:	f7f4 fe3d 	bl	800a0d0 <gos_taskRegister>
 8015456:	4603      	mov	r3, r0
 8015458:	71fb      	strb	r3, [r7, #7]
 801545a:	e001      	b.n	8015460 <svl_sysmonInit+0xec>
 801545c:	23ae      	movs	r3, #174	@ 0xae
 801545e:	71fb      	strb	r3, [r7, #7]
    {
    	// Wireless service not configured.
    }

    // Initialize sysmon mutex.
    GOS_CONCAT_RESULT(sysmonInitResult, gos_mutexInit(&sysmonMutex));
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	2b55      	cmp	r3, #85	@ 0x55
 8015464:	d105      	bne.n	8015472 <svl_sysmonInit+0xfe>
 8015466:	480a      	ldr	r0, [pc, #40]	@ (8015490 <svl_sysmonInit+0x11c>)
 8015468:	f7f7 faea 	bl	800ca40 <gos_mutexInit>
 801546c:	4603      	mov	r3, r0
 801546e:	71fb      	strb	r3, [r7, #7]
 8015470:	e001      	b.n	8015476 <svl_sysmonInit+0x102>
 8015472:	23ae      	movs	r3, #174	@ 0xae
 8015474:	71fb      	strb	r3, [r7, #7]

    return sysmonInitResult;
 8015476:	79fb      	ldrb	r3, [r7, #7]
}
 8015478:	4618      	mov	r0, r3
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}
 8015480:	200086b0 	.word	0x200086b0
 8015484:	0801a630 	.word	0x0801a630
 8015488:	20001150 	.word	0x20001150
 801548c:	200011bc 	.word	0x200011bc
 8015490:	20007db4 	.word	0x20007db4

08015494 <svl_sysmonRegisterUserMessage>:

/*
 * Function: svl_sysmonRegisterUserMessage
 */
gos_result_t svl_sysmonRegisterUserMessage (svl_sysmonUserMessageDescriptor_t* pDesc)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b084      	sub	sp, #16
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 801549c:	23ae      	movs	r3, #174	@ 0xae
 801549e:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 80154a0:	2300      	movs	r3, #0
 80154a2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((pDesc != NULL) && (pDesc->callback != NULL))
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d029      	beq.n	80154fe <svl_sysmonRegisterUserMessage+0x6a>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	68db      	ldr	r3, [r3, #12]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d025      	beq.n	80154fe <svl_sysmonRegisterUserMessage+0x6a>
    {
        for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80154b2:	2300      	movs	r3, #0
 80154b4:	73bb      	strb	r3, [r7, #14]
 80154b6:	e01f      	b.n	80154f8 <svl_sysmonRegisterUserMessage+0x64>
        {
            if (userMessages[userMessageIndex].messageId == SVL_SYSMON_MSG_INVALID_ID &&
 80154b8:	7bbb      	ldrb	r3, [r7, #14]
 80154ba:	4a13      	ldr	r2, [pc, #76]	@ (8015508 <svl_sysmonRegisterUserMessage+0x74>)
 80154bc:	011b      	lsls	r3, r3, #4
 80154be:	4413      	add	r3, r2
 80154c0:	881b      	ldrh	r3, [r3, #0]
 80154c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154c6:	4293      	cmp	r3, r2
 80154c8:	d113      	bne.n	80154f2 <svl_sysmonRegisterUserMessage+0x5e>
                userMessages[userMessageIndex].callback  == NULL)
 80154ca:	7bbb      	ldrb	r3, [r7, #14]
 80154cc:	4a0e      	ldr	r2, [pc, #56]	@ (8015508 <svl_sysmonRegisterUserMessage+0x74>)
 80154ce:	011b      	lsls	r3, r3, #4
 80154d0:	4413      	add	r3, r2
 80154d2:	330c      	adds	r3, #12
 80154d4:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == SVL_SYSMON_MSG_INVALID_ID &&
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10b      	bne.n	80154f2 <svl_sysmonRegisterUserMessage+0x5e>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 80154da:	7bbb      	ldrb	r3, [r7, #14]
 80154dc:	011b      	lsls	r3, r3, #4
 80154de:	4a0a      	ldr	r2, [pc, #40]	@ (8015508 <svl_sysmonRegisterUserMessage+0x74>)
 80154e0:	4413      	add	r3, r2
 80154e2:	2210      	movs	r2, #16
 80154e4:	6879      	ldr	r1, [r7, #4]
 80154e6:	4618      	mov	r0, r3
 80154e8:	f001 fbf1 	bl	8016cce <memcpy>
                registerResult = GOS_SUCCESS;
 80154ec:	2355      	movs	r3, #85	@ 0x55
 80154ee:	73fb      	strb	r3, [r7, #15]
                break;
 80154f0:	e005      	b.n	80154fe <svl_sysmonRegisterUserMessage+0x6a>
        for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80154f2:	7bbb      	ldrb	r3, [r7, #14]
 80154f4:	3301      	adds	r3, #1
 80154f6:	73bb      	strb	r3, [r7, #14]
 80154f8:	7bbb      	ldrb	r3, [r7, #14]
 80154fa:	2b17      	cmp	r3, #23
 80154fc:	d9dc      	bls.n	80154b8 <svl_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 80154fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3710      	adds	r7, #16
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	200086b0 	.word	0x200086b0

0801550c <svl_sysmonFillTaskData>:
 * @return  Result of data filling.
 * @retval  #GOS_SUCCESS Data filled successfully.
 * @retval  #GOS_ERROR   Either of the function parameters is NULL.
 */
GOS_STATIC gos_result_t svl_sysmonFillTaskData (svl_sysmonTaskData_t* pSysmonTaskData, gos_taskDescriptor_t* pTaskData)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t fillResult = GOS_ERROR;
 8015516:	23ae      	movs	r3, #174	@ 0xae
 8015518:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSysmonTaskData != NULL) && (pTaskData != NULL))
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d051      	beq.n	80155c4 <svl_sysmonFillTaskData+0xb8>
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d04e      	beq.n	80155c4 <svl_sysmonFillTaskData+0xb8>
	{
	    pSysmonTaskData->taskId               = pTaskData->taskId;
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801552a:	b29a      	uxth	r2, r3
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
	    pSysmonTaskData->taskStackSize        = pTaskData->taskStackSize;
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015538:	b29a      	uxth	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8a3 202b 	strh.w	r2, [r3, #43]	@ 0x2b
	    pSysmonTaskData->taskStackMaxUsage    = pTaskData->taskStackSizeMaxUsage;
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015546:	b29a      	uxth	r2, r3
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	879a      	strh	r2, [r3, #60]	@ 0x3c
	    pSysmonTaskData->taskCpuUsageLimit    = pTaskData->taskCpuUsageLimit;
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8015552:	b29a      	uxth	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	86da      	strh	r2, [r3, #54]	@ 0x36
	    pSysmonTaskData->taskCpuUsage         = pTaskData->taskCpuUsage;
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801555e:	b29a      	uxth	r2, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	875a      	strh	r2, [r3, #58]	@ 0x3a
	    pSysmonTaskData->taskCpuUsageMax      = pTaskData->taskCpuUsageMax;
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801556a:	b29a      	uxth	r2, r3
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	871a      	strh	r2, [r3, #56]	@ 0x38
	    pSysmonTaskData->taskOriginalPriority = pTaskData->taskOriginalPriority;
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	79da      	ldrb	r2, [r3, #7]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	709a      	strb	r2, [r3, #2]
	    pSysmonTaskData->taskPriority         = pTaskData->taskPriority;
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	799a      	ldrb	r2, [r3, #6]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	705a      	strb	r2, [r3, #1]
	    pSysmonTaskData->taskCsCounter        = pTaskData->taskCsCounter;
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f8c3 2027 	str.w	r2, [r3, #39]	@ 0x27
	    pSysmonTaskData->taskPrivilegeLevel   = pTaskData->taskPrivilegeLevel;
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	891b      	ldrh	r3, [r3, #8]
 801558e:	b29a      	uxth	r2, r3
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f8a3 2003 	strh.w	r2, [r3, #3]
	    pSysmonTaskData->taskState            = pTaskData->taskState;
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	791a      	ldrb	r2, [r3, #4]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	701a      	strb	r2, [r3, #0]

	    (void_t) memcpy((void_t*)&(pSysmonTaskData->taskRunTime), (void_t*)&(pTaskData->taskRunTime), sizeof(pTaskData->taskRunTime));
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 80155a4:	683b      	ldr	r3, [r7, #0]
 80155a6:	334c      	adds	r3, #76	@ 0x4c
 80155a8:	2209      	movs	r2, #9
 80155aa:	4619      	mov	r1, r3
 80155ac:	f001 fb8f 	bl	8016cce <memcpy>
	    (void_t) strcpy(pSysmonTaskData->taskName, pTaskData->taskName);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	1d5a      	adds	r2, r3, #5
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	330a      	adds	r3, #10
 80155b8:	4619      	mov	r1, r3
 80155ba:	4610      	mov	r0, r2
 80155bc:	f001 fb7f 	bl	8016cbe <strcpy>

	    fillResult = GOS_SUCCESS;
 80155c0:	2355      	movs	r3, #85	@ 0x55
 80155c2:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return fillResult;
 80155c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <svl_sysmonFillTskVariableData>:
 * @return  Result of variable data filling.
 * @retval  #GOS_SUCCESS Data filled successfully.
 * @retval  #GOS_ERROR   Either of the function parameters is NULL.
 */
GOS_STATIC gos_result_t svl_sysmonFillTskVariableData (svl_sysmonTaskVariableData_t* pSysmonTaskVariableData, gos_taskDescriptor_t* pTaskData)
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b084      	sub	sp, #16
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
 80155d6:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t fillResult = GOS_ERROR;
 80155d8:	23ae      	movs	r3, #174	@ 0xae
 80155da:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSysmonTaskVariableData != NULL) && (pTaskData != NULL))
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d02e      	beq.n	8015640 <svl_sysmonFillTskVariableData+0x72>
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d02b      	beq.n	8015640 <svl_sysmonFillTskVariableData+0x72>
	{
        pSysmonTaskVariableData->taskStackMaxUsage = pTaskData->taskStackSizeMaxUsage;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f8a3 2013 	strh.w	r2, [r3, #19]
        pSysmonTaskVariableData->taskCpuUsage      = pTaskData->taskCpuUsage;
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155fc:	b29a      	uxth	r2, r3
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8a3 2011 	strh.w	r2, [r3, #17]
        pSysmonTaskVariableData->taskCpuUsageMax   = pTaskData->taskCpuUsageMax;
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801560a:	b29a      	uxth	r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8a3 200f 	strh.w	r2, [r3, #15]
        pSysmonTaskVariableData->taskPriority      = pTaskData->taskPriority;
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	799a      	ldrb	r2, [r3, #6]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	705a      	strb	r2, [r3, #1]
        pSysmonTaskVariableData->taskCsCounter     = pTaskData->taskCsCounter;
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8c3 2002 	str.w	r2, [r3, #2]
        pSysmonTaskVariableData->taskState         = pTaskData->taskState;
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	791a      	ldrb	r2, [r3, #4]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	701a      	strb	r2, [r3, #0]

        (void_t) memcpy((void_t*)&(pSysmonTaskVariableData->taskRunTime), (void_t*)&(pTaskData->taskRunTime), sizeof(pTaskData->taskRunTime));
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	1d98      	adds	r0, r3, #6
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	334c      	adds	r3, #76	@ 0x4c
 8015634:	2209      	movs	r2, #9
 8015636:	4619      	mov	r1, r3
 8015638:	f001 fb49 	bl	8016cce <memcpy>

	    fillResult = GOS_SUCCESS;
 801563c:	2355      	movs	r3, #85	@ 0x55
 801563e:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return fillResult;
 8015640:	7bfb      	ldrb	r3, [r7, #15]
}
 8015642:	4618      	mov	r0, r3
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
	...

0801564c <svl_sysmonGetLutIndex>:
 * @param[in] messageId ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC svl_sysmonMessageEnum_t svl_sysmonGetLutIndex (svl_sysmonMessageId_t messageId)
{
 801564c:	b480      	push	{r7}
 801564e:	b085      	sub	sp, #20
 8015650:	af00      	add	r7, sp, #0
 8015652:	4603      	mov	r3, r0
 8015654:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
	svl_sysmonMessageEnum_t index = 0u;
 8015656:	2300      	movs	r3, #0
 8015658:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < SVL_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 801565a:	2300      	movs	r3, #0
 801565c:	73fb      	strb	r3, [r7, #15]
 801565e:	e00a      	b.n	8015676 <svl_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 8015660:	7bfb      	ldrb	r3, [r7, #15]
 8015662:	4a0b      	ldr	r2, [pc, #44]	@ (8015690 <svl_sysmonGetLutIndex+0x44>)
 8015664:	011b      	lsls	r3, r3, #4
 8015666:	4413      	add	r3, r2
 8015668:	881b      	ldrh	r3, [r3, #0]
 801566a:	88fa      	ldrh	r2, [r7, #6]
 801566c:	429a      	cmp	r2, r3
 801566e:	d006      	beq.n	801567e <svl_sysmonGetLutIndex+0x32>
    for (index = 0u; index < SVL_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8015670:	7bfb      	ldrb	r3, [r7, #15]
 8015672:	3301      	adds	r3, #1
 8015674:	73fb      	strb	r3, [r7, #15]
 8015676:	7bfb      	ldrb	r3, [r7, #15]
 8015678:	2b0f      	cmp	r3, #15
 801567a:	d9f1      	bls.n	8015660 <svl_sysmonGetLutIndex+0x14>
 801567c:	e000      	b.n	8015680 <svl_sysmonGetLutIndex+0x34>
        {
            break;
 801567e:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 8015680:	7bfb      	ldrb	r3, [r7, #15]
}
 8015682:	4618      	mov	r0, r3
 8015684:	3714      	adds	r7, #20
 8015686:	46bd      	mov	sp, r7
 8015688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568c:	4770      	bx	lr
 801568e:	bf00      	nop
 8015690:	0801a794 	.word	0x0801a794

08015694 <svl_sysmonCheckMessage>:
 * @return  Result of message checking.
 *
 * @retval  #SVL_SYSMON_MSG_RES_OK          Message OK.
 */
GOS_STATIC svl_sysmonMessageResult_t svl_sysmonCheckMessage (void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
 801569c:	460b      	mov	r3, r1
 801569e:	70fb      	strb	r3, [r7, #3]
    /*
     * Local variables.
     */
    svl_sysmonMessageResult_t result = SVL_SYSMON_MSG_RES_OK;
 80156a0:	2328      	movs	r3, #40	@ 0x28
 80156a2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 80156a4:	78fb      	ldrb	r3, [r7, #3]
 80156a6:	4a0e      	ldr	r2, [pc, #56]	@ (80156e0 <svl_sysmonCheckMessage+0x4c>)
 80156a8:	011b      	lsls	r3, r3, #4
 80156aa:	4413      	add	r3, r2
 80156ac:	3304      	adds	r3, #4
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d00f      	beq.n	80156d4 <svl_sysmonCheckMessage+0x40>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, pBuffer, sysmonLut[lutIndex].payloadSize);
 80156b4:	78fb      	ldrb	r3, [r7, #3]
 80156b6:	4a0a      	ldr	r2, [pc, #40]	@ (80156e0 <svl_sysmonCheckMessage+0x4c>)
 80156b8:	011b      	lsls	r3, r3, #4
 80156ba:	4413      	add	r3, r2
 80156bc:	3304      	adds	r3, #4
 80156be:	6818      	ldr	r0, [r3, #0]
 80156c0:	78fb      	ldrb	r3, [r7, #3]
 80156c2:	4a07      	ldr	r2, [pc, #28]	@ (80156e0 <svl_sysmonCheckMessage+0x4c>)
 80156c4:	011b      	lsls	r3, r3, #4
 80156c6:	4413      	add	r3, r2
 80156c8:	3308      	adds	r3, #8
 80156ca:	881b      	ldrh	r3, [r3, #0]
 80156cc:	461a      	mov	r2, r3
 80156ce:	6879      	ldr	r1, [r7, #4]
 80156d0:	f001 fafd 	bl	8016cce <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 80156d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3710      	adds	r7, #16
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	0801a794 	.word	0x0801a794

080156e4 <svl_sysmonSendResponse>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonSendResponse (gos_gcpChannelNumber_t gcpChannel, svl_sysmonMessageEnum_t lutIndex)
{
 80156e4:	b590      	push	{r4, r7, lr}
 80156e6:	b085      	sub	sp, #20
 80156e8:	af02      	add	r7, sp, #8
 80156ea:	4603      	mov	r3, r0
 80156ec:	460a      	mov	r2, r1
 80156ee:	71fb      	strb	r3, [r7, #7]
 80156f0:	4613      	mov	r3, r2
 80156f2:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 80156f4:	79bb      	ldrb	r3, [r7, #6]
    		gcpChannel,                          sysmonLut[lutIndex].messageId,
 80156f6:	4a0d      	ldr	r2, [pc, #52]	@ (801572c <svl_sysmonSendResponse+0x48>)
 80156f8:	011b      	lsls	r3, r3, #4
 80156fa:	4413      	add	r3, r2
 80156fc:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 80156fe:	79bb      	ldrb	r3, [r7, #6]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 8015700:	4a0a      	ldr	r2, [pc, #40]	@ (801572c <svl_sysmonSendResponse+0x48>)
 8015702:	011b      	lsls	r3, r3, #4
 8015704:	4413      	add	r3, r2
 8015706:	3304      	adds	r3, #4
 8015708:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 801570a:	79bb      	ldrb	r3, [r7, #6]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 801570c:	4807      	ldr	r0, [pc, #28]	@ (801572c <svl_sysmonSendResponse+0x48>)
 801570e:	011b      	lsls	r3, r3, #4
 8015710:	4403      	add	r3, r0
 8015712:	3308      	adds	r3, #8
 8015714:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 8015716:	79f8      	ldrb	r0, [r7, #7]
 8015718:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801571c:	9400      	str	r4, [sp, #0]
 801571e:	f7f6 fc6d 	bl	800bffc <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 8015722:	bf00      	nop
 8015724:	370c      	adds	r7, #12
 8015726:	46bd      	mov	sp, r7
 8015728:	bd90      	pop	{r4, r7, pc}
 801572a:	bf00      	nop
 801572c:	0801a794 	.word	0x0801a794

08015730 <svl_sysmonHandlePingRequest>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandlePingRequest (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	4603      	mov	r3, r0
 8015738:	6039      	str	r1, [r7, #0]
 801573a:	71fb      	strb	r3, [r7, #7]
 801573c:	4613      	mov	r3, r2
 801573e:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    pingMessage.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 8015740:	79bb      	ldrb	r3, [r7, #6]
 8015742:	4619      	mov	r1, r3
 8015744:	6838      	ldr	r0, [r7, #0]
 8015746:	f7ff ffa5 	bl	8015694 <svl_sysmonCheckMessage>
 801574a:	4603      	mov	r3, r0
 801574c:	461a      	mov	r2, r3
 801574e:	4b07      	ldr	r3, [pc, #28]	@ (801576c <svl_sysmonHandlePingRequest+0x3c>)
 8015750:	701a      	strb	r2, [r3, #0]
    (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015752:	79bb      	ldrb	r3, [r7, #6]
 8015754:	3301      	adds	r3, #1
 8015756:	b2da      	uxtb	r2, r3
 8015758:	79fb      	ldrb	r3, [r7, #7]
 801575a:	4611      	mov	r1, r2
 801575c:	4618      	mov	r0, r3
 801575e:	f7ff ffc1 	bl	80156e4 <svl_sysmonSendResponse>
}
 8015762:	bf00      	nop
 8015764:	3708      	adds	r7, #8
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
 801576a:	bf00      	nop
 801576c:	200085b8 	.word	0x200085b8

08015770 <svl_sysmonHandleCpuUsageGet>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleCpuUsageGet (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	4603      	mov	r3, r0
 8015778:	6039      	str	r1, [r7, #0]
 801577a:	71fb      	strb	r3, [r7, #7]
 801577c:	4613      	mov	r3, r2
 801577e:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    cpuMessage.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 8015780:	79bb      	ldrb	r3, [r7, #6]
 8015782:	4619      	mov	r1, r3
 8015784:	6838      	ldr	r0, [r7, #0]
 8015786:	f7ff ff85 	bl	8015694 <svl_sysmonCheckMessage>
 801578a:	4603      	mov	r3, r0
 801578c:	461a      	mov	r2, r3
 801578e:	4b0c      	ldr	r3, [pc, #48]	@ (80157c0 <svl_sysmonHandleCpuUsageGet+0x50>)
 8015790:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == SVL_SYSMON_MSG_RES_OK)
 8015792:	4b0b      	ldr	r3, [pc, #44]	@ (80157c0 <svl_sysmonHandleCpuUsageGet+0x50>)
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	2b28      	cmp	r3, #40	@ 0x28
 8015798:	d106      	bne.n	80157a8 <svl_sysmonHandleCpuUsageGet+0x38>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 801579a:	f7f3 fc81 	bl	80090a0 <gos_kernelGetCpuUsage>
 801579e:	4603      	mov	r3, r0
 80157a0:	461a      	mov	r2, r3
 80157a2:	4b07      	ldr	r3, [pc, #28]	@ (80157c0 <svl_sysmonHandleCpuUsageGet+0x50>)
 80157a4:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 80157a8:	79bb      	ldrb	r3, [r7, #6]
 80157aa:	3301      	adds	r3, #1
 80157ac:	b2da      	uxtb	r2, r3
 80157ae:	79fb      	ldrb	r3, [r7, #7]
 80157b0:	4611      	mov	r1, r2
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7ff ff96 	bl	80156e4 <svl_sysmonSendResponse>
}
 80157b8:	bf00      	nop
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	200085bc 	.word	0x200085bc

080157c4 <svl_sysmonHandleTaskDataGet>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleTaskDataGet (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	6039      	str	r1, [r7, #0]
 80157ce:	71fb      	strb	r3, [r7, #7]
 80157d0:	4613      	mov	r3, r2
 80157d2:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 80157d4:	2300      	movs	r3, #0
 80157d6:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 80157d8:	2349      	movs	r3, #73	@ 0x49
 80157da:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 80157dc:	79bb      	ldrb	r3, [r7, #6]
 80157de:	4619      	mov	r1, r3
 80157e0:	6838      	ldr	r0, [r7, #0]
 80157e2:	f7ff ff57 	bl	8015694 <svl_sysmonCheckMessage>
 80157e6:	4603      	mov	r3, r0
 80157e8:	461a      	mov	r2, r3
 80157ea:	4b2c      	ldr	r3, [pc, #176]	@ (801589c <svl_sysmonHandleTaskDataGet+0xd8>)
 80157ec:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == SVL_SYSMON_MSG_RES_OK)
 80157ee:	4b2b      	ldr	r3, [pc, #172]	@ (801589c <svl_sysmonHandleTaskDataGet+0xd8>)
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	2b28      	cmp	r3, #40	@ 0x28
 80157f4:	d14d      	bne.n	8015892 <svl_sysmonHandleTaskDataGet+0xce>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 80157f6:	4b2a      	ldr	r3, [pc, #168]	@ (80158a0 <svl_sysmonHandleTaskDataGet+0xdc>)
 80157f8:	881b      	ldrh	r3, [r3, #0]
 80157fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80157fe:	4293      	cmp	r3, r2
 8015800:	d129      	bne.n	8015856 <svl_sysmonHandleTaskDataGet+0x92>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8015802:	2300      	movs	r3, #0
 8015804:	81fb      	strh	r3, [r7, #14]
 8015806:	e022      	b.n	801584e <svl_sysmonHandleTaskDataGet+0x8a>
            {
                if (breakLoop == GOS_TRUE)
 8015808:	7b7b      	ldrb	r3, [r7, #13]
 801580a:	2b36      	cmp	r3, #54	@ 0x36
 801580c:	d040      	beq.n	8015890 <svl_sysmonHandleTaskDataGet+0xcc>
                else
                {
                    // Nothing to do, continue.
                }

                if (gos_taskGetDataByIndex(taskIndex, &taskDesc) == GOS_SUCCESS)
 801580e:	89fb      	ldrh	r3, [r7, #14]
 8015810:	4924      	ldr	r1, [pc, #144]	@ (80158a4 <svl_sysmonHandleTaskDataGet+0xe0>)
 8015812:	4618      	mov	r0, r3
 8015814:	f7f6 f8d8 	bl	800b9c8 <gos_taskGetDataByIndex>
 8015818:	4603      	mov	r3, r0
 801581a:	2b55      	cmp	r3, #85	@ 0x55
 801581c:	d107      	bne.n	801582e <svl_sysmonHandleTaskDataGet+0x6a>
                {
                	(void_t) svl_sysmonFillTaskData(&taskDataMsg.taskData, &taskDesc);
 801581e:	4921      	ldr	r1, [pc, #132]	@ (80158a4 <svl_sysmonHandleTaskDataGet+0xe0>)
 8015820:	4821      	ldr	r0, [pc, #132]	@ (80158a8 <svl_sysmonHandleTaskDataGet+0xe4>)
 8015822:	f7ff fe73 	bl	801550c <svl_sysmonFillTaskData>
                    taskDataMsg.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015826:	4b1d      	ldr	r3, [pc, #116]	@ (801589c <svl_sysmonHandleTaskDataGet+0xd8>)
 8015828:	2228      	movs	r2, #40	@ 0x28
 801582a:	701a      	strb	r2, [r3, #0]
 801582c:	e004      	b.n	8015838 <svl_sysmonHandleTaskDataGet+0x74>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 801582e:	4b1b      	ldr	r3, [pc, #108]	@ (801589c <svl_sysmonHandleTaskDataGet+0xd8>)
 8015830:	2263      	movs	r2, #99	@ 0x63
 8015832:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8015834:	2336      	movs	r3, #54	@ 0x36
 8015836:	737b      	strb	r3, [r7, #13]
                }

                (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015838:	79bb      	ldrb	r3, [r7, #6]
 801583a:	3301      	adds	r3, #1
 801583c:	b2da      	uxtb	r2, r3
 801583e:	79fb      	ldrb	r3, [r7, #7]
 8015840:	4611      	mov	r1, r2
 8015842:	4618      	mov	r0, r3
 8015844:	f7ff ff4e 	bl	80156e4 <svl_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8015848:	89fb      	ldrh	r3, [r7, #14]
 801584a:	3301      	adds	r3, #1
 801584c:	81fb      	strh	r3, [r7, #14]
 801584e:	89fb      	ldrh	r3, [r7, #14]
 8015850:	2b0f      	cmp	r3, #15
 8015852:	d9d9      	bls.n	8015808 <svl_sysmonHandleTaskDataGet+0x44>
    }
    else
    {
        // Message error.
    }
}
 8015854:	e01d      	b.n	8015892 <svl_sysmonHandleTaskDataGet+0xce>
            if (gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc) == GOS_SUCCESS)
 8015856:	4b12      	ldr	r3, [pc, #72]	@ (80158a0 <svl_sysmonHandleTaskDataGet+0xdc>)
 8015858:	881b      	ldrh	r3, [r3, #0]
 801585a:	4912      	ldr	r1, [pc, #72]	@ (80158a4 <svl_sysmonHandleTaskDataGet+0xe0>)
 801585c:	4618      	mov	r0, r3
 801585e:	f7f6 f8b3 	bl	800b9c8 <gos_taskGetDataByIndex>
 8015862:	4603      	mov	r3, r0
 8015864:	2b55      	cmp	r3, #85	@ 0x55
 8015866:	d107      	bne.n	8015878 <svl_sysmonHandleTaskDataGet+0xb4>
                (void_t) svl_sysmonFillTaskData(&taskDataMsg.taskData, &taskDesc);
 8015868:	490e      	ldr	r1, [pc, #56]	@ (80158a4 <svl_sysmonHandleTaskDataGet+0xe0>)
 801586a:	480f      	ldr	r0, [pc, #60]	@ (80158a8 <svl_sysmonHandleTaskDataGet+0xe4>)
 801586c:	f7ff fe4e 	bl	801550c <svl_sysmonFillTaskData>
                taskDataMsg.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015870:	4b0a      	ldr	r3, [pc, #40]	@ (801589c <svl_sysmonHandleTaskDataGet+0xd8>)
 8015872:	2228      	movs	r2, #40	@ 0x28
 8015874:	701a      	strb	r2, [r3, #0]
 8015876:	e002      	b.n	801587e <svl_sysmonHandleTaskDataGet+0xba>
            	taskDataMsg.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015878:	4b08      	ldr	r3, [pc, #32]	@ (801589c <svl_sysmonHandleTaskDataGet+0xd8>)
 801587a:	2263      	movs	r2, #99	@ 0x63
 801587c:	701a      	strb	r2, [r3, #0]
            (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 801587e:	79bb      	ldrb	r3, [r7, #6]
 8015880:	3301      	adds	r3, #1
 8015882:	b2da      	uxtb	r2, r3
 8015884:	79fb      	ldrb	r3, [r7, #7]
 8015886:	4611      	mov	r1, r2
 8015888:	4618      	mov	r0, r3
 801588a:	f7ff ff2b 	bl	80156e4 <svl_sysmonSendResponse>
}
 801588e:	e000      	b.n	8015892 <svl_sysmonHandleTaskDataGet+0xce>
                    break;
 8015890:	bf00      	nop
}
 8015892:	bf00      	nop
 8015894:	3710      	adds	r7, #16
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}
 801589a:	bf00      	nop
 801589c:	200085c4 	.word	0x200085c4
 80158a0:	200085c0 	.word	0x200085c0
 80158a4:	2000861c 	.word	0x2000861c
 80158a8:	200085c5 	.word	0x200085c5

080158ac <svl_sysmonHandleTaskVariableDataGet>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleTaskVariableDataGet (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	4603      	mov	r3, r0
 80158b4:	6039      	str	r1, [r7, #0]
 80158b6:	71fb      	strb	r3, [r7, #7]
 80158b8:	4613      	mov	r3, r2
 80158ba:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 80158bc:	2300      	movs	r3, #0
 80158be:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 80158c0:	2349      	movs	r3, #73	@ 0x49
 80158c2:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 80158c4:	79bb      	ldrb	r3, [r7, #6]
 80158c6:	4619      	mov	r1, r3
 80158c8:	6838      	ldr	r0, [r7, #0]
 80158ca:	f7ff fee3 	bl	8015694 <svl_sysmonCheckMessage>
 80158ce:	4603      	mov	r3, r0
 80158d0:	461a      	mov	r2, r3
 80158d2:	4b2c      	ldr	r3, [pc, #176]	@ (8015984 <svl_sysmonHandleTaskVariableDataGet+0xd8>)
 80158d4:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == SVL_SYSMON_MSG_RES_OK)
 80158d6:	4b2b      	ldr	r3, [pc, #172]	@ (8015984 <svl_sysmonHandleTaskVariableDataGet+0xd8>)
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	2b28      	cmp	r3, #40	@ 0x28
 80158dc:	d14d      	bne.n	801597a <svl_sysmonHandleTaskVariableDataGet+0xce>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 80158de:	4b2a      	ldr	r3, [pc, #168]	@ (8015988 <svl_sysmonHandleTaskVariableDataGet+0xdc>)
 80158e0:	881b      	ldrh	r3, [r3, #0]
 80158e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d129      	bne.n	801593e <svl_sysmonHandleTaskVariableDataGet+0x92>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80158ea:	2300      	movs	r3, #0
 80158ec:	81fb      	strh	r3, [r7, #14]
 80158ee:	e022      	b.n	8015936 <svl_sysmonHandleTaskVariableDataGet+0x8a>
            {
                if (breakLoop == GOS_TRUE)
 80158f0:	7b7b      	ldrb	r3, [r7, #13]
 80158f2:	2b36      	cmp	r3, #54	@ 0x36
 80158f4:	d040      	beq.n	8015978 <svl_sysmonHandleTaskVariableDataGet+0xcc>
                else
                {
                    // Nothing to do, continue.
                }

                if (gos_taskGetDataByIndex(taskIndex, &taskDesc) == GOS_SUCCESS)
 80158f6:	89fb      	ldrh	r3, [r7, #14]
 80158f8:	4924      	ldr	r1, [pc, #144]	@ (801598c <svl_sysmonHandleTaskVariableDataGet+0xe0>)
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7f6 f864 	bl	800b9c8 <gos_taskGetDataByIndex>
 8015900:	4603      	mov	r3, r0
 8015902:	2b55      	cmp	r3, #85	@ 0x55
 8015904:	d107      	bne.n	8015916 <svl_sysmonHandleTaskVariableDataGet+0x6a>
                {
                	(void_t) svl_sysmonFillTskVariableData(&taskVariableDataMsg.taskVariableData, &taskDesc);
 8015906:	4921      	ldr	r1, [pc, #132]	@ (801598c <svl_sysmonHandleTaskVariableDataGet+0xe0>)
 8015908:	4821      	ldr	r0, [pc, #132]	@ (8015990 <svl_sysmonHandleTaskVariableDataGet+0xe4>)
 801590a:	f7ff fe60 	bl	80155ce <svl_sysmonFillTskVariableData>
                    taskVariableDataMsg.messageResult = SVL_SYSMON_MSG_RES_OK;
 801590e:	4b1d      	ldr	r3, [pc, #116]	@ (8015984 <svl_sysmonHandleTaskVariableDataGet+0xd8>)
 8015910:	2228      	movs	r2, #40	@ 0x28
 8015912:	701a      	strb	r2, [r3, #0]
 8015914:	e004      	b.n	8015920 <svl_sysmonHandleTaskVariableDataGet+0x74>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015916:	4b1b      	ldr	r3, [pc, #108]	@ (8015984 <svl_sysmonHandleTaskVariableDataGet+0xd8>)
 8015918:	2263      	movs	r2, #99	@ 0x63
 801591a:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 801591c:	2336      	movs	r3, #54	@ 0x36
 801591e:	737b      	strb	r3, [r7, #13]
                }

                (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015920:	79bb      	ldrb	r3, [r7, #6]
 8015922:	3301      	adds	r3, #1
 8015924:	b2da      	uxtb	r2, r3
 8015926:	79fb      	ldrb	r3, [r7, #7]
 8015928:	4611      	mov	r1, r2
 801592a:	4618      	mov	r0, r3
 801592c:	f7ff feda 	bl	80156e4 <svl_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8015930:	89fb      	ldrh	r3, [r7, #14]
 8015932:	3301      	adds	r3, #1
 8015934:	81fb      	strh	r3, [r7, #14]
 8015936:	89fb      	ldrh	r3, [r7, #14]
 8015938:	2b0f      	cmp	r3, #15
 801593a:	d9d9      	bls.n	80158f0 <svl_sysmonHandleTaskVariableDataGet+0x44>
    }
    else
    {
        // Message error.
    }
}
 801593c:	e01d      	b.n	801597a <svl_sysmonHandleTaskVariableDataGet+0xce>
            if (gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc) == GOS_SUCCESS)
 801593e:	4b12      	ldr	r3, [pc, #72]	@ (8015988 <svl_sysmonHandleTaskVariableDataGet+0xdc>)
 8015940:	881b      	ldrh	r3, [r3, #0]
 8015942:	4912      	ldr	r1, [pc, #72]	@ (801598c <svl_sysmonHandleTaskVariableDataGet+0xe0>)
 8015944:	4618      	mov	r0, r3
 8015946:	f7f6 f83f 	bl	800b9c8 <gos_taskGetDataByIndex>
 801594a:	4603      	mov	r3, r0
 801594c:	2b55      	cmp	r3, #85	@ 0x55
 801594e:	d107      	bne.n	8015960 <svl_sysmonHandleTaskVariableDataGet+0xb4>
                (void_t) svl_sysmonFillTskVariableData(&taskVariableDataMsg.taskVariableData, &taskDesc);
 8015950:	490e      	ldr	r1, [pc, #56]	@ (801598c <svl_sysmonHandleTaskVariableDataGet+0xe0>)
 8015952:	480f      	ldr	r0, [pc, #60]	@ (8015990 <svl_sysmonHandleTaskVariableDataGet+0xe4>)
 8015954:	f7ff fe3b 	bl	80155ce <svl_sysmonFillTskVariableData>
                taskVariableDataMsg.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015958:	4b0a      	ldr	r3, [pc, #40]	@ (8015984 <svl_sysmonHandleTaskVariableDataGet+0xd8>)
 801595a:	2228      	movs	r2, #40	@ 0x28
 801595c:	701a      	strb	r2, [r3, #0]
 801595e:	e002      	b.n	8015966 <svl_sysmonHandleTaskVariableDataGet+0xba>
            	taskVariableDataMsg.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015960:	4b08      	ldr	r3, [pc, #32]	@ (8015984 <svl_sysmonHandleTaskVariableDataGet+0xd8>)
 8015962:	2263      	movs	r2, #99	@ 0x63
 8015964:	701a      	strb	r2, [r3, #0]
            (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015966:	79bb      	ldrb	r3, [r7, #6]
 8015968:	3301      	adds	r3, #1
 801596a:	b2da      	uxtb	r2, r3
 801596c:	79fb      	ldrb	r3, [r7, #7]
 801596e:	4611      	mov	r1, r2
 8015970:	4618      	mov	r0, r3
 8015972:	f7ff feb7 	bl	80156e4 <svl_sysmonSendResponse>
}
 8015976:	e000      	b.n	801597a <svl_sysmonHandleTaskVariableDataGet+0xce>
                    break;
 8015978:	bf00      	nop
}
 801597a:	bf00      	nop
 801597c:	3710      	adds	r7, #16
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}
 8015982:	bf00      	nop
 8015984:	20008604 	.word	0x20008604
 8015988:	200085c0 	.word	0x200085c0
 801598c:	2000861c 	.word	0x2000861c
 8015990:	20008605 	.word	0x20008605

08015994 <svl_sysmonHandleTaskModification>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleTaskModification (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b082      	sub	sp, #8
 8015998:	af00      	add	r7, sp, #0
 801599a:	4603      	mov	r3, r0
 801599c:	6039      	str	r1, [r7, #0]
 801599e:	71fb      	strb	r3, [r7, #7]
 80159a0:	4613      	mov	r3, r2
 80159a2:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 80159a4:	79bb      	ldrb	r3, [r7, #6]
 80159a6:	4619      	mov	r1, r3
 80159a8:	6838      	ldr	r0, [r7, #0]
 80159aa:	f7ff fe73 	bl	8015694 <svl_sysmonCheckMessage>
 80159ae:	4603      	mov	r3, r0
 80159b0:	461a      	mov	r2, r3
 80159b2:	4b64      	ldr	r3, [pc, #400]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 80159b4:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == SVL_SYSMON_MSG_RES_OK)
 80159b6:	4b63      	ldr	r3, [pc, #396]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 80159b8:	781b      	ldrb	r3, [r3, #0]
 80159ba:	2b28      	cmp	r3, #40	@ 0x28
 80159bc:	f040 80b5 	bne.w	8015b2a <svl_sysmonHandleTaskModification+0x196>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 80159c0:	4b61      	ldr	r3, [pc, #388]	@ (8015b48 <svl_sysmonHandleTaskModification+0x1b4>)
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	4961      	ldr	r1, [pc, #388]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7f5 fffe 	bl	800b9c8 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 80159cc:	4b5e      	ldr	r3, [pc, #376]	@ (8015b48 <svl_sysmonHandleTaskModification+0x1b4>)
 80159ce:	789b      	ldrb	r3, [r3, #2]
 80159d0:	2b4a      	cmp	r3, #74	@ 0x4a
 80159d2:	f300 80a7 	bgt.w	8015b24 <svl_sysmonHandleTaskModification+0x190>
 80159d6:	2b31      	cmp	r3, #49	@ 0x31
 80159d8:	da04      	bge.n	80159e4 <svl_sysmonHandleTaskModification+0x50>
 80159da:	2b0c      	cmp	r3, #12
 80159dc:	d03e      	beq.n	8015a5c <svl_sysmonHandleTaskModification+0xc8>
 80159de:	2b22      	cmp	r3, #34	@ 0x22
 80159e0:	d04c      	beq.n	8015a7c <svl_sysmonHandleTaskModification+0xe8>
 80159e2:	e09f      	b.n	8015b24 <svl_sysmonHandleTaskModification+0x190>
 80159e4:	3b31      	subs	r3, #49	@ 0x31
 80159e6:	2b19      	cmp	r3, #25
 80159e8:	f200 809c 	bhi.w	8015b24 <svl_sysmonHandleTaskModification+0x190>
 80159ec:	a201      	add	r2, pc, #4	@ (adr r2, 80159f4 <svl_sysmonHandleTaskModification+0x60>)
 80159ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159f2:	bf00      	nop
 80159f4:	08015a9d 	.word	0x08015a9d
 80159f8:	08015b25 	.word	0x08015b25
 80159fc:	08015b25 	.word	0x08015b25
 8015a00:	08015abd 	.word	0x08015abd
 8015a04:	08015b25 	.word	0x08015b25
 8015a08:	08015b25 	.word	0x08015b25
 8015a0c:	08015b25 	.word	0x08015b25
 8015a10:	08015b25 	.word	0x08015b25
 8015a14:	08015b25 	.word	0x08015b25
 8015a18:	08015b25 	.word	0x08015b25
 8015a1c:	08015b25 	.word	0x08015b25
 8015a20:	08015b25 	.word	0x08015b25
 8015a24:	08015b25 	.word	0x08015b25
 8015a28:	08015b25 	.word	0x08015b25
 8015a2c:	08015ae5 	.word	0x08015ae5
 8015a30:	08015b25 	.word	0x08015b25
 8015a34:	08015b25 	.word	0x08015b25
 8015a38:	08015b25 	.word	0x08015b25
 8015a3c:	08015b25 	.word	0x08015b25
 8015a40:	08015b25 	.word	0x08015b25
 8015a44:	08015b25 	.word	0x08015b25
 8015a48:	08015b25 	.word	0x08015b25
 8015a4c:	08015b25 	.word	0x08015b25
 8015a50:	08015b25 	.word	0x08015b25
 8015a54:	08015b25 	.word	0x08015b25
 8015a58:	08015b05 	.word	0x08015b05
         {
             case SVL_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 8015a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 8015a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f4 fe1f 	bl	800a6a4 <gos_taskSuspend>
 8015a66:	4603      	mov	r3, r0
 8015a68:	2b55      	cmp	r3, #85	@ 0x55
 8015a6a:	d103      	bne.n	8015a74 <svl_sysmonHandleTaskModification+0xe0>
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015a6c:	4b35      	ldr	r3, [pc, #212]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015a6e:	2228      	movs	r2, #40	@ 0x28
 8015a70:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015a72:	e05a      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015a74:	4b33      	ldr	r3, [pc, #204]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015a76:	2263      	movs	r2, #99	@ 0x63
 8015a78:	701a      	strb	r2, [r3, #0]
                 break;
 8015a7a:	e056      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
             }
             case SVL_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 8015a7c:	4b33      	ldr	r3, [pc, #204]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 8015a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7f4 ff31 	bl	800a8e8 <gos_taskResume>
 8015a86:	4603      	mov	r3, r0
 8015a88:	2b55      	cmp	r3, #85	@ 0x55
 8015a8a:	d103      	bne.n	8015a94 <svl_sysmonHandleTaskModification+0x100>
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015a8e:	2228      	movs	r2, #40	@ 0x28
 8015a90:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015a92:	e04a      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015a94:	4b2b      	ldr	r3, [pc, #172]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015a96:	2263      	movs	r2, #99	@ 0x63
 8015a98:	701a      	strb	r2, [r3, #0]
                 break;
 8015a9a:	e046      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
             }
             case SVL_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 8015a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 8015a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7f5 f9cb 	bl	800ae3c <gos_taskDelete>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	2b55      	cmp	r3, #85	@ 0x55
 8015aaa:	d103      	bne.n	8015ab4 <svl_sysmonHandleTaskModification+0x120>
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015aac:	4b25      	ldr	r3, [pc, #148]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015aae:	2228      	movs	r2, #40	@ 0x28
 8015ab0:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015ab2:	e03a      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015ab4:	4b23      	ldr	r3, [pc, #140]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015ab6:	2263      	movs	r2, #99	@ 0x63
 8015ab8:	701a      	strb	r2, [r3, #0]
                 break;
 8015aba:	e036      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
             }
             case SVL_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 8015abc:	4b23      	ldr	r3, [pc, #140]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 8015abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ac0:	4a21      	ldr	r2, [pc, #132]	@ (8015b48 <svl_sysmonHandleTaskModification+0x1b4>)
 8015ac2:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8015ac6:	4611      	mov	r1, r2
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7f4 ffbb 	bl	800aa44 <gos_taskBlock>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b55      	cmp	r3, #85	@ 0x55
 8015ad2:	d103      	bne.n	8015adc <svl_sysmonHandleTaskModification+0x148>
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015ad6:	2228      	movs	r2, #40	@ 0x28
 8015ad8:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015ada:	e026      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015adc:	4b19      	ldr	r3, [pc, #100]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015ade:	2263      	movs	r2, #99	@ 0x63
 8015ae0:	701a      	strb	r2, [r3, #0]
                 break;
 8015ae2:	e022      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
             }
             case SVL_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 8015ae4:	4b19      	ldr	r3, [pc, #100]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 8015ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7f5 f8bd 	bl	800ac68 <gos_taskUnblock>
 8015aee:	4603      	mov	r3, r0
 8015af0:	2b55      	cmp	r3, #85	@ 0x55
 8015af2:	d103      	bne.n	8015afc <svl_sysmonHandleTaskModification+0x168>
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015af4:	4b13      	ldr	r3, [pc, #76]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015af6:	2228      	movs	r2, #40	@ 0x28
 8015af8:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015afa:	e016      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015afc:	4b11      	ldr	r3, [pc, #68]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015afe:	2263      	movs	r2, #99	@ 0x63
 8015b00:	701a      	strb	r2, [r3, #0]
                 break;
 8015b02:	e012      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
             }
             case SVL_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 8015b04:	4b11      	ldr	r3, [pc, #68]	@ (8015b4c <svl_sysmonHandleTaskModification+0x1b8>)
 8015b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7f4 fd05 	bl	800a518 <gos_taskWakeup>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b55      	cmp	r3, #85	@ 0x55
 8015b12:	d103      	bne.n	8015b1c <svl_sysmonHandleTaskModification+0x188>
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015b14:	4b0b      	ldr	r3, [pc, #44]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015b16:	2228      	movs	r2, #40	@ 0x28
 8015b18:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8015b1a:	e006      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
                     taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015b1c:	4b09      	ldr	r3, [pc, #36]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015b1e:	2263      	movs	r2, #99	@ 0x63
 8015b20:	701a      	strb	r2, [r3, #0]
                 break;
 8015b22:	e002      	b.n	8015b2a <svl_sysmonHandleTaskModification+0x196>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015b24:	4b07      	ldr	r3, [pc, #28]	@ (8015b44 <svl_sysmonHandleTaskModification+0x1b0>)
 8015b26:	2263      	movs	r2, #99	@ 0x63
 8015b28:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015b2a:	79bb      	ldrb	r3, [r7, #6]
 8015b2c:	3301      	adds	r3, #1
 8015b2e:	b2da      	uxtb	r2, r3
 8015b30:	79fb      	ldrb	r3, [r7, #7]
 8015b32:	4611      	mov	r1, r2
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ff fdd5 	bl	80156e4 <svl_sysmonSendResponse>
}
 8015b3a:	bf00      	nop
 8015b3c:	3708      	adds	r7, #8
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	20008690 	.word	0x20008690
 8015b48:	20008688 	.word	0x20008688
 8015b4c:	2000861c 	.word	0x2000861c

08015b50 <svl_sysmonHandleSysRuntimeGet>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleSysRuntimeGet (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	4603      	mov	r3, r0
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	71fb      	strb	r3, [r7, #7]
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 8015b60:	79bb      	ldrb	r3, [r7, #6]
 8015b62:	4619      	mov	r1, r3
 8015b64:	6838      	ldr	r0, [r7, #0]
 8015b66:	f7ff fd95 	bl	8015694 <svl_sysmonCheckMessage>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8015bac <svl_sysmonHandleSysRuntimeGet+0x5c>)
 8015b70:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == SVL_SYSMON_MSG_RES_OK)
 8015b72:	4b0e      	ldr	r3, [pc, #56]	@ (8015bac <svl_sysmonHandleSysRuntimeGet+0x5c>)
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	2b28      	cmp	r3, #40	@ 0x28
 8015b78:	d10c      	bne.n	8015b94 <svl_sysmonHandleSysRuntimeGet+0x44>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 8015b7a:	480d      	ldr	r0, [pc, #52]	@ (8015bb0 <svl_sysmonHandleSysRuntimeGet+0x60>)
 8015b7c:	f7f7 fd82 	bl	800d684 <gos_runTimeGet>
 8015b80:	4603      	mov	r3, r0
 8015b82:	2b55      	cmp	r3, #85	@ 0x55
 8015b84:	d103      	bne.n	8015b8e <svl_sysmonHandleSysRuntimeGet+0x3e>
        {
            sysRuntimeGetResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015b86:	4b09      	ldr	r3, [pc, #36]	@ (8015bac <svl_sysmonHandleSysRuntimeGet+0x5c>)
 8015b88:	2228      	movs	r2, #40	@ 0x28
 8015b8a:	701a      	strb	r2, [r3, #0]
 8015b8c:	e002      	b.n	8015b94 <svl_sysmonHandleSysRuntimeGet+0x44>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015b8e:	4b07      	ldr	r3, [pc, #28]	@ (8015bac <svl_sysmonHandleSysRuntimeGet+0x5c>)
 8015b90:	2263      	movs	r2, #99	@ 0x63
 8015b92:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015b94:	79bb      	ldrb	r3, [r7, #6]
 8015b96:	3301      	adds	r3, #1
 8015b98:	b2da      	uxtb	r2, r3
 8015b9a:	79fb      	ldrb	r3, [r7, #7]
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7ff fda0 	bl	80156e4 <svl_sysmonSendResponse>
}
 8015ba4:	bf00      	nop
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	20008694 	.word	0x20008694
 8015bb0:	20008695 	.word	0x20008695

08015bb4 <svl_sysmonHandleSystimeSet>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleSystimeSet (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	4603      	mov	r3, r0
 8015bbc:	6039      	str	r1, [r7, #0]
 8015bbe:	71fb      	strb	r3, [r7, #7]
 8015bc0:	4613      	mov	r3, r2
 8015bc2:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = svl_sysmonCheckMessage(pBuffer, lutIndex);
 8015bc4:	79bb      	ldrb	r3, [r7, #6]
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	6838      	ldr	r0, [r7, #0]
 8015bca:	f7ff fd63 	bl	8015694 <svl_sysmonCheckMessage>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	461a      	mov	r2, r3
 8015bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8015c10 <svl_sysmonHandleSystimeSet+0x5c>)
 8015bd4:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == SVL_SYSMON_MSG_RES_OK)
 8015bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8015c10 <svl_sysmonHandleSystimeSet+0x5c>)
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b28      	cmp	r3, #40	@ 0x28
 8015bdc:	d10c      	bne.n	8015bf8 <svl_sysmonHandleSystimeSet+0x44>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 8015bde:	480d      	ldr	r0, [pc, #52]	@ (8015c14 <svl_sysmonHandleSystimeSet+0x60>)
 8015be0:	f7f7 fd34 	bl	800d64c <gos_timeSet>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b55      	cmp	r3, #85	@ 0x55
 8015be8:	d103      	bne.n	8015bf2 <svl_sysmonHandleSystimeSet+0x3e>
        {
            sysTimeSetResultMessage.messageResult = SVL_SYSMON_MSG_RES_OK;
 8015bea:	4b09      	ldr	r3, [pc, #36]	@ (8015c10 <svl_sysmonHandleSystimeSet+0x5c>)
 8015bec:	2228      	movs	r2, #40	@ 0x28
 8015bee:	701a      	strb	r2, [r3, #0]
 8015bf0:	e002      	b.n	8015bf8 <svl_sysmonHandleSystimeSet+0x44>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = SVL_SYSMON_MSG_RES_ERROR;
 8015bf2:	4b07      	ldr	r3, [pc, #28]	@ (8015c10 <svl_sysmonHandleSystimeSet+0x5c>)
 8015bf4:	2263      	movs	r2, #99	@ 0x63
 8015bf6:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    (void_t) svl_sysmonSendResponse(gcpChannel, (lutIndex + 1));
 8015bf8:	79bb      	ldrb	r3, [r7, #6]
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	b2da      	uxtb	r2, r3
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	4611      	mov	r1, r2
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ff fd6e 	bl	80156e4 <svl_sysmonSendResponse>
}
 8015c08:	bf00      	nop
 8015c0a:	3708      	adds	r7, #8
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}
 8015c10:	200086ac 	.word	0x200086ac
 8015c14:	200086a0 	.word	0x200086a0

08015c18 <svl_sysmonHandleResetRequest>:
 * @param[in] lutIndex   Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonHandleResetRequest (gos_gcpChannelNumber_t gcpChannel, void_t* pBuffer, svl_sysmonMessageEnum_t lutIndex)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b082      	sub	sp, #8
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	4603      	mov	r3, r0
 8015c20:	6039      	str	r1, [r7, #0]
 8015c22:	71fb      	strb	r3, [r7, #7]
 8015c24:	4613      	mov	r3, r2
 8015c26:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (svl_sysmonCheckMessage(pBuffer, lutIndex) == SVL_SYSMON_MSG_RES_OK)
 8015c28:	79bb      	ldrb	r3, [r7, #6]
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	6838      	ldr	r0, [r7, #0]
 8015c2e:	f7ff fd31 	bl	8015694 <svl_sysmonCheckMessage>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b28      	cmp	r3, #40	@ 0x28
 8015c36:	d101      	bne.n	8015c3c <svl_sysmonHandleResetRequest+0x24>
    {
        gos_kernelReset();
 8015c38:	f7f3 fa44 	bl	80090c4 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 8015c3c:	bf00      	nop
 8015c3e:	3708      	adds	r7, #8
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}

08015c44 <svl_sysmonWiredDaemonTask>:
 *          on the wired GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonWiredDaemonTask (void_t)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b084      	sub	sp, #16
 8015c48:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    svl_sysmonMessageEnum_t lutIndex         = 0u;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	71fb      	strb	r3, [r7, #7]
    u8_t                    userMessageIndex = 0u;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	71bb      	strb	r3, [r7, #6]
    u16_t                   messageId        = 0u;
 8015c52:	2300      	movs	r3, #0
 8015c54:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8015c56:	2300      	movs	r3, #0
 8015c58:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(sysmonConfig.wiredChannelNumber, &messageId, wiredRxBuffer, SVL_SYSMON_WIRED_RX_BUFF_SIZE, 0xFFFF) == GOS_SUCCESS)
 8015c5a:	4b54      	ldr	r3, [pc, #336]	@ (8015dac <svl_sysmonWiredDaemonTask+0x168>)
 8015c5c:	7818      	ldrb	r0, [r3, #0]
 8015c5e:	1d39      	adds	r1, r7, #4
 8015c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015c64:	9300      	str	r3, [sp, #0]
 8015c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015c6a:	4a51      	ldr	r2, [pc, #324]	@ (8015db0 <svl_sysmonWiredDaemonTask+0x16c>)
 8015c6c:	f7f6 faf8 	bl	800c260 <gos_gcpReceiveMessage>
 8015c70:	4603      	mov	r3, r0
 8015c72:	2b55      	cmp	r3, #85	@ 0x55
 8015c74:	f040 8096 	bne.w	8015da4 <svl_sysmonWiredDaemonTask+0x160>
        {
    		if (gos_mutexLock(&sysmonMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015c78:	f04f 31ff 	mov.w	r1, #4294967295
 8015c7c:	484d      	ldr	r0, [pc, #308]	@ (8015db4 <svl_sysmonWiredDaemonTask+0x170>)
 8015c7e:	f7f6 fef9 	bl	800ca74 <gos_mutexLock>
 8015c82:	4603      	mov	r3, r0
 8015c84:	2b55      	cmp	r3, #85	@ 0x55
 8015c86:	d108      	bne.n	8015c9a <svl_sysmonWiredDaemonTask+0x56>
    		{
                // Get LUT index.
                lutIndex = svl_sysmonGetLutIndex(messageId);
 8015c88:	88bb      	ldrh	r3, [r7, #4]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7ff fcde 	bl	801564c <svl_sysmonGetLutIndex>
 8015c90:	4603      	mov	r3, r0
 8015c92:	71fb      	strb	r3, [r7, #7]
                (void_t) gos_mutexUnlock(&sysmonMutex);
 8015c94:	4847      	ldr	r0, [pc, #284]	@ (8015db4 <svl_sysmonWiredDaemonTask+0x170>)
 8015c96:	f7f6 fff3 	bl	800cc80 <gos_mutexUnlock>
    		{
    			// Mutex error.
    		}

            // Check user registered messages.
            if ((lutIndex == SVL_SYSMON_MSG_UNKNOWN) || (lutIndex == SVL_SYSMON_MSG_NUM_OF_MESSAGES))
 8015c9a:	79fb      	ldrb	r3, [r7, #7]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d002      	beq.n	8015ca6 <svl_sysmonWiredDaemonTask+0x62>
 8015ca0:	79fb      	ldrb	r3, [r7, #7]
 8015ca2:	2b10      	cmp	r3, #16
 8015ca4:	d14c      	bne.n	8015d40 <svl_sysmonWiredDaemonTask+0xfc>
            {
                for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	71bb      	strb	r3, [r7, #6]
 8015caa:	e045      	b.n	8015d38 <svl_sysmonWiredDaemonTask+0xf4>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 8015cac:	79bb      	ldrb	r3, [r7, #6]
 8015cae:	4a42      	ldr	r2, [pc, #264]	@ (8015db8 <svl_sysmonWiredDaemonTask+0x174>)
 8015cb0:	011b      	lsls	r3, r3, #4
 8015cb2:	4413      	add	r3, r2
 8015cb4:	881a      	ldrh	r2, [r3, #0]
 8015cb6:	88bb      	ldrh	r3, [r7, #4]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d13a      	bne.n	8015d32 <svl_sysmonWiredDaemonTask+0xee>
                    {
                    	if (gos_mutexLock(&sysmonMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8015cc0:	483c      	ldr	r0, [pc, #240]	@ (8015db4 <svl_sysmonWiredDaemonTask+0x170>)
 8015cc2:	f7f6 fed7 	bl	800ca74 <gos_mutexLock>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b55      	cmp	r3, #85	@ 0x55
 8015cca:	d132      	bne.n	8015d32 <svl_sysmonWiredDaemonTask+0xee>
                    	{
                            // If payload is not NULL, copy it.
                            if (userMessages[userMessageIndex].payload != NULL)
 8015ccc:	79bb      	ldrb	r3, [r7, #6]
 8015cce:	4a3a      	ldr	r2, [pc, #232]	@ (8015db8 <svl_sysmonWiredDaemonTask+0x174>)
 8015cd0:	011b      	lsls	r3, r3, #4
 8015cd2:	4413      	add	r3, r2
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d00f      	beq.n	8015cfc <svl_sysmonWiredDaemonTask+0xb8>
                            {
                                (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)wiredRxBuffer, userMessages[userMessageIndex].payloadSize);
 8015cdc:	79bb      	ldrb	r3, [r7, #6]
 8015cde:	4a36      	ldr	r2, [pc, #216]	@ (8015db8 <svl_sysmonWiredDaemonTask+0x174>)
 8015ce0:	011b      	lsls	r3, r3, #4
 8015ce2:	4413      	add	r3, r2
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	6818      	ldr	r0, [r3, #0]
 8015ce8:	79bb      	ldrb	r3, [r7, #6]
 8015cea:	4a33      	ldr	r2, [pc, #204]	@ (8015db8 <svl_sysmonWiredDaemonTask+0x174>)
 8015cec:	011b      	lsls	r3, r3, #4
 8015cee:	4413      	add	r3, r2
 8015cf0:	3308      	adds	r3, #8
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	461a      	mov	r2, r3
 8015cf6:	492e      	ldr	r1, [pc, #184]	@ (8015db0 <svl_sysmonWiredDaemonTask+0x16c>)
 8015cf8:	f000 ffe9 	bl	8016cce <memcpy>
                            {
                                // Message has no payload.
                            }

                            // Call callback function.
                            if (userMessages[userMessageIndex].callback != NULL)
 8015cfc:	79bb      	ldrb	r3, [r7, #6]
 8015cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8015db8 <svl_sysmonWiredDaemonTask+0x174>)
 8015d00:	011b      	lsls	r3, r3, #4
 8015d02:	4413      	add	r3, r2
 8015d04:	330c      	adds	r3, #12
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d00f      	beq.n	8015d2c <svl_sysmonWiredDaemonTask+0xe8>
                            {
#if SVL_SYSMON_TRACE_LEVEL > 0
                                (void_t) gos_traceTraceFormatted(GOS_TRUE, "[Wired] User message received with ID: 0x%04x\r\n", messageId);
 8015d0c:	88bb      	ldrh	r3, [r7, #4]
 8015d0e:	461a      	mov	r2, r3
 8015d10:	492a      	ldr	r1, [pc, #168]	@ (8015dbc <svl_sysmonWiredDaemonTask+0x178>)
 8015d12:	2036      	movs	r0, #54	@ 0x36
 8015d14:	f7f8 f924 	bl	800df60 <gos_traceTraceFormatted>
#endif
                            	userMessages[userMessageIndex].callback(sysmonConfig.wiredChannelNumber);
 8015d18:	79bb      	ldrb	r3, [r7, #6]
 8015d1a:	4a27      	ldr	r2, [pc, #156]	@ (8015db8 <svl_sysmonWiredDaemonTask+0x174>)
 8015d1c:	011b      	lsls	r3, r3, #4
 8015d1e:	4413      	add	r3, r2
 8015d20:	330c      	adds	r3, #12
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	4a21      	ldr	r2, [pc, #132]	@ (8015dac <svl_sysmonWiredDaemonTask+0x168>)
 8015d26:	7812      	ldrb	r2, [r2, #0]
 8015d28:	4610      	mov	r0, r2
 8015d2a:	4798      	blx	r3
                            else
                            {
                            	// NULL pointer.
                            }

                    		(void_t) gos_mutexUnlock(&sysmonMutex);
 8015d2c:	4821      	ldr	r0, [pc, #132]	@ (8015db4 <svl_sysmonWiredDaemonTask+0x170>)
 8015d2e:	f7f6 ffa7 	bl	800cc80 <gos_mutexUnlock>
                for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8015d32:	79bb      	ldrb	r3, [r7, #6]
 8015d34:	3301      	adds	r3, #1
 8015d36:	71bb      	strb	r3, [r7, #6]
 8015d38:	79bb      	ldrb	r3, [r7, #6]
 8015d3a:	2b17      	cmp	r3, #23
 8015d3c:	d9b6      	bls.n	8015cac <svl_sysmonWiredDaemonTask+0x68>
            if ((lutIndex == SVL_SYSMON_MSG_UNKNOWN) || (lutIndex == SVL_SYSMON_MSG_NUM_OF_MESSAGES))
 8015d3e:	e034      	b.n	8015daa <svl_sysmonWiredDaemonTask+0x166>
                    }
                }
            }
            else
            {
            	if (gos_mutexLock(&sysmonMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015d40:	f04f 31ff 	mov.w	r1, #4294967295
 8015d44:	481b      	ldr	r0, [pc, #108]	@ (8015db4 <svl_sysmonWiredDaemonTask+0x170>)
 8015d46:	f7f6 fe95 	bl	800ca74 <gos_mutexLock>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	2b55      	cmp	r3, #85	@ 0x55
 8015d4e:	d182      	bne.n	8015c56 <svl_sysmonWiredDaemonTask+0x12>
            	{
                	// Check if handler exists.
                    if (sysmonLut[lutIndex].pHandler != NULL)
 8015d50:	79fb      	ldrb	r3, [r7, #7]
 8015d52:	4a1b      	ldr	r2, [pc, #108]	@ (8015dc0 <svl_sysmonWiredDaemonTask+0x17c>)
 8015d54:	011b      	lsls	r3, r3, #4
 8015d56:	4413      	add	r3, r2
 8015d58:	330c      	adds	r3, #12
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d011      	beq.n	8015d84 <svl_sysmonWiredDaemonTask+0x140>
                    {
#if SVL_SYSMON_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "[Wired] Sysmon message received with ID: 0x%04x\r\n", messageId);
 8015d60:	88bb      	ldrh	r3, [r7, #4]
 8015d62:	461a      	mov	r2, r3
 8015d64:	4917      	ldr	r1, [pc, #92]	@ (8015dc4 <svl_sysmonWiredDaemonTask+0x180>)
 8015d66:	2036      	movs	r0, #54	@ 0x36
 8015d68:	f7f8 f8fa 	bl	800df60 <gos_traceTraceFormatted>
#endif
                    	sysmonLut[lutIndex].pHandler(sysmonConfig.wiredChannelNumber, wiredRxBuffer, lutIndex);
 8015d6c:	79fb      	ldrb	r3, [r7, #7]
 8015d6e:	4a14      	ldr	r2, [pc, #80]	@ (8015dc0 <svl_sysmonWiredDaemonTask+0x17c>)
 8015d70:	011b      	lsls	r3, r3, #4
 8015d72:	4413      	add	r3, r2
 8015d74:	330c      	adds	r3, #12
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	4a0c      	ldr	r2, [pc, #48]	@ (8015dac <svl_sysmonWiredDaemonTask+0x168>)
 8015d7a:	7810      	ldrb	r0, [r2, #0]
 8015d7c:	79fa      	ldrb	r2, [r7, #7]
 8015d7e:	490c      	ldr	r1, [pc, #48]	@ (8015db0 <svl_sysmonWiredDaemonTask+0x16c>)
 8015d80:	4798      	blx	r3
 8015d82:	e00b      	b.n	8015d9c <svl_sysmonWiredDaemonTask+0x158>
                    }
                    else
                    {
#if SVL_SYSMON_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "[Wired] Unknown message received with ID: 0x%04x\r\n", messageId);
 8015d84:	88bb      	ldrh	r3, [r7, #4]
 8015d86:	461a      	mov	r2, r3
 8015d88:	490f      	ldr	r1, [pc, #60]	@ (8015dc8 <svl_sysmonWiredDaemonTask+0x184>)
 8015d8a:	2036      	movs	r0, #54	@ 0x36
 8015d8c:	f7f8 f8e8 	bl	800df60 <gos_traceTraceFormatted>
#endif
                        (void_t) svl_sysmonSendResponse(sysmonConfig.wiredChannelNumber, SVL_SYSMON_MSG_UNKNOWN);
 8015d90:	4b06      	ldr	r3, [pc, #24]	@ (8015dac <svl_sysmonWiredDaemonTask+0x168>)
 8015d92:	781b      	ldrb	r3, [r3, #0]
 8015d94:	2100      	movs	r1, #0
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7ff fca4 	bl	80156e4 <svl_sysmonSendResponse>
                    }

            		(void_t) gos_mutexUnlock(&sysmonMutex);
 8015d9c:	4805      	ldr	r0, [pc, #20]	@ (8015db4 <svl_sysmonWiredDaemonTask+0x170>)
 8015d9e:	f7f6 ff6f 	bl	800cc80 <gos_mutexUnlock>
 8015da2:	e758      	b.n	8015c56 <svl_sysmonWiredDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(5);
 8015da4:	2005      	movs	r0, #5
 8015da6:	f7f4 fb25 	bl	800a3f4 <gos_taskSleep>
        messageId = 0u;
 8015daa:	e754      	b.n	8015c56 <svl_sysmonWiredDaemonTask+0x12>
 8015dac:	0801a630 	.word	0x0801a630
 8015db0:	20007db8 	.word	0x20007db8
 8015db4:	20007db4 	.word	0x20007db4
 8015db8:	200086b0 	.word	0x200086b0
 8015dbc:	0801a128 	.word	0x0801a128
 8015dc0:	0801a794 	.word	0x0801a794
 8015dc4:	0801a158 	.word	0x0801a158
 8015dc8:	0801a18c 	.word	0x0801a18c

08015dcc <svl_sysmonWirelessDaemonTask>:
 *          on the wireless GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_sysmonWirelessDaemonTask (void_t)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    svl_sysmonMessageEnum_t lutIndex         = 0u;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	71fb      	strb	r3, [r7, #7]
    u8_t                    userMessageIndex = 0u;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	71bb      	strb	r3, [r7, #6]
    u16_t                   messageId        = 0u;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    (void_t) gos_taskSleep(3000);
 8015dde:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8015de2:	f7f4 fb07 	bl	800a3f4 <gos_taskSleep>

    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8015de6:	2300      	movs	r3, #0
 8015de8:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(sysmonConfig.wirelessChannelNumber, &messageId, wirelessRxBuffer, SVL_SYSMON_WIRELESS_RX_BUFF_SIZE, 0xFFFFu) == GOS_SUCCESS)
 8015dea:	4b52      	ldr	r3, [pc, #328]	@ (8015f34 <svl_sysmonWirelessDaemonTask+0x168>)
 8015dec:	7b18      	ldrb	r0, [r3, #12]
 8015dee:	1d39      	adds	r1, r7, #4
 8015df0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015df4:	9300      	str	r3, [sp, #0]
 8015df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8015f38 <svl_sysmonWirelessDaemonTask+0x16c>)
 8015dfc:	f7f6 fa30 	bl	800c260 <gos_gcpReceiveMessage>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b55      	cmp	r3, #85	@ 0x55
 8015e04:	d1ef      	bne.n	8015de6 <svl_sysmonWirelessDaemonTask+0x1a>
        {
    		if (gos_mutexLock(&sysmonMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015e06:	f04f 31ff 	mov.w	r1, #4294967295
 8015e0a:	484c      	ldr	r0, [pc, #304]	@ (8015f3c <svl_sysmonWirelessDaemonTask+0x170>)
 8015e0c:	f7f6 fe32 	bl	800ca74 <gos_mutexLock>
 8015e10:	4603      	mov	r3, r0
 8015e12:	2b55      	cmp	r3, #85	@ 0x55
 8015e14:	d108      	bne.n	8015e28 <svl_sysmonWirelessDaemonTask+0x5c>
    		{
                // Get LUT index.
                lutIndex = svl_sysmonGetLutIndex(messageId);
 8015e16:	88bb      	ldrh	r3, [r7, #4]
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7ff fc17 	bl	801564c <svl_sysmonGetLutIndex>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	71fb      	strb	r3, [r7, #7]
                (void_t) gos_mutexUnlock(&sysmonMutex);
 8015e22:	4846      	ldr	r0, [pc, #280]	@ (8015f3c <svl_sysmonWirelessDaemonTask+0x170>)
 8015e24:	f7f6 ff2c 	bl	800cc80 <gos_mutexUnlock>
    		{
    			// Mutex error.
    		}

            // Check user registered messages.
            if ((lutIndex == SVL_SYSMON_MSG_UNKNOWN) || (lutIndex == SVL_SYSMON_MSG_NUM_OF_MESSAGES))
 8015e28:	79fb      	ldrb	r3, [r7, #7]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d002      	beq.n	8015e34 <svl_sysmonWirelessDaemonTask+0x68>
 8015e2e:	79fb      	ldrb	r3, [r7, #7]
 8015e30:	2b10      	cmp	r3, #16
 8015e32:	d14c      	bne.n	8015ece <svl_sysmonWirelessDaemonTask+0x102>
            {
                for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8015e34:	2300      	movs	r3, #0
 8015e36:	71bb      	strb	r3, [r7, #6]
 8015e38:	e045      	b.n	8015ec6 <svl_sysmonWirelessDaemonTask+0xfa>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 8015e3a:	79bb      	ldrb	r3, [r7, #6]
 8015e3c:	4a40      	ldr	r2, [pc, #256]	@ (8015f40 <svl_sysmonWirelessDaemonTask+0x174>)
 8015e3e:	011b      	lsls	r3, r3, #4
 8015e40:	4413      	add	r3, r2
 8015e42:	881a      	ldrh	r2, [r3, #0]
 8015e44:	88bb      	ldrh	r3, [r7, #4]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d13a      	bne.n	8015ec0 <svl_sysmonWirelessDaemonTask+0xf4>
                    {
                    	if (gos_mutexLock(&sysmonMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8015e4e:	483b      	ldr	r0, [pc, #236]	@ (8015f3c <svl_sysmonWirelessDaemonTask+0x170>)
 8015e50:	f7f6 fe10 	bl	800ca74 <gos_mutexLock>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b55      	cmp	r3, #85	@ 0x55
 8015e58:	d132      	bne.n	8015ec0 <svl_sysmonWirelessDaemonTask+0xf4>
                    	{
                            // If payload is not NULL, copy it.
                            if (userMessages[userMessageIndex].payload != NULL)
 8015e5a:	79bb      	ldrb	r3, [r7, #6]
 8015e5c:	4a38      	ldr	r2, [pc, #224]	@ (8015f40 <svl_sysmonWirelessDaemonTask+0x174>)
 8015e5e:	011b      	lsls	r3, r3, #4
 8015e60:	4413      	add	r3, r2
 8015e62:	3304      	adds	r3, #4
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d00f      	beq.n	8015e8a <svl_sysmonWirelessDaemonTask+0xbe>
                            {
                                (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)wirelessRxBuffer, userMessages[userMessageIndex].payloadSize);
 8015e6a:	79bb      	ldrb	r3, [r7, #6]
 8015e6c:	4a34      	ldr	r2, [pc, #208]	@ (8015f40 <svl_sysmonWirelessDaemonTask+0x174>)
 8015e6e:	011b      	lsls	r3, r3, #4
 8015e70:	4413      	add	r3, r2
 8015e72:	3304      	adds	r3, #4
 8015e74:	6818      	ldr	r0, [r3, #0]
 8015e76:	79bb      	ldrb	r3, [r7, #6]
 8015e78:	4a31      	ldr	r2, [pc, #196]	@ (8015f40 <svl_sysmonWirelessDaemonTask+0x174>)
 8015e7a:	011b      	lsls	r3, r3, #4
 8015e7c:	4413      	add	r3, r2
 8015e7e:	3308      	adds	r3, #8
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	461a      	mov	r2, r3
 8015e84:	492c      	ldr	r1, [pc, #176]	@ (8015f38 <svl_sysmonWirelessDaemonTask+0x16c>)
 8015e86:	f000 ff22 	bl	8016cce <memcpy>
                            {
                                // Message has no payload.
                            }

                            // Call callback function.
                            if (userMessages[userMessageIndex].callback != NULL)
 8015e8a:	79bb      	ldrb	r3, [r7, #6]
 8015e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8015f40 <svl_sysmonWirelessDaemonTask+0x174>)
 8015e8e:	011b      	lsls	r3, r3, #4
 8015e90:	4413      	add	r3, r2
 8015e92:	330c      	adds	r3, #12
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00f      	beq.n	8015eba <svl_sysmonWirelessDaemonTask+0xee>
                            {
#if SVL_SYSMON_TRACE_LEVEL > 0
                                (void_t) gos_traceTraceFormatted(GOS_TRUE, "[Wireless] User message received with ID: 0x%04x\r\n", messageId);
 8015e9a:	88bb      	ldrh	r3, [r7, #4]
 8015e9c:	461a      	mov	r2, r3
 8015e9e:	4929      	ldr	r1, [pc, #164]	@ (8015f44 <svl_sysmonWirelessDaemonTask+0x178>)
 8015ea0:	2036      	movs	r0, #54	@ 0x36
 8015ea2:	f7f8 f85d 	bl	800df60 <gos_traceTraceFormatted>
#endif
                            	userMessages[userMessageIndex].callback(sysmonConfig.wirelessChannelNumber);
 8015ea6:	79bb      	ldrb	r3, [r7, #6]
 8015ea8:	4a25      	ldr	r2, [pc, #148]	@ (8015f40 <svl_sysmonWirelessDaemonTask+0x174>)
 8015eaa:	011b      	lsls	r3, r3, #4
 8015eac:	4413      	add	r3, r2
 8015eae:	330c      	adds	r3, #12
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	4a20      	ldr	r2, [pc, #128]	@ (8015f34 <svl_sysmonWirelessDaemonTask+0x168>)
 8015eb4:	7b12      	ldrb	r2, [r2, #12]
 8015eb6:	4610      	mov	r0, r2
 8015eb8:	4798      	blx	r3
                            else
                            {
                            	// NULL pointer.
                            }

                    		(void_t) gos_mutexUnlock(&sysmonMutex);
 8015eba:	4820      	ldr	r0, [pc, #128]	@ (8015f3c <svl_sysmonWirelessDaemonTask+0x170>)
 8015ebc:	f7f6 fee0 	bl	800cc80 <gos_mutexUnlock>
                for (userMessageIndex = 0u; userMessageIndex < SVL_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8015ec0:	79bb      	ldrb	r3, [r7, #6]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	71bb      	strb	r3, [r7, #6]
 8015ec6:	79bb      	ldrb	r3, [r7, #6]
 8015ec8:	2b17      	cmp	r3, #23
 8015eca:	d9b6      	bls.n	8015e3a <svl_sysmonWirelessDaemonTask+0x6e>
            if ((lutIndex == SVL_SYSMON_MSG_UNKNOWN) || (lutIndex == SVL_SYSMON_MSG_NUM_OF_MESSAGES))
 8015ecc:	e030      	b.n	8015f30 <svl_sysmonWirelessDaemonTask+0x164>
                    }
                }
            }
            else
            {
            	if (gos_mutexLock(&sysmonMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8015ece:	f04f 31ff 	mov.w	r1, #4294967295
 8015ed2:	481a      	ldr	r0, [pc, #104]	@ (8015f3c <svl_sysmonWirelessDaemonTask+0x170>)
 8015ed4:	f7f6 fdce 	bl	800ca74 <gos_mutexLock>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	2b55      	cmp	r3, #85	@ 0x55
 8015edc:	d183      	bne.n	8015de6 <svl_sysmonWirelessDaemonTask+0x1a>
            	{
                	// Check if handler exists.
                    if (sysmonLut[lutIndex].pHandler != NULL)
 8015ede:	79fb      	ldrb	r3, [r7, #7]
 8015ee0:	4a19      	ldr	r2, [pc, #100]	@ (8015f48 <svl_sysmonWirelessDaemonTask+0x17c>)
 8015ee2:	011b      	lsls	r3, r3, #4
 8015ee4:	4413      	add	r3, r2
 8015ee6:	330c      	adds	r3, #12
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d011      	beq.n	8015f12 <svl_sysmonWirelessDaemonTask+0x146>
                    {
#if SVL_SYSMON_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "[Wireless] Sysmon message received with ID: 0x%04x\r\n", messageId);
 8015eee:	88bb      	ldrh	r3, [r7, #4]
 8015ef0:	461a      	mov	r2, r3
 8015ef2:	4916      	ldr	r1, [pc, #88]	@ (8015f4c <svl_sysmonWirelessDaemonTask+0x180>)
 8015ef4:	2036      	movs	r0, #54	@ 0x36
 8015ef6:	f7f8 f833 	bl	800df60 <gos_traceTraceFormatted>
#endif
                    	sysmonLut[lutIndex].pHandler(sysmonConfig.wirelessChannelNumber, wirelessRxBuffer, lutIndex);
 8015efa:	79fb      	ldrb	r3, [r7, #7]
 8015efc:	4a12      	ldr	r2, [pc, #72]	@ (8015f48 <svl_sysmonWirelessDaemonTask+0x17c>)
 8015efe:	011b      	lsls	r3, r3, #4
 8015f00:	4413      	add	r3, r2
 8015f02:	330c      	adds	r3, #12
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4a0b      	ldr	r2, [pc, #44]	@ (8015f34 <svl_sysmonWirelessDaemonTask+0x168>)
 8015f08:	7b10      	ldrb	r0, [r2, #12]
 8015f0a:	79fa      	ldrb	r2, [r7, #7]
 8015f0c:	490a      	ldr	r1, [pc, #40]	@ (8015f38 <svl_sysmonWirelessDaemonTask+0x16c>)
 8015f0e:	4798      	blx	r3
 8015f10:	e00b      	b.n	8015f2a <svl_sysmonWirelessDaemonTask+0x15e>
                    }
                    else
                    {
#if SVL_SYSMON_TRACE_LEVEL > 0
                        (void_t) gos_traceTraceFormatted(GOS_TRUE, "[Wireless] Unknown message received with ID: 0x%04x\r\n", messageId);
 8015f12:	88bb      	ldrh	r3, [r7, #4]
 8015f14:	461a      	mov	r2, r3
 8015f16:	490e      	ldr	r1, [pc, #56]	@ (8015f50 <svl_sysmonWirelessDaemonTask+0x184>)
 8015f18:	2036      	movs	r0, #54	@ 0x36
 8015f1a:	f7f8 f821 	bl	800df60 <gos_traceTraceFormatted>
#endif
                        (void_t) svl_sysmonSendResponse(sysmonConfig.wirelessChannelNumber, SVL_SYSMON_MSG_UNKNOWN);
 8015f1e:	4b05      	ldr	r3, [pc, #20]	@ (8015f34 <svl_sysmonWirelessDaemonTask+0x168>)
 8015f20:	7b1b      	ldrb	r3, [r3, #12]
 8015f22:	2100      	movs	r1, #0
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7ff fbdd 	bl	80156e4 <svl_sysmonSendResponse>
                    }

            		(void_t) gos_mutexUnlock(&sysmonMutex);
 8015f2a:	4804      	ldr	r0, [pc, #16]	@ (8015f3c <svl_sysmonWirelessDaemonTask+0x170>)
 8015f2c:	f7f6 fea8 	bl	800cc80 <gos_mutexUnlock>
        messageId = 0u;
 8015f30:	e759      	b.n	8015de6 <svl_sysmonWirelessDaemonTask+0x1a>
 8015f32:	bf00      	nop
 8015f34:	0801a630 	.word	0x0801a630
 8015f38:	200081b8 	.word	0x200081b8
 8015f3c:	20007db4 	.word	0x20007db4
 8015f40:	200086b0 	.word	0x200086b0
 8015f44:	0801a1c0 	.word	0x0801a1c0
 8015f48:	0801a794 	.word	0x0801a794
 8015f4c:	0801a1f4 	.word	0x0801a1f4
 8015f50:	0801a22c 	.word	0x0801a22c

08015f54 <atoi>:
 8015f54:	220a      	movs	r2, #10
 8015f56:	2100      	movs	r1, #0
 8015f58:	f000 b87a 	b.w	8016050 <strtol>

08015f5c <_strtol_l.constprop.0>:
 8015f5c:	2b24      	cmp	r3, #36	@ 0x24
 8015f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f62:	4686      	mov	lr, r0
 8015f64:	4690      	mov	r8, r2
 8015f66:	d801      	bhi.n	8015f6c <_strtol_l.constprop.0+0x10>
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d106      	bne.n	8015f7a <_strtol_l.constprop.0+0x1e>
 8015f6c:	f000 fe7a 	bl	8016c64 <__errno>
 8015f70:	2316      	movs	r3, #22
 8015f72:	6003      	str	r3, [r0, #0]
 8015f74:	2000      	movs	r0, #0
 8015f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f7a:	4834      	ldr	r0, [pc, #208]	@ (801604c <_strtol_l.constprop.0+0xf0>)
 8015f7c:	460d      	mov	r5, r1
 8015f7e:	462a      	mov	r2, r5
 8015f80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f84:	5d06      	ldrb	r6, [r0, r4]
 8015f86:	f016 0608 	ands.w	r6, r6, #8
 8015f8a:	d1f8      	bne.n	8015f7e <_strtol_l.constprop.0+0x22>
 8015f8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8015f8e:	d12d      	bne.n	8015fec <_strtol_l.constprop.0+0x90>
 8015f90:	782c      	ldrb	r4, [r5, #0]
 8015f92:	2601      	movs	r6, #1
 8015f94:	1c95      	adds	r5, r2, #2
 8015f96:	f033 0210 	bics.w	r2, r3, #16
 8015f9a:	d109      	bne.n	8015fb0 <_strtol_l.constprop.0+0x54>
 8015f9c:	2c30      	cmp	r4, #48	@ 0x30
 8015f9e:	d12a      	bne.n	8015ff6 <_strtol_l.constprop.0+0x9a>
 8015fa0:	782a      	ldrb	r2, [r5, #0]
 8015fa2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015fa6:	2a58      	cmp	r2, #88	@ 0x58
 8015fa8:	d125      	bne.n	8015ff6 <_strtol_l.constprop.0+0x9a>
 8015faa:	786c      	ldrb	r4, [r5, #1]
 8015fac:	2310      	movs	r3, #16
 8015fae:	3502      	adds	r5, #2
 8015fb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015fb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015fb8:	2200      	movs	r2, #0
 8015fba:	fbbc f9f3 	udiv	r9, ip, r3
 8015fbe:	4610      	mov	r0, r2
 8015fc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8015fc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015fc8:	2f09      	cmp	r7, #9
 8015fca:	d81b      	bhi.n	8016004 <_strtol_l.constprop.0+0xa8>
 8015fcc:	463c      	mov	r4, r7
 8015fce:	42a3      	cmp	r3, r4
 8015fd0:	dd27      	ble.n	8016022 <_strtol_l.constprop.0+0xc6>
 8015fd2:	1c57      	adds	r7, r2, #1
 8015fd4:	d007      	beq.n	8015fe6 <_strtol_l.constprop.0+0x8a>
 8015fd6:	4581      	cmp	r9, r0
 8015fd8:	d320      	bcc.n	801601c <_strtol_l.constprop.0+0xc0>
 8015fda:	d101      	bne.n	8015fe0 <_strtol_l.constprop.0+0x84>
 8015fdc:	45a2      	cmp	sl, r4
 8015fde:	db1d      	blt.n	801601c <_strtol_l.constprop.0+0xc0>
 8015fe0:	fb00 4003 	mla	r0, r0, r3, r4
 8015fe4:	2201      	movs	r2, #1
 8015fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fea:	e7eb      	b.n	8015fc4 <_strtol_l.constprop.0+0x68>
 8015fec:	2c2b      	cmp	r4, #43	@ 0x2b
 8015fee:	bf04      	itt	eq
 8015ff0:	782c      	ldrbeq	r4, [r5, #0]
 8015ff2:	1c95      	addeq	r5, r2, #2
 8015ff4:	e7cf      	b.n	8015f96 <_strtol_l.constprop.0+0x3a>
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d1da      	bne.n	8015fb0 <_strtol_l.constprop.0+0x54>
 8015ffa:	2c30      	cmp	r4, #48	@ 0x30
 8015ffc:	bf0c      	ite	eq
 8015ffe:	2308      	moveq	r3, #8
 8016000:	230a      	movne	r3, #10
 8016002:	e7d5      	b.n	8015fb0 <_strtol_l.constprop.0+0x54>
 8016004:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016008:	2f19      	cmp	r7, #25
 801600a:	d801      	bhi.n	8016010 <_strtol_l.constprop.0+0xb4>
 801600c:	3c37      	subs	r4, #55	@ 0x37
 801600e:	e7de      	b.n	8015fce <_strtol_l.constprop.0+0x72>
 8016010:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016014:	2f19      	cmp	r7, #25
 8016016:	d804      	bhi.n	8016022 <_strtol_l.constprop.0+0xc6>
 8016018:	3c57      	subs	r4, #87	@ 0x57
 801601a:	e7d8      	b.n	8015fce <_strtol_l.constprop.0+0x72>
 801601c:	f04f 32ff 	mov.w	r2, #4294967295
 8016020:	e7e1      	b.n	8015fe6 <_strtol_l.constprop.0+0x8a>
 8016022:	1c53      	adds	r3, r2, #1
 8016024:	d108      	bne.n	8016038 <_strtol_l.constprop.0+0xdc>
 8016026:	2322      	movs	r3, #34	@ 0x22
 8016028:	f8ce 3000 	str.w	r3, [lr]
 801602c:	4660      	mov	r0, ip
 801602e:	f1b8 0f00 	cmp.w	r8, #0
 8016032:	d0a0      	beq.n	8015f76 <_strtol_l.constprop.0+0x1a>
 8016034:	1e69      	subs	r1, r5, #1
 8016036:	e006      	b.n	8016046 <_strtol_l.constprop.0+0xea>
 8016038:	b106      	cbz	r6, 801603c <_strtol_l.constprop.0+0xe0>
 801603a:	4240      	negs	r0, r0
 801603c:	f1b8 0f00 	cmp.w	r8, #0
 8016040:	d099      	beq.n	8015f76 <_strtol_l.constprop.0+0x1a>
 8016042:	2a00      	cmp	r2, #0
 8016044:	d1f6      	bne.n	8016034 <_strtol_l.constprop.0+0xd8>
 8016046:	f8c8 1000 	str.w	r1, [r8]
 801604a:	e794      	b.n	8015f76 <_strtol_l.constprop.0+0x1a>
 801604c:	0801a895 	.word	0x0801a895

08016050 <strtol>:
 8016050:	4613      	mov	r3, r2
 8016052:	460a      	mov	r2, r1
 8016054:	4601      	mov	r1, r0
 8016056:	4802      	ldr	r0, [pc, #8]	@ (8016060 <strtol+0x10>)
 8016058:	6800      	ldr	r0, [r0, #0]
 801605a:	f7ff bf7f 	b.w	8015f5c <_strtol_l.constprop.0>
 801605e:	bf00      	nop
 8016060:	20001234 	.word	0x20001234

08016064 <__cvt>:
 8016064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016068:	ec57 6b10 	vmov	r6, r7, d0
 801606c:	2f00      	cmp	r7, #0
 801606e:	460c      	mov	r4, r1
 8016070:	4619      	mov	r1, r3
 8016072:	463b      	mov	r3, r7
 8016074:	bfbb      	ittet	lt
 8016076:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801607a:	461f      	movlt	r7, r3
 801607c:	2300      	movge	r3, #0
 801607e:	232d      	movlt	r3, #45	@ 0x2d
 8016080:	700b      	strb	r3, [r1, #0]
 8016082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016084:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016088:	4691      	mov	r9, r2
 801608a:	f023 0820 	bic.w	r8, r3, #32
 801608e:	bfbc      	itt	lt
 8016090:	4632      	movlt	r2, r6
 8016092:	4616      	movlt	r6, r2
 8016094:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016098:	d005      	beq.n	80160a6 <__cvt+0x42>
 801609a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801609e:	d100      	bne.n	80160a2 <__cvt+0x3e>
 80160a0:	3401      	adds	r4, #1
 80160a2:	2102      	movs	r1, #2
 80160a4:	e000      	b.n	80160a8 <__cvt+0x44>
 80160a6:	2103      	movs	r1, #3
 80160a8:	ab03      	add	r3, sp, #12
 80160aa:	9301      	str	r3, [sp, #4]
 80160ac:	ab02      	add	r3, sp, #8
 80160ae:	9300      	str	r3, [sp, #0]
 80160b0:	ec47 6b10 	vmov	d0, r6, r7
 80160b4:	4653      	mov	r3, sl
 80160b6:	4622      	mov	r2, r4
 80160b8:	f000 fea2 	bl	8016e00 <_dtoa_r>
 80160bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80160c0:	4605      	mov	r5, r0
 80160c2:	d119      	bne.n	80160f8 <__cvt+0x94>
 80160c4:	f019 0f01 	tst.w	r9, #1
 80160c8:	d00e      	beq.n	80160e8 <__cvt+0x84>
 80160ca:	eb00 0904 	add.w	r9, r0, r4
 80160ce:	2200      	movs	r2, #0
 80160d0:	2300      	movs	r3, #0
 80160d2:	4630      	mov	r0, r6
 80160d4:	4639      	mov	r1, r7
 80160d6:	f7ea fd17 	bl	8000b08 <__aeabi_dcmpeq>
 80160da:	b108      	cbz	r0, 80160e0 <__cvt+0x7c>
 80160dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80160e0:	2230      	movs	r2, #48	@ 0x30
 80160e2:	9b03      	ldr	r3, [sp, #12]
 80160e4:	454b      	cmp	r3, r9
 80160e6:	d31e      	bcc.n	8016126 <__cvt+0xc2>
 80160e8:	9b03      	ldr	r3, [sp, #12]
 80160ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80160ec:	1b5b      	subs	r3, r3, r5
 80160ee:	4628      	mov	r0, r5
 80160f0:	6013      	str	r3, [r2, #0]
 80160f2:	b004      	add	sp, #16
 80160f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80160fc:	eb00 0904 	add.w	r9, r0, r4
 8016100:	d1e5      	bne.n	80160ce <__cvt+0x6a>
 8016102:	7803      	ldrb	r3, [r0, #0]
 8016104:	2b30      	cmp	r3, #48	@ 0x30
 8016106:	d10a      	bne.n	801611e <__cvt+0xba>
 8016108:	2200      	movs	r2, #0
 801610a:	2300      	movs	r3, #0
 801610c:	4630      	mov	r0, r6
 801610e:	4639      	mov	r1, r7
 8016110:	f7ea fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 8016114:	b918      	cbnz	r0, 801611e <__cvt+0xba>
 8016116:	f1c4 0401 	rsb	r4, r4, #1
 801611a:	f8ca 4000 	str.w	r4, [sl]
 801611e:	f8da 3000 	ldr.w	r3, [sl]
 8016122:	4499      	add	r9, r3
 8016124:	e7d3      	b.n	80160ce <__cvt+0x6a>
 8016126:	1c59      	adds	r1, r3, #1
 8016128:	9103      	str	r1, [sp, #12]
 801612a:	701a      	strb	r2, [r3, #0]
 801612c:	e7d9      	b.n	80160e2 <__cvt+0x7e>

0801612e <__exponent>:
 801612e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016130:	2900      	cmp	r1, #0
 8016132:	bfba      	itte	lt
 8016134:	4249      	neglt	r1, r1
 8016136:	232d      	movlt	r3, #45	@ 0x2d
 8016138:	232b      	movge	r3, #43	@ 0x2b
 801613a:	2909      	cmp	r1, #9
 801613c:	7002      	strb	r2, [r0, #0]
 801613e:	7043      	strb	r3, [r0, #1]
 8016140:	dd29      	ble.n	8016196 <__exponent+0x68>
 8016142:	f10d 0307 	add.w	r3, sp, #7
 8016146:	461d      	mov	r5, r3
 8016148:	270a      	movs	r7, #10
 801614a:	461a      	mov	r2, r3
 801614c:	fbb1 f6f7 	udiv	r6, r1, r7
 8016150:	fb07 1416 	mls	r4, r7, r6, r1
 8016154:	3430      	adds	r4, #48	@ 0x30
 8016156:	f802 4c01 	strb.w	r4, [r2, #-1]
 801615a:	460c      	mov	r4, r1
 801615c:	2c63      	cmp	r4, #99	@ 0x63
 801615e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016162:	4631      	mov	r1, r6
 8016164:	dcf1      	bgt.n	801614a <__exponent+0x1c>
 8016166:	3130      	adds	r1, #48	@ 0x30
 8016168:	1e94      	subs	r4, r2, #2
 801616a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801616e:	1c41      	adds	r1, r0, #1
 8016170:	4623      	mov	r3, r4
 8016172:	42ab      	cmp	r3, r5
 8016174:	d30a      	bcc.n	801618c <__exponent+0x5e>
 8016176:	f10d 0309 	add.w	r3, sp, #9
 801617a:	1a9b      	subs	r3, r3, r2
 801617c:	42ac      	cmp	r4, r5
 801617e:	bf88      	it	hi
 8016180:	2300      	movhi	r3, #0
 8016182:	3302      	adds	r3, #2
 8016184:	4403      	add	r3, r0
 8016186:	1a18      	subs	r0, r3, r0
 8016188:	b003      	add	sp, #12
 801618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801618c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016190:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016194:	e7ed      	b.n	8016172 <__exponent+0x44>
 8016196:	2330      	movs	r3, #48	@ 0x30
 8016198:	3130      	adds	r1, #48	@ 0x30
 801619a:	7083      	strb	r3, [r0, #2]
 801619c:	70c1      	strb	r1, [r0, #3]
 801619e:	1d03      	adds	r3, r0, #4
 80161a0:	e7f1      	b.n	8016186 <__exponent+0x58>
	...

080161a4 <_printf_float>:
 80161a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a8:	b08d      	sub	sp, #52	@ 0x34
 80161aa:	460c      	mov	r4, r1
 80161ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80161b0:	4616      	mov	r6, r2
 80161b2:	461f      	mov	r7, r3
 80161b4:	4605      	mov	r5, r0
 80161b6:	f000 fd0b 	bl	8016bd0 <_localeconv_r>
 80161ba:	6803      	ldr	r3, [r0, #0]
 80161bc:	9304      	str	r3, [sp, #16]
 80161be:	4618      	mov	r0, r3
 80161c0:	f7ea f876 	bl	80002b0 <strlen>
 80161c4:	2300      	movs	r3, #0
 80161c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80161c8:	f8d8 3000 	ldr.w	r3, [r8]
 80161cc:	9005      	str	r0, [sp, #20]
 80161ce:	3307      	adds	r3, #7
 80161d0:	f023 0307 	bic.w	r3, r3, #7
 80161d4:	f103 0208 	add.w	r2, r3, #8
 80161d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80161dc:	f8d4 b000 	ldr.w	fp, [r4]
 80161e0:	f8c8 2000 	str.w	r2, [r8]
 80161e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80161e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80161ec:	9307      	str	r3, [sp, #28]
 80161ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80161f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80161f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161fa:	4b9c      	ldr	r3, [pc, #624]	@ (801646c <_printf_float+0x2c8>)
 80161fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016200:	f7ea fcb4 	bl	8000b6c <__aeabi_dcmpun>
 8016204:	bb70      	cbnz	r0, 8016264 <_printf_float+0xc0>
 8016206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801620a:	4b98      	ldr	r3, [pc, #608]	@ (801646c <_printf_float+0x2c8>)
 801620c:	f04f 32ff 	mov.w	r2, #4294967295
 8016210:	f7ea fc8e 	bl	8000b30 <__aeabi_dcmple>
 8016214:	bb30      	cbnz	r0, 8016264 <_printf_float+0xc0>
 8016216:	2200      	movs	r2, #0
 8016218:	2300      	movs	r3, #0
 801621a:	4640      	mov	r0, r8
 801621c:	4649      	mov	r1, r9
 801621e:	f7ea fc7d 	bl	8000b1c <__aeabi_dcmplt>
 8016222:	b110      	cbz	r0, 801622a <_printf_float+0x86>
 8016224:	232d      	movs	r3, #45	@ 0x2d
 8016226:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801622a:	4a91      	ldr	r2, [pc, #580]	@ (8016470 <_printf_float+0x2cc>)
 801622c:	4b91      	ldr	r3, [pc, #580]	@ (8016474 <_printf_float+0x2d0>)
 801622e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016232:	bf94      	ite	ls
 8016234:	4690      	movls	r8, r2
 8016236:	4698      	movhi	r8, r3
 8016238:	2303      	movs	r3, #3
 801623a:	6123      	str	r3, [r4, #16]
 801623c:	f02b 0304 	bic.w	r3, fp, #4
 8016240:	6023      	str	r3, [r4, #0]
 8016242:	f04f 0900 	mov.w	r9, #0
 8016246:	9700      	str	r7, [sp, #0]
 8016248:	4633      	mov	r3, r6
 801624a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801624c:	4621      	mov	r1, r4
 801624e:	4628      	mov	r0, r5
 8016250:	f000 f9d2 	bl	80165f8 <_printf_common>
 8016254:	3001      	adds	r0, #1
 8016256:	f040 808d 	bne.w	8016374 <_printf_float+0x1d0>
 801625a:	f04f 30ff 	mov.w	r0, #4294967295
 801625e:	b00d      	add	sp, #52	@ 0x34
 8016260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016264:	4642      	mov	r2, r8
 8016266:	464b      	mov	r3, r9
 8016268:	4640      	mov	r0, r8
 801626a:	4649      	mov	r1, r9
 801626c:	f7ea fc7e 	bl	8000b6c <__aeabi_dcmpun>
 8016270:	b140      	cbz	r0, 8016284 <_printf_float+0xe0>
 8016272:	464b      	mov	r3, r9
 8016274:	2b00      	cmp	r3, #0
 8016276:	bfbc      	itt	lt
 8016278:	232d      	movlt	r3, #45	@ 0x2d
 801627a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801627e:	4a7e      	ldr	r2, [pc, #504]	@ (8016478 <_printf_float+0x2d4>)
 8016280:	4b7e      	ldr	r3, [pc, #504]	@ (801647c <_printf_float+0x2d8>)
 8016282:	e7d4      	b.n	801622e <_printf_float+0x8a>
 8016284:	6863      	ldr	r3, [r4, #4]
 8016286:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801628a:	9206      	str	r2, [sp, #24]
 801628c:	1c5a      	adds	r2, r3, #1
 801628e:	d13b      	bne.n	8016308 <_printf_float+0x164>
 8016290:	2306      	movs	r3, #6
 8016292:	6063      	str	r3, [r4, #4]
 8016294:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016298:	2300      	movs	r3, #0
 801629a:	6022      	str	r2, [r4, #0]
 801629c:	9303      	str	r3, [sp, #12]
 801629e:	ab0a      	add	r3, sp, #40	@ 0x28
 80162a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80162a4:	ab09      	add	r3, sp, #36	@ 0x24
 80162a6:	9300      	str	r3, [sp, #0]
 80162a8:	6861      	ldr	r1, [r4, #4]
 80162aa:	ec49 8b10 	vmov	d0, r8, r9
 80162ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80162b2:	4628      	mov	r0, r5
 80162b4:	f7ff fed6 	bl	8016064 <__cvt>
 80162b8:	9b06      	ldr	r3, [sp, #24]
 80162ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80162bc:	2b47      	cmp	r3, #71	@ 0x47
 80162be:	4680      	mov	r8, r0
 80162c0:	d129      	bne.n	8016316 <_printf_float+0x172>
 80162c2:	1cc8      	adds	r0, r1, #3
 80162c4:	db02      	blt.n	80162cc <_printf_float+0x128>
 80162c6:	6863      	ldr	r3, [r4, #4]
 80162c8:	4299      	cmp	r1, r3
 80162ca:	dd41      	ble.n	8016350 <_printf_float+0x1ac>
 80162cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80162d0:	fa5f fa8a 	uxtb.w	sl, sl
 80162d4:	3901      	subs	r1, #1
 80162d6:	4652      	mov	r2, sl
 80162d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80162dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80162de:	f7ff ff26 	bl	801612e <__exponent>
 80162e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80162e4:	1813      	adds	r3, r2, r0
 80162e6:	2a01      	cmp	r2, #1
 80162e8:	4681      	mov	r9, r0
 80162ea:	6123      	str	r3, [r4, #16]
 80162ec:	dc02      	bgt.n	80162f4 <_printf_float+0x150>
 80162ee:	6822      	ldr	r2, [r4, #0]
 80162f0:	07d2      	lsls	r2, r2, #31
 80162f2:	d501      	bpl.n	80162f8 <_printf_float+0x154>
 80162f4:	3301      	adds	r3, #1
 80162f6:	6123      	str	r3, [r4, #16]
 80162f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d0a2      	beq.n	8016246 <_printf_float+0xa2>
 8016300:	232d      	movs	r3, #45	@ 0x2d
 8016302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016306:	e79e      	b.n	8016246 <_printf_float+0xa2>
 8016308:	9a06      	ldr	r2, [sp, #24]
 801630a:	2a47      	cmp	r2, #71	@ 0x47
 801630c:	d1c2      	bne.n	8016294 <_printf_float+0xf0>
 801630e:	2b00      	cmp	r3, #0
 8016310:	d1c0      	bne.n	8016294 <_printf_float+0xf0>
 8016312:	2301      	movs	r3, #1
 8016314:	e7bd      	b.n	8016292 <_printf_float+0xee>
 8016316:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801631a:	d9db      	bls.n	80162d4 <_printf_float+0x130>
 801631c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016320:	d118      	bne.n	8016354 <_printf_float+0x1b0>
 8016322:	2900      	cmp	r1, #0
 8016324:	6863      	ldr	r3, [r4, #4]
 8016326:	dd0b      	ble.n	8016340 <_printf_float+0x19c>
 8016328:	6121      	str	r1, [r4, #16]
 801632a:	b913      	cbnz	r3, 8016332 <_printf_float+0x18e>
 801632c:	6822      	ldr	r2, [r4, #0]
 801632e:	07d0      	lsls	r0, r2, #31
 8016330:	d502      	bpl.n	8016338 <_printf_float+0x194>
 8016332:	3301      	adds	r3, #1
 8016334:	440b      	add	r3, r1
 8016336:	6123      	str	r3, [r4, #16]
 8016338:	65a1      	str	r1, [r4, #88]	@ 0x58
 801633a:	f04f 0900 	mov.w	r9, #0
 801633e:	e7db      	b.n	80162f8 <_printf_float+0x154>
 8016340:	b913      	cbnz	r3, 8016348 <_printf_float+0x1a4>
 8016342:	6822      	ldr	r2, [r4, #0]
 8016344:	07d2      	lsls	r2, r2, #31
 8016346:	d501      	bpl.n	801634c <_printf_float+0x1a8>
 8016348:	3302      	adds	r3, #2
 801634a:	e7f4      	b.n	8016336 <_printf_float+0x192>
 801634c:	2301      	movs	r3, #1
 801634e:	e7f2      	b.n	8016336 <_printf_float+0x192>
 8016350:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016356:	4299      	cmp	r1, r3
 8016358:	db05      	blt.n	8016366 <_printf_float+0x1c2>
 801635a:	6823      	ldr	r3, [r4, #0]
 801635c:	6121      	str	r1, [r4, #16]
 801635e:	07d8      	lsls	r0, r3, #31
 8016360:	d5ea      	bpl.n	8016338 <_printf_float+0x194>
 8016362:	1c4b      	adds	r3, r1, #1
 8016364:	e7e7      	b.n	8016336 <_printf_float+0x192>
 8016366:	2900      	cmp	r1, #0
 8016368:	bfd4      	ite	le
 801636a:	f1c1 0202 	rsble	r2, r1, #2
 801636e:	2201      	movgt	r2, #1
 8016370:	4413      	add	r3, r2
 8016372:	e7e0      	b.n	8016336 <_printf_float+0x192>
 8016374:	6823      	ldr	r3, [r4, #0]
 8016376:	055a      	lsls	r2, r3, #21
 8016378:	d407      	bmi.n	801638a <_printf_float+0x1e6>
 801637a:	6923      	ldr	r3, [r4, #16]
 801637c:	4642      	mov	r2, r8
 801637e:	4631      	mov	r1, r6
 8016380:	4628      	mov	r0, r5
 8016382:	47b8      	blx	r7
 8016384:	3001      	adds	r0, #1
 8016386:	d12b      	bne.n	80163e0 <_printf_float+0x23c>
 8016388:	e767      	b.n	801625a <_printf_float+0xb6>
 801638a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801638e:	f240 80dd 	bls.w	801654c <_printf_float+0x3a8>
 8016392:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016396:	2200      	movs	r2, #0
 8016398:	2300      	movs	r3, #0
 801639a:	f7ea fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 801639e:	2800      	cmp	r0, #0
 80163a0:	d033      	beq.n	801640a <_printf_float+0x266>
 80163a2:	4a37      	ldr	r2, [pc, #220]	@ (8016480 <_printf_float+0x2dc>)
 80163a4:	2301      	movs	r3, #1
 80163a6:	4631      	mov	r1, r6
 80163a8:	4628      	mov	r0, r5
 80163aa:	47b8      	blx	r7
 80163ac:	3001      	adds	r0, #1
 80163ae:	f43f af54 	beq.w	801625a <_printf_float+0xb6>
 80163b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80163b6:	4543      	cmp	r3, r8
 80163b8:	db02      	blt.n	80163c0 <_printf_float+0x21c>
 80163ba:	6823      	ldr	r3, [r4, #0]
 80163bc:	07d8      	lsls	r0, r3, #31
 80163be:	d50f      	bpl.n	80163e0 <_printf_float+0x23c>
 80163c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163c4:	4631      	mov	r1, r6
 80163c6:	4628      	mov	r0, r5
 80163c8:	47b8      	blx	r7
 80163ca:	3001      	adds	r0, #1
 80163cc:	f43f af45 	beq.w	801625a <_printf_float+0xb6>
 80163d0:	f04f 0900 	mov.w	r9, #0
 80163d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80163d8:	f104 0a1a 	add.w	sl, r4, #26
 80163dc:	45c8      	cmp	r8, r9
 80163de:	dc09      	bgt.n	80163f4 <_printf_float+0x250>
 80163e0:	6823      	ldr	r3, [r4, #0]
 80163e2:	079b      	lsls	r3, r3, #30
 80163e4:	f100 8103 	bmi.w	80165ee <_printf_float+0x44a>
 80163e8:	68e0      	ldr	r0, [r4, #12]
 80163ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80163ec:	4298      	cmp	r0, r3
 80163ee:	bfb8      	it	lt
 80163f0:	4618      	movlt	r0, r3
 80163f2:	e734      	b.n	801625e <_printf_float+0xba>
 80163f4:	2301      	movs	r3, #1
 80163f6:	4652      	mov	r2, sl
 80163f8:	4631      	mov	r1, r6
 80163fa:	4628      	mov	r0, r5
 80163fc:	47b8      	blx	r7
 80163fe:	3001      	adds	r0, #1
 8016400:	f43f af2b 	beq.w	801625a <_printf_float+0xb6>
 8016404:	f109 0901 	add.w	r9, r9, #1
 8016408:	e7e8      	b.n	80163dc <_printf_float+0x238>
 801640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801640c:	2b00      	cmp	r3, #0
 801640e:	dc39      	bgt.n	8016484 <_printf_float+0x2e0>
 8016410:	4a1b      	ldr	r2, [pc, #108]	@ (8016480 <_printf_float+0x2dc>)
 8016412:	2301      	movs	r3, #1
 8016414:	4631      	mov	r1, r6
 8016416:	4628      	mov	r0, r5
 8016418:	47b8      	blx	r7
 801641a:	3001      	adds	r0, #1
 801641c:	f43f af1d 	beq.w	801625a <_printf_float+0xb6>
 8016420:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016424:	ea59 0303 	orrs.w	r3, r9, r3
 8016428:	d102      	bne.n	8016430 <_printf_float+0x28c>
 801642a:	6823      	ldr	r3, [r4, #0]
 801642c:	07d9      	lsls	r1, r3, #31
 801642e:	d5d7      	bpl.n	80163e0 <_printf_float+0x23c>
 8016430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016434:	4631      	mov	r1, r6
 8016436:	4628      	mov	r0, r5
 8016438:	47b8      	blx	r7
 801643a:	3001      	adds	r0, #1
 801643c:	f43f af0d 	beq.w	801625a <_printf_float+0xb6>
 8016440:	f04f 0a00 	mov.w	sl, #0
 8016444:	f104 0b1a 	add.w	fp, r4, #26
 8016448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801644a:	425b      	negs	r3, r3
 801644c:	4553      	cmp	r3, sl
 801644e:	dc01      	bgt.n	8016454 <_printf_float+0x2b0>
 8016450:	464b      	mov	r3, r9
 8016452:	e793      	b.n	801637c <_printf_float+0x1d8>
 8016454:	2301      	movs	r3, #1
 8016456:	465a      	mov	r2, fp
 8016458:	4631      	mov	r1, r6
 801645a:	4628      	mov	r0, r5
 801645c:	47b8      	blx	r7
 801645e:	3001      	adds	r0, #1
 8016460:	f43f aefb 	beq.w	801625a <_printf_float+0xb6>
 8016464:	f10a 0a01 	add.w	sl, sl, #1
 8016468:	e7ee      	b.n	8016448 <_printf_float+0x2a4>
 801646a:	bf00      	nop
 801646c:	7fefffff 	.word	0x7fefffff
 8016470:	0801a995 	.word	0x0801a995
 8016474:	0801a999 	.word	0x0801a999
 8016478:	0801a99d 	.word	0x0801a99d
 801647c:	0801a9a1 	.word	0x0801a9a1
 8016480:	0801a9a5 	.word	0x0801a9a5
 8016484:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016486:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801648a:	4553      	cmp	r3, sl
 801648c:	bfa8      	it	ge
 801648e:	4653      	movge	r3, sl
 8016490:	2b00      	cmp	r3, #0
 8016492:	4699      	mov	r9, r3
 8016494:	dc36      	bgt.n	8016504 <_printf_float+0x360>
 8016496:	f04f 0b00 	mov.w	fp, #0
 801649a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801649e:	f104 021a 	add.w	r2, r4, #26
 80164a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80164a4:	9306      	str	r3, [sp, #24]
 80164a6:	eba3 0309 	sub.w	r3, r3, r9
 80164aa:	455b      	cmp	r3, fp
 80164ac:	dc31      	bgt.n	8016512 <_printf_float+0x36e>
 80164ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164b0:	459a      	cmp	sl, r3
 80164b2:	dc3a      	bgt.n	801652a <_printf_float+0x386>
 80164b4:	6823      	ldr	r3, [r4, #0]
 80164b6:	07da      	lsls	r2, r3, #31
 80164b8:	d437      	bmi.n	801652a <_printf_float+0x386>
 80164ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164bc:	ebaa 0903 	sub.w	r9, sl, r3
 80164c0:	9b06      	ldr	r3, [sp, #24]
 80164c2:	ebaa 0303 	sub.w	r3, sl, r3
 80164c6:	4599      	cmp	r9, r3
 80164c8:	bfa8      	it	ge
 80164ca:	4699      	movge	r9, r3
 80164cc:	f1b9 0f00 	cmp.w	r9, #0
 80164d0:	dc33      	bgt.n	801653a <_printf_float+0x396>
 80164d2:	f04f 0800 	mov.w	r8, #0
 80164d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80164da:	f104 0b1a 	add.w	fp, r4, #26
 80164de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164e0:	ebaa 0303 	sub.w	r3, sl, r3
 80164e4:	eba3 0309 	sub.w	r3, r3, r9
 80164e8:	4543      	cmp	r3, r8
 80164ea:	f77f af79 	ble.w	80163e0 <_printf_float+0x23c>
 80164ee:	2301      	movs	r3, #1
 80164f0:	465a      	mov	r2, fp
 80164f2:	4631      	mov	r1, r6
 80164f4:	4628      	mov	r0, r5
 80164f6:	47b8      	blx	r7
 80164f8:	3001      	adds	r0, #1
 80164fa:	f43f aeae 	beq.w	801625a <_printf_float+0xb6>
 80164fe:	f108 0801 	add.w	r8, r8, #1
 8016502:	e7ec      	b.n	80164de <_printf_float+0x33a>
 8016504:	4642      	mov	r2, r8
 8016506:	4631      	mov	r1, r6
 8016508:	4628      	mov	r0, r5
 801650a:	47b8      	blx	r7
 801650c:	3001      	adds	r0, #1
 801650e:	d1c2      	bne.n	8016496 <_printf_float+0x2f2>
 8016510:	e6a3      	b.n	801625a <_printf_float+0xb6>
 8016512:	2301      	movs	r3, #1
 8016514:	4631      	mov	r1, r6
 8016516:	4628      	mov	r0, r5
 8016518:	9206      	str	r2, [sp, #24]
 801651a:	47b8      	blx	r7
 801651c:	3001      	adds	r0, #1
 801651e:	f43f ae9c 	beq.w	801625a <_printf_float+0xb6>
 8016522:	9a06      	ldr	r2, [sp, #24]
 8016524:	f10b 0b01 	add.w	fp, fp, #1
 8016528:	e7bb      	b.n	80164a2 <_printf_float+0x2fe>
 801652a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801652e:	4631      	mov	r1, r6
 8016530:	4628      	mov	r0, r5
 8016532:	47b8      	blx	r7
 8016534:	3001      	adds	r0, #1
 8016536:	d1c0      	bne.n	80164ba <_printf_float+0x316>
 8016538:	e68f      	b.n	801625a <_printf_float+0xb6>
 801653a:	9a06      	ldr	r2, [sp, #24]
 801653c:	464b      	mov	r3, r9
 801653e:	4442      	add	r2, r8
 8016540:	4631      	mov	r1, r6
 8016542:	4628      	mov	r0, r5
 8016544:	47b8      	blx	r7
 8016546:	3001      	adds	r0, #1
 8016548:	d1c3      	bne.n	80164d2 <_printf_float+0x32e>
 801654a:	e686      	b.n	801625a <_printf_float+0xb6>
 801654c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016550:	f1ba 0f01 	cmp.w	sl, #1
 8016554:	dc01      	bgt.n	801655a <_printf_float+0x3b6>
 8016556:	07db      	lsls	r3, r3, #31
 8016558:	d536      	bpl.n	80165c8 <_printf_float+0x424>
 801655a:	2301      	movs	r3, #1
 801655c:	4642      	mov	r2, r8
 801655e:	4631      	mov	r1, r6
 8016560:	4628      	mov	r0, r5
 8016562:	47b8      	blx	r7
 8016564:	3001      	adds	r0, #1
 8016566:	f43f ae78 	beq.w	801625a <_printf_float+0xb6>
 801656a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801656e:	4631      	mov	r1, r6
 8016570:	4628      	mov	r0, r5
 8016572:	47b8      	blx	r7
 8016574:	3001      	adds	r0, #1
 8016576:	f43f ae70 	beq.w	801625a <_printf_float+0xb6>
 801657a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801657e:	2200      	movs	r2, #0
 8016580:	2300      	movs	r3, #0
 8016582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016586:	f7ea fabf 	bl	8000b08 <__aeabi_dcmpeq>
 801658a:	b9c0      	cbnz	r0, 80165be <_printf_float+0x41a>
 801658c:	4653      	mov	r3, sl
 801658e:	f108 0201 	add.w	r2, r8, #1
 8016592:	4631      	mov	r1, r6
 8016594:	4628      	mov	r0, r5
 8016596:	47b8      	blx	r7
 8016598:	3001      	adds	r0, #1
 801659a:	d10c      	bne.n	80165b6 <_printf_float+0x412>
 801659c:	e65d      	b.n	801625a <_printf_float+0xb6>
 801659e:	2301      	movs	r3, #1
 80165a0:	465a      	mov	r2, fp
 80165a2:	4631      	mov	r1, r6
 80165a4:	4628      	mov	r0, r5
 80165a6:	47b8      	blx	r7
 80165a8:	3001      	adds	r0, #1
 80165aa:	f43f ae56 	beq.w	801625a <_printf_float+0xb6>
 80165ae:	f108 0801 	add.w	r8, r8, #1
 80165b2:	45d0      	cmp	r8, sl
 80165b4:	dbf3      	blt.n	801659e <_printf_float+0x3fa>
 80165b6:	464b      	mov	r3, r9
 80165b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80165bc:	e6df      	b.n	801637e <_printf_float+0x1da>
 80165be:	f04f 0800 	mov.w	r8, #0
 80165c2:	f104 0b1a 	add.w	fp, r4, #26
 80165c6:	e7f4      	b.n	80165b2 <_printf_float+0x40e>
 80165c8:	2301      	movs	r3, #1
 80165ca:	4642      	mov	r2, r8
 80165cc:	e7e1      	b.n	8016592 <_printf_float+0x3ee>
 80165ce:	2301      	movs	r3, #1
 80165d0:	464a      	mov	r2, r9
 80165d2:	4631      	mov	r1, r6
 80165d4:	4628      	mov	r0, r5
 80165d6:	47b8      	blx	r7
 80165d8:	3001      	adds	r0, #1
 80165da:	f43f ae3e 	beq.w	801625a <_printf_float+0xb6>
 80165de:	f108 0801 	add.w	r8, r8, #1
 80165e2:	68e3      	ldr	r3, [r4, #12]
 80165e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80165e6:	1a5b      	subs	r3, r3, r1
 80165e8:	4543      	cmp	r3, r8
 80165ea:	dcf0      	bgt.n	80165ce <_printf_float+0x42a>
 80165ec:	e6fc      	b.n	80163e8 <_printf_float+0x244>
 80165ee:	f04f 0800 	mov.w	r8, #0
 80165f2:	f104 0919 	add.w	r9, r4, #25
 80165f6:	e7f4      	b.n	80165e2 <_printf_float+0x43e>

080165f8 <_printf_common>:
 80165f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165fc:	4616      	mov	r6, r2
 80165fe:	4698      	mov	r8, r3
 8016600:	688a      	ldr	r2, [r1, #8]
 8016602:	690b      	ldr	r3, [r1, #16]
 8016604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016608:	4293      	cmp	r3, r2
 801660a:	bfb8      	it	lt
 801660c:	4613      	movlt	r3, r2
 801660e:	6033      	str	r3, [r6, #0]
 8016610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016614:	4607      	mov	r7, r0
 8016616:	460c      	mov	r4, r1
 8016618:	b10a      	cbz	r2, 801661e <_printf_common+0x26>
 801661a:	3301      	adds	r3, #1
 801661c:	6033      	str	r3, [r6, #0]
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	0699      	lsls	r1, r3, #26
 8016622:	bf42      	ittt	mi
 8016624:	6833      	ldrmi	r3, [r6, #0]
 8016626:	3302      	addmi	r3, #2
 8016628:	6033      	strmi	r3, [r6, #0]
 801662a:	6825      	ldr	r5, [r4, #0]
 801662c:	f015 0506 	ands.w	r5, r5, #6
 8016630:	d106      	bne.n	8016640 <_printf_common+0x48>
 8016632:	f104 0a19 	add.w	sl, r4, #25
 8016636:	68e3      	ldr	r3, [r4, #12]
 8016638:	6832      	ldr	r2, [r6, #0]
 801663a:	1a9b      	subs	r3, r3, r2
 801663c:	42ab      	cmp	r3, r5
 801663e:	dc26      	bgt.n	801668e <_printf_common+0x96>
 8016640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016644:	6822      	ldr	r2, [r4, #0]
 8016646:	3b00      	subs	r3, #0
 8016648:	bf18      	it	ne
 801664a:	2301      	movne	r3, #1
 801664c:	0692      	lsls	r2, r2, #26
 801664e:	d42b      	bmi.n	80166a8 <_printf_common+0xb0>
 8016650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016654:	4641      	mov	r1, r8
 8016656:	4638      	mov	r0, r7
 8016658:	47c8      	blx	r9
 801665a:	3001      	adds	r0, #1
 801665c:	d01e      	beq.n	801669c <_printf_common+0xa4>
 801665e:	6823      	ldr	r3, [r4, #0]
 8016660:	6922      	ldr	r2, [r4, #16]
 8016662:	f003 0306 	and.w	r3, r3, #6
 8016666:	2b04      	cmp	r3, #4
 8016668:	bf02      	ittt	eq
 801666a:	68e5      	ldreq	r5, [r4, #12]
 801666c:	6833      	ldreq	r3, [r6, #0]
 801666e:	1aed      	subeq	r5, r5, r3
 8016670:	68a3      	ldr	r3, [r4, #8]
 8016672:	bf0c      	ite	eq
 8016674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016678:	2500      	movne	r5, #0
 801667a:	4293      	cmp	r3, r2
 801667c:	bfc4      	itt	gt
 801667e:	1a9b      	subgt	r3, r3, r2
 8016680:	18ed      	addgt	r5, r5, r3
 8016682:	2600      	movs	r6, #0
 8016684:	341a      	adds	r4, #26
 8016686:	42b5      	cmp	r5, r6
 8016688:	d11a      	bne.n	80166c0 <_printf_common+0xc8>
 801668a:	2000      	movs	r0, #0
 801668c:	e008      	b.n	80166a0 <_printf_common+0xa8>
 801668e:	2301      	movs	r3, #1
 8016690:	4652      	mov	r2, sl
 8016692:	4641      	mov	r1, r8
 8016694:	4638      	mov	r0, r7
 8016696:	47c8      	blx	r9
 8016698:	3001      	adds	r0, #1
 801669a:	d103      	bne.n	80166a4 <_printf_common+0xac>
 801669c:	f04f 30ff 	mov.w	r0, #4294967295
 80166a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166a4:	3501      	adds	r5, #1
 80166a6:	e7c6      	b.n	8016636 <_printf_common+0x3e>
 80166a8:	18e1      	adds	r1, r4, r3
 80166aa:	1c5a      	adds	r2, r3, #1
 80166ac:	2030      	movs	r0, #48	@ 0x30
 80166ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80166b2:	4422      	add	r2, r4
 80166b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80166b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80166bc:	3302      	adds	r3, #2
 80166be:	e7c7      	b.n	8016650 <_printf_common+0x58>
 80166c0:	2301      	movs	r3, #1
 80166c2:	4622      	mov	r2, r4
 80166c4:	4641      	mov	r1, r8
 80166c6:	4638      	mov	r0, r7
 80166c8:	47c8      	blx	r9
 80166ca:	3001      	adds	r0, #1
 80166cc:	d0e6      	beq.n	801669c <_printf_common+0xa4>
 80166ce:	3601      	adds	r6, #1
 80166d0:	e7d9      	b.n	8016686 <_printf_common+0x8e>
	...

080166d4 <_printf_i>:
 80166d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166d8:	7e0f      	ldrb	r7, [r1, #24]
 80166da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80166dc:	2f78      	cmp	r7, #120	@ 0x78
 80166de:	4691      	mov	r9, r2
 80166e0:	4680      	mov	r8, r0
 80166e2:	460c      	mov	r4, r1
 80166e4:	469a      	mov	sl, r3
 80166e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80166ea:	d807      	bhi.n	80166fc <_printf_i+0x28>
 80166ec:	2f62      	cmp	r7, #98	@ 0x62
 80166ee:	d80a      	bhi.n	8016706 <_printf_i+0x32>
 80166f0:	2f00      	cmp	r7, #0
 80166f2:	f000 80d2 	beq.w	801689a <_printf_i+0x1c6>
 80166f6:	2f58      	cmp	r7, #88	@ 0x58
 80166f8:	f000 80b9 	beq.w	801686e <_printf_i+0x19a>
 80166fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016704:	e03a      	b.n	801677c <_printf_i+0xa8>
 8016706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801670a:	2b15      	cmp	r3, #21
 801670c:	d8f6      	bhi.n	80166fc <_printf_i+0x28>
 801670e:	a101      	add	r1, pc, #4	@ (adr r1, 8016714 <_printf_i+0x40>)
 8016710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016714:	0801676d 	.word	0x0801676d
 8016718:	08016781 	.word	0x08016781
 801671c:	080166fd 	.word	0x080166fd
 8016720:	080166fd 	.word	0x080166fd
 8016724:	080166fd 	.word	0x080166fd
 8016728:	080166fd 	.word	0x080166fd
 801672c:	08016781 	.word	0x08016781
 8016730:	080166fd 	.word	0x080166fd
 8016734:	080166fd 	.word	0x080166fd
 8016738:	080166fd 	.word	0x080166fd
 801673c:	080166fd 	.word	0x080166fd
 8016740:	08016881 	.word	0x08016881
 8016744:	080167ab 	.word	0x080167ab
 8016748:	0801683b 	.word	0x0801683b
 801674c:	080166fd 	.word	0x080166fd
 8016750:	080166fd 	.word	0x080166fd
 8016754:	080168a3 	.word	0x080168a3
 8016758:	080166fd 	.word	0x080166fd
 801675c:	080167ab 	.word	0x080167ab
 8016760:	080166fd 	.word	0x080166fd
 8016764:	080166fd 	.word	0x080166fd
 8016768:	08016843 	.word	0x08016843
 801676c:	6833      	ldr	r3, [r6, #0]
 801676e:	1d1a      	adds	r2, r3, #4
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	6032      	str	r2, [r6, #0]
 8016774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801677c:	2301      	movs	r3, #1
 801677e:	e09d      	b.n	80168bc <_printf_i+0x1e8>
 8016780:	6833      	ldr	r3, [r6, #0]
 8016782:	6820      	ldr	r0, [r4, #0]
 8016784:	1d19      	adds	r1, r3, #4
 8016786:	6031      	str	r1, [r6, #0]
 8016788:	0606      	lsls	r6, r0, #24
 801678a:	d501      	bpl.n	8016790 <_printf_i+0xbc>
 801678c:	681d      	ldr	r5, [r3, #0]
 801678e:	e003      	b.n	8016798 <_printf_i+0xc4>
 8016790:	0645      	lsls	r5, r0, #25
 8016792:	d5fb      	bpl.n	801678c <_printf_i+0xb8>
 8016794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016798:	2d00      	cmp	r5, #0
 801679a:	da03      	bge.n	80167a4 <_printf_i+0xd0>
 801679c:	232d      	movs	r3, #45	@ 0x2d
 801679e:	426d      	negs	r5, r5
 80167a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80167a4:	4859      	ldr	r0, [pc, #356]	@ (801690c <_printf_i+0x238>)
 80167a6:	230a      	movs	r3, #10
 80167a8:	e011      	b.n	80167ce <_printf_i+0xfa>
 80167aa:	6821      	ldr	r1, [r4, #0]
 80167ac:	6833      	ldr	r3, [r6, #0]
 80167ae:	0608      	lsls	r0, r1, #24
 80167b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80167b4:	d402      	bmi.n	80167bc <_printf_i+0xe8>
 80167b6:	0649      	lsls	r1, r1, #25
 80167b8:	bf48      	it	mi
 80167ba:	b2ad      	uxthmi	r5, r5
 80167bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80167be:	4853      	ldr	r0, [pc, #332]	@ (801690c <_printf_i+0x238>)
 80167c0:	6033      	str	r3, [r6, #0]
 80167c2:	bf14      	ite	ne
 80167c4:	230a      	movne	r3, #10
 80167c6:	2308      	moveq	r3, #8
 80167c8:	2100      	movs	r1, #0
 80167ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80167ce:	6866      	ldr	r6, [r4, #4]
 80167d0:	60a6      	str	r6, [r4, #8]
 80167d2:	2e00      	cmp	r6, #0
 80167d4:	bfa2      	ittt	ge
 80167d6:	6821      	ldrge	r1, [r4, #0]
 80167d8:	f021 0104 	bicge.w	r1, r1, #4
 80167dc:	6021      	strge	r1, [r4, #0]
 80167de:	b90d      	cbnz	r5, 80167e4 <_printf_i+0x110>
 80167e0:	2e00      	cmp	r6, #0
 80167e2:	d04b      	beq.n	801687c <_printf_i+0x1a8>
 80167e4:	4616      	mov	r6, r2
 80167e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80167ea:	fb03 5711 	mls	r7, r3, r1, r5
 80167ee:	5dc7      	ldrb	r7, [r0, r7]
 80167f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80167f4:	462f      	mov	r7, r5
 80167f6:	42bb      	cmp	r3, r7
 80167f8:	460d      	mov	r5, r1
 80167fa:	d9f4      	bls.n	80167e6 <_printf_i+0x112>
 80167fc:	2b08      	cmp	r3, #8
 80167fe:	d10b      	bne.n	8016818 <_printf_i+0x144>
 8016800:	6823      	ldr	r3, [r4, #0]
 8016802:	07df      	lsls	r7, r3, #31
 8016804:	d508      	bpl.n	8016818 <_printf_i+0x144>
 8016806:	6923      	ldr	r3, [r4, #16]
 8016808:	6861      	ldr	r1, [r4, #4]
 801680a:	4299      	cmp	r1, r3
 801680c:	bfde      	ittt	le
 801680e:	2330      	movle	r3, #48	@ 0x30
 8016810:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016814:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016818:	1b92      	subs	r2, r2, r6
 801681a:	6122      	str	r2, [r4, #16]
 801681c:	f8cd a000 	str.w	sl, [sp]
 8016820:	464b      	mov	r3, r9
 8016822:	aa03      	add	r2, sp, #12
 8016824:	4621      	mov	r1, r4
 8016826:	4640      	mov	r0, r8
 8016828:	f7ff fee6 	bl	80165f8 <_printf_common>
 801682c:	3001      	adds	r0, #1
 801682e:	d14a      	bne.n	80168c6 <_printf_i+0x1f2>
 8016830:	f04f 30ff 	mov.w	r0, #4294967295
 8016834:	b004      	add	sp, #16
 8016836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801683a:	6823      	ldr	r3, [r4, #0]
 801683c:	f043 0320 	orr.w	r3, r3, #32
 8016840:	6023      	str	r3, [r4, #0]
 8016842:	4833      	ldr	r0, [pc, #204]	@ (8016910 <_printf_i+0x23c>)
 8016844:	2778      	movs	r7, #120	@ 0x78
 8016846:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801684a:	6823      	ldr	r3, [r4, #0]
 801684c:	6831      	ldr	r1, [r6, #0]
 801684e:	061f      	lsls	r7, r3, #24
 8016850:	f851 5b04 	ldr.w	r5, [r1], #4
 8016854:	d402      	bmi.n	801685c <_printf_i+0x188>
 8016856:	065f      	lsls	r7, r3, #25
 8016858:	bf48      	it	mi
 801685a:	b2ad      	uxthmi	r5, r5
 801685c:	6031      	str	r1, [r6, #0]
 801685e:	07d9      	lsls	r1, r3, #31
 8016860:	bf44      	itt	mi
 8016862:	f043 0320 	orrmi.w	r3, r3, #32
 8016866:	6023      	strmi	r3, [r4, #0]
 8016868:	b11d      	cbz	r5, 8016872 <_printf_i+0x19e>
 801686a:	2310      	movs	r3, #16
 801686c:	e7ac      	b.n	80167c8 <_printf_i+0xf4>
 801686e:	4827      	ldr	r0, [pc, #156]	@ (801690c <_printf_i+0x238>)
 8016870:	e7e9      	b.n	8016846 <_printf_i+0x172>
 8016872:	6823      	ldr	r3, [r4, #0]
 8016874:	f023 0320 	bic.w	r3, r3, #32
 8016878:	6023      	str	r3, [r4, #0]
 801687a:	e7f6      	b.n	801686a <_printf_i+0x196>
 801687c:	4616      	mov	r6, r2
 801687e:	e7bd      	b.n	80167fc <_printf_i+0x128>
 8016880:	6833      	ldr	r3, [r6, #0]
 8016882:	6825      	ldr	r5, [r4, #0]
 8016884:	6961      	ldr	r1, [r4, #20]
 8016886:	1d18      	adds	r0, r3, #4
 8016888:	6030      	str	r0, [r6, #0]
 801688a:	062e      	lsls	r6, r5, #24
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	d501      	bpl.n	8016894 <_printf_i+0x1c0>
 8016890:	6019      	str	r1, [r3, #0]
 8016892:	e002      	b.n	801689a <_printf_i+0x1c6>
 8016894:	0668      	lsls	r0, r5, #25
 8016896:	d5fb      	bpl.n	8016890 <_printf_i+0x1bc>
 8016898:	8019      	strh	r1, [r3, #0]
 801689a:	2300      	movs	r3, #0
 801689c:	6123      	str	r3, [r4, #16]
 801689e:	4616      	mov	r6, r2
 80168a0:	e7bc      	b.n	801681c <_printf_i+0x148>
 80168a2:	6833      	ldr	r3, [r6, #0]
 80168a4:	1d1a      	adds	r2, r3, #4
 80168a6:	6032      	str	r2, [r6, #0]
 80168a8:	681e      	ldr	r6, [r3, #0]
 80168aa:	6862      	ldr	r2, [r4, #4]
 80168ac:	2100      	movs	r1, #0
 80168ae:	4630      	mov	r0, r6
 80168b0:	f7e9 fcae 	bl	8000210 <memchr>
 80168b4:	b108      	cbz	r0, 80168ba <_printf_i+0x1e6>
 80168b6:	1b80      	subs	r0, r0, r6
 80168b8:	6060      	str	r0, [r4, #4]
 80168ba:	6863      	ldr	r3, [r4, #4]
 80168bc:	6123      	str	r3, [r4, #16]
 80168be:	2300      	movs	r3, #0
 80168c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80168c4:	e7aa      	b.n	801681c <_printf_i+0x148>
 80168c6:	6923      	ldr	r3, [r4, #16]
 80168c8:	4632      	mov	r2, r6
 80168ca:	4649      	mov	r1, r9
 80168cc:	4640      	mov	r0, r8
 80168ce:	47d0      	blx	sl
 80168d0:	3001      	adds	r0, #1
 80168d2:	d0ad      	beq.n	8016830 <_printf_i+0x15c>
 80168d4:	6823      	ldr	r3, [r4, #0]
 80168d6:	079b      	lsls	r3, r3, #30
 80168d8:	d413      	bmi.n	8016902 <_printf_i+0x22e>
 80168da:	68e0      	ldr	r0, [r4, #12]
 80168dc:	9b03      	ldr	r3, [sp, #12]
 80168de:	4298      	cmp	r0, r3
 80168e0:	bfb8      	it	lt
 80168e2:	4618      	movlt	r0, r3
 80168e4:	e7a6      	b.n	8016834 <_printf_i+0x160>
 80168e6:	2301      	movs	r3, #1
 80168e8:	4632      	mov	r2, r6
 80168ea:	4649      	mov	r1, r9
 80168ec:	4640      	mov	r0, r8
 80168ee:	47d0      	blx	sl
 80168f0:	3001      	adds	r0, #1
 80168f2:	d09d      	beq.n	8016830 <_printf_i+0x15c>
 80168f4:	3501      	adds	r5, #1
 80168f6:	68e3      	ldr	r3, [r4, #12]
 80168f8:	9903      	ldr	r1, [sp, #12]
 80168fa:	1a5b      	subs	r3, r3, r1
 80168fc:	42ab      	cmp	r3, r5
 80168fe:	dcf2      	bgt.n	80168e6 <_printf_i+0x212>
 8016900:	e7eb      	b.n	80168da <_printf_i+0x206>
 8016902:	2500      	movs	r5, #0
 8016904:	f104 0619 	add.w	r6, r4, #25
 8016908:	e7f5      	b.n	80168f6 <_printf_i+0x222>
 801690a:	bf00      	nop
 801690c:	0801a9a7 	.word	0x0801a9a7
 8016910:	0801a9b8 	.word	0x0801a9b8

08016914 <std>:
 8016914:	2300      	movs	r3, #0
 8016916:	b510      	push	{r4, lr}
 8016918:	4604      	mov	r4, r0
 801691a:	e9c0 3300 	strd	r3, r3, [r0]
 801691e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016922:	6083      	str	r3, [r0, #8]
 8016924:	8181      	strh	r1, [r0, #12]
 8016926:	6643      	str	r3, [r0, #100]	@ 0x64
 8016928:	81c2      	strh	r2, [r0, #14]
 801692a:	6183      	str	r3, [r0, #24]
 801692c:	4619      	mov	r1, r3
 801692e:	2208      	movs	r2, #8
 8016930:	305c      	adds	r0, #92	@ 0x5c
 8016932:	f000 f935 	bl	8016ba0 <memset>
 8016936:	4b0d      	ldr	r3, [pc, #52]	@ (801696c <std+0x58>)
 8016938:	6263      	str	r3, [r4, #36]	@ 0x24
 801693a:	4b0d      	ldr	r3, [pc, #52]	@ (8016970 <std+0x5c>)
 801693c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801693e:	4b0d      	ldr	r3, [pc, #52]	@ (8016974 <std+0x60>)
 8016940:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016942:	4b0d      	ldr	r3, [pc, #52]	@ (8016978 <std+0x64>)
 8016944:	6323      	str	r3, [r4, #48]	@ 0x30
 8016946:	4b0d      	ldr	r3, [pc, #52]	@ (801697c <std+0x68>)
 8016948:	6224      	str	r4, [r4, #32]
 801694a:	429c      	cmp	r4, r3
 801694c:	d006      	beq.n	801695c <std+0x48>
 801694e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016952:	4294      	cmp	r4, r2
 8016954:	d002      	beq.n	801695c <std+0x48>
 8016956:	33d0      	adds	r3, #208	@ 0xd0
 8016958:	429c      	cmp	r4, r3
 801695a:	d105      	bne.n	8016968 <std+0x54>
 801695c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016964:	f000 b9a8 	b.w	8016cb8 <__retarget_lock_init_recursive>
 8016968:	bd10      	pop	{r4, pc}
 801696a:	bf00      	nop
 801696c:	08016ad9 	.word	0x08016ad9
 8016970:	08016afb 	.word	0x08016afb
 8016974:	08016b33 	.word	0x08016b33
 8016978:	08016b57 	.word	0x08016b57
 801697c:	20008830 	.word	0x20008830

08016980 <stdio_exit_handler>:
 8016980:	4a02      	ldr	r2, [pc, #8]	@ (801698c <stdio_exit_handler+0xc>)
 8016982:	4903      	ldr	r1, [pc, #12]	@ (8016990 <stdio_exit_handler+0x10>)
 8016984:	4803      	ldr	r0, [pc, #12]	@ (8016994 <stdio_exit_handler+0x14>)
 8016986:	f000 b869 	b.w	8016a5c <_fwalk_sglue>
 801698a:	bf00      	nop
 801698c:	20001228 	.word	0x20001228
 8016990:	08018645 	.word	0x08018645
 8016994:	20001238 	.word	0x20001238

08016998 <cleanup_stdio>:
 8016998:	6841      	ldr	r1, [r0, #4]
 801699a:	4b0c      	ldr	r3, [pc, #48]	@ (80169cc <cleanup_stdio+0x34>)
 801699c:	4299      	cmp	r1, r3
 801699e:	b510      	push	{r4, lr}
 80169a0:	4604      	mov	r4, r0
 80169a2:	d001      	beq.n	80169a8 <cleanup_stdio+0x10>
 80169a4:	f001 fe4e 	bl	8018644 <_fflush_r>
 80169a8:	68a1      	ldr	r1, [r4, #8]
 80169aa:	4b09      	ldr	r3, [pc, #36]	@ (80169d0 <cleanup_stdio+0x38>)
 80169ac:	4299      	cmp	r1, r3
 80169ae:	d002      	beq.n	80169b6 <cleanup_stdio+0x1e>
 80169b0:	4620      	mov	r0, r4
 80169b2:	f001 fe47 	bl	8018644 <_fflush_r>
 80169b6:	68e1      	ldr	r1, [r4, #12]
 80169b8:	4b06      	ldr	r3, [pc, #24]	@ (80169d4 <cleanup_stdio+0x3c>)
 80169ba:	4299      	cmp	r1, r3
 80169bc:	d004      	beq.n	80169c8 <cleanup_stdio+0x30>
 80169be:	4620      	mov	r0, r4
 80169c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169c4:	f001 be3e 	b.w	8018644 <_fflush_r>
 80169c8:	bd10      	pop	{r4, pc}
 80169ca:	bf00      	nop
 80169cc:	20008830 	.word	0x20008830
 80169d0:	20008898 	.word	0x20008898
 80169d4:	20008900 	.word	0x20008900

080169d8 <global_stdio_init.part.0>:
 80169d8:	b510      	push	{r4, lr}
 80169da:	4b0b      	ldr	r3, [pc, #44]	@ (8016a08 <global_stdio_init.part.0+0x30>)
 80169dc:	4c0b      	ldr	r4, [pc, #44]	@ (8016a0c <global_stdio_init.part.0+0x34>)
 80169de:	4a0c      	ldr	r2, [pc, #48]	@ (8016a10 <global_stdio_init.part.0+0x38>)
 80169e0:	601a      	str	r2, [r3, #0]
 80169e2:	4620      	mov	r0, r4
 80169e4:	2200      	movs	r2, #0
 80169e6:	2104      	movs	r1, #4
 80169e8:	f7ff ff94 	bl	8016914 <std>
 80169ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80169f0:	2201      	movs	r2, #1
 80169f2:	2109      	movs	r1, #9
 80169f4:	f7ff ff8e 	bl	8016914 <std>
 80169f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80169fc:	2202      	movs	r2, #2
 80169fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a02:	2112      	movs	r1, #18
 8016a04:	f7ff bf86 	b.w	8016914 <std>
 8016a08:	20008968 	.word	0x20008968
 8016a0c:	20008830 	.word	0x20008830
 8016a10:	08016981 	.word	0x08016981

08016a14 <__sfp_lock_acquire>:
 8016a14:	4801      	ldr	r0, [pc, #4]	@ (8016a1c <__sfp_lock_acquire+0x8>)
 8016a16:	f000 b950 	b.w	8016cba <__retarget_lock_acquire_recursive>
 8016a1a:	bf00      	nop
 8016a1c:	20008971 	.word	0x20008971

08016a20 <__sfp_lock_release>:
 8016a20:	4801      	ldr	r0, [pc, #4]	@ (8016a28 <__sfp_lock_release+0x8>)
 8016a22:	f000 b94b 	b.w	8016cbc <__retarget_lock_release_recursive>
 8016a26:	bf00      	nop
 8016a28:	20008971 	.word	0x20008971

08016a2c <__sinit>:
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	4604      	mov	r4, r0
 8016a30:	f7ff fff0 	bl	8016a14 <__sfp_lock_acquire>
 8016a34:	6a23      	ldr	r3, [r4, #32]
 8016a36:	b11b      	cbz	r3, 8016a40 <__sinit+0x14>
 8016a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a3c:	f7ff bff0 	b.w	8016a20 <__sfp_lock_release>
 8016a40:	4b04      	ldr	r3, [pc, #16]	@ (8016a54 <__sinit+0x28>)
 8016a42:	6223      	str	r3, [r4, #32]
 8016a44:	4b04      	ldr	r3, [pc, #16]	@ (8016a58 <__sinit+0x2c>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d1f5      	bne.n	8016a38 <__sinit+0xc>
 8016a4c:	f7ff ffc4 	bl	80169d8 <global_stdio_init.part.0>
 8016a50:	e7f2      	b.n	8016a38 <__sinit+0xc>
 8016a52:	bf00      	nop
 8016a54:	08016999 	.word	0x08016999
 8016a58:	20008968 	.word	0x20008968

08016a5c <_fwalk_sglue>:
 8016a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a60:	4607      	mov	r7, r0
 8016a62:	4688      	mov	r8, r1
 8016a64:	4614      	mov	r4, r2
 8016a66:	2600      	movs	r6, #0
 8016a68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a6c:	f1b9 0901 	subs.w	r9, r9, #1
 8016a70:	d505      	bpl.n	8016a7e <_fwalk_sglue+0x22>
 8016a72:	6824      	ldr	r4, [r4, #0]
 8016a74:	2c00      	cmp	r4, #0
 8016a76:	d1f7      	bne.n	8016a68 <_fwalk_sglue+0xc>
 8016a78:	4630      	mov	r0, r6
 8016a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a7e:	89ab      	ldrh	r3, [r5, #12]
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d907      	bls.n	8016a94 <_fwalk_sglue+0x38>
 8016a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a88:	3301      	adds	r3, #1
 8016a8a:	d003      	beq.n	8016a94 <_fwalk_sglue+0x38>
 8016a8c:	4629      	mov	r1, r5
 8016a8e:	4638      	mov	r0, r7
 8016a90:	47c0      	blx	r8
 8016a92:	4306      	orrs	r6, r0
 8016a94:	3568      	adds	r5, #104	@ 0x68
 8016a96:	e7e9      	b.n	8016a6c <_fwalk_sglue+0x10>

08016a98 <siprintf>:
 8016a98:	b40e      	push	{r1, r2, r3}
 8016a9a:	b500      	push	{lr}
 8016a9c:	b09c      	sub	sp, #112	@ 0x70
 8016a9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8016aa0:	9002      	str	r0, [sp, #8]
 8016aa2:	9006      	str	r0, [sp, #24]
 8016aa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016aa8:	4809      	ldr	r0, [pc, #36]	@ (8016ad0 <siprintf+0x38>)
 8016aaa:	9107      	str	r1, [sp, #28]
 8016aac:	9104      	str	r1, [sp, #16]
 8016aae:	4909      	ldr	r1, [pc, #36]	@ (8016ad4 <siprintf+0x3c>)
 8016ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ab4:	9105      	str	r1, [sp, #20]
 8016ab6:	6800      	ldr	r0, [r0, #0]
 8016ab8:	9301      	str	r3, [sp, #4]
 8016aba:	a902      	add	r1, sp, #8
 8016abc:	f001 fc42 	bl	8018344 <_svfiprintf_r>
 8016ac0:	9b02      	ldr	r3, [sp, #8]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	701a      	strb	r2, [r3, #0]
 8016ac6:	b01c      	add	sp, #112	@ 0x70
 8016ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016acc:	b003      	add	sp, #12
 8016ace:	4770      	bx	lr
 8016ad0:	20001234 	.word	0x20001234
 8016ad4:	ffff0208 	.word	0xffff0208

08016ad8 <__sread>:
 8016ad8:	b510      	push	{r4, lr}
 8016ada:	460c      	mov	r4, r1
 8016adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ae0:	f000 f89c 	bl	8016c1c <_read_r>
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	bfab      	itete	ge
 8016ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016aea:	89a3      	ldrhlt	r3, [r4, #12]
 8016aec:	181b      	addge	r3, r3, r0
 8016aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016af2:	bfac      	ite	ge
 8016af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016af6:	81a3      	strhlt	r3, [r4, #12]
 8016af8:	bd10      	pop	{r4, pc}

08016afa <__swrite>:
 8016afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016afe:	461f      	mov	r7, r3
 8016b00:	898b      	ldrh	r3, [r1, #12]
 8016b02:	05db      	lsls	r3, r3, #23
 8016b04:	4605      	mov	r5, r0
 8016b06:	460c      	mov	r4, r1
 8016b08:	4616      	mov	r6, r2
 8016b0a:	d505      	bpl.n	8016b18 <__swrite+0x1e>
 8016b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b10:	2302      	movs	r3, #2
 8016b12:	2200      	movs	r2, #0
 8016b14:	f000 f870 	bl	8016bf8 <_lseek_r>
 8016b18:	89a3      	ldrh	r3, [r4, #12]
 8016b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b22:	81a3      	strh	r3, [r4, #12]
 8016b24:	4632      	mov	r2, r6
 8016b26:	463b      	mov	r3, r7
 8016b28:	4628      	mov	r0, r5
 8016b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2e:	f000 b887 	b.w	8016c40 <_write_r>

08016b32 <__sseek>:
 8016b32:	b510      	push	{r4, lr}
 8016b34:	460c      	mov	r4, r1
 8016b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b3a:	f000 f85d 	bl	8016bf8 <_lseek_r>
 8016b3e:	1c43      	adds	r3, r0, #1
 8016b40:	89a3      	ldrh	r3, [r4, #12]
 8016b42:	bf15      	itete	ne
 8016b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016b4e:	81a3      	strheq	r3, [r4, #12]
 8016b50:	bf18      	it	ne
 8016b52:	81a3      	strhne	r3, [r4, #12]
 8016b54:	bd10      	pop	{r4, pc}

08016b56 <__sclose>:
 8016b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b5a:	f000 b83d 	b.w	8016bd8 <_close_r>
	...

08016b60 <_vsiprintf_r>:
 8016b60:	b500      	push	{lr}
 8016b62:	b09b      	sub	sp, #108	@ 0x6c
 8016b64:	9100      	str	r1, [sp, #0]
 8016b66:	9104      	str	r1, [sp, #16]
 8016b68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016b6c:	9105      	str	r1, [sp, #20]
 8016b6e:	9102      	str	r1, [sp, #8]
 8016b70:	4905      	ldr	r1, [pc, #20]	@ (8016b88 <_vsiprintf_r+0x28>)
 8016b72:	9103      	str	r1, [sp, #12]
 8016b74:	4669      	mov	r1, sp
 8016b76:	f001 fbe5 	bl	8018344 <_svfiprintf_r>
 8016b7a:	9b00      	ldr	r3, [sp, #0]
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	701a      	strb	r2, [r3, #0]
 8016b80:	b01b      	add	sp, #108	@ 0x6c
 8016b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b86:	bf00      	nop
 8016b88:	ffff0208 	.word	0xffff0208

08016b8c <vsiprintf>:
 8016b8c:	4613      	mov	r3, r2
 8016b8e:	460a      	mov	r2, r1
 8016b90:	4601      	mov	r1, r0
 8016b92:	4802      	ldr	r0, [pc, #8]	@ (8016b9c <vsiprintf+0x10>)
 8016b94:	6800      	ldr	r0, [r0, #0]
 8016b96:	f7ff bfe3 	b.w	8016b60 <_vsiprintf_r>
 8016b9a:	bf00      	nop
 8016b9c:	20001234 	.word	0x20001234

08016ba0 <memset>:
 8016ba0:	4402      	add	r2, r0
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	4293      	cmp	r3, r2
 8016ba6:	d100      	bne.n	8016baa <memset+0xa>
 8016ba8:	4770      	bx	lr
 8016baa:	f803 1b01 	strb.w	r1, [r3], #1
 8016bae:	e7f9      	b.n	8016ba4 <memset+0x4>

08016bb0 <strcat>:
 8016bb0:	b510      	push	{r4, lr}
 8016bb2:	4602      	mov	r2, r0
 8016bb4:	7814      	ldrb	r4, [r2, #0]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	3201      	adds	r2, #1
 8016bba:	2c00      	cmp	r4, #0
 8016bbc:	d1fa      	bne.n	8016bb4 <strcat+0x4>
 8016bbe:	3b01      	subs	r3, #1
 8016bc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016bc4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016bc8:	2a00      	cmp	r2, #0
 8016bca:	d1f9      	bne.n	8016bc0 <strcat+0x10>
 8016bcc:	bd10      	pop	{r4, pc}
	...

08016bd0 <_localeconv_r>:
 8016bd0:	4800      	ldr	r0, [pc, #0]	@ (8016bd4 <_localeconv_r+0x4>)
 8016bd2:	4770      	bx	lr
 8016bd4:	20001374 	.word	0x20001374

08016bd8 <_close_r>:
 8016bd8:	b538      	push	{r3, r4, r5, lr}
 8016bda:	4d06      	ldr	r5, [pc, #24]	@ (8016bf4 <_close_r+0x1c>)
 8016bdc:	2300      	movs	r3, #0
 8016bde:	4604      	mov	r4, r0
 8016be0:	4608      	mov	r0, r1
 8016be2:	602b      	str	r3, [r5, #0]
 8016be4:	f7ea fbac 	bl	8001340 <_close>
 8016be8:	1c43      	adds	r3, r0, #1
 8016bea:	d102      	bne.n	8016bf2 <_close_r+0x1a>
 8016bec:	682b      	ldr	r3, [r5, #0]
 8016bee:	b103      	cbz	r3, 8016bf2 <_close_r+0x1a>
 8016bf0:	6023      	str	r3, [r4, #0]
 8016bf2:	bd38      	pop	{r3, r4, r5, pc}
 8016bf4:	2000896c 	.word	0x2000896c

08016bf8 <_lseek_r>:
 8016bf8:	b538      	push	{r3, r4, r5, lr}
 8016bfa:	4d07      	ldr	r5, [pc, #28]	@ (8016c18 <_lseek_r+0x20>)
 8016bfc:	4604      	mov	r4, r0
 8016bfe:	4608      	mov	r0, r1
 8016c00:	4611      	mov	r1, r2
 8016c02:	2200      	movs	r2, #0
 8016c04:	602a      	str	r2, [r5, #0]
 8016c06:	461a      	mov	r2, r3
 8016c08:	f7ea fbc1 	bl	800138e <_lseek>
 8016c0c:	1c43      	adds	r3, r0, #1
 8016c0e:	d102      	bne.n	8016c16 <_lseek_r+0x1e>
 8016c10:	682b      	ldr	r3, [r5, #0]
 8016c12:	b103      	cbz	r3, 8016c16 <_lseek_r+0x1e>
 8016c14:	6023      	str	r3, [r4, #0]
 8016c16:	bd38      	pop	{r3, r4, r5, pc}
 8016c18:	2000896c 	.word	0x2000896c

08016c1c <_read_r>:
 8016c1c:	b538      	push	{r3, r4, r5, lr}
 8016c1e:	4d07      	ldr	r5, [pc, #28]	@ (8016c3c <_read_r+0x20>)
 8016c20:	4604      	mov	r4, r0
 8016c22:	4608      	mov	r0, r1
 8016c24:	4611      	mov	r1, r2
 8016c26:	2200      	movs	r2, #0
 8016c28:	602a      	str	r2, [r5, #0]
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	f7ea fb4f 	bl	80012ce <_read>
 8016c30:	1c43      	adds	r3, r0, #1
 8016c32:	d102      	bne.n	8016c3a <_read_r+0x1e>
 8016c34:	682b      	ldr	r3, [r5, #0]
 8016c36:	b103      	cbz	r3, 8016c3a <_read_r+0x1e>
 8016c38:	6023      	str	r3, [r4, #0]
 8016c3a:	bd38      	pop	{r3, r4, r5, pc}
 8016c3c:	2000896c 	.word	0x2000896c

08016c40 <_write_r>:
 8016c40:	b538      	push	{r3, r4, r5, lr}
 8016c42:	4d07      	ldr	r5, [pc, #28]	@ (8016c60 <_write_r+0x20>)
 8016c44:	4604      	mov	r4, r0
 8016c46:	4608      	mov	r0, r1
 8016c48:	4611      	mov	r1, r2
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	602a      	str	r2, [r5, #0]
 8016c4e:	461a      	mov	r2, r3
 8016c50:	f7ea fb5a 	bl	8001308 <_write>
 8016c54:	1c43      	adds	r3, r0, #1
 8016c56:	d102      	bne.n	8016c5e <_write_r+0x1e>
 8016c58:	682b      	ldr	r3, [r5, #0]
 8016c5a:	b103      	cbz	r3, 8016c5e <_write_r+0x1e>
 8016c5c:	6023      	str	r3, [r4, #0]
 8016c5e:	bd38      	pop	{r3, r4, r5, pc}
 8016c60:	2000896c 	.word	0x2000896c

08016c64 <__errno>:
 8016c64:	4b01      	ldr	r3, [pc, #4]	@ (8016c6c <__errno+0x8>)
 8016c66:	6818      	ldr	r0, [r3, #0]
 8016c68:	4770      	bx	lr
 8016c6a:	bf00      	nop
 8016c6c:	20001234 	.word	0x20001234

08016c70 <__libc_init_array>:
 8016c70:	b570      	push	{r4, r5, r6, lr}
 8016c72:	4d0d      	ldr	r5, [pc, #52]	@ (8016ca8 <__libc_init_array+0x38>)
 8016c74:	4c0d      	ldr	r4, [pc, #52]	@ (8016cac <__libc_init_array+0x3c>)
 8016c76:	1b64      	subs	r4, r4, r5
 8016c78:	10a4      	asrs	r4, r4, #2
 8016c7a:	2600      	movs	r6, #0
 8016c7c:	42a6      	cmp	r6, r4
 8016c7e:	d109      	bne.n	8016c94 <__libc_init_array+0x24>
 8016c80:	4d0b      	ldr	r5, [pc, #44]	@ (8016cb0 <__libc_init_array+0x40>)
 8016c82:	4c0c      	ldr	r4, [pc, #48]	@ (8016cb4 <__libc_init_array+0x44>)
 8016c84:	f002 f86e 	bl	8018d64 <_init>
 8016c88:	1b64      	subs	r4, r4, r5
 8016c8a:	10a4      	asrs	r4, r4, #2
 8016c8c:	2600      	movs	r6, #0
 8016c8e:	42a6      	cmp	r6, r4
 8016c90:	d105      	bne.n	8016c9e <__libc_init_array+0x2e>
 8016c92:	bd70      	pop	{r4, r5, r6, pc}
 8016c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c98:	4798      	blx	r3
 8016c9a:	3601      	adds	r6, #1
 8016c9c:	e7ee      	b.n	8016c7c <__libc_init_array+0xc>
 8016c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ca2:	4798      	blx	r3
 8016ca4:	3601      	adds	r6, #1
 8016ca6:	e7f2      	b.n	8016c8e <__libc_init_array+0x1e>
 8016ca8:	0801ac10 	.word	0x0801ac10
 8016cac:	0801ac10 	.word	0x0801ac10
 8016cb0:	0801ac10 	.word	0x0801ac10
 8016cb4:	0801ac14 	.word	0x0801ac14

08016cb8 <__retarget_lock_init_recursive>:
 8016cb8:	4770      	bx	lr

08016cba <__retarget_lock_acquire_recursive>:
 8016cba:	4770      	bx	lr

08016cbc <__retarget_lock_release_recursive>:
 8016cbc:	4770      	bx	lr

08016cbe <strcpy>:
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cc4:	f803 2b01 	strb.w	r2, [r3], #1
 8016cc8:	2a00      	cmp	r2, #0
 8016cca:	d1f9      	bne.n	8016cc0 <strcpy+0x2>
 8016ccc:	4770      	bx	lr

08016cce <memcpy>:
 8016cce:	440a      	add	r2, r1
 8016cd0:	4291      	cmp	r1, r2
 8016cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016cd6:	d100      	bne.n	8016cda <memcpy+0xc>
 8016cd8:	4770      	bx	lr
 8016cda:	b510      	push	{r4, lr}
 8016cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ce4:	4291      	cmp	r1, r2
 8016ce6:	d1f9      	bne.n	8016cdc <memcpy+0xe>
 8016ce8:	bd10      	pop	{r4, pc}

08016cea <quorem>:
 8016cea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cee:	6903      	ldr	r3, [r0, #16]
 8016cf0:	690c      	ldr	r4, [r1, #16]
 8016cf2:	42a3      	cmp	r3, r4
 8016cf4:	4607      	mov	r7, r0
 8016cf6:	db7e      	blt.n	8016df6 <quorem+0x10c>
 8016cf8:	3c01      	subs	r4, #1
 8016cfa:	f101 0814 	add.w	r8, r1, #20
 8016cfe:	00a3      	lsls	r3, r4, #2
 8016d00:	f100 0514 	add.w	r5, r0, #20
 8016d04:	9300      	str	r3, [sp, #0]
 8016d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016d0a:	9301      	str	r3, [sp, #4]
 8016d0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016d14:	3301      	adds	r3, #1
 8016d16:	429a      	cmp	r2, r3
 8016d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016d1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016d20:	d32e      	bcc.n	8016d80 <quorem+0x96>
 8016d22:	f04f 0a00 	mov.w	sl, #0
 8016d26:	46c4      	mov	ip, r8
 8016d28:	46ae      	mov	lr, r5
 8016d2a:	46d3      	mov	fp, sl
 8016d2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016d30:	b298      	uxth	r0, r3
 8016d32:	fb06 a000 	mla	r0, r6, r0, sl
 8016d36:	0c02      	lsrs	r2, r0, #16
 8016d38:	0c1b      	lsrs	r3, r3, #16
 8016d3a:	fb06 2303 	mla	r3, r6, r3, r2
 8016d3e:	f8de 2000 	ldr.w	r2, [lr]
 8016d42:	b280      	uxth	r0, r0
 8016d44:	b292      	uxth	r2, r2
 8016d46:	1a12      	subs	r2, r2, r0
 8016d48:	445a      	add	r2, fp
 8016d4a:	f8de 0000 	ldr.w	r0, [lr]
 8016d4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016d58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016d5c:	b292      	uxth	r2, r2
 8016d5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016d62:	45e1      	cmp	r9, ip
 8016d64:	f84e 2b04 	str.w	r2, [lr], #4
 8016d68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016d6c:	d2de      	bcs.n	8016d2c <quorem+0x42>
 8016d6e:	9b00      	ldr	r3, [sp, #0]
 8016d70:	58eb      	ldr	r3, [r5, r3]
 8016d72:	b92b      	cbnz	r3, 8016d80 <quorem+0x96>
 8016d74:	9b01      	ldr	r3, [sp, #4]
 8016d76:	3b04      	subs	r3, #4
 8016d78:	429d      	cmp	r5, r3
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	d32f      	bcc.n	8016dde <quorem+0xf4>
 8016d7e:	613c      	str	r4, [r7, #16]
 8016d80:	4638      	mov	r0, r7
 8016d82:	f001 f97b 	bl	801807c <__mcmp>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	db25      	blt.n	8016dd6 <quorem+0xec>
 8016d8a:	4629      	mov	r1, r5
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8016d92:	f8d1 c000 	ldr.w	ip, [r1]
 8016d96:	fa1f fe82 	uxth.w	lr, r2
 8016d9a:	fa1f f38c 	uxth.w	r3, ip
 8016d9e:	eba3 030e 	sub.w	r3, r3, lr
 8016da2:	4403      	add	r3, r0
 8016da4:	0c12      	lsrs	r2, r2, #16
 8016da6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016daa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016db4:	45c1      	cmp	r9, r8
 8016db6:	f841 3b04 	str.w	r3, [r1], #4
 8016dba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016dbe:	d2e6      	bcs.n	8016d8e <quorem+0xa4>
 8016dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016dc8:	b922      	cbnz	r2, 8016dd4 <quorem+0xea>
 8016dca:	3b04      	subs	r3, #4
 8016dcc:	429d      	cmp	r5, r3
 8016dce:	461a      	mov	r2, r3
 8016dd0:	d30b      	bcc.n	8016dea <quorem+0x100>
 8016dd2:	613c      	str	r4, [r7, #16]
 8016dd4:	3601      	adds	r6, #1
 8016dd6:	4630      	mov	r0, r6
 8016dd8:	b003      	add	sp, #12
 8016dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dde:	6812      	ldr	r2, [r2, #0]
 8016de0:	3b04      	subs	r3, #4
 8016de2:	2a00      	cmp	r2, #0
 8016de4:	d1cb      	bne.n	8016d7e <quorem+0x94>
 8016de6:	3c01      	subs	r4, #1
 8016de8:	e7c6      	b.n	8016d78 <quorem+0x8e>
 8016dea:	6812      	ldr	r2, [r2, #0]
 8016dec:	3b04      	subs	r3, #4
 8016dee:	2a00      	cmp	r2, #0
 8016df0:	d1ef      	bne.n	8016dd2 <quorem+0xe8>
 8016df2:	3c01      	subs	r4, #1
 8016df4:	e7ea      	b.n	8016dcc <quorem+0xe2>
 8016df6:	2000      	movs	r0, #0
 8016df8:	e7ee      	b.n	8016dd8 <quorem+0xee>
 8016dfa:	0000      	movs	r0, r0
 8016dfc:	0000      	movs	r0, r0
	...

08016e00 <_dtoa_r>:
 8016e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	69c7      	ldr	r7, [r0, #28]
 8016e06:	b099      	sub	sp, #100	@ 0x64
 8016e08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016e0c:	ec55 4b10 	vmov	r4, r5, d0
 8016e10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8016e12:	9109      	str	r1, [sp, #36]	@ 0x24
 8016e14:	4683      	mov	fp, r0
 8016e16:	920e      	str	r2, [sp, #56]	@ 0x38
 8016e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016e1a:	b97f      	cbnz	r7, 8016e3c <_dtoa_r+0x3c>
 8016e1c:	2010      	movs	r0, #16
 8016e1e:	f000 fdfd 	bl	8017a1c <malloc>
 8016e22:	4602      	mov	r2, r0
 8016e24:	f8cb 001c 	str.w	r0, [fp, #28]
 8016e28:	b920      	cbnz	r0, 8016e34 <_dtoa_r+0x34>
 8016e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80170c8 <_dtoa_r+0x2c8>)
 8016e2c:	21ef      	movs	r1, #239	@ 0xef
 8016e2e:	48a7      	ldr	r0, [pc, #668]	@ (80170cc <_dtoa_r+0x2cc>)
 8016e30:	f001 fc5a 	bl	80186e8 <__assert_func>
 8016e34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016e38:	6007      	str	r7, [r0, #0]
 8016e3a:	60c7      	str	r7, [r0, #12]
 8016e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016e40:	6819      	ldr	r1, [r3, #0]
 8016e42:	b159      	cbz	r1, 8016e5c <_dtoa_r+0x5c>
 8016e44:	685a      	ldr	r2, [r3, #4]
 8016e46:	604a      	str	r2, [r1, #4]
 8016e48:	2301      	movs	r3, #1
 8016e4a:	4093      	lsls	r3, r2
 8016e4c:	608b      	str	r3, [r1, #8]
 8016e4e:	4658      	mov	r0, fp
 8016e50:	f000 feda 	bl	8017c08 <_Bfree>
 8016e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	601a      	str	r2, [r3, #0]
 8016e5c:	1e2b      	subs	r3, r5, #0
 8016e5e:	bfb9      	ittee	lt
 8016e60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016e64:	9303      	strlt	r3, [sp, #12]
 8016e66:	2300      	movge	r3, #0
 8016e68:	6033      	strge	r3, [r6, #0]
 8016e6a:	9f03      	ldr	r7, [sp, #12]
 8016e6c:	4b98      	ldr	r3, [pc, #608]	@ (80170d0 <_dtoa_r+0x2d0>)
 8016e6e:	bfbc      	itt	lt
 8016e70:	2201      	movlt	r2, #1
 8016e72:	6032      	strlt	r2, [r6, #0]
 8016e74:	43bb      	bics	r3, r7
 8016e76:	d112      	bne.n	8016e9e <_dtoa_r+0x9e>
 8016e78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016e7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016e7e:	6013      	str	r3, [r2, #0]
 8016e80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e84:	4323      	orrs	r3, r4
 8016e86:	f000 854d 	beq.w	8017924 <_dtoa_r+0xb24>
 8016e8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016e8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80170e4 <_dtoa_r+0x2e4>
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 854f 	beq.w	8017934 <_dtoa_r+0xb34>
 8016e96:	f10a 0303 	add.w	r3, sl, #3
 8016e9a:	f000 bd49 	b.w	8017930 <_dtoa_r+0xb30>
 8016e9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	ec51 0b17 	vmov	r0, r1, d7
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016eae:	f7e9 fe2b 	bl	8000b08 <__aeabi_dcmpeq>
 8016eb2:	4680      	mov	r8, r0
 8016eb4:	b158      	cbz	r0, 8016ece <_dtoa_r+0xce>
 8016eb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016eb8:	2301      	movs	r3, #1
 8016eba:	6013      	str	r3, [r2, #0]
 8016ebc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016ebe:	b113      	cbz	r3, 8016ec6 <_dtoa_r+0xc6>
 8016ec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016ec2:	4b84      	ldr	r3, [pc, #528]	@ (80170d4 <_dtoa_r+0x2d4>)
 8016ec4:	6013      	str	r3, [r2, #0]
 8016ec6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80170e8 <_dtoa_r+0x2e8>
 8016eca:	f000 bd33 	b.w	8017934 <_dtoa_r+0xb34>
 8016ece:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016ed2:	aa16      	add	r2, sp, #88	@ 0x58
 8016ed4:	a917      	add	r1, sp, #92	@ 0x5c
 8016ed6:	4658      	mov	r0, fp
 8016ed8:	f001 f980 	bl	80181dc <__d2b>
 8016edc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016ee0:	4681      	mov	r9, r0
 8016ee2:	2e00      	cmp	r6, #0
 8016ee4:	d077      	beq.n	8016fd6 <_dtoa_r+0x1d6>
 8016ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ee8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8016eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016ef4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8016ef8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016efc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016f00:	4619      	mov	r1, r3
 8016f02:	2200      	movs	r2, #0
 8016f04:	4b74      	ldr	r3, [pc, #464]	@ (80170d8 <_dtoa_r+0x2d8>)
 8016f06:	f7e9 f9df 	bl	80002c8 <__aeabi_dsub>
 8016f0a:	a369      	add	r3, pc, #420	@ (adr r3, 80170b0 <_dtoa_r+0x2b0>)
 8016f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f10:	f7e9 fb92 	bl	8000638 <__aeabi_dmul>
 8016f14:	a368      	add	r3, pc, #416	@ (adr r3, 80170b8 <_dtoa_r+0x2b8>)
 8016f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1a:	f7e9 f9d7 	bl	80002cc <__adddf3>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	4630      	mov	r0, r6
 8016f22:	460d      	mov	r5, r1
 8016f24:	f7e9 fb1e 	bl	8000564 <__aeabi_i2d>
 8016f28:	a365      	add	r3, pc, #404	@ (adr r3, 80170c0 <_dtoa_r+0x2c0>)
 8016f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2e:	f7e9 fb83 	bl	8000638 <__aeabi_dmul>
 8016f32:	4602      	mov	r2, r0
 8016f34:	460b      	mov	r3, r1
 8016f36:	4620      	mov	r0, r4
 8016f38:	4629      	mov	r1, r5
 8016f3a:	f7e9 f9c7 	bl	80002cc <__adddf3>
 8016f3e:	4604      	mov	r4, r0
 8016f40:	460d      	mov	r5, r1
 8016f42:	f7e9 fe29 	bl	8000b98 <__aeabi_d2iz>
 8016f46:	2200      	movs	r2, #0
 8016f48:	4607      	mov	r7, r0
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	4629      	mov	r1, r5
 8016f50:	f7e9 fde4 	bl	8000b1c <__aeabi_dcmplt>
 8016f54:	b140      	cbz	r0, 8016f68 <_dtoa_r+0x168>
 8016f56:	4638      	mov	r0, r7
 8016f58:	f7e9 fb04 	bl	8000564 <__aeabi_i2d>
 8016f5c:	4622      	mov	r2, r4
 8016f5e:	462b      	mov	r3, r5
 8016f60:	f7e9 fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 8016f64:	b900      	cbnz	r0, 8016f68 <_dtoa_r+0x168>
 8016f66:	3f01      	subs	r7, #1
 8016f68:	2f16      	cmp	r7, #22
 8016f6a:	d851      	bhi.n	8017010 <_dtoa_r+0x210>
 8016f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80170dc <_dtoa_r+0x2dc>)
 8016f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f7a:	f7e9 fdcf 	bl	8000b1c <__aeabi_dcmplt>
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	d048      	beq.n	8017014 <_dtoa_r+0x214>
 8016f82:	3f01      	subs	r7, #1
 8016f84:	2300      	movs	r3, #0
 8016f86:	9312      	str	r3, [sp, #72]	@ 0x48
 8016f88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016f8a:	1b9b      	subs	r3, r3, r6
 8016f8c:	1e5a      	subs	r2, r3, #1
 8016f8e:	bf44      	itt	mi
 8016f90:	f1c3 0801 	rsbmi	r8, r3, #1
 8016f94:	2300      	movmi	r3, #0
 8016f96:	9208      	str	r2, [sp, #32]
 8016f98:	bf54      	ite	pl
 8016f9a:	f04f 0800 	movpl.w	r8, #0
 8016f9e:	9308      	strmi	r3, [sp, #32]
 8016fa0:	2f00      	cmp	r7, #0
 8016fa2:	db39      	blt.n	8017018 <_dtoa_r+0x218>
 8016fa4:	9b08      	ldr	r3, [sp, #32]
 8016fa6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8016fa8:	443b      	add	r3, r7
 8016faa:	9308      	str	r3, [sp, #32]
 8016fac:	2300      	movs	r3, #0
 8016fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fb2:	2b09      	cmp	r3, #9
 8016fb4:	d864      	bhi.n	8017080 <_dtoa_r+0x280>
 8016fb6:	2b05      	cmp	r3, #5
 8016fb8:	bfc4      	itt	gt
 8016fba:	3b04      	subgt	r3, #4
 8016fbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8016fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fc0:	f1a3 0302 	sub.w	r3, r3, #2
 8016fc4:	bfcc      	ite	gt
 8016fc6:	2400      	movgt	r4, #0
 8016fc8:	2401      	movle	r4, #1
 8016fca:	2b03      	cmp	r3, #3
 8016fcc:	d863      	bhi.n	8017096 <_dtoa_r+0x296>
 8016fce:	e8df f003 	tbb	[pc, r3]
 8016fd2:	372a      	.short	0x372a
 8016fd4:	5535      	.short	0x5535
 8016fd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8016fda:	441e      	add	r6, r3
 8016fdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8016fe0:	2b20      	cmp	r3, #32
 8016fe2:	bfc1      	itttt	gt
 8016fe4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8016fe8:	409f      	lslgt	r7, r3
 8016fea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8016fee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8016ff2:	bfd6      	itet	le
 8016ff4:	f1c3 0320 	rsble	r3, r3, #32
 8016ff8:	ea47 0003 	orrgt.w	r0, r7, r3
 8016ffc:	fa04 f003 	lslle.w	r0, r4, r3
 8017000:	f7e9 faa0 	bl	8000544 <__aeabi_ui2d>
 8017004:	2201      	movs	r2, #1
 8017006:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801700a:	3e01      	subs	r6, #1
 801700c:	9214      	str	r2, [sp, #80]	@ 0x50
 801700e:	e777      	b.n	8016f00 <_dtoa_r+0x100>
 8017010:	2301      	movs	r3, #1
 8017012:	e7b8      	b.n	8016f86 <_dtoa_r+0x186>
 8017014:	9012      	str	r0, [sp, #72]	@ 0x48
 8017016:	e7b7      	b.n	8016f88 <_dtoa_r+0x188>
 8017018:	427b      	negs	r3, r7
 801701a:	930a      	str	r3, [sp, #40]	@ 0x28
 801701c:	2300      	movs	r3, #0
 801701e:	eba8 0807 	sub.w	r8, r8, r7
 8017022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017024:	e7c4      	b.n	8016fb0 <_dtoa_r+0x1b0>
 8017026:	2300      	movs	r3, #0
 8017028:	930b      	str	r3, [sp, #44]	@ 0x2c
 801702a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801702c:	2b00      	cmp	r3, #0
 801702e:	dc35      	bgt.n	801709c <_dtoa_r+0x29c>
 8017030:	2301      	movs	r3, #1
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	9307      	str	r3, [sp, #28]
 8017036:	461a      	mov	r2, r3
 8017038:	920e      	str	r2, [sp, #56]	@ 0x38
 801703a:	e00b      	b.n	8017054 <_dtoa_r+0x254>
 801703c:	2301      	movs	r3, #1
 801703e:	e7f3      	b.n	8017028 <_dtoa_r+0x228>
 8017040:	2300      	movs	r3, #0
 8017042:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017046:	18fb      	adds	r3, r7, r3
 8017048:	9300      	str	r3, [sp, #0]
 801704a:	3301      	adds	r3, #1
 801704c:	2b01      	cmp	r3, #1
 801704e:	9307      	str	r3, [sp, #28]
 8017050:	bfb8      	it	lt
 8017052:	2301      	movlt	r3, #1
 8017054:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017058:	2100      	movs	r1, #0
 801705a:	2204      	movs	r2, #4
 801705c:	f102 0514 	add.w	r5, r2, #20
 8017060:	429d      	cmp	r5, r3
 8017062:	d91f      	bls.n	80170a4 <_dtoa_r+0x2a4>
 8017064:	6041      	str	r1, [r0, #4]
 8017066:	4658      	mov	r0, fp
 8017068:	f000 fd8e 	bl	8017b88 <_Balloc>
 801706c:	4682      	mov	sl, r0
 801706e:	2800      	cmp	r0, #0
 8017070:	d13c      	bne.n	80170ec <_dtoa_r+0x2ec>
 8017072:	4b1b      	ldr	r3, [pc, #108]	@ (80170e0 <_dtoa_r+0x2e0>)
 8017074:	4602      	mov	r2, r0
 8017076:	f240 11af 	movw	r1, #431	@ 0x1af
 801707a:	e6d8      	b.n	8016e2e <_dtoa_r+0x2e>
 801707c:	2301      	movs	r3, #1
 801707e:	e7e0      	b.n	8017042 <_dtoa_r+0x242>
 8017080:	2401      	movs	r4, #1
 8017082:	2300      	movs	r3, #0
 8017084:	9309      	str	r3, [sp, #36]	@ 0x24
 8017086:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017088:	f04f 33ff 	mov.w	r3, #4294967295
 801708c:	9300      	str	r3, [sp, #0]
 801708e:	9307      	str	r3, [sp, #28]
 8017090:	2200      	movs	r2, #0
 8017092:	2312      	movs	r3, #18
 8017094:	e7d0      	b.n	8017038 <_dtoa_r+0x238>
 8017096:	2301      	movs	r3, #1
 8017098:	930b      	str	r3, [sp, #44]	@ 0x2c
 801709a:	e7f5      	b.n	8017088 <_dtoa_r+0x288>
 801709c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801709e:	9300      	str	r3, [sp, #0]
 80170a0:	9307      	str	r3, [sp, #28]
 80170a2:	e7d7      	b.n	8017054 <_dtoa_r+0x254>
 80170a4:	3101      	adds	r1, #1
 80170a6:	0052      	lsls	r2, r2, #1
 80170a8:	e7d8      	b.n	801705c <_dtoa_r+0x25c>
 80170aa:	bf00      	nop
 80170ac:	f3af 8000 	nop.w
 80170b0:	636f4361 	.word	0x636f4361
 80170b4:	3fd287a7 	.word	0x3fd287a7
 80170b8:	8b60c8b3 	.word	0x8b60c8b3
 80170bc:	3fc68a28 	.word	0x3fc68a28
 80170c0:	509f79fb 	.word	0x509f79fb
 80170c4:	3fd34413 	.word	0x3fd34413
 80170c8:	0801a9d6 	.word	0x0801a9d6
 80170cc:	0801a9ed 	.word	0x0801a9ed
 80170d0:	7ff00000 	.word	0x7ff00000
 80170d4:	0801a9a6 	.word	0x0801a9a6
 80170d8:	3ff80000 	.word	0x3ff80000
 80170dc:	0801aae8 	.word	0x0801aae8
 80170e0:	0801aa45 	.word	0x0801aa45
 80170e4:	0801a9d2 	.word	0x0801a9d2
 80170e8:	0801a9a5 	.word	0x0801a9a5
 80170ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80170f0:	6018      	str	r0, [r3, #0]
 80170f2:	9b07      	ldr	r3, [sp, #28]
 80170f4:	2b0e      	cmp	r3, #14
 80170f6:	f200 80a4 	bhi.w	8017242 <_dtoa_r+0x442>
 80170fa:	2c00      	cmp	r4, #0
 80170fc:	f000 80a1 	beq.w	8017242 <_dtoa_r+0x442>
 8017100:	2f00      	cmp	r7, #0
 8017102:	dd33      	ble.n	801716c <_dtoa_r+0x36c>
 8017104:	4bad      	ldr	r3, [pc, #692]	@ (80173bc <_dtoa_r+0x5bc>)
 8017106:	f007 020f 	and.w	r2, r7, #15
 801710a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801710e:	ed93 7b00 	vldr	d7, [r3]
 8017112:	05f8      	lsls	r0, r7, #23
 8017114:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017118:	ea4f 1427 	mov.w	r4, r7, asr #4
 801711c:	d516      	bpl.n	801714c <_dtoa_r+0x34c>
 801711e:	4ba8      	ldr	r3, [pc, #672]	@ (80173c0 <_dtoa_r+0x5c0>)
 8017120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017128:	f7e9 fbb0 	bl	800088c <__aeabi_ddiv>
 801712c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017130:	f004 040f 	and.w	r4, r4, #15
 8017134:	2603      	movs	r6, #3
 8017136:	4da2      	ldr	r5, [pc, #648]	@ (80173c0 <_dtoa_r+0x5c0>)
 8017138:	b954      	cbnz	r4, 8017150 <_dtoa_r+0x350>
 801713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801713e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017142:	f7e9 fba3 	bl	800088c <__aeabi_ddiv>
 8017146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801714a:	e028      	b.n	801719e <_dtoa_r+0x39e>
 801714c:	2602      	movs	r6, #2
 801714e:	e7f2      	b.n	8017136 <_dtoa_r+0x336>
 8017150:	07e1      	lsls	r1, r4, #31
 8017152:	d508      	bpl.n	8017166 <_dtoa_r+0x366>
 8017154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017158:	e9d5 2300 	ldrd	r2, r3, [r5]
 801715c:	f7e9 fa6c 	bl	8000638 <__aeabi_dmul>
 8017160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017164:	3601      	adds	r6, #1
 8017166:	1064      	asrs	r4, r4, #1
 8017168:	3508      	adds	r5, #8
 801716a:	e7e5      	b.n	8017138 <_dtoa_r+0x338>
 801716c:	f000 80d2 	beq.w	8017314 <_dtoa_r+0x514>
 8017170:	427c      	negs	r4, r7
 8017172:	4b92      	ldr	r3, [pc, #584]	@ (80173bc <_dtoa_r+0x5bc>)
 8017174:	4d92      	ldr	r5, [pc, #584]	@ (80173c0 <_dtoa_r+0x5c0>)
 8017176:	f004 020f 	and.w	r2, r4, #15
 801717a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017186:	f7e9 fa57 	bl	8000638 <__aeabi_dmul>
 801718a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801718e:	1124      	asrs	r4, r4, #4
 8017190:	2300      	movs	r3, #0
 8017192:	2602      	movs	r6, #2
 8017194:	2c00      	cmp	r4, #0
 8017196:	f040 80b2 	bne.w	80172fe <_dtoa_r+0x4fe>
 801719a:	2b00      	cmp	r3, #0
 801719c:	d1d3      	bne.n	8017146 <_dtoa_r+0x346>
 801719e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80171a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f000 80b7 	beq.w	8017318 <_dtoa_r+0x518>
 80171aa:	4b86      	ldr	r3, [pc, #536]	@ (80173c4 <_dtoa_r+0x5c4>)
 80171ac:	2200      	movs	r2, #0
 80171ae:	4620      	mov	r0, r4
 80171b0:	4629      	mov	r1, r5
 80171b2:	f7e9 fcb3 	bl	8000b1c <__aeabi_dcmplt>
 80171b6:	2800      	cmp	r0, #0
 80171b8:	f000 80ae 	beq.w	8017318 <_dtoa_r+0x518>
 80171bc:	9b07      	ldr	r3, [sp, #28]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	f000 80aa 	beq.w	8017318 <_dtoa_r+0x518>
 80171c4:	9b00      	ldr	r3, [sp, #0]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	dd37      	ble.n	801723a <_dtoa_r+0x43a>
 80171ca:	1e7b      	subs	r3, r7, #1
 80171cc:	9304      	str	r3, [sp, #16]
 80171ce:	4620      	mov	r0, r4
 80171d0:	4b7d      	ldr	r3, [pc, #500]	@ (80173c8 <_dtoa_r+0x5c8>)
 80171d2:	2200      	movs	r2, #0
 80171d4:	4629      	mov	r1, r5
 80171d6:	f7e9 fa2f 	bl	8000638 <__aeabi_dmul>
 80171da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171de:	9c00      	ldr	r4, [sp, #0]
 80171e0:	3601      	adds	r6, #1
 80171e2:	4630      	mov	r0, r6
 80171e4:	f7e9 f9be 	bl	8000564 <__aeabi_i2d>
 80171e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171ec:	f7e9 fa24 	bl	8000638 <__aeabi_dmul>
 80171f0:	4b76      	ldr	r3, [pc, #472]	@ (80173cc <_dtoa_r+0x5cc>)
 80171f2:	2200      	movs	r2, #0
 80171f4:	f7e9 f86a 	bl	80002cc <__adddf3>
 80171f8:	4605      	mov	r5, r0
 80171fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80171fe:	2c00      	cmp	r4, #0
 8017200:	f040 808d 	bne.w	801731e <_dtoa_r+0x51e>
 8017204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017208:	4b71      	ldr	r3, [pc, #452]	@ (80173d0 <_dtoa_r+0x5d0>)
 801720a:	2200      	movs	r2, #0
 801720c:	f7e9 f85c 	bl	80002c8 <__aeabi_dsub>
 8017210:	4602      	mov	r2, r0
 8017212:	460b      	mov	r3, r1
 8017214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017218:	462a      	mov	r2, r5
 801721a:	4633      	mov	r3, r6
 801721c:	f7e9 fc9c 	bl	8000b58 <__aeabi_dcmpgt>
 8017220:	2800      	cmp	r0, #0
 8017222:	f040 828b 	bne.w	801773c <_dtoa_r+0x93c>
 8017226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801722a:	462a      	mov	r2, r5
 801722c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017230:	f7e9 fc74 	bl	8000b1c <__aeabi_dcmplt>
 8017234:	2800      	cmp	r0, #0
 8017236:	f040 8128 	bne.w	801748a <_dtoa_r+0x68a>
 801723a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801723e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017244:	2b00      	cmp	r3, #0
 8017246:	f2c0 815a 	blt.w	80174fe <_dtoa_r+0x6fe>
 801724a:	2f0e      	cmp	r7, #14
 801724c:	f300 8157 	bgt.w	80174fe <_dtoa_r+0x6fe>
 8017250:	4b5a      	ldr	r3, [pc, #360]	@ (80173bc <_dtoa_r+0x5bc>)
 8017252:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017256:	ed93 7b00 	vldr	d7, [r3]
 801725a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801725c:	2b00      	cmp	r3, #0
 801725e:	ed8d 7b00 	vstr	d7, [sp]
 8017262:	da03      	bge.n	801726c <_dtoa_r+0x46c>
 8017264:	9b07      	ldr	r3, [sp, #28]
 8017266:	2b00      	cmp	r3, #0
 8017268:	f340 8101 	ble.w	801746e <_dtoa_r+0x66e>
 801726c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017270:	4656      	mov	r6, sl
 8017272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017276:	4620      	mov	r0, r4
 8017278:	4629      	mov	r1, r5
 801727a:	f7e9 fb07 	bl	800088c <__aeabi_ddiv>
 801727e:	f7e9 fc8b 	bl	8000b98 <__aeabi_d2iz>
 8017282:	4680      	mov	r8, r0
 8017284:	f7e9 f96e 	bl	8000564 <__aeabi_i2d>
 8017288:	e9dd 2300 	ldrd	r2, r3, [sp]
 801728c:	f7e9 f9d4 	bl	8000638 <__aeabi_dmul>
 8017290:	4602      	mov	r2, r0
 8017292:	460b      	mov	r3, r1
 8017294:	4620      	mov	r0, r4
 8017296:	4629      	mov	r1, r5
 8017298:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801729c:	f7e9 f814 	bl	80002c8 <__aeabi_dsub>
 80172a0:	f806 4b01 	strb.w	r4, [r6], #1
 80172a4:	9d07      	ldr	r5, [sp, #28]
 80172a6:	eba6 040a 	sub.w	r4, r6, sl
 80172aa:	42a5      	cmp	r5, r4
 80172ac:	4602      	mov	r2, r0
 80172ae:	460b      	mov	r3, r1
 80172b0:	f040 8117 	bne.w	80174e2 <_dtoa_r+0x6e2>
 80172b4:	f7e9 f80a 	bl	80002cc <__adddf3>
 80172b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172bc:	4604      	mov	r4, r0
 80172be:	460d      	mov	r5, r1
 80172c0:	f7e9 fc4a 	bl	8000b58 <__aeabi_dcmpgt>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f040 80f9 	bne.w	80174bc <_dtoa_r+0x6bc>
 80172ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172ce:	4620      	mov	r0, r4
 80172d0:	4629      	mov	r1, r5
 80172d2:	f7e9 fc19 	bl	8000b08 <__aeabi_dcmpeq>
 80172d6:	b118      	cbz	r0, 80172e0 <_dtoa_r+0x4e0>
 80172d8:	f018 0f01 	tst.w	r8, #1
 80172dc:	f040 80ee 	bne.w	80174bc <_dtoa_r+0x6bc>
 80172e0:	4649      	mov	r1, r9
 80172e2:	4658      	mov	r0, fp
 80172e4:	f000 fc90 	bl	8017c08 <_Bfree>
 80172e8:	2300      	movs	r3, #0
 80172ea:	7033      	strb	r3, [r6, #0]
 80172ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80172ee:	3701      	adds	r7, #1
 80172f0:	601f      	str	r7, [r3, #0]
 80172f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	f000 831d 	beq.w	8017934 <_dtoa_r+0xb34>
 80172fa:	601e      	str	r6, [r3, #0]
 80172fc:	e31a      	b.n	8017934 <_dtoa_r+0xb34>
 80172fe:	07e2      	lsls	r2, r4, #31
 8017300:	d505      	bpl.n	801730e <_dtoa_r+0x50e>
 8017302:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017306:	f7e9 f997 	bl	8000638 <__aeabi_dmul>
 801730a:	3601      	adds	r6, #1
 801730c:	2301      	movs	r3, #1
 801730e:	1064      	asrs	r4, r4, #1
 8017310:	3508      	adds	r5, #8
 8017312:	e73f      	b.n	8017194 <_dtoa_r+0x394>
 8017314:	2602      	movs	r6, #2
 8017316:	e742      	b.n	801719e <_dtoa_r+0x39e>
 8017318:	9c07      	ldr	r4, [sp, #28]
 801731a:	9704      	str	r7, [sp, #16]
 801731c:	e761      	b.n	80171e2 <_dtoa_r+0x3e2>
 801731e:	4b27      	ldr	r3, [pc, #156]	@ (80173bc <_dtoa_r+0x5bc>)
 8017320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017322:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017326:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801732a:	4454      	add	r4, sl
 801732c:	2900      	cmp	r1, #0
 801732e:	d053      	beq.n	80173d8 <_dtoa_r+0x5d8>
 8017330:	4928      	ldr	r1, [pc, #160]	@ (80173d4 <_dtoa_r+0x5d4>)
 8017332:	2000      	movs	r0, #0
 8017334:	f7e9 faaa 	bl	800088c <__aeabi_ddiv>
 8017338:	4633      	mov	r3, r6
 801733a:	462a      	mov	r2, r5
 801733c:	f7e8 ffc4 	bl	80002c8 <__aeabi_dsub>
 8017340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017344:	4656      	mov	r6, sl
 8017346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801734a:	f7e9 fc25 	bl	8000b98 <__aeabi_d2iz>
 801734e:	4605      	mov	r5, r0
 8017350:	f7e9 f908 	bl	8000564 <__aeabi_i2d>
 8017354:	4602      	mov	r2, r0
 8017356:	460b      	mov	r3, r1
 8017358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801735c:	f7e8 ffb4 	bl	80002c8 <__aeabi_dsub>
 8017360:	3530      	adds	r5, #48	@ 0x30
 8017362:	4602      	mov	r2, r0
 8017364:	460b      	mov	r3, r1
 8017366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801736a:	f806 5b01 	strb.w	r5, [r6], #1
 801736e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017372:	f7e9 fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8017376:	2800      	cmp	r0, #0
 8017378:	d171      	bne.n	801745e <_dtoa_r+0x65e>
 801737a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801737e:	4911      	ldr	r1, [pc, #68]	@ (80173c4 <_dtoa_r+0x5c4>)
 8017380:	2000      	movs	r0, #0
 8017382:	f7e8 ffa1 	bl	80002c8 <__aeabi_dsub>
 8017386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801738a:	f7e9 fbc7 	bl	8000b1c <__aeabi_dcmplt>
 801738e:	2800      	cmp	r0, #0
 8017390:	f040 8095 	bne.w	80174be <_dtoa_r+0x6be>
 8017394:	42a6      	cmp	r6, r4
 8017396:	f43f af50 	beq.w	801723a <_dtoa_r+0x43a>
 801739a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801739e:	4b0a      	ldr	r3, [pc, #40]	@ (80173c8 <_dtoa_r+0x5c8>)
 80173a0:	2200      	movs	r2, #0
 80173a2:	f7e9 f949 	bl	8000638 <__aeabi_dmul>
 80173a6:	4b08      	ldr	r3, [pc, #32]	@ (80173c8 <_dtoa_r+0x5c8>)
 80173a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80173ac:	2200      	movs	r2, #0
 80173ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173b2:	f7e9 f941 	bl	8000638 <__aeabi_dmul>
 80173b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173ba:	e7c4      	b.n	8017346 <_dtoa_r+0x546>
 80173bc:	0801aae8 	.word	0x0801aae8
 80173c0:	0801aac0 	.word	0x0801aac0
 80173c4:	3ff00000 	.word	0x3ff00000
 80173c8:	40240000 	.word	0x40240000
 80173cc:	401c0000 	.word	0x401c0000
 80173d0:	40140000 	.word	0x40140000
 80173d4:	3fe00000 	.word	0x3fe00000
 80173d8:	4631      	mov	r1, r6
 80173da:	4628      	mov	r0, r5
 80173dc:	f7e9 f92c 	bl	8000638 <__aeabi_dmul>
 80173e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80173e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80173e6:	4656      	mov	r6, sl
 80173e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173ec:	f7e9 fbd4 	bl	8000b98 <__aeabi_d2iz>
 80173f0:	4605      	mov	r5, r0
 80173f2:	f7e9 f8b7 	bl	8000564 <__aeabi_i2d>
 80173f6:	4602      	mov	r2, r0
 80173f8:	460b      	mov	r3, r1
 80173fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173fe:	f7e8 ff63 	bl	80002c8 <__aeabi_dsub>
 8017402:	3530      	adds	r5, #48	@ 0x30
 8017404:	f806 5b01 	strb.w	r5, [r6], #1
 8017408:	4602      	mov	r2, r0
 801740a:	460b      	mov	r3, r1
 801740c:	42a6      	cmp	r6, r4
 801740e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017412:	f04f 0200 	mov.w	r2, #0
 8017416:	d124      	bne.n	8017462 <_dtoa_r+0x662>
 8017418:	4bac      	ldr	r3, [pc, #688]	@ (80176cc <_dtoa_r+0x8cc>)
 801741a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801741e:	f7e8 ff55 	bl	80002cc <__adddf3>
 8017422:	4602      	mov	r2, r0
 8017424:	460b      	mov	r3, r1
 8017426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801742a:	f7e9 fb95 	bl	8000b58 <__aeabi_dcmpgt>
 801742e:	2800      	cmp	r0, #0
 8017430:	d145      	bne.n	80174be <_dtoa_r+0x6be>
 8017432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017436:	49a5      	ldr	r1, [pc, #660]	@ (80176cc <_dtoa_r+0x8cc>)
 8017438:	2000      	movs	r0, #0
 801743a:	f7e8 ff45 	bl	80002c8 <__aeabi_dsub>
 801743e:	4602      	mov	r2, r0
 8017440:	460b      	mov	r3, r1
 8017442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017446:	f7e9 fb69 	bl	8000b1c <__aeabi_dcmplt>
 801744a:	2800      	cmp	r0, #0
 801744c:	f43f aef5 	beq.w	801723a <_dtoa_r+0x43a>
 8017450:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017452:	1e73      	subs	r3, r6, #1
 8017454:	9315      	str	r3, [sp, #84]	@ 0x54
 8017456:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801745a:	2b30      	cmp	r3, #48	@ 0x30
 801745c:	d0f8      	beq.n	8017450 <_dtoa_r+0x650>
 801745e:	9f04      	ldr	r7, [sp, #16]
 8017460:	e73e      	b.n	80172e0 <_dtoa_r+0x4e0>
 8017462:	4b9b      	ldr	r3, [pc, #620]	@ (80176d0 <_dtoa_r+0x8d0>)
 8017464:	f7e9 f8e8 	bl	8000638 <__aeabi_dmul>
 8017468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801746c:	e7bc      	b.n	80173e8 <_dtoa_r+0x5e8>
 801746e:	d10c      	bne.n	801748a <_dtoa_r+0x68a>
 8017470:	4b98      	ldr	r3, [pc, #608]	@ (80176d4 <_dtoa_r+0x8d4>)
 8017472:	2200      	movs	r2, #0
 8017474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017478:	f7e9 f8de 	bl	8000638 <__aeabi_dmul>
 801747c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017480:	f7e9 fb60 	bl	8000b44 <__aeabi_dcmpge>
 8017484:	2800      	cmp	r0, #0
 8017486:	f000 8157 	beq.w	8017738 <_dtoa_r+0x938>
 801748a:	2400      	movs	r4, #0
 801748c:	4625      	mov	r5, r4
 801748e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017490:	43db      	mvns	r3, r3
 8017492:	9304      	str	r3, [sp, #16]
 8017494:	4656      	mov	r6, sl
 8017496:	2700      	movs	r7, #0
 8017498:	4621      	mov	r1, r4
 801749a:	4658      	mov	r0, fp
 801749c:	f000 fbb4 	bl	8017c08 <_Bfree>
 80174a0:	2d00      	cmp	r5, #0
 80174a2:	d0dc      	beq.n	801745e <_dtoa_r+0x65e>
 80174a4:	b12f      	cbz	r7, 80174b2 <_dtoa_r+0x6b2>
 80174a6:	42af      	cmp	r7, r5
 80174a8:	d003      	beq.n	80174b2 <_dtoa_r+0x6b2>
 80174aa:	4639      	mov	r1, r7
 80174ac:	4658      	mov	r0, fp
 80174ae:	f000 fbab 	bl	8017c08 <_Bfree>
 80174b2:	4629      	mov	r1, r5
 80174b4:	4658      	mov	r0, fp
 80174b6:	f000 fba7 	bl	8017c08 <_Bfree>
 80174ba:	e7d0      	b.n	801745e <_dtoa_r+0x65e>
 80174bc:	9704      	str	r7, [sp, #16]
 80174be:	4633      	mov	r3, r6
 80174c0:	461e      	mov	r6, r3
 80174c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80174c6:	2a39      	cmp	r2, #57	@ 0x39
 80174c8:	d107      	bne.n	80174da <_dtoa_r+0x6da>
 80174ca:	459a      	cmp	sl, r3
 80174cc:	d1f8      	bne.n	80174c0 <_dtoa_r+0x6c0>
 80174ce:	9a04      	ldr	r2, [sp, #16]
 80174d0:	3201      	adds	r2, #1
 80174d2:	9204      	str	r2, [sp, #16]
 80174d4:	2230      	movs	r2, #48	@ 0x30
 80174d6:	f88a 2000 	strb.w	r2, [sl]
 80174da:	781a      	ldrb	r2, [r3, #0]
 80174dc:	3201      	adds	r2, #1
 80174de:	701a      	strb	r2, [r3, #0]
 80174e0:	e7bd      	b.n	801745e <_dtoa_r+0x65e>
 80174e2:	4b7b      	ldr	r3, [pc, #492]	@ (80176d0 <_dtoa_r+0x8d0>)
 80174e4:	2200      	movs	r2, #0
 80174e6:	f7e9 f8a7 	bl	8000638 <__aeabi_dmul>
 80174ea:	2200      	movs	r2, #0
 80174ec:	2300      	movs	r3, #0
 80174ee:	4604      	mov	r4, r0
 80174f0:	460d      	mov	r5, r1
 80174f2:	f7e9 fb09 	bl	8000b08 <__aeabi_dcmpeq>
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f43f aebb 	beq.w	8017272 <_dtoa_r+0x472>
 80174fc:	e6f0      	b.n	80172e0 <_dtoa_r+0x4e0>
 80174fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017500:	2a00      	cmp	r2, #0
 8017502:	f000 80db 	beq.w	80176bc <_dtoa_r+0x8bc>
 8017506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017508:	2a01      	cmp	r2, #1
 801750a:	f300 80bf 	bgt.w	801768c <_dtoa_r+0x88c>
 801750e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017510:	2a00      	cmp	r2, #0
 8017512:	f000 80b7 	beq.w	8017684 <_dtoa_r+0x884>
 8017516:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801751a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801751c:	4646      	mov	r6, r8
 801751e:	9a08      	ldr	r2, [sp, #32]
 8017520:	2101      	movs	r1, #1
 8017522:	441a      	add	r2, r3
 8017524:	4658      	mov	r0, fp
 8017526:	4498      	add	r8, r3
 8017528:	9208      	str	r2, [sp, #32]
 801752a:	f000 fc21 	bl	8017d70 <__i2b>
 801752e:	4605      	mov	r5, r0
 8017530:	b15e      	cbz	r6, 801754a <_dtoa_r+0x74a>
 8017532:	9b08      	ldr	r3, [sp, #32]
 8017534:	2b00      	cmp	r3, #0
 8017536:	dd08      	ble.n	801754a <_dtoa_r+0x74a>
 8017538:	42b3      	cmp	r3, r6
 801753a:	9a08      	ldr	r2, [sp, #32]
 801753c:	bfa8      	it	ge
 801753e:	4633      	movge	r3, r6
 8017540:	eba8 0803 	sub.w	r8, r8, r3
 8017544:	1af6      	subs	r6, r6, r3
 8017546:	1ad3      	subs	r3, r2, r3
 8017548:	9308      	str	r3, [sp, #32]
 801754a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801754c:	b1f3      	cbz	r3, 801758c <_dtoa_r+0x78c>
 801754e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017550:	2b00      	cmp	r3, #0
 8017552:	f000 80b7 	beq.w	80176c4 <_dtoa_r+0x8c4>
 8017556:	b18c      	cbz	r4, 801757c <_dtoa_r+0x77c>
 8017558:	4629      	mov	r1, r5
 801755a:	4622      	mov	r2, r4
 801755c:	4658      	mov	r0, fp
 801755e:	f000 fcc7 	bl	8017ef0 <__pow5mult>
 8017562:	464a      	mov	r2, r9
 8017564:	4601      	mov	r1, r0
 8017566:	4605      	mov	r5, r0
 8017568:	4658      	mov	r0, fp
 801756a:	f000 fc17 	bl	8017d9c <__multiply>
 801756e:	4649      	mov	r1, r9
 8017570:	9004      	str	r0, [sp, #16]
 8017572:	4658      	mov	r0, fp
 8017574:	f000 fb48 	bl	8017c08 <_Bfree>
 8017578:	9b04      	ldr	r3, [sp, #16]
 801757a:	4699      	mov	r9, r3
 801757c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801757e:	1b1a      	subs	r2, r3, r4
 8017580:	d004      	beq.n	801758c <_dtoa_r+0x78c>
 8017582:	4649      	mov	r1, r9
 8017584:	4658      	mov	r0, fp
 8017586:	f000 fcb3 	bl	8017ef0 <__pow5mult>
 801758a:	4681      	mov	r9, r0
 801758c:	2101      	movs	r1, #1
 801758e:	4658      	mov	r0, fp
 8017590:	f000 fbee 	bl	8017d70 <__i2b>
 8017594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017596:	4604      	mov	r4, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	f000 81cf 	beq.w	801793c <_dtoa_r+0xb3c>
 801759e:	461a      	mov	r2, r3
 80175a0:	4601      	mov	r1, r0
 80175a2:	4658      	mov	r0, fp
 80175a4:	f000 fca4 	bl	8017ef0 <__pow5mult>
 80175a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	4604      	mov	r4, r0
 80175ae:	f300 8095 	bgt.w	80176dc <_dtoa_r+0x8dc>
 80175b2:	9b02      	ldr	r3, [sp, #8]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f040 8087 	bne.w	80176c8 <_dtoa_r+0x8c8>
 80175ba:	9b03      	ldr	r3, [sp, #12]
 80175bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	f040 8089 	bne.w	80176d8 <_dtoa_r+0x8d8>
 80175c6:	9b03      	ldr	r3, [sp, #12]
 80175c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80175cc:	0d1b      	lsrs	r3, r3, #20
 80175ce:	051b      	lsls	r3, r3, #20
 80175d0:	b12b      	cbz	r3, 80175de <_dtoa_r+0x7de>
 80175d2:	9b08      	ldr	r3, [sp, #32]
 80175d4:	3301      	adds	r3, #1
 80175d6:	9308      	str	r3, [sp, #32]
 80175d8:	f108 0801 	add.w	r8, r8, #1
 80175dc:	2301      	movs	r3, #1
 80175de:	930a      	str	r3, [sp, #40]	@ 0x28
 80175e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 81b0 	beq.w	8017948 <_dtoa_r+0xb48>
 80175e8:	6923      	ldr	r3, [r4, #16]
 80175ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80175ee:	6918      	ldr	r0, [r3, #16]
 80175f0:	f000 fb72 	bl	8017cd8 <__hi0bits>
 80175f4:	f1c0 0020 	rsb	r0, r0, #32
 80175f8:	9b08      	ldr	r3, [sp, #32]
 80175fa:	4418      	add	r0, r3
 80175fc:	f010 001f 	ands.w	r0, r0, #31
 8017600:	d077      	beq.n	80176f2 <_dtoa_r+0x8f2>
 8017602:	f1c0 0320 	rsb	r3, r0, #32
 8017606:	2b04      	cmp	r3, #4
 8017608:	dd6b      	ble.n	80176e2 <_dtoa_r+0x8e2>
 801760a:	9b08      	ldr	r3, [sp, #32]
 801760c:	f1c0 001c 	rsb	r0, r0, #28
 8017610:	4403      	add	r3, r0
 8017612:	4480      	add	r8, r0
 8017614:	4406      	add	r6, r0
 8017616:	9308      	str	r3, [sp, #32]
 8017618:	f1b8 0f00 	cmp.w	r8, #0
 801761c:	dd05      	ble.n	801762a <_dtoa_r+0x82a>
 801761e:	4649      	mov	r1, r9
 8017620:	4642      	mov	r2, r8
 8017622:	4658      	mov	r0, fp
 8017624:	f000 fcbe 	bl	8017fa4 <__lshift>
 8017628:	4681      	mov	r9, r0
 801762a:	9b08      	ldr	r3, [sp, #32]
 801762c:	2b00      	cmp	r3, #0
 801762e:	dd05      	ble.n	801763c <_dtoa_r+0x83c>
 8017630:	4621      	mov	r1, r4
 8017632:	461a      	mov	r2, r3
 8017634:	4658      	mov	r0, fp
 8017636:	f000 fcb5 	bl	8017fa4 <__lshift>
 801763a:	4604      	mov	r4, r0
 801763c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801763e:	2b00      	cmp	r3, #0
 8017640:	d059      	beq.n	80176f6 <_dtoa_r+0x8f6>
 8017642:	4621      	mov	r1, r4
 8017644:	4648      	mov	r0, r9
 8017646:	f000 fd19 	bl	801807c <__mcmp>
 801764a:	2800      	cmp	r0, #0
 801764c:	da53      	bge.n	80176f6 <_dtoa_r+0x8f6>
 801764e:	1e7b      	subs	r3, r7, #1
 8017650:	9304      	str	r3, [sp, #16]
 8017652:	4649      	mov	r1, r9
 8017654:	2300      	movs	r3, #0
 8017656:	220a      	movs	r2, #10
 8017658:	4658      	mov	r0, fp
 801765a:	f000 faf7 	bl	8017c4c <__multadd>
 801765e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017660:	4681      	mov	r9, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	f000 8172 	beq.w	801794c <_dtoa_r+0xb4c>
 8017668:	2300      	movs	r3, #0
 801766a:	4629      	mov	r1, r5
 801766c:	220a      	movs	r2, #10
 801766e:	4658      	mov	r0, fp
 8017670:	f000 faec 	bl	8017c4c <__multadd>
 8017674:	9b00      	ldr	r3, [sp, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	4605      	mov	r5, r0
 801767a:	dc67      	bgt.n	801774c <_dtoa_r+0x94c>
 801767c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801767e:	2b02      	cmp	r3, #2
 8017680:	dc41      	bgt.n	8017706 <_dtoa_r+0x906>
 8017682:	e063      	b.n	801774c <_dtoa_r+0x94c>
 8017684:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801768a:	e746      	b.n	801751a <_dtoa_r+0x71a>
 801768c:	9b07      	ldr	r3, [sp, #28]
 801768e:	1e5c      	subs	r4, r3, #1
 8017690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017692:	42a3      	cmp	r3, r4
 8017694:	bfbf      	itttt	lt
 8017696:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017698:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801769a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801769c:	1ae3      	sublt	r3, r4, r3
 801769e:	bfb4      	ite	lt
 80176a0:	18d2      	addlt	r2, r2, r3
 80176a2:	1b1c      	subge	r4, r3, r4
 80176a4:	9b07      	ldr	r3, [sp, #28]
 80176a6:	bfbc      	itt	lt
 80176a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80176aa:	2400      	movlt	r4, #0
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	bfb5      	itete	lt
 80176b0:	eba8 0603 	sublt.w	r6, r8, r3
 80176b4:	9b07      	ldrge	r3, [sp, #28]
 80176b6:	2300      	movlt	r3, #0
 80176b8:	4646      	movge	r6, r8
 80176ba:	e730      	b.n	801751e <_dtoa_r+0x71e>
 80176bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80176be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80176c0:	4646      	mov	r6, r8
 80176c2:	e735      	b.n	8017530 <_dtoa_r+0x730>
 80176c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80176c6:	e75c      	b.n	8017582 <_dtoa_r+0x782>
 80176c8:	2300      	movs	r3, #0
 80176ca:	e788      	b.n	80175de <_dtoa_r+0x7de>
 80176cc:	3fe00000 	.word	0x3fe00000
 80176d0:	40240000 	.word	0x40240000
 80176d4:	40140000 	.word	0x40140000
 80176d8:	9b02      	ldr	r3, [sp, #8]
 80176da:	e780      	b.n	80175de <_dtoa_r+0x7de>
 80176dc:	2300      	movs	r3, #0
 80176de:	930a      	str	r3, [sp, #40]	@ 0x28
 80176e0:	e782      	b.n	80175e8 <_dtoa_r+0x7e8>
 80176e2:	d099      	beq.n	8017618 <_dtoa_r+0x818>
 80176e4:	9a08      	ldr	r2, [sp, #32]
 80176e6:	331c      	adds	r3, #28
 80176e8:	441a      	add	r2, r3
 80176ea:	4498      	add	r8, r3
 80176ec:	441e      	add	r6, r3
 80176ee:	9208      	str	r2, [sp, #32]
 80176f0:	e792      	b.n	8017618 <_dtoa_r+0x818>
 80176f2:	4603      	mov	r3, r0
 80176f4:	e7f6      	b.n	80176e4 <_dtoa_r+0x8e4>
 80176f6:	9b07      	ldr	r3, [sp, #28]
 80176f8:	9704      	str	r7, [sp, #16]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	dc20      	bgt.n	8017740 <_dtoa_r+0x940>
 80176fe:	9300      	str	r3, [sp, #0]
 8017700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017702:	2b02      	cmp	r3, #2
 8017704:	dd1e      	ble.n	8017744 <_dtoa_r+0x944>
 8017706:	9b00      	ldr	r3, [sp, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	f47f aec0 	bne.w	801748e <_dtoa_r+0x68e>
 801770e:	4621      	mov	r1, r4
 8017710:	2205      	movs	r2, #5
 8017712:	4658      	mov	r0, fp
 8017714:	f000 fa9a 	bl	8017c4c <__multadd>
 8017718:	4601      	mov	r1, r0
 801771a:	4604      	mov	r4, r0
 801771c:	4648      	mov	r0, r9
 801771e:	f000 fcad 	bl	801807c <__mcmp>
 8017722:	2800      	cmp	r0, #0
 8017724:	f77f aeb3 	ble.w	801748e <_dtoa_r+0x68e>
 8017728:	4656      	mov	r6, sl
 801772a:	2331      	movs	r3, #49	@ 0x31
 801772c:	f806 3b01 	strb.w	r3, [r6], #1
 8017730:	9b04      	ldr	r3, [sp, #16]
 8017732:	3301      	adds	r3, #1
 8017734:	9304      	str	r3, [sp, #16]
 8017736:	e6ae      	b.n	8017496 <_dtoa_r+0x696>
 8017738:	9c07      	ldr	r4, [sp, #28]
 801773a:	9704      	str	r7, [sp, #16]
 801773c:	4625      	mov	r5, r4
 801773e:	e7f3      	b.n	8017728 <_dtoa_r+0x928>
 8017740:	9b07      	ldr	r3, [sp, #28]
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017746:	2b00      	cmp	r3, #0
 8017748:	f000 8104 	beq.w	8017954 <_dtoa_r+0xb54>
 801774c:	2e00      	cmp	r6, #0
 801774e:	dd05      	ble.n	801775c <_dtoa_r+0x95c>
 8017750:	4629      	mov	r1, r5
 8017752:	4632      	mov	r2, r6
 8017754:	4658      	mov	r0, fp
 8017756:	f000 fc25 	bl	8017fa4 <__lshift>
 801775a:	4605      	mov	r5, r0
 801775c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801775e:	2b00      	cmp	r3, #0
 8017760:	d05a      	beq.n	8017818 <_dtoa_r+0xa18>
 8017762:	6869      	ldr	r1, [r5, #4]
 8017764:	4658      	mov	r0, fp
 8017766:	f000 fa0f 	bl	8017b88 <_Balloc>
 801776a:	4606      	mov	r6, r0
 801776c:	b928      	cbnz	r0, 801777a <_dtoa_r+0x97a>
 801776e:	4b84      	ldr	r3, [pc, #528]	@ (8017980 <_dtoa_r+0xb80>)
 8017770:	4602      	mov	r2, r0
 8017772:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017776:	f7ff bb5a 	b.w	8016e2e <_dtoa_r+0x2e>
 801777a:	692a      	ldr	r2, [r5, #16]
 801777c:	3202      	adds	r2, #2
 801777e:	0092      	lsls	r2, r2, #2
 8017780:	f105 010c 	add.w	r1, r5, #12
 8017784:	300c      	adds	r0, #12
 8017786:	f7ff faa2 	bl	8016cce <memcpy>
 801778a:	2201      	movs	r2, #1
 801778c:	4631      	mov	r1, r6
 801778e:	4658      	mov	r0, fp
 8017790:	f000 fc08 	bl	8017fa4 <__lshift>
 8017794:	f10a 0301 	add.w	r3, sl, #1
 8017798:	9307      	str	r3, [sp, #28]
 801779a:	9b00      	ldr	r3, [sp, #0]
 801779c:	4453      	add	r3, sl
 801779e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80177a0:	9b02      	ldr	r3, [sp, #8]
 80177a2:	f003 0301 	and.w	r3, r3, #1
 80177a6:	462f      	mov	r7, r5
 80177a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80177aa:	4605      	mov	r5, r0
 80177ac:	9b07      	ldr	r3, [sp, #28]
 80177ae:	4621      	mov	r1, r4
 80177b0:	3b01      	subs	r3, #1
 80177b2:	4648      	mov	r0, r9
 80177b4:	9300      	str	r3, [sp, #0]
 80177b6:	f7ff fa98 	bl	8016cea <quorem>
 80177ba:	4639      	mov	r1, r7
 80177bc:	9002      	str	r0, [sp, #8]
 80177be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80177c2:	4648      	mov	r0, r9
 80177c4:	f000 fc5a 	bl	801807c <__mcmp>
 80177c8:	462a      	mov	r2, r5
 80177ca:	9008      	str	r0, [sp, #32]
 80177cc:	4621      	mov	r1, r4
 80177ce:	4658      	mov	r0, fp
 80177d0:	f000 fc70 	bl	80180b4 <__mdiff>
 80177d4:	68c2      	ldr	r2, [r0, #12]
 80177d6:	4606      	mov	r6, r0
 80177d8:	bb02      	cbnz	r2, 801781c <_dtoa_r+0xa1c>
 80177da:	4601      	mov	r1, r0
 80177dc:	4648      	mov	r0, r9
 80177de:	f000 fc4d 	bl	801807c <__mcmp>
 80177e2:	4602      	mov	r2, r0
 80177e4:	4631      	mov	r1, r6
 80177e6:	4658      	mov	r0, fp
 80177e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80177ea:	f000 fa0d 	bl	8017c08 <_Bfree>
 80177ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80177f2:	9e07      	ldr	r6, [sp, #28]
 80177f4:	ea43 0102 	orr.w	r1, r3, r2
 80177f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177fa:	4319      	orrs	r1, r3
 80177fc:	d110      	bne.n	8017820 <_dtoa_r+0xa20>
 80177fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017802:	d029      	beq.n	8017858 <_dtoa_r+0xa58>
 8017804:	9b08      	ldr	r3, [sp, #32]
 8017806:	2b00      	cmp	r3, #0
 8017808:	dd02      	ble.n	8017810 <_dtoa_r+0xa10>
 801780a:	9b02      	ldr	r3, [sp, #8]
 801780c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017810:	9b00      	ldr	r3, [sp, #0]
 8017812:	f883 8000 	strb.w	r8, [r3]
 8017816:	e63f      	b.n	8017498 <_dtoa_r+0x698>
 8017818:	4628      	mov	r0, r5
 801781a:	e7bb      	b.n	8017794 <_dtoa_r+0x994>
 801781c:	2201      	movs	r2, #1
 801781e:	e7e1      	b.n	80177e4 <_dtoa_r+0x9e4>
 8017820:	9b08      	ldr	r3, [sp, #32]
 8017822:	2b00      	cmp	r3, #0
 8017824:	db04      	blt.n	8017830 <_dtoa_r+0xa30>
 8017826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017828:	430b      	orrs	r3, r1
 801782a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801782c:	430b      	orrs	r3, r1
 801782e:	d120      	bne.n	8017872 <_dtoa_r+0xa72>
 8017830:	2a00      	cmp	r2, #0
 8017832:	dded      	ble.n	8017810 <_dtoa_r+0xa10>
 8017834:	4649      	mov	r1, r9
 8017836:	2201      	movs	r2, #1
 8017838:	4658      	mov	r0, fp
 801783a:	f000 fbb3 	bl	8017fa4 <__lshift>
 801783e:	4621      	mov	r1, r4
 8017840:	4681      	mov	r9, r0
 8017842:	f000 fc1b 	bl	801807c <__mcmp>
 8017846:	2800      	cmp	r0, #0
 8017848:	dc03      	bgt.n	8017852 <_dtoa_r+0xa52>
 801784a:	d1e1      	bne.n	8017810 <_dtoa_r+0xa10>
 801784c:	f018 0f01 	tst.w	r8, #1
 8017850:	d0de      	beq.n	8017810 <_dtoa_r+0xa10>
 8017852:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017856:	d1d8      	bne.n	801780a <_dtoa_r+0xa0a>
 8017858:	9a00      	ldr	r2, [sp, #0]
 801785a:	2339      	movs	r3, #57	@ 0x39
 801785c:	7013      	strb	r3, [r2, #0]
 801785e:	4633      	mov	r3, r6
 8017860:	461e      	mov	r6, r3
 8017862:	3b01      	subs	r3, #1
 8017864:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017868:	2a39      	cmp	r2, #57	@ 0x39
 801786a:	d052      	beq.n	8017912 <_dtoa_r+0xb12>
 801786c:	3201      	adds	r2, #1
 801786e:	701a      	strb	r2, [r3, #0]
 8017870:	e612      	b.n	8017498 <_dtoa_r+0x698>
 8017872:	2a00      	cmp	r2, #0
 8017874:	dd07      	ble.n	8017886 <_dtoa_r+0xa86>
 8017876:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801787a:	d0ed      	beq.n	8017858 <_dtoa_r+0xa58>
 801787c:	9a00      	ldr	r2, [sp, #0]
 801787e:	f108 0301 	add.w	r3, r8, #1
 8017882:	7013      	strb	r3, [r2, #0]
 8017884:	e608      	b.n	8017498 <_dtoa_r+0x698>
 8017886:	9b07      	ldr	r3, [sp, #28]
 8017888:	9a07      	ldr	r2, [sp, #28]
 801788a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801788e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017890:	4293      	cmp	r3, r2
 8017892:	d028      	beq.n	80178e6 <_dtoa_r+0xae6>
 8017894:	4649      	mov	r1, r9
 8017896:	2300      	movs	r3, #0
 8017898:	220a      	movs	r2, #10
 801789a:	4658      	mov	r0, fp
 801789c:	f000 f9d6 	bl	8017c4c <__multadd>
 80178a0:	42af      	cmp	r7, r5
 80178a2:	4681      	mov	r9, r0
 80178a4:	f04f 0300 	mov.w	r3, #0
 80178a8:	f04f 020a 	mov.w	r2, #10
 80178ac:	4639      	mov	r1, r7
 80178ae:	4658      	mov	r0, fp
 80178b0:	d107      	bne.n	80178c2 <_dtoa_r+0xac2>
 80178b2:	f000 f9cb 	bl	8017c4c <__multadd>
 80178b6:	4607      	mov	r7, r0
 80178b8:	4605      	mov	r5, r0
 80178ba:	9b07      	ldr	r3, [sp, #28]
 80178bc:	3301      	adds	r3, #1
 80178be:	9307      	str	r3, [sp, #28]
 80178c0:	e774      	b.n	80177ac <_dtoa_r+0x9ac>
 80178c2:	f000 f9c3 	bl	8017c4c <__multadd>
 80178c6:	4629      	mov	r1, r5
 80178c8:	4607      	mov	r7, r0
 80178ca:	2300      	movs	r3, #0
 80178cc:	220a      	movs	r2, #10
 80178ce:	4658      	mov	r0, fp
 80178d0:	f000 f9bc 	bl	8017c4c <__multadd>
 80178d4:	4605      	mov	r5, r0
 80178d6:	e7f0      	b.n	80178ba <_dtoa_r+0xaba>
 80178d8:	9b00      	ldr	r3, [sp, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	bfcc      	ite	gt
 80178de:	461e      	movgt	r6, r3
 80178e0:	2601      	movle	r6, #1
 80178e2:	4456      	add	r6, sl
 80178e4:	2700      	movs	r7, #0
 80178e6:	4649      	mov	r1, r9
 80178e8:	2201      	movs	r2, #1
 80178ea:	4658      	mov	r0, fp
 80178ec:	f000 fb5a 	bl	8017fa4 <__lshift>
 80178f0:	4621      	mov	r1, r4
 80178f2:	4681      	mov	r9, r0
 80178f4:	f000 fbc2 	bl	801807c <__mcmp>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	dcb0      	bgt.n	801785e <_dtoa_r+0xa5e>
 80178fc:	d102      	bne.n	8017904 <_dtoa_r+0xb04>
 80178fe:	f018 0f01 	tst.w	r8, #1
 8017902:	d1ac      	bne.n	801785e <_dtoa_r+0xa5e>
 8017904:	4633      	mov	r3, r6
 8017906:	461e      	mov	r6, r3
 8017908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801790c:	2a30      	cmp	r2, #48	@ 0x30
 801790e:	d0fa      	beq.n	8017906 <_dtoa_r+0xb06>
 8017910:	e5c2      	b.n	8017498 <_dtoa_r+0x698>
 8017912:	459a      	cmp	sl, r3
 8017914:	d1a4      	bne.n	8017860 <_dtoa_r+0xa60>
 8017916:	9b04      	ldr	r3, [sp, #16]
 8017918:	3301      	adds	r3, #1
 801791a:	9304      	str	r3, [sp, #16]
 801791c:	2331      	movs	r3, #49	@ 0x31
 801791e:	f88a 3000 	strb.w	r3, [sl]
 8017922:	e5b9      	b.n	8017498 <_dtoa_r+0x698>
 8017924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017926:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8017984 <_dtoa_r+0xb84>
 801792a:	b11b      	cbz	r3, 8017934 <_dtoa_r+0xb34>
 801792c:	f10a 0308 	add.w	r3, sl, #8
 8017930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017932:	6013      	str	r3, [r2, #0]
 8017934:	4650      	mov	r0, sl
 8017936:	b019      	add	sp, #100	@ 0x64
 8017938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801793e:	2b01      	cmp	r3, #1
 8017940:	f77f ae37 	ble.w	80175b2 <_dtoa_r+0x7b2>
 8017944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017946:	930a      	str	r3, [sp, #40]	@ 0x28
 8017948:	2001      	movs	r0, #1
 801794a:	e655      	b.n	80175f8 <_dtoa_r+0x7f8>
 801794c:	9b00      	ldr	r3, [sp, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	f77f aed6 	ble.w	8017700 <_dtoa_r+0x900>
 8017954:	4656      	mov	r6, sl
 8017956:	4621      	mov	r1, r4
 8017958:	4648      	mov	r0, r9
 801795a:	f7ff f9c6 	bl	8016cea <quorem>
 801795e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017962:	f806 8b01 	strb.w	r8, [r6], #1
 8017966:	9b00      	ldr	r3, [sp, #0]
 8017968:	eba6 020a 	sub.w	r2, r6, sl
 801796c:	4293      	cmp	r3, r2
 801796e:	ddb3      	ble.n	80178d8 <_dtoa_r+0xad8>
 8017970:	4649      	mov	r1, r9
 8017972:	2300      	movs	r3, #0
 8017974:	220a      	movs	r2, #10
 8017976:	4658      	mov	r0, fp
 8017978:	f000 f968 	bl	8017c4c <__multadd>
 801797c:	4681      	mov	r9, r0
 801797e:	e7ea      	b.n	8017956 <_dtoa_r+0xb56>
 8017980:	0801aa45 	.word	0x0801aa45
 8017984:	0801a9c9 	.word	0x0801a9c9

08017988 <_free_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	4605      	mov	r5, r0
 801798c:	2900      	cmp	r1, #0
 801798e:	d041      	beq.n	8017a14 <_free_r+0x8c>
 8017990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017994:	1f0c      	subs	r4, r1, #4
 8017996:	2b00      	cmp	r3, #0
 8017998:	bfb8      	it	lt
 801799a:	18e4      	addlt	r4, r4, r3
 801799c:	f000 f8e8 	bl	8017b70 <__malloc_lock>
 80179a0:	4a1d      	ldr	r2, [pc, #116]	@ (8017a18 <_free_r+0x90>)
 80179a2:	6813      	ldr	r3, [r2, #0]
 80179a4:	b933      	cbnz	r3, 80179b4 <_free_r+0x2c>
 80179a6:	6063      	str	r3, [r4, #4]
 80179a8:	6014      	str	r4, [r2, #0]
 80179aa:	4628      	mov	r0, r5
 80179ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179b0:	f000 b8e4 	b.w	8017b7c <__malloc_unlock>
 80179b4:	42a3      	cmp	r3, r4
 80179b6:	d908      	bls.n	80179ca <_free_r+0x42>
 80179b8:	6820      	ldr	r0, [r4, #0]
 80179ba:	1821      	adds	r1, r4, r0
 80179bc:	428b      	cmp	r3, r1
 80179be:	bf01      	itttt	eq
 80179c0:	6819      	ldreq	r1, [r3, #0]
 80179c2:	685b      	ldreq	r3, [r3, #4]
 80179c4:	1809      	addeq	r1, r1, r0
 80179c6:	6021      	streq	r1, [r4, #0]
 80179c8:	e7ed      	b.n	80179a6 <_free_r+0x1e>
 80179ca:	461a      	mov	r2, r3
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	b10b      	cbz	r3, 80179d4 <_free_r+0x4c>
 80179d0:	42a3      	cmp	r3, r4
 80179d2:	d9fa      	bls.n	80179ca <_free_r+0x42>
 80179d4:	6811      	ldr	r1, [r2, #0]
 80179d6:	1850      	adds	r0, r2, r1
 80179d8:	42a0      	cmp	r0, r4
 80179da:	d10b      	bne.n	80179f4 <_free_r+0x6c>
 80179dc:	6820      	ldr	r0, [r4, #0]
 80179de:	4401      	add	r1, r0
 80179e0:	1850      	adds	r0, r2, r1
 80179e2:	4283      	cmp	r3, r0
 80179e4:	6011      	str	r1, [r2, #0]
 80179e6:	d1e0      	bne.n	80179aa <_free_r+0x22>
 80179e8:	6818      	ldr	r0, [r3, #0]
 80179ea:	685b      	ldr	r3, [r3, #4]
 80179ec:	6053      	str	r3, [r2, #4]
 80179ee:	4408      	add	r0, r1
 80179f0:	6010      	str	r0, [r2, #0]
 80179f2:	e7da      	b.n	80179aa <_free_r+0x22>
 80179f4:	d902      	bls.n	80179fc <_free_r+0x74>
 80179f6:	230c      	movs	r3, #12
 80179f8:	602b      	str	r3, [r5, #0]
 80179fa:	e7d6      	b.n	80179aa <_free_r+0x22>
 80179fc:	6820      	ldr	r0, [r4, #0]
 80179fe:	1821      	adds	r1, r4, r0
 8017a00:	428b      	cmp	r3, r1
 8017a02:	bf04      	itt	eq
 8017a04:	6819      	ldreq	r1, [r3, #0]
 8017a06:	685b      	ldreq	r3, [r3, #4]
 8017a08:	6063      	str	r3, [r4, #4]
 8017a0a:	bf04      	itt	eq
 8017a0c:	1809      	addeq	r1, r1, r0
 8017a0e:	6021      	streq	r1, [r4, #0]
 8017a10:	6054      	str	r4, [r2, #4]
 8017a12:	e7ca      	b.n	80179aa <_free_r+0x22>
 8017a14:	bd38      	pop	{r3, r4, r5, pc}
 8017a16:	bf00      	nop
 8017a18:	20008978 	.word	0x20008978

08017a1c <malloc>:
 8017a1c:	4b02      	ldr	r3, [pc, #8]	@ (8017a28 <malloc+0xc>)
 8017a1e:	4601      	mov	r1, r0
 8017a20:	6818      	ldr	r0, [r3, #0]
 8017a22:	f000 b825 	b.w	8017a70 <_malloc_r>
 8017a26:	bf00      	nop
 8017a28:	20001234 	.word	0x20001234

08017a2c <sbrk_aligned>:
 8017a2c:	b570      	push	{r4, r5, r6, lr}
 8017a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8017a6c <sbrk_aligned+0x40>)
 8017a30:	460c      	mov	r4, r1
 8017a32:	6831      	ldr	r1, [r6, #0]
 8017a34:	4605      	mov	r5, r0
 8017a36:	b911      	cbnz	r1, 8017a3e <sbrk_aligned+0x12>
 8017a38:	f000 fe46 	bl	80186c8 <_sbrk_r>
 8017a3c:	6030      	str	r0, [r6, #0]
 8017a3e:	4621      	mov	r1, r4
 8017a40:	4628      	mov	r0, r5
 8017a42:	f000 fe41 	bl	80186c8 <_sbrk_r>
 8017a46:	1c43      	adds	r3, r0, #1
 8017a48:	d103      	bne.n	8017a52 <sbrk_aligned+0x26>
 8017a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8017a4e:	4620      	mov	r0, r4
 8017a50:	bd70      	pop	{r4, r5, r6, pc}
 8017a52:	1cc4      	adds	r4, r0, #3
 8017a54:	f024 0403 	bic.w	r4, r4, #3
 8017a58:	42a0      	cmp	r0, r4
 8017a5a:	d0f8      	beq.n	8017a4e <sbrk_aligned+0x22>
 8017a5c:	1a21      	subs	r1, r4, r0
 8017a5e:	4628      	mov	r0, r5
 8017a60:	f000 fe32 	bl	80186c8 <_sbrk_r>
 8017a64:	3001      	adds	r0, #1
 8017a66:	d1f2      	bne.n	8017a4e <sbrk_aligned+0x22>
 8017a68:	e7ef      	b.n	8017a4a <sbrk_aligned+0x1e>
 8017a6a:	bf00      	nop
 8017a6c:	20008974 	.word	0x20008974

08017a70 <_malloc_r>:
 8017a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a74:	1ccd      	adds	r5, r1, #3
 8017a76:	f025 0503 	bic.w	r5, r5, #3
 8017a7a:	3508      	adds	r5, #8
 8017a7c:	2d0c      	cmp	r5, #12
 8017a7e:	bf38      	it	cc
 8017a80:	250c      	movcc	r5, #12
 8017a82:	2d00      	cmp	r5, #0
 8017a84:	4606      	mov	r6, r0
 8017a86:	db01      	blt.n	8017a8c <_malloc_r+0x1c>
 8017a88:	42a9      	cmp	r1, r5
 8017a8a:	d904      	bls.n	8017a96 <_malloc_r+0x26>
 8017a8c:	230c      	movs	r3, #12
 8017a8e:	6033      	str	r3, [r6, #0]
 8017a90:	2000      	movs	r0, #0
 8017a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017b6c <_malloc_r+0xfc>
 8017a9a:	f000 f869 	bl	8017b70 <__malloc_lock>
 8017a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8017aa2:	461c      	mov	r4, r3
 8017aa4:	bb44      	cbnz	r4, 8017af8 <_malloc_r+0x88>
 8017aa6:	4629      	mov	r1, r5
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	f7ff ffbf 	bl	8017a2c <sbrk_aligned>
 8017aae:	1c43      	adds	r3, r0, #1
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	d158      	bne.n	8017b66 <_malloc_r+0xf6>
 8017ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8017ab8:	4627      	mov	r7, r4
 8017aba:	2f00      	cmp	r7, #0
 8017abc:	d143      	bne.n	8017b46 <_malloc_r+0xd6>
 8017abe:	2c00      	cmp	r4, #0
 8017ac0:	d04b      	beq.n	8017b5a <_malloc_r+0xea>
 8017ac2:	6823      	ldr	r3, [r4, #0]
 8017ac4:	4639      	mov	r1, r7
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	eb04 0903 	add.w	r9, r4, r3
 8017acc:	f000 fdfc 	bl	80186c8 <_sbrk_r>
 8017ad0:	4581      	cmp	r9, r0
 8017ad2:	d142      	bne.n	8017b5a <_malloc_r+0xea>
 8017ad4:	6821      	ldr	r1, [r4, #0]
 8017ad6:	1a6d      	subs	r5, r5, r1
 8017ad8:	4629      	mov	r1, r5
 8017ada:	4630      	mov	r0, r6
 8017adc:	f7ff ffa6 	bl	8017a2c <sbrk_aligned>
 8017ae0:	3001      	adds	r0, #1
 8017ae2:	d03a      	beq.n	8017b5a <_malloc_r+0xea>
 8017ae4:	6823      	ldr	r3, [r4, #0]
 8017ae6:	442b      	add	r3, r5
 8017ae8:	6023      	str	r3, [r4, #0]
 8017aea:	f8d8 3000 	ldr.w	r3, [r8]
 8017aee:	685a      	ldr	r2, [r3, #4]
 8017af0:	bb62      	cbnz	r2, 8017b4c <_malloc_r+0xdc>
 8017af2:	f8c8 7000 	str.w	r7, [r8]
 8017af6:	e00f      	b.n	8017b18 <_malloc_r+0xa8>
 8017af8:	6822      	ldr	r2, [r4, #0]
 8017afa:	1b52      	subs	r2, r2, r5
 8017afc:	d420      	bmi.n	8017b40 <_malloc_r+0xd0>
 8017afe:	2a0b      	cmp	r2, #11
 8017b00:	d917      	bls.n	8017b32 <_malloc_r+0xc2>
 8017b02:	1961      	adds	r1, r4, r5
 8017b04:	42a3      	cmp	r3, r4
 8017b06:	6025      	str	r5, [r4, #0]
 8017b08:	bf18      	it	ne
 8017b0a:	6059      	strne	r1, [r3, #4]
 8017b0c:	6863      	ldr	r3, [r4, #4]
 8017b0e:	bf08      	it	eq
 8017b10:	f8c8 1000 	streq.w	r1, [r8]
 8017b14:	5162      	str	r2, [r4, r5]
 8017b16:	604b      	str	r3, [r1, #4]
 8017b18:	4630      	mov	r0, r6
 8017b1a:	f000 f82f 	bl	8017b7c <__malloc_unlock>
 8017b1e:	f104 000b 	add.w	r0, r4, #11
 8017b22:	1d23      	adds	r3, r4, #4
 8017b24:	f020 0007 	bic.w	r0, r0, #7
 8017b28:	1ac2      	subs	r2, r0, r3
 8017b2a:	bf1c      	itt	ne
 8017b2c:	1a1b      	subne	r3, r3, r0
 8017b2e:	50a3      	strne	r3, [r4, r2]
 8017b30:	e7af      	b.n	8017a92 <_malloc_r+0x22>
 8017b32:	6862      	ldr	r2, [r4, #4]
 8017b34:	42a3      	cmp	r3, r4
 8017b36:	bf0c      	ite	eq
 8017b38:	f8c8 2000 	streq.w	r2, [r8]
 8017b3c:	605a      	strne	r2, [r3, #4]
 8017b3e:	e7eb      	b.n	8017b18 <_malloc_r+0xa8>
 8017b40:	4623      	mov	r3, r4
 8017b42:	6864      	ldr	r4, [r4, #4]
 8017b44:	e7ae      	b.n	8017aa4 <_malloc_r+0x34>
 8017b46:	463c      	mov	r4, r7
 8017b48:	687f      	ldr	r7, [r7, #4]
 8017b4a:	e7b6      	b.n	8017aba <_malloc_r+0x4a>
 8017b4c:	461a      	mov	r2, r3
 8017b4e:	685b      	ldr	r3, [r3, #4]
 8017b50:	42a3      	cmp	r3, r4
 8017b52:	d1fb      	bne.n	8017b4c <_malloc_r+0xdc>
 8017b54:	2300      	movs	r3, #0
 8017b56:	6053      	str	r3, [r2, #4]
 8017b58:	e7de      	b.n	8017b18 <_malloc_r+0xa8>
 8017b5a:	230c      	movs	r3, #12
 8017b5c:	6033      	str	r3, [r6, #0]
 8017b5e:	4630      	mov	r0, r6
 8017b60:	f000 f80c 	bl	8017b7c <__malloc_unlock>
 8017b64:	e794      	b.n	8017a90 <_malloc_r+0x20>
 8017b66:	6005      	str	r5, [r0, #0]
 8017b68:	e7d6      	b.n	8017b18 <_malloc_r+0xa8>
 8017b6a:	bf00      	nop
 8017b6c:	20008978 	.word	0x20008978

08017b70 <__malloc_lock>:
 8017b70:	4801      	ldr	r0, [pc, #4]	@ (8017b78 <__malloc_lock+0x8>)
 8017b72:	f7ff b8a2 	b.w	8016cba <__retarget_lock_acquire_recursive>
 8017b76:	bf00      	nop
 8017b78:	20008970 	.word	0x20008970

08017b7c <__malloc_unlock>:
 8017b7c:	4801      	ldr	r0, [pc, #4]	@ (8017b84 <__malloc_unlock+0x8>)
 8017b7e:	f7ff b89d 	b.w	8016cbc <__retarget_lock_release_recursive>
 8017b82:	bf00      	nop
 8017b84:	20008970 	.word	0x20008970

08017b88 <_Balloc>:
 8017b88:	b570      	push	{r4, r5, r6, lr}
 8017b8a:	69c6      	ldr	r6, [r0, #28]
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	460d      	mov	r5, r1
 8017b90:	b976      	cbnz	r6, 8017bb0 <_Balloc+0x28>
 8017b92:	2010      	movs	r0, #16
 8017b94:	f7ff ff42 	bl	8017a1c <malloc>
 8017b98:	4602      	mov	r2, r0
 8017b9a:	61e0      	str	r0, [r4, #28]
 8017b9c:	b920      	cbnz	r0, 8017ba8 <_Balloc+0x20>
 8017b9e:	4b18      	ldr	r3, [pc, #96]	@ (8017c00 <_Balloc+0x78>)
 8017ba0:	4818      	ldr	r0, [pc, #96]	@ (8017c04 <_Balloc+0x7c>)
 8017ba2:	216b      	movs	r1, #107	@ 0x6b
 8017ba4:	f000 fda0 	bl	80186e8 <__assert_func>
 8017ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017bac:	6006      	str	r6, [r0, #0]
 8017bae:	60c6      	str	r6, [r0, #12]
 8017bb0:	69e6      	ldr	r6, [r4, #28]
 8017bb2:	68f3      	ldr	r3, [r6, #12]
 8017bb4:	b183      	cbz	r3, 8017bd8 <_Balloc+0x50>
 8017bb6:	69e3      	ldr	r3, [r4, #28]
 8017bb8:	68db      	ldr	r3, [r3, #12]
 8017bba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017bbe:	b9b8      	cbnz	r0, 8017bf0 <_Balloc+0x68>
 8017bc0:	2101      	movs	r1, #1
 8017bc2:	fa01 f605 	lsl.w	r6, r1, r5
 8017bc6:	1d72      	adds	r2, r6, #5
 8017bc8:	0092      	lsls	r2, r2, #2
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f000 fdaa 	bl	8018724 <_calloc_r>
 8017bd0:	b160      	cbz	r0, 8017bec <_Balloc+0x64>
 8017bd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017bd6:	e00e      	b.n	8017bf6 <_Balloc+0x6e>
 8017bd8:	2221      	movs	r2, #33	@ 0x21
 8017bda:	2104      	movs	r1, #4
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f000 fda1 	bl	8018724 <_calloc_r>
 8017be2:	69e3      	ldr	r3, [r4, #28]
 8017be4:	60f0      	str	r0, [r6, #12]
 8017be6:	68db      	ldr	r3, [r3, #12]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d1e4      	bne.n	8017bb6 <_Balloc+0x2e>
 8017bec:	2000      	movs	r0, #0
 8017bee:	bd70      	pop	{r4, r5, r6, pc}
 8017bf0:	6802      	ldr	r2, [r0, #0]
 8017bf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017bfc:	e7f7      	b.n	8017bee <_Balloc+0x66>
 8017bfe:	bf00      	nop
 8017c00:	0801a9d6 	.word	0x0801a9d6
 8017c04:	0801aa56 	.word	0x0801aa56

08017c08 <_Bfree>:
 8017c08:	b570      	push	{r4, r5, r6, lr}
 8017c0a:	69c6      	ldr	r6, [r0, #28]
 8017c0c:	4605      	mov	r5, r0
 8017c0e:	460c      	mov	r4, r1
 8017c10:	b976      	cbnz	r6, 8017c30 <_Bfree+0x28>
 8017c12:	2010      	movs	r0, #16
 8017c14:	f7ff ff02 	bl	8017a1c <malloc>
 8017c18:	4602      	mov	r2, r0
 8017c1a:	61e8      	str	r0, [r5, #28]
 8017c1c:	b920      	cbnz	r0, 8017c28 <_Bfree+0x20>
 8017c1e:	4b09      	ldr	r3, [pc, #36]	@ (8017c44 <_Bfree+0x3c>)
 8017c20:	4809      	ldr	r0, [pc, #36]	@ (8017c48 <_Bfree+0x40>)
 8017c22:	218f      	movs	r1, #143	@ 0x8f
 8017c24:	f000 fd60 	bl	80186e8 <__assert_func>
 8017c28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017c2c:	6006      	str	r6, [r0, #0]
 8017c2e:	60c6      	str	r6, [r0, #12]
 8017c30:	b13c      	cbz	r4, 8017c42 <_Bfree+0x3a>
 8017c32:	69eb      	ldr	r3, [r5, #28]
 8017c34:	6862      	ldr	r2, [r4, #4]
 8017c36:	68db      	ldr	r3, [r3, #12]
 8017c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017c3c:	6021      	str	r1, [r4, #0]
 8017c3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017c42:	bd70      	pop	{r4, r5, r6, pc}
 8017c44:	0801a9d6 	.word	0x0801a9d6
 8017c48:	0801aa56 	.word	0x0801aa56

08017c4c <__multadd>:
 8017c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c50:	690d      	ldr	r5, [r1, #16]
 8017c52:	4607      	mov	r7, r0
 8017c54:	460c      	mov	r4, r1
 8017c56:	461e      	mov	r6, r3
 8017c58:	f101 0c14 	add.w	ip, r1, #20
 8017c5c:	2000      	movs	r0, #0
 8017c5e:	f8dc 3000 	ldr.w	r3, [ip]
 8017c62:	b299      	uxth	r1, r3
 8017c64:	fb02 6101 	mla	r1, r2, r1, r6
 8017c68:	0c1e      	lsrs	r6, r3, #16
 8017c6a:	0c0b      	lsrs	r3, r1, #16
 8017c6c:	fb02 3306 	mla	r3, r2, r6, r3
 8017c70:	b289      	uxth	r1, r1
 8017c72:	3001      	adds	r0, #1
 8017c74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017c78:	4285      	cmp	r5, r0
 8017c7a:	f84c 1b04 	str.w	r1, [ip], #4
 8017c7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017c82:	dcec      	bgt.n	8017c5e <__multadd+0x12>
 8017c84:	b30e      	cbz	r6, 8017cca <__multadd+0x7e>
 8017c86:	68a3      	ldr	r3, [r4, #8]
 8017c88:	42ab      	cmp	r3, r5
 8017c8a:	dc19      	bgt.n	8017cc0 <__multadd+0x74>
 8017c8c:	6861      	ldr	r1, [r4, #4]
 8017c8e:	4638      	mov	r0, r7
 8017c90:	3101      	adds	r1, #1
 8017c92:	f7ff ff79 	bl	8017b88 <_Balloc>
 8017c96:	4680      	mov	r8, r0
 8017c98:	b928      	cbnz	r0, 8017ca6 <__multadd+0x5a>
 8017c9a:	4602      	mov	r2, r0
 8017c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8017cd0 <__multadd+0x84>)
 8017c9e:	480d      	ldr	r0, [pc, #52]	@ (8017cd4 <__multadd+0x88>)
 8017ca0:	21ba      	movs	r1, #186	@ 0xba
 8017ca2:	f000 fd21 	bl	80186e8 <__assert_func>
 8017ca6:	6922      	ldr	r2, [r4, #16]
 8017ca8:	3202      	adds	r2, #2
 8017caa:	f104 010c 	add.w	r1, r4, #12
 8017cae:	0092      	lsls	r2, r2, #2
 8017cb0:	300c      	adds	r0, #12
 8017cb2:	f7ff f80c 	bl	8016cce <memcpy>
 8017cb6:	4621      	mov	r1, r4
 8017cb8:	4638      	mov	r0, r7
 8017cba:	f7ff ffa5 	bl	8017c08 <_Bfree>
 8017cbe:	4644      	mov	r4, r8
 8017cc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017cc4:	3501      	adds	r5, #1
 8017cc6:	615e      	str	r6, [r3, #20]
 8017cc8:	6125      	str	r5, [r4, #16]
 8017cca:	4620      	mov	r0, r4
 8017ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cd0:	0801aa45 	.word	0x0801aa45
 8017cd4:	0801aa56 	.word	0x0801aa56

08017cd8 <__hi0bits>:
 8017cd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017cdc:	4603      	mov	r3, r0
 8017cde:	bf36      	itet	cc
 8017ce0:	0403      	lslcc	r3, r0, #16
 8017ce2:	2000      	movcs	r0, #0
 8017ce4:	2010      	movcc	r0, #16
 8017ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017cea:	bf3c      	itt	cc
 8017cec:	021b      	lslcc	r3, r3, #8
 8017cee:	3008      	addcc	r0, #8
 8017cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017cf4:	bf3c      	itt	cc
 8017cf6:	011b      	lslcc	r3, r3, #4
 8017cf8:	3004      	addcc	r0, #4
 8017cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017cfe:	bf3c      	itt	cc
 8017d00:	009b      	lslcc	r3, r3, #2
 8017d02:	3002      	addcc	r0, #2
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	db05      	blt.n	8017d14 <__hi0bits+0x3c>
 8017d08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017d0c:	f100 0001 	add.w	r0, r0, #1
 8017d10:	bf08      	it	eq
 8017d12:	2020      	moveq	r0, #32
 8017d14:	4770      	bx	lr

08017d16 <__lo0bits>:
 8017d16:	6803      	ldr	r3, [r0, #0]
 8017d18:	4602      	mov	r2, r0
 8017d1a:	f013 0007 	ands.w	r0, r3, #7
 8017d1e:	d00b      	beq.n	8017d38 <__lo0bits+0x22>
 8017d20:	07d9      	lsls	r1, r3, #31
 8017d22:	d421      	bmi.n	8017d68 <__lo0bits+0x52>
 8017d24:	0798      	lsls	r0, r3, #30
 8017d26:	bf49      	itett	mi
 8017d28:	085b      	lsrmi	r3, r3, #1
 8017d2a:	089b      	lsrpl	r3, r3, #2
 8017d2c:	2001      	movmi	r0, #1
 8017d2e:	6013      	strmi	r3, [r2, #0]
 8017d30:	bf5c      	itt	pl
 8017d32:	6013      	strpl	r3, [r2, #0]
 8017d34:	2002      	movpl	r0, #2
 8017d36:	4770      	bx	lr
 8017d38:	b299      	uxth	r1, r3
 8017d3a:	b909      	cbnz	r1, 8017d40 <__lo0bits+0x2a>
 8017d3c:	0c1b      	lsrs	r3, r3, #16
 8017d3e:	2010      	movs	r0, #16
 8017d40:	b2d9      	uxtb	r1, r3
 8017d42:	b909      	cbnz	r1, 8017d48 <__lo0bits+0x32>
 8017d44:	3008      	adds	r0, #8
 8017d46:	0a1b      	lsrs	r3, r3, #8
 8017d48:	0719      	lsls	r1, r3, #28
 8017d4a:	bf04      	itt	eq
 8017d4c:	091b      	lsreq	r3, r3, #4
 8017d4e:	3004      	addeq	r0, #4
 8017d50:	0799      	lsls	r1, r3, #30
 8017d52:	bf04      	itt	eq
 8017d54:	089b      	lsreq	r3, r3, #2
 8017d56:	3002      	addeq	r0, #2
 8017d58:	07d9      	lsls	r1, r3, #31
 8017d5a:	d403      	bmi.n	8017d64 <__lo0bits+0x4e>
 8017d5c:	085b      	lsrs	r3, r3, #1
 8017d5e:	f100 0001 	add.w	r0, r0, #1
 8017d62:	d003      	beq.n	8017d6c <__lo0bits+0x56>
 8017d64:	6013      	str	r3, [r2, #0]
 8017d66:	4770      	bx	lr
 8017d68:	2000      	movs	r0, #0
 8017d6a:	4770      	bx	lr
 8017d6c:	2020      	movs	r0, #32
 8017d6e:	4770      	bx	lr

08017d70 <__i2b>:
 8017d70:	b510      	push	{r4, lr}
 8017d72:	460c      	mov	r4, r1
 8017d74:	2101      	movs	r1, #1
 8017d76:	f7ff ff07 	bl	8017b88 <_Balloc>
 8017d7a:	4602      	mov	r2, r0
 8017d7c:	b928      	cbnz	r0, 8017d8a <__i2b+0x1a>
 8017d7e:	4b05      	ldr	r3, [pc, #20]	@ (8017d94 <__i2b+0x24>)
 8017d80:	4805      	ldr	r0, [pc, #20]	@ (8017d98 <__i2b+0x28>)
 8017d82:	f240 1145 	movw	r1, #325	@ 0x145
 8017d86:	f000 fcaf 	bl	80186e8 <__assert_func>
 8017d8a:	2301      	movs	r3, #1
 8017d8c:	6144      	str	r4, [r0, #20]
 8017d8e:	6103      	str	r3, [r0, #16]
 8017d90:	bd10      	pop	{r4, pc}
 8017d92:	bf00      	nop
 8017d94:	0801aa45 	.word	0x0801aa45
 8017d98:	0801aa56 	.word	0x0801aa56

08017d9c <__multiply>:
 8017d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da0:	4614      	mov	r4, r2
 8017da2:	690a      	ldr	r2, [r1, #16]
 8017da4:	6923      	ldr	r3, [r4, #16]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	bfa8      	it	ge
 8017daa:	4623      	movge	r3, r4
 8017dac:	460f      	mov	r7, r1
 8017dae:	bfa4      	itt	ge
 8017db0:	460c      	movge	r4, r1
 8017db2:	461f      	movge	r7, r3
 8017db4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017db8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017dbc:	68a3      	ldr	r3, [r4, #8]
 8017dbe:	6861      	ldr	r1, [r4, #4]
 8017dc0:	eb0a 0609 	add.w	r6, sl, r9
 8017dc4:	42b3      	cmp	r3, r6
 8017dc6:	b085      	sub	sp, #20
 8017dc8:	bfb8      	it	lt
 8017dca:	3101      	addlt	r1, #1
 8017dcc:	f7ff fedc 	bl	8017b88 <_Balloc>
 8017dd0:	b930      	cbnz	r0, 8017de0 <__multiply+0x44>
 8017dd2:	4602      	mov	r2, r0
 8017dd4:	4b44      	ldr	r3, [pc, #272]	@ (8017ee8 <__multiply+0x14c>)
 8017dd6:	4845      	ldr	r0, [pc, #276]	@ (8017eec <__multiply+0x150>)
 8017dd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017ddc:	f000 fc84 	bl	80186e8 <__assert_func>
 8017de0:	f100 0514 	add.w	r5, r0, #20
 8017de4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017de8:	462b      	mov	r3, r5
 8017dea:	2200      	movs	r2, #0
 8017dec:	4543      	cmp	r3, r8
 8017dee:	d321      	bcc.n	8017e34 <__multiply+0x98>
 8017df0:	f107 0114 	add.w	r1, r7, #20
 8017df4:	f104 0214 	add.w	r2, r4, #20
 8017df8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017dfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017e00:	9302      	str	r3, [sp, #8]
 8017e02:	1b13      	subs	r3, r2, r4
 8017e04:	3b15      	subs	r3, #21
 8017e06:	f023 0303 	bic.w	r3, r3, #3
 8017e0a:	3304      	adds	r3, #4
 8017e0c:	f104 0715 	add.w	r7, r4, #21
 8017e10:	42ba      	cmp	r2, r7
 8017e12:	bf38      	it	cc
 8017e14:	2304      	movcc	r3, #4
 8017e16:	9301      	str	r3, [sp, #4]
 8017e18:	9b02      	ldr	r3, [sp, #8]
 8017e1a:	9103      	str	r1, [sp, #12]
 8017e1c:	428b      	cmp	r3, r1
 8017e1e:	d80c      	bhi.n	8017e3a <__multiply+0x9e>
 8017e20:	2e00      	cmp	r6, #0
 8017e22:	dd03      	ble.n	8017e2c <__multiply+0x90>
 8017e24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d05b      	beq.n	8017ee4 <__multiply+0x148>
 8017e2c:	6106      	str	r6, [r0, #16]
 8017e2e:	b005      	add	sp, #20
 8017e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e34:	f843 2b04 	str.w	r2, [r3], #4
 8017e38:	e7d8      	b.n	8017dec <__multiply+0x50>
 8017e3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8017e3e:	f1ba 0f00 	cmp.w	sl, #0
 8017e42:	d024      	beq.n	8017e8e <__multiply+0xf2>
 8017e44:	f104 0e14 	add.w	lr, r4, #20
 8017e48:	46a9      	mov	r9, r5
 8017e4a:	f04f 0c00 	mov.w	ip, #0
 8017e4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e52:	f8d9 3000 	ldr.w	r3, [r9]
 8017e56:	fa1f fb87 	uxth.w	fp, r7
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8017e60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017e64:	f8d9 7000 	ldr.w	r7, [r9]
 8017e68:	4463      	add	r3, ip
 8017e6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017e6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8017e72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017e7c:	4572      	cmp	r2, lr
 8017e7e:	f849 3b04 	str.w	r3, [r9], #4
 8017e82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017e86:	d8e2      	bhi.n	8017e4e <__multiply+0xb2>
 8017e88:	9b01      	ldr	r3, [sp, #4]
 8017e8a:	f845 c003 	str.w	ip, [r5, r3]
 8017e8e:	9b03      	ldr	r3, [sp, #12]
 8017e90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017e94:	3104      	adds	r1, #4
 8017e96:	f1b9 0f00 	cmp.w	r9, #0
 8017e9a:	d021      	beq.n	8017ee0 <__multiply+0x144>
 8017e9c:	682b      	ldr	r3, [r5, #0]
 8017e9e:	f104 0c14 	add.w	ip, r4, #20
 8017ea2:	46ae      	mov	lr, r5
 8017ea4:	f04f 0a00 	mov.w	sl, #0
 8017ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8017eac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017eb0:	fb09 770b 	mla	r7, r9, fp, r7
 8017eb4:	4457      	add	r7, sl
 8017eb6:	b29b      	uxth	r3, r3
 8017eb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017ebc:	f84e 3b04 	str.w	r3, [lr], #4
 8017ec0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017ec4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017ec8:	f8be 3000 	ldrh.w	r3, [lr]
 8017ecc:	fb09 330a 	mla	r3, r9, sl, r3
 8017ed0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017ed4:	4562      	cmp	r2, ip
 8017ed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017eda:	d8e5      	bhi.n	8017ea8 <__multiply+0x10c>
 8017edc:	9f01      	ldr	r7, [sp, #4]
 8017ede:	51eb      	str	r3, [r5, r7]
 8017ee0:	3504      	adds	r5, #4
 8017ee2:	e799      	b.n	8017e18 <__multiply+0x7c>
 8017ee4:	3e01      	subs	r6, #1
 8017ee6:	e79b      	b.n	8017e20 <__multiply+0x84>
 8017ee8:	0801aa45 	.word	0x0801aa45
 8017eec:	0801aa56 	.word	0x0801aa56

08017ef0 <__pow5mult>:
 8017ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ef4:	4615      	mov	r5, r2
 8017ef6:	f012 0203 	ands.w	r2, r2, #3
 8017efa:	4607      	mov	r7, r0
 8017efc:	460e      	mov	r6, r1
 8017efe:	d007      	beq.n	8017f10 <__pow5mult+0x20>
 8017f00:	4c25      	ldr	r4, [pc, #148]	@ (8017f98 <__pow5mult+0xa8>)
 8017f02:	3a01      	subs	r2, #1
 8017f04:	2300      	movs	r3, #0
 8017f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017f0a:	f7ff fe9f 	bl	8017c4c <__multadd>
 8017f0e:	4606      	mov	r6, r0
 8017f10:	10ad      	asrs	r5, r5, #2
 8017f12:	d03d      	beq.n	8017f90 <__pow5mult+0xa0>
 8017f14:	69fc      	ldr	r4, [r7, #28]
 8017f16:	b97c      	cbnz	r4, 8017f38 <__pow5mult+0x48>
 8017f18:	2010      	movs	r0, #16
 8017f1a:	f7ff fd7f 	bl	8017a1c <malloc>
 8017f1e:	4602      	mov	r2, r0
 8017f20:	61f8      	str	r0, [r7, #28]
 8017f22:	b928      	cbnz	r0, 8017f30 <__pow5mult+0x40>
 8017f24:	4b1d      	ldr	r3, [pc, #116]	@ (8017f9c <__pow5mult+0xac>)
 8017f26:	481e      	ldr	r0, [pc, #120]	@ (8017fa0 <__pow5mult+0xb0>)
 8017f28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017f2c:	f000 fbdc 	bl	80186e8 <__assert_func>
 8017f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017f34:	6004      	str	r4, [r0, #0]
 8017f36:	60c4      	str	r4, [r0, #12]
 8017f38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017f40:	b94c      	cbnz	r4, 8017f56 <__pow5mult+0x66>
 8017f42:	f240 2171 	movw	r1, #625	@ 0x271
 8017f46:	4638      	mov	r0, r7
 8017f48:	f7ff ff12 	bl	8017d70 <__i2b>
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017f52:	4604      	mov	r4, r0
 8017f54:	6003      	str	r3, [r0, #0]
 8017f56:	f04f 0900 	mov.w	r9, #0
 8017f5a:	07eb      	lsls	r3, r5, #31
 8017f5c:	d50a      	bpl.n	8017f74 <__pow5mult+0x84>
 8017f5e:	4631      	mov	r1, r6
 8017f60:	4622      	mov	r2, r4
 8017f62:	4638      	mov	r0, r7
 8017f64:	f7ff ff1a 	bl	8017d9c <__multiply>
 8017f68:	4631      	mov	r1, r6
 8017f6a:	4680      	mov	r8, r0
 8017f6c:	4638      	mov	r0, r7
 8017f6e:	f7ff fe4b 	bl	8017c08 <_Bfree>
 8017f72:	4646      	mov	r6, r8
 8017f74:	106d      	asrs	r5, r5, #1
 8017f76:	d00b      	beq.n	8017f90 <__pow5mult+0xa0>
 8017f78:	6820      	ldr	r0, [r4, #0]
 8017f7a:	b938      	cbnz	r0, 8017f8c <__pow5mult+0x9c>
 8017f7c:	4622      	mov	r2, r4
 8017f7e:	4621      	mov	r1, r4
 8017f80:	4638      	mov	r0, r7
 8017f82:	f7ff ff0b 	bl	8017d9c <__multiply>
 8017f86:	6020      	str	r0, [r4, #0]
 8017f88:	f8c0 9000 	str.w	r9, [r0]
 8017f8c:	4604      	mov	r4, r0
 8017f8e:	e7e4      	b.n	8017f5a <__pow5mult+0x6a>
 8017f90:	4630      	mov	r0, r6
 8017f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f96:	bf00      	nop
 8017f98:	0801aab0 	.word	0x0801aab0
 8017f9c:	0801a9d6 	.word	0x0801a9d6
 8017fa0:	0801aa56 	.word	0x0801aa56

08017fa4 <__lshift>:
 8017fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fa8:	460c      	mov	r4, r1
 8017faa:	6849      	ldr	r1, [r1, #4]
 8017fac:	6923      	ldr	r3, [r4, #16]
 8017fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017fb2:	68a3      	ldr	r3, [r4, #8]
 8017fb4:	4607      	mov	r7, r0
 8017fb6:	4691      	mov	r9, r2
 8017fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017fbc:	f108 0601 	add.w	r6, r8, #1
 8017fc0:	42b3      	cmp	r3, r6
 8017fc2:	db0b      	blt.n	8017fdc <__lshift+0x38>
 8017fc4:	4638      	mov	r0, r7
 8017fc6:	f7ff fddf 	bl	8017b88 <_Balloc>
 8017fca:	4605      	mov	r5, r0
 8017fcc:	b948      	cbnz	r0, 8017fe2 <__lshift+0x3e>
 8017fce:	4602      	mov	r2, r0
 8017fd0:	4b28      	ldr	r3, [pc, #160]	@ (8018074 <__lshift+0xd0>)
 8017fd2:	4829      	ldr	r0, [pc, #164]	@ (8018078 <__lshift+0xd4>)
 8017fd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017fd8:	f000 fb86 	bl	80186e8 <__assert_func>
 8017fdc:	3101      	adds	r1, #1
 8017fde:	005b      	lsls	r3, r3, #1
 8017fe0:	e7ee      	b.n	8017fc0 <__lshift+0x1c>
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	f100 0114 	add.w	r1, r0, #20
 8017fe8:	f100 0210 	add.w	r2, r0, #16
 8017fec:	4618      	mov	r0, r3
 8017fee:	4553      	cmp	r3, sl
 8017ff0:	db33      	blt.n	801805a <__lshift+0xb6>
 8017ff2:	6920      	ldr	r0, [r4, #16]
 8017ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ff8:	f104 0314 	add.w	r3, r4, #20
 8017ffc:	f019 091f 	ands.w	r9, r9, #31
 8018000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018004:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018008:	d02b      	beq.n	8018062 <__lshift+0xbe>
 801800a:	f1c9 0e20 	rsb	lr, r9, #32
 801800e:	468a      	mov	sl, r1
 8018010:	2200      	movs	r2, #0
 8018012:	6818      	ldr	r0, [r3, #0]
 8018014:	fa00 f009 	lsl.w	r0, r0, r9
 8018018:	4310      	orrs	r0, r2
 801801a:	f84a 0b04 	str.w	r0, [sl], #4
 801801e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018022:	459c      	cmp	ip, r3
 8018024:	fa22 f20e 	lsr.w	r2, r2, lr
 8018028:	d8f3      	bhi.n	8018012 <__lshift+0x6e>
 801802a:	ebac 0304 	sub.w	r3, ip, r4
 801802e:	3b15      	subs	r3, #21
 8018030:	f023 0303 	bic.w	r3, r3, #3
 8018034:	3304      	adds	r3, #4
 8018036:	f104 0015 	add.w	r0, r4, #21
 801803a:	4584      	cmp	ip, r0
 801803c:	bf38      	it	cc
 801803e:	2304      	movcc	r3, #4
 8018040:	50ca      	str	r2, [r1, r3]
 8018042:	b10a      	cbz	r2, 8018048 <__lshift+0xa4>
 8018044:	f108 0602 	add.w	r6, r8, #2
 8018048:	3e01      	subs	r6, #1
 801804a:	4638      	mov	r0, r7
 801804c:	612e      	str	r6, [r5, #16]
 801804e:	4621      	mov	r1, r4
 8018050:	f7ff fdda 	bl	8017c08 <_Bfree>
 8018054:	4628      	mov	r0, r5
 8018056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801805a:	f842 0f04 	str.w	r0, [r2, #4]!
 801805e:	3301      	adds	r3, #1
 8018060:	e7c5      	b.n	8017fee <__lshift+0x4a>
 8018062:	3904      	subs	r1, #4
 8018064:	f853 2b04 	ldr.w	r2, [r3], #4
 8018068:	f841 2f04 	str.w	r2, [r1, #4]!
 801806c:	459c      	cmp	ip, r3
 801806e:	d8f9      	bhi.n	8018064 <__lshift+0xc0>
 8018070:	e7ea      	b.n	8018048 <__lshift+0xa4>
 8018072:	bf00      	nop
 8018074:	0801aa45 	.word	0x0801aa45
 8018078:	0801aa56 	.word	0x0801aa56

0801807c <__mcmp>:
 801807c:	690a      	ldr	r2, [r1, #16]
 801807e:	4603      	mov	r3, r0
 8018080:	6900      	ldr	r0, [r0, #16]
 8018082:	1a80      	subs	r0, r0, r2
 8018084:	b530      	push	{r4, r5, lr}
 8018086:	d10e      	bne.n	80180a6 <__mcmp+0x2a>
 8018088:	3314      	adds	r3, #20
 801808a:	3114      	adds	r1, #20
 801808c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018090:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801809c:	4295      	cmp	r5, r2
 801809e:	d003      	beq.n	80180a8 <__mcmp+0x2c>
 80180a0:	d205      	bcs.n	80180ae <__mcmp+0x32>
 80180a2:	f04f 30ff 	mov.w	r0, #4294967295
 80180a6:	bd30      	pop	{r4, r5, pc}
 80180a8:	42a3      	cmp	r3, r4
 80180aa:	d3f3      	bcc.n	8018094 <__mcmp+0x18>
 80180ac:	e7fb      	b.n	80180a6 <__mcmp+0x2a>
 80180ae:	2001      	movs	r0, #1
 80180b0:	e7f9      	b.n	80180a6 <__mcmp+0x2a>
	...

080180b4 <__mdiff>:
 80180b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b8:	4689      	mov	r9, r1
 80180ba:	4606      	mov	r6, r0
 80180bc:	4611      	mov	r1, r2
 80180be:	4648      	mov	r0, r9
 80180c0:	4614      	mov	r4, r2
 80180c2:	f7ff ffdb 	bl	801807c <__mcmp>
 80180c6:	1e05      	subs	r5, r0, #0
 80180c8:	d112      	bne.n	80180f0 <__mdiff+0x3c>
 80180ca:	4629      	mov	r1, r5
 80180cc:	4630      	mov	r0, r6
 80180ce:	f7ff fd5b 	bl	8017b88 <_Balloc>
 80180d2:	4602      	mov	r2, r0
 80180d4:	b928      	cbnz	r0, 80180e2 <__mdiff+0x2e>
 80180d6:	4b3f      	ldr	r3, [pc, #252]	@ (80181d4 <__mdiff+0x120>)
 80180d8:	f240 2137 	movw	r1, #567	@ 0x237
 80180dc:	483e      	ldr	r0, [pc, #248]	@ (80181d8 <__mdiff+0x124>)
 80180de:	f000 fb03 	bl	80186e8 <__assert_func>
 80180e2:	2301      	movs	r3, #1
 80180e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80180e8:	4610      	mov	r0, r2
 80180ea:	b003      	add	sp, #12
 80180ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f0:	bfbc      	itt	lt
 80180f2:	464b      	movlt	r3, r9
 80180f4:	46a1      	movlt	r9, r4
 80180f6:	4630      	mov	r0, r6
 80180f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80180fc:	bfba      	itte	lt
 80180fe:	461c      	movlt	r4, r3
 8018100:	2501      	movlt	r5, #1
 8018102:	2500      	movge	r5, #0
 8018104:	f7ff fd40 	bl	8017b88 <_Balloc>
 8018108:	4602      	mov	r2, r0
 801810a:	b918      	cbnz	r0, 8018114 <__mdiff+0x60>
 801810c:	4b31      	ldr	r3, [pc, #196]	@ (80181d4 <__mdiff+0x120>)
 801810e:	f240 2145 	movw	r1, #581	@ 0x245
 8018112:	e7e3      	b.n	80180dc <__mdiff+0x28>
 8018114:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018118:	6926      	ldr	r6, [r4, #16]
 801811a:	60c5      	str	r5, [r0, #12]
 801811c:	f109 0310 	add.w	r3, r9, #16
 8018120:	f109 0514 	add.w	r5, r9, #20
 8018124:	f104 0e14 	add.w	lr, r4, #20
 8018128:	f100 0b14 	add.w	fp, r0, #20
 801812c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018130:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018134:	9301      	str	r3, [sp, #4]
 8018136:	46d9      	mov	r9, fp
 8018138:	f04f 0c00 	mov.w	ip, #0
 801813c:	9b01      	ldr	r3, [sp, #4]
 801813e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018142:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018146:	9301      	str	r3, [sp, #4]
 8018148:	fa1f f38a 	uxth.w	r3, sl
 801814c:	4619      	mov	r1, r3
 801814e:	b283      	uxth	r3, r0
 8018150:	1acb      	subs	r3, r1, r3
 8018152:	0c00      	lsrs	r0, r0, #16
 8018154:	4463      	add	r3, ip
 8018156:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801815a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801815e:	b29b      	uxth	r3, r3
 8018160:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018164:	4576      	cmp	r6, lr
 8018166:	f849 3b04 	str.w	r3, [r9], #4
 801816a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801816e:	d8e5      	bhi.n	801813c <__mdiff+0x88>
 8018170:	1b33      	subs	r3, r6, r4
 8018172:	3b15      	subs	r3, #21
 8018174:	f023 0303 	bic.w	r3, r3, #3
 8018178:	3415      	adds	r4, #21
 801817a:	3304      	adds	r3, #4
 801817c:	42a6      	cmp	r6, r4
 801817e:	bf38      	it	cc
 8018180:	2304      	movcc	r3, #4
 8018182:	441d      	add	r5, r3
 8018184:	445b      	add	r3, fp
 8018186:	461e      	mov	r6, r3
 8018188:	462c      	mov	r4, r5
 801818a:	4544      	cmp	r4, r8
 801818c:	d30e      	bcc.n	80181ac <__mdiff+0xf8>
 801818e:	f108 0103 	add.w	r1, r8, #3
 8018192:	1b49      	subs	r1, r1, r5
 8018194:	f021 0103 	bic.w	r1, r1, #3
 8018198:	3d03      	subs	r5, #3
 801819a:	45a8      	cmp	r8, r5
 801819c:	bf38      	it	cc
 801819e:	2100      	movcc	r1, #0
 80181a0:	440b      	add	r3, r1
 80181a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80181a6:	b191      	cbz	r1, 80181ce <__mdiff+0x11a>
 80181a8:	6117      	str	r7, [r2, #16]
 80181aa:	e79d      	b.n	80180e8 <__mdiff+0x34>
 80181ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80181b0:	46e6      	mov	lr, ip
 80181b2:	0c08      	lsrs	r0, r1, #16
 80181b4:	fa1c fc81 	uxtah	ip, ip, r1
 80181b8:	4471      	add	r1, lr
 80181ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80181be:	b289      	uxth	r1, r1
 80181c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80181c4:	f846 1b04 	str.w	r1, [r6], #4
 80181c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80181cc:	e7dd      	b.n	801818a <__mdiff+0xd6>
 80181ce:	3f01      	subs	r7, #1
 80181d0:	e7e7      	b.n	80181a2 <__mdiff+0xee>
 80181d2:	bf00      	nop
 80181d4:	0801aa45 	.word	0x0801aa45
 80181d8:	0801aa56 	.word	0x0801aa56

080181dc <__d2b>:
 80181dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80181e0:	460f      	mov	r7, r1
 80181e2:	2101      	movs	r1, #1
 80181e4:	ec59 8b10 	vmov	r8, r9, d0
 80181e8:	4616      	mov	r6, r2
 80181ea:	f7ff fccd 	bl	8017b88 <_Balloc>
 80181ee:	4604      	mov	r4, r0
 80181f0:	b930      	cbnz	r0, 8018200 <__d2b+0x24>
 80181f2:	4602      	mov	r2, r0
 80181f4:	4b23      	ldr	r3, [pc, #140]	@ (8018284 <__d2b+0xa8>)
 80181f6:	4824      	ldr	r0, [pc, #144]	@ (8018288 <__d2b+0xac>)
 80181f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80181fc:	f000 fa74 	bl	80186e8 <__assert_func>
 8018200:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018204:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018208:	b10d      	cbz	r5, 801820e <__d2b+0x32>
 801820a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801820e:	9301      	str	r3, [sp, #4]
 8018210:	f1b8 0300 	subs.w	r3, r8, #0
 8018214:	d023      	beq.n	801825e <__d2b+0x82>
 8018216:	4668      	mov	r0, sp
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	f7ff fd7c 	bl	8017d16 <__lo0bits>
 801821e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018222:	b1d0      	cbz	r0, 801825a <__d2b+0x7e>
 8018224:	f1c0 0320 	rsb	r3, r0, #32
 8018228:	fa02 f303 	lsl.w	r3, r2, r3
 801822c:	430b      	orrs	r3, r1
 801822e:	40c2      	lsrs	r2, r0
 8018230:	6163      	str	r3, [r4, #20]
 8018232:	9201      	str	r2, [sp, #4]
 8018234:	9b01      	ldr	r3, [sp, #4]
 8018236:	61a3      	str	r3, [r4, #24]
 8018238:	2b00      	cmp	r3, #0
 801823a:	bf0c      	ite	eq
 801823c:	2201      	moveq	r2, #1
 801823e:	2202      	movne	r2, #2
 8018240:	6122      	str	r2, [r4, #16]
 8018242:	b1a5      	cbz	r5, 801826e <__d2b+0x92>
 8018244:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018248:	4405      	add	r5, r0
 801824a:	603d      	str	r5, [r7, #0]
 801824c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018250:	6030      	str	r0, [r6, #0]
 8018252:	4620      	mov	r0, r4
 8018254:	b003      	add	sp, #12
 8018256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801825a:	6161      	str	r1, [r4, #20]
 801825c:	e7ea      	b.n	8018234 <__d2b+0x58>
 801825e:	a801      	add	r0, sp, #4
 8018260:	f7ff fd59 	bl	8017d16 <__lo0bits>
 8018264:	9b01      	ldr	r3, [sp, #4]
 8018266:	6163      	str	r3, [r4, #20]
 8018268:	3020      	adds	r0, #32
 801826a:	2201      	movs	r2, #1
 801826c:	e7e8      	b.n	8018240 <__d2b+0x64>
 801826e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018272:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018276:	6038      	str	r0, [r7, #0]
 8018278:	6918      	ldr	r0, [r3, #16]
 801827a:	f7ff fd2d 	bl	8017cd8 <__hi0bits>
 801827e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018282:	e7e5      	b.n	8018250 <__d2b+0x74>
 8018284:	0801aa45 	.word	0x0801aa45
 8018288:	0801aa56 	.word	0x0801aa56

0801828c <__ssputs_r>:
 801828c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018290:	688e      	ldr	r6, [r1, #8]
 8018292:	461f      	mov	r7, r3
 8018294:	42be      	cmp	r6, r7
 8018296:	680b      	ldr	r3, [r1, #0]
 8018298:	4682      	mov	sl, r0
 801829a:	460c      	mov	r4, r1
 801829c:	4690      	mov	r8, r2
 801829e:	d82d      	bhi.n	80182fc <__ssputs_r+0x70>
 80182a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80182a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80182a8:	d026      	beq.n	80182f8 <__ssputs_r+0x6c>
 80182aa:	6965      	ldr	r5, [r4, #20]
 80182ac:	6909      	ldr	r1, [r1, #16]
 80182ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182b2:	eba3 0901 	sub.w	r9, r3, r1
 80182b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80182ba:	1c7b      	adds	r3, r7, #1
 80182bc:	444b      	add	r3, r9
 80182be:	106d      	asrs	r5, r5, #1
 80182c0:	429d      	cmp	r5, r3
 80182c2:	bf38      	it	cc
 80182c4:	461d      	movcc	r5, r3
 80182c6:	0553      	lsls	r3, r2, #21
 80182c8:	d527      	bpl.n	801831a <__ssputs_r+0x8e>
 80182ca:	4629      	mov	r1, r5
 80182cc:	f7ff fbd0 	bl	8017a70 <_malloc_r>
 80182d0:	4606      	mov	r6, r0
 80182d2:	b360      	cbz	r0, 801832e <__ssputs_r+0xa2>
 80182d4:	6921      	ldr	r1, [r4, #16]
 80182d6:	464a      	mov	r2, r9
 80182d8:	f7fe fcf9 	bl	8016cce <memcpy>
 80182dc:	89a3      	ldrh	r3, [r4, #12]
 80182de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80182e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80182e6:	81a3      	strh	r3, [r4, #12]
 80182e8:	6126      	str	r6, [r4, #16]
 80182ea:	6165      	str	r5, [r4, #20]
 80182ec:	444e      	add	r6, r9
 80182ee:	eba5 0509 	sub.w	r5, r5, r9
 80182f2:	6026      	str	r6, [r4, #0]
 80182f4:	60a5      	str	r5, [r4, #8]
 80182f6:	463e      	mov	r6, r7
 80182f8:	42be      	cmp	r6, r7
 80182fa:	d900      	bls.n	80182fe <__ssputs_r+0x72>
 80182fc:	463e      	mov	r6, r7
 80182fe:	6820      	ldr	r0, [r4, #0]
 8018300:	4632      	mov	r2, r6
 8018302:	4641      	mov	r1, r8
 8018304:	f000 f9c6 	bl	8018694 <memmove>
 8018308:	68a3      	ldr	r3, [r4, #8]
 801830a:	1b9b      	subs	r3, r3, r6
 801830c:	60a3      	str	r3, [r4, #8]
 801830e:	6823      	ldr	r3, [r4, #0]
 8018310:	4433      	add	r3, r6
 8018312:	6023      	str	r3, [r4, #0]
 8018314:	2000      	movs	r0, #0
 8018316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801831a:	462a      	mov	r2, r5
 801831c:	f000 fa28 	bl	8018770 <_realloc_r>
 8018320:	4606      	mov	r6, r0
 8018322:	2800      	cmp	r0, #0
 8018324:	d1e0      	bne.n	80182e8 <__ssputs_r+0x5c>
 8018326:	6921      	ldr	r1, [r4, #16]
 8018328:	4650      	mov	r0, sl
 801832a:	f7ff fb2d 	bl	8017988 <_free_r>
 801832e:	230c      	movs	r3, #12
 8018330:	f8ca 3000 	str.w	r3, [sl]
 8018334:	89a3      	ldrh	r3, [r4, #12]
 8018336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801833a:	81a3      	strh	r3, [r4, #12]
 801833c:	f04f 30ff 	mov.w	r0, #4294967295
 8018340:	e7e9      	b.n	8018316 <__ssputs_r+0x8a>
	...

08018344 <_svfiprintf_r>:
 8018344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018348:	4698      	mov	r8, r3
 801834a:	898b      	ldrh	r3, [r1, #12]
 801834c:	061b      	lsls	r3, r3, #24
 801834e:	b09d      	sub	sp, #116	@ 0x74
 8018350:	4607      	mov	r7, r0
 8018352:	460d      	mov	r5, r1
 8018354:	4614      	mov	r4, r2
 8018356:	d510      	bpl.n	801837a <_svfiprintf_r+0x36>
 8018358:	690b      	ldr	r3, [r1, #16]
 801835a:	b973      	cbnz	r3, 801837a <_svfiprintf_r+0x36>
 801835c:	2140      	movs	r1, #64	@ 0x40
 801835e:	f7ff fb87 	bl	8017a70 <_malloc_r>
 8018362:	6028      	str	r0, [r5, #0]
 8018364:	6128      	str	r0, [r5, #16]
 8018366:	b930      	cbnz	r0, 8018376 <_svfiprintf_r+0x32>
 8018368:	230c      	movs	r3, #12
 801836a:	603b      	str	r3, [r7, #0]
 801836c:	f04f 30ff 	mov.w	r0, #4294967295
 8018370:	b01d      	add	sp, #116	@ 0x74
 8018372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018376:	2340      	movs	r3, #64	@ 0x40
 8018378:	616b      	str	r3, [r5, #20]
 801837a:	2300      	movs	r3, #0
 801837c:	9309      	str	r3, [sp, #36]	@ 0x24
 801837e:	2320      	movs	r3, #32
 8018380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018384:	f8cd 800c 	str.w	r8, [sp, #12]
 8018388:	2330      	movs	r3, #48	@ 0x30
 801838a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018528 <_svfiprintf_r+0x1e4>
 801838e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018392:	f04f 0901 	mov.w	r9, #1
 8018396:	4623      	mov	r3, r4
 8018398:	469a      	mov	sl, r3
 801839a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801839e:	b10a      	cbz	r2, 80183a4 <_svfiprintf_r+0x60>
 80183a0:	2a25      	cmp	r2, #37	@ 0x25
 80183a2:	d1f9      	bne.n	8018398 <_svfiprintf_r+0x54>
 80183a4:	ebba 0b04 	subs.w	fp, sl, r4
 80183a8:	d00b      	beq.n	80183c2 <_svfiprintf_r+0x7e>
 80183aa:	465b      	mov	r3, fp
 80183ac:	4622      	mov	r2, r4
 80183ae:	4629      	mov	r1, r5
 80183b0:	4638      	mov	r0, r7
 80183b2:	f7ff ff6b 	bl	801828c <__ssputs_r>
 80183b6:	3001      	adds	r0, #1
 80183b8:	f000 80a7 	beq.w	801850a <_svfiprintf_r+0x1c6>
 80183bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80183be:	445a      	add	r2, fp
 80183c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80183c2:	f89a 3000 	ldrb.w	r3, [sl]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	f000 809f 	beq.w	801850a <_svfiprintf_r+0x1c6>
 80183cc:	2300      	movs	r3, #0
 80183ce:	f04f 32ff 	mov.w	r2, #4294967295
 80183d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183d6:	f10a 0a01 	add.w	sl, sl, #1
 80183da:	9304      	str	r3, [sp, #16]
 80183dc:	9307      	str	r3, [sp, #28]
 80183de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80183e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80183e4:	4654      	mov	r4, sl
 80183e6:	2205      	movs	r2, #5
 80183e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183ec:	484e      	ldr	r0, [pc, #312]	@ (8018528 <_svfiprintf_r+0x1e4>)
 80183ee:	f7e7 ff0f 	bl	8000210 <memchr>
 80183f2:	9a04      	ldr	r2, [sp, #16]
 80183f4:	b9d8      	cbnz	r0, 801842e <_svfiprintf_r+0xea>
 80183f6:	06d0      	lsls	r0, r2, #27
 80183f8:	bf44      	itt	mi
 80183fa:	2320      	movmi	r3, #32
 80183fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018400:	0711      	lsls	r1, r2, #28
 8018402:	bf44      	itt	mi
 8018404:	232b      	movmi	r3, #43	@ 0x2b
 8018406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801840a:	f89a 3000 	ldrb.w	r3, [sl]
 801840e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018410:	d015      	beq.n	801843e <_svfiprintf_r+0xfa>
 8018412:	9a07      	ldr	r2, [sp, #28]
 8018414:	4654      	mov	r4, sl
 8018416:	2000      	movs	r0, #0
 8018418:	f04f 0c0a 	mov.w	ip, #10
 801841c:	4621      	mov	r1, r4
 801841e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018422:	3b30      	subs	r3, #48	@ 0x30
 8018424:	2b09      	cmp	r3, #9
 8018426:	d94b      	bls.n	80184c0 <_svfiprintf_r+0x17c>
 8018428:	b1b0      	cbz	r0, 8018458 <_svfiprintf_r+0x114>
 801842a:	9207      	str	r2, [sp, #28]
 801842c:	e014      	b.n	8018458 <_svfiprintf_r+0x114>
 801842e:	eba0 0308 	sub.w	r3, r0, r8
 8018432:	fa09 f303 	lsl.w	r3, r9, r3
 8018436:	4313      	orrs	r3, r2
 8018438:	9304      	str	r3, [sp, #16]
 801843a:	46a2      	mov	sl, r4
 801843c:	e7d2      	b.n	80183e4 <_svfiprintf_r+0xa0>
 801843e:	9b03      	ldr	r3, [sp, #12]
 8018440:	1d19      	adds	r1, r3, #4
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	9103      	str	r1, [sp, #12]
 8018446:	2b00      	cmp	r3, #0
 8018448:	bfbb      	ittet	lt
 801844a:	425b      	neglt	r3, r3
 801844c:	f042 0202 	orrlt.w	r2, r2, #2
 8018450:	9307      	strge	r3, [sp, #28]
 8018452:	9307      	strlt	r3, [sp, #28]
 8018454:	bfb8      	it	lt
 8018456:	9204      	strlt	r2, [sp, #16]
 8018458:	7823      	ldrb	r3, [r4, #0]
 801845a:	2b2e      	cmp	r3, #46	@ 0x2e
 801845c:	d10a      	bne.n	8018474 <_svfiprintf_r+0x130>
 801845e:	7863      	ldrb	r3, [r4, #1]
 8018460:	2b2a      	cmp	r3, #42	@ 0x2a
 8018462:	d132      	bne.n	80184ca <_svfiprintf_r+0x186>
 8018464:	9b03      	ldr	r3, [sp, #12]
 8018466:	1d1a      	adds	r2, r3, #4
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	9203      	str	r2, [sp, #12]
 801846c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018470:	3402      	adds	r4, #2
 8018472:	9305      	str	r3, [sp, #20]
 8018474:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018538 <_svfiprintf_r+0x1f4>
 8018478:	7821      	ldrb	r1, [r4, #0]
 801847a:	2203      	movs	r2, #3
 801847c:	4650      	mov	r0, sl
 801847e:	f7e7 fec7 	bl	8000210 <memchr>
 8018482:	b138      	cbz	r0, 8018494 <_svfiprintf_r+0x150>
 8018484:	9b04      	ldr	r3, [sp, #16]
 8018486:	eba0 000a 	sub.w	r0, r0, sl
 801848a:	2240      	movs	r2, #64	@ 0x40
 801848c:	4082      	lsls	r2, r0
 801848e:	4313      	orrs	r3, r2
 8018490:	3401      	adds	r4, #1
 8018492:	9304      	str	r3, [sp, #16]
 8018494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018498:	4824      	ldr	r0, [pc, #144]	@ (801852c <_svfiprintf_r+0x1e8>)
 801849a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801849e:	2206      	movs	r2, #6
 80184a0:	f7e7 feb6 	bl	8000210 <memchr>
 80184a4:	2800      	cmp	r0, #0
 80184a6:	d036      	beq.n	8018516 <_svfiprintf_r+0x1d2>
 80184a8:	4b21      	ldr	r3, [pc, #132]	@ (8018530 <_svfiprintf_r+0x1ec>)
 80184aa:	bb1b      	cbnz	r3, 80184f4 <_svfiprintf_r+0x1b0>
 80184ac:	9b03      	ldr	r3, [sp, #12]
 80184ae:	3307      	adds	r3, #7
 80184b0:	f023 0307 	bic.w	r3, r3, #7
 80184b4:	3308      	adds	r3, #8
 80184b6:	9303      	str	r3, [sp, #12]
 80184b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184ba:	4433      	add	r3, r6
 80184bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80184be:	e76a      	b.n	8018396 <_svfiprintf_r+0x52>
 80184c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80184c4:	460c      	mov	r4, r1
 80184c6:	2001      	movs	r0, #1
 80184c8:	e7a8      	b.n	801841c <_svfiprintf_r+0xd8>
 80184ca:	2300      	movs	r3, #0
 80184cc:	3401      	adds	r4, #1
 80184ce:	9305      	str	r3, [sp, #20]
 80184d0:	4619      	mov	r1, r3
 80184d2:	f04f 0c0a 	mov.w	ip, #10
 80184d6:	4620      	mov	r0, r4
 80184d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184dc:	3a30      	subs	r2, #48	@ 0x30
 80184de:	2a09      	cmp	r2, #9
 80184e0:	d903      	bls.n	80184ea <_svfiprintf_r+0x1a6>
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d0c6      	beq.n	8018474 <_svfiprintf_r+0x130>
 80184e6:	9105      	str	r1, [sp, #20]
 80184e8:	e7c4      	b.n	8018474 <_svfiprintf_r+0x130>
 80184ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80184ee:	4604      	mov	r4, r0
 80184f0:	2301      	movs	r3, #1
 80184f2:	e7f0      	b.n	80184d6 <_svfiprintf_r+0x192>
 80184f4:	ab03      	add	r3, sp, #12
 80184f6:	9300      	str	r3, [sp, #0]
 80184f8:	462a      	mov	r2, r5
 80184fa:	4b0e      	ldr	r3, [pc, #56]	@ (8018534 <_svfiprintf_r+0x1f0>)
 80184fc:	a904      	add	r1, sp, #16
 80184fe:	4638      	mov	r0, r7
 8018500:	f7fd fe50 	bl	80161a4 <_printf_float>
 8018504:	1c42      	adds	r2, r0, #1
 8018506:	4606      	mov	r6, r0
 8018508:	d1d6      	bne.n	80184b8 <_svfiprintf_r+0x174>
 801850a:	89ab      	ldrh	r3, [r5, #12]
 801850c:	065b      	lsls	r3, r3, #25
 801850e:	f53f af2d 	bmi.w	801836c <_svfiprintf_r+0x28>
 8018512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018514:	e72c      	b.n	8018370 <_svfiprintf_r+0x2c>
 8018516:	ab03      	add	r3, sp, #12
 8018518:	9300      	str	r3, [sp, #0]
 801851a:	462a      	mov	r2, r5
 801851c:	4b05      	ldr	r3, [pc, #20]	@ (8018534 <_svfiprintf_r+0x1f0>)
 801851e:	a904      	add	r1, sp, #16
 8018520:	4638      	mov	r0, r7
 8018522:	f7fe f8d7 	bl	80166d4 <_printf_i>
 8018526:	e7ed      	b.n	8018504 <_svfiprintf_r+0x1c0>
 8018528:	0801abb0 	.word	0x0801abb0
 801852c:	0801abba 	.word	0x0801abba
 8018530:	080161a5 	.word	0x080161a5
 8018534:	0801828d 	.word	0x0801828d
 8018538:	0801abb6 	.word	0x0801abb6

0801853c <__sflush_r>:
 801853c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018544:	0716      	lsls	r6, r2, #28
 8018546:	4605      	mov	r5, r0
 8018548:	460c      	mov	r4, r1
 801854a:	d454      	bmi.n	80185f6 <__sflush_r+0xba>
 801854c:	684b      	ldr	r3, [r1, #4]
 801854e:	2b00      	cmp	r3, #0
 8018550:	dc02      	bgt.n	8018558 <__sflush_r+0x1c>
 8018552:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018554:	2b00      	cmp	r3, #0
 8018556:	dd48      	ble.n	80185ea <__sflush_r+0xae>
 8018558:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801855a:	2e00      	cmp	r6, #0
 801855c:	d045      	beq.n	80185ea <__sflush_r+0xae>
 801855e:	2300      	movs	r3, #0
 8018560:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018564:	682f      	ldr	r7, [r5, #0]
 8018566:	6a21      	ldr	r1, [r4, #32]
 8018568:	602b      	str	r3, [r5, #0]
 801856a:	d030      	beq.n	80185ce <__sflush_r+0x92>
 801856c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801856e:	89a3      	ldrh	r3, [r4, #12]
 8018570:	0759      	lsls	r1, r3, #29
 8018572:	d505      	bpl.n	8018580 <__sflush_r+0x44>
 8018574:	6863      	ldr	r3, [r4, #4]
 8018576:	1ad2      	subs	r2, r2, r3
 8018578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801857a:	b10b      	cbz	r3, 8018580 <__sflush_r+0x44>
 801857c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801857e:	1ad2      	subs	r2, r2, r3
 8018580:	2300      	movs	r3, #0
 8018582:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018584:	6a21      	ldr	r1, [r4, #32]
 8018586:	4628      	mov	r0, r5
 8018588:	47b0      	blx	r6
 801858a:	1c43      	adds	r3, r0, #1
 801858c:	89a3      	ldrh	r3, [r4, #12]
 801858e:	d106      	bne.n	801859e <__sflush_r+0x62>
 8018590:	6829      	ldr	r1, [r5, #0]
 8018592:	291d      	cmp	r1, #29
 8018594:	d82b      	bhi.n	80185ee <__sflush_r+0xb2>
 8018596:	4a2a      	ldr	r2, [pc, #168]	@ (8018640 <__sflush_r+0x104>)
 8018598:	410a      	asrs	r2, r1
 801859a:	07d6      	lsls	r6, r2, #31
 801859c:	d427      	bmi.n	80185ee <__sflush_r+0xb2>
 801859e:	2200      	movs	r2, #0
 80185a0:	6062      	str	r2, [r4, #4]
 80185a2:	04d9      	lsls	r1, r3, #19
 80185a4:	6922      	ldr	r2, [r4, #16]
 80185a6:	6022      	str	r2, [r4, #0]
 80185a8:	d504      	bpl.n	80185b4 <__sflush_r+0x78>
 80185aa:	1c42      	adds	r2, r0, #1
 80185ac:	d101      	bne.n	80185b2 <__sflush_r+0x76>
 80185ae:	682b      	ldr	r3, [r5, #0]
 80185b0:	b903      	cbnz	r3, 80185b4 <__sflush_r+0x78>
 80185b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80185b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80185b6:	602f      	str	r7, [r5, #0]
 80185b8:	b1b9      	cbz	r1, 80185ea <__sflush_r+0xae>
 80185ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80185be:	4299      	cmp	r1, r3
 80185c0:	d002      	beq.n	80185c8 <__sflush_r+0x8c>
 80185c2:	4628      	mov	r0, r5
 80185c4:	f7ff f9e0 	bl	8017988 <_free_r>
 80185c8:	2300      	movs	r3, #0
 80185ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80185cc:	e00d      	b.n	80185ea <__sflush_r+0xae>
 80185ce:	2301      	movs	r3, #1
 80185d0:	4628      	mov	r0, r5
 80185d2:	47b0      	blx	r6
 80185d4:	4602      	mov	r2, r0
 80185d6:	1c50      	adds	r0, r2, #1
 80185d8:	d1c9      	bne.n	801856e <__sflush_r+0x32>
 80185da:	682b      	ldr	r3, [r5, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d0c6      	beq.n	801856e <__sflush_r+0x32>
 80185e0:	2b1d      	cmp	r3, #29
 80185e2:	d001      	beq.n	80185e8 <__sflush_r+0xac>
 80185e4:	2b16      	cmp	r3, #22
 80185e6:	d11e      	bne.n	8018626 <__sflush_r+0xea>
 80185e8:	602f      	str	r7, [r5, #0]
 80185ea:	2000      	movs	r0, #0
 80185ec:	e022      	b.n	8018634 <__sflush_r+0xf8>
 80185ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80185f2:	b21b      	sxth	r3, r3
 80185f4:	e01b      	b.n	801862e <__sflush_r+0xf2>
 80185f6:	690f      	ldr	r7, [r1, #16]
 80185f8:	2f00      	cmp	r7, #0
 80185fa:	d0f6      	beq.n	80185ea <__sflush_r+0xae>
 80185fc:	0793      	lsls	r3, r2, #30
 80185fe:	680e      	ldr	r6, [r1, #0]
 8018600:	bf08      	it	eq
 8018602:	694b      	ldreq	r3, [r1, #20]
 8018604:	600f      	str	r7, [r1, #0]
 8018606:	bf18      	it	ne
 8018608:	2300      	movne	r3, #0
 801860a:	eba6 0807 	sub.w	r8, r6, r7
 801860e:	608b      	str	r3, [r1, #8]
 8018610:	f1b8 0f00 	cmp.w	r8, #0
 8018614:	dde9      	ble.n	80185ea <__sflush_r+0xae>
 8018616:	6a21      	ldr	r1, [r4, #32]
 8018618:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801861a:	4643      	mov	r3, r8
 801861c:	463a      	mov	r2, r7
 801861e:	4628      	mov	r0, r5
 8018620:	47b0      	blx	r6
 8018622:	2800      	cmp	r0, #0
 8018624:	dc08      	bgt.n	8018638 <__sflush_r+0xfc>
 8018626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801862a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801862e:	81a3      	strh	r3, [r4, #12]
 8018630:	f04f 30ff 	mov.w	r0, #4294967295
 8018634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018638:	4407      	add	r7, r0
 801863a:	eba8 0800 	sub.w	r8, r8, r0
 801863e:	e7e7      	b.n	8018610 <__sflush_r+0xd4>
 8018640:	dfbffffe 	.word	0xdfbffffe

08018644 <_fflush_r>:
 8018644:	b538      	push	{r3, r4, r5, lr}
 8018646:	690b      	ldr	r3, [r1, #16]
 8018648:	4605      	mov	r5, r0
 801864a:	460c      	mov	r4, r1
 801864c:	b913      	cbnz	r3, 8018654 <_fflush_r+0x10>
 801864e:	2500      	movs	r5, #0
 8018650:	4628      	mov	r0, r5
 8018652:	bd38      	pop	{r3, r4, r5, pc}
 8018654:	b118      	cbz	r0, 801865e <_fflush_r+0x1a>
 8018656:	6a03      	ldr	r3, [r0, #32]
 8018658:	b90b      	cbnz	r3, 801865e <_fflush_r+0x1a>
 801865a:	f7fe f9e7 	bl	8016a2c <__sinit>
 801865e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d0f3      	beq.n	801864e <_fflush_r+0xa>
 8018666:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018668:	07d0      	lsls	r0, r2, #31
 801866a:	d404      	bmi.n	8018676 <_fflush_r+0x32>
 801866c:	0599      	lsls	r1, r3, #22
 801866e:	d402      	bmi.n	8018676 <_fflush_r+0x32>
 8018670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018672:	f7fe fb22 	bl	8016cba <__retarget_lock_acquire_recursive>
 8018676:	4628      	mov	r0, r5
 8018678:	4621      	mov	r1, r4
 801867a:	f7ff ff5f 	bl	801853c <__sflush_r>
 801867e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018680:	07da      	lsls	r2, r3, #31
 8018682:	4605      	mov	r5, r0
 8018684:	d4e4      	bmi.n	8018650 <_fflush_r+0xc>
 8018686:	89a3      	ldrh	r3, [r4, #12]
 8018688:	059b      	lsls	r3, r3, #22
 801868a:	d4e1      	bmi.n	8018650 <_fflush_r+0xc>
 801868c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801868e:	f7fe fb15 	bl	8016cbc <__retarget_lock_release_recursive>
 8018692:	e7dd      	b.n	8018650 <_fflush_r+0xc>

08018694 <memmove>:
 8018694:	4288      	cmp	r0, r1
 8018696:	b510      	push	{r4, lr}
 8018698:	eb01 0402 	add.w	r4, r1, r2
 801869c:	d902      	bls.n	80186a4 <memmove+0x10>
 801869e:	4284      	cmp	r4, r0
 80186a0:	4623      	mov	r3, r4
 80186a2:	d807      	bhi.n	80186b4 <memmove+0x20>
 80186a4:	1e43      	subs	r3, r0, #1
 80186a6:	42a1      	cmp	r1, r4
 80186a8:	d008      	beq.n	80186bc <memmove+0x28>
 80186aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80186b2:	e7f8      	b.n	80186a6 <memmove+0x12>
 80186b4:	4402      	add	r2, r0
 80186b6:	4601      	mov	r1, r0
 80186b8:	428a      	cmp	r2, r1
 80186ba:	d100      	bne.n	80186be <memmove+0x2a>
 80186bc:	bd10      	pop	{r4, pc}
 80186be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186c6:	e7f7      	b.n	80186b8 <memmove+0x24>

080186c8 <_sbrk_r>:
 80186c8:	b538      	push	{r3, r4, r5, lr}
 80186ca:	4d06      	ldr	r5, [pc, #24]	@ (80186e4 <_sbrk_r+0x1c>)
 80186cc:	2300      	movs	r3, #0
 80186ce:	4604      	mov	r4, r0
 80186d0:	4608      	mov	r0, r1
 80186d2:	602b      	str	r3, [r5, #0]
 80186d4:	f7e8 fe68 	bl	80013a8 <_sbrk>
 80186d8:	1c43      	adds	r3, r0, #1
 80186da:	d102      	bne.n	80186e2 <_sbrk_r+0x1a>
 80186dc:	682b      	ldr	r3, [r5, #0]
 80186de:	b103      	cbz	r3, 80186e2 <_sbrk_r+0x1a>
 80186e0:	6023      	str	r3, [r4, #0]
 80186e2:	bd38      	pop	{r3, r4, r5, pc}
 80186e4:	2000896c 	.word	0x2000896c

080186e8 <__assert_func>:
 80186e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80186ea:	4614      	mov	r4, r2
 80186ec:	461a      	mov	r2, r3
 80186ee:	4b09      	ldr	r3, [pc, #36]	@ (8018714 <__assert_func+0x2c>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	4605      	mov	r5, r0
 80186f4:	68d8      	ldr	r0, [r3, #12]
 80186f6:	b954      	cbnz	r4, 801870e <__assert_func+0x26>
 80186f8:	4b07      	ldr	r3, [pc, #28]	@ (8018718 <__assert_func+0x30>)
 80186fa:	461c      	mov	r4, r3
 80186fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018700:	9100      	str	r1, [sp, #0]
 8018702:	462b      	mov	r3, r5
 8018704:	4905      	ldr	r1, [pc, #20]	@ (801871c <__assert_func+0x34>)
 8018706:	f000 f86f 	bl	80187e8 <fiprintf>
 801870a:	f000 f87f 	bl	801880c <abort>
 801870e:	4b04      	ldr	r3, [pc, #16]	@ (8018720 <__assert_func+0x38>)
 8018710:	e7f4      	b.n	80186fc <__assert_func+0x14>
 8018712:	bf00      	nop
 8018714:	20001234 	.word	0x20001234
 8018718:	0801ac06 	.word	0x0801ac06
 801871c:	0801abd8 	.word	0x0801abd8
 8018720:	0801abcb 	.word	0x0801abcb

08018724 <_calloc_r>:
 8018724:	b570      	push	{r4, r5, r6, lr}
 8018726:	fba1 5402 	umull	r5, r4, r1, r2
 801872a:	b93c      	cbnz	r4, 801873c <_calloc_r+0x18>
 801872c:	4629      	mov	r1, r5
 801872e:	f7ff f99f 	bl	8017a70 <_malloc_r>
 8018732:	4606      	mov	r6, r0
 8018734:	b928      	cbnz	r0, 8018742 <_calloc_r+0x1e>
 8018736:	2600      	movs	r6, #0
 8018738:	4630      	mov	r0, r6
 801873a:	bd70      	pop	{r4, r5, r6, pc}
 801873c:	220c      	movs	r2, #12
 801873e:	6002      	str	r2, [r0, #0]
 8018740:	e7f9      	b.n	8018736 <_calloc_r+0x12>
 8018742:	462a      	mov	r2, r5
 8018744:	4621      	mov	r1, r4
 8018746:	f7fe fa2b 	bl	8016ba0 <memset>
 801874a:	e7f5      	b.n	8018738 <_calloc_r+0x14>

0801874c <__ascii_mbtowc>:
 801874c:	b082      	sub	sp, #8
 801874e:	b901      	cbnz	r1, 8018752 <__ascii_mbtowc+0x6>
 8018750:	a901      	add	r1, sp, #4
 8018752:	b142      	cbz	r2, 8018766 <__ascii_mbtowc+0x1a>
 8018754:	b14b      	cbz	r3, 801876a <__ascii_mbtowc+0x1e>
 8018756:	7813      	ldrb	r3, [r2, #0]
 8018758:	600b      	str	r3, [r1, #0]
 801875a:	7812      	ldrb	r2, [r2, #0]
 801875c:	1e10      	subs	r0, r2, #0
 801875e:	bf18      	it	ne
 8018760:	2001      	movne	r0, #1
 8018762:	b002      	add	sp, #8
 8018764:	4770      	bx	lr
 8018766:	4610      	mov	r0, r2
 8018768:	e7fb      	b.n	8018762 <__ascii_mbtowc+0x16>
 801876a:	f06f 0001 	mvn.w	r0, #1
 801876e:	e7f8      	b.n	8018762 <__ascii_mbtowc+0x16>

08018770 <_realloc_r>:
 8018770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018774:	4680      	mov	r8, r0
 8018776:	4615      	mov	r5, r2
 8018778:	460c      	mov	r4, r1
 801877a:	b921      	cbnz	r1, 8018786 <_realloc_r+0x16>
 801877c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018780:	4611      	mov	r1, r2
 8018782:	f7ff b975 	b.w	8017a70 <_malloc_r>
 8018786:	b92a      	cbnz	r2, 8018794 <_realloc_r+0x24>
 8018788:	f7ff f8fe 	bl	8017988 <_free_r>
 801878c:	2400      	movs	r4, #0
 801878e:	4620      	mov	r0, r4
 8018790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018794:	f000 f841 	bl	801881a <_malloc_usable_size_r>
 8018798:	4285      	cmp	r5, r0
 801879a:	4606      	mov	r6, r0
 801879c:	d802      	bhi.n	80187a4 <_realloc_r+0x34>
 801879e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80187a2:	d8f4      	bhi.n	801878e <_realloc_r+0x1e>
 80187a4:	4629      	mov	r1, r5
 80187a6:	4640      	mov	r0, r8
 80187a8:	f7ff f962 	bl	8017a70 <_malloc_r>
 80187ac:	4607      	mov	r7, r0
 80187ae:	2800      	cmp	r0, #0
 80187b0:	d0ec      	beq.n	801878c <_realloc_r+0x1c>
 80187b2:	42b5      	cmp	r5, r6
 80187b4:	462a      	mov	r2, r5
 80187b6:	4621      	mov	r1, r4
 80187b8:	bf28      	it	cs
 80187ba:	4632      	movcs	r2, r6
 80187bc:	f7fe fa87 	bl	8016cce <memcpy>
 80187c0:	4621      	mov	r1, r4
 80187c2:	4640      	mov	r0, r8
 80187c4:	f7ff f8e0 	bl	8017988 <_free_r>
 80187c8:	463c      	mov	r4, r7
 80187ca:	e7e0      	b.n	801878e <_realloc_r+0x1e>

080187cc <__ascii_wctomb>:
 80187cc:	4603      	mov	r3, r0
 80187ce:	4608      	mov	r0, r1
 80187d0:	b141      	cbz	r1, 80187e4 <__ascii_wctomb+0x18>
 80187d2:	2aff      	cmp	r2, #255	@ 0xff
 80187d4:	d904      	bls.n	80187e0 <__ascii_wctomb+0x14>
 80187d6:	228a      	movs	r2, #138	@ 0x8a
 80187d8:	601a      	str	r2, [r3, #0]
 80187da:	f04f 30ff 	mov.w	r0, #4294967295
 80187de:	4770      	bx	lr
 80187e0:	700a      	strb	r2, [r1, #0]
 80187e2:	2001      	movs	r0, #1
 80187e4:	4770      	bx	lr
	...

080187e8 <fiprintf>:
 80187e8:	b40e      	push	{r1, r2, r3}
 80187ea:	b503      	push	{r0, r1, lr}
 80187ec:	4601      	mov	r1, r0
 80187ee:	ab03      	add	r3, sp, #12
 80187f0:	4805      	ldr	r0, [pc, #20]	@ (8018808 <fiprintf+0x20>)
 80187f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80187f6:	6800      	ldr	r0, [r0, #0]
 80187f8:	9301      	str	r3, [sp, #4]
 80187fa:	f000 f83f 	bl	801887c <_vfiprintf_r>
 80187fe:	b002      	add	sp, #8
 8018800:	f85d eb04 	ldr.w	lr, [sp], #4
 8018804:	b003      	add	sp, #12
 8018806:	4770      	bx	lr
 8018808:	20001234 	.word	0x20001234

0801880c <abort>:
 801880c:	b508      	push	{r3, lr}
 801880e:	2006      	movs	r0, #6
 8018810:	f000 fa08 	bl	8018c24 <raise>
 8018814:	2001      	movs	r0, #1
 8018816:	f7e8 fd4f 	bl	80012b8 <_exit>

0801881a <_malloc_usable_size_r>:
 801881a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801881e:	1f18      	subs	r0, r3, #4
 8018820:	2b00      	cmp	r3, #0
 8018822:	bfbc      	itt	lt
 8018824:	580b      	ldrlt	r3, [r1, r0]
 8018826:	18c0      	addlt	r0, r0, r3
 8018828:	4770      	bx	lr

0801882a <__sfputc_r>:
 801882a:	6893      	ldr	r3, [r2, #8]
 801882c:	3b01      	subs	r3, #1
 801882e:	2b00      	cmp	r3, #0
 8018830:	b410      	push	{r4}
 8018832:	6093      	str	r3, [r2, #8]
 8018834:	da08      	bge.n	8018848 <__sfputc_r+0x1e>
 8018836:	6994      	ldr	r4, [r2, #24]
 8018838:	42a3      	cmp	r3, r4
 801883a:	db01      	blt.n	8018840 <__sfputc_r+0x16>
 801883c:	290a      	cmp	r1, #10
 801883e:	d103      	bne.n	8018848 <__sfputc_r+0x1e>
 8018840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018844:	f000 b932 	b.w	8018aac <__swbuf_r>
 8018848:	6813      	ldr	r3, [r2, #0]
 801884a:	1c58      	adds	r0, r3, #1
 801884c:	6010      	str	r0, [r2, #0]
 801884e:	7019      	strb	r1, [r3, #0]
 8018850:	4608      	mov	r0, r1
 8018852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018856:	4770      	bx	lr

08018858 <__sfputs_r>:
 8018858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801885a:	4606      	mov	r6, r0
 801885c:	460f      	mov	r7, r1
 801885e:	4614      	mov	r4, r2
 8018860:	18d5      	adds	r5, r2, r3
 8018862:	42ac      	cmp	r4, r5
 8018864:	d101      	bne.n	801886a <__sfputs_r+0x12>
 8018866:	2000      	movs	r0, #0
 8018868:	e007      	b.n	801887a <__sfputs_r+0x22>
 801886a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801886e:	463a      	mov	r2, r7
 8018870:	4630      	mov	r0, r6
 8018872:	f7ff ffda 	bl	801882a <__sfputc_r>
 8018876:	1c43      	adds	r3, r0, #1
 8018878:	d1f3      	bne.n	8018862 <__sfputs_r+0xa>
 801887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801887c <_vfiprintf_r>:
 801887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018880:	460d      	mov	r5, r1
 8018882:	b09d      	sub	sp, #116	@ 0x74
 8018884:	4614      	mov	r4, r2
 8018886:	4698      	mov	r8, r3
 8018888:	4606      	mov	r6, r0
 801888a:	b118      	cbz	r0, 8018894 <_vfiprintf_r+0x18>
 801888c:	6a03      	ldr	r3, [r0, #32]
 801888e:	b90b      	cbnz	r3, 8018894 <_vfiprintf_r+0x18>
 8018890:	f7fe f8cc 	bl	8016a2c <__sinit>
 8018894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018896:	07d9      	lsls	r1, r3, #31
 8018898:	d405      	bmi.n	80188a6 <_vfiprintf_r+0x2a>
 801889a:	89ab      	ldrh	r3, [r5, #12]
 801889c:	059a      	lsls	r2, r3, #22
 801889e:	d402      	bmi.n	80188a6 <_vfiprintf_r+0x2a>
 80188a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80188a2:	f7fe fa0a 	bl	8016cba <__retarget_lock_acquire_recursive>
 80188a6:	89ab      	ldrh	r3, [r5, #12]
 80188a8:	071b      	lsls	r3, r3, #28
 80188aa:	d501      	bpl.n	80188b0 <_vfiprintf_r+0x34>
 80188ac:	692b      	ldr	r3, [r5, #16]
 80188ae:	b99b      	cbnz	r3, 80188d8 <_vfiprintf_r+0x5c>
 80188b0:	4629      	mov	r1, r5
 80188b2:	4630      	mov	r0, r6
 80188b4:	f000 f938 	bl	8018b28 <__swsetup_r>
 80188b8:	b170      	cbz	r0, 80188d8 <_vfiprintf_r+0x5c>
 80188ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80188bc:	07dc      	lsls	r4, r3, #31
 80188be:	d504      	bpl.n	80188ca <_vfiprintf_r+0x4e>
 80188c0:	f04f 30ff 	mov.w	r0, #4294967295
 80188c4:	b01d      	add	sp, #116	@ 0x74
 80188c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ca:	89ab      	ldrh	r3, [r5, #12]
 80188cc:	0598      	lsls	r0, r3, #22
 80188ce:	d4f7      	bmi.n	80188c0 <_vfiprintf_r+0x44>
 80188d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80188d2:	f7fe f9f3 	bl	8016cbc <__retarget_lock_release_recursive>
 80188d6:	e7f3      	b.n	80188c0 <_vfiprintf_r+0x44>
 80188d8:	2300      	movs	r3, #0
 80188da:	9309      	str	r3, [sp, #36]	@ 0x24
 80188dc:	2320      	movs	r3, #32
 80188de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80188e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80188e6:	2330      	movs	r3, #48	@ 0x30
 80188e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018a98 <_vfiprintf_r+0x21c>
 80188ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80188f0:	f04f 0901 	mov.w	r9, #1
 80188f4:	4623      	mov	r3, r4
 80188f6:	469a      	mov	sl, r3
 80188f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188fc:	b10a      	cbz	r2, 8018902 <_vfiprintf_r+0x86>
 80188fe:	2a25      	cmp	r2, #37	@ 0x25
 8018900:	d1f9      	bne.n	80188f6 <_vfiprintf_r+0x7a>
 8018902:	ebba 0b04 	subs.w	fp, sl, r4
 8018906:	d00b      	beq.n	8018920 <_vfiprintf_r+0xa4>
 8018908:	465b      	mov	r3, fp
 801890a:	4622      	mov	r2, r4
 801890c:	4629      	mov	r1, r5
 801890e:	4630      	mov	r0, r6
 8018910:	f7ff ffa2 	bl	8018858 <__sfputs_r>
 8018914:	3001      	adds	r0, #1
 8018916:	f000 80a7 	beq.w	8018a68 <_vfiprintf_r+0x1ec>
 801891a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801891c:	445a      	add	r2, fp
 801891e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018920:	f89a 3000 	ldrb.w	r3, [sl]
 8018924:	2b00      	cmp	r3, #0
 8018926:	f000 809f 	beq.w	8018a68 <_vfiprintf_r+0x1ec>
 801892a:	2300      	movs	r3, #0
 801892c:	f04f 32ff 	mov.w	r2, #4294967295
 8018930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018934:	f10a 0a01 	add.w	sl, sl, #1
 8018938:	9304      	str	r3, [sp, #16]
 801893a:	9307      	str	r3, [sp, #28]
 801893c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018940:	931a      	str	r3, [sp, #104]	@ 0x68
 8018942:	4654      	mov	r4, sl
 8018944:	2205      	movs	r2, #5
 8018946:	f814 1b01 	ldrb.w	r1, [r4], #1
 801894a:	4853      	ldr	r0, [pc, #332]	@ (8018a98 <_vfiprintf_r+0x21c>)
 801894c:	f7e7 fc60 	bl	8000210 <memchr>
 8018950:	9a04      	ldr	r2, [sp, #16]
 8018952:	b9d8      	cbnz	r0, 801898c <_vfiprintf_r+0x110>
 8018954:	06d1      	lsls	r1, r2, #27
 8018956:	bf44      	itt	mi
 8018958:	2320      	movmi	r3, #32
 801895a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801895e:	0713      	lsls	r3, r2, #28
 8018960:	bf44      	itt	mi
 8018962:	232b      	movmi	r3, #43	@ 0x2b
 8018964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018968:	f89a 3000 	ldrb.w	r3, [sl]
 801896c:	2b2a      	cmp	r3, #42	@ 0x2a
 801896e:	d015      	beq.n	801899c <_vfiprintf_r+0x120>
 8018970:	9a07      	ldr	r2, [sp, #28]
 8018972:	4654      	mov	r4, sl
 8018974:	2000      	movs	r0, #0
 8018976:	f04f 0c0a 	mov.w	ip, #10
 801897a:	4621      	mov	r1, r4
 801897c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018980:	3b30      	subs	r3, #48	@ 0x30
 8018982:	2b09      	cmp	r3, #9
 8018984:	d94b      	bls.n	8018a1e <_vfiprintf_r+0x1a2>
 8018986:	b1b0      	cbz	r0, 80189b6 <_vfiprintf_r+0x13a>
 8018988:	9207      	str	r2, [sp, #28]
 801898a:	e014      	b.n	80189b6 <_vfiprintf_r+0x13a>
 801898c:	eba0 0308 	sub.w	r3, r0, r8
 8018990:	fa09 f303 	lsl.w	r3, r9, r3
 8018994:	4313      	orrs	r3, r2
 8018996:	9304      	str	r3, [sp, #16]
 8018998:	46a2      	mov	sl, r4
 801899a:	e7d2      	b.n	8018942 <_vfiprintf_r+0xc6>
 801899c:	9b03      	ldr	r3, [sp, #12]
 801899e:	1d19      	adds	r1, r3, #4
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	9103      	str	r1, [sp, #12]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	bfbb      	ittet	lt
 80189a8:	425b      	neglt	r3, r3
 80189aa:	f042 0202 	orrlt.w	r2, r2, #2
 80189ae:	9307      	strge	r3, [sp, #28]
 80189b0:	9307      	strlt	r3, [sp, #28]
 80189b2:	bfb8      	it	lt
 80189b4:	9204      	strlt	r2, [sp, #16]
 80189b6:	7823      	ldrb	r3, [r4, #0]
 80189b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80189ba:	d10a      	bne.n	80189d2 <_vfiprintf_r+0x156>
 80189bc:	7863      	ldrb	r3, [r4, #1]
 80189be:	2b2a      	cmp	r3, #42	@ 0x2a
 80189c0:	d132      	bne.n	8018a28 <_vfiprintf_r+0x1ac>
 80189c2:	9b03      	ldr	r3, [sp, #12]
 80189c4:	1d1a      	adds	r2, r3, #4
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	9203      	str	r2, [sp, #12]
 80189ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80189ce:	3402      	adds	r4, #2
 80189d0:	9305      	str	r3, [sp, #20]
 80189d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018aa8 <_vfiprintf_r+0x22c>
 80189d6:	7821      	ldrb	r1, [r4, #0]
 80189d8:	2203      	movs	r2, #3
 80189da:	4650      	mov	r0, sl
 80189dc:	f7e7 fc18 	bl	8000210 <memchr>
 80189e0:	b138      	cbz	r0, 80189f2 <_vfiprintf_r+0x176>
 80189e2:	9b04      	ldr	r3, [sp, #16]
 80189e4:	eba0 000a 	sub.w	r0, r0, sl
 80189e8:	2240      	movs	r2, #64	@ 0x40
 80189ea:	4082      	lsls	r2, r0
 80189ec:	4313      	orrs	r3, r2
 80189ee:	3401      	adds	r4, #1
 80189f0:	9304      	str	r3, [sp, #16]
 80189f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189f6:	4829      	ldr	r0, [pc, #164]	@ (8018a9c <_vfiprintf_r+0x220>)
 80189f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80189fc:	2206      	movs	r2, #6
 80189fe:	f7e7 fc07 	bl	8000210 <memchr>
 8018a02:	2800      	cmp	r0, #0
 8018a04:	d03f      	beq.n	8018a86 <_vfiprintf_r+0x20a>
 8018a06:	4b26      	ldr	r3, [pc, #152]	@ (8018aa0 <_vfiprintf_r+0x224>)
 8018a08:	bb1b      	cbnz	r3, 8018a52 <_vfiprintf_r+0x1d6>
 8018a0a:	9b03      	ldr	r3, [sp, #12]
 8018a0c:	3307      	adds	r3, #7
 8018a0e:	f023 0307 	bic.w	r3, r3, #7
 8018a12:	3308      	adds	r3, #8
 8018a14:	9303      	str	r3, [sp, #12]
 8018a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a18:	443b      	add	r3, r7
 8018a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a1c:	e76a      	b.n	80188f4 <_vfiprintf_r+0x78>
 8018a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018a22:	460c      	mov	r4, r1
 8018a24:	2001      	movs	r0, #1
 8018a26:	e7a8      	b.n	801897a <_vfiprintf_r+0xfe>
 8018a28:	2300      	movs	r3, #0
 8018a2a:	3401      	adds	r4, #1
 8018a2c:	9305      	str	r3, [sp, #20]
 8018a2e:	4619      	mov	r1, r3
 8018a30:	f04f 0c0a 	mov.w	ip, #10
 8018a34:	4620      	mov	r0, r4
 8018a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a3a:	3a30      	subs	r2, #48	@ 0x30
 8018a3c:	2a09      	cmp	r2, #9
 8018a3e:	d903      	bls.n	8018a48 <_vfiprintf_r+0x1cc>
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d0c6      	beq.n	80189d2 <_vfiprintf_r+0x156>
 8018a44:	9105      	str	r1, [sp, #20]
 8018a46:	e7c4      	b.n	80189d2 <_vfiprintf_r+0x156>
 8018a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a4c:	4604      	mov	r4, r0
 8018a4e:	2301      	movs	r3, #1
 8018a50:	e7f0      	b.n	8018a34 <_vfiprintf_r+0x1b8>
 8018a52:	ab03      	add	r3, sp, #12
 8018a54:	9300      	str	r3, [sp, #0]
 8018a56:	462a      	mov	r2, r5
 8018a58:	4b12      	ldr	r3, [pc, #72]	@ (8018aa4 <_vfiprintf_r+0x228>)
 8018a5a:	a904      	add	r1, sp, #16
 8018a5c:	4630      	mov	r0, r6
 8018a5e:	f7fd fba1 	bl	80161a4 <_printf_float>
 8018a62:	4607      	mov	r7, r0
 8018a64:	1c78      	adds	r0, r7, #1
 8018a66:	d1d6      	bne.n	8018a16 <_vfiprintf_r+0x19a>
 8018a68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018a6a:	07d9      	lsls	r1, r3, #31
 8018a6c:	d405      	bmi.n	8018a7a <_vfiprintf_r+0x1fe>
 8018a6e:	89ab      	ldrh	r3, [r5, #12]
 8018a70:	059a      	lsls	r2, r3, #22
 8018a72:	d402      	bmi.n	8018a7a <_vfiprintf_r+0x1fe>
 8018a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018a76:	f7fe f921 	bl	8016cbc <__retarget_lock_release_recursive>
 8018a7a:	89ab      	ldrh	r3, [r5, #12]
 8018a7c:	065b      	lsls	r3, r3, #25
 8018a7e:	f53f af1f 	bmi.w	80188c0 <_vfiprintf_r+0x44>
 8018a82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018a84:	e71e      	b.n	80188c4 <_vfiprintf_r+0x48>
 8018a86:	ab03      	add	r3, sp, #12
 8018a88:	9300      	str	r3, [sp, #0]
 8018a8a:	462a      	mov	r2, r5
 8018a8c:	4b05      	ldr	r3, [pc, #20]	@ (8018aa4 <_vfiprintf_r+0x228>)
 8018a8e:	a904      	add	r1, sp, #16
 8018a90:	4630      	mov	r0, r6
 8018a92:	f7fd fe1f 	bl	80166d4 <_printf_i>
 8018a96:	e7e4      	b.n	8018a62 <_vfiprintf_r+0x1e6>
 8018a98:	0801abb0 	.word	0x0801abb0
 8018a9c:	0801abba 	.word	0x0801abba
 8018aa0:	080161a5 	.word	0x080161a5
 8018aa4:	08018859 	.word	0x08018859
 8018aa8:	0801abb6 	.word	0x0801abb6

08018aac <__swbuf_r>:
 8018aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aae:	460e      	mov	r6, r1
 8018ab0:	4614      	mov	r4, r2
 8018ab2:	4605      	mov	r5, r0
 8018ab4:	b118      	cbz	r0, 8018abe <__swbuf_r+0x12>
 8018ab6:	6a03      	ldr	r3, [r0, #32]
 8018ab8:	b90b      	cbnz	r3, 8018abe <__swbuf_r+0x12>
 8018aba:	f7fd ffb7 	bl	8016a2c <__sinit>
 8018abe:	69a3      	ldr	r3, [r4, #24]
 8018ac0:	60a3      	str	r3, [r4, #8]
 8018ac2:	89a3      	ldrh	r3, [r4, #12]
 8018ac4:	071a      	lsls	r2, r3, #28
 8018ac6:	d501      	bpl.n	8018acc <__swbuf_r+0x20>
 8018ac8:	6923      	ldr	r3, [r4, #16]
 8018aca:	b943      	cbnz	r3, 8018ade <__swbuf_r+0x32>
 8018acc:	4621      	mov	r1, r4
 8018ace:	4628      	mov	r0, r5
 8018ad0:	f000 f82a 	bl	8018b28 <__swsetup_r>
 8018ad4:	b118      	cbz	r0, 8018ade <__swbuf_r+0x32>
 8018ad6:	f04f 37ff 	mov.w	r7, #4294967295
 8018ada:	4638      	mov	r0, r7
 8018adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ade:	6823      	ldr	r3, [r4, #0]
 8018ae0:	6922      	ldr	r2, [r4, #16]
 8018ae2:	1a98      	subs	r0, r3, r2
 8018ae4:	6963      	ldr	r3, [r4, #20]
 8018ae6:	b2f6      	uxtb	r6, r6
 8018ae8:	4283      	cmp	r3, r0
 8018aea:	4637      	mov	r7, r6
 8018aec:	dc05      	bgt.n	8018afa <__swbuf_r+0x4e>
 8018aee:	4621      	mov	r1, r4
 8018af0:	4628      	mov	r0, r5
 8018af2:	f7ff fda7 	bl	8018644 <_fflush_r>
 8018af6:	2800      	cmp	r0, #0
 8018af8:	d1ed      	bne.n	8018ad6 <__swbuf_r+0x2a>
 8018afa:	68a3      	ldr	r3, [r4, #8]
 8018afc:	3b01      	subs	r3, #1
 8018afe:	60a3      	str	r3, [r4, #8]
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	1c5a      	adds	r2, r3, #1
 8018b04:	6022      	str	r2, [r4, #0]
 8018b06:	701e      	strb	r6, [r3, #0]
 8018b08:	6962      	ldr	r2, [r4, #20]
 8018b0a:	1c43      	adds	r3, r0, #1
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d004      	beq.n	8018b1a <__swbuf_r+0x6e>
 8018b10:	89a3      	ldrh	r3, [r4, #12]
 8018b12:	07db      	lsls	r3, r3, #31
 8018b14:	d5e1      	bpl.n	8018ada <__swbuf_r+0x2e>
 8018b16:	2e0a      	cmp	r6, #10
 8018b18:	d1df      	bne.n	8018ada <__swbuf_r+0x2e>
 8018b1a:	4621      	mov	r1, r4
 8018b1c:	4628      	mov	r0, r5
 8018b1e:	f7ff fd91 	bl	8018644 <_fflush_r>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	d0d9      	beq.n	8018ada <__swbuf_r+0x2e>
 8018b26:	e7d6      	b.n	8018ad6 <__swbuf_r+0x2a>

08018b28 <__swsetup_r>:
 8018b28:	b538      	push	{r3, r4, r5, lr}
 8018b2a:	4b29      	ldr	r3, [pc, #164]	@ (8018bd0 <__swsetup_r+0xa8>)
 8018b2c:	4605      	mov	r5, r0
 8018b2e:	6818      	ldr	r0, [r3, #0]
 8018b30:	460c      	mov	r4, r1
 8018b32:	b118      	cbz	r0, 8018b3c <__swsetup_r+0x14>
 8018b34:	6a03      	ldr	r3, [r0, #32]
 8018b36:	b90b      	cbnz	r3, 8018b3c <__swsetup_r+0x14>
 8018b38:	f7fd ff78 	bl	8016a2c <__sinit>
 8018b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b40:	0719      	lsls	r1, r3, #28
 8018b42:	d422      	bmi.n	8018b8a <__swsetup_r+0x62>
 8018b44:	06da      	lsls	r2, r3, #27
 8018b46:	d407      	bmi.n	8018b58 <__swsetup_r+0x30>
 8018b48:	2209      	movs	r2, #9
 8018b4a:	602a      	str	r2, [r5, #0]
 8018b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b50:	81a3      	strh	r3, [r4, #12]
 8018b52:	f04f 30ff 	mov.w	r0, #4294967295
 8018b56:	e033      	b.n	8018bc0 <__swsetup_r+0x98>
 8018b58:	0758      	lsls	r0, r3, #29
 8018b5a:	d512      	bpl.n	8018b82 <__swsetup_r+0x5a>
 8018b5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018b5e:	b141      	cbz	r1, 8018b72 <__swsetup_r+0x4a>
 8018b60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018b64:	4299      	cmp	r1, r3
 8018b66:	d002      	beq.n	8018b6e <__swsetup_r+0x46>
 8018b68:	4628      	mov	r0, r5
 8018b6a:	f7fe ff0d 	bl	8017988 <_free_r>
 8018b6e:	2300      	movs	r3, #0
 8018b70:	6363      	str	r3, [r4, #52]	@ 0x34
 8018b72:	89a3      	ldrh	r3, [r4, #12]
 8018b74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018b78:	81a3      	strh	r3, [r4, #12]
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	6063      	str	r3, [r4, #4]
 8018b7e:	6923      	ldr	r3, [r4, #16]
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	89a3      	ldrh	r3, [r4, #12]
 8018b84:	f043 0308 	orr.w	r3, r3, #8
 8018b88:	81a3      	strh	r3, [r4, #12]
 8018b8a:	6923      	ldr	r3, [r4, #16]
 8018b8c:	b94b      	cbnz	r3, 8018ba2 <__swsetup_r+0x7a>
 8018b8e:	89a3      	ldrh	r3, [r4, #12]
 8018b90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018b98:	d003      	beq.n	8018ba2 <__swsetup_r+0x7a>
 8018b9a:	4621      	mov	r1, r4
 8018b9c:	4628      	mov	r0, r5
 8018b9e:	f000 f883 	bl	8018ca8 <__smakebuf_r>
 8018ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ba6:	f013 0201 	ands.w	r2, r3, #1
 8018baa:	d00a      	beq.n	8018bc2 <__swsetup_r+0x9a>
 8018bac:	2200      	movs	r2, #0
 8018bae:	60a2      	str	r2, [r4, #8]
 8018bb0:	6962      	ldr	r2, [r4, #20]
 8018bb2:	4252      	negs	r2, r2
 8018bb4:	61a2      	str	r2, [r4, #24]
 8018bb6:	6922      	ldr	r2, [r4, #16]
 8018bb8:	b942      	cbnz	r2, 8018bcc <__swsetup_r+0xa4>
 8018bba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018bbe:	d1c5      	bne.n	8018b4c <__swsetup_r+0x24>
 8018bc0:	bd38      	pop	{r3, r4, r5, pc}
 8018bc2:	0799      	lsls	r1, r3, #30
 8018bc4:	bf58      	it	pl
 8018bc6:	6962      	ldrpl	r2, [r4, #20]
 8018bc8:	60a2      	str	r2, [r4, #8]
 8018bca:	e7f4      	b.n	8018bb6 <__swsetup_r+0x8e>
 8018bcc:	2000      	movs	r0, #0
 8018bce:	e7f7      	b.n	8018bc0 <__swsetup_r+0x98>
 8018bd0:	20001234 	.word	0x20001234

08018bd4 <_raise_r>:
 8018bd4:	291f      	cmp	r1, #31
 8018bd6:	b538      	push	{r3, r4, r5, lr}
 8018bd8:	4605      	mov	r5, r0
 8018bda:	460c      	mov	r4, r1
 8018bdc:	d904      	bls.n	8018be8 <_raise_r+0x14>
 8018bde:	2316      	movs	r3, #22
 8018be0:	6003      	str	r3, [r0, #0]
 8018be2:	f04f 30ff 	mov.w	r0, #4294967295
 8018be6:	bd38      	pop	{r3, r4, r5, pc}
 8018be8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018bea:	b112      	cbz	r2, 8018bf2 <_raise_r+0x1e>
 8018bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018bf0:	b94b      	cbnz	r3, 8018c06 <_raise_r+0x32>
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	f000 f830 	bl	8018c58 <_getpid_r>
 8018bf8:	4622      	mov	r2, r4
 8018bfa:	4601      	mov	r1, r0
 8018bfc:	4628      	mov	r0, r5
 8018bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c02:	f000 b817 	b.w	8018c34 <_kill_r>
 8018c06:	2b01      	cmp	r3, #1
 8018c08:	d00a      	beq.n	8018c20 <_raise_r+0x4c>
 8018c0a:	1c59      	adds	r1, r3, #1
 8018c0c:	d103      	bne.n	8018c16 <_raise_r+0x42>
 8018c0e:	2316      	movs	r3, #22
 8018c10:	6003      	str	r3, [r0, #0]
 8018c12:	2001      	movs	r0, #1
 8018c14:	e7e7      	b.n	8018be6 <_raise_r+0x12>
 8018c16:	2100      	movs	r1, #0
 8018c18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	4798      	blx	r3
 8018c20:	2000      	movs	r0, #0
 8018c22:	e7e0      	b.n	8018be6 <_raise_r+0x12>

08018c24 <raise>:
 8018c24:	4b02      	ldr	r3, [pc, #8]	@ (8018c30 <raise+0xc>)
 8018c26:	4601      	mov	r1, r0
 8018c28:	6818      	ldr	r0, [r3, #0]
 8018c2a:	f7ff bfd3 	b.w	8018bd4 <_raise_r>
 8018c2e:	bf00      	nop
 8018c30:	20001234 	.word	0x20001234

08018c34 <_kill_r>:
 8018c34:	b538      	push	{r3, r4, r5, lr}
 8018c36:	4d07      	ldr	r5, [pc, #28]	@ (8018c54 <_kill_r+0x20>)
 8018c38:	2300      	movs	r3, #0
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	4608      	mov	r0, r1
 8018c3e:	4611      	mov	r1, r2
 8018c40:	602b      	str	r3, [r5, #0]
 8018c42:	f7e8 fb29 	bl	8001298 <_kill>
 8018c46:	1c43      	adds	r3, r0, #1
 8018c48:	d102      	bne.n	8018c50 <_kill_r+0x1c>
 8018c4a:	682b      	ldr	r3, [r5, #0]
 8018c4c:	b103      	cbz	r3, 8018c50 <_kill_r+0x1c>
 8018c4e:	6023      	str	r3, [r4, #0]
 8018c50:	bd38      	pop	{r3, r4, r5, pc}
 8018c52:	bf00      	nop
 8018c54:	2000896c 	.word	0x2000896c

08018c58 <_getpid_r>:
 8018c58:	f7e8 bb16 	b.w	8001288 <_getpid>

08018c5c <__swhatbuf_r>:
 8018c5c:	b570      	push	{r4, r5, r6, lr}
 8018c5e:	460c      	mov	r4, r1
 8018c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c64:	2900      	cmp	r1, #0
 8018c66:	b096      	sub	sp, #88	@ 0x58
 8018c68:	4615      	mov	r5, r2
 8018c6a:	461e      	mov	r6, r3
 8018c6c:	da0d      	bge.n	8018c8a <__swhatbuf_r+0x2e>
 8018c6e:	89a3      	ldrh	r3, [r4, #12]
 8018c70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018c74:	f04f 0100 	mov.w	r1, #0
 8018c78:	bf14      	ite	ne
 8018c7a:	2340      	movne	r3, #64	@ 0x40
 8018c7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018c80:	2000      	movs	r0, #0
 8018c82:	6031      	str	r1, [r6, #0]
 8018c84:	602b      	str	r3, [r5, #0]
 8018c86:	b016      	add	sp, #88	@ 0x58
 8018c88:	bd70      	pop	{r4, r5, r6, pc}
 8018c8a:	466a      	mov	r2, sp
 8018c8c:	f000 f848 	bl	8018d20 <_fstat_r>
 8018c90:	2800      	cmp	r0, #0
 8018c92:	dbec      	blt.n	8018c6e <__swhatbuf_r+0x12>
 8018c94:	9901      	ldr	r1, [sp, #4]
 8018c96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018c9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018c9e:	4259      	negs	r1, r3
 8018ca0:	4159      	adcs	r1, r3
 8018ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018ca6:	e7eb      	b.n	8018c80 <__swhatbuf_r+0x24>

08018ca8 <__smakebuf_r>:
 8018ca8:	898b      	ldrh	r3, [r1, #12]
 8018caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018cac:	079d      	lsls	r5, r3, #30
 8018cae:	4606      	mov	r6, r0
 8018cb0:	460c      	mov	r4, r1
 8018cb2:	d507      	bpl.n	8018cc4 <__smakebuf_r+0x1c>
 8018cb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018cb8:	6023      	str	r3, [r4, #0]
 8018cba:	6123      	str	r3, [r4, #16]
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	6163      	str	r3, [r4, #20]
 8018cc0:	b003      	add	sp, #12
 8018cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cc4:	ab01      	add	r3, sp, #4
 8018cc6:	466a      	mov	r2, sp
 8018cc8:	f7ff ffc8 	bl	8018c5c <__swhatbuf_r>
 8018ccc:	9f00      	ldr	r7, [sp, #0]
 8018cce:	4605      	mov	r5, r0
 8018cd0:	4639      	mov	r1, r7
 8018cd2:	4630      	mov	r0, r6
 8018cd4:	f7fe fecc 	bl	8017a70 <_malloc_r>
 8018cd8:	b948      	cbnz	r0, 8018cee <__smakebuf_r+0x46>
 8018cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cde:	059a      	lsls	r2, r3, #22
 8018ce0:	d4ee      	bmi.n	8018cc0 <__smakebuf_r+0x18>
 8018ce2:	f023 0303 	bic.w	r3, r3, #3
 8018ce6:	f043 0302 	orr.w	r3, r3, #2
 8018cea:	81a3      	strh	r3, [r4, #12]
 8018cec:	e7e2      	b.n	8018cb4 <__smakebuf_r+0xc>
 8018cee:	89a3      	ldrh	r3, [r4, #12]
 8018cf0:	6020      	str	r0, [r4, #0]
 8018cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cf6:	81a3      	strh	r3, [r4, #12]
 8018cf8:	9b01      	ldr	r3, [sp, #4]
 8018cfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018cfe:	b15b      	cbz	r3, 8018d18 <__smakebuf_r+0x70>
 8018d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d04:	4630      	mov	r0, r6
 8018d06:	f000 f81d 	bl	8018d44 <_isatty_r>
 8018d0a:	b128      	cbz	r0, 8018d18 <__smakebuf_r+0x70>
 8018d0c:	89a3      	ldrh	r3, [r4, #12]
 8018d0e:	f023 0303 	bic.w	r3, r3, #3
 8018d12:	f043 0301 	orr.w	r3, r3, #1
 8018d16:	81a3      	strh	r3, [r4, #12]
 8018d18:	89a3      	ldrh	r3, [r4, #12]
 8018d1a:	431d      	orrs	r5, r3
 8018d1c:	81a5      	strh	r5, [r4, #12]
 8018d1e:	e7cf      	b.n	8018cc0 <__smakebuf_r+0x18>

08018d20 <_fstat_r>:
 8018d20:	b538      	push	{r3, r4, r5, lr}
 8018d22:	4d07      	ldr	r5, [pc, #28]	@ (8018d40 <_fstat_r+0x20>)
 8018d24:	2300      	movs	r3, #0
 8018d26:	4604      	mov	r4, r0
 8018d28:	4608      	mov	r0, r1
 8018d2a:	4611      	mov	r1, r2
 8018d2c:	602b      	str	r3, [r5, #0]
 8018d2e:	f7e8 fb13 	bl	8001358 <_fstat>
 8018d32:	1c43      	adds	r3, r0, #1
 8018d34:	d102      	bne.n	8018d3c <_fstat_r+0x1c>
 8018d36:	682b      	ldr	r3, [r5, #0]
 8018d38:	b103      	cbz	r3, 8018d3c <_fstat_r+0x1c>
 8018d3a:	6023      	str	r3, [r4, #0]
 8018d3c:	bd38      	pop	{r3, r4, r5, pc}
 8018d3e:	bf00      	nop
 8018d40:	2000896c 	.word	0x2000896c

08018d44 <_isatty_r>:
 8018d44:	b538      	push	{r3, r4, r5, lr}
 8018d46:	4d06      	ldr	r5, [pc, #24]	@ (8018d60 <_isatty_r+0x1c>)
 8018d48:	2300      	movs	r3, #0
 8018d4a:	4604      	mov	r4, r0
 8018d4c:	4608      	mov	r0, r1
 8018d4e:	602b      	str	r3, [r5, #0]
 8018d50:	f7e8 fb12 	bl	8001378 <_isatty>
 8018d54:	1c43      	adds	r3, r0, #1
 8018d56:	d102      	bne.n	8018d5e <_isatty_r+0x1a>
 8018d58:	682b      	ldr	r3, [r5, #0]
 8018d5a:	b103      	cbz	r3, 8018d5e <_isatty_r+0x1a>
 8018d5c:	6023      	str	r3, [r4, #0]
 8018d5e:	bd38      	pop	{r3, r4, r5, pc}
 8018d60:	2000896c 	.word	0x2000896c

08018d64 <_init>:
 8018d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d66:	bf00      	nop
 8018d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d6a:	bc08      	pop	{r3}
 8018d6c:	469e      	mov	lr, r3
 8018d6e:	4770      	bx	lr

08018d70 <_fini>:
 8018d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d72:	bf00      	nop
 8018d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d76:	bc08      	pop	{r3}
 8018d78:	469e      	mov	lr, r3
 8018d7a:	4770      	bx	lr
